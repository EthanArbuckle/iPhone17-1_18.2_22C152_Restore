void sub_10092C954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100419F34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10092C968(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

unint64_t sub_10092C998(unint64_t result)
{
  if (result <= 0x1A && ((1 << result) & 0x6000001) != 0) {
    LOBYTE(result) = 0;
  }
  return result;
}

void sub_10092C9C4(int *a1, float *a2, uint64_t a3)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D4108);
  }
  v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *a1;
    float v8 = *a2;
    int v9 = *((_DWORD *)a2 + 1);
    int v10 = a1[3];
    int v11 = *((_DWORD *)a2 + 3);
    int v12 = *((_DWORD *)a2 + 4);
    double v13 = a2[9];
    int v14 = *((_DWORD *)a2 + 13);
    uint64_t v15 = *((void *)a2 + 7);
    uint64_t v16 = *((void *)a2 + 10);
    uint64_t v17 = *((void *)a2 + 5);
    int v18 = *((unsigned __int8 *)a2 + 32);
    int v19 = *((_DWORD *)a2 + 22);
    int v20 = *((_DWORD *)a2 + 23);
    unsigned int v21 = *((unsigned __int8 *)a2 + 96);
    uint64_t v22 = a3;
    int v23 = *((_DWORD *)a2 + 16);
    int v24 = *((_DWORD *)a2 + 26);
    uint64_t v26 = *((void *)a2 + 14);
    uint64_t v25 = *((void *)a2 + 15);
    int v27 = *((_DWORD *)a2 + 32);
    *(_DWORD *)buf = 67115266;
    int v30 = v7;
    __int16 v31 = 1024;
    float v32 = v8;
    __int16 v33 = 1024;
    int v34 = v9;
    __int16 v35 = 1024;
    int v36 = v10;
    __int16 v37 = 1024;
    int v38 = v11;
    __int16 v39 = 1024;
    int v40 = v12;
    __int16 v41 = 2048;
    double v42 = v13;
    __int16 v43 = 1024;
    int v44 = v14;
    __int16 v45 = 2048;
    uint64_t v46 = v15;
    __int16 v47 = 2048;
    uint64_t v48 = v16;
    __int16 v49 = 2048;
    uint64_t v50 = v17;
    __int16 v51 = 1024;
    int v52 = v18;
    __int16 v53 = 1024;
    int v54 = v19;
    __int16 v55 = 1024;
    int v56 = v20;
    __int16 v57 = 1024;
    int v58 = v21 & 1;
    __int16 v59 = 1024;
    int v60 = (v21 >> 2) & 1;
    __int16 v61 = 1024;
    int v62 = (v21 >> 3) & 1;
    __int16 v63 = 1024;
    int v64 = (v21 >> 4) & 1;
    __int16 v65 = 1024;
    int v66 = (v21 >> 1) & 1;
    __int16 v67 = 1024;
    int v68 = v23;
    __int16 v69 = 1024;
    int v70 = v24;
    __int16 v71 = 2048;
    uint64_t v72 = v26;
    __int16 v73 = 2048;
    uint64_t v74 = v25;
    __int16 v75 = 1024;
    int v76 = v27;
    __int16 v77 = 2080;
    uint64_t v78 = v22;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f,timestamp,%f,standing,%d,rawMotionType,%d,rawConfidence,%d,motionHint,%d,bbHint,%d,wifiHint,%d,btHint,%d,gpsHint,%d,vehicleType,%d,tag,workoutDetectionType,%d,workoutDetectionTime,%f,workoutEscalationTime,%lld, YouthMotionState, %d, %s\n", buf, 0xB4u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D4108);
    }
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateUtils::logChange(const CLMotionActivity &, const CLMotionActivity &, const char *)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
}

uint64_t sub_10092CDEC(unsigned int a1)
{
  if (a1 >= 4) {
    return 0;
  }
  else {
    return a1;
  }
}

void sub_10092CDFC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10092CE2C(uint64_t a1)
{
  if (a1) {
    sub_100930380(a1 - 128);
  }
  else {
    sub_100930380(0);
  }
}

id sub_10092CE3C(uint64_t a1)
{
  if (a1) {
    return sub_1009308D8(a1 - 128);
  }
  else {
    return sub_1009308D8(0);
  }
}

void sub_10092CE4C(uint64_t a1, unsigned char *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100930C24(v2, a2);
}

void sub_10092CE5C(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = a1 - 128;
  }
  else {
    uint64_t v1 = 0;
  }
  if (*(unsigned char *)(v1 + 146)) {
    sub_10092E24C(v1);
  }
}

id sub_10092CE78(uint64_t a1)
{
  if (a1) {
    return sub_100930DD4(a1 - 128);
  }
  else {
    return sub_100930DD4(0);
  }
}

id sub_10092CE88(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100931048(v2, a2);
}

id sub_10092CE98(uint64_t a1)
{
  if (a1) {
    return sub_1009311F4(a1 - 128);
  }
  else {
    return sub_1009311F4(0);
  }
}

void sub_10092CEA8(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100931398(v2, a2);
}

void sub_10092CEB8(uint64_t a1, void *a2)
{
}

void sub_10092D38C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 200);
  *(void *)(v1 + 200) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 192);
  *(void *)(v1 + 192) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v2;
  *uint64_t v2 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1011735FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10092D46C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Timer fired.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_10092D608(v1);
}

uint64_t sub_10092D608(uint64_t a1)
{
  uint64_t result = sub_1011740D8(*(void **)(a1 + 168));
  if ((result & 0x80000000) == 0)
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    v3 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = __p;
      sub_101173A50(*(void **)(a1 + 168));
      if (SBYTE3(v20) < 0) {
        uint64_t v4 = *(unsigned char **)__p;
      }
      int v5 = sub_1011740D8(*(void **)(a1 + 168));
      double v6 = sub_1011741A4(*(void **)(a1 + 168));
      *(_DWORD *)buf = 136315650;
      uint64_t v22 = v4;
      __int16 v23 = 1024;
      int v24 = v5;
      __int16 v25 = 2048;
      double v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s, current version, %d, timestamp, %lf", buf, 0x1Cu);
      if (SBYTE3(v20) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      int v9 = &v14;
      sub_101173A50(*(void **)(a1 + 168));
      if (v15 < 0) {
        int v9 = v14;
      }
      int v10 = sub_1011740D8(*(void **)(a1 + 168));
      double v11 = sub_1011741A4(*(void **)(a1 + 168));
      *(_DWORD *)__p = 136315650;
      *(void *)&__p[4] = v9;
      __int16 v17 = 1024;
      int v18 = v10;
      __int16 v19 = 2048;
      double v20 = v11;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v15 < 0) {
        operator delete(v14);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::sendMotionCalsToCompanion()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:*(void *)(a1 + 168)], 1, 0);
    id v8 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLCompanionNotifier"];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10092F4C8;
    v13[3] = &unk_1022CA588;
    v13[4] = v7;
    return (uint64_t)[v8 doAsync:v13];
  }
  return result;
}

void sub_10092D920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10092D958(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D43C0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreWatch::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D43C0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreWatch::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10092FA00(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10092DB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10092DB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D43C0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    int v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreWatch::onUserInfoNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D43C0);
    }
    double v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreWatch::onUserInfoNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_10092F858(a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_10092DCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10092DCF8(uint64_t a1, int *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D43C0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreWatch::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D43C0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreWatch::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10092FD18(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10092DEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10092DED8(uint64_t a1)
{
  *(void *)a1 = off_1022D4258;

  *(void *)(a1 + 168) = 0;
  uint64_t v2 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  *(void *)(a1 + 152) = 0;
  uint64_t v5 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return sub_1011735FC(a1);
}

void sub_10092E070(uint64_t a1)
{
  sub_10092DED8(a1);

  operator delete();
}

uint64_t sub_10092E0A8(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unlocked", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::deviceUnlocked()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1001A34E0(a1 + 128, 1, (uint64_t)buf);
}

void sub_10092E24C(uint64_t a1)
{
  *(unsigned char *)(a1 + 146) = 1;
  if (sub_101173814(a1))
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v2 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
    {
      int v3 = sub_1011740D8(*(void **)(a1 + 168));
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Begin persisting calibrations to disk on watch, current version, %d.", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      int v29 = sub_1011740D8(*(void **)(a1 + 168));
      *(_DWORD *)__int16 v43 = 67109120;
      *(_DWORD *)&v43[4] = v29;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v30);
      if (v30 != (char *)&buf) {
        free(v30);
      }
    }
    id v4 = +[NSMutableDictionary dictionary];
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v5 = CMNatalimeterSetUserVo2max;
    uint64_t v38 = CMNatalimeterSetUserPal;
    *(void *)&long long buf = CMNatalimeterSetUserPal;
    *((void *)&buf + 1) = CMNatalimeterSetUserVo2max;
    uint64_t v37 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v49 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v6 = +[NSArray arrayWithObjects:&buf count:3];
    id v7 = [(NSArray *)v6 countByEnumeratingWithState:&v39 objects:v47 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v40;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v40 != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = *(void *)(*((void *)&v39 + 1) + 8 * i);
          if ([*(id *)(a1 + 168) objectForKeyedSubscript:v10])
          {
            [objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v10) floatValue];
            [v4 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:")(v10) forKeyedSubscript:v10];
          }
        }
        id v7 = [(NSArray *)v6 countByEnumeratingWithState:&v39 objects:v47 count:16];
      }
      while (v7);
    }
    id v11 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLNatalimetryNotifier"];
    [objc_msgSend(v4, "objectForKeyedSubscript:", v5) floatValue];
    if (v12 > 0.0) {
      [v11 setActiveVo2maxOverride:1];
    }
    if ([v4 objectForKeyedSubscript:v5]
      && (objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v5), "floatValue"), v13 == 0.0))
    {
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      __int16 v14 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Persisted a reset Motion Cals", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_1022D43A0);
        }
        *(_WORD *)__int16 v43 = 0;
        int v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v36);
        if (v36 != (char *)&buf) {
          free(v36);
        }
      }
      [*(id *)(a1 + 168) removeObjectForKey:v5];
      *(void *)&long long buf = v38;
      *((void *)&buf + 1) = v5;
      uint64_t v49 = v37;
      [v11 resetUserProfileForKeys:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 3)];
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLSwimNotifier"), "clearCalibrations"];
    }
    else
    {
      [v11 setUserProfile:v4 merge:0];
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      uint64_t v19 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = [[[v4 description] UTF8String];
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Finished setting user profile on watch = %s", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_1022D43A0);
        }
        id v34 = [[objc_msgSend(v4, "description") UTF8String];
        *(_DWORD *)__int16 v43 = 136315138;
        *(void *)&v43[4] = v34;
        __int16 v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v35);
        if (v35 != (char *)&buf) {
          free(v35);
        }
      }
    }
    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"])
    {
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"), "setRawSpeedToKValueBins:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", @"RawSpeedToKValueTable")];
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      unsigned int v21 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Persisted raw speed to kValue bins", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_1022D43A0);
        }
        *(_WORD *)__int16 v43 = 0;
        float v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v32);
        if (v32 != (char *)&buf) {
          free(v32);
        }
      }
    }
    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"])
    {
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"), "setStepCadenceToStrideLengthBins:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", @"StepCadenceToStrideLengthTable")];
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      uint64_t v22 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Persisted step cadence to stride length bins", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_1022D43A0);
        }
        *(_WORD *)__int16 v43 = 0;
        __int16 v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v33);
        if (v33 != (char *)&buf) {
          free(v33);
        }
      }
    }
    uint64_t v23 = sub_1000A6958();
    LODWORD(buf) = sub_1011740D8(*(void **)(a1 + 168));
    sub_1000EA2A4(v23, @"CalibrationVersion", &buf);
    uint64_t v24 = sub_1000A6958();
    *(void *)&long long buf = sub_1011741A4(*(void **)(a1 + 168));
    sub_100163398(v24, @"CalibrationTimestamp", &buf);
    uint64_t v25 = sub_1000A6958();
    sub_101174138(*(void **)(a1 + 168), &buf);
    sub_1004D3820(v25, @"CalibrationUDID", (char *)&buf);
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)buf);
    }
    uint64_t v26 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v26 + 944))(v26);
    *(unsigned char *)(a1 + 146) = 0;
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    int v27 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      sub_101173A50(*(void **)(a1 + 168));
      v28 = v49 >= 0 ? &buf : (long long *)buf;
      *(_DWORD *)__int16 v43 = 136315138;
      *(void *)&v43[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Completed persistence of motion cals to disk on watch. %s", v43, 0xCu);
      if (SHIBYTE(v49) < 0) {
        operator delete((void *)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      sub_101173A50(*(void **)(a1 + 168));
      __int16 v31 = v44 >= 0 ? v43 : *(unsigned char **)v43;
      int v45 = 136315138;
      uint64_t v46 = v31;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      if (v44 < 0) {
        operator delete(*(void **)v43);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v18);
      if (v18 != (char *)&buf) {
LABEL_76:
      }
        free(v18);
    }
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    __int16 v15 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
    {
      int v16 = sub_1011740D8(*(void **)(a1 + 168));
      LODWORD(buf) = 67109376;
      DWORD1(buf) = v16;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = sub_101173814(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d", (uint8_t *)&buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      int v17 = sub_1011740D8(*(void **)(a1 + 168));
      *(_DWORD *)__int16 v43 = 67109376;
      *(_DWORD *)&v43[4] = v17;
      *(_WORD *)&v43[8] = 1024;
      *(_DWORD *)&v43[10] = sub_101173814(a1);
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::persistCachedValues()", "%s\n", v18);
      if (v18 != (char *)&buf) {
        goto LABEL_76;
      }
    }
  }
}

void sub_10092EFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10092EFD0(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionaryWithCapacity:5];
  uint64_t v22 = a1;
  id v3 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLNatalimetryNotifier"] syncgetUserProfileInternal];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v4 = CMNatalimeterSetUserVo2max;
  __p[0] = (void *)CMNatalimeterSetUserPal;
  __p[1] = (void *)CMNatalimeterSetUserVo2max;
  uint64_t v30 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  uint64_t v5 = +[NSArray arrayWithObjects:__p count:3];
  id v6 = [(NSArray *)v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v24;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v5);
        }
        int v9 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        id v10 = [v3 objectForKeyedSubscript:v9];
        if ([v9 isEqualToString:v4])
        {
          LOBYTE(__p[0]) = 0;
          uint64_t v11 = sub_1000A6958();
          sub_1000D29FC(v11, @"ActiveJacksonCalibration", (BOOL *)__p);
          if (!LOBYTE(__p[0])) {
            continue;
          }
        }
        if (v10) {
          [(NSMutableDictionary *)v2 setObject:v10 forKeyedSubscript:v9];
        }
      }
      id v6 = [(NSArray *)v5 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v6);
  }
  id v12 = [[[*(id *)(v22 + 32) vendor] proxyForService:@"CLStepCountNotifier"] syncgetCopyRawSpeedToKValueBins];
  if (v12)
  {
    [(NSMutableDictionary *)v2 setObject:v12 forKeyedSubscript:@"RawSpeedToKValueTable"];
  }
  id v13 = [[[*(id *)(v22 + 32) vendor] proxyForService:@"CLStepCountNotifier"] syncgetCopyStepCadenceToStrideLengthBins];
  if (v13)
  {
    [(NSMutableDictionary *)v2 setObject:v13 forKeyedSubscript:@"StepCadenceToStrideLengthTable"];
  }
  if ((sub_101174584(*(void **)(v22 + 168), v2) & 1) == 0)
  {
    [*(id *)(v22 + 168) addEntriesFromDictionary:v2];
    [*(id *)(v22 + 168) setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent())] forKeyedSubscript:@"CalibrationTimestamp"];
    sub_100103240();
    sub_10073BB0C((uint64_t)__p);
    if (v30 >= 0) {
      __int16 v14 = __p;
    }
    else {
      __int16 v14 = (void **)__p[0];
    }
    [*(id *)(v22 + 168) setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14) forKeyedSubscript:@"CalibrationUDID"];
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = sub_1000A6958();
    __p[0] = COERCE_VOID_(sub_1011741A4(*(void **)(v22 + 168)));
    sub_100163398(v15, @"CalibrationTimestamp", __p);
    uint64_t v16 = sub_1000A6958();
    sub_101174138(*(void **)(v22 + 168), __p);
    sub_1004D3820(v16, @"CalibrationUDID", (char *)__p);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v17 + 944))(v17);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    __int16 v18 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      int v19 = sub_1011740D8(*(void **)(v22 + 168));
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Watch retrieved calibrations and saved them in memory, current version, %d", (uint8_t *)__p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      int v20 = sub_1011740D8(*(void **)(v22 + 168));
      int v27 = 67109120;
      int v28 = v20;
      unsigned int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::updateCalibrations()", "%s\n", v21);
      if (v21 != (char *)__p) {
        free(v21);
      }
    }
  }
}

void sub_10092F4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10092F4C8(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(120.0, a2, 14, *(void **)(a1 + 32), 300, 0, 0, 0, 1, 0);
}

void sub_10092F514(uint64_t a1, void *a2)
{
  sub_101174138(a2, v16);
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    sub_101173A50(a2);
    if ((SBYTE3(v22) & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = *(unsigned char **)__p;
    }
    int v6 = sub_1011740D8(a2);
    double v7 = sub_1011741A4(a2);
    uint64_t v8 = v16;
    if (v17 < 0) {
      uint64_t v8 = (void **)v16[0];
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v26 = 1024;
    int v27 = v6;
    __int16 v28 = 2048;
    double v29 = v7;
    __int16 v30 = 2080;
    __int16 v31 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s", buf, 0x26u);
    if (SBYTE3(v22) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    sub_101173A50(a2);
    if (v15 >= 0) {
      int v9 = &v14;
    }
    else {
      int v9 = v14;
    }
    int v10 = sub_1011740D8(a2);
    double v11 = sub_1011741A4(a2);
    id v12 = v16;
    if (v17 < 0) {
      id v12 = (void **)v16[0];
    }
    *(_DWORD *)__p = 136315906;
    *(void *)&__p[4] = v9;
    __int16 v19 = 1024;
    int v20 = v10;
    __int16 v21 = 2048;
    double v22 = v11;
    __int16 v23 = 2080;
    long long v24 = v12;
    id v13 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(v14);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::receiveMotionCals(NSDictionary *)", "%s\n", v13);
    if (v13 != buf) {
      free(v13);
    }
  }
  *(void *)long long buf = a2;
  sub_1001A34E0(a1 + 128, 4, (uint64_t)buf);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
}

void sub_10092F7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10092F858(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "user info notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  buf[0] = 0;
  return sub_1001A34E0(a1 + 128, 5, (uint64_t)buf);
}

void sub_10092FA00(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (*a3 == 1)
  {
    if (!*a4)
    {
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      uint64_t v5 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Workout session ended on watch.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_1022D43A0);
        }
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      buf[0] = 1;
      sub_1001A34E0(a1 + 128, 5, (uint64_t)buf);
    }
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    double v7 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *a3;
      *(_DWORD *)long long buf = 67109120;
      int v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_10092FD18(uint64_t a1, uint64_t a2, int *a3, unsigned char *a4)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  double v7 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)long long buf = 67109120;
    int v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notification, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (*a3 == 5)
  {
    if (*a4) {
      int v9 = 2;
    }
    else {
      int v9 = 3;
    }
    sub_1001A34E0(a1 + 128, v9, (uint64_t)buf);
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    int v10 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Unhandled notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022D43A0);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_100930030(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "raw speed to kValue bins updated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::rawSpeedToKValueBinsHaveChanged()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  buf[0] = 0;
  return sub_1001A34E0(a1 + 128, 5, (uint64_t)buf);
}

uint64_t sub_1009301D8(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "step cadence to stride length bins updated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreWatch::stepCadenceToStrideLengthBinsHaveChanged()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  buf[0] = 0;
  return sub_1001A34E0(a1 + 128, 5, (uint64_t)buf);
}

void sub_100930380(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore backup motion cals", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doRestoreBackupMotionCals(const EDeviceUnlocked *)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10093051C(a1);
}

void sub_10093051C(uint64_t a1)
{
  sub_100103240();
  sub_10073BB0C((uint64_t)&v18);
  uint64_t v2 = sub_1000A6958();
  sub_1000A7CF8(v2, @"CalibrationUDID", &v18);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v3 = &v18;
  }
  else {
    id v3 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  [*(id *)(a1 + 168) setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3) forKeyedSubscript:@"CalibrationUDID"];
  unsigned int v17 = -1;
  uint64_t v4 = sub_1000A6958();
  sub_10013E418(v4, @"CalibrationVersion", &v17);
  [*(id *)(a1 + 168) setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v17) forKeyedSubscript:@"CalibrationVersion"];
  double v16 = 0.0;
  uint64_t v5 = sub_1000A6958();
  sub_1000A6A10(v5, @"CalibrationTimestamp", &v16);
  [*(id *)(a1 + 168) setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16) forKeyedSubscript:@"CalibrationTimestamp"];
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  int v6 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    sub_101173A50(*(void **)(a1 + 168));
    double v7 = (SBYTE3(v23) & 0x80u) == 0 ? __p : *(unsigned char **)__p;
    int v8 = sub_1011740D8(*(void **)(a1 + 168));
    double v9 = sub_1011741A4(*(void **)(a1 + 168));
    *(_DWORD *)long long buf = 136315650;
    long long v25 = v7;
    __int16 v26 = 1024;
    int v27 = v8;
    __int16 v28 = 2048;
    double v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Restored backup calibrations, %s, version, %d, timestamp, %lf", buf, 0x1Cu);
    if (SBYTE3(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    sub_101173A50(*(void **)(a1 + 168));
    if (v15 >= 0) {
      int v10 = &v14;
    }
    else {
      int v10 = v14;
    }
    int v11 = sub_1011740D8(*(void **)(a1 + 168));
    double v12 = sub_1011741A4(*(void **)(a1 + 168));
    *(_DWORD *)__p = 136315650;
    *(void *)&__p[4] = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 2048;
    double v23 = v12;
    id v13 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(v14);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::restoreBackupMotionCals()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_100930874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009308D8(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "connected", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doConnected(const ECompanionConnected *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(a1 + 152) setFireInterval:*(double *)(a1 + 160)];
  return sub_100930A80(a1);
}

id sub_100930A80(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "schedule send to companion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::scheduleFastSendToCompanion()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 152) setNextFireDelay:2.56];
}

void sub_100930C24(uint64_t a1, unsigned char *a2)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "updating motion cals", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doUpdateMotionCals(const EMotionCalsUpdated *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_10092EFD0(a1);
  if (*a2) {
    sub_100930A80(a1);
  }
}

id sub_100930DD4(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore and arbitrate", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doRestoreBackupMotionCalsArbitrate(const EDeviceUnlocked *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10093051C(a1);
  sub_100930F80(a1);
  return sub_100930A80(a1);
}

void sub_100930F80(uint64_t a1)
{
  id v2 = sub_1011744A0(*(void **)(a1 + 176));
  int v3 = sub_10093172C((uint64_t)v2, *(void **)(a1 + 168), *(void **)(a1 + 176));
  sub_100931544(a1, *(void **)(a1 + 168), *(void **)(a1 + 176), v3);
  switch(v3)
  {
    case 2:
    case 4:
      sub_10092E24C(a1);
      break;
    case 3:
      goto LABEL_6;
    case 5:
      sub_10092E24C(a1);
LABEL_6:
      sub_100930A80(a1);
      break;
    default:
      return;
  }
}

id sub_100931048(uint64_t a1, void *a2)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Buffered motion cals from companion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doBufferMotionCalsFromCompanion(const ECalibrationFromCompanion *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
  return sub_1011744A0(*(void **)(a1 + 176));
}

id sub_1009311F4(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  id v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disconnected", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doDisconnected(const ECompanionDisconnected *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 152) setNextFireDelay:1.79769313e308];
}

void sub_100931398(uint64_t a1, void *a2)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "arbitrateMotionCals", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreWatch::doArbitrateMotionCals(const ECalibrationFromCompanion *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
  sub_100930F80(a1);
}

void sub_100931544(uint64_t a1, void *a2, void *a3, int a4)
{
  if (![a2 objectForKeyedSubscript:@"CalibrationUDID"])
  {
    id v13 = (_Unwind_Exception *)sub_101A74284();
    if (v16 < 0) {
      operator delete(__p);
    }
    _Unwind_Resume(v13);
  }
  double v7 = sub_101174138(a2, &__p);
  if ((a4 - 2) < 2) {
    goto LABEL_9;
  }
  if (a4 == 4)
  {
    [a2 addEntriesFromDictionary:a3];
LABEL_9:
    uint64_t v12 = sub_1011740D8(a3);
    sub_101174204(a2, v12);
    goto LABEL_10;
  }
  if (a4 == 5)
  {
    int v14 = 0;
    BOOL v8 = sub_10093167C((uint64_t)v7, a2, a3, (float *)&v14);
    [a2 addEntriesFromDictionary:a3];
    if (v8)
    {
      LODWORD(v9) = v14;
      int v10 = +[NSNumber numberWithFloat:v9];
      [a2 setObject:v10 forKeyedSubscript:CMNatalimeterSetUserVo2max];
    }
    uint64_t v11 = sub_1011740D8(a3);
    sub_101174204(a2, v11);
  }
LABEL_10:
  [a3 removeAllObjects];
  if (v16 < 0) {
    operator delete(__p);
  }
}

BOOL sub_10093167C(uint64_t a1, void *a2, void *a3, float *a4)
{
  uint64_t v7 = CMNatalimeterSetUserVo2max;
  id v8 = [a3 objectForKeyedSubscript:CMNatalimeterSetUserVo2max];
  if (v8)
  {
    [objc_msgSend(a3, "objectForKeyedSubscript:", v7) floatValue];
    *a4 = v9;
    if (v9 != 0.0)
    {
      if ([a2 objectForKeyedSubscript:v7])
      {
        float v10 = *a4;
        [objc_msgSend(a2, "objectForKeyedSubscript:", v7) floatValue];
        *a4 = fmaxf(v10, v11);
      }
    }
  }
  return v8 != 0;
}

uint64_t sub_10093172C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = (uint64_t)a2;
  if (![a2 objectForKeyedSubscript:@"CalibrationUDID"])
  {
    sub_101A74400();
    __break(1u);
    goto LABEL_59;
  }
  if ([a3 count])
  {
    sub_101174138((void *)v10, __p);
    double v7 = sub_1011741A4((void *)v10);
    int v3 = sub_1011740D8((void *)v10);
    sub_101174138(a3, &__s1);
    double v8 = sub_1011741A4(a3);
    LODWORD(a3) = sub_1011740D8(a3);
    int v6 = buf;
    uint64_t v5 = &qword_102419000;
    uint64_t v4 = &qword_102419000;
    if ((sub_1011740D8((void *)v10) & 0x80000000) != 0)
    {
      uint64_t v10 = 4;
      goto LABEL_45;
    }
    uint64_t v11 = v35;
    if ((v35 & 0x80u) == 0) {
      size_t v12 = v35;
    }
    else {
      size_t v12 = __n;
    }
    unint64_t v13 = v37;
    if ((v37 & 0x80u) != 0) {
      unint64_t v13 = (unint64_t)__p[1];
    }
    if (v12 != v13) {
      goto LABEL_27;
    }
    if ((v37 & 0x80u) == 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    if ((v35 & 0x80) != 0)
    {
      if (memcmp(__s1, v14, __n))
      {
LABEL_27:
        if (v3 >= (int)a3)
        {
          if (qword_102419120 != -1) {
            dispatch_once(&qword_102419120, &stru_1022D43A0);
          }
          unsigned int v17 = qword_102419128;
          if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
          {
            p_s1 = &__s1;
            if ((v35 & 0x80u) != 0) {
              p_s1 = __s1;
            }
            __int16 v19 = __p;
            if ((v37 & 0x80u) != 0) {
              __int16 v19 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315906;
            *(void *)uint64_t v49 = p_s1;
            *(_WORD *)&v49[8] = 2080;
            *(void *)&v49[10] = v19;
            __int16 v50 = 1024;
            int v51 = (int)a3;
            __int16 v52 = 1024;
            int v53 = v3;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not larger than current version %d", buf, 0x22u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419120 != -1) {
              dispatch_once(&qword_102419120, &stru_1022D43A0);
            }
            __int16 v30 = &__s1;
            if ((v35 & 0x80u) != 0) {
              __int16 v30 = __s1;
            }
            __int16 v31 = __p;
            if ((v37 & 0x80u) != 0) {
              __int16 v31 = (void **)__p[0];
            }
            int v38 = 136315906;
            *(void *)long long v39 = v30;
            *(_WORD *)&v39[8] = 2080;
            *(void *)&v39[10] = v31;
            *(_WORD *)&v39[18] = 1024;
            *(_DWORD *)&v39[20] = a3;
            __int16 v40 = 1024;
            int v41 = v3;
            float v32 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v32);
            if (v32 != (char *)buf) {
              free(v32);
            }
          }
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v10 = 5;
        }
LABEL_45:
        if (qword_102419120 == -1)
        {
LABEL_46:
          __int16 v22 = v4[37];
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            double v23 = &__s1;
            if ((v35 & 0x80u) != 0) {
              double v23 = __s1;
            }
            long long v24 = __p;
            if ((v37 & 0x80u) != 0) {
              long long v24 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 67110658;
            *(_DWORD *)uint64_t v49 = a3;
            *(_WORD *)&v49[4] = 2048;
            *(double *)&v49[6] = v8;
            *(_WORD *)&v49[14] = 2080;
            *(void *)(v6 + 20) = v23;
            __int16 v52 = 1024;
            *(_DWORD *)(v6 + 30) = v3;
            __int16 v54 = 2048;
            *(double *)(v6 + 36) = v7;
            __int16 v55 = 2080;
            *(void *)(v6 + 46) = v24;
            __int16 v56 = 1024;
            int v57 = v10;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d", buf, 0x3Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v5[36] != -1) {
              dispatch_once(&qword_102419120, &stru_1022D43A0);
            }
            __int16 v26 = &__s1;
            if ((v35 & 0x80u) != 0) {
              __int16 v26 = __s1;
            }
            int v27 = __p;
            if ((v37 & 0x80u) != 0) {
              int v27 = (void **)__p[0];
            }
            int v38 = 67110658;
            *(_DWORD *)long long v39 = a3;
            *(_WORD *)&v39[4] = 2048;
            *(double *)&v39[6] = v8;
            *(_WORD *)&v39[14] = 2080;
            *(void *)&v39[16] = v26;
            __int16 v40 = 1024;
            int v41 = v3;
            __int16 v42 = 2048;
            double v43 = v7;
            __int16 v44 = 2080;
            int v45 = v27;
            __int16 v46 = 1024;
            int v47 = v10;
            __int16 v28 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v28);
            if (v28 != (char *)buf) {
              free(v28);
            }
          }
          if ((char)v35 < 0) {
            operator delete(__s1);
          }
          if ((char)v37 < 0) {
            operator delete(__p[0]);
          }
          return v10;
        }
LABEL_59:
        dispatch_once(&qword_102419120, &stru_1022D43A0);
        goto LABEL_46;
      }
    }
    else if (v35)
    {
      char v15 = &__s1;
      while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
      {
        char v15 = (void **)((char *)v15 + 1);
        int v14 = (void **)((char *)v14 + 1);
        if (!--v11) {
          goto LABEL_39;
        }
      }
      goto LABEL_27;
    }
LABEL_39:
    double v20 = vabdd_f64(v8, v7);
    if (v8 <= v7) {
      unsigned int v21 = 3;
    }
    else {
      unsigned int v21 = 4;
    }
    if (v20 >= 1.0) {
      uint64_t v10 = v21;
    }
    else {
      uint64_t v10 = 2;
    }
    goto LABEL_45;
  }
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022D43A0);
  }
  char v16 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "No buffered Motion Cals, no arbitration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022D43A0);
    }
    LOWORD(v38) = 0;
    double v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  return 1;
}

void sub_100931E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100931E74(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        float v9 = (uint64_t *)v4;
      }
      else {
        float v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D43C0);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022D43C0);
        }
        size_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          size_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        char v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        unint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100932104(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1009321B8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100932200(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100932248(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100932290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241ED50);
}

uint64_t sub_1009322BC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        unint64_t v13 = (uint64_t *)v7;
      }
      else {
        unint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)__int16 v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          long long v24 = (uint64_t *)v18;
        }
        else {
          long long v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100933B84();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241ED51;
        int v39 = v17;
        *(void *)long long buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        float v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        id v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D43C0);
  }
  int v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    char v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D43C0);
    }
    unsigned __int8 v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unsigned __int8 v37 = (void *)*v37;
    }
    *(_DWORD *)__int16 v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100932760(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D43C0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      long long v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D43C0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1009329E4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        unint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            unint64_t v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022D43C0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022D43C0);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

BOOL sub_100932DB8(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  int v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      int v9 = (uint64_t *)v3;
    }
    else {
      int v9 = (uint64_t *)(v3 + 8);
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  return v6 != v2 && v5 >= *(_DWORD *)(v6 + 32) && *(void *)(v6 + 64) != 0;
}

uint64_t sub_100932E10(uint64_t a1, int *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = (uint64_t)off_1022D4410;
  int v8 = *a2;
  int v9 = &v8;
  int v5 = sub_10044715C((uint64_t **)(a1 + 56), &v8, (uint64_t)&unk_101D0B290, &v9);
  uint64_t v6 = (std::__shared_weak_count *)v5[9];
  v5[8] = v4 + 3;
  v5[9] = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return 1;
}

void sub_100932EB8(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100932ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_100932F20(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v7 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v7, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D43C0);
  }
  int v8 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v9 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v9 = (void *)*v9;
    }
    BOOL v10 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    int v21 = 0;
    __int16 v22 = 2082;
    *(void *)int v23 = "";
    *(_WORD *)&v23[8] = 2082;
    *(void *)&v23[10] = "activity";
    __int16 v24 = 2082;
    __int16 v25 = v9;
    __int16 v26 = 2050;
    int v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (!v11) {
    goto LABEL_18;
  }
  int v12 = *a2;
  unint64_t v13 = (uint64_t **)(a1 + 64);
  do
  {
    int v14 = *(_DWORD *)(v11 + 32);
    BOOL v15 = v14 < v12;
    if (v14 >= v12) {
      uint64_t v16 = (uint64_t *)v11;
    }
    else {
      uint64_t v16 = (uint64_t *)(v11 + 8);
    }
    if (!v15) {
      unint64_t v13 = (uint64_t **)v11;
    }
    uint64_t v11 = *v16;
  }
  while (*v16);
  if (v13 == (uint64_t **)(a1 + 64) || v12 < *((_DWORD *)v13 + 8))
  {
LABEL_18:
    BOOL v28 = v29;
    memset(v29, 0, sizeof(v29));
    char v30 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v28);
    unint64_t v13 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v27) {
      sub_1000DB0A0(v27);
    }
    sub_1000F5BB0((uint64_t)&v22, *(void **)&v23[6]);
    if (v30) {
      sub_1000DB0A0(v30);
    }
    sub_1000F5BB0((uint64_t)&v28, v29[0]);
  }
  if (a4)
  {
    int v17 = (uint64_t *)operator new(0x20uLL);
    v17[1] = 0;
    v17[2] = 0;
    *int v17 = (uint64_t)off_1022D4410;
    BOOL v18 = (std::__shared_weak_count *)v13[9];
    v13[8] = v17 + 3;
    v13[9] = v17;
    if (!v18) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  BOOL v18 = (std::__shared_weak_count *)v13[9];
  v13[8] = 0;
  v13[9] = 0;
  if (v18) {
LABEL_27:
  }
    sub_1000DB0A0(v18);
LABEL_28:
  if (v13[7]) {
    sub_100934618();
  }
  os_activity_scope_leave(&state);
}

void sub_1009334FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100933548(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D43C0);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      __int16 v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D43C0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D43C0);
    }
    char v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      __int16 v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D43C0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022D43C0);
            }
            BOOL v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              __int16 v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022D43C0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            int v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                BOOL v15 = v14;
                int v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                BOOL v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100933AF4(id a1)
{
  qword_102419128 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

void sub_100933B24(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100933B54(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100933B84()
{
}

unsigned char *sub_100933C18(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100933D2C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    uint64_t v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_100933D10(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100933D2C(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100933DC8(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100934154(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100933DC8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100934514((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022D43E0);
    }
    char v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D5358FLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022D43E0);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D5358FLL & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022D43E0);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D5358FLL & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionSyncStore_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_100934154(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022D43E0);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D5358FLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionSyncStore_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022D43E0);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D5358FLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022D43E0);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100934514(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392C30))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1)
    {
      uint64_t v4 = sub_101A7457C();
      return (id)sub_10093459C(v4);
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_10093459C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D4410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009345BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D4410;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100934618()
{
}

void sub_1009346AC(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    char v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_100933D2C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                __int16 v22 = (uint64_t *)v17;
              }
              else {
                __int16 v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_100933C18(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              double v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  double v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022D43C0);
              }
              __int16 v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                __int16 v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022D43C0);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_100934A9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

BOOL sub_100934AB8()
{
  uint64_t v1 = qword_102419128;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_100934AD8()
{
  sub_100134750(qword_10247EEA8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247EEA8, (void *)&_mh_execute_header);
}

void sub_100934B38(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_100939680((void *)__dst + 3);
  sub_100939680((void *)__dst + 5);
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_100134750(buf, "CLWifiLocationDatabase");
  sub_100134750(__p, "CLMovingApDetector");
  sub_1014577F0(__dst + 72, buf, __p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)__dst + 4);
  uint64_t v8 = *((void *)__dst + 3);
  __int16 v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101407D90(__dst + 168, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4450);
  }
  char v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MovingApDetector, initialize database tables", buf, 2u);
  }
  uint64_t v6 = sub_10013D1A0(115, 2);
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    LOWORD(__p[0]) = 0;
    char v7 = (char *)_os_log_send_and_compose_impl();
    uint64_t v6 = sub_1004BA5E4("Generic", 1, 0, 2, "CLMovingApDetector::CLMovingApDetector(const std::string &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100934F4C(v6, (uint64_t)__dst);
}

void sub_100934DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_101407E74(v29);
  sub_100934EE8(v28);
  uint64_t v31 = *v27;
  *uint64_t v27 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *v26;
  *int v26 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(v25 + 48);
  if (v33) {
    sub_1000DB0A0(v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v25 + 32);
  if (v34) {
    sub_1000DB0A0(v34);
  }
  if (*(char *)(v25 + 23) < 0) {
    operator delete(*(void **)v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100934EE8(uint64_t a1)
{
  *(void *)a1 = off_1023274E8;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_100934F4C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  __p[3] = 0;
  operator new();
}

void sub_100935048(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

BOOL sub_100935084(uint64_t a1)
{
  if (!sub_10064E538(*(void *)(a1 + 56)))
  {
    sub_1014577FC(a1 + 72, 0);
    BOOL result = sub_1005B1D3C((double *)(a1 + 72));
LABEL_5:
    sub_100934F4C(result, a1);
  }
  BOOL v2 = sub_10064E538(*(void *)(a1 + 64));
  BOOL v3 = v2;
  sub_1014577FC(a1 + 72, v2);
  BOOL result = sub_1005B1D3C((double *)(a1 + 72));
  if (!v3) {
    goto LABEL_5;
  }
  return result;
}

void sub_100935320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100935348(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    if (sub_10064E538(*a2))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      BOOL v3 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr))(*(void *)*a2 + 16))(__p);
        uint64_t v4 = v14 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136380675;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MovingApDetector, clearing database table %{private}s", buf, 0xCu);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4450);
        }
        (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 16))(buf);
        if (v10 >= 0) {
          char v7 = buf;
        }
        else {
          char v7 = *(unsigned char **)buf;
        }
        int v11 = 136380675;
        unint64_t v12 = v7;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        if (v10 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::clearDatabaseTable(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v8);
        if (v8 != (char *)__p) {
          free(v8);
        }
      }
      sub_1006509BC(*a2);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    char v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      *(_WORD *)long long buf = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMovingApDetector::clearDatabaseTable(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v6);
      if (v6 != (char *)__p) {
        free(v6);
      }
    }
  }
}

void sub_1009356E8(uint64_t a1)
{
  sub_100935348(a1, (uint64_t *)(a1 + 64));

  sub_100935348(v2, (uint64_t *)(a1 + 56));
}

void sub_100935724(uint64_t a1, _DWORD *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_1013F0980(*(void *)(a1 + 24), &Current, a2, a2 + 1);
  sub_1013F0980(*(void *)(a1 + 40), &Current, a2, a2 + 1);
}

void sub_10093578C(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    sub_100134750(&v30, "MovingApDetector");
    std::string::append(&v30, ", gps: ");
    if (sub_1013F0F8C(*(void *)(a1 + 24))) {
      uint64_t v4 = "y";
    }
    else {
      uint64_t v4 = "n";
    }
    std::string::append(&v30, v4);
    std::string::append(&v30, ", cell: ");
    if (sub_1013F1064(*(void *)(a1 + 24))) {
      char v5 = "y";
    }
    else {
      char v5 = "n";
    }
    std::string::append(&v30, v5);
    if (!sub_10064E538(*a2))
    {
      std::string::append(&v30, ", database invalid");
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      int v23 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v24 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4450);
        }
        uint64_t v25 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        LODWORD(v32) = 136315138;
        *(void *)((char *)&v32 + 4) = v25;
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v26);
        if (v26 != (char *)__p) {
          free(v26);
        }
      }
      goto LABEL_79;
    }
    sub_1006D8CE0(*a2, &v32);
    if ((void)v32 == *((void *)&v32 + 1))
    {
      std::string::append(&v30, ", database empty");
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      uint64_t v27 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v28 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_77;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      int v20 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
    }
    else
    {
      unsigned int v6 = sub_1006D5CC0(*a2);
      std::to_string(&v31, v6);
      char v7 = std::string::insert(&v31, 0, ", database count: ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      int64_t v34 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (v34 >= 0) {
        __int16 v9 = __p;
      }
      else {
        __int16 v9 = (void **)__p[0];
      }
      if (v34 >= 0) {
        std::string::size_type v10 = HIBYTE(v34);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(&v30, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(v34) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      std::string::append(&v30, ", samples");
      unsigned int v11 = 0;
      unint64_t v12 = rand() % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v32 + 1) - v32) >> 6));
      do
      {
        sub_100B39278(&v31);
        char v13 = std::string::insert(&v31, 0, ", ");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        int64_t v34 = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (v34 >= 0) {
          id v15 = __p;
        }
        else {
          id v15 = (void **)__p[0];
        }
        if (v34 >= 0) {
          std::string::size_type v16 = HIBYTE(v34);
        }
        else {
          std::string::size_type v16 = (std::string::size_type)__p[1];
        }
        std::string::append(&v30, (const std::string::value_type *)v15, v16);
        if (SHIBYTE(v34) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
      }
      while (++v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v32 + 1) - v32) >> 6) && v11++ < 4);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      int v18 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v19 = &v30;
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v19 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_77;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      int v20 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
    }
    LODWORD(v31.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v29);
    if (v29 != (char *)__p) {
      free(v29);
    }
LABEL_77:
    if ((void)v32)
    {
      *((void *)&v32 + 1) = v32;
      operator delete((void *)v32);
    }
LABEL_79:
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4450);
  }
  BOOL v21 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    LOWORD(v30.__r_.__value_.__l.__data_) = 0;
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v22);
    if (v22 != (char *)__p) {
      free(v22);
    }
  }
}

void sub_100935FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100936054(uint64_t a1)
{
}

void sub_10093605C(uint64_t a1, uint64_t *a2)
{
  if (sub_10064E538(*a2))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    BOOL v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = sub_1006D5CC0(*a2);
      *(_DWORD *)long long buf = 67109120;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MovingApDetector, number of detected bad centroids in database: %u", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    sub_1006D5CC0(*a2);
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::logBadWifiCentroidDatabaseSize(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v5);
    if (v5 == (char *)buf) {
      return;
    }
LABEL_20:
    free(v5);
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4450);
  }
  unsigned int v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, could not log number of detected bad centroids due to invalid database", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::logBadWifiCentroidDatabaseSize(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      goto LABEL_20;
    }
  }
}

void sub_100936344(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*a3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    std::string::size_type v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      __int16 v23 = 0;
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v9);
      if (v9 != (char *)__p) {
        goto LABEL_88;
      }
    }
    return;
  }
  sub_101407F04(a1 + 168, a2);
  uint64_t v34 = *a2;
  sub_1006D836C(*a3, &v23);
  sub_10106EA88((uint64_t)a2, (uint64_t)v22);
  nullsub_41(0, v5);
  if (sub_10106EBF0((uint64_t)a2)) {
    sub_10106EC00((uint64_t)a2);
  }
  if (!v33)
  {
    if (sub_1006D68C0(*a3))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      unsigned int v11 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100936C70(a2, (std::string *)__p);
        unint64_t v12 = (SBYTE7(v39) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MovingApDetector, detected and inserted bad centroid: %{private}s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v39) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v13 = sub_10013D1A0(115, 2);
      if (!v13) {
        goto LABEL_60;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      sub_100936C70(a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v36 = 136380675;
      int v37 = p_buf;
      id v15 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      std::string::size_type v16 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100936C70(a2, (std::string *)__p);
        uint64_t v17 = (SBYTE7(v39) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, could not insert bad centroid into database: %{private}s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v39) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v13 = sub_10013D1A0(115, 2);
      if (!v13) {
        goto LABEL_60;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      sub_100936C70(a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v20 = &buf;
      }
      else {
        int v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v36 = 136380675;
      int v37 = v20;
      id v15 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v13 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v15);
    if (v15 != (char *)__p) {
      free(v15);
    }
LABEL_60:
    sub_10093605C(v13, a3);
    return;
  }
  long long v44 = v30;
  long long v45 = v31;
  v46[0] = *(_OWORD *)v32;
  *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)&v32[12];
  long long v40 = v26;
  long long v41 = v27;
  long long v42 = v28;
  long long v43 = v29;
  *(_OWORD *)__p = v24;
  long long v39 = v25;
  if (sub_100BCE380((uint64_t)__p, (uint64_t)v22)) {
    return;
  }
  if (sub_1006D68C0(*a3))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    unsigned int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100936C70(a2, (std::string *)__p);
      char v7 = (SBYTE7(v39) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MovingApDetector, detected and replaced bad centroid: %{private}s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v39) < 0) {
        operator delete(__p[0]);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    sub_100936C70(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v8 = &buf;
    }
    else {
      int v8 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v36 = 136380675;
    int v37 = v8;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    int v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100936C70(a2, (std::string *)__p);
      unint64_t v19 = (SBYTE7(v39) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, could not replace bad centroid into database: %{private}s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v39) < 0) {
        operator delete(__p[0]);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    sub_100936C70(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v21 = &buf;
    }
    else {
      BOOL v21 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v36 = 136380675;
    int v37 = v21;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::handleDetectedBadWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v9);
  if (v9 != (char *)__p) {
LABEL_88:
  }
    free(v9);
}

void sub_100936C70(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v12 = *a1;
  sub_100B39278(&v13);
  int v4 = std::string::append(&v13, ", ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_10106EA88((uint64_t)a1, (uint64_t)v9);
  sub_100937E34();
  if ((v11 & 0x80u) == 0) {
    unsigned int v6 = (const std::string::value_type *)v10;
  }
  else {
    unsigned int v6 = (const std::string::value_type *)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v7 = v11;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v10[1];
  }
  int v8 = std::string::append(&v14, v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v11 < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_100936D68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 97) < 0) {
    operator delete(*v1);
  }
  if (*(char *)(v2 - 41) < 0) {
    operator delete(v1[7]);
  }
  if (*(char *)(v2 - 65) < 0) {
    operator delete(v1[4]);
  }
  _Unwind_Resume(exception_object);
}

void sub_100936DB4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*a3)
  {
    uint64_t v5 = a1 + 168;
    sub_101407F9C(a1 + 168, (uint64_t)a2);
    uint64_t v13 = *a2;
    sub_1006D836C(*a3, __p);
    if (v18)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      unsigned int v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100936C70(a2, __p);
        std::string::size_type v7 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid %{private}s was previously detected as bad. Mark it as valid again.", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4450);
        }
        sub_100936C70(a2, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v15 = 136380675;
        std::string::size_type v16 = p_buf;
        unsigned __int8 v11 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::handleDetectedGoodWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v11);
        if (v11 != __p) {
          free(v11);
        }
      }
      sub_1006D9AC8(*a3);
      sub_10093605C(v8, a3);
      sub_101408038(v5, &v13);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    __int16 v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v12 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMovingApDetector::handleDetectedGoodWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v12);
      if (v12 != __p) {
        free(v12);
      }
    }
  }
}

uint64_t sub_10093715C(uint64_t a1, double *a2, uint64_t *a3)
{
  if (!sub_10106EB1C(a2)) {
    return 3;
  }
  if (!sub_1013F113C(*(void *)(a1 + 24))) {
    return 2;
  }
  sub_10106EA88((uint64_t)a2, (uint64_t)v14);
  uint64_t v16 = *a3;
  uint64_t v15 = 0;
  BOOL v6 = sub_100009E8C(*(void *)(a1 + 24), (uint64_t)v14);
  BOOL v7 = sub_100009E8C(*(void *)(a1 + 40), (uint64_t)v14);
  sub_101408470((_DWORD *)(a1 + 168), v6, v7);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4450);
  }
  uint64_t v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100936C70((uint64_t *)a2, &v23);
    __int16 v9 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v23
       : (std::string *)v23.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136381187;
    char v18 = v9;
    __int16 v19 = 1024;
    BOOL v20 = v7;
    __int16 v21 = 1024;
    BOOL v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid: %{private}s, Rejected by Cell Only IM: %d, Rejected by GPS IM: %d", buf, 0x18u);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    sub_100936C70((uint64_t *)a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v23.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(v23.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v23.__r_.__value_.__r.__words[1] + 6) = v7;
    WORD1(v23.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v23.__r_.__value_.__r.__words[2]) = v6;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CrossCheckOutcome CLMovingApDetector::crossCheckCentroid(const CLWifiAPLocation &, const CFAbsoluteTime &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return !v6;
}

uint64_t sub_100937424(uint64_t a1, double *a2, uint64_t *a3)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v6 = sub_10093715C(a1, a2, (uint64_t *)&Current);
  uint64_t v7 = v6;
  if (v6 == 1)
  {
    sub_100936DB4(a1, (uint64_t *)a2, a3);
  }
  else if (!v6)
  {
    sub_100936344(a1, (uint64_t *)a2, a3);
  }
  return v7;
}

BOOL sub_1009374AC(uint64_t a1, double *a2, uint64_t *a3)
{
  BOOL result = sub_1013F113C(*(void *)(a1 + 24));
  if (result)
  {
    if (*a3)
    {
      return sub_100937424(a1, a2, a3) == 0;
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      uint64_t v7 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", buf, 2u);
      }
      BOOL v8 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4450);
        }
        __int16 v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMovingApDetector::isBadCentroidFromGpsCellCrossCheck(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10093767C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    uint64_t v45 = *a2;
    uint64_t result = sub_10064E538(v3);
    if (!result) {
      return result;
    }
    sub_1006D836C(*a3, &v34);
    if (v44)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247EF18, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_10247EF18))
      {
        sub_101171D90((uint64_t)dbl_10247EEF0);
        __cxa_guard_release(&qword_10247EF18);
      }
      v32[6] = v41;
      v32[7] = v42;
      v33[0] = v43[0];
      *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v43 + 12);
      v32[2] = v37;
      v32[3] = v38;
      v32[4] = v39;
      v32[5] = v40;
      v32[0] = v35;
      v32[1] = v36;
      sub_10106EA88((uint64_t)a2, (uint64_t)&v55);
      sub_1000F1268(dbl_10247EEF0, (uint64_t)v32, (uint64_t)&v55);
      double v8 = v7;
      if (v7 == 0.0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4450);
        }
        __int16 v9 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100936C70(a2, &v55);
          int v10 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
          std::string::size_type v11 = v55.__r_.__value_.__r.__words[0];
          (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 16))(&__p);
          uint64_t v12 = &v55;
          if (v10 < 0) {
            uint64_t v12 = (std::string *)v11;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MovingApDetector, found the exact centroid %{private}s in bad centroid database table %{private}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v55, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4450);
          }
          sub_100936C70(a2, &__p);
          int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
          (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 16))(&buf);
          long long v24 = &__p;
          if (v22 < 0) {
            long long v24 = (std::string *)v23;
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int v46 = 136380931;
          *(void *)&v46[4] = v24;
          __int16 v47 = 2081;
          uint64_t v48 = p_buf;
          long long v26 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v26);
          if (v26 != &v55) {
            free(v26);
          }
        }
        return 1;
      }
      else
      {
        double v16 = *((double *)sub_1001B1B20() + 1);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4450);
        }
        uint64_t v17 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100936C70(a2, &__p);
          int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
          sub_100937E34();
          BOOL v20 = &__p;
          if (v18 < 0) {
            BOOL v20 = (std::string *)v19;
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v21 = &buf;
          }
          else {
            __int16 v21 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v55.__r_.__value_.__l.__data_) = 136381443;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
          WORD2(v55.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v21;
          HIWORD(v55.__r_.__value_.__r.__words[2]) = 2049;
          double v56 = v8;
          __int16 v57 = 2049;
          double v58 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid under lookup: %{private}s, database version: %{private}s. distance: %{private}.1fm. threshold: %{private}.1fm", (uint8_t *)&v55, 0x2Au);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v55, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4450);
          }
          sub_100936C70(a2, &buf);
          int v27 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
          std::string::size_type v28 = buf.__r_.__value_.__r.__words[0];
          sub_100937E34();
          long long v29 = &buf;
          if (v27 < 0) {
            long long v29 = (std::string *)v28;
          }
          if (v49 >= 0) {
            long long v30 = v46;
          }
          else {
            long long v30 = *(unsigned char **)v46;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 136381443;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
          double v51 = v8;
          __int16 v52 = 2049;
          double v53 = v16;
          long long v31 = (std::string *)_os_log_send_and_compose_impl();
          if (v49 < 0) {
            operator delete(*(void **)v46);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v31);
          if (v31 != &v55) {
            free(v31);
          }
        }
        return v8 <= v16;
      }
    }
    return 0;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4450);
  }
  std::string v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v55.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)&v55, 2u);
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(&v55, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    __int16 v34 = 0;
    uint64_t v15 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMovingApDetector::isBadCentroidFromDatabaseLookup(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v15);
    if (v15 != &v55) {
      free(v15);
    }
    return 0;
  }
  return result;
}

void sub_100937DD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100937E34()
{
  sub_10010F274((uint64_t)v8);
  uint64_t v0 = sub_100132EFC(v9, (uint64_t)"latlon ", 7);
  uint64_t v1 = *v0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 - 24) + 16) = 7;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v0 + *(void *)(v1 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v2 = sub_100132EFC(v9, (uint64_t)",", 1);
  uint64_t v3 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 - 24) + 16) = 7;
  *(_DWORD *)((char *)v2 + *(void *)(v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(v3 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  int v4 = sub_100132EFC(v9, (uint64_t)", acc ", 6);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 16) = 0;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100938118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100938138(uint64_t a1, double *a2, uint64_t *a3)
{
  BOOL v6 = sub_1013F113C(*(void *)(a1 + 24));
  if (v6)
  {
    return sub_1009374AC(a1, a2, a3);
  }
  else
  {
    return sub_10093767C(v6, (uint64_t *)a2, a3);
  }
}

uint64_t sub_1009381B8(uint64_t a1, double *a2)
{
  return sub_100938138(a1, a2, (uint64_t *)(a1 + 64));
}

void sub_1009381C0(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t *a4)
{
  if (*a4)
  {
    LODWORD(v42.__r_.__value_.__l.__data_) = 3;
    *(void *)std::string __p = &v42;
    int v7 = *((_DWORD *)sub_100125FD0(a3, (int *)&v42, (uint64_t)&unk_101D0B290, (unsigned int **)__p) + 8);
    LODWORD(v42.__r_.__value_.__l.__data_) = 0;
    *(void *)std::string __p = &v42;
    int v8 = *((_DWORD *)sub_100125FD0(a3, (int *)&v42, (uint64_t)&unk_101D0B290, (unsigned int **)__p) + 8);
    LODWORD(v42.__r_.__value_.__l.__data_) = 1;
    *(void *)std::string __p = &v42;
    int v9 = *((_DWORD *)sub_100125FD0(a3, (int *)&v42, (uint64_t)&unk_101D0B290, (unsigned int **)__p) + 8);
    LODWORD(v42.__r_.__value_.__l.__data_) = 2;
    *(void *)std::string __p = &v42;
    int v10 = *((_DWORD *)sub_100125FD0(a3, (int *)&v42, (uint64_t)&unk_101D0B290, (unsigned int **)__p) + 8);
    sub_100134750(&v41, "MovingApDetector, ");
    unsigned int v11 = sub_1006D5CC0(*a4);
    if (v11)
    {
      std::to_string(&v42, v11);
      uint64_t v12 = std::string::insert(&v42, 0, "database count: ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0) {
        std::string v14 = __p;
      }
      else {
        std::string v14 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v15 = __p[23];
      }
      else {
        std::string::size_type v15 = *(void *)&__p[8];
      }
      std::string::append(&v41, v14, v15);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::append(&v41, "database empty");
    }
    std::to_string(&v40, a2);
    int v18 = std::string::insert(&v40, 0, ", cross-checked ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    BOOL v20 = std::string::append(&v42, " centroids");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v20->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (__p[23] >= 0) {
      int v22 = __p;
    }
    else {
      int v22 = *(const std::string::value_type **)__p;
    }
    if (__p[23] >= 0) {
      std::string::size_type v23 = __p[23];
    }
    else {
      std::string::size_type v23 = *(void *)&__p[8];
    }
    std::string::append(&v41, v22, v23);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (v7 == a2)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      long long v24 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        long long v25 = &v41;
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v25 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s, all centroids are invalid!", __p, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      long long v26 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
    }
    else if (v10 == a2)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      int v27 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v28 = &v41;
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v28 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s, all centroids are unknown!", __p, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      long long v26 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
    }
    else if (v9 == a2)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      long long v29 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        long long v30 = &v41;
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v30 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%s, all centroids are good!", __p, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      long long v26 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
    }
    else
    {
      if (v8 != a2)
      {
        if (v9 + v7 == a2)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4450);
          }
          __int16 v34 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            long long v35 = &v41;
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v35 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = v35;
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = v7;
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = v9;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s, %d invalid, all %d valid centroids are good!", __p, 0x18u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_107;
          }
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4450);
          }
          long long v36 = &v41;
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v36 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          LODWORD(v42.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
          WORD2(v42.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[1] + 6) = v7;
          WORD1(v42.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v42.__r_.__value_.__r.__words[2]) = v9;
          char v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v33);
        }
        else
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4450);
          }
          long long v37 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            long long v38 = &v41;
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v38 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = v38;
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = v7;
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = v10;
            __int16 v48 = 1024;
            int v49 = v9;
            __int16 v50 = 1024;
            int v51 = v8;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%s, %d invalid, %d unknown, %d good, %d bad!", __p, 0x24u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_107;
          }
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4450);
          }
          long long v39 = &v41;
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v39 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          LODWORD(v42.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
          WORD2(v42.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[1] + 6) = v7;
          WORD1(v42.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v42.__r_.__value_.__r.__words[2]) = v10;
          __int16 v43 = 1024;
          int v44 = v9;
          __int16 v45 = 1024;
          int v46 = v8;
          char v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v33);
        }
        goto LABEL_115;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      long long v31 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        long long v32 = &v41;
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v32 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%s, all centroids are bad!", __p, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_107;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      long long v26 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
    }
    LODWORD(v42.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    char v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v33);
LABEL_115:
    if (v33 != __p) {
      free(v33);
    }
LABEL_107:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4450);
  }
  double v16 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", __p, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    LOWORD(v42.__r_.__value_.__l.__data_) = 0;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v17);
    if (v17 != __p) {
      free(v17);
    }
  }
}

void sub_100938E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100938F40(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_101407E78(a1 + 168);
  if (a2[2])
  {
    uint64_t v6 = sub_100935084(a1);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)a3 = a3 + 8;
    v27[0] = 0;
    v27[1] = 0;
    long long v26 = (uint64_t *)v27;
    int v7 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      do
      {
        if (sub_10106EB1C((double *)v7 + 5))
        {
          if (sub_100938138(a1, (double *)v7 + 5, (uint64_t *)(a1 + 56)))
          {
            *(_DWORD *)std::string buf = 0;
            std::string __p = buf;
            int v8 = sub_100125FD0(&v26, (int *)buf, (uint64_t)&unk_101D0B290, (unsigned int **)&__p);
            ++*((_DWORD *)v8 + 8);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022D4450);
            }
            int v9 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
            {
              sub_100936C70(v7 + 5, (std::string *)&__p);
              p_p = &__p;
              if ((v37 & 0x80000000) != 0) {
                p_p = __p;
              }
              *(_DWORD *)std::string buf = 136380675;
              *(void *)&uint8_t buf[4] = p_p;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid %{private}s is filtered out", buf, 0xCu);
              if (SBYTE3(v37) < 0) {
                operator delete(__p);
              }
            }
            uint64_t v6 = sub_10013D1A0(115, 2);
            if (v6)
            {
              bzero(&__p, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022D4450);
              }
              sub_100936C70(v7 + 5, (std::string *)buf);
              if ((v30 & 0x80000000) == 0) {
                unsigned int v11 = buf;
              }
              else {
                unsigned int v11 = *(unsigned char **)buf;
              }
              int v31 = 136380675;
              long long v32 = v11;
              uint64_t v12 = (char *)_os_log_send_and_compose_impl();
              if (SBYTE3(v30) < 0) {
                operator delete(*(void **)buf);
              }
              uint64_t v6 = sub_1004BA5E4("Generic", 1, 0, 2, "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(const std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v12);
              if (v12 != (char *)&__p) {
                free(v12);
              }
            }
          }
          else
          {
            *(_DWORD *)std::string buf = 1;
            std::string __p = buf;
            long long v13 = sub_100125FD0(&v26, (int *)buf, (uint64_t)&unk_101D0B290, (unsigned int **)&__p);
            ++*((_DWORD *)v13 + 8);
            uint64_t v6 = (uint64_t)sub_10052952C((uint64_t **)a3, v7 + 4, v7 + 4, v7 + 5);
          }
        }
        else
        {
          *(_DWORD *)std::string buf = 3;
          std::string __p = buf;
          uint64_t v6 = (uint64_t)sub_100125FD0(&v26, (int *)buf, (uint64_t)&unk_101D0B290, (unsigned int **)&__p);
          ++*(_DWORD *)(v6 + 32);
        }
        std::string v14 = (void *)v7[1];
        if (v14)
        {
          do
          {
            std::string::size_type v15 = v14;
            std::string v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            std::string::size_type v15 = (void *)v7[2];
            BOOL v16 = *v15 == (void)v7;
            int v7 = v15;
          }
          while (!v16);
        }
        int v7 = v15;
      }
      while (v15 != a2 + 1);
    }
    sub_1009381C0(v6, a2[2], &v26, (uint64_t *)(a1 + 56));
    sub_10093578C(a1, (uint64_t *)(a1 + 56));
    *(_DWORD *)std::string buf = 0;
    std::string __p = buf;
    int v17 = *((_DWORD *)sub_100125FD0(&v26, (int *)buf, (uint64_t)&unk_101D0B290, (unsigned int **)&__p) + 8);
    if (v17 >= 1)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      int v18 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = a2[2];
        uint64_t v20 = *(void *)(a3 + 16);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v17;
        __int16 v34 = 2048;
        uint64_t v35 = v19;
        __int16 v36 = 2048;
        uint64_t v37 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "MovingApDetector, %d out of %zu centroids got filtered out, %zu remaining", (uint8_t *)&__p, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4450);
        }
        uint64_t v22 = a2[2];
        uint64_t v23 = *(void *)(a3 + 16);
        *(_DWORD *)std::string buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v22;
        __int16 v29 = 2048;
        uint64_t v30 = v23;
        long long v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(const std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v24);
        if (v24 != (char *)&__p) {
          free(v24);
        }
      }
    }
    sub_1000F5BB0((uint64_t)&v26, v27[0]);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4450);
    }
    long long v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, no centroids for cross-check", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4450);
      }
      *(_WORD *)std::string buf = 0;
      long long v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(const std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v25);
      if (v25 != (char *)&__p) {
        free(v25);
      }
    }
    sub_1005296F0(a3, (uint64_t)a2);
  }
}

void sub_1009395FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
  sub_1000F5BB0((uint64_t)&a16, a17);
  sub_1000F5BB0(v17, *(void **)(v17 + 8));
  _Unwind_Resume(a1);
}

void sub_100939650(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void *sub_100939680@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x1B0uLL);
  uint64_t result = sub_1009396CC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1009396B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1009396CC(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022D4480;
  sub_1013F040C((uint64_t)(a1 + 3));
  return a1;
}

void sub_100939714(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100939728(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D4480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100939748(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D4480;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10093979C(uint64_t a1)
{
  return sub_1013F04FC(a1 + 24);
}

void sub_1009397A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100939860(_Unwind_Exception *a1)
{
}

void sub_100939878()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100939920(_Unwind_Exception *a1)
{
}

uint64_t sub_100939938()
{
  sub_100134750(qword_10247EEC0, "BadClientSideCentroidTable");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247EEC0, (void *)&_mh_execute_header);
  sub_100134750(qword_10247EED8, "MovingApDetectionTable");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247EED8, (void *)&_mh_execute_header);
}

unsigned char *sub_1009399D0(unsigned char *__dst, unsigned __int8 *a2, size_t a3)
{
  if (a3 && a3 == 8 * (*a2 - 1 < 2)) {
    memcpy(__dst, a2, a3);
  }
  else {
    *__dst = -1;
  }
  return __dst;
}

uint64_t sub_100939A24(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  switch(v2)
  {
    case 255:
      return 0;
    case 2:
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 24))(a2, a1);
      break;
    case 1:
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 16))(a2, a1);
      break;
  }
  return 1;
}

void *sub_100939AC0(void *result, uint64_t a2)
{
  *uint64_t result = off_1022D44D0;
  result[1] = a2;
  return result;
}

uint64_t sub_100939AE0(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MaxHarvestLocationPointsPerUpload", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_100939B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100939B54(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MaxHarvestLocations", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_100939BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100939BC8(uint64_t a1, float a2, double a3)
{
  sub_100939CA8(a1, a2, a3);
  if (*(unsigned char *)(a1 + 48))
  {
    float v5 = sub_100939D34((void *)a1, 20.0);
    float v6 = sub_100939D34((void *)a1, 0.0);
    if (v5 != -9999.0)
    {
      BOOL v7 = v6 == -9999.0;
      float v8 = vabds_f32(v5, v6);
      if (!v7 && v8 < 1.0)
      {
        sub_100939E58((void *)a1, a3 + -4.0);
        *(_WORD *)(a1 + 48) = 0;
        *(double *)(a1 + 56) = a3;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 49))
  {
    float v10 = sub_100939D34((void *)a1, 0.0);
    float v11 = sub_100939EE8((void *)a1);
    if (v10 != -9999.0)
    {
      BOOL v7 = v11 == -9999.0;
      float v12 = vabds_f32(v10, v11);
      if (!v7 && v12 >= 3.0) {
        *(unsigned char *)(a1 + 48) = 1;
      }
    }
  }
}

uint64_t sub_100939CA8(uint64_t a1, float a2, double a3)
{
  sub_100939FC0(a1, a3);
  v7.n128_f64[0] = a3;
  v7.n128_u32[2] = sub_1001C1F30(a2 * 1000.0, 101320.0);
  sub_10093A104((void *)a1, &v7);
  uint64_t result = sub_100939E58((void *)a1, a3 + -44.0);
  *(unsigned char *)(a1 + 49) = result != 0;
  return result;
}

float sub_100939D34(void *a1, double a2)
{
  uint64_t v2 = a1[5];
  if (!v2) {
    return -9999.0;
  }
  unint64_t v3 = a1[4];
  unint64_t v4 = v3 + v2;
  unint64_t v5 = v3 + v2 - 1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  double v8 = *(double *)(*(void *)(v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v5) - a2;
  int v9 = (void *)(v6 + 8 * (v4 >> 8));
  if (v7 == v6) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *v9 + 16 * v4;
  }
  int v12 = 0;
  double v13 = v8 + -4.0;
  float v14 = 0.0;
  while (1)
  {
    uint64_t v15 = v7 == v6 ? 0 : *(void *)(v6 + 8 * (v3 >> 8)) + 16 * a1[4];
    if (v10 == v15) {
      break;
    }
    if (v10 == *v9)
    {
      uint64_t v18 = *--v9;
      uint64_t v17 = v18;
      double v19 = *(double *)(v18 + 4080);
      if (v19 <= v8)
      {
        if (v19 < v13) {
          break;
        }
        float v14 = v14 + (float)((float)(*(float *)(v17 + 4088) - v14) / (float)++v12);
      }
      uint64_t v10 = *v9 + 4096;
    }
    else
    {
      double v16 = *(double *)(v10 - 16);
      if (v16 <= v8)
      {
        if (v16 < v13) {
          break;
        }
        float v14 = v14 + (float)((float)(*(float *)(v10 - 8) - v14) / (float)++v12);
      }
    }
    v10 -= 16;
  }
  float result = -9999.0;
  if (v12) {
    return v14;
  }
  return result;
}

uint64_t sub_100939E58(void *a1, double a2)
{
  uint64_t v2 = a1[5];
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    unint64_t v6 = a1[4];
    if (*(double *)(*(void *)(a1[1] + ((v6 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v6) >= a2) {
      break;
    }
    a1[4] = v6 + 1;
    a1[5] = v2 - 1;
    sub_100096314((uint64_t)a1, 1);
    uint64_t v5 = (v5 + 1);
    uint64_t v2 = a1[5];
  }
  while (v2);
  return v5;
}

float sub_100939EE8(void *a1)
{
  uint64_t v1 = a1[5];
  if (!v1) {
    return -9999.0;
  }
  int v2 = 0;
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (uint64_t *)(v4 + 8 * (v3 >> 8));
  uint64_t v7 = *v6;
  uint64_t v8 = *v6 + 16 * v3;
  double v9 = *(double *)v8 + 20.0;
  if (v5 == v4) {
    uint64_t v8 = 0;
  }
  unint64_t v10 = v3 + v1;
  float v11 = 0.0;
LABEL_5:
  uint64_t v12 = v7 - v8 + 4096;
  while (1)
  {
    uint64_t v13 = v5 == v4 ? 0 : *(void *)(v4 + 8 * (v10 >> 8)) + 16 * v10;
    if (v8 == v13 || *(double *)v8 > v9) {
      break;
    }
    float v11 = v11 + (float)((float)(*(float *)(v8 + 8) - v11) / (float)++v2);
    v8 += 16;
    v12 -= 16;
    if (!v12)
    {
      uint64_t v14 = v6[1];
      ++v6;
      uint64_t v7 = v14;
      uint64_t v8 = v14;
      goto LABEL_5;
    }
  }
  float result = -9999.0;
  if (v2) {
    return v11;
  }
  return result;
}

double sub_100939FB0(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t sub_100939FB8(uint64_t result)
{
  *(void *)(result + 56) = 0;
  return result;
}

void sub_100939FC0(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    unint64_t v5 = v2 + *(void *)(a1 + 32) - 1;
    unint64_t v6 = *(void ***)(a1 + 8);
    uint64_t v7 = (double *)(*(char **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v5);
    if (vabdd_f64(a2, *v7) <= 44.0)
    {
      for (double i = *v7 + 1.0; i < a2; double i = *v7 + 1.0)
      {
        *uint64_t v7 = i;
        v14.n128_u32[2] = -971228160;
        v14.n128_f64[0] = i;
        unint64_t v13 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1;
        v14.n128_u32[2] = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v13
                                    + 8);
        sub_10093A104((void *)a1, &v14);
      }
    }
    else
    {
      *(_WORD *)(a1 + 48) = 0;
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 40) = 0;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          uint64_t v10 = *(void *)(a1 + 16);
          unint64_t v6 = (void **)(*(void *)(a1 + 8) + 8);
          *(void *)(a1 + 8) = v6;
          unint64_t v9 = v10 - (void)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2) {
          return;
        }
        uint64_t v11 = 256;
      }
      *(void *)(a1 + 32) = v11;
    }
  }
}

__n128 sub_10093A104(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10093A190(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_10093A190(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        std::string v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)std::string v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10093A45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10093A4A8(uint64_t a1, double a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v4 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  sub_100921700(a1 + 88);
  *(double *)(a1 + 80) = a2;
  sub_1000C7F88(buf);
  int v5 = sub_1000A699C(*(uint64_t *)buf, "maxAllowedAccessPointNotificationAge", (void *)(a1 + 80));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v5)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4538);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 80);
      *(_DWORD *)std::string buf = 134283521;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxAllowedAccessPointNotificationAge to %{private}.1f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4538);
      }
      unint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWsbScanComparator::CLWsbScanComparator(const CFTimeInterval)", "%s\n", v9);
      if (v9 != buf) {
        free(v9);
      }
    }
  }
  sub_100921700((uint64_t)buf);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&buf[8];
  *(_OWORD *)(a1 + 108) = *(_OWORD *)&buf[20];
  *(_OWORD *)(a1 + 124) = v11;
  *(_OWORD *)(a1 + 140) = v12;
  *(_DWORD *)(a1 + 156) = v13;
  sub_10093CC08(a1);
  sub_10093CC08(v4);
  return a1;
}

void sub_10093A718(_Unwind_Exception *a1)
{
  sub_10093CB78(v2);
  sub_10093CB78(v1);
  _Unwind_Resume(a1);
}

void sub_10093A758(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247EF30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247EF30))
  {
    __cxa_atexit((void (*)(void *))sub_10093A814, &xmmword_10247EF20, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247EF30);
  }
  if (qword_10247EF38 != -1) {
    dispatch_once(&qword_10247EF38, &stru_1022D4518);
  }
  uint64_t v2 = *((void *)&xmmword_10247EF20 + 1);
  *a1 = xmmword_10247EF20;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t sub_10093A814(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_10093A844(id a1)
{
  sub_10093CC60(&v3);
  long long v1 = v3;
  long long v3 = 0uLL;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&xmmword_10247EF20 + 1);
  xmmword_10247EF20 = v1;
  if (v2)
  {
    sub_1000DB0A0(v2);
    if (*((void *)&v3 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
    }
  }
}

uint64_t sub_10093A898(uint64_t result, void *a2)
{
  uint64_t v2 = *(uint64_t **)result;
  long long v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      uint64_t v10 = *v2;
      if (!sub_10058A478(a2, &v10))
      {
        memset(v9, 0, sizeof(v9));
        sub_10093CDC0((uint64_t)a2, &v10, &v10, (uint64_t)v9);
        long long v11 = (void **)v9;
        sub_1000D7F78(&v11);
      }
      int v5 = sub_10058A478(a2, &v10);
      if (!v5) {
        sub_10000EDDC("unordered_map::at: key not found");
      }
      uint64_t v6 = v5;
      uint64_t v7 = v5 + 3;
      unint64_t v8 = v6[4];
      if (v8 >= v6[5])
      {
        __n128 result = sub_1001F8D14(v7, (uint64_t)v2);
      }
      else
      {
        sub_1001F8C88((uint64_t)v7, (uint64_t)v2);
        __n128 result = v8 + 88;
      }
      v6[4] = result;
      v2 += 11;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_10093A974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_1000D7F78(&a14);
  _Unwind_Resume(a1);
}

void sub_10093A990(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    unint64_t v5 = 0;
    double v6 = *(double *)(v3 + 56);
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    unint64_t v29 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      if (vabdd_f64(v6, *(double *)(v3 + 56)) <= 4.0)
      {
        if (v5 >= v29) {
          goto LABEL_18;
        }
        sub_1001F8C88((uint64_t)&v27, v3);
        v5 += 88;
      }
      else
      {
        uint64_t v7 = v27;
        sub_10093B088(&v24, (uint64_t)&v27);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4558);
        }
        uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - v7) >> 3);
        unint64_t v9 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = [a2 UTF8String];
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = v10;
          __int16 v39 = 2050;
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
          __int16 v41 = 2050;
          uint64_t v42 = v8;
          __int16 v43 = 2050;
          double v44 = v6;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4558);
          }
          id v13 = [a2 UTF8String];
          int v30 = 136446978;
          id v31 = v13;
          __int16 v32 = 2050;
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
          __int16 v34 = 2050;
          uint64_t v35 = v8;
          __int16 v36 = 2050;
          double v37 = v6;
          BOOL v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)", "%s\n", v14);
          if (v14 != buf) {
            free(v14);
          }
        }
        double v6 = *(double *)(v3 + 56);
        unint64_t v11 = v27;
        for (unint64_t i = v28; i != v11; i -= 88)
        {
          if (*(char *)(i - 57) < 0) {
            operator delete(*(void **)(i - 80));
          }
        }
        unint64_t v28 = v11;
        if (v11 >= v29)
        {
LABEL_18:
          unint64_t v5 = sub_1001F8D14((uint64_t *)&v27, v3);
          goto LABEL_19;
        }
        sub_1001F8C88((uint64_t)&v27, v3);
        unint64_t v5 = v11 + 88;
      }
LABEL_19:
      unint64_t v28 = v5;
      v3 += 88;
      if (v3 == v4)
      {
        uint64_t v15 = v27;
        sub_10093B088(&v24, (uint64_t)&v27);
        uint64_t v16 = (uint64_t)(v5 - v15) >> 3;
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4558);
        }
        uint64_t v17 = 0x2E8BA2E8BA2E8BA3 * v16;
        uint64_t v18 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          id v19 = [a2 UTF8String];
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v39 = 2050;
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
          __int16 v41 = 2050;
          uint64_t v42 = v17;
          __int16 v43 = 2050;
          double v44 = v6;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@WsbGroupCheck, %{public}s, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4558);
          }
          id v21 = [a2 UTF8String];
          int v30 = 136446978;
          id v31 = v21;
          __int16 v32 = 2050;
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
          __int16 v34 = 2050;
          uint64_t v35 = v17;
          __int16 v36 = 2050;
          double v37 = v6;
          unint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)", "%s\n", v22);
          if (v22 != buf) {
            free(v22);
          }
        }
        *(void *)std::string buf = &v24;
        sub_1000D7F04((void ***)buf);
        *(void *)std::string buf = &v27;
        sub_1000D7F78((void ***)buf);
        return;
      }
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4558);
  }
  int64_t v20 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = [a2 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@WsbGroupCheck, %{public}s, empty", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4558);
    }
    int v30 = 136446210;
    id v31 = [a2 UTF8String];
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void createWsbGroups(CLWifiService_Type::AccessPointVector, NSString *)", "%s\n", v23);
    if (v23 != buf) {
      free(v23);
    }
  }
}

void sub_10093B038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a13;
  sub_1000D7F04(&a25);
  a25 = (void **)&a16;
  sub_1000D7F78(&a25);
  _Unwind_Resume(a1);
}

void *sub_10093B088(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    id v13 = (char *)sub_1000DA5D8((uint64_t)v4, v12);
    BOOL v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)BOOL v14 = 0;
    *(_OWORD *)BOOL v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_10093D088(a1, v17);
    uint64_t v8 = (void *)a1[1];
    sub_10093D228(v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_10093B1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10093D228((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_10093B1CC(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 1)
  {
    sub_10093A898(a2, a1 + 5);
    sub_100921764((uint64_t)(a1 + 11), -1171354717 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    memset(v11, 0, sizeof(v11));
    sub_1000DA6E8(v11, *(void *)a2, *(void *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    unint64_t v5 = v11;
    sub_10093A990(v11, @"bgScanCache");
    goto LABEL_5;
  }
  if (v4 == 2)
  {
    sub_10093A898(a2, a1);
    sub_100921748((uint64_t)(a1 + 11), -1171354717 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    memset(v12, 0, sizeof(v12));
    sub_1000DA6E8(v12, *(void *)a2, *(void *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    unint64_t v5 = v12;
    sub_10093A990(v12, @"aonsensed");
LABEL_5:
    *(void *)std::string buf = v5;
    sub_1000D7F78((void ***)buf);
    return sub_10093B4B4((uint64_t)a1);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D4538);
  }
  unint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = sub_100D54ED8(*(_DWORD *)(a2 + 24));
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "@Wsb, warning, received WSB scan from unsupported source %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4538);
    }
    unint64_t v9 = sub_100D54ED8(*(_DWORD *)(a2 + 24));
    int v13 = 136446210;
    BOOL v14 = v9;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWsbScanComparator::receiveWsbScanEvent(const CL::Wifi1::Events::Wifi::Wsb &)", "%s\n", v10);
    if (v10 != buf) {
      free(v10);
    }
  }
  return sub_10093B4B4((uint64_t)a1);
}

void sub_10093B490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_10093B4B4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  for (unint64_t i = *(void **)(a1 + 56); i; unint64_t i = (void *)*i)
    sub_10093BD74((void *)a1, i + 2, i + 3);
  sub_10093BCF0(a1, (void *)a1);
  sub_10093BCF0(a1, v2);
  int v4 = *(void **)(a1 + 16);
  if (v4)
  {
    int v5 = 0;
    do
    {
      v5 -= 1171354717 * ((v4[4] - v4[3]) >> 3);
      int v4 = (void *)*v4;
    }
    while (v4);
    int v6 = v5;
  }
  else
  {
    int v6 = 0;
  }
  sub_10092179C(a1 + 88, v6);
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7)
  {
    int v8 = 0;
    do
    {
      v8 -= 1171354717 * ((v7[4] - v7[3]) >> 3);
      uint64_t v7 = (void *)*v7;
    }
    while (v7);
    int v9 = v8;
  }
  else
  {
    int v9 = 0;
  }
  sub_1009217A4(a1 + 88, v9);
  sub_1009217BC((_DWORD *)(a1 + 88));

  return sub_1005B1D3C((double *)(a1 + 88));
}

uint64_t sub_10093B5B8(uint64_t a1, void *a2)
{
  return sub_100921780(a1 + 88, -1171354717 * ((uint64_t)(a2[1] - *a2) >> 3));
}

void sub_10093B5E0(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2 != a2[1])
  {
    do
    {
      if (sub_100D54C3C((uint64_t)v2) <= *(double *)(a1 + 80) + 0.0)
      {
        v2 += 11;
        int v8 = a2[1];
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4538);
        }
        int v5 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100D5475C(v2);
          int v6 = v17 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::string buf = 136380675;
          *(void *)&uint8_t buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "@Wsb, WsbScanComparator, removing AP %{private}s as it is too old", buf, 0xCu);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4538);
          }
          sub_100D5475C(v2);
          unint64_t v10 = buf;
          if (v13 < 0) {
            unint64_t v10 = *(unsigned char **)buf;
          }
          int v14 = 136380675;
          uint64_t v15 = v10;
          unint64_t v11 = (char *)_os_log_send_and_compose_impl();
          if (v13 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWsbScanComparator::removeAccessPointsTooOld(CLWifiService_Type::AccessPointVector &)", "%s\n", v11);
          if (v11 != (char *)__p) {
            free(v11);
          }
        }
        sub_10093D2B0((uint64_t)__p, (uint64_t)(v2 + 11), (uint64_t)a2[1], (uint64_t)v2);
        int v8 = v7;
        for (unint64_t i = a2[1]; i != v8; i -= 11)
        {
          if (*((char *)i - 57) < 0) {
            operator delete((void *)*(i - 10));
          }
        }
        a2[1] = v8;
      }
    }
    while (v2 != v8);
  }
}

void sub_10093B898(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
  {
    if (i[3] == i[4])
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4538);
      }
      int v4 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        sub_100B39278(__p);
        int v5 = __p;
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v5 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "@Wsb, failed validity check, mac %{private}s has 0 AP", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4538);
        }
        sub_100B39278(&buf);
        unint64_t v11 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWsbScanComparator::validityCheck(const std::unordered_map<CLMacAddress, CLWifiService_Type::AccessPointVector> &)", "%s\n", (const char *)v11);
        if (v11 != __p) {
          free(v11);
        }
      }
    }
    uint64_t v7 = (uint64_t *)i[3];
    int v6 = (uint64_t *)i[4];
    while (v7 != v6)
    {
      if (sub_100D54C3C((uint64_t)v7) > *(double *)(a1 + 80) + 0.2)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D4538);
        }
        int v8 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
        {
          sub_100D5475C(v7);
          int v9 = __p;
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v9 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 0x3FC999999999999ALL;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "@Wsb, failed validity check, ap is too old, %{private}s, buffer, %{public}.1f", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4538);
          }
          sub_100D5475C(v7);
          unint64_t v10 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWsbScanComparator::validityCheck(const std::unordered_map<CLMacAddress, CLWifiService_Type::AccessPointVector> &)", "%s\n", (const char *)v10);
          if (v10 != __p) {
            free(v10);
          }
        }
      }
      v7 += 11;
    }
  }
}

void sub_10093BCF0(uint64_t a1, void *a2)
{
  for (uint64_t i = a2[2]; i; uint64_t i = sub_10093D350(a2, (uint64_t *)i))
  {
    while (1)
    {
      sub_10093B5E0(a1, (uint64_t **)(i + 24));
      if (*(void *)(i + 24) == *(void *)(i + 32)) {
        break;
      }
      uint64_t i = *(void *)i;
      if (!i) {
        goto LABEL_6;
      }
    }
  }
LABEL_6:

  sub_10093B898(a1, (uint64_t)a2);
}

void sub_10093BD74(void *a1, void *a2, uint64_t *a3)
{
  if (sub_10058A478(a1, a2))
  {
    int v6 = sub_10058A478(a1, a2);
    if (!v6) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    uint64_t v7 = *a3;
    if (*a3 != a3[1])
    {
      int v8 = v6;
      uint64_t v9 = (uint64_t)(a1 + 11);
      do
      {
        uint64_t v10 = v8[3];
        if (v10 == v8[4])
        {
LABEL_24:
          v7 += 88;
        }
        else
        {
          uint64_t v11 = -v10;
          while (1)
          {
            __p[0] = *(void **)v7;
            *(void *)uint64_t v45 = *(void *)v10;
            if (!sub_100B3918C(__p, v45) && *(_DWORD *)(v7 + 40) == *(_DWORD *)(v10 + 40))
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247EF48, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_10247EF48))
              {
                dword_10247EF40 = sub_10093C51C();
                __cxa_guard_release(&qword_10247EF48);
              }
              if (fabs((double)(*(_DWORD *)(v7 + 32) - *(_DWORD *)(v10 + 32))) <= (double)dword_10247EF40
                && (*(unsigned char *)(v7 + 72) != 0) == (*(unsigned char *)(v10 + 72) != 0))
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247EF58, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_10247EF58))
                {
                  qword_10247EF50 = sub_10093C738();
                  __cxa_guard_release(&qword_10247EF58);
                }
                if (vabdd_f64(*(double *)(v7 + 56), *(double *)(v10 + 56)) <= *(double *)&qword_10247EF50)
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247EF68, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_10247EF68))
                  {
                    qword_10247EF60 = sub_10093C958();
                    __cxa_guard_release(&qword_10247EF68);
                  }
                  if (vabdd_f64(*(double *)(v7 + 48), *(double *)(v10 + 48)) <= *(double *)&qword_10247EF60) {
                    break;
                  }
                }
              }
            }
            v10 += 88;
            v11 -= 88;
            if (v10 == v8[4]) {
              goto LABEL_24;
            }
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4538);
          }
          uint64_t v12 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            log = v12;
            sub_100D5475C((uint64_t *)v7);
            uint64_t v33 = v9;
            int v13 = v44;
            int v14 = (void **)__p[0];
            sub_100D5475C((uint64_t *)v10);
            uint64_t v15 = __p;
            if (v13 < 0) {
              uint64_t v15 = v14;
            }
            uint64_t v16 = v45;
            if (v46 < 0) {
              uint64_t v16 = *(unsigned char **)v45;
            }
            *(_DWORD *)std::string buf = 136380931;
            *(void *)&uint8_t buf[4] = v15;
            __int16 v36 = 2081;
            double v37 = v16;
            _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "@Wsb, AP %{private}s from WifiManager is matched with AP %{private}s from Aonsensed", buf, 0x16u);
            if (v46 < 0) {
              operator delete(*(void **)v45);
            }
            uint64_t v9 = v33;
            if (v44 < 0) {
              operator delete(__p[0]);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            uint64_t v34 = v9;
            bzero(__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022D4538);
            }
            sub_100D5475C((uint64_t *)v7);
            int v25 = v46;
            uint64_t v26 = *(unsigned char **)v45;
            sub_100D5475C((uint64_t *)v10);
            unint64_t v27 = v45;
            if (v25 < 0) {
              unint64_t v27 = v26;
            }
            unint64_t v28 = buf;
            if (v38 < 0) {
              unint64_t v28 = *(unsigned char **)buf;
            }
            int v39 = 136380931;
            unint64_t v40 = v27;
            __int16 v41 = 2081;
            uint64_t v42 = v28;
            unint64_t v29 = (char *)_os_log_send_and_compose_impl();
            if (v38 < 0) {
              operator delete(*(void **)buf);
            }
            if (v46 < 0) {
              operator delete(*(void **)v45);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL checkIfApIsMatched(const CLWifiService_Type::AccessPoint &, CLWifiService_Type::AccessPointVector &)", "%s\n", v29);
            uint64_t v9 = v34;
            if (v29 != (char *)__p) {
              free(v29);
            }
          }
          sub_10093D2B0((uint64_t)__p, 88 - v11, v8[4], -v11);
          uint64_t v18 = v17;
          for (uint64_t i = v8[4]; i != v18; i -= 88)
          {
            if (*(char *)(i - 57) < 0) {
              operator delete(*(void **)(i - 80));
            }
          }
          v8[4] = v18;
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D4538);
          }
          int64_t v20 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            sub_100D5475C((uint64_t *)v7);
            id v21 = __p;
            if (v44 < 0) {
              id v21 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t v45 = 136380675;
            *(void *)&v45[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "@Wsb, removing AP %{private}s from WifiManager as it is matched with Aonsensed", v45, 0xCu);
            if (v44 < 0) {
              operator delete(__p[0]);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022D4538);
            }
            sub_100D5475C((uint64_t *)v7);
            int v30 = v45;
            if (v46 < 0) {
              int v30 = *(unsigned char **)v45;
            }
            *(_DWORD *)std::string buf = 136380675;
            *(void *)&uint8_t buf[4] = v30;
            id v31 = (char *)_os_log_send_and_compose_impl();
            if (v46 < 0) {
              operator delete(*(void **)v45);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWsbScanComparator::checkApMatchForWifiManager(const CLMacAddress &, CLWifiService_Type::AccessPointVector &)", "%s\n", v31);
            if (v31 != (char *)__p) {
              free(v31);
            }
          }
          sub_10093D2B0((uint64_t)__p, v7 + 88, a3[1], v7);
          uint64_t v23 = v22;
          for (uint64_t j = a3[1]; j != v23; j -= 88)
          {
            if (*(char *)(j - 57) < 0) {
              operator delete(*(void **)(j - 80));
            }
          }
          a3[1] = v23;
          sub_1009217AC(v9);
        }
      }
      while (v7 != a3[1]);
    }
  }
}

void sub_10093C450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_10093C4BC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10093C4EC(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_10093C51C()
{
  v4[0] = 0;
  sub_1000C7F88(buf);
  int v0 = sub_10006EF84(*(uint64_t *)buf, "maxRssiDeltaAllowed", v4);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4538);
    }
    long long v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = v4[0];
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxRssiDeltaAllowed to %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4538);
      }
      v4[1] = 67174657;
      v4[2] = v4[0];
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int getMaxRssiDeltaAllowed()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return v4[0];
  }
  else
  {
    sub_100103240();
    if (sub_100737DF0()) {
      return 5;
    }
    else {
      return 0;
    }
  }
}

void sub_10093C718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

double sub_10093C738()
{
  double v5 = 0.0;
  sub_1000C7F88(buf);
  int v0 = sub_1000A699C(*(uint64_t *)&buf[0], "maxTimestampDeltaAllowed", &v5);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4538);
    }
    long long v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134283521;
      *(double *)((char *)buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxTimestampDeltaAllowed to %{private}.1f", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4538);
      }
      int v6 = 134283521;
      double v7 = v5;
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval getMaxTimestampDeltaAllowed()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return v5;
  }
  else
  {
    sub_100103240();
    int v3 = sub_100737DF0();
    double result = 1.0;
    if (v3) {
      return 5.0;
    }
  }
  return result;
}

void sub_10093C938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_10093C958()
{
  double v5 = 0.0;
  sub_1000C7F88(buf);
  int v0 = sub_1000A699C(*(uint64_t *)&buf[0], "maxAgeDeltaAllowed", &v5);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D4538);
    }
    long long v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134283521;
      *(double *)((char *)buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "@Wsb, #Warning defaults write maxAgeDeltaAllowed to %{private}.1f", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D4538);
      }
      int v6 = 134283521;
      double v7 = v5;
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval getMaxAgeDeltaAllowed()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return v5;
  }
  else
  {
    sub_100103240();
    int v3 = sub_100737DF0();
    double result = 1.0;
    if (v3) {
      return 5.0;
    }
  }
  return result;
}

void sub_10093CB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10093CB78(uint64_t a1)
{
  sub_10093CBB4(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10093CBB4(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = *(char **)v2;
      int v4 = (void **)(v2 + 24);
      sub_1000D7F78(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_10093CC08(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10093CBB4(a1, *(char **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *sub_10093CC60@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xB8uLL);
  double result = sub_10093CCAC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10093CC98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10093CCAC(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022D4588;
  sub_10093A4A8((uint64_t)(a1 + 3), 6.0);
  return a1;
}

void sub_10093CCF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10093CD0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D4588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10093CD2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D4588;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10093CD80(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  sub_10093CB78(a1 + 64);

  return sub_10093CB78(v1);
}

char *sub_10093CDC0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v9 = sub_1000D8908((uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_100B39178((void *)v15 + 2, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v15 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 2) = *a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((void *)v15 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100100330(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t v15 = *v25;
LABEL_38:
    *int v25 = v15;
    goto LABEL_39;
  }
  *(void *)uint64_t v15 = *v17;
  *uint64_t v17 = v15;
  *(void *)(v24 + 8 * v4) = v17;
  if (*(void *)v15)
  {
    unint64_t v26 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    int v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_10093D020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10093D03C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10093D03C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v3 = __p + 3;
    sub_1000D7F78(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_10093D088(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10093D100((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10093D100(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_10093D1A4((uint64_t)v11);
  return v9;
}

uint64_t sub_10093D1A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10093D1DC(a1);
  }
  return a1;
}

void sub_10093D1DC(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = v1;
    sub_1000D7F78(&v3);
    v1 += 3;
  }
}

void **sub_10093D228(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10093D25C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_1000D7F78(&v5);
  }
}

uint64_t sub_10093D2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      long long v9 = *(_OWORD *)(v5 + 32);
      long long v10 = *(_OWORD *)(v5 + 48);
      long long v11 = *(_OWORD *)(v5 + 64);
      *(void *)(a4 + 80) = *(void *)(v5 + 80);
      *(_OWORD *)(a4 + 48) = v10;
      *(_OWORD *)(a4 + 64) = v11;
      *(_OWORD *)(a4 + 32) = v9;
      a4 += 88;
      v5 += 88;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10093D350(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10017FA3C(a1, a2, (uint64_t)&__p);
  int v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    sub_10093D03C((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_10093D39C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10093D454(_Unwind_Exception *a1)
{
}

void sub_10093D46C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *int v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10093D514(_Unwind_Exception *a1)
{
}

void sub_10093D52C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF07C((_DWORD *)a2, a1);
  sub_10093D5F4(a1);
  if (*(_DWORD *)(a2 + 1564))
  {
    double v4 = *(double *)(a1 + 6384);
    ++*(_DWORD *)(*(void *)(a2 + 6424) + 204);
    if (*(unsigned char *)(a2 + 1624))
    {
      sub_1006D4034(a2 + 5968, 2, v4);
      sub_1006D331C(a2 + 5968, 5, 9u, v4);
    }
    else
    {
      sub_1006D4034(a2 + 5968, 1, v4);
    }
  }
}

void sub_10093D5DC(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_10093D5F4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v215 = v1;
  uint64_t v213 = v2;
  uint64_t v4 = v3;
  v257 = 0;
  std::string __p = 0;
  v258 = 0;
  v254 = 0;
  v253 = 0;
  v255 = 0;
  for (uint64_t i = *(uint64_t **)(v3 + 1200); i; uint64_t i = (uint64_t *)*i)
  {
    int v6 = sub_100F91E80(v4 + 3208);
    if (v6)
    {
      *(void *)__src = sub_1000D8908(v4 + 3208);
      LOBYTE(v6) = sub_100B39178(i + 2, __src);
    }
    uint64_t v7 = i + 3;
    double v8 = vabdd_f64(*(double *)(v4 + 6384), *((double *)i + 13));
    if ((v6 & 1) != 0 || v8 <= 5.0)
    {
      long long v9 = v257;
      if (v257 >= (_OWORD *)v258)
      {
        uint64_t v15 = __p;
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v257 - (unsigned char *)__p) >> 5);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0x2AAAAAAAAAAAAAALL) {
          goto LABEL_399;
        }
        if (0x5555555555555556 * ((v258 - (unsigned char *)__p) >> 5) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((v258 - (unsigned char *)__p) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v258 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
          unint64_t v18 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18)
        {
          float v19 = (char *)sub_100642EA8((uint64_t)&v258, v18);
          long long v9 = v257;
          uint64_t v15 = __p;
        }
        else
        {
          float v19 = 0;
        }
        BOOL v20 = &v19[96 * v16];
        long long v21 = *(_OWORD *)(i + 5);
        *(_OWORD *)BOOL v20 = *v7;
        *((_OWORD *)v20 + 1) = v21;
        long long v22 = *(_OWORD *)(i + 7);
        long long v23 = *(_OWORD *)(i + 9);
        long long v24 = *(_OWORD *)(i + 13);
        *((_OWORD *)v20 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v20 + 5) = v24;
        *((_OWORD *)v20 + 2) = v22;
        *((_OWORD *)v20 + 3) = v23;
        if (v9 == v15)
        {
          uint64_t v30 = &v19[96 * v16];
        }
        else
        {
          int v25 = &v19[96 * v16];
          do
          {
            long long v26 = *(v9 - 5);
            *((_OWORD *)v25 - 6) = *(v9 - 6);
            *((_OWORD *)v25 - 5) = v26;
            long long v27 = *(v9 - 4);
            long long v28 = *(v9 - 3);
            long long v29 = *(v9 - 1);
            uint64_t v30 = v25 - 96;
            *((_OWORD *)v25 - 2) = *(v9 - 2);
            *((_OWORD *)v25 - 1) = v29;
            *((_OWORD *)v25 - 4) = v27;
            *((_OWORD *)v25 - 3) = v28;
            v9 -= 6;
            v25 -= 96;
          }
          while (v9 != v15);
        }
        long long v14 = v20 + 96;
        std::string __p = v30;
        v257 = v20 + 96;
        v258 = &v19[96 * v18];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)(i + 5);
        _OWORD *v257 = *v7;
        v9[1] = v10;
        long long v11 = *(_OWORD *)(i + 7);
        long long v12 = *(_OWORD *)(i + 9);
        long long v13 = *(_OWORD *)(i + 13);
        v9[4] = *(_OWORD *)(i + 11);
        v9[5] = v13;
        v9[2] = v11;
        void v9[3] = v12;
        long long v14 = v9 + 6;
      }
      v257 = v14;
    }
    if (v8 <= 30.0)
    {
      id v31 = v254;
      if (v254 >= v255)
      {
        double v37 = (char *)v253;
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v254 - (unsigned char *)v253) >> 5);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0x2AAAAAAAAAAAAAALL) {
LABEL_399:
        }
          sub_1001D7FD4();
        if (0x5555555555555556 * ((v255 - (unsigned char *)v253) >> 5) > v39) {
          unint64_t v39 = 0x5555555555555556 * ((v255 - (unsigned char *)v253) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v255 - (unsigned char *)v253) >> 5) >= 0x155555555555555) {
          unint64_t v40 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40)
        {
          __int16 v41 = (char *)sub_100642EA8((uint64_t)&v255, v40);
          id v31 = v254;
          double v37 = (char *)v253;
        }
        else
        {
          __int16 v41 = 0;
        }
        uint64_t v42 = &v41[32 * ((v254 - (unsigned char *)v253) >> 5)];
        long long v43 = *(_OWORD *)(i + 5);
        *(_OWORD *)uint64_t v42 = *v7;
        *((_OWORD *)v42 + 1) = v43;
        long long v44 = *(_OWORD *)(i + 7);
        long long v45 = *(_OWORD *)(i + 9);
        long long v46 = *(_OWORD *)(i + 13);
        *((_OWORD *)v42 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v42 + 5) = v46;
        *((_OWORD *)v42 + 2) = v44;
        *((_OWORD *)v42 + 3) = v45;
        if (v31 == v37)
        {
          uint64_t v52 = &v41[96 * v38];
        }
        else
        {
          uint64_t v47 = &v41[96 * v38];
          do
          {
            long long v48 = *((_OWORD *)v31 - 5);
            *((_OWORD *)v47 - 6) = *((_OWORD *)v31 - 6);
            *((_OWORD *)v47 - 5) = v48;
            long long v49 = *((_OWORD *)v31 - 4);
            long long v50 = *((_OWORD *)v31 - 3);
            long long v51 = *((_OWORD *)v31 - 1);
            uint64_t v52 = v47 - 96;
            *((_OWORD *)v47 - 2) = *((_OWORD *)v31 - 2);
            *((_OWORD *)v47 - 1) = v51;
            *((_OWORD *)v47 - 4) = v49;
            *((_OWORD *)v47 - 3) = v50;
            v31 -= 96;
            v47 -= 96;
          }
          while (v31 != v37);
        }
        __int16 v36 = v42 + 96;
        v253 = v52;
        v254 = v42 + 96;
        v255 = &v41[96 * v40];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        long long v32 = *(_OWORD *)(i + 5);
        *(_OWORD *)v254 = *v7;
        *((_OWORD *)v31 + 1) = v32;
        long long v33 = *(_OWORD *)(i + 7);
        long long v34 = *(_OWORD *)(i + 9);
        long long v35 = *(_OWORD *)(i + 13);
        *((_OWORD *)v31 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v31 + 5) = v35;
        *((_OWORD *)v31 + 2) = v33;
        *((_OWORD *)v31 + 3) = v34;
        __int16 v36 = v31 + 96;
      }
      v254 = v36;
    }
  }
  v252[1] = 0;
  v252[0] = 0;
  v251 = v252;
  v249 = 0;
  uint64_t v248 = 0;
  unint64_t v250 = 0;
  for (uint64_t j = *(double **)(v4 + 1160); j; uint64_t j = *(double **)j)
  {
    double v54 = j[10];
    double v55 = *(double *)(v4 + 6384);
    double v56 = sub_10087B05C((void *)(v4 + 1264), (void *)j + 2);
    double v57 = vabdd_f64(v55, v54);
    if (v57 <= 30.0 && v56 == 0)
    {
      sub_100B39278(&v218);
      int v59 = *((_DWORD *)j + 14);
      *(std::string *)__src = v218;
      memset(&v218, 0, sizeof(v218));
      *(_DWORD *)&__src[24] = v59;
      sub_100645AD8((uint64_t **)&v251, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v218.__r_.__value_.__l.__data_);
      }
    }
    int v60 = sub_100F91E80(v4 + 3208);
    if (v60)
    {
      *(void *)__src = sub_1000D8908(v4 + 3208);
      int v60 = sub_100B39178((void *)j + 2, __src);
    }
    if (v57 <= 5.0 || v60 != 0)
    {
      sub_100B39278(&v218);
      int v62 = v249;
      if ((unint64_t)v249 >= v250)
      {
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v249[-v248] >> 3);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((uint64_t)(v250 - v248) >> 3) > v65) {
          unint64_t v65 = 0x5555555555555556 * ((uint64_t)(v250 - v248) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v250 - v248) >> 3) >= 0x555555555555555) {
          unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v66 = v65;
        }
        *(void *)&__src[32] = &v250;
        if (v66) {
          __int16 v67 = (char *)sub_1000DA5D8((uint64_t)&v250, v66);
        }
        else {
          __int16 v67 = 0;
        }
        int v68 = &v67[24 * v64];
        *(void *)__src = v67;
        *(void *)&__src[8] = v68;
        *(void *)&__src[24] = &v67[24 * v66];
        long long v69 = *(_OWORD *)&v218.__r_.__value_.__l.__data_;
        *((void *)v68 + 2) = *((void *)&v218.__r_.__value_.__l + 2);
        *(_OWORD *)int v68 = v69;
        memset(&v218, 0, sizeof(v218));
        *(void *)&__src[16] = v68 + 24;
        sub_1001D7FEC(&v248, __src);
        int v70 = v249;
        sub_1001D8184((uint64_t)__src);
        v249 = v70;
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v218.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v63 = *(_OWORD *)&v218.__r_.__value_.__l.__data_;
        *((void *)v249 + 2) = *((void *)&v218.__r_.__value_.__l + 2);
        *int v62 = v63;
        v249 = (char *)v62 + 24;
      }
    }
  }
  memset(&v218, 0, sizeof(v218));
  __int16 v71 = (double *)__p;
  uint64_t v72 = (double *)v257;
  if (__p == v257)
  {
    int v95 = 0;
  }
  else
  {
    do
    {
      if (sub_10106EB1C(v71) && v71[4] > 0.0)
      {
        size = (_OWORD *)v218.__r_.__value_.__l.__size_;
        if (v218.__r_.__value_.__l.__size_ >= v218.__r_.__value_.__r.__words[2])
        {
          v79 = (_OWORD *)v218.__r_.__value_.__r.__words[0];
          unint64_t v80 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v218.__r_.__value_.__l.__size_ - v218.__r_.__value_.__r.__words[0]) >> 5);
          unint64_t v81 = v80 + 1;
          if (v80 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556
             * ((uint64_t)(v218.__r_.__value_.__r.__words[2] - v218.__r_.__value_.__r.__words[0]) >> 5) > v81)
            unint64_t v81 = 0x5555555555555556
                * ((uint64_t)(v218.__r_.__value_.__r.__words[2] - v218.__r_.__value_.__r.__words[0]) >> 5);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v218.__r_.__value_.__r.__words[2] - v218.__r_.__value_.__r.__words[0]) >> 5) >= 0x155555555555555)
            unint64_t v82 = 0x2AAAAAAAAAAAAAALL;
          else {
            unint64_t v82 = v81;
          }
          if (v82)
          {
            v83 = (char *)sub_100642EA8((uint64_t)&v218.__r_.__value_.__r.__words[2], v82);
            size = (_OWORD *)v218.__r_.__value_.__l.__size_;
            v79 = (_OWORD *)v218.__r_.__value_.__r.__words[0];
          }
          else
          {
            v83 = 0;
          }
          v84 = &v83[96 * v80];
          long long v85 = *((_OWORD *)v71 + 1);
          *(_OWORD *)v84 = *(_OWORD *)v71;
          *((_OWORD *)v84 + 1) = v85;
          long long v86 = *((_OWORD *)v71 + 2);
          long long v87 = *((_OWORD *)v71 + 3);
          long long v88 = *((_OWORD *)v71 + 5);
          *((_OWORD *)v84 + 4) = *((_OWORD *)v71 + 4);
          *((_OWORD *)v84 + 5) = v88;
          *((_OWORD *)v84 + 2) = v86;
          *((_OWORD *)v84 + 3) = v87;
          if (size == v79)
          {
            std::string::size_type v94 = (std::string::size_type)&v83[96 * v80];
          }
          else
          {
            v89 = &v83[96 * v80];
            do
            {
              long long v90 = *(size - 5);
              *((_OWORD *)v89 - 6) = *(size - 6);
              *((_OWORD *)v89 - 5) = v90;
              long long v91 = *(size - 4);
              long long v92 = *(size - 3);
              long long v93 = *(size - 1);
              std::string::size_type v94 = (std::string::size_type)(v89 - 96);
              *((_OWORD *)v89 - 2) = *(size - 2);
              *((_OWORD *)v89 - 1) = v93;
              *((_OWORD *)v89 - 4) = v91;
              *((_OWORD *)v89 - 3) = v92;
              size -= 6;
              v89 -= 96;
            }
            while (size != v79);
          }
          std::string::size_type v78 = (std::string::size_type)(v84 + 96);
          v218.__r_.__value_.__r.__words[0] = v94;
          v218.__r_.__value_.__l.__size_ = (std::string::size_type)(v84 + 96);
          v218.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83[96 * v82];
          if (v79) {
            operator delete(v79);
          }
        }
        else
        {
          long long v74 = *((_OWORD *)v71 + 1);
          *(_OWORD *)v218.__r_.__value_.__l.__size_ = *(_OWORD *)v71;
          size[1] = v74;
          long long v75 = *((_OWORD *)v71 + 2);
          long long v76 = *((_OWORD *)v71 + 3);
          long long v77 = *((_OWORD *)v71 + 5);
          size[4] = *((_OWORD *)v71 + 4);
          size[5] = v77;
          size[2] = v75;
          size[3] = v76;
          std::string::size_type v78 = (std::string::size_type)(size + 6);
        }
        v218.__r_.__value_.__l.__size_ = v78;
      }
      v71 += 12;
    }
    while (v71 != v72);
    int v95 = -1431655765 * ((v218.__r_.__value_.__l.__size_ - v218.__r_.__value_.__r.__words[0]) >> 5);
  }
  v96 = v249;
  uint64_t v97 = v248;
  HIDWORD(v98) = -1030792151 * rand() + 85899344;
  LODWORD(v98) = HIDWORD(v98);
  if ((v98 >> 2) <= 0x28F5C28)
  {
    *(void *)__src = _NSConcreteStackBlock;
    *(void *)&__src[8] = 3221225472;
    *(void *)&__src[16] = sub_100946274;
    *(void *)&__src[24] = &unk_1022D4610;
    *(_DWORD *)&__src[32] = -1431655765 * ((unint64_t)&v96[-v97] >> 3);
    *(_DWORD *)&__src[36] = v95;
    *(_DWORD *)&__src[40] = (int)((double)v95 * 100.0 / (double)*(int *)&__src[32]);
    AnalyticsSendEventLazy();
  }
  if (v218.__r_.__value_.__r.__words[0])
  {
    v218.__r_.__value_.__l.__size_ = v218.__r_.__value_.__r.__words[0];
    operator delete(v218.__r_.__value_.__l.__data_);
  }
  uint64_t v236 = 0;
  char v237 = 0;
  uint64_t v241 = 0;
  char v242 = 0;
  memset(v234, 0, sizeof(v234));
  int v235 = 0;
  uint64_t v239 = 0;
  uint64_t v238 = 0;
  __int16 v240 = 0;
  long long v243 = 0u;
  memset(v244, 0, sizeof(v244));
  uint64_t v245 = 0xFFFFFFFFLL;
  *(_OWORD *)v246 = 0u;
  memset(v247, 0, sizeof(v247));
  uint64_t v231 = 0;
  uint64_t v230 = 0;
  unsigned int v233 = 0;
  uint64_t v232 = 0;
  sub_100943470((uint64_t)&v251, (uint64_t *)&__p, (uint64_t *)&v253, v4 + 3328, v4 + 4944, v215 + 3016, *(void **)(v4 + 3192), &v230, v222, *(double *)(v4 + 6384), (uint64_t)v234, *(_DWORD *)(v4 + 6372));
  *(void *)&v225[12] = *(void *)(v4 + 6384);
  LODWORD(v226) = 4;
  sub_100944E28(v4, (uint64_t)v222);
  sub_100E49990(&v218, &__p);
  sub_100E49994((uint64_t)&v218);
  sub_100E4999C((__int16 *)&v218, (uint64_t)v222);
  sub_100E4A578((uint64_t)&v218, (long long *)(v4 + 3328), (char *)(v4 + 3488));
  sub_100E4A470((uint64_t)&v218, v222);
  sub_100E4A5E0((uint64_t)&v218, (uint64_t)v222);
  sub_100944E28(v4, (uint64_t)v222);
  unsigned int v99 = *(_DWORD *)&v228[28];
  if (v99 >= *sub_101413018() && sub_1000E6DB4((uint64_t)v222))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    v100 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_10005BA4C();
      v101 = __src[23] >= 0 ? __src : *(unsigned char **)__src;
      LODWORD(v279[0]) = 136380675;
      *(void **)((char *)v279 + 4) = v101;
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, updating reference multi-AP wifi location to %{private}s", (uint8_t *)v279, 0xCu);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46B0);
      }
      sub_10005BA4C();
      if ((SBYTE7(v280) & 0x80u) == 0) {
        v198 = v279;
      }
      else {
        v198 = (void **)v279[0];
      }
      *(_DWORD *)v270 = 136380675;
      *(void *)&v270[4] = v198;
      v199 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE7(v280) < 0) {
        operator delete(v279[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v199);
      if (v199 != __src) {
        free(v199);
      }
    }
    long long v102 = *(_OWORD *)&v228[16];
    *(_OWORD *)(v215 + 5256) = *(_OWORD *)v228;
    *(_OWORD *)(v215 + 5272) = v102;
    *(_OWORD *)(v215 + 5288) = *(_OWORD *)&v228[32];
    long long v103 = *(_OWORD *)&v225[16];
    *(_OWORD *)(v215 + 5192) = *(_OWORD *)v225;
    *(_OWORD *)(v215 + 5208) = v103;
    long long v104 = v227;
    *(_OWORD *)(v215 + 5224) = v226;
    *(_OWORD *)(v215 + 5240) = v104;
    long long v105 = v222[1];
    *(_OWORD *)(v215 + 5128) = v222[0];
    *(_OWORD *)(v215 + 5144) = v105;
    long long v106 = v224;
    *(_OWORD *)(v215 + 5160) = v223;
    *(void *)(v215 + 5304) = v229;
    *(_OWORD *)(v215 + 5176) = v106;
    sub_100C398D8((uint64_t)v222, (uint64_t)__src);
    memcpy((void *)(v215 + 5312), __src, 0x201uLL);
    long long v107 = v272;
    long long v272 = 0u;
    v108 = *(std::__shared_weak_count **)(v215 + 5840);
    *(_OWORD *)(v215 + 5832) = v107;
    if (v108)
    {
      sub_1000DB0A0(v108);
      v109 = (std::__shared_weak_count *)*((void *)&v272 + 1);
      long long v110 = v278[0];
      *(_OWORD *)(v215 + 5912) = v277;
      *(_OWORD *)(v215 + 5928) = v110;
      *(void *)(v215 + 5941) = *(void *)((char *)v278 + 13);
      long long v111 = v274;
      *(_OWORD *)(v215 + 5848) = v273;
      *(_OWORD *)(v215 + 5864) = v111;
      long long v112 = v276;
      *(_OWORD *)(v215 + 5880) = v275;
      *(_OWORD *)(v215 + 5896) = v112;
      if (v109) {
        sub_1000DB0A0(v109);
      }
    }
    else
    {
      long long v113 = v278[0];
      *(_OWORD *)(v215 + 5912) = v277;
      *(_OWORD *)(v215 + 5928) = v113;
      *(void *)(v215 + 5941) = *(void *)((char *)v278 + 13);
      long long v114 = v274;
      *(_OWORD *)(v215 + 5848) = v273;
      *(_OWORD *)(v215 + 5864) = v114;
      long long v115 = v276;
      *(_OWORD *)(v215 + 5880) = v275;
      *(_OWORD *)(v215 + 5896) = v115;
    }
  }
  sub_10144DA50(__src);
  v116 = (void *)sub_101454F5C(*(uint64_t *)__src);
  if (*(void *)&__src[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&__src[8]);
  }
  if (v116 && [v116 isValid]) {
    [v116 submitMetricsIfPossible:sub_100F91E80(v4 + 3208)];
  }
  uint64_t v117 = v4 + 3208;
  int v118 = sub_100F91E80(v4 + 3208);
  LOBYTE(v216) = 0;
  char v217 = 0;
  LOBYTE(v279[0]) = 0;
  char v285 = 0;
  if (v118)
  {
    v119 = sub_1014122A8();
    if (sub_10141284C((uint64_t)v119))
    {
      sub_100D8F310(__src);
      uint64_t v120 = *(void *)__src;
      uint64_t v122 = nullsub_41(v4 + 3208, v121);
      sub_100D8F7AC(v120, (uint64_t)v222, v122);
      if (*(void *)&__src[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&__src[8]);
      }
    }
    char v217 = 1;
    unint64_t v216 = sub_1000D8908(v4 + 3208);
    char v285 = *(unsigned char *)(v4 + 1400);
    long long v123 = *(_OWORD *)(v4 + 1384);
    long long v283 = *(_OWORD *)(v4 + 1368);
    long long v284 = v123;
    long long v124 = *(_OWORD *)(v4 + 1320);
    *(_OWORD *)v279 = *(_OWORD *)(v4 + 1304);
    long long v280 = v124;
    long long v125 = *(_OWORD *)(v4 + 1336);
    long long v282 = *(_OWORD *)(v4 + 1352);
    long long v281 = v125;
LABEL_130:
    sub_10144DA50(buf);
    sub_100134750(v270, "Wifi1");
    sub_100F7F8DC(__src, &v216, v279, buf, v4 + 6472, v270, v4 + 3328);
    if ((v270[23] & 0x80000000) != 0) {
      operator delete(*(void **)v270);
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    sub_100F8315C((uint64_t)__src, v222);
    sub_100F839E0((uint64_t)__src);
    sub_1009460B0((uint64_t)__src);
    goto LABEL_165;
  }
  int v126 = sub_10010145C() ^ 1;
  if (!v116) {
    LOBYTE(v126) = 1;
  }
  if ((v126 & 1) != 0 || ![v116 isValid]) {
    goto LABEL_159;
  }
  [v116 fetchAllEntries];
  sub_100944EC4(*(void **)(v4 + 3160), (uint64_t)__src);
  unint64_t v216 = sub_10113781C(__src, (uint64_t *)v270);
  char v217 = v127;
  sub_1000D7D80((uint64_t)__src);
  if (!v217)
  {
    ++*(_DWORD *)(*(void *)(v215 + 6424) + 232);
    *(void *)__src = v270;
    sub_100946620((void ***)__src);
LABEL_159:
    if (v217)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46B0);
      }
      v131 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__src = 0;
        _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_FAULT, "WifiCalc, error, associated AP mac is available but unassociated", __src, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__src, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D46B0);
        }
        *(_WORD *)v270 = 0;
        v197 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v197);
        if (v197 != __src) {
          free(v197);
        }
      }
    }
    goto LABEL_165;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D46B0);
  }
  v128 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100B39278((std::string *)__src);
    v129 = __src[23] >= 0 ? __src : *(unsigned char **)__src;
    *(_DWORD *)std::string buf = 136380675;
    *(void *)&uint8_t buf[4] = v129;
    _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "WifiCalc, selected associated AP %{private}s", buf, 0xCu);
    if ((__src[23] & 0x80000000) != 0) {
      operator delete(*(void **)__src);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__src, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    sub_100B39278((std::string *)buf);
    if ((SBYTE7(v268) & 0x80u) == 0) {
      v203 = buf;
    }
    else {
      v203 = *(uint8_t **)buf;
    }
    *(_DWORD *)v259 = 136380675;
    *(void *)&v259[4] = v203;
    v204 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v268) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v204);
    if (v204 != __src) {
      free(v204);
    }
  }
  ++*(_DWORD *)(*(void *)(v215 + 6424) + 228);
  if (v285) {
    char v285 = 0;
  }
  *(void *)__src = v270;
  sub_100946620((void ***)__src);
  if (v217) {
    goto LABEL_130;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D46B0);
  }
  v130 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__src = 0;
    _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_FAULT, "WifiCalc, error, associated AP mac is unavailable but associated", __src, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__src, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    *(_WORD *)v270 = 0;
    v207 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v207);
    if (v207 != __src) {
      free(v207);
    }
  }
LABEL_165:
  if (v257 != __p)
  {
    unint64_t v132 = (unint64_t)((char *)v257 - (unsigned char *)__p) >> 5;
    unint64_t v133 = *(void *)(v4 + 1128);
    if (v133) {
      unint64_t v134 = (100 * *(_DWORD *)&v228[28]) / v133;
    }
    else {
      LODWORD(v134) = -1;
    }
    int v135 = -*(_DWORD *)&v228[28];
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    int v136 = v135 - 1431655765 * v132;
    v137 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v138 = *(void *)(v4 + 1128);
      *(_DWORD *)__src = 67241218;
      *(_DWORD *)&__src[4] = v138;
      *(_WORD *)&__src[8] = 2082;
      *(void *)&__src[10] = v213;
      *(_WORD *)&__src[18] = 1026;
      *(_DWORD *)&__src[20] = *(_DWORD *)&v228[28];
      *(_WORD *)&__src[24] = 1026;
      *(_DWORD *)&__src[26] = v136;
      *(_WORD *)&__src[30] = 1026;
      *(_DWORD *)&__src[32] = v134;
      _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "WlpMetric, fixaps, %{public}d, trigger, %{public}s, used, %{public}d, out, %{public}d, pct, %{public}d", __src, 0x24u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      uint64_t v191 = *(void *)(v4 + 1128);
      *(_DWORD *)v270 = 67241218;
      *(_DWORD *)&v270[4] = v191;
      *(_WORD *)&v270[8] = 2082;
      *(void *)&v270[10] = v213;
      *(_WORD *)&v270[18] = 1026;
      *(_DWORD *)&v270[20] = *(_DWORD *)&v228[28];
      *(_WORD *)&v270[24] = 1026;
      *(_DWORD *)&v270[26] = v136;
      *(_WORD *)&v270[30] = 1026;
      *(_DWORD *)&v270[32] = v134;
      v192 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v192);
      if (v192 != __src) {
        free(v192);
      }
    }
    if ((*(unsigned char *)(v4 + 6440) & 0xF) == 0) {
      AnalyticsSendEventLazy();
    }
    if (*(_DWORD *)&v228[28])
    {
      if (*(_DWORD *)&v228[28] == 1) {
        v139 = "1AP";
      }
      else {
        v139 = "MultiAP";
      }
      if (sub_1000EF668(*(double *)((char *)v222 + 4), *(double *)((char *)v222 + 12)))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D46B0);
        }
        v140 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 136380931;
          *(void *)&__src[4] = "wifi, null";
          *(_WORD *)&__src[12] = 2081;
          *(void *)&__src[14] = v139;
          _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __src, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D46B0);
          }
          *(_DWORD *)v270 = 136380931;
          *(void *)&v270[4] = "wifi, null";
          *(_WORD *)&v270[12] = 2081;
          *(void *)&v270[14] = v139;
          v200 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v200);
          if (v200 != __src) {
            free(v200);
          }
        }
        AnalyticsSendEventLazy();
      }
      if (*(double *)((char *)v222 + 4) == -1.0 && *(double *)((char *)v222 + 12) == -1.0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D46B0);
        }
        v141 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 136380931;
          *(void *)&__src[4] = "wifi, sentinel";
          *(_WORD *)&__src[12] = 2081;
          *(void *)&__src[14] = v139;
          _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __src, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D46B0);
          }
          *(_DWORD *)v270 = 136380931;
          *(void *)&v270[4] = "wifi, sentinel";
          *(_WORD *)&v270[12] = 2081;
          *(void *)&v270[14] = v139;
          v201 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v201);
          if (v201 != __src) {
            free(v201);
          }
        }
        AnalyticsSendEventLazy();
      }
    }
  }
  *(double *)&v225[24] = *(double *)(v4 + 6160) * 1.5;
  *(_DWORD *)v228 = sub_100D3DFDC((uint64_t)v222, v215 + 5128, v215 + 5312, v4 + 4128, v4 + 4288);
  if (*(double *)((char *)&v222[1] + 4) >= 0.0 && *(double *)((char *)&v222[1] + 4) < 20.0) {
    *(void *)((char *)&v222[1] + 4) = 0x4034000000000000;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  v142 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__src = 67241730;
    *(_DWORD *)&__src[4] = *(_DWORD *)&v228[28];
    *(_WORD *)&__src[8] = 2050;
    *(void *)&__src[10] = *(void *)((char *)&v222[1] + 4);
    *(_WORD *)&__src[18] = 1026;
    *(_DWORD *)&__src[20] = *(_DWORD *)&v228[32];
    *(_WORD *)&__src[24] = 2050;
    *(void *)&__src[26] = *(void *)((char *)&v223 + 4);
    *(_WORD *)&__src[34] = 1026;
    *(_DWORD *)&__src[36] = *(_DWORD *)&v225[20];
    *(_WORD *)&__src[40] = 2082;
    *(void *)&__src[42] = v213;
    *(_WORD *)&__src[50] = 2050;
    *(void *)&__src[52] = *(void *)&v225[12];
    _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "@WifiFlow, compute, %{public}u, hacc, %{public}.1f, vaps, %{public}u, vacc, %{public}.1f, conf, %{public}d, reason, %{public}s, time, %{public}.1f", __src, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__src, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    *(_DWORD *)v270 = 67241730;
    *(_DWORD *)&v270[4] = *(_DWORD *)&v228[28];
    *(_WORD *)&v270[8] = 2050;
    *(void *)&v270[10] = *(void *)((char *)&v222[1] + 4);
    *(_WORD *)&v270[18] = 1026;
    *(_DWORD *)&v270[20] = *(_DWORD *)&v228[32];
    *(_WORD *)&v270[24] = 2050;
    *(void *)&v270[26] = *(void *)((char *)&v223 + 4);
    *(_WORD *)&v270[34] = 1026;
    *(_DWORD *)&v270[36] = *(_DWORD *)&v225[20];
    *(_WORD *)&v270[40] = 2082;
    *(void *)&v270[42] = v213;
    *(_WORD *)&v270[50] = 2050;
    *(void *)&v270[52] = *(void *)&v225[12];
    v190 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v190);
    if (v190 != __src) {
      free(v190);
    }
  }
  if (!sub_1000E6DB4((uint64_t)v222)) {
    goto LABEL_277;
  }
  double v143 = *(double *)(v4 + 3332);
  double v144 = *(double *)(v4 + 3340);
  double v145 = *(double *)(v4 + 3348);
  long long v146 = *(_OWORD *)(v4 + 3372);
  *(_OWORD *)std::string buf = *(_OWORD *)(v4 + 3356);
  long long v268 = v146;
  long long v269 = *(_OWORD *)(v4 + 3388);
  double v147 = *(double *)(v4 + 3404);
  unsigned int v148 = *(_DWORD *)(v4 + 3424);
  long long v149 = *(_OWORD *)(v4 + 3428);
  long long v150 = *(_OWORD *)(v4 + 3444);
  long long v151 = *(_OWORD *)(v4 + 3460);
  *(void *)&v270[48] = *(void *)(v4 + 3476);
  *(_OWORD *)&v270[32] = v151;
  unsigned int v152 = *(_DWORD *)(v4 + 6368) - 1;
  if (v152 >= 2) {
    v153 = "moving";
  }
  else {
    v153 = "static";
  }
  double v154 = *(double *)&v225[12] - v147;
  *(_OWORD *)&v270[16] = v150;
  *(_OWORD *)v270 = v149;
  double v155 = *(double *)(v4 + 5952);
  if (v145 <= 0.0 || v148 > 0xB || ((1 << v148) & 0xC02) == 0)
  {
    if (v152 >= 2) {
      BOOL v160 = v154 < 1.25;
    }
    else {
      BOOL v160 = *(double *)&v225[12] > v155;
    }
    if (v160) {
      v161 = "placebad";
    }
    else {
      v161 = "bothbad";
    }
LABEL_234:
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    v162 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__src = 136446210;
      *(void *)&__src[4] = v161;
      _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEBUG, "WlpMetric, fixerror, %{public}s", __src, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      *(_DWORD *)v259 = 136446210;
      *(void *)&v259[4] = v161;
      v196 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v196);
      if (v196 != __src) {
        free(v196);
      }
    }
    if ((*(unsigned char *)(v4 + 6440) & 0xF) == 0) {
      goto LABEL_276;
    }
    goto LABEL_277;
  }
  if (v152 >= 2) {
    BOOL v156 = v154 < 1.25;
  }
  else {
    BOOL v156 = *(double *)&v225[12] > v155;
  }
  if (!v156)
  {
    v161 = "timebad";
    goto LABEL_234;
  }
  double v157 = sub_1000A3D9C(*(double *)((char *)v222 + 4), *(double *)((char *)v222 + 12), v143, v144);
  if (*(double *)((char *)&v222[1] + 4) > 0.0) {
    double v158 = v157 / *(double *)((char *)&v222[1] + 4);
  }
  else {
    double v158 = -1.0;
  }
  if (v154 <= 1.25)
  {
    int v159 = 1;
  }
  else if (v154 <= 3.0)
  {
    int v159 = 3;
  }
  else if (v154 <= 10.0)
  {
    int v159 = 10;
  }
  else if (v154 <= 30.0)
  {
    int v159 = 30;
  }
  else if (v154 <= 60.0)
  {
    int v159 = 600;
  }
  else if (v154 <= 1800.0)
  {
    int v159 = 1800;
  }
  else if (v154 <= 3600.0)
  {
    int v159 = 3600;
  }
  else if (v154 > 18000.0)
  {
    int v159 = 3601;
  }
  else
  {
    int v159 = 18000;
  }
  int v208 = v159;
  unsigned int v214 = *(_DWORD *)&v228[28];
  v209 = v153;
  if (BYTE4(v229)) {
    int v163 = 1;
  }
  else {
    int v163 = -1431655765 * ((unint64_t)(v231 - v230) >> 3);
  }
  if (v163 != *(_DWORD *)&v228[28])
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    v164 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__src = 67240448;
      *(_DWORD *)&__src[4] = v163;
      *(_WORD *)&__src[8] = 1026;
      *(_DWORD *)&__src[10] = v214;
      _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "Invalid apsUsedInCalculation, numberOfApsUsedInHorizontalCalculation. apsUsedInCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u", __src, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      *(_DWORD *)v259 = 67240448;
      *(_DWORD *)&v259[4] = v163;
      *(_WORD *)&v259[8] = 1026;
      *(_DWORD *)&v259[10] = v214;
      v205 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v205);
      if (v205 != __src) {
        free(v205);
      }
    }
  }
  unsigned int v165 = v233;
  unsigned int v166 = v214 - v233;
  if (BYTE4(v229)) {
    int v167 = 0;
  }
  else {
    int v167 = v233;
  }
  if (BYTE4(v229)) {
    int v168 = 0;
  }
  else {
    int v168 = v214 - v233;
  }
  int v211 = v167;
  int v212 = v168;
  if (!BYTE4(v229) && v214 < v233)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    v169 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__src = 67240704;
      *(_DWORD *)&__src[4] = v165;
      *(_WORD *)&__src[8] = 1026;
      *(_DWORD *)&__src[10] = v166;
      *(_WORD *)&__src[14] = 1026;
      *(_DWORD *)&__src[16] = v214;
      _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_ERROR, "Invalid tile, ALS AP counts. numberOfTileApsUsedInHorizontalCalculation: %{public}u, numberOfAlsApsUsedInHorizontalCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u", __src, 0x14u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      *(_DWORD *)v259 = 67240704;
      *(_DWORD *)&v259[4] = v165;
      *(_WORD *)&v259[8] = 1026;
      *(_DWORD *)&v259[10] = v166;
      LOWORD(v260) = 1026;
      *(_DWORD *)((char *)&v260 + 2) = v214;
      v206 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v206);
      if (v206 != __src) {
        free(v206);
      }
    }
  }
  sub_10094325C(v212, v214, 100);
  sub_10094325C(v211, v214, 100);
  unsigned int v170 = *(_DWORD *)(v215 + 1208);
  int v171 = *(_DWORD *)(v215 + 1248);
  int v210 = *(_DWORD *)(v215 + 1288);
  unsigned int v172 = v210 + v171 + v170;
  sub_10094325C(v170, v172, 100);
  sub_10094325C(v210 + v171, v172, 100);
  sub_10094325C(v171, v172, 100);
  sub_10094325C(v210, v172, 100);
  sub_10094325C(v214, v172, 100);
  sub_10094325C(v214, v170, 100);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  v173 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__src = 134350082;
    *(double *)&__src[4] = v157;
    *(_WORD *)&__src[12] = 2082;
    *(void *)&__src[14] = v209;
    *(_WORD *)&__src[22] = 2050;
    *(double *)&__src[24] = v154;
    *(_WORD *)&__src[32] = 1026;
    *(_DWORD *)&__src[34] = v208;
    *(_WORD *)&__src[38] = 2050;
    *(double *)&__src[40] = v158;
    _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEBUG, "WlpMetric, fixerror, %{public}.1f, agetype, %{public}s, dt, %{public}.1f, %{public}d, horizontalErrorRatio, %{public}.1f", __src, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__src, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    *(_DWORD *)v259 = 134350082;
    *(double *)&v259[4] = v157;
    *(_WORD *)&v259[12] = 2082;
    v260 = v209;
    __int16 v261 = 2050;
    double v262 = v154;
    __int16 v263 = 1026;
    int v264 = v208;
    __int16 v265 = 2050;
    double v266 = v158;
    v202 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v202);
    if (v202 != __src) {
      free(v202);
    }
  }
  if ((*(unsigned char *)(v4 + 6440) & 0xF) == 0) {
LABEL_276:
  }
    AnalyticsSendEventLazy();
LABEL_277:
  long long v174 = v227;
  *(_OWORD *)(v215 + 1504) = v226;
  *(_OWORD *)(v215 + 1520) = v174;
  *(_OWORD *)(v215 + 1536) = *(_OWORD *)v228;
  long long v175 = v224;
  *(_OWORD *)(v215 + 1440) = v223;
  *(_OWORD *)(v215 + 1456) = v175;
  long long v176 = *(_OWORD *)&v225[16];
  *(_OWORD *)(v215 + 1472) = *(_OWORD *)v225;
  *(_OWORD *)(v215 + 1488) = v176;
  long long v177 = v222[1];
  *(_OWORD *)(v215 + 1408) = v222[0];
  uint64_t v178 = *(void *)&v228[40];
  int v179 = HIDWORD(v245);
  char v180 = BYTE4(v229);
  __int16 v181 = HIWORD(v229);
  *(_OWORD *)(v215 + 1424) = v177;
  *(_OWORD *)(v215 + 1548) = *(_OWORD *)&v228[12];
  *(void *)(v215 + 1564) = *(void *)&v228[28];
  *(void *)(v215 + 1576) = v178;
  *(_DWORD *)(v215 + 1584) = v179;
  *(unsigned char *)(v215 + 1588) = v180;
  *(_WORD *)(v215 + 1590) = v181;
  if ((sub_1000E6DB4(v215 + 1408) & 1) == 0)
  {
    if (*(void *)(v215 + 1168))
    {
      if (__p == v257)
      {
        sub_100945584((std::string *)(v215 + 1592), "invalidComputedLocation_NoValidHorizontalAPs");
      }
      else
      {
        v182 = (std::string *)(v215 + 1592);
        if (*(_DWORD *)&v228[28]) {
          sub_100945584(v182, "invalidComputedLocation_Other");
        }
        else {
          sub_100945584(v182, "invalidComputedLocation_NoAPsUsedInHorizontalCalculation");
        }
      }
    }
    else
    {
      sub_100945584((std::string *)(v215 + 1592), "invalidComputedLocation_EmptyScan");
    }
  }
  *(unsigned char *)(v215 + 1624) = sub_1009455CC(v4, v215 + 1408);
  int v183 = sub_1000E6DB4((uint64_t)v222);
  uint64_t v184 = *(void *)(v215 + 6424);
  if (v183) {
    ++*(_DWORD *)(v184 + 236);
  }
  else {
    ++*(_DWORD *)(v184 + 240);
  }
  if (sub_100F91E80(v4 + 3208))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    v185 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)std::string buf = sub_1000D8908(v117);
      sub_100B39278((std::string *)__src);
      v186 = __src[23] >= 0 ? __src : *(unsigned char **)__src;
      *(_DWORD *)v270 = 136380675;
      *(void *)&v270[4] = v186;
      _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_DEFAULT, "WifiCalc, associated AP set: YES, %{private}s", v270, 0xCu);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46B0);
      }
      *(void *)v259 = sub_1000D8908(v117);
      sub_100B39278((std::string *)v270);
      if (v270[23] >= 0) {
        v194 = v270;
      }
      else {
        v194 = *(unsigned char **)v270;
      }
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v194;
      v195 = (char *)_os_log_send_and_compose_impl();
      if ((v270[23] & 0x80000000) != 0) {
        operator delete(*(void **)v270);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v195);
      if (v195 != __src) {
        free(v195);
      }
    }
    uint64_t v187 = v215;
    v188 = *(_DWORD **)(v215 + 6424);
    ++v188[54];
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    v189 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__src = 0;
      _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_DEFAULT, "WifiCalc, associated AP set: NO", __src, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46B0);
      }
      *(_WORD *)v270 = 0;
      v193 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v193);
      if (v193 != __src) {
        free(v193);
      }
    }
    uint64_t v187 = v215;
    v188 = *(_DWORD **)(v215 + 6424);
    ++v188[55];
  }
  if (*(unsigned char *)(v187 + 1588)) {
    ++v188[56];
  }
  if (sub_1000E6DB4((uint64_t)v222)) {
    ++*(_DWORD *)(*(void *)(v187 + 6424) + 288);
  }
  if (sub_100E49ABC((uint64_t)&v218)) {
    ++*(_DWORD *)(*(void *)(v215 + 6424) + 292);
  }
  if (sub_1002E9B48((uint64_t)&v218)) {
    ++*(_DWORD *)(*(void *)(v215 + 6424) + 296);
  }
  if (v221) {
    sub_1000DB0A0(v221);
  }
  sub_1000F5BB0((uint64_t)v220, v220[1]);
  if (v219) {
    sub_1000DB0A0(v219);
  }
  if (v218.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
  }
  *(void *)__src = &v230;
  sub_1000A7B4C((void ***)__src);
  *(void *)__src = (char *)v247 + 8;
  sub_1000A7B4C((void ***)__src);
  if (v246[0])
  {
    v246[1] = v246[0];
    operator delete(v246[0]);
  }
  *(void *)__src = &v248;
  sub_1000A7B4C((void ***)__src);
  sub_1000DB264((uint64_t)&v251, v252[0]);
  if (v253)
  {
    v254 = (char *)v253;
    operator delete(v253);
  }
  if (__p)
  {
    v257 = __p;
    operator delete(__p);
  }
}

void sub_100940240(_Unwind_Exception *a1)
{
  sub_100945640((uint64_t)&STACK[0x3D0]);
  STACK[0xAD0] = (unint64_t)&STACK[0x8E0];
  sub_1000A7B4C((void ***)&STACK[0xAD0]);
  sub_100944C50((uint64_t)&STACK[0x900]);
  STACK[0x3D0] = (unint64_t)&STACK[0x9D0];
  sub_1000A7B4C((void ***)&STACK[0x3D0]);
  sub_1000DB264((uint64_t)&STACK[0x9E8], (char *)STACK[0x9F0]);
  uint64_t v2 = (void *)STACK[0xA00];
  if (STACK[0xA00])
  {
    STACK[0xA08] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0xA18];
  if (STACK[0xA18])
  {
    STACK[0xA20] = (unint64_t)v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_10094046C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF07C((_DWORD *)a2, a1);
  sub_10093D5F4(a1);
  if (*(_DWORD *)(a2 + 1564))
  {
    double v4 = *(double *)(a1 + 6384);
    if (*(unsigned char *)(a2 + 1624))
    {
      sub_1006D4034(a2 + 5968, 2, v4);
      sub_1006D331C(a2 + 5968, 5, 3u, v4);
    }
    else
    {
      sub_1006D4034(a2 + 5968, 1, v4);
    }
    ++*(_DWORD *)(*(void *)(a2 + 6424) + 204);
  }
}

void sub_10094051C(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100940534(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF07C((_DWORD *)a2, a1);
  sub_10093D5F4(a1);
  if (*(_DWORD *)(a2 + 1564))
  {
    double v4 = *(double *)(a1 + 6384);
    ++*(_DWORD *)(*(void *)(a2 + 6424) + 204);
    if (*(unsigned char *)(a2 + 1624))
    {
      int v5 = *(_DWORD *)(a2 + 6024);
      sub_1006D4034(a2 + 5968, 2, v4);
      if (v5 < 3) {
        unsigned int v6 = 5;
      }
      else {
        unsigned int v6 = 6;
      }
      sub_1006D331C(a2 + 5968, 5, v6, v4);
    }
    else
    {
      sub_1006D4034(a2 + 5968, 1, v4);
    }
  }
}

void sub_1009405F8(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100940614(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF07C((_DWORD *)a2, a1);
  std::string __p = 0;
  long long v32 = 0;
  long long v33 = 0;
  sub_100940850(&__p, *(void *)(a1 + 1208));
  uint64_t v3 = *(uint64_t **)(a1 + 1200);
  if (v3)
  {
    double v4 = v32;
    do
    {
      int v5 = v3 + 3;
      if (v4 >= v33)
      {
        long long v10 = (char *)__p;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)__p) >> 5);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((v33 - (unsigned char *)__p) >> 5) > v12) {
          unint64_t v12 = 0x5555555555555556 * ((v33 - (unsigned char *)__p) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
          unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          long long v14 = (char *)sub_100642EA8((uint64_t)&v33, v13);
          long long v10 = (char *)__p;
          double v4 = v32;
        }
        else
        {
          long long v14 = 0;
        }
        uint64_t v15 = &v14[96 * v11];
        long long v16 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)uint64_t v15 = *v5;
        *((_OWORD *)v15 + 1) = v16;
        long long v17 = *(_OWORD *)(v3 + 7);
        long long v18 = *(_OWORD *)(v3 + 9);
        long long v19 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v15 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v15 + 5) = v19;
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = v18;
        if (v4 == v10)
        {
          int v25 = &v14[96 * v11];
        }
        else
        {
          BOOL v20 = &v14[96 * v11];
          do
          {
            long long v21 = *((_OWORD *)v4 - 5);
            *((_OWORD *)v20 - 6) = *((_OWORD *)v4 - 6);
            *((_OWORD *)v20 - 5) = v21;
            long long v22 = *((_OWORD *)v4 - 4);
            long long v23 = *((_OWORD *)v4 - 3);
            long long v24 = *((_OWORD *)v4 - 1);
            int v25 = v20 - 96;
            *((_OWORD *)v20 - 2) = *((_OWORD *)v4 - 2);
            *((_OWORD *)v20 - 1) = v24;
            *((_OWORD *)v20 - 4) = v22;
            *((_OWORD *)v20 - 3) = v23;
            v4 -= 96;
            v20 -= 96;
          }
          while (v4 != v10);
        }
        double v4 = v15 + 96;
        std::string __p = v25;
        long long v32 = v15 + 96;
        long long v33 = &v14[96 * v13];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        long long v6 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)double v4 = *v5;
        *((_OWORD *)v4 + 1) = v6;
        long long v7 = *(_OWORD *)(v3 + 7);
        long long v8 = *(_OWORD *)(v3 + 9);
        long long v9 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v4 + 5) = v9;
        *((_OWORD *)v4 + 2) = v7;
        *((_OWORD *)v4 + 3) = v8;
        v4 += 96;
      }
      long long v32 = v4;
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  sub_100940948(a1, (void *)(a1 + 1072), *(void **)(a1 + 3312), (double **)&__p, 0, (uint64_t *)&v29);
  long long v26 = *(void **)(a2 + 1632);
  if (v26)
  {
    *(void *)(a2 + 1640) = v26;
    operator delete(v26);
    *(void *)(a2 + 1632) = 0;
    *(void *)(a2 + 1640) = 0;
    *(void *)(a2 + 1648) = 0;
  }
  *(_OWORD *)(a2 + 1632) = v29;
  long long v27 = (char *)__p;
  *(void *)(a2 + 1648) = v30;
  if (v27)
  {
    long long v32 = v27;
    operator delete(v27);
  }
}

void sub_100940820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10050BAA0(a10);
  _Unwind_Resume(a1);
}

void sub_100940850(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 96;
    long long v6 = (char *)sub_100642EA8(v3, a2);
    long long v7 = &v6[96 * v5];
    long long v9 = &v6[96 * v8];
    unint64_t v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v13;
        long long v14 = *((_OWORD *)v10 - 4);
        long long v15 = *((_OWORD *)v10 - 3);
        long long v16 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v16;
        *((_OWORD *)v12 - 4) = v14;
        *((_OWORD *)v12 - 3) = v15;
        v12 -= 96;
        v10 -= 96;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_100940948@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, double **a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  double v8 = *(double *)(a1 + 6384);
  sub_100946338(a6, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  long long v9 = "reproc";
  if (!a5) {
    long long v9 = "live";
  }
  double v147 = v9;
  long long v10 = &qword_102419000;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  unint64_t v11 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)std::string buf = 134349314;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v147;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@WsbCalc, groups, %{public}lu, %{public}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)long long v223 = 134349314;
    *(void *)&v223[4] = v134;
    *(_WORD *)&v223[12] = 2082;
    *(void *)&v223[14] = v147;
    int v135 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v135);
    if (v135 != buf) {
      free(v135);
    }
  }
  long long v13 = *a4;
  long long v14 = a4[1];
  if (*a4 == v14)
  {
    long long v195 = 0u;
    long long v194 = 0u;
    int v196 = 1065353216;
  }
  else
  {
    do
    {
      if (!sub_10106EB1C(v13))
      {
        sub_101A746F0();
        abort_report_np();
        __break(1u);
      }
      v13 += 12;
    }
    while (v13 != v14);
    long long v16 = *a4;
    long long v15 = a4[1];
    long long v195 = 0u;
    long long v194 = 0u;
    int v196 = 1065353216;
    while (v16 != v15)
    {
      *(double *)std::string buf = *v16;
      sub_1009463BC((uint64_t)&v194, buf, buf, v16);
      v16 += 12;
    }
  }
  uint64_t v177 = 0;
  uint64_t v178 = 0;
  long long v179 = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v180 = _Q0;
  long long v181 = _Q0;
  long long v182 = _Q0;
  int v176 = 0xFFFF;
  int v183 = 0;
  unint64_t v184 = 0xBFF0000000000000;
  uint64_t v186 = 0;
  uint64_t v185 = 0;
  unint64_t v188 = 0xBFF0000000000000;
  int v187 = 0;
  int v189 = 0x7FFFFFFF;
  uint64_t v191 = 0;
  uint64_t v192 = 0;
  uint64_t v190 = 0;
  char v193 = 0;
  long long v22 = (void *)*a2;
  v142 = (void *)a2[1];
  if ((void *)*a2 == v142)
  {
    int v23 = 0;
    uint64_t v146 = 0;
    int v145 = 0;
  }
  else
  {
    int v145 = 0;
    unsigned int v159 = 0;
    uint64_t v146 = 0;
    int v23 = 0;
    BOOL v141 = a5 == 1;
    do
    {
      long long v174 = 0;
      std::string __p = 0;
      long long v175 = 0;
      *(void *)std::string buf = *(void *)(*v22 + 56);
      uint64_t v172 = sub_1013FA2C4(a3, (double *)buf);
      *(void *)std::string buf = sub_100B39108();
      BOOL v24 = sub_100B3918C(&v172, buf);
      int v149 = v23;
      LOBYTE(v165) = 0;
      char v171 = 0;
      uint64_t v25 = *v22;
      uint64_t v26 = v22[1];
      BOOL v160 = v22;
      if (*v22 == v26)
      {
        char v27 = 0;
        char v28 = 1;
      }
      else
      {
        char v27 = 0;
        char v28 = 1;
        do
        {
          if (*(unsigned char *)(v25 + 72))
          {
            if (v24 && (*(void *)std::string buf = *(void *)v25, sub_100B39178(&v172, buf)))
            {
              if (v10[118] != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022D4690);
              }
              long long v29 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
              {
                v222[0].__r_.__value_.__r.__words[0] = *(void *)v25;
                sub_100B39278((std::string *)buf);
                uint64_t v30 = buf;
                if (buf[23] < 0) {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                *(_DWORD *)long long v223 = 136380675;
                *(void *)&v223[4] = v30;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "@Wsb, consistent associated AP %{private}s between associated AP history and aonsensed", v223, 0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (v10[118] != -1) {
                  dispatch_once(&qword_1024193B0, &stru_1022D4690);
                }
                *(void *)v197 = *(void *)v25;
                sub_100B39278((std::string *)v223);
                int v68 = v223;
                if (v223[23] < 0) {
                  int v68 = *(unsigned char **)v223;
                }
                LODWORD(v222[0].__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v222[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
                long long v69 = (char *)_os_log_send_and_compose_impl();
                if ((v223[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v223);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v69);
                if (v69 != buf) {
                  free(v69);
                }
              }
              char v28 = 1;
            }
            else
            {
              if (v10[118] != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022D4690);
              }
              id v31 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
              {
                sub_100B39278((std::string *)buf);
                int v32 = buf[23];
                long long v33 = *(unsigned char **)buf;
                *(void *)v197 = *(void *)v25;
                sub_100B39278((std::string *)v223);
                long long v34 = buf;
                if (v32 < 0) {
                  long long v34 = v33;
                }
                long long v35 = v223;
                if (v223[23] < 0) {
                  long long v35 = *(unsigned char **)v223;
                }
                LODWORD(v222[0].__r_.__value_.__l.__data_) = 136380931;
                *(std::string::size_type *)((char *)v222[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                WORD2(v222[0].__r_.__value_.__r.__words[1]) = 2081;
                *(std::string::size_type *)((char *)&v222[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "@Wsb, warning, inconsistent associated AP %{private}s vs %{private}s between associated AP history and aonsensed", (uint8_t *)v222, 0x16u);
                if ((v223[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v223);
                }
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (v10[118] != -1) {
                  dispatch_once(&qword_1024193B0, &stru_1022D4690);
                }
                sub_100B39278((std::string *)v223);
                int v63 = v223[23];
                unint64_t v64 = *(unsigned char **)v223;
                std::string::size_type v161 = *(void *)v25;
                sub_100B39278(v222);
                unint64_t v65 = v223;
                if (v63 < 0) {
                  unint64_t v65 = v64;
                }
                unint64_t v66 = v222;
                if ((v222[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unint64_t v66 = (std::string *)v222[0].__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)v197 = 136380931;
                *(void *)&v197[4] = v65;
                *(_WORD *)&v197[12] = 2081;
                *(void *)&v197[14] = v66;
                __int16 v67 = (char *)_os_log_send_and_compose_impl();
                if (SHIBYTE(v222[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v222[0].__r_.__value_.__l.__data_);
                }
                if ((v223[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v223);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v67);
                if (v67 != buf) {
                  free(v67);
                }
              }
              char v28 = 0;
            }
            uint64_t v172 = *(void *)v25;
            char v27 = 1;
            BOOL v24 = 1;
          }
          *(void *)std::string buf = *(void *)v25;
          __int16 v36 = sub_10058A478(&v194, buf);
          if (v36)
          {
            long long v37 = *(_OWORD *)(v36 + 7);
            long long v38 = *(_OWORD *)(v36 + 9);
            long long v39 = *(_OWORD *)(v36 + 13);
            long long v214 = *(_OWORD *)(v36 + 11);
            long long v215 = v39;
            *(_OWORD *)&buf[32] = v37;
            *(_OWORD *)&buf[48] = v38;
            long long v40 = *(_OWORD *)(v36 + 5);
            *(_OWORD *)std::string buf = *(_OWORD *)(v36 + 3);
            *(_OWORD *)&uint8_t buf[16] = v40;
            sub_10106EAFC((uint64_t)buf, *(_DWORD *)(v25 + 32), *(_DWORD *)(v25 + 40), *(double *)(v25 + 56));
            __int16 v41 = v174;
            if (v174 >= v175)
            {
              uint64_t v47 = (char *)__p;
              unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v174 - (unsigned char *)__p) >> 5);
              unint64_t v49 = v48 + 1;
              if (v48 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_1001D7FD4();
              }
              if (0x5555555555555556 * ((v175 - (unsigned char *)__p) >> 5) > v49) {
                unint64_t v49 = 0x5555555555555556 * ((v175 - (unsigned char *)__p) >> 5);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v175 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
                unint64_t v50 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v50 = v49;
              }
              if (v50)
              {
                long long v51 = (char *)sub_100642EA8((uint64_t)&v175, v50);
                __int16 v41 = v174;
                uint64_t v47 = (char *)__p;
              }
              else
              {
                long long v51 = 0;
              }
              uint64_t v52 = &v51[96 * v48];
              long long v53 = *(_OWORD *)&buf[16];
              *(_OWORD *)uint64_t v52 = *(_OWORD *)buf;
              *((_OWORD *)v52 + 1) = v53;
              long long v54 = *(_OWORD *)&buf[32];
              long long v55 = *(_OWORD *)&buf[48];
              long long v56 = v215;
              *((_OWORD *)v52 + 4) = v214;
              *((_OWORD *)v52 + 5) = v56;
              *((_OWORD *)v52 + 2) = v54;
              *((_OWORD *)v52 + 3) = v55;
              if (v41 == v47)
              {
                int v62 = &v51[96 * v48];
              }
              else
              {
                double v57 = &v51[96 * v48];
                do
                {
                  long long v58 = *((_OWORD *)v41 - 5);
                  *((_OWORD *)v57 - 6) = *((_OWORD *)v41 - 6);
                  *((_OWORD *)v57 - 5) = v58;
                  long long v59 = *((_OWORD *)v41 - 4);
                  long long v60 = *((_OWORD *)v41 - 3);
                  long long v61 = *((_OWORD *)v41 - 1);
                  int v62 = v57 - 96;
                  *((_OWORD *)v57 - 2) = *((_OWORD *)v41 - 2);
                  *((_OWORD *)v57 - 1) = v61;
                  *((_OWORD *)v57 - 4) = v59;
                  *((_OWORD *)v57 - 3) = v60;
                  v41 -= 96;
                  v57 -= 96;
                }
                while (v41 != v47);
              }
              long long v46 = v52 + 96;
              std::string __p = v62;
              long long v174 = v52 + 96;
              long long v175 = &v51[96 * v50];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              long long v42 = *(_OWORD *)&buf[16];
              *(_OWORD *)long long v174 = *(_OWORD *)buf;
              *((_OWORD *)v41 + 1) = v42;
              long long v43 = *(_OWORD *)&buf[32];
              long long v44 = *(_OWORD *)&buf[48];
              long long v45 = v215;
              *((_OWORD *)v41 + 4) = v214;
              *((_OWORD *)v41 + 5) = v45;
              *((_OWORD *)v41 + 2) = v43;
              *((_OWORD *)v41 + 3) = v44;
              long long v46 = v41 + 96;
            }
            long long v174 = v46;
            if (*(unsigned char *)(v25 + 72))
            {
              long long v167 = *(_OWORD *)&buf[32];
              long long v168 = *(_OWORD *)&buf[48];
              long long v169 = v214;
              long long v170 = v215;
              long long v165 = *(_OWORD *)buf;
              long long v166 = *(_OWORD *)&buf[16];
              if (!v171) {
                char v171 = 1;
              }
            }
          }
          v25 += 88;
        }
        while (v25 != v26);
      }
      if (v24 && (v27 & 1) == 0)
      {
        if (v10[118] != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4690);
        }
        int v70 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          sub_100B39278((std::string *)buf);
          __int16 v71 = buf;
          if (buf[23] < 0) {
            __int16 v71 = *(unsigned char **)buf;
          }
          *(_DWORD *)long long v223 = 136380675;
          *(void *)&v223[4] = v71;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "@Wsb, warning, aonsensed does not have associated AP %{private}s from associated AP history", v223, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v10[118] != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4690);
          }
          sub_100B39278((std::string *)v223);
          long long v114 = v223;
          if (v223[23] < 0) {
            long long v114 = *(unsigned char **)v223;
          }
          LODWORD(v222[0].__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v222[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v114;
          long long v115 = (char *)_os_log_send_and_compose_impl();
          if ((v223[23] & 0x80000000) != 0) {
            operator delete(*(void **)v223);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v115);
          if (v115 != buf) {
            free(v115);
          }
        }
        uint64_t v72 = sub_10058A478(&v194, &v172);
        if (!v72) {
          goto LABEL_102;
        }
        long long v73 = *(_OWORD *)(v72 + 3);
        long long v74 = *(_OWORD *)(v72 + 5);
        long long v75 = *(_OWORD *)(v72 + 7);
        long long v76 = *(_OWORD *)(v72 + 9);
        long long v77 = *(_OWORD *)(v72 + 13);
        long long v169 = *(_OWORD *)(v72 + 11);
        long long v170 = v77;
        long long v167 = v75;
        long long v168 = v76;
        long long v165 = v73;
        long long v166 = v74;
        if (!v171)
        {
          char v28 = 0;
          char v171 = 1;
        }
        else
        {
LABEL_102:
          char v28 = 0;
        }
      }
      uint64_t v226 = 0;
      char v227 = 0;
      uint64_t v231 = 0;
      char v232 = 0;
      memset(v223, 0, sizeof(v223));
      long long v224 = 0u;
      int v225 = 0;
      uint64_t v228 = 0;
      uint64_t v229 = 0;
      __int16 v230 = 0;
      long long v233 = 0u;
      *(_OWORD *)v234 = 0u;
      *(void *)&v234[14] = 0x100000000000000;
      uint64_t v235 = 0xFFFFFFFFLL;
      long long v236 = 0u;
      memset(v237, 0, 32);
      uint64_t v162 = 0;
      std::string::size_type v161 = 0;
      int v164 = 0;
      uint64_t v163 = 0;
      sub_100943470(0, (uint64_t *)&__p, (uint64_t *)&__p, (uint64_t)&v176, (uint64_t)&v176, 0, 0, (uint64_t *)&v161, buf, *(double *)(*v160 + 56), (uint64_t)v223, 0);
      uint64_t v78 = *a6;
      uint64_t v79 = *a6 + 184 * v159;
      *(_OWORD *)(v79 + 128) = v218;
      *(_OWORD *)(v79 + 144) = v219;
      *(_OWORD *)(v79 + 160) = v220;
      *(void *)(v79 + 176) = v221;
      *(_OWORD *)(v79 + 64) = v214;
      *(_OWORD *)(v79 + 80) = v215;
      *(_OWORD *)(v79 + 96) = v216;
      *(_OWORD *)(v79 + 112) = v217;
      *(_OWORD *)uint64_t v79 = *(_OWORD *)buf;
      *(_OWORD *)(v79 + 16) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v79 + 32) = *(_OWORD *)&buf[32];
      *(_OWORD *)(v79 + 48) = *(_OWORD *)&buf[48];
      if (0xD37A6F4DE9BD37A7 * ((a6[1] - v78) >> 3) <= v159) {
        sub_100273D6C();
      }
      *(void *)(v79 + 76) = *(void *)(*v160 + 56);
      unint64_t v80 = (double *)(v79 + 76);
      *(_DWORD *)(v79 + 96) = 4;
      sub_1012FB688(*(void **)(a1 + 4928), (double *)(v79 + 76), (uint64_t)v222);
      uint64_t v81 = v10[118];
      if (v24)
      {
        if (v81 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4690);
        }
        unint64_t v82 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278((std::string *)buf);
          v83 = buf;
          if (buf[23] < 0) {
            v83 = *(unsigned char **)buf;
          }
          *(_DWORD *)v197 = 136380675;
          *(void *)&v197[4] = v83;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "@WsbLoc, associated AP, %{private}s", v197, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v10[118] != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4690);
          }
          sub_100B39278((std::string *)v197);
          uint64_t v117 = v197;
          if (v197[23] < 0) {
            uint64_t v117 = *(unsigned char **)v197;
          }
          int v211 = 136380675;
          *(void *)int v212 = v117;
          int v118 = (char *)_os_log_send_and_compose_impl();
          if ((v197[23] & 0x80000000) != 0) {
            operator delete(*(void **)v197);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v118);
          if (v118 != buf) {
            free(v118);
          }
        }
        sub_10144DA50(&v211);
        sub_100134750(v197, "WSB");
        sub_100F7F8DC(buf, &v172, &v165, &v211, a1 + 6472, v197, v222);
        if ((v197[23] & 0x80000000) != 0) {
          operator delete(*(void **)v197);
        }
        if (*(void *)&v212[4]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&v212[4]);
        }
        sub_100F8315C((uint64_t)buf, (long long *)v79);
        sub_100F839E0((uint64_t)buf);
        LODWORD(v146) = v146 + 1;
        sub_1009460B0((uint64_t)buf);
      }
      else
      {
        if (v81 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4690);
        }
        v84 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "@WsbLoc, associated AP, none", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v10[118] != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4690);
          }
          *(_WORD *)v197 = 0;
          v116 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v116);
          if (v116 != buf) {
            free(v116);
          }
        }
        ++HIDWORD(v146);
      }
      uint64_t v85 = v78 + 184 * v159;
      int v87 = *(unsigned __int8 *)(v85 + 180);
      long long v86 = (unsigned __int8 *)(v85 + 180);
      *(double *)(v79 + 88) = *(double *)(a1 + 6160) * 1.5;
      unint64_t v88 = (v162 - v161) >> 3;
      uint64_t v89 = (-1431655765 * v88);
      int v90 = v164;
      unsigned int v158 = v89 - v164;
      unsigned int v156 = sub_10094325C((int)v89 - v164, -1431655765 * (int)v88, 100);
      int v148 = v87;
      unsigned int v155 = sub_10094325C(v90, v89, 100);
      uint64_t v91 = -1171354717 * ((v160[1] - *v160) >> 3);
      unint64_t v92 = (unint64_t)(v174 - (unsigned char *)__p) >> 5;
      uint64_t v93 = (-1431655765 * v92);
      unsigned int v154 = sub_10094325C(-1431655765 * (int)v92, -1171354717 * ((v160[1] - *v160) >> 3), 100);
      unsigned int v153 = sub_10094325C((int)v91 - (int)v93, v91, 100);
      unsigned int v152 = sub_10094325C(v89, v91, 100);
      unsigned int v157 = v90;
      unsigned int v151 = sub_10094325C(v89, v93, 100);
      id v94 = +[NSMutableDictionary dictionary];
      v209[0] = @"aps";
      v210[0] = +[NSNumber numberWithUnsignedInt:v89];
      v209[1] = @"alsAps";
      v210[1] = +[NSNumber numberWithUnsignedInt:v158];
      v209[2] = @"tileAps";
      v210[2] = +[NSNumber numberWithUnsignedInt:v157];
      v209[3] = @"percentAlsAps";
      v210[3] = +[NSNumber numberWithInt:v156];
      v209[4] = @"percentTileAps";
      v210[4] = +[NSNumber numberWithInt:v155];
      v209[5] = @"pass";
      v210[5] = +[NSString stringWithUTF8String:v147];
      v210[6] = &__kCFBooleanFalse;
      v209[6] = @"isWifiFixWithAssociatedAp";
      v209[7] = @"isConsistentAssociatedApBetweenAssociatedApHistoryAndAonsensed";
      v210[7] = +[NSNumber numberWithBool:v28 & 1];
      v209[8] = @"apsInScanGroup";
      v210[8] = +[NSNumber numberWithUnsignedInt:v91];
      v209[9] = @"apsWithLocationInScanGroup";
      v210[9] = +[NSNumber numberWithUnsignedInt:v93];
      v209[10] = @"apsWithoutLocationInScanGroup";
      v210[10] = +[NSNumber numberWithUnsignedInt:(v91 - v93)];
      v209[11] = @"percentApsWithLocationInScanGroup";
      v210[11] = +[NSNumber numberWithUnsignedInt:v154];
      v209[12] = @"percentApsWithoutLocationInScanGroup";
      v210[12] = +[NSNumber numberWithUnsignedInt:v153];
      v209[13] = @"percentApsInScanGroupUsedInLocation";
      v210[13] = +[NSNumber numberWithUnsignedInt:v152];
      v209[14] = @"percentApsWithLocationUsedInLocation";
      v210[14] = +[NSNumber numberWithUnsignedInt:v151];
      [v94 setDictionary:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v210, v209, 15)];
      if (sub_1000E6DB4(v79))
      {
        double v95 = *(double *)(v79 + 20);
        if (v95 < 20.0) {
          double v95 = 20.0;
        }
        *(double *)(v79 + 20) = v95;
        *(_DWORD *)(v79 + 128) = sub_100D3CC54(*(_DWORD *)(v79 + 84));
        *(_OWORD *)(v79 + 100) = *(_OWORD *)(v79 + 4);
        *(void *)(v79 + 116) = *(void *)(v79 + 60);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4690);
        }
        v96 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v97 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v160[1] - *v160) >> 3);
          uint64_t v98 = *(void *)(v79 + 76);
          uint64_t v99 = *(void *)(v79 + 4);
          uint64_t v100 = *(void *)(v79 + 12);
          uint64_t v101 = *(void *)(v79 + 20);
          *(_DWORD *)std::string buf = 67242241;
          *(_DWORD *)&uint8_t buf[4] = v89;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v97;
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = v141;
          *(_WORD *)&buf[24] = 2050;
          *(void *)&buf[26] = v98;
          *(_WORD *)&buf[34] = 2049;
          *(void *)&unsigned char buf[36] = v99;
          *(_WORD *)&buf[44] = 2049;
          *(void *)&buf[46] = v100;
          *(_WORD *)&buf[54] = 2050;
          *(void *)&buf[56] = v101;
          LOWORD(v214) = 1026;
          *(_DWORD *)((char *)&v214 + 2) = v158;
          WORD3(v214) = 1026;
          DWORD2(v214) = v157;
          _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "@WsbLoc, fix, aps, %{public}d, %{public}lu, reproc, %{public}d, time, %{public}.1f, ll, %{private}.7f, %{private}.7f, hAcc, %{public}.1f, alsAps, %{public}u, tileAps, %{public}u", buf, 0x4Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4690);
          }
          uint64_t v122 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v160[1] - *v160) >> 3);
          uint64_t v123 = *(void *)(v79 + 76);
          uint64_t v124 = *(void *)(v79 + 4);
          uint64_t v125 = *(void *)(v79 + 12);
          uint64_t v126 = *(void *)(v79 + 20);
          *(_DWORD *)v197 = 67242241;
          *(_DWORD *)&v197[4] = v89;
          *(_WORD *)&v197[8] = 2050;
          *(void *)&v197[10] = v122;
          *(_WORD *)&v197[18] = 1026;
          *(_DWORD *)&v197[20] = v141;
          *(_WORD *)&v197[24] = 2050;
          *(void *)&v197[26] = v123;
          __int16 v198 = 2049;
          uint64_t v199 = v124;
          __int16 v200 = 2049;
          uint64_t v201 = v125;
          __int16 v202 = 2050;
          uint64_t v203 = v126;
          __int16 v204 = 1026;
          unsigned int v205 = v158;
          __int16 v206 = 1026;
          unsigned int v207 = v157;
          char v127 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v127);
          if (v127 != buf) {
            free(v127);
          }
        }
        double v102 = *v80;
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4690);
        }
        long long v103 = qword_1024193B8;
        double v104 = (v8 - v102) / 60.0;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67240706;
          *(_DWORD *)&uint8_t buf[4] = v89;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(double *)&buf[10] = v104;
          *(_WORD *)&unsigned char buf[18] = 2082;
          *(void *)&buf[20] = v147;
          _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "WsbMetric, fix, aps, %{public}d, age, %{public}0.1f, %{public}s", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4690);
          }
          *(_DWORD *)v197 = 67240706;
          *(_DWORD *)&v197[4] = v89;
          *(_WORD *)&v197[8] = 2050;
          *(double *)&v197[10] = v104;
          *(_WORD *)&v197[18] = 2082;
          *(void *)&v197[20] = v147;
          v128 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v128);
          if (v128 != buf) {
            free(v128);
          }
        }
        [v94 setObject:&__kCFBooleanTrue forKeyedSubscript:@"fix"];
        [v94 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v104) forKeyedSubscript:@"age"];
        [v94 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *v86) forKeyedSubscript:@"isWifiFixWithAssociatedAp"];
        if (*v86)
        {
          [v94 setObject:&off_102392C48 forKeyedSubscript:@"aps"];
          [v94 setObject:&off_102392C60 forKeyedSubscript:@"alsAps"];
          [v94 setObject:&off_102392C60 forKeyedSubscript:@"tileAps"];
          [v94 setObject:&off_102392C60 forKeyedSubscript:@"percentAlsAps"];
          [v94 setObject:&off_102392C60 forKeyedSubscript:@"percentTileAps"];
          [v94 setObject:&off_102392C60 forKeyedSubscript:@"percentApsInScanGroupUsedInLocation"];
          [v94 setObject:&off_102392C60 forKeyedSubscript:@"percentApsWithLocationUsedInLocation"];
        }
        sub_101284D6C((uint64_t)buf, (uint64_t)v222);
        if (sub_101284DA0((uint64_t)buf, v79))
        {
          sub_101284E28((uint64_t)buf, v79);
          double v106 = *(double *)(v79 + 20);
          if (v106 > 0.0) {
            double v107 = v105 / v106;
          }
          else {
            double v107 = -1.0;
          }
          [v94 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:")] forKeyedSubscript:@"horizontalError"];
          [v94 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v107) forKeyedSubscript:@"horizontalErrorRatio"];
          *(void *)&double v108 = sub_101284E3C((uint64_t)buf, v197).n128_u64[0];
          [v94 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v208, v108) forKeyedSubscript:@"referenceLocationType"];
        }
        AnalyticsSendEventLazy();
        ++v145;
      }
      else
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4690);
        }
        v109 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
        {
          uint64_t v110 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v160[1] - *v160) >> 3);
          double v111 = *v80;
          *(_DWORD *)std::string buf = 134349568;
          *(void *)&uint8_t buf[4] = v110;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = v141;
          *(_WORD *)&unsigned char buf[18] = 2050;
          *(double *)&buf[20] = v111;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_INFO, "@WsbLoc, none, aps, %{public}lu, reproc, %{public}d, time, %{public}.3f", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4690);
          }
          uint64_t v119 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v160[1] - *v160) >> 3);
          double v120 = *v80;
          *(_DWORD *)v197 = 134349568;
          *(void *)&v197[4] = v119;
          *(_WORD *)&v197[12] = 1026;
          *(_DWORD *)&v197[14] = v141;
          *(_WORD *)&v197[18] = 2050;
          *(double *)&v197[20] = v120;
          uint64_t v121 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v121);
          if (v121 != buf) {
            free(v121);
          }
        }
        [v94 setObject:&__kCFBooleanFalse forKeyedSubscript:@"fix"];
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      long long v112 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 138477827;
        *(void *)&uint8_t buf[4] = v94;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "@WsbMetric, result, %{private}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4690);
        }
        *(_DWORD *)v197 = 138477827;
        *(void *)&v197[4] = v94;
        long long v113 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v113);
        if (v113 != buf) {
          free(v113);
        }
      }
      AnalyticsSendEventLazy();
      *(void *)std::string buf = &v161;
      sub_1000A7B4C((void ***)buf);
      *(void *)std::string buf = &v237[8];
      sub_1000A7B4C((void ***)buf);
      if ((void)v236)
      {
        *((void *)&v236 + 1) = v236;
        operator delete((void *)v236);
      }
      long long v10 = &qword_102419000;
      if (__p)
      {
        long long v174 = (char *)__p;
        operator delete(__p);
      }
      int v23 = v149 + v148;
      ++v159;
      long long v22 = v160 + 3;
    }
    while (v160 + 3 != v142);
  }
  if (v10[118] != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  v129 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)std::string buf = 67240706;
    *(_DWORD *)&uint8_t buf[4] = v145;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v130;
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v147;
    _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "WsbCalc, computed, %{public}d, of, %{public}lu, %{public}s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v10[118] != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    *(_DWORD *)long long v223 = 67240706;
    *(_DWORD *)&v223[4] = v145;
    *(_WORD *)&v223[8] = 2050;
    *(void *)&v223[10] = v136;
    *(_WORD *)&v223[18] = 2082;
    *(void *)&v223[20] = v147;
    v137 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v137);
    if (v137 != buf) {
      free(v137);
    }
  }
  if (v145)
  {
    if (v10[118] != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    v131 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v147;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v145;
      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, %{public}s, %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v10[118] != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      *(_DWORD *)long long v223 = 136446466;
      *(void *)&v223[4] = v147;
      *(_WORD *)&v223[12] = 1026;
      *(_DWORD *)&v223[14] = v145;
      v139 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v139);
      if (v139 != buf) {
        free(v139);
      }
    }
    AnalyticsSendEventLazy();
  }
  if (v10[118] != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  unint64_t v132 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240962;
    *(_DWORD *)&uint8_t buf[4] = v146;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = HIDWORD(v146);
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&uint8_t buf[16] = v23;
    *(_WORD *)&buf[20] = 2082;
    *(void *)&buf[22] = v147;
    _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEBUG, "@WsbMetric, wsbWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFixesWithAssociatedAp, %{public}d, passType, %{public}s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v10[118] != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    *(_DWORD *)long long v223 = 67240962;
    *(_DWORD *)&v223[4] = v146;
    *(_WORD *)&v223[8] = 1026;
    *(_DWORD *)&v223[10] = HIDWORD(v146);
    *(_WORD *)&v223[14] = 1026;
    *(_DWORD *)&v223[16] = v23;
    *(_WORD *)&v223[20] = 2082;
    *(void *)&v223[22] = v147;
    uint64_t v138 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<Types::ComputedLocation> CL::Wifi1::Policies::PositionCalculation::HandleEvent::processScanGroups(const CLWifiService_Type::AccessPointGroups &, const CLAssociatedApHistory &, const std::vector<CLWifiAPLocation> &, Types::WsbPassType) const", "%s\n", v138);
    if (v138 != buf) {
      free(v138);
    }
  }
  AnalyticsSendEventLazy();
  return sub_1000D7D80((uint64_t)&v194);
}

void sub_100942E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_1000D7D80((uint64_t)&STACK[0x390]);
  int v32 = *(void **)a31;
  if (*(void *)a31)
  {
    *(void *)(a31 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_10094301C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF07C((_DWORD *)a2, a1);
  std::string __p = 0;
  int v32 = 0;
  long long v33 = 0;
  sub_100940850(&__p, *(void *)(a1 + 1208));
  uint64_t v3 = *(uint64_t **)(a1 + 1200);
  if (v3)
  {
    double v4 = v32;
    do
    {
      uint64_t v5 = v3 + 3;
      if (v4 >= v33)
      {
        long long v10 = (char *)__p;
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)__p) >> 5);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((v33 - (unsigned char *)__p) >> 5) > v12) {
          unint64_t v12 = 0x5555555555555556 * ((v33 - (unsigned char *)__p) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
          unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          long long v14 = (char *)sub_100642EA8((uint64_t)&v33, v13);
          long long v10 = (char *)__p;
          double v4 = v32;
        }
        else
        {
          long long v14 = 0;
        }
        long long v15 = &v14[96 * v11];
        long long v16 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)long long v15 = *v5;
        *((_OWORD *)v15 + 1) = v16;
        long long v17 = *(_OWORD *)(v3 + 7);
        long long v18 = *(_OWORD *)(v3 + 9);
        long long v19 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v15 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v15 + 5) = v19;
        *((_OWORD *)v15 + 2) = v17;
        *((_OWORD *)v15 + 3) = v18;
        if (v4 == v10)
        {
          uint64_t v25 = &v14[96 * v11];
        }
        else
        {
          BOOL v20 = &v14[96 * v11];
          do
          {
            long long v21 = *((_OWORD *)v4 - 5);
            *((_OWORD *)v20 - 6) = *((_OWORD *)v4 - 6);
            *((_OWORD *)v20 - 5) = v21;
            long long v22 = *((_OWORD *)v4 - 4);
            long long v23 = *((_OWORD *)v4 - 3);
            long long v24 = *((_OWORD *)v4 - 1);
            uint64_t v25 = v20 - 96;
            *((_OWORD *)v20 - 2) = *((_OWORD *)v4 - 2);
            *((_OWORD *)v20 - 1) = v24;
            *((_OWORD *)v20 - 4) = v22;
            *((_OWORD *)v20 - 3) = v23;
            v4 -= 96;
            v20 -= 96;
          }
          while (v4 != v10);
        }
        double v4 = v15 + 96;
        std::string __p = v25;
        int v32 = v15 + 96;
        long long v33 = &v14[96 * v13];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        long long v6 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)double v4 = *v5;
        *((_OWORD *)v4 + 1) = v6;
        long long v7 = *(_OWORD *)(v3 + 7);
        long long v8 = *(_OWORD *)(v3 + 9);
        long long v9 = *(_OWORD *)(v3 + 13);
        *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 11);
        *((_OWORD *)v4 + 5) = v9;
        *((_OWORD *)v4 + 2) = v7;
        *((_OWORD *)v4 + 3) = v8;
        v4 += 96;
      }
      int v32 = v4;
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  sub_100940948(a1, (void *)(a1 + 6280), *(void **)(a1 + 3312), (double **)&__p, 1, (uint64_t *)&v29);
  uint64_t v26 = *(void **)(a2 + 1632);
  if (v26)
  {
    *(void *)(a2 + 1640) = v26;
    operator delete(v26);
    *(void *)(a2 + 1632) = 0;
    *(void *)(a2 + 1640) = 0;
    *(void *)(a2 + 1648) = 0;
  }
  *(_OWORD *)(a2 + 1632) = v29;
  char v27 = (char *)__p;
  *(void *)(a2 + 1648) = v30;
  if (v27)
  {
    int v32 = v27;
    operator delete(v27);
  }
}

void sub_10094322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10050BAA0(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10094325C(int a1, unsigned int a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v6 = a3;
  if (a2) {
    uint64_t v6 = 100 * a1 / a2;
  }
  if (v6 >= 0x65)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    long long v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67240960;
      int v11 = v6;
      __int16 v12 = 1026;
      int v13 = a1;
      __int16 v14 = 1026;
      unsigned int v15 = a2;
      __int16 v16 = 1026;
      int v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid percentage: %{public}u. count: %{public}u, total: %{public}u, defaultPercentage: %{public}u", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "uint32_t CL::Wifi1::Policies::PositionCalculation::percentage(uint32_t, uint32_t, uint32_t)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return v6;
}

void sub_100943470(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, double a10@<D0>, uint64_t a11, int a12)
{
  uint64_t v157 = 0;
  int v156 = 0;
  unint64_t v155 = 0xBFF0000000000000;
  *(void *)&v151[12] = 0;
  *(void *)&v151[4] = 0;
  *(_OWORD *)&v151[20] = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v151[36] = _Q1;
  *(_OWORD *)&v151[52] = _Q1;
  *(_OWORD *)&v151[68] = _Q1;
  *(_DWORD *)unsigned int v151 = 0xFFFF;
  *(_DWORD *)&v151[84] = 0;
  long long v152 = 0uLL;
  *(void *)&v151[88] = 0xBFF0000000000000;
  *(void *)((char *)&v153 + 4) = 0xBFF0000000000000;
  LODWORD(v153) = 0;
  HIDWORD(v153) = 0x7FFFFFFF;
  memset(v154, 0, 25);
  int v150 = -200;
  unint64_t v149 = 0xC069000000000000;
  BOOL v148 = 0;
  double v147 = a10;
  *(double *)(a11 + 120) = a10;
  unint64_t v132 = 0;
  uint64_t v133 = 0;
  v131 = &v132;
  v127[0] = 0;
  v127[1] = 0;
  uint64_t v126 = v127;
  *(void *)&v159[8] = 0;
  *(void *)unsigned int v159 = 0;
  *(void *)std::string buf = v159;
  uint64_t v18 = *a2;
  uint64_t v19 = a2[1];
  if (*a2 != v19)
  {
    do
    {
      *(void *)std::string __p = *(void *)v18;
      sub_100B39278((std::string *)__src);
      if ((__src[23] & 0x80000000) != 0)
      {
        sub_1000DC48C(__p, *(void **)__src, *(unint64_t *)&__src[8]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)__src;
        *(void *)&__p[16] = *(void *)&__src[16];
      }
      long long v20 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)&unsigned char __p[24] = *(_OWORD *)v18;
      *(_OWORD *)&__p[40] = v20;
      long long v21 = *(_OWORD *)(v18 + 32);
      long long v22 = *(_OWORD *)(v18 + 48);
      long long v23 = *(_OWORD *)(v18 + 80);
      *(_OWORD *)&__p[88] = *(_OWORD *)(v18 + 64);
      *(_OWORD *)&__p[104] = v23;
      *(_OWORD *)&__p[56] = v21;
      *(_OWORD *)&__p[72] = v22;
      sub_1009461B0((uint64_t **)&v131, (const void **)__p, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10010702C((uint64_t **)&v126, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      v18 += 96;
    }
    while (v18 != v19);
  }
  uint64_t v24 = *a3;
  uint64_t v25 = a3[1];
  if (*a3 != v25)
  {
    do
    {
      *(void *)std::string __p = *(void *)v24;
      sub_100B39278((std::string *)__src);
      if ((__src[23] & 0x80000000) != 0)
      {
        sub_1000DC48C(__p, *(void **)__src, *(unint64_t *)&__src[8]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)__src;
        *(void *)&__p[16] = *(void *)&__src[16];
      }
      long long v26 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)&unsigned char __p[24] = *(_OWORD *)v24;
      *(_OWORD *)&__p[40] = v26;
      long long v27 = *(_OWORD *)(v24 + 32);
      long long v28 = *(_OWORD *)(v24 + 48);
      long long v29 = *(_OWORD *)(v24 + 80);
      *(_OWORD *)&__p[88] = *(_OWORD *)(v24 + 64);
      *(_OWORD *)&__p[104] = v29;
      *(_OWORD *)&__p[56] = v27;
      *(_OWORD *)&__p[72] = v28;
      sub_1009461B0((uint64_t **)&v131, (const void **)__p, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10010702C((uint64_t **)buf, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      v24 += 96;
    }
    while (v24 != v25);
  }
  int v118 = a3;
  uint64_t v30 = (uint64_t *)v131;
  if (v131 != &v132)
  {
    int v31 = 0;
    do
    {
      sub_100134750(v163, "type");
      int v32 = v30 + 4;
      if (sub_100040D3C((uint64_t)buf, (const void **)v30 + 4)) {
        std::string::append((std::string *)v163, "_ZAxis");
      }
      if (sub_100040D3C((uint64_t)&v126, (const void **)v30 + 4)) {
        std::string::append((std::string *)v163, "_LatLon");
      }
      int v33 = v31 + 1;
      if (v31 < (int)sub_100F85DC4())
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022D46B0);
        }
        long long v34 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          long long v35 = v30 + 4;
          if (*((char *)v30 + 55) < 0) {
            long long v35 = (uint64_t *)*v32;
          }
          uint64_t v36 = v30[8];
          uint64_t v37 = v30[9];
          uint64_t v39 = v30[10];
          uint64_t v38 = v30[11];
          uint64_t v40 = v30[12];
          int v41 = *((_DWORD *)v30 + 32);
          int v42 = *((_DWORD *)v30 + 26);
          int v43 = *((_DWORD *)v30 + 27);
          uint64_t v44 = v30[17];
          uint64_t v45 = v30[15];
          long long v46 = v163;
          if (v163[23] < 0) {
            long long v46 = *(unsigned char **)v163;
          }
          *(_DWORD *)std::string __p = 67243523;
          *(_DWORD *)&__p[4] = v33;
          *(_WORD *)&std::string __p[8] = 2050;
          *(void *)&__p[10] = v133;
          *(_WORD *)&__p[18] = 2081;
          *(void *)&__p[20] = v35;
          *(_WORD *)&__p[28] = 2049;
          *(void *)&__p[30] = v36;
          *(_WORD *)&__p[38] = 2049;
          *(void *)&__p[40] = v37;
          *(_WORD *)&__p[48] = 2050;
          *(void *)&__p[50] = v38;
          *(_WORD *)&__p[58] = 1026;
          *(_DWORD *)&__p[60] = v42;
          *(_WORD *)&__p[64] = 2049;
          *(void *)&__p[66] = v39;
          *(_WORD *)&__p[74] = 2050;
          *(void *)&__p[76] = v40;
          *(_WORD *)&__p[84] = 1026;
          *(_DWORD *)&__p[86] = v41;
          *(_WORD *)&__p[90] = 1026;
          *(_DWORD *)&__p[92] = v43;
          *(_WORD *)&__p[96] = 2050;
          *(void *)&__p[98] = v44;
          *(_WORD *)&__p[106] = 2050;
          *(void *)&__p[108] = v45;
          *(_WORD *)&__p[116] = 2081;
          *(void *)&__p[118] = v46;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "WifiCalc, input AP, %{public}d / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}.6f, reach, %{public}d, altitude, %{private}.2f, vacc, %{public}.2f, rssi, %{public}d, channel, %{public}d, scan timestamp, %{public}.3lf, query timestamp, %{public}.3lf, %{private}s", __p, 0x7Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022D46B0);
          }
          if (*((char *)v30 + 55) < 0) {
            int v32 = (uint64_t *)*v32;
          }
          uint64_t v49 = v30[8];
          uint64_t v50 = v30[9];
          uint64_t v52 = v30[10];
          uint64_t v51 = v30[11];
          uint64_t v53 = v30[12];
          int v54 = *((_DWORD *)v30 + 32);
          int v55 = *((_DWORD *)v30 + 26);
          int v56 = *((_DWORD *)v30 + 27);
          uint64_t v57 = v30[17];
          uint64_t v58 = v30[15];
          long long v59 = v163;
          if (v163[23] < 0) {
            long long v59 = *(unsigned char **)v163;
          }
          *(_DWORD *)__src = 67243523;
          *(_DWORD *)&__src[4] = v33;
          *(_WORD *)&__src[8] = 2050;
          *(void *)&__src[10] = v133;
          *(_WORD *)&__src[18] = 2081;
          *(void *)&__src[20] = v32;
          *(_WORD *)&__src[28] = 2049;
          *(void *)&__src[30] = v49;
          *(_WORD *)&__src[38] = 2049;
          *(void *)&__src[40] = v50;
          *(_WORD *)&__src[48] = 2050;
          *(void *)&__src[50] = v51;
          *(_WORD *)&__src[58] = 1026;
          *(_DWORD *)&__src[60] = v55;
          *(_WORD *)long long v167 = 2049;
          *(void *)&v167[2] = v52;
          *(_WORD *)long long v168 = 2050;
          *(void *)&v168[2] = v53;
          LOWORD(v169) = 1026;
          *(_DWORD *)((char *)&v169 + 2) = v54;
          HIWORD(v169) = 1026;
          *(_DWORD *)long long v170 = v56;
          *(_WORD *)&v170[4] = 2050;
          *(void *)&v170[6] = v57;
          *(_WORD *)&v170[14] = 2050;
          *(void *)&v170[16] = v58;
          *(_WORD *)&v170[24] = 2081;
          *(void *)&v170[26] = v59;
          long long v60 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::logWifiApLocations(const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &)", "%s\n", v60);
          if (v60 != __p) {
            free(v60);
          }
        }
      }
      if ((v163[23] & 0x80000000) != 0) {
        operator delete(*(void **)v163);
      }
      uint64_t v47 = (char *)v30[1];
      if (v47)
      {
        do
        {
          unint64_t v48 = (char **)v47;
          uint64_t v47 = *(char **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          unint64_t v48 = (char **)v30[2];
          _ZF = *v48 == (char *)v30;
          uint64_t v30 = (uint64_t *)v48;
        }
        while (!_ZF);
      }
      int v31 = v33;
      uint64_t v30 = (uint64_t *)v48;
    }
    while (v48 != &v132);
  }
  sub_1000DB264((uint64_t)buf, *(char **)v159);
  sub_1000DB264((uint64_t)&v126, v127[0]);
  sub_1000DB264((uint64_t)&v131, v132);
  if (*a2 != a2[1]) {
    sub_1006409CC(a1, a2, v118, 100.0, v147, 500.0, 90, 4, 4, (int *)&v157 + 1, (int *)&v157, (double *)&v155, a4, (uint64_t)v151, &v150, (double *)&v149, &v148, &v156, a8,
  }
      a11,
      a12);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  long long v61 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    BOOL v63 = *(double *)(a4 + 20) > 0.0;
    *(_DWORD *)std::string __p = 134349824;
    *(void *)&__p[4] = v62;
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)&__p[14] = v157;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v156;
    *(_WORD *)&unsigned char __p[24] = 1026;
    *(_DWORD *)&__p[26] = v63;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "@WifiAps, compute, %{public}lu, used, %{public}u, used_vert, %{public}u, hint, %{public}d", __p, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    BOOL v105 = *(double *)(a4 + 20) > 0.0;
    *(_DWORD *)__src = 134349824;
    *(void *)&__src[4] = v104;
    *(_WORD *)&__src[12] = 1026;
    *(_DWORD *)&__src[14] = v157;
    *(_WORD *)&__src[18] = 1026;
    *(_DWORD *)&__src[20] = v156;
    *(_WORD *)&__src[24] = 1026;
    *(_DWORD *)&__src[26] = v105;
    double v106 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v106);
    if (v106 != __p) {
      free(v106);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D46B0);
  }
  unint64_t v64 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v65 = *(unsigned __int8 *)(a11 + 145);
    *(_DWORD *)std::string __p = 67240192;
    *(_DWORD *)&__p[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, isWsb, %{public}d", __p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    int v107 = *(unsigned __int8 *)(a11 + 145);
    *(_DWORD *)__src = 67240192;
    *(_DWORD *)&__src[4] = v107;
    double v108 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v108);
    if (v108 != __p) {
      free(v108);
    }
  }
  if (!a7 || !a6 || *a2 == a2[1])
  {
    *(_OWORD *)(a11 + 128) = *(_OWORD *)&v151[28];
    int v69 = v157;
    int v70 = v156;
    unint64_t v71 = v155;
    int v72 = *(_DWORD *)(a11 + 152);
    long long v73 = v153;
    long long v74 = a9;
    a9[6] = v152;
    a9[7] = v73;
    a9[8] = *(_OWORD *)v154;
    *(_OWORD *)((char *)a9 + 140) = *(_OWORD *)&v154[12];
    long long v75 = *(_OWORD *)&v151[48];
    a9[2] = *(_OWORD *)&v151[32];
    a9[3] = v75;
    long long v76 = *(_OWORD *)&v151[80];
    a9[4] = *(_OWORD *)&v151[64];
    a9[5] = v76;
    long long v77 = *(_OWORD *)v151;
    long long v78 = *(_OWORD *)&v151[16];
    goto LABEL_113;
  }
  sub_1012F1734(a6, (uint64_t)&v131);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022D46B0);
  }
  unint64_t v66 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    if (v145) {
      __int16 v67 = "Yes";
    }
    else {
      __int16 v67 = "No";
    }
    *(_DWORD *)std::string __p = 136450051;
    *(void *)&__p[4] = v67;
    *(_WORD *)&unsigned char __p[12] = 2049;
    *(void *)&__p[14] = v144;
    *(_WORD *)&__p[22] = 2049;
    *(void *)&unsigned char __p[24] = v146;
    *(_WORD *)&__p[32] = 2049;
    *(void *)&__p[34] = v131;
    *(_WORD *)&__p[42] = 2049;
    *(void *)&__p[44] = v133;
    *(_WORD *)&__p[52] = 2049;
    *(void *)&__p[54] = v132;
    *(_WORD *)&__p[62] = 2049;
    *(void *)&__p[64] = v134;
    *(_WORD *)&__p[72] = 2049;
    *(void *)&__p[74] = v135;
    *(_WORD *)&__p[82] = 2049;
    *(void *)&__p[84] = v136;
    *(_WORD *)&__p[92] = 2049;
    *(void *)&__p[94] = v137;
    *(_WORD *)&__p[102] = 2049;
    *(void *)&__p[104] = v138;
    *(_WORD *)&__p[112] = 2049;
    *(void *)&__p[114] = v139;
    *(_WORD *)&__p[122] = 2049;
    *(void *)&__p[124] = v140;
    __int16 v178 = 2049;
    uint64_t v179 = v142;
    __int16 v180 = 2049;
    uint64_t v181 = v141;
    __int16 v182 = 2049;
    uint64_t v183 = v143;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis input kalmanFilter, initialized, %{public}s, relative altitude, %{private}.6f, wifiAltUncAve, %{private}.6f, alt_k_k, %{private}.6f, alt_k1_k, %{private}.6f, cov_k_k, %{private}.6f, cov_k1_k, %{private}.6f, process noise variance, stable, %{private}.6f, unstable, %{private}.6f, measurement variance, %{private}.6f, timestamp, propagate, %{private}.3lf, update, %{private}.3lf, relative altitude timestamp, %{private}.3lf, wifi time interval, %{private}.6f, relative altitude time interval, %{private}.6f, altitude change during baro outage, %{private}.6f", __p, 0xA2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    v109 = "Yes";
    if (!v145) {
      v109 = "No";
    }
    *(_DWORD *)__src = 136450051;
    *(void *)&__src[4] = v109;
    *(_WORD *)&__src[12] = 2049;
    *(void *)&__src[14] = v144;
    *(_WORD *)&__src[22] = 2049;
    *(void *)&__src[24] = v146;
    *(_WORD *)&__src[32] = 2049;
    *(void *)&__src[34] = v131;
    *(_WORD *)&__src[42] = 2049;
    *(void *)&__src[44] = v133;
    *(_WORD *)&__src[52] = 2049;
    *(void *)&__src[54] = v132;
    *(_WORD *)&__src[62] = 2049;
    *(void *)long long v167 = v134;
    *(_WORD *)&v167[8] = 2049;
    *(void *)long long v168 = v135;
    *(_WORD *)&v168[8] = 2049;
    uint64_t v169 = v136;
    *(_WORD *)long long v170 = 2049;
    *(void *)&v170[2] = v137;
    *(_WORD *)&v170[10] = 2049;
    *(void *)&v170[12] = v138;
    *(_WORD *)&v170[20] = 2049;
    *(void *)&v170[22] = v139;
    *(_WORD *)&v170[30] = 2049;
    *(void *)&v170[32] = v140;
    __int16 v171 = 2049;
    uint64_t v172 = v142;
    __int16 v173 = 2049;
    uint64_t v174 = v141;
    __int16 v175 = 2049;
    uint64_t v176 = v143;
    uint64_t v110 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v110);
    if (v110 != __p) {
      free(v110);
    }
  }
  unint64_t v130 = 0xBFF0000000000000;
  double v68 = *(double *)&v151[36];
  if (*(double *)&v151[36] < 0.0) {
    goto LABEL_82;
  }
  if (*(double *)(a5 + 36) < 0.0)
  {
    double v68 = *((double *)sub_1000DBFA0() + 42);
    goto LABEL_82;
  }
  double v79 = v147;
  double v80 = *(double *)(a5 + 76);
  if (v79 - v80 < *((double *)sub_1000DBFA0() + 41)
    || (double v81 = *(double *)(a5 + 28),
        double v82 = *(double *)&v151[28],
        v83 = sub_1000DBFA0(),
        double v84 = vabdd_f64(v81, v82),
        double v68 = -1.0,
        v84 <= *((double *)v83 + 43)))
  {
    double v68 = *(double *)(a5 + 36);
LABEL_82:
    unint64_t v130 = *(void *)&v68;
    if (v68 > 0.0)
    {
      double v85 = *((double *)sub_1000DBFA0() + 40);
      double v86 = *(double *)&v151[36];
      double v68 = v86 * *((double *)sub_1000DBFA0() + 40) + v68 * (1.0 - v85);
      unint64_t v130 = *(void *)&v68;
    }
  }
  *(double *)(a11 + 16) = v68;
  int v87 = a7 + 1;
  sub_1000E2830((uint64_t)__p, a7 + 1);
  uint64_t v88 = *(void *)&__p[40];
  sub_1000D80C4(__p);
  if (v88)
  {
    int v89 = (*(uint64_t (**)(void *, double *))(*a7 + 16))(a7, &v147);
    sub_1000E2830((uint64_t)__p, v87);
    *(void *)(a11 + 96) = *(void *)(*(void *)(*(void *)&__p[8]
                                                  + (((unint64_t)(*(void *)&__p[40] + *(void *)&__p[32] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * (__p[40] + __p[32] - 1));
    *(unsigned char *)(a11 + 89) = 1;
    sub_1000D80C4(__p);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    int v90 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_1000E2830((uint64_t)__p, v87);
      int v91 = *(_DWORD *)&__p[40];
      sub_1000E2830((uint64_t)__src, v87);
      uint64_t v92 = *(void *)(*(void *)(*(void *)&__src[8]
                                  + (((unint64_t)(*(void *)&__src[40] + *(void *)&__src[32] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (__src[40] + __src[32] - 1));
      sub_1000E2830((uint64_t)&v126, v87);
      uint64_t v93 = "No";
      uint64_t v94 = *(void *)(*(void *)&v127[0][((unint64_t)(v129 + v128 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                      + 16 * (v129 + v128 - 1)
                      + 8);
      *(_DWORD *)std::string buf = 67240963;
      if (v89) {
        uint64_t v93 = "Yes";
      }
      *(_DWORD *)&uint8_t buf[4] = v91;
      *(_WORD *)unsigned int v159 = 2049;
      *(void *)&v159[2] = v92;
      *(_WORD *)&v159[10] = 2050;
      *(void *)&v159[12] = v94;
      __int16 v160 = 2082;
      *(void *)std::string::size_type v161 = v93;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis input elevation, size, %{public}d, relative altitude, %{private}.6f, timestamp, %{public}.3lf, elevation steady, %{public}s", buf, 0x26u);
      sub_1000D80C4(&v126);
      sub_1000D80C4(__src);
      sub_1000D80C4(__p);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46B0);
      }
      sub_1000E2830((uint64_t)__src, v87);
      int v111 = *(_DWORD *)&__src[40];
      sub_1000E2830((uint64_t)&v126, v87);
      uint64_t v112 = *(void *)(*(void *)&v127[0][((unint64_t)(v129 + v128 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                       + 16 * (v129 + v128 - 1));
      sub_1000E2830((uint64_t)buf, v87);
      long long v113 = "No";
      uint64_t v114 = *(void *)(*(void *)(*(void *)v159
                                   + (((unint64_t)(v162 + *(void *)&v161[2] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v162 + v161[2] - 1)
                       + 8);
      *(_DWORD *)uint64_t v163 = 67240963;
      if (v89) {
        long long v113 = "Yes";
      }
      *(_DWORD *)&v163[4] = v111;
      *(_WORD *)&v163[8] = 2049;
      *(void *)&v163[10] = v112;
      *(_WORD *)&v163[18] = 2050;
      *(void *)&v163[20] = v114;
      __int16 v164 = 2082;
      long long v165 = v113;
      long long v115 = (char *)_os_log_send_and_compose_impl();
      sub_1000D80C4(buf);
      sub_1000D80C4(&v126);
      sub_1000D80C4(__src);
      sub_1004BA5E4("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v115);
      if (v115 != __p) {
        free(v115);
      }
    }
  }
  if (sub_1008B86E4(a6))
  {
    if (sub_1012F223C(a6, &v147, a7, (double *)&v151[28], (double *)&v151[36], &v148)) {
      sub_1012F3530(a6, (uint64_t *)&v151[28], (double *)&v151[36]);
    }
  }
  else
  {
    *(double *)std::string __p = (double)v150;
    sub_1012F1760(a6, &v147, (double *)&v151[28], (double *)&v130, (uint64_t)a7, (double *)__p, (double *)&v149);
  }
  if (sub_1008B86E4(a6))
  {
    *(_OWORD *)(a11 + 24) = *(_OWORD *)&v151[28];
    *(unsigned char *)(a11 + 88) = 1;
  }
  char v95 = sub_1008B86E4(a6);
  unint64_t v96 = *(void *)&v151[36];
  if (*(double *)&v151[36] <= 0.0) {
    char v97 = 1;
  }
  else {
    char v97 = v95;
  }
  if ((v97 & 1) == 0)
  {
    unint64_t v96 = v130;
    *(void *)&v151[36] = v130;
  }
  *(void *)(a11 + 128) = *(void *)&v151[28];
  *(void *)(a11 + 136) = v96;
  BOOL v98 = sub_1012F1E20((double *)&v151[28], (double *)&v151[36]);
  char v99 = *(double *)&v151[36] == -1.0 || v98;
  if ((v99 & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46B0);
    }
    uint64_t v100 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string __p = 134283777;
      *(void *)&__p[4] = *(void *)&v151[28];
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(void *)&__p[14] = *(void *)&v151[36];
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_FAULT, "WifiCalc, zaxis, reported invalid alt, %{private}.2f, unc, %{private}.2f", __p, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46B0);
      }
      *(_DWORD *)__src = 134283777;
      *(void *)&__src[4] = *(void *)&v151[28];
      *(_WORD *)&__src[12] = 2049;
      *(void *)&__src[14] = *(void *)&v151[36];
      v116 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v116);
      if (v116 != __p) {
        free(v116);
      }
    }
  }
  int v69 = v157;
  int v70 = v156;
  unint64_t v71 = v155;
  int v72 = *(_DWORD *)(a11 + 152);
  long long v101 = v153;
  long long v74 = a9;
  a9[6] = v152;
  a9[7] = v101;
  a9[8] = *(_OWORD *)v154;
  *(_OWORD *)((char *)a9 + 140) = *(_OWORD *)&v154[12];
  long long v102 = *(_OWORD *)&v151[48];
  a9[2] = *(_OWORD *)&v151[32];
  a9[3] = v102;
  long long v103 = *(_OWORD *)&v151[80];
  a9[4] = *(_OWORD *)&v151[64];
  a9[5] = v103;
  long long v77 = *(_OWORD *)v151;
  long long v78 = *(_OWORD *)&v151[16];
LABEL_113:
  *long long v74 = v77;
  v74[1] = v78;
  *((_DWORD *)v74 + 39) = v69;
  *((_DWORD *)v74 + 40) = v70;
  *((void *)v74 + 21) = v71;
  *((_DWORD *)v74 + 44) = v72;
  *((unsigned char *)v74 + 180) = 0;
  *((_WORD *)v74 + 91) = 0;
}

void sub_100944950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

NSDictionary *sub_100944A24(uint64_t a1)
{
  v3[0] = @"aps";
  v4[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  v3[1] = @"alsAps";
  v4[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 60)];
  v3[2] = @"tileAps";
  v4[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
  v3[3] = @"percentAlsAps";
  v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 68)];
  v3[4] = @"percentTileAps";
  v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  v3[5] = @"age";
  _DWORD v4[5] = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v3[6] = @"pass";
  v4[6] = +[NSString stringWithUTF8String:*(void *)(a1 + 40)];
  v3[7] = @"isWifiFixWithAssociatedAp";
  v4[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 48) + 180)];
  v3[8] = @"apsInScanGroup";
  v4[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 76)];
  v3[9] = @"apsWithLocationInScanGroup";
  v4[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
  v3[10] = @"apsWithoutLocationInScanGroup";
  v4[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  v3[11] = @"percentApsWithLocationInScanGroup";
  v4[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
  v3[12] = @"percentApsWithoutLocationInScanGroup";
  v4[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  v3[13] = @"percentApsInScanGroupUsedInLocation";
  v4[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  v3[14] = @"percentApsWithLocationUsedInLocation";
  v4[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 100)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:15];
}

uint64_t sub_100944C48(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100944C50(uint64_t a1)
{
  double v4 = (void **)(a1 + 184);
  sub_1000A7B4C(&v4);
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  return a1;
}

NSDictionary *sub_100944C9C(uint64_t a1)
{
  v4[0] = @"groupResult";
  uint64_t v2 = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v4[1] = @"numInGroup";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

NSDictionary *sub_100944D44(uint64_t a1)
{
  v3[0] = @"numAssociated";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v3[1] = @"numUnassociated";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v3[2] = @"numWifiFixesWithAssociatedAp";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v3[3] = @"wsbPassType";
  v4[3] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

void sub_100944E28(uint64_t a1, uint64_t a2)
{
  int v3 = 2 * *(_DWORD *)(a2 + 156) + 63;
  *(_DWORD *)(a2 + 84) = v3;
  if (*(double *)(a1 + 3348) >= 0.0 && *(double *)(a2 + 20) >= 0.0)
  {
    uint64_t v4 = a1 + 3328;
    sub_101171D90((uint64_t)v7);
    sub_1000F1268(v7, v4, a2);
    BOOL v6 = v5 <= 35000.0 && *(_DWORD *)(a2 + 156) == 1;
    int v3 = *(_DWORD *)(a2 + 84);
    if (v6) {
      ++v3;
    }
  }
  if (v3 >= 80) {
    int v3 = 80;
  }
  *(_DWORD *)(a2 + 84) = v3;
}

void *sub_100944EC4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (uint64_t i = (void *)result[2]; i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[2];
    uint64_t result = sub_1000E34E4(a2, &v4, &v4);
  }
  return result;
}

void sub_100944F24(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100944F38(uint64_t a1)
{
  v3[0] = @"fixaps";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 188)];
  v3[1] = @"trigger";
  v4[1] = +[NSString stringWithUTF8String:*(void *)(a1 + 216)];
  v3[2] = @"outliers";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 224)];
  v3[3] = @"pct";
  v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 228)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

NSDictionary *sub_10094501C(uint64_t a1)
{
  v4[0] = @"wifi";
  v3[0] = @"provider";
  v3[1] = @"flow";
  uint64_t v1 = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v3[2] = @"island";
  v4[1] = v1;
  void v4[2] = @"null";
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_1009450C8(uint64_t a1)
{
  v4[0] = @"wifi";
  v3[0] = @"provider";
  v3[1] = @"flow";
  uint64_t v1 = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v3[2] = @"island";
  v4[1] = v1;
  void v4[2] = @"sentinel";
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_100945174(uint64_t a1)
{
  v3[0] = @"distance";
  v4[0] = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v3[1] = @"agebin";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 248)];
  v3[2] = @"motion";
  void v4[2] = +[NSString stringWithUTF8String:*(void *)(a1 + 40)];
  void v3[3] = @"uncertainty";
  void v4[3] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  void v4[4] = @"valid";
  void v3[4] = @"truth";
  v3[5] = @"altitude";
  _DWORD v4[5] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 56) + 28)];
  v3[6] = @"verticalAccuracy";
  v4[6] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 56) + 36)];
  v3[7] = @"horizontalAccuracy";
  v4[7] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 56) + 20)];
  v3[8] = @"referenceLocationType";
  v4[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 348)];
  v3[9] = @"numberOfApsUsedInHorizontalCalculation";
  v4[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 408)];
  v3[10] = @"numberOfApsUsedInVerticalCalculation";
  v4[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 412)];
  v3[11] = @"isWifiFixWithAssociatedAp";
  v4[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 244)];
  v3[12] = @"visibilityIntersectionOverrideState";
  v4[12] = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 246)];
  v3[13] = @"numberOfAlsApsUsedInHorizontalCalculation";
  v4[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 416)];
  v3[14] = @"numberOfTileApsUsedInHorizontalCalculation";
  v4[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 420)];
  void v3[15] = @"percentAlsAps";
  void v4[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 424)];
  v3[16] = @"percentTileAps";
  v4[16] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 428)];
  v3[17] = @"numberOfApsWithValidCentroids";
  v4[17] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 432)];
  v3[18] = @"numberOfApsWithNoCentroidInformation";
  v4[18] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 436)];
  v3[19] = @"numberOfApsInDatabasesButNoValidCentroid";
  v4[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 440)];
  v3[20] = @"numberOfApsWithoutValidCentroids";
  v4[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 444)];
  v3[21] = @"numberOfApsTotal";
  v4[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 448)];
  v3[22] = @"percentApsWithValidCentroids";
  v4[22] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 452)];
  v3[23] = @"percentApsWithoutValidCentroids";
  v4[23] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 456)];
  v3[24] = @"percentApsWithNoCentroidInformation";
  v4[24] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 460)];
  v3[25] = @"percentApsInDatabasesButNoValidCentroid";
  v4[25] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 464)];
  v3[26] = @"percentApsUsedInHorizontalCalculation";
  v4[26] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 468)];
  v3[27] = @"percentApsWithValidCentroidsUsedInHorizontalCalculation";
  v4[27] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 472)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:28];
}

NSDictionary *sub_100945500(uint64_t a1)
{
  CFStringRef v2 = @"truth";
  int v3 = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

std::string *sub_100945584(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    std::string::assign(a1, a2);
  }
  else
  {
    sub_100134750(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

BOOL sub_1009455CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 6172);
  int v5 = sub_1006D30F0((_DWORD *)(a1 + 5968)) || *v4 != 0;
  float v6 = *(float *)(a1 + 6416);
  int v7 = v4[248];

  return sub_100945694(a2, v7, v5, v6);
}

uint64_t sub_100945640(uint64_t a1)
{
  CFStringRef v2 = *(std::__shared_weak_count **)(a1 + 1000);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1000F5BB0(a1 + 32, *(void **)(a1 + 40));
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

BOOL sub_100945694(uint64_t a1, int a2, int a3, float a4)
{
  double v4 = *(double *)(a1 + 20);
  if (v4 < 0.0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    int v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is insufficient as it is invalid", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1)
      {
LABEL_8:
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::ComputedLocation &, float, BOOL, BOOL)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return 0;
      }
LABEL_81:
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
      goto LABEL_8;
    }
    return result;
  }
  if (a2)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    long long v8 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is sufficient as it is on watch", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1) {
      goto LABEL_71;
    }
    goto LABEL_84;
  }
  double v9 = a4;
  if (v4 > a4)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    long long v10 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134283521;
      *(double *)uint64_t v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is insufficient as it has higher hacc than desired %{private}.1lf", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1) {
        goto LABEL_8;
      }
      goto LABEL_81;
    }
    return result;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 156);
  if (!*(unsigned char *)(a1 + 180))
  {
    if (v12 <= 3)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      int v17 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)std::string buf = 67174913;
        LODWORD(v25[0]) = v18;
        WORD2(v25[0]) = 1025;
        *(_DWORD *)((char *)v25 + 6) = 4;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is insufficient as it used %{private}d APs, less than threshold %{private}d", buf, 0xEu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 == -1) {
          goto LABEL_8;
        }
        goto LABEL_81;
      }
      return result;
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    long long v20 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is sufficient", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1)
    {
LABEL_71:
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::ComputedLocation &, float, BOOL, BOOL)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 1;
    }
LABEL_84:
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
    goto LABEL_71;
  }
  if (v12 != 1)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    __int16 v14 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      int v15 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)std::string buf = 67174657;
      LODWORD(v25[0]) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "expect 1 AP for wifi fix with associated AP, got %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4690);
      }
      long long v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::ComputedLocation &, float, BOOL, BOOL)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  if (a3)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    __int16 v16 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient as it is in emergency mode", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1) {
        goto LABEL_8;
      }
      goto LABEL_81;
    }
    return result;
  }
  if (*((unsigned char *)sub_1014122A8() + 92))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
    uint64_t v19 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, mark wifi fix with associated AP as sufficient so we can skip scan by settings", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1) {
      goto LABEL_71;
    }
    goto LABEL_84;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  long long v21 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient so we do not skip scan by settings", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1) {
      goto LABEL_8;
    }
    goto LABEL_81;
  }
  return result;
}

uint64_t sub_100946030(uint64_t a1)
{
  if (*(char *)(a1 + 6495) < 0) {
    operator delete(*(void **)(a1 + 6472));
  }
  sub_1000D7DCC(a1 + 3016);
  sub_1000D7C60(a1 + 808);
  sub_1000D7B80(a1);
  return a1;
}

void sub_100946080(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1009460B0(uint64_t a1)
{
  if (*(char *)(a1 + 1535) < 0) {
    operator delete(*(void **)(a1 + 1512));
  }
  if (*(char *)(a1 + 1495) < 0) {
    operator delete(*(void **)(a1 + 1472));
  }
  if (*(char *)(a1 + 1471) < 0) {
    operator delete(*(void **)(a1 + 1448));
  }
  if (*(char *)(a1 + 1447) < 0) {
    operator delete(*(void **)(a1 + 1424));
  }
  if (*(char *)(a1 + 1423) < 0) {
    operator delete(*(void **)(a1 + 1400));
  }
  CFStringRef v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(void *)(a1 + 680) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*(void **)(a1 + 648));
  }
  uint64_t v3 = *(void *)(a1 + 640);
  *(void *)(a1 + 640) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = *(std::__shared_weak_count **)(a1 + 632);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_100946180(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_OWORD *sub_1009461B0(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v5 = (void **)sub_1001070AC((uint64_t)a1, &v9, a2);
  float v6 = *v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    float v6 = operator new(0x98uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)((char *)v6 + 104) = *(_OWORD *)(a3 + 72);
    *(_OWORD *)((char *)v6 + 120) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    sub_1000EDF90(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

NSDictionary *sub_100946274(unsigned int *a1)
{
  v3[0] = @"numScannedAps";
  v4[0] = +[NSNumber numberWithInt:a1[8]];
  v3[1] = @"numScannedApsWithKnownLocations";
  v4[1] = +[NSNumber numberWithInt:a1[9]];
  v3[2] = @"percentageOfScannedApsWithKnownLocationsToAllScannedAps";
  void v4[2] = +[NSNumber numberWithInt:a1[10]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

void *sub_100946338(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10050F7C8(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = 184 * a2;
    unint64_t v6 = v4 + 184 * a2;
    do
    {
      sub_1000DBC38(v4);
      uint64_t v4 = v7 + 184;
      v5 -= 184;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_1009463A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1009463BC(uint64_t a1, void *a2, void *a3, _OWORD *a4)
{
  unint64_t v9 = sub_1000D8908((uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    __int16 v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_100B39178((void *)v15 + 2, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          int v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  int v15 = (char *)operator new(0x78uLL);
  *(void *)int v15 = 0;
  *((void *)v15 + 1) = v10;
  *((void *)v15 + 2) = *a3;
  long long v17 = a4[3];
  *(_OWORD *)(v15 + 56) = a4[2];
  *(_OWORD *)(v15 + 72) = v17;
  long long v18 = a4[5];
  *(_OWORD *)(v15 + 88) = a4[4];
  *(_OWORD *)(v15 + 104) = v18;
  long long v19 = a4[1];
  *(_OWORD *)(v15 + 24) = *a4;
  *(_OWORD *)(v15 + 40) = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100100330(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  long long v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)int v15 = *v27;
LABEL_38:
    *long long v27 = v15;
    goto LABEL_39;
  }
  *(void *)int v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    long long v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_10094660C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100946620(void ***a1)
{
  uint64_t v1 = *a1;
  CFStringRef v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1008B5A70(v4 - 112);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100946744()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1009467FC(_Unwind_Exception *a1)
{
}

void sub_100946814()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *int v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1009468BC(_Unwind_Exception *a1)
{
}

void sub_1009468D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100946954()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1009469E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1009469FC()
{
  BOOL v16 = 0;
  sub_1000C7F88(&buf);
  int v0 = sub_1000D2988(buf, "wifiTilesEnabled", &v16);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46D0);
    }
    uint64_t v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      if (v16) {
        CFStringRef v2 = "true";
      }
      else {
        CFStringRef v2 = "false";
      }
      LODWORD(buf) = 136380675;
      *(void *)((char *)&buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "CLWifiTilesManagerSettings, #Warning defaults write wifiTilesEnabled to %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46D0);
      }
      if (v16) {
        uint8x8_t v12 = "true";
      }
      else {
        uint8x8_t v12 = "false";
      }
      *(_DWORD *)long long v17 = 136380675;
      *(void *)&v17[4] = v12;
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiTilesManagerSettings::isEnabledForDevice()", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    uint64_t v3 = (uint64_t *)&v16;
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022D46D0);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100103240();
      sub_10073ABEC(&buf);
      uint64_t v5 = v22 >= 0 ? &buf : (long long *)buf;
      *(_DWORD *)long long v17 = 136446210;
      *(void *)&v17[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWifiTilesManagerSettings, system version: %{public}s", v17, 0xCu);
      if (v22 < 0) {
        operator delete((void *)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022D46D0);
      }
      sub_100103240();
      sub_10073ABEC(v17);
      if (v18 >= 0) {
        __int16 v14 = v17;
      }
      else {
        __int16 v14 = *(unsigned char **)v17;
      }
      int v19 = 136446210;
      float v20 = v14;
      int v15 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(*(void **)v17);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiTilesManagerSettings::isEnabledForDevice()", "%s\n", v15);
      if (v15 != (char *)&buf) {
        free(v15);
      }
    }
    sub_100103240();
    if (sub_10016CCBC())
    {
      uint64_t v3 = sub_10141303C() + 2;
    }
    else
    {
      sub_100103240();
      if (sub_10010145C())
      {
        uint64_t v3 = (uint64_t *)((char *)sub_10141303C() + 19);
      }
      else
      {
        sub_100103240();
        int v7 = sub_1001B7C64();
        sub_100103240();
        if (v7)
        {
          int v8 = sub_10015F708();
          unint64_t v9 = sub_10141303C();
          if (v8) {
            uint64_t v3 = (uint64_t *)((char *)v9 + 17);
          }
          else {
            uint64_t v3 = (uint64_t *)((char *)v9 + 18);
          }
        }
        else if (sub_10073D06C())
        {
          uint64_t v3 = (uint64_t *)((char *)sub_10141303C() + 21);
        }
        else
        {
          sub_100103240();
          int v10 = sub_10073D198();
          unint64_t v11 = sub_10141303C();
          if (v10) {
            uint64_t v3 = (uint64_t *)((char *)v11 + 22);
          }
          else {
            uint64_t v3 = v11 + 3;
          }
        }
      }
    }
  }
  return *(unsigned __int8 *)v3;
}

void sub_100946E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100946E74(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100946EA4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100946F5C(_Unwind_Exception *a1)
{
}

void sub_100946F74()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *int v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10094701C(_Unwind_Exception *a1)
{
}

void sub_100947034(uint64_t a1@<X8>)
{
  sub_100134750(__p, "");
  *(void *)a1 = 0x200000000;
  *(_WORD *)(a1 + 8) = 0;
  CFStringRef v2 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_1000DC48C(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v5);
    *(void *)(a1 + 40) = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)CFStringRef v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = 0;
  }
}

void sub_1009470BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009470D8(uint64_t a1)
{
  sub_100947034((uint64_t)v3);
  sub_100947148(a1, (uint64_t)v3);
  if (v5 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10094712C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100947148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005F54CC(a1, a2);
  sub_101001198(v4 + 136, a2);
  sub_10061B4A0(a1 + 272);
  if (sub_10014C3C0(a1))
  {
    if (sub_1005F7B0C(a1, "FenceHandOffDeviceId", (const char **)&off_1022D49E0, (const std::string::value_type **)&off_10241ED58, 0))sub_1009473E4(a1); {
    sub_1005F7B0C(a1, "GeoFence", (const char **)&off_1022D46F0, (const std::string::value_type **)off_10241ED68, 0);
    }
    if (sub_1005F93E4(a1, "Fences")) {
      sub_100947810(a1);
    }
    if (sub_100947D04()) {
      sub_100947E08(a1);
    }
    sub_1009487C0(a1);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  char v5 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Fence: No access to DB", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLFenceDatabase::CLFenceDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *, BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return a1;
}

void sub_1009473AC(_Unwind_Exception *a1)
{
  sub_100616554(v3);
  sub_100616554(v2);
  sub_1005F5850(v1);
  _Unwind_Resume(a1);
}

void sub_1009473E4(uint64_t a1)
{
  sub_10010F274((uint64_t)&v7);
  uint64_t v2 = sub_100132EFC(&v8, (uint64_t)"INSERT INTO ", 12);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"FenceHandOffDeviceId", 20);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)"(", 1);
  char v5 = sub_100132EFC(v4, (uint64_t)"DeviceIdIndex", 13);
  sub_100132EFC(v5, (uint64_t)") VALUES (?)", 12);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1009477A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100947810(uint64_t a1)
{
  sub_10002B640(a1);
  sub_1005F705C(a1, 0);
  sub_10010F274((uint64_t)&v7);
  sub_10095678C(a1, (uint64_t)v6);
  sub_100956B08(v2, (uint64_t)v6);
  if (v5 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100947C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, char a19)
{
  if (*(char *)(v20 - 57) < 0) {
    operator delete(*(void **)(v20 - 80));
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000DB264((uint64_t)&a16, a17);
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100947D04()
{
  sub_100134750(__p, "");
  uint64_t v4 = 0x200000000;
  __int16 v5 = 0;
  if (SHIBYTE(v3) < 0)
  {
    sub_1000DC48C(&v6, __p[0], (unint64_t)__p[1]);
    uint64_t v8 = 0;
    if (SHIBYTE(v3) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)__p;
    uint64_t v7 = v3;
    uint64_t v8 = 0;
  }
  sub_1005F54CC(__p, &v4);
  uint64_t v0 = sub_1005F93E4(__p, "GeoFences");
  sub_1005F5850(__p);
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  return v0;
}

void sub_100947DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100947E08(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 136315138;
    buf_4 = "performMigrationToSplitDB";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceDatabase::performMigrationToSplitDB()", "%s\n", v3);
    if (v3 != (char *)&buf) {
      free(v3);
    }
  }
  sub_100958A78(a1);
}

void sub_100948734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62)
{
  a62 = &a22;
  sub_10008DF5C((void ***)&a62);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1009487C0(uint64_t a1)
{
  sub_10010F274((uint64_t)&v9);
  uint64_t v2 = sub_100132EFC(&v10, (uint64_t)"DELETE FROM ", 12);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)" WHERE length(", 14);
  __int16 v5 = sub_100132EFC(v4, (uint64_t)"Name", 4);
  sub_100132EFC(v5, (uint64_t)") > 512", 7);
  std::stringbuf::str();
  if (v8 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100948A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100948A4C(uint64_t a1)
{
  sub_10010F274((uint64_t)&v10);
  uint64_t v2 = sub_100132EFC(&v11, (uint64_t)"DELETE FROM ", 12);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)" WHERE ", 7);
  __int16 v5 = sub_100132EFC(v4, (uint64_t)"BundleId", 8);
  long long v6 = sub_100132EFC(v5, (uint64_t)"=?", 2);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)" AND ", 5);
  char v8 = sub_100132EFC(v7, (uint64_t)"DeviceIdIndex", 13);
  sub_100132EFC(v8, (uint64_t)"=?", 2);
  +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/LocationBundles/LocationFenceSync.bundle" anchorType:112];
  std::stringbuf::str();
  if (v13 >= 0) {
    uint64_t v9 = buf;
  }
  else {
    uint64_t v9 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v9);
}

void sub_100949004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100949054(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  long long v6 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    sub_100C8C864(a2);
    uint64_t v7 = SBYTE3(v54) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)int buf = 136380931;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v47 = 1026;
    LODWORD(v48) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: addFence, %{private}s, key, %{public}d", buf, 0x12u);
    if (SBYTE3(v54) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    sub_100C8C864(a2);
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    if (v49 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)", "%s\n", v44);
    if (v44 != (char *)&__p) {
      free(v44);
    }
  }
  if (a3 == -1)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    char v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Fence: attempting to add fence to db without a key", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D49C0);
      }
      *(_WORD *)int buf = 0;
      uint64_t v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &, int, int &)", "%s\n", v45);
      if (v45 != (char *)&__p) {
        free(v45);
      }
    }
  }
  else
  {
    uint64_t v9 = *(void **)(a2 + 216);
    if (!v9 || sub_100949E40(a1, *(void **)(a2 + 216)) != -1)
    {
      sub_10010F274((uint64_t)buf);
      __int16 v14 = sub_100132EFC((uint64_t *)((char *)&v48 + 2), (uint64_t)"INSERT INTO ", 12);
      int v15 = sub_100132EFC(v14, (uint64_t)"GeoFence", 8);
      BOOL v16 = sub_100132EFC(v15, (uint64_t)" (", 2);
      long long v17 = sub_100132EFC(v16, (uint64_t)"BundleId", 8);
      char v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
      uint64_t v19 = sub_100132EFC(v18, (uint64_t)"Name", 4);
      uint64_t v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
      float v21 = sub_100132EFC(v20, (uint64_t)"Timestamp", 9);
      char v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
      unint64_t v23 = sub_100132EFC(v22, (uint64_t)"Distance", 8);
      unint64_t v24 = sub_100132EFC(v23, (uint64_t)", ", 2);
      size_t v25 = sub_100132EFC(v24, (uint64_t)"DesiredAccuracy", 15);
      uint64_t v26 = sub_100132EFC(v25, (uint64_t)", ", 2);
      long long v27 = sub_100132EFC(v26, (uint64_t)"SetupComplete", 13);
      unint64_t v28 = sub_100132EFC(v27, (uint64_t)", ", 2);
      long long v29 = sub_100132EFC(v28, (uint64_t)"MonitorFlags", 12);
      uint64_t v30 = sub_100132EFC(v29, (uint64_t)", ", 2);
      int v31 = sub_100132EFC(v30, (uint64_t)"OnBehalfBundleId", 16);
      int v32 = sub_100132EFC(v31, (uint64_t)", ", 2);
      int v33 = sub_100132EFC(v32, (uint64_t)"ReferenceFrame", 14);
      long long v34 = sub_100132EFC(v33, (uint64_t)", ", 2);
      long long v35 = sub_100132EFC(v34, (uint64_t)"FenceForeignKey", 15);
      uint64_t v36 = sub_100132EFC(v35, (uint64_t)", ", 2);
      uint64_t v37 = sub_100132EFC(v36, (uint64_t)"HandoffTag", 10);
      uint64_t v38 = sub_100132EFC(v37, (uint64_t)", ", 2);
      uint64_t v39 = sub_100132EFC(v38, (uint64_t)"HandoffFenceEnablementStatus", 28);
      uint64_t v40 = sub_100132EFC(v39, (uint64_t)", ", 2);
      int v41 = sub_100132EFC(v40, (uint64_t)"DeviceIdIndex", 13);
      sub_100132EFC(v41, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 48);
      std::stringbuf::str();
      if (SBYTE3(v54) >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      sub_10014D518(a1, (uint64_t)p_p);
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    uint64_t v10 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      id v11 = [[[v9 UUIDString] UTF8String];
      std::string __p = (void *)68289282;
      __int16 v51 = 2082;
      uint64_t v52 = "";
      __int16 v53 = 2082;
      id v54 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: unable to get the index for deviceId from deviceId table\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D49C0);
      }
    }
    uint8x8_t v12 = qword_1024193C8;
    if (os_signpost_enabled((os_log_t)qword_1024193C8))
    {
      id v13 = [[objc_msgSend(v9, "UUIDString") UTF8String];
      std::string __p = (void *)68289282;
      __int16 v51 = 2082;
      uint64_t v52 = "";
      __int16 v53 = 2082;
      id v54 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: unable to get the index for deviceId from deviceId table", "{\"msg%{public}.0s\":\"Fence: unable to get the index for deviceId from deviceId table\", \"deviceId\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  return 0;
}

void sub_100949DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100949E40(uint64_t a1, void *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    BOOL v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: insertInHandOffDeviceIdTableIfNeeded\"}", buf, 0x12u);
  }
  uint64_t v5 = sub_10094B9EC(a1, a2);
  if (v5 == -1)
  {
    v17[0] = 0;
    v17[1] = 0;
    [a2 getUUIDBytes:v17];
    sub_10010F274((uint64_t)buf);
    long long v6 = sub_100132EFC((const char **)((char *)&v16 + 6), (uint64_t)"INSERT INTO ", 12);
    uint64_t v7 = sub_100132EFC(v6, (uint64_t)"FenceHandOffDeviceId", 20);
    char v8 = sub_100132EFC(v7, (uint64_t)" (", 2);
    uint64_t v9 = sub_100132EFC(v8, (uint64_t)"DeviceId", 8);
    sub_100132EFC(v9, (uint64_t)") VALUES (?)", 12);
    std::stringbuf::str();
    if (v13 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  return v5;
}

void sub_10094A2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10094A304(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = (uint64_t *)*a2;
    }
    if (*((char *)a2 + 47) >= 0) {
      long long v6 = a2 + 3;
    }
    else {
      long long v6 = (uint64_t *)a2[3];
    }
    *(_DWORD *)int buf = 136446467;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v23 = 2081;
    unint64_t v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: Removing fence %{public}s/%{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    if (*((char *)a2 + 23) >= 0) {
      BOOL v16 = a2;
    }
    else {
      BOOL v16 = (uint64_t *)*a2;
    }
    if (*((char *)a2 + 47) >= 0) {
      long long v17 = a2 + 3;
    }
    else {
      long long v17 = (uint64_t *)a2[3];
    }
    v19[0] = 136446467;
    *(void *)&v19[1] = v16;
    __int16 v20 = 2081;
    float v21 = v17;
    char v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &, int &)", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  sub_10010F274((uint64_t)v19);
  uint64_t v7 = sub_100132EFC((uint64_t **)((char *)&v21 + 2), (uint64_t)"DELETE FROM ", 12);
  char v8 = sub_100132EFC(v7, (uint64_t)"GeoFence", 8);
  uint64_t v9 = sub_100132EFC(v8, (uint64_t)" WHERE ", 7);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)"BundleId", 8);
  id v11 = sub_100132EFC(v10, (uint64_t)"=? AND ", 7);
  uint8x8_t v12 = sub_100132EFC(v11, (uint64_t)"Name", 4);
  char v13 = sub_100132EFC(v12, (uint64_t)"=? AND ", 7);
  __int16 v14 = sub_100132EFC(v13, (uint64_t)"OnBehalfBundleId", 16);
  sub_100132EFC(v14, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v25 >= 0) {
    __int16 v15 = buf;
  }
  else {
    __int16 v15 = *(unsigned char **)buf;
  }
  sub_10014D518(a1, (uint64_t)v15);
}

void sub_10094AE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10094AE88(uint64_t a1)
{
  sub_10010F274((uint64_t)&v9);
  uint64_t v2 = sub_100132EFC(&v10, (uint64_t)"DELETE FROM ", 12);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)" WHERE ", 7);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"BundleId", 8);
  long long v6 = sub_100132EFC(v5, (uint64_t)"=? OR ", 6);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)"OnBehalfBundleId", 16);
  sub_100132EFC(v7, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v12 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_10094B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10094B3B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (sub_100604A68(a1))
    {
      sub_10010F274((uint64_t)buf);
      uint64_t v3 = sub_100132EFC((const char **)((char *)&v16 + 6), (uint64_t)"DELETE FROM ", 12);
      uint64_t v4 = sub_100132EFC(v3, (uint64_t)"FenceHandOffDeviceId", 20);
      uint64_t v5 = sub_100132EFC(v4, (uint64_t)" WHERE ", 7);
      long long v6 = sub_100132EFC(v5, (uint64_t)"DeviceId", 8);
      sub_100132EFC(v6, (uint64_t)"=?", 2);
      std::stringbuf::str();
      if (v13 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      sub_10014D518(a1, (uint64_t)p_p);
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    uint64_t v9 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: Sqlite Foreign Key feature is turned off\"}", buf, 0x12u);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D49C0);
      }
    }
    uint64_t v10 = qword_1024193C8;
    if (os_signpost_enabled((os_log_t)qword_1024193C8))
    {
      *(_DWORD *)int buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: Sqlite Foreign Key feature is turned off", "{\"msg%{public}.0s\":\"Fence: Sqlite Foreign Key feature is turned off\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    char v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: Null DeviceId\"}", buf, 0x12u);
    }
  }
  return 0;
}

void sub_10094B974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10094B9EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10010F274((uint64_t)buf);
    v15[0] = 0;
    v15[1] = 0;
    [a2 getUUIDBytes:v15];
    uint64_t v4 = sub_100132EFC((const char **)((char *)&v18 + 6), (uint64_t)"SELECT ", 7);
    uint64_t v5 = sub_100132EFC(v4, (uint64_t)"DeviceIdIndex", 13);
    long long v6 = sub_100132EFC(v5, (uint64_t)" FROM ", 6);
    uint64_t v7 = sub_100132EFC(v6, (uint64_t)"FenceHandOffDeviceId", 20);
    char v8 = sub_100132EFC(v7, (uint64_t)" WHERE ", 7);
    uint64_t v9 = sub_100132EFC(v8, (uint64_t)"DeviceId", 8);
    sub_100132EFC(v9, (uint64_t)"=?;", 3);
    std::stringbuf::str();
    if (v14 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  id v11 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: deviceId is null\"}", buf, 0x12u);
  }
  return -1;
}

void sub_10094BF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_10094BFA0(uint64_t a1)
{
  sub_10010F274((uint64_t)&v40);
  uint64_t v2 = sub_100132EFC(&v41, (uint64_t)"SELECT ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"BundleId", 8);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)", ", 2);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"Name", 4);
  long long v6 = sub_100132EFC(v5, (uint64_t)", ", 2);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)"Distance", 8);
  char v8 = sub_100132EFC(v7, (uint64_t)", ", 2);
  uint64_t v9 = sub_100132EFC(v8, (uint64_t)"DesiredAccuracy", 15);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
  id v11 = sub_100132EFC(v10, (uint64_t)"SetupComplete", 13);
  char v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
  char v13 = sub_100132EFC(v12, (uint64_t)"Timestamp", 9);
  char v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  __int16 v15 = sub_100132EFC(v14, (uint64_t)"MonitorFlags", 12);
  BOOL v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
  __int16 v17 = sub_100132EFC(v16, (uint64_t)"OnBehalfBundleId", 16);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
  uint64_t v19 = sub_100132EFC(v18, (uint64_t)"ReferenceFrame", 14);
  __int16 v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
  float v21 = sub_100132EFC(v20, (uint64_t)"FenceForeignKey", 15);
  char v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
  __int16 v23 = sub_100132EFC(v22, (uint64_t)"HandoffTag", 10);
  unint64_t v24 = sub_100132EFC(v23, (uint64_t)", ", 2);
  char v25 = sub_100132EFC(v24, (uint64_t)"FenceHandOffDeviceId", 20);
  uint64_t v26 = sub_100132EFC(v25, (uint64_t)".", 1);
  long long v27 = sub_100132EFC(v26, (uint64_t)"DeviceId", 8);
  unint64_t v28 = sub_100132EFC(v27, (uint64_t)" FROM ", 6);
  long long v29 = sub_100132EFC(v28, (uint64_t)"GeoFence", 8);
  uint64_t v30 = sub_100132EFC(v29, (uint64_t)" INNER JOIN ", 12);
  int v31 = sub_100132EFC(v30, (uint64_t)"FenceHandOffDeviceId", 20);
  int v32 = sub_100132EFC(v31, (uint64_t)" ON ", 4);
  int v33 = sub_100132EFC(v32, (uint64_t)"GeoFence", 8);
  long long v34 = sub_100132EFC(v33, (uint64_t)".", 1);
  long long v35 = sub_100132EFC(v34, (uint64_t)"DeviceIdIndex", 13);
  uint64_t v36 = sub_100132EFC(v35, (uint64_t)"=", 1);
  uint64_t v37 = sub_100132EFC(v36, (uint64_t)"FenceHandOffDeviceId", 20);
  uint64_t v38 = sub_100132EFC(v37, (uint64_t)".", 1);
  sub_100132EFC(v38, (uint64_t)"DeviceIdIndex", 13);
  std::stringbuf::str();
  if (v43 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_10094D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_101A129A8((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void sub_10094D180(uint64_t a1)
{
  *((unsigned char *)&v136.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v136, "SELECT ");
  uint64_t v2 = std::string::append(&v136, "BundleId");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v135 = 2;
  strcpy(__s, ", ");
  uint64_t v4 = std::string::append(&v137, __s, 2uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  long long v6 = std::string::append(&v138, "Name");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v133 = 2;
  strcpy(v132, ", ");
  char v8 = std::string::append(&v139, v132, 2uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v140.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v140, "Distance");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  char v131 = 2;
  strcpy(v130, ", ");
  char v12 = std::string::append(&v141, v130, 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v142.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  char v14 = std::string::append(&v142, "DesiredAccuracy");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  char v129 = 2;
  strcpy(v128, ", ");
  BOOL v16 = std::string::append(&v143, v128, 2uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v144, "SetupComplete");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v145.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  char v127 = 2;
  strcpy(v126, ", ");
  __int16 v20 = std::string::append(&v145, v126, 2uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v146.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  char v22 = std::string::append(&v146, "Timestamp");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  char v125 = 2;
  strcpy(v124, ", ");
  unint64_t v24 = std::string::append(&v147, v124, 2uLL);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v148.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = std::string::append(&v148, "MonitorFlags");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  char v123 = 2;
  strcpy(v122, ", ");
  unint64_t v28 = std::string::append(&v149, v122, 2uLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v150.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v150, "OnBehalfBundleId");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  char v121 = 2;
  strcpy(v120, ", ");
  int v32 = std::string::append(&v151, v120, 2uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  long long v34 = std::string::append(&v152, "ReferenceFrame");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v153.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  char v119 = 2;
  strcpy(v118, ", ");
  uint64_t v36 = std::string::append(&v153, v118, 2uLL);
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v38 = std::string::append(&v154, "FenceForeignKey");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  char v117 = 2;
  strcpy(v116, ", ");
  uint64_t v40 = std::string::append(&v155, v116, 2uLL);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v156.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  int v42 = std::string::append(&v156, "HandoffTag");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v157.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  char v115 = 2;
  strcpy(v114, ", ");
  uint64_t v44 = std::string::append(&v157, v114, 2uLL);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v158.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  long long v46 = std::string::append(&v158, "FenceHandOffDeviceId");
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v159.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  char v113 = 1;
  strcpy(v112, ".");
  uint64_t v48 = std::string::append(&v159, v112, 1uLL);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  uint64_t v50 = std::string::append(&v160, "DeviceId");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  char v111 = 6;
  strcpy(v110, " FROM ");
  uint64_t v52 = std::string::append(&v161, v110, 6uLL);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v162.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  uint64_t v54 = std::string::append(&v162, "GeoFence");
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  char v109 = 12;
  strcpy((char *)v108, " INNER JOIN ");
  uint64_t v56 = std::string::append(&v163, (const std::string::value_type *)v108, 0xCuLL);
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v164.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  uint64_t v58 = std::string::append(&v164, "FenceHandOffDeviceId");
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v165.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  char v107 = 4;
  strcpy(v106, " ON ");
  long long v60 = std::string::append(&v165, v106, 4uLL);
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  uint64_t v62 = std::string::append(&v166, "GeoFence");
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  char v105 = 1;
  strcpy(v104, ".");
  unint64_t v64 = std::string::append(&v167, v104, 1uLL);
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v168.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  unint64_t v66 = std::string::append(&v168, "DeviceIdIndex");
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  char v103 = 1;
  strcpy(v102, "=");
  double v68 = std::string::append(&v169, v102, 1uLL);
  long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  int v70 = std::string::append(&v170, "FenceHandOffDeviceId");
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v171.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  char v101 = 1;
  strcpy(v100, ".");
  int v72 = std::string::append(&v171, v100, 1uLL);
  long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v172.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  long long v74 = std::string::append(&v172, "DeviceIdIndex");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v173.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  char v99 = 7;
  strcpy(v98, " WHERE ");
  long long v76 = std::string::append(&v173, v98, 7uLL);
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  long long v78 = std::string::append(&v174, "BundleId");
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v179.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  char v97 = 7;
  strcpy(v96, "=? AND ");
  double v80 = std::string::append(&v179, v96, 7uLL);
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v180.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  double v82 = std::string::append(&v180, "Name");
  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  char v95 = 7;
  strcpy(v94, "=? AND ");
  double v84 = std::string::append(&v91, v94, 7uLL);
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  double v86 = std::string::append(&__str, "OnBehalfBundleId");
  long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v178.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  char v93 = 2;
  strcpy(v92, "=?");
  uint64_t v88 = std::string::append(&v178, v92, 2uLL);
  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  int64_t v176 = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  if (v93 < 0) {
    operator delete(*(void **)v92);
  }
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v95 < 0) {
    operator delete(*(void **)v94);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v180.__r_.__value_.__l.__data_);
  }
  if (v97 < 0) {
    operator delete(*(void **)v96);
  }
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v179.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  if (v99 < 0) {
    operator delete(*(void **)v98);
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v172.__r_.__value_.__l.__data_);
  }
  if (v101 < 0) {
    operator delete(*(void **)v100);
  }
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v170.__r_.__value_.__l.__data_);
  }
  if (v103 < 0) {
    operator delete(*(void **)v102);
  }
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v168.__r_.__value_.__l.__data_);
  }
  if (v105 < 0) {
    operator delete(*(void **)v104);
  }
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v167.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (v107 < 0) {
    operator delete(*(void **)v106);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  if (v109 < 0) {
    operator delete(v108[0]);
  }
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
  if (v111 < 0) {
    operator delete(*(void **)v110);
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  if (v113 < 0) {
    operator delete(*(void **)v112);
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (v115 < 0) {
    operator delete(*(void **)v114);
  }
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
  if (v117 < 0) {
    operator delete(*(void **)v116);
  }
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (v119 < 0) {
    operator delete(*(void **)v118);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (v121 < 0) {
    operator delete(*(void **)v120);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  if (v123 < 0) {
    operator delete(*(void **)v122);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if (v125 < 0) {
    operator delete(*(void **)v124);
  }
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
  if (v127 < 0) {
    operator delete(*(void **)v126);
  }
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v129 < 0) {
    operator delete(*(void **)v128);
  }
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  if (v131 < 0) {
    operator delete(*(void **)v130);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  if (v133 < 0) {
    operator delete(*(void **)v132);
  }
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  if (v135 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  if (v176 >= 0) {
    int v90 = __p;
  }
  else {
    int v90 = (void **)__p[0];
  }
  sub_10014D518(a1, (uint64_t)v90);
}

void sub_10094EC00(_Unwind_Exception *a1)
{
  sub_100488394((uint64_t)&STACK[0x830]);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  _Unwind_Resume(a1);
}

void sub_10094F284(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5 != *a3)
  {
    do
    {
      v5 -= 248;
      sub_10091F570((uint64_t)(a3 + 2), v5);
    }
    while (v5 != v6);
  }
  a3[1] = v6;
  sub_10010F274((uint64_t)&v48);
  long long v7 = sub_100132EFC(&v49, (uint64_t)"SELECT ", 7);
  char v8 = sub_100132EFC(v7, (uint64_t)"BundleId", 8);
  long long v9 = sub_100132EFC(v8, (uint64_t)", ", 2);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)"Name", 4);
  long long v11 = sub_100132EFC(v10, (uint64_t)", ", 2);
  char v12 = sub_100132EFC(v11, (uint64_t)"Distance", 8);
  long long v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
  char v14 = sub_100132EFC(v13, (uint64_t)"DesiredAccuracy", 15);
  long long v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
  BOOL v16 = sub_100132EFC(v15, (uint64_t)"SetupComplete", 13);
  long long v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)"Timestamp", 9);
  long long v19 = sub_100132EFC(v18, (uint64_t)", ", 2);
  __int16 v20 = sub_100132EFC(v19, (uint64_t)"MonitorFlags", 12);
  long long v21 = sub_100132EFC(v20, (uint64_t)", ", 2);
  char v22 = sub_100132EFC(v21, (uint64_t)"OnBehalfBundleId", 16);
  long long v23 = sub_100132EFC(v22, (uint64_t)", ", 2);
  unint64_t v24 = sub_100132EFC(v23, (uint64_t)"ReferenceFrame", 14);
  long long v25 = sub_100132EFC(v24, (uint64_t)", ", 2);
  uint64_t v26 = sub_100132EFC(v25, (uint64_t)"FenceForeignKey", 15);
  long long v27 = sub_100132EFC(v26, (uint64_t)", ", 2);
  unint64_t v28 = sub_100132EFC(v27, (uint64_t)"HandoffTag", 10);
  long long v29 = sub_100132EFC(v28, (uint64_t)", ", 2);
  uint64_t v30 = sub_100132EFC(v29, (uint64_t)"FenceHandOffDeviceId", 20);
  long long v31 = sub_100132EFC(v30, (uint64_t)".", 1);
  int v32 = sub_100132EFC(v31, (uint64_t)"DeviceId", 8);
  long long v33 = sub_100132EFC(v32, (uint64_t)" FROM ", 6);
  long long v34 = sub_100132EFC(v33, (uint64_t)"GeoFence", 8);
  long long v35 = sub_100132EFC(v34, (uint64_t)" INNER JOIN ", 12);
  uint64_t v36 = sub_100132EFC(v35, (uint64_t)"FenceHandOffDeviceId", 20);
  long long v37 = sub_100132EFC(v36, (uint64_t)" ON ", 4);
  uint64_t v38 = sub_100132EFC(v37, (uint64_t)"GeoFence", 8);
  long long v39 = sub_100132EFC(v38, (uint64_t)".", 1);
  uint64_t v40 = sub_100132EFC(v39, (uint64_t)"DeviceIdIndex", 13);
  long long v41 = sub_100132EFC(v40, (uint64_t)" = ", 3);
  int v42 = sub_100132EFC(v41, (uint64_t)"FenceHandOffDeviceId", 20);
  long long v43 = sub_100132EFC(v42, (uint64_t)".", 1);
  uint64_t v44 = sub_100132EFC(v43, (uint64_t)"DeviceIdIndex", 13);
  long long v45 = sub_100132EFC(v44, (uint64_t)" WHERE ", 7);
  long long v46 = sub_100132EFC(v45, (uint64_t)"BundleId", 8);
  sub_100132EFC(v46, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v51 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1009503A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_101A129A8((uint64_t)&a58);
  _Unwind_Resume(a1);
}

uint64_t sub_1009504D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = *(void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6 != *(void *)a3)
  {
    do
    {
      v6 -= 248;
      sub_10091F570(a3 + 16, v6);
    }
    while ((void *)v6 != v7);
  }
  *(void *)(a3 + 8) = v7;
  if (a2)
  {
    sub_10010F274((uint64_t)&v53);
    char v8 = sub_100132EFC(&v54, (uint64_t)"SELECT ", 7);
    long long v9 = sub_100132EFC(v8, (uint64_t)"BundleId", 8);
    uint64_t v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
    long long v11 = sub_100132EFC(v10, (uint64_t)"Name", 4);
    char v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
    long long v13 = sub_100132EFC(v12, (uint64_t)"Distance", 8);
    char v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
    long long v15 = sub_100132EFC(v14, (uint64_t)"DesiredAccuracy", 15);
    BOOL v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
    long long v17 = sub_100132EFC(v16, (uint64_t)"SetupComplete", 13);
    uint64_t v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
    long long v19 = sub_100132EFC(v18, (uint64_t)"Timestamp", 9);
    __int16 v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
    long long v21 = sub_100132EFC(v20, (uint64_t)"MonitorFlags", 12);
    char v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
    long long v23 = sub_100132EFC(v22, (uint64_t)"OnBehalfBundleId", 16);
    unint64_t v24 = sub_100132EFC(v23, (uint64_t)", ", 2);
    long long v25 = sub_100132EFC(v24, (uint64_t)"ReferenceFrame", 14);
    uint64_t v26 = sub_100132EFC(v25, (uint64_t)", ", 2);
    long long v27 = sub_100132EFC(v26, (uint64_t)"FenceForeignKey", 15);
    unint64_t v28 = sub_100132EFC(v27, (uint64_t)", ", 2);
    long long v29 = sub_100132EFC(v28, (uint64_t)"HandoffTag", 10);
    uint64_t v30 = sub_100132EFC(v29, (uint64_t)", ", 2);
    long long v31 = sub_100132EFC(v30, (uint64_t)"FenceHandOffDeviceId", 20);
    int v32 = sub_100132EFC(v31, (uint64_t)".", 1);
    long long v33 = sub_100132EFC(v32, (uint64_t)"DeviceId", 8);
    long long v34 = sub_100132EFC(v33, (uint64_t)" FROM ", 6);
    long long v35 = sub_100132EFC(v34, (uint64_t)"GeoFence", 8);
    uint64_t v36 = sub_100132EFC(v35, (uint64_t)" INNER JOIN ", 12);
    long long v37 = sub_100132EFC(v36, (uint64_t)"FenceHandOffDeviceId", 20);
    uint64_t v38 = sub_100132EFC(v37, (uint64_t)" ON ", 4);
    long long v39 = sub_100132EFC(v38, (uint64_t)"GeoFence", 8);
    uint64_t v40 = sub_100132EFC(v39, (uint64_t)".", 1);
    long long v41 = sub_100132EFC(v40, (uint64_t)"DeviceIdIndex", 13);
    int v42 = sub_100132EFC(v41, (uint64_t)" = ", 3);
    long long v43 = sub_100132EFC(v42, (uint64_t)"FenceHandOffDeviceId", 20);
    uint64_t v44 = sub_100132EFC(v43, (uint64_t)".", 1);
    long long v45 = sub_100132EFC(v44, (uint64_t)"DeviceIdIndex", 13);
    long long v46 = sub_100132EFC(v45, (uint64_t)" WHERE ", 7);
    long long v47 = sub_100132EFC(v46, (uint64_t)"FenceHandOffDeviceId", 20);
    uint64_t v48 = sub_100132EFC(v47, (uint64_t)".", 1);
    uint64_t v49 = sub_100132EFC(v48, (uint64_t)"DeviceId", 8);
    sub_100132EFC(v49, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v58 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  char v51 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    std::string __p = (void *)68289026;
    __int16 v56 = 2082;
    long long v57 = "";
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: getAllFencesFromDeviceId: DeviceId is null\"}", (uint8_t *)&__p, 0x12u);
  }
  sub_100133228((void **)a3);
  return 0;
}

void sub_100951558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40)
{
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  sub_101A129A8((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_100951680(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_10094BFA0(a1);
}

void sub_1009519FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a14;
  sub_10008DF5C(&a19);
  _Unwind_Resume(a1);
}

void sub_100951A34(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 248;
      sub_10091F570((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  sub_10010F274((uint64_t)&v30);
  uint64_t v6 = sub_100132EFC(&v31, (uint64_t)"SELECT ", 7);
  long long v7 = sub_100132EFC(v6, (uint64_t)"FenceIndex", 10);
  char v8 = sub_100132EFC(v7, (uint64_t)",", 1);
  long long v9 = sub_100132EFC(v8, (uint64_t)"BundleId", 8);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
  long long v11 = sub_100132EFC(v10, (uint64_t)"Name", 4);
  char v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
  long long v13 = sub_100132EFC(v12, (uint64_t)"Distance", 8);
  char v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  long long v15 = sub_100132EFC(v14, (uint64_t)"DesiredAccuracy", 15);
  BOOL v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
  long long v17 = sub_100132EFC(v16, (uint64_t)"SetupComplete", 13);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
  long long v19 = sub_100132EFC(v18, (uint64_t)"Timestamp", 9);
  __int16 v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
  long long v21 = sub_100132EFC(v20, (uint64_t)"MonitorFlags", 12);
  char v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
  long long v23 = sub_100132EFC(v22, (uint64_t)"OnBehalfBundleId", 16);
  unint64_t v24 = sub_100132EFC(v23, (uint64_t)", ", 2);
  long long v25 = sub_100132EFC(v24, (uint64_t)"ReferenceFrame", 14);
  uint64_t v26 = sub_100132EFC(v25, (uint64_t)", ", 2);
  long long v27 = sub_100132EFC(v26, (uint64_t)"FenceForeignKey", 15);
  unint64_t v28 = sub_100132EFC(v27, (uint64_t)" FROM ", 6);
  sub_100132EFC(v28, (uint64_t)"GeoFence", 8);
  std::stringbuf::str();
  if (v33 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_10095269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  sub_101A129A8((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_1009527EC(uint64_t a1)
{
  sub_10010F274((uint64_t)&v13);
  uint64_t v2 = sub_100132EFC(&v14, (uint64_t)"SELECT ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"FenceForeignKey", 15);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)" FROM ", 6);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"GeoFence", 8);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)" WHERE ", 7);
  long long v7 = sub_100132EFC(v6, (uint64_t)"BundleId", 8);
  char v8 = sub_100132EFC(v7, (uint64_t)"=? AND ", 7);
  long long v9 = sub_100132EFC(v8, (uint64_t)"Name", 4);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)"=? AND ", 7);
  long long v11 = sub_100132EFC(v10, (uint64_t)"OnBehalfBundleId", 16);
  sub_100132EFC(v11, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v16 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1009530E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100953164(uint64_t a1)
{
  sub_10010F274((uint64_t)&v7);
  uint64_t v2 = sub_100132EFC(&v8, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)" WHERE ", 7);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"BundleId", 8);
  sub_100132EFC(v5, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100953590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100953600(uint64_t a1)
{
  sub_10010F274((uint64_t)&v10);
  uint64_t v2 = sub_100132EFC(&v11, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)" WHERE ", 7);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"BundleId", 8);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)"=?", 2);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)" OR ", 4);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)"OnBehalfBundleId", 16);
  sub_100132EFC(v8, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v13 >= 0) {
    long long v9 = buf;
  }
  else {
    long long v9 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v9);
}

void sub_1009539A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 73) < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009539F4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double a5)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  uint64_t v10 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = (uint64_t *)*a3;
    }
    if (*((char *)a2 + 23) >= 0) {
      char v12 = a2;
    }
    else {
      char v12 = (uint64_t *)*a2;
    }
    if (*((char *)a4 + 23) >= 0) {
      char v13 = a4;
    }
    else {
      char v13 = (uint64_t *)*a4;
    }
    *(_DWORD *)int buf = 136446979;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v38 = 2082;
    long long v39 = v12;
    __int16 v40 = 2081;
    long long v41 = v13;
    __int16 v42 = 2050;
    double v43 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Fence: Recording [%{public}s]/%{public}s/%{private}s last download time change to %{public}.2f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v26 = a3;
    }
    else {
      uint64_t v26 = (uint64_t *)*a3;
    }
    if (*((char *)a2 + 23) >= 0) {
      long long v27 = a2;
    }
    else {
      long long v27 = (uint64_t *)*a2;
    }
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v28 = a4;
    }
    else {
      unint64_t v28 = (uint64_t *)*a4;
    }
    v30[0] = 136446979;
    *(void *)&v30[1] = v26;
    __int16 v31 = 2082;
    int v32 = v27;
    __int16 v33 = 2081;
    long long v34 = v28;
    __int16 v35 = 2050;
    double v36 = a5;
    long long v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceDatabase::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double)", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  sub_10010F274((uint64_t)v30);
  uint64_t v14 = sub_100132EFC((uint64_t **)((char *)&v32 + 2), (uint64_t)"UPDATE ", 7);
  long long v15 = sub_100132EFC(v14, (uint64_t)"GeoFence", 8);
  char v16 = sub_100132EFC(v15, (uint64_t)" SET ", 5);
  long long v17 = sub_100132EFC(v16, (uint64_t)"SetupComplete", 13);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)"=?", 2);
  long long v19 = sub_100132EFC(v18, (uint64_t)" WHERE ", 7);
  __int16 v20 = sub_100132EFC(v19, (uint64_t)"BundleId", 8);
  long long v21 = sub_100132EFC(v20, (uint64_t)"=? AND ", 7);
  char v22 = sub_100132EFC(v21, (uint64_t)"Name", 4);
  long long v23 = sub_100132EFC(v22, (uint64_t)"=? AND ", 7);
  unint64_t v24 = sub_100132EFC(v23, (uint64_t)"OnBehalfBundleId", 16);
  sub_100132EFC(v24, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v40 >= 0) {
    long long v25 = buf;
  }
  else {
    long long v25 = *(unsigned char **)buf;
  }
  sub_10014D518(a1, (uint64_t)v25);
}

void sub_1009540FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10095416C(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fence: Marking all fence data download times as invalid", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    LOWORD(__p) = 0;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceDatabase::markDataDownloadInvalid()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10010F274((uint64_t)buf);
  uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"UPDATE ", 7);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)"GeoFence", 8);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)" SET ", 5);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)"SetupComplete", 13);
  sub_100132EFC(v6, (uint64_t)"=-1", 3);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1009544F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100954544(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = (uint64_t *)*a2;
    }
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: invalidate download date for, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    if (*((char *)a2 + 23) >= 0) {
      char v16 = a2;
    }
    else {
      char v16 = (uint64_t *)*a2;
    }
    v18[0] = 136446210;
    *(void *)&v18[1] = v16;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceDatabase::markDataDownloadInvalidForBundleAndOnBehalf(const std::string &, const std::string &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_10010F274((uint64_t)v18);
  uint64_t v6 = sub_100132EFC(&v19, (uint64_t)"UPDATE OR IGNORE ", 17);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)"GeoFence", 8);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)" SET ", 5);
  long long v9 = sub_100132EFC(v8, (uint64_t)"SetupComplete", 13);
  char v10 = sub_100132EFC(v9, (uint64_t)"=-1", 3);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)" WHERE ", 7);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)"BundleId", 8);
  char v13 = sub_100132EFC(v12, (uint64_t)"=? AND ", 7);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)"OnBehalfBundleId", 16);
  sub_100132EFC(v14, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v21 >= 0) {
    long long v15 = buf;
  }
  else {
    long long v15 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v15);
}

void sub_100954B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100954B9C(uint64_t a1, void *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v20 = 2082;
    char v21 = "";
    __int16 v22 = 2082;
    uint64_t v23 = (uint64_t)[[objc_msgSend(a2, "UUIDString") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fence: #FenceHandoff invalidate download date for deviceId\", \"deviceId\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (sub_10094B9EC(a1, a2) != -1)
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v5 = sub_100132EFC((const char **)((char *)&v21 + 6), (uint64_t)"UPDATE OR IGNORE ", 17);
    uint64_t v6 = sub_100132EFC(v5, (uint64_t)"GeoFence", 8);
    uint64_t v7 = sub_100132EFC(v6, (uint64_t)" SET ", 5);
    uint64_t v8 = sub_100132EFC(v7, (uint64_t)"SetupComplete", 13);
    long long v9 = sub_100132EFC(v8, (uint64_t)"=-1", 3);
    char v10 = sub_100132EFC(v9, (uint64_t)" WHERE ", 7);
    uint64_t v11 = sub_100132EFC(v10, (uint64_t)"DeviceIdIndex", 13);
    sub_100132EFC(v11, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v18 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  char v13 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    id v14 = [[objc_msgSend(a2, "UUIDString") UTF8String];
    *(_DWORD *)int buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v20 = 2082;
    char v21 = "";
    __int16 v22 = 2050;
    uint64_t v23 = -1;
    __int16 v24 = 2082;
    id v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: Invalid DeviceId Index returned\", \"index\":%{public}lld, \"deviceID\":%{public, location:escape_only}s}", buf, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
  }
  long long v15 = qword_1024193C8;
  if (os_signpost_enabled((os_log_t)qword_1024193C8))
  {
    id v16 = [[[a2 UUIDString] UTF8String];
    *(_DWORD *)int buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v20 = 2082;
    char v21 = "";
    __int16 v22 = 2050;
    uint64_t v23 = -1;
    __int16 v24 = 2082;
    id v25 = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: Invalid DeviceId Index returned", "{\"msg%{public}.0s\":\"Fence: Invalid DeviceId Index returned\", \"index\":%{public}lld, \"deviceID\":%{public, location:escape_only}s}", buf, 0x26u);
  }
}

void sub_1009551C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100955238(uint64_t a1)
{
  sub_10010F274((uint64_t)&v6);
  uint64_t v2 = sub_100132EFC(&v7, (uint64_t)"SELECT DISTINCT ", 16);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"BundleId", 8);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)" FROM ", 6);
  sub_100132EFC(v4, (uint64_t)"GeoFence", 8);
  std::stringbuf::str();
  if (v9 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_10095588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100955938(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 3uLL);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = (char *)sub_1000DA5D8(v7, v4);
    }
    char v10 = v8;
    uint64_t v11 = &v8[24 * v5];
    uint64_t v12 = v11;
    char v13 = &v8[24 * v9];
    sub_1001D7FEC(v6, &v10);
    return sub_1001D8184((uint64_t)&v10);
  }
  return result;
}

void sub_1009559F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100955A18(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = (uint64_t *)a2;
  uint64_t v5 = a3;
  if (*(char *)(a3 + 23) < 0) {
    uint64_t v5 = *(void *)a3;
  }
  uint64_t v10 = v5;
  int v11 = 5;
  __int16 v12 = 0;
  char v13 = 0;
  char v14 = 0;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  uint64_t v6 = sub_1005FEA9C(a1, a2, &v10);
  if (v6)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    uint64_t v7 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v4 + 23) < 0) {
        unint64_t v4 = (uint64_t *)*v4;
      }
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v3 = *(void *)v3;
      }
      *(_DWORD *)int buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      char v18 = "";
      __int16 v19 = 2082;
      uint64_t v20 = v4;
      __int16 v21 = 2082;
      uint64_t v22 = v3;
      uint64_t v8 = "{\"msg%{public}.0s\":\"Fence: #migration column exists\", \"table\":%{public, location:escape_only}s, \"colum"
           "n\":%{public, location:escape_only}s}";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x26u);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    uint64_t v7 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v4 + 23) < 0) {
        unint64_t v4 = (uint64_t *)*v4;
      }
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v3 = *(void *)v3;
      }
      *(_DWORD *)int buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      char v18 = "";
      __int16 v19 = 2082;
      uint64_t v20 = v4;
      __int16 v21 = 2082;
      uint64_t v22 = v3;
      uint64_t v8 = "{\"msg%{public}.0s\":\"Fence: #migration column doesn't exists\", \"table\":%{public, location:escape_only}s,"
           " \"column\":%{public, location:escape_only}s}";
      goto LABEL_22;
    }
  }
  return v6;
}

void sub_100955C08(uint64_t a1)
{
  sub_10010F274((uint64_t)&v10);
  int64x2_t v2 = sub_100132EFC(&v11, (uint64_t)"UPDATE ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  unint64_t v4 = sub_100132EFC(v3, (uint64_t)" SET ", 5);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"MonitorFlags", 12);
  sub_100132EFC(v5, (uint64_t)" = ", 3);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)";", 1);
  std::stringbuf::str();
  if (v9 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100955E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100955E94(uint64_t a1)
{
  sub_10010F274((uint64_t)&v11);
  int64x2_t v2 = sub_100132EFC(&v12, (uint64_t)"UPDATE ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  unint64_t v4 = sub_100132EFC(v3, (uint64_t)" SET ", 5);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"OnBehalfBundleId", 16);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)" = ", 3);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)"''", 2);
  sub_100132EFC(v7, (uint64_t)";", 1);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1009560E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100956128(uint64_t a1)
{
  sub_10010F274((uint64_t)&v10);
  int64x2_t v2 = sub_100132EFC(&v11, (uint64_t)"UPDATE ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  unint64_t v4 = sub_100132EFC(v3, (uint64_t)" SET ", 5);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)"ReferenceFrame", 14);
  sub_100132EFC(v5, (uint64_t)" = ", 3);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)";", 1);
  std::stringbuf::str();
  if (v9 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100956370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1009563B4(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  int64x2_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: Setting fence keys values for existing fences", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D49C0);
    }
    LOWORD(__p) = 0;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceDatabase::setUniqueKeysToFenceForeignKeyColumn()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10010F274((uint64_t)buf);
  uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"UPDATE ", 7);
  unint64_t v4 = sub_100132EFC(v3, (uint64_t)"GeoFence", 8);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)" SET ", 5);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)"FenceForeignKey", 15);
  sub_100132EFC(v6, (uint64_t)" = rowid", 8);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100956740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10095678C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  sub_100134750(v24, "Fences");
  sub_100134750(v22, "MonitorFlags");
  char v4 = sub_100955A18(a1, (const char *)v24, (uint64_t)v22);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  sub_100134750(v20, "MonitorFlags");
  sub_100645C44((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
LABEL_9:
  sub_100134750(v18, "Fences");
  sub_100134750(__p, "ReferenceFrame");
  char v5 = sub_100955A18(a1, (const char *)v18, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if (v5) {
      goto LABEL_17;
    }
  }
  else if (v5)
  {
    goto LABEL_17;
  }
  sub_100134750(v20, "ReferenceFrame");
  sub_100645C44((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
LABEL_17:
  sub_100134750(v14, "Fences");
  sub_100134750(v12, "OnBehalfBundleId");
  char v6 = sub_100955A18(a1, (const char *)v14, (uint64_t)v12);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if (v6) {
      goto LABEL_25;
    }
  }
  else if (v6)
  {
    goto LABEL_25;
  }
  sub_100134750(v20, "OnBehalfBundleId");
  sub_100645C44((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
LABEL_25:
  sub_100134750(v10, "Fences");
  sub_100134750(v8, "FenceForeignKey");
  char v7 = sub_100955A18(a1, (const char *)v10, (uint64_t)v8);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (v7) {
      return;
    }
  }
  else if (v7)
  {
    return;
  }
  sub_100134750(v20, "FenceForeignKey");
  sub_100645C44((uint64_t **)a2, v20, (uint64_t)v20);
  if (v21 < 0) {
    operator delete((void *)v20[0]);
  }
}

void sub_100956A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v46 - 81) < 0) {
    operator delete(*(void **)(v46 - 104));
  }
  sub_1000DB264(v45, *(char **)(v45 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100956B08(uint64_t a1, uint64_t a2)
{
  sub_10010F274((uint64_t)v215);
  sub_100134750(buf, "MonitorFlags");
  uint64_t v3 = sub_10012FFE0(a2, (const void **)buf);
  if (v221 < 0) {
    operator delete(*(void **)buf);
  }
  if (a2 + 8 != v3)
  {
    char v4 = sub_100132EFC(v216, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    char v5 = sub_100132EFC(v4, (uint64_t)"GeoFence", 8);
    char v6 = sub_100132EFC(v5, (uint64_t)" (", 2);
    char v7 = sub_100132EFC(v6, (uint64_t)"BundleId", 8);
    uint64_t v8 = sub_100132EFC(v7, (uint64_t)",", 1);
    char v9 = sub_100132EFC(v8, (uint64_t)"Name", 4);
    char v10 = sub_100132EFC(v9, (uint64_t)",", 1);
    char v11 = sub_100132EFC(v10, (uint64_t)"Timestamp", 9);
    uint64_t v12 = sub_100132EFC(v11, (uint64_t)",", 1);
    char v13 = sub_100132EFC(v12, (uint64_t)"Latitude", 8);
    char v14 = sub_100132EFC(v13, (uint64_t)",", 1);
    char v15 = sub_100132EFC(v14, (uint64_t)"Longitude", 9);
    int v16 = sub_100132EFC(v15, (uint64_t)",", 1);
    char v17 = sub_100132EFC(v16, (uint64_t)"Distance", 8);
    char v18 = sub_100132EFC(v17, (uint64_t)",", 1);
    char v19 = sub_100132EFC(v18, (uint64_t)"DesiredAccuracy", 15);
    uint64_t v20 = sub_100132EFC(v19, (uint64_t)",", 1);
    char v21 = sub_100132EFC(v20, (uint64_t)"SetupComplete", 13);
    uint64_t v22 = sub_100132EFC(v21, (uint64_t)") SELECT ", 9);
    char v23 = sub_100132EFC(v22, (uint64_t)"BundleId", 8);
    __int16 v24 = sub_100132EFC(v23, (uint64_t)",", 1);
    char v25 = sub_100132EFC(v24, (uint64_t)"Name", 4);
    uint64_t v26 = sub_100132EFC(v25, (uint64_t)",", 1);
    long long v27 = sub_100132EFC(v26, (uint64_t)"Timestamp", 9);
    unint64_t v28 = sub_100132EFC(v27, (uint64_t)",", 1);
    long long v29 = sub_100132EFC(v28, (uint64_t)"Latitude", 8);
    uint64_t v30 = sub_100132EFC(v29, (uint64_t)",", 1);
    __int16 v31 = sub_100132EFC(v30, (uint64_t)"Longitude", 9);
    int v32 = sub_100132EFC(v31, (uint64_t)",", 1);
    __int16 v33 = sub_100132EFC(v32, (uint64_t)"Distance", 8);
    long long v34 = sub_100132EFC(v33, (uint64_t)",", 1);
    __int16 v35 = sub_100132EFC(v34, (uint64_t)"DesiredAccuracy", 15);
    double v36 = sub_100132EFC(v35, (uint64_t)",", 1);
    long long v37 = "SetupComplete";
    uint64_t v38 = 13;
    goto LABEL_18;
  }
  sub_100134750(buf, "ReferenceFrame");
  uint64_t v39 = sub_10012FFE0(a2, (const void **)buf);
  if (v221 < 0) {
    operator delete(*(void **)buf);
  }
  if (v3 != v39)
  {
    __int16 v40 = sub_100132EFC(v216, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    long long v41 = sub_100132EFC(v40, (uint64_t)"GeoFence", 8);
    __int16 v42 = sub_100132EFC(v41, (uint64_t)" (", 2);
    double v43 = sub_100132EFC(v42, (uint64_t)"BundleId", 8);
    uint64_t v44 = sub_100132EFC(v43, (uint64_t)",", 1);
    uint64_t v45 = sub_100132EFC(v44, (uint64_t)"Name", 4);
    uint64_t v46 = sub_100132EFC(v45, (uint64_t)",", 1);
    long long v47 = sub_100132EFC(v46, (uint64_t)"Timestamp", 9);
    uint64_t v48 = sub_100132EFC(v47, (uint64_t)",", 1);
    uint64_t v49 = sub_100132EFC(v48, (uint64_t)"Latitude", 8);
    uint64_t v50 = sub_100132EFC(v49, (uint64_t)",", 1);
    char v51 = sub_100132EFC(v50, (uint64_t)"Longitude", 9);
    uint64_t v52 = sub_100132EFC(v51, (uint64_t)",", 1);
    uint64_t v53 = sub_100132EFC(v52, (uint64_t)"Distance", 8);
    uint64_t v54 = sub_100132EFC(v53, (uint64_t)",", 1);
    long long v55 = sub_100132EFC(v54, (uint64_t)"DesiredAccuracy", 15);
    uint64_t v56 = sub_100132EFC(v55, (uint64_t)",", 1);
    uint64_t v57 = sub_100132EFC(v56, (uint64_t)"SetupComplete", 13);
    char v58 = sub_100132EFC(v57, (uint64_t)",", 1);
    long long v59 = sub_100132EFC(v58, (uint64_t)"MonitorFlags", 12);
    long long v60 = sub_100132EFC(v59, (uint64_t)") SELECT ", 9);
    long long v61 = sub_100132EFC(v60, (uint64_t)"BundleId", 8);
    uint64_t v62 = sub_100132EFC(v61, (uint64_t)",", 1);
    long long v63 = sub_100132EFC(v62, (uint64_t)"Name", 4);
    unint64_t v64 = sub_100132EFC(v63, (uint64_t)",", 1);
    long long v65 = sub_100132EFC(v64, (uint64_t)"Timestamp", 9);
    unint64_t v66 = sub_100132EFC(v65, (uint64_t)",", 1);
    long long v67 = sub_100132EFC(v66, (uint64_t)"Latitude", 8);
    double v68 = sub_100132EFC(v67, (uint64_t)",", 1);
    long long v69 = sub_100132EFC(v68, (uint64_t)"Longitude", 9);
    int v70 = sub_100132EFC(v69, (uint64_t)",", 1);
    long long v71 = sub_100132EFC(v70, (uint64_t)"Distance", 8);
    int v72 = sub_100132EFC(v71, (uint64_t)",", 1);
    long long v73 = sub_100132EFC(v72, (uint64_t)"DesiredAccuracy", 15);
    long long v74 = sub_100132EFC(v73, (uint64_t)",", 1);
    long long v75 = sub_100132EFC(v74, (uint64_t)"SetupComplete", 13);
    double v36 = sub_100132EFC(v75, (uint64_t)",", 1);
    long long v37 = "MonitorFlags";
    uint64_t v38 = 12;
    goto LABEL_18;
  }
  sub_100134750(buf, "OnBehalfBundleId");
  uint64_t v76 = sub_10012FFE0(a2, (const void **)buf);
  if (v221 < 0) {
    operator delete(*(void **)buf);
  }
  if (v3 != v76)
  {
    long long v77 = sub_100132EFC(v216, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    long long v78 = sub_100132EFC(v77, (uint64_t)"GeoFence", 8);
    long long v79 = sub_100132EFC(v78, (uint64_t)" (", 2);
    double v80 = sub_100132EFC(v79, (uint64_t)"BundleId", 8);
    long long v81 = sub_100132EFC(v80, (uint64_t)",", 1);
    double v82 = sub_100132EFC(v81, (uint64_t)"Name", 4);
    long long v83 = sub_100132EFC(v82, (uint64_t)",", 1);
    double v84 = sub_100132EFC(v83, (uint64_t)"Timestamp", 9);
    long long v85 = sub_100132EFC(v84, (uint64_t)",", 1);
    double v86 = sub_100132EFC(v85, (uint64_t)"Latitude", 8);
    long long v87 = sub_100132EFC(v86, (uint64_t)",", 1);
    uint64_t v88 = sub_100132EFC(v87, (uint64_t)"Longitude", 9);
    long long v89 = sub_100132EFC(v88, (uint64_t)",", 1);
    int v90 = sub_100132EFC(v89, (uint64_t)"Distance", 8);
    std::string v91 = sub_100132EFC(v90, (uint64_t)",", 1);
    uint64_t v92 = sub_100132EFC(v91, (uint64_t)"DesiredAccuracy", 15);
    char v93 = sub_100132EFC(v92, (uint64_t)",", 1);
    uint64_t v94 = sub_100132EFC(v93, (uint64_t)"SetupComplete", 13);
    char v95 = sub_100132EFC(v94, (uint64_t)",", 1);
    unint64_t v96 = sub_100132EFC(v95, (uint64_t)"MonitorFlags", 12);
    char v97 = sub_100132EFC(v96, (uint64_t)",", 1);
    BOOL v98 = sub_100132EFC(v97, (uint64_t)"ReferenceFrame", 14);
    char v99 = sub_100132EFC(v98, (uint64_t)") SELECT ", 9);
    uint64_t v100 = sub_100132EFC(v99, (uint64_t)"BundleId", 8);
    char v101 = sub_100132EFC(v100, (uint64_t)",", 1);
    long long v102 = sub_100132EFC(v101, (uint64_t)"Name", 4);
    char v103 = sub_100132EFC(v102, (uint64_t)",", 1);
    unint64_t v104 = sub_100132EFC(v103, (uint64_t)"Timestamp", 9);
    char v105 = sub_100132EFC(v104, (uint64_t)",", 1);
    double v106 = sub_100132EFC(v105, (uint64_t)"Latitude", 8);
    char v107 = sub_100132EFC(v106, (uint64_t)",", 1);
    double v108 = sub_100132EFC(v107, (uint64_t)"Longitude", 9);
    char v109 = sub_100132EFC(v108, (uint64_t)",", 1);
    uint64_t v110 = sub_100132EFC(v109, (uint64_t)"Distance", 8);
    char v111 = sub_100132EFC(v110, (uint64_t)",", 1);
    uint64_t v112 = sub_100132EFC(v111, (uint64_t)"DesiredAccuracy", 15);
    char v113 = sub_100132EFC(v112, (uint64_t)",", 1);
    uint64_t v114 = sub_100132EFC(v113, (uint64_t)"SetupComplete", 13);
    char v115 = sub_100132EFC(v114, (uint64_t)",", 1);
    v116 = "MonitorFlags";
    uint64_t v117 = 12;
LABEL_17:
    std::string v161 = sub_100132EFC(v115, (uint64_t)v116, v117);
    double v36 = sub_100132EFC(v161, (uint64_t)",", 1);
    long long v37 = "ReferenceFrame";
    uint64_t v38 = 14;
    goto LABEL_18;
  }
  sub_100134750(buf, "FenceForeignKey");
  uint64_t v118 = sub_10012FFE0(a2, (const void **)buf);
  if (v221 < 0) {
    operator delete(*(void **)buf);
  }
  if (v3 != v118)
  {
    char v119 = sub_100132EFC(v216, (uint64_t)"INSERT OR IGNORE INTO ", 22);
    double v120 = sub_100132EFC(v119, (uint64_t)"GeoFence", 8);
    char v121 = sub_100132EFC(v120, (uint64_t)" (", 2);
    uint64_t v122 = sub_100132EFC(v121, (uint64_t)"BundleId", 8);
    char v123 = sub_100132EFC(v122, (uint64_t)",", 1);
    uint64_t v124 = sub_100132EFC(v123, (uint64_t)"Name", 4);
    char v125 = sub_100132EFC(v124, (uint64_t)",", 1);
    uint64_t v126 = sub_100132EFC(v125, (uint64_t)"Timestamp", 9);
    char v127 = sub_100132EFC(v126, (uint64_t)",", 1);
    uint64_t v128 = sub_100132EFC(v127, (uint64_t)"Latitude", 8);
    char v129 = sub_100132EFC(v128, (uint64_t)",", 1);
    unint64_t v130 = sub_100132EFC(v129, (uint64_t)"Longitude", 9);
    char v131 = sub_100132EFC(v130, (uint64_t)",", 1);
    unint64_t v132 = sub_100132EFC(v131, (uint64_t)"Distance", 8);
    char v133 = sub_100132EFC(v132, (uint64_t)",", 1);
    uint64_t v134 = sub_100132EFC(v133, (uint64_t)"DesiredAccuracy", 15);
    char v135 = sub_100132EFC(v134, (uint64_t)",", 1);
    std::string v136 = sub_100132EFC(v135, (uint64_t)"SetupComplete", 13);
    std::string v137 = sub_100132EFC(v136, (uint64_t)",", 1);
    std::string v138 = sub_100132EFC(v137, (uint64_t)"MonitorFlags", 12);
    std::string v139 = sub_100132EFC(v138, (uint64_t)",", 1);
    std::string v140 = sub_100132EFC(v139, (uint64_t)"OnBehalfBundleId", 16);
    std::string v141 = sub_100132EFC(v140, (uint64_t)",", 1);
    std::string v142 = sub_100132EFC(v141, (uint64_t)"ReferenceFrame", 14);
    std::string v143 = sub_100132EFC(v142, (uint64_t)") SELECT ", 9);
    std::string v144 = sub_100132EFC(v143, (uint64_t)"BundleId", 8);
    std::string v145 = sub_100132EFC(v144, (uint64_t)",", 1);
    std::string v146 = sub_100132EFC(v145, (uint64_t)"Name", 4);
    std::string v147 = sub_100132EFC(v146, (uint64_t)",", 1);
    std::string v148 = sub_100132EFC(v147, (uint64_t)"Timestamp", 9);
    std::string v149 = sub_100132EFC(v148, (uint64_t)",", 1);
    std::string v150 = sub_100132EFC(v149, (uint64_t)"Latitude", 8);
    std::string v151 = sub_100132EFC(v150, (uint64_t)",", 1);
    std::string v152 = sub_100132EFC(v151, (uint64_t)"Longitude", 9);
    std::string v153 = sub_100132EFC(v152, (uint64_t)",", 1);
    std::string v154 = sub_100132EFC(v153, (uint64_t)"Distance", 8);
    std::string v155 = sub_100132EFC(v154, (uint64_t)",", 1);
    std::string v156 = sub_100132EFC(v155, (uint64_t)"DesiredAccuracy", 15);
    std::string v157 = sub_100132EFC(v156, (uint64_t)",", 1);
    std::string v158 = sub_100132EFC(v157, (uint64_t)"SetupComplete", 13);
    std::string v159 = sub_100132EFC(v158, (uint64_t)",", 1);
    std::string v160 = sub_100132EFC(v159, (uint64_t)"MonitorFlags", 12);
    char v115 = sub_100132EFC(v160, (uint64_t)",", 1);
    v116 = "OnBehalfBundleId";
    uint64_t v117 = 16;
    goto LABEL_17;
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D49C0);
  }
  std::string v166 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int buf = 68289026;
    __int16 v219 = 2082;
    long long v220 = "";
    _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: #migration contains FenceForeignKey\"}", buf, 0x12u);
  }
  std::string v167 = sub_100132EFC(v216, (uint64_t)"INSERT OR IGNORE INTO ", 22);
  std::string v168 = sub_100132EFC(v167, (uint64_t)"GeoFence", 8);
  std::string v169 = sub_100132EFC(v168, (uint64_t)" (", 2);
  std::string v170 = sub_100132EFC(v169, (uint64_t)"BundleId", 8);
  std::string v171 = sub_100132EFC(v170, (uint64_t)",", 1);
  std::string v172 = sub_100132EFC(v171, (uint64_t)"Name", 4);
  std::string v173 = sub_100132EFC(v172, (uint64_t)",", 1);
  std::string v174 = sub_100132EFC(v173, (uint64_t)"Timestamp", 9);
  __int16 v175 = sub_100132EFC(v174, (uint64_t)",", 1);
  int64_t v176 = sub_100132EFC(v175, (uint64_t)"Latitude", 8);
  uint64_t v177 = sub_100132EFC(v176, (uint64_t)",", 1);
  std::string v178 = sub_100132EFC(v177, (uint64_t)"Longitude", 9);
  std::string v179 = sub_100132EFC(v178, (uint64_t)",", 1);
  std::string v180 = sub_100132EFC(v179, (uint64_t)"Distance", 8);
  uint64_t v181 = sub_100132EFC(v180, (uint64_t)",", 1);
  __int16 v182 = sub_100132EFC(v181, (uint64_t)"DesiredAccuracy", 15);
  uint64_t v183 = sub_100132EFC(v182, (uint64_t)",", 1);
  unint64_t v184 = sub_100132EFC(v183, (uint64_t)"SetupComplete", 13);
  uint64_t v185 = sub_100132EFC(v184, (uint64_t)",", 1);
  uint64_t v186 = sub_100132EFC(v185, (uint64_t)"MonitorFlags", 12);
  int v187 = sub_100132EFC(v186, (uint64_t)",", 1);
  unint64_t v188 = sub_100132EFC(v187, (uint64_t)"OnBehalfBundleId", 16);
  int v189 = sub_100132EFC(v188, (uint64_t)",", 1);
  uint64_t v190 = sub_100132EFC(v189, (uint64_t)"ReferenceFrame", 14);
  uint64_t v191 = sub_100132EFC(v190, (uint64_t)",", 1);
  uint64_t v192 = sub_100132EFC(v191, (uint64_t)"FenceForeignKey", 15);
  char v193 = sub_100132EFC(v192, (uint64_t)") SELECT ", 9);
  long long v194 = sub_100132EFC(v193, (uint64_t)"BundleId", 8);
  long long v195 = sub_100132EFC(v194, (uint64_t)",", 1);
  int v196 = sub_100132EFC(v195, (uint64_t)"Name", 4);
  v197 = sub_100132EFC(v196, (uint64_t)",", 1);
  __int16 v198 = sub_100132EFC(v197, (uint64_t)"Timestamp", 9);
  uint64_t v199 = sub_100132EFC(v198, (uint64_t)",", 1);
  __int16 v200 = sub_100132EFC(v199, (uint64_t)"Latitude", 8);
  uint64_t v201 = sub_100132EFC(v200, (uint64_t)",", 1);
  __int16 v202 = sub_100132EFC(v201, (uint64_t)"Longitude", 9);
  uint64_t v203 = sub_100132EFC(v202, (uint64_t)",", 1);
  __int16 v204 = sub_100132EFC(v203, (uint64_t)"Distance", 8);
  unsigned int v205 = sub_100132EFC(v204, (uint64_t)",", 1);
  __int16 v206 = sub_100132EFC(v205, (uint64_t)"DesiredAccuracy", 15);
  unsigned int v207 = sub_100132EFC(v206, (uint64_t)",", 1);
  unsigned int v208 = sub_100132EFC(v207, (uint64_t)"SetupComplete", 13);
  v209 = sub_100132EFC(v208, (uint64_t)",", 1);
  int v210 = sub_100132EFC(v209, (uint64_t)"MonitorFlags", 12);
  int v211 = sub_100132EFC(v210, (uint64_t)",", 1);
  int v212 = sub_100132EFC(v211, (uint64_t)"OnBehalfBundleId", 16);
  uint64_t v213 = sub_100132EFC(v212, (uint64_t)",", 1);
  long long v214 = sub_100132EFC(v213, (uint64_t)"ReferenceFrame", 14);
  double v36 = sub_100132EFC(v214, (uint64_t)",", 1);
  long long v37 = "FenceForeignKey";
  uint64_t v38 = 15;
LABEL_18:
  std::string v162 = sub_100132EFC(v36, (uint64_t)v37, v38);
  std::string v163 = sub_100132EFC(v162, (uint64_t)" FROM ", 6);
  sub_100132EFC(v163, (uint64_t)"Fences", 6);
  std::stringbuf::str();
  *(void *)((char *)v215
  v216[0] = v164;
  if (v217 < 0) {
    operator delete((void *)v216[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100957B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 57) < 0) {
    operator delete(*(void **)(v2 - 80));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100957B9C(uint64_t a1)
{
  sub_10010F274((uint64_t)&v9);
  uint64_t v2 = sub_100132EFC(&v10, (uint64_t)"UPDATE ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  char v4 = sub_100132EFC(v3, (uint64_t)" SET ", 5);
  char v5 = sub_100132EFC(v4, (uint64_t)"FenceIndex", 10);
  sub_100132EFC(v5, (uint64_t)" = rowid", 8);
  std::stringbuf::str();
  if (v8 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100957DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100957E10(uint64_t a1)
{
  sub_10010F274((uint64_t)&v7);
  uint64_t v2 = sub_100132EFC(&v8, (uint64_t)"UPDATE ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  char v4 = sub_100132EFC(v3, (uint64_t)" SET ", 5);
  char v5 = sub_100132EFC(v4, (uint64_t)"HandoffTag", 10);
  sub_100132EFC(v5, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1009581C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100958234(uint64_t a1)
{
  sub_10010F274((uint64_t)&v7);
  uint64_t v2 = sub_100132EFC(&v8, (uint64_t)"UPDATE ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  char v4 = sub_100132EFC(v3, (uint64_t)" SET ", 5);
  char v5 = sub_100132EFC(v4, (uint64_t)"HandoffFenceEnablementStatus", 28);
  sub_100132EFC(v5, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1009585E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100958658(uint64_t a1)
{
  sub_10010F274((uint64_t)&v7);
  uint64_t v2 = sub_100132EFC(&v8, (uint64_t)"UPDATE ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"GeoFence", 8);
  char v4 = sub_100132EFC(v3, (uint64_t)" SET ", 5);
  char v5 = sub_100132EFC(v4, (uint64_t)"DeviceIdIndex", 13);
  sub_100132EFC(v5, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100958A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100958A78(uint64_t a1)
{
  sub_10002B640(a1);
  sub_10010F274((uint64_t)&v10);
  uint64_t v2 = sub_100132EFC(&v11, (uint64_t)"SELECT ", 7);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"Latitude", 8);
  char v4 = sub_100132EFC(v3, (uint64_t)",", 1);
  char v5 = sub_100132EFC(v4, (uint64_t)"Longitude", 9);
  char v6 = sub_100132EFC(v5, (uint64_t)",", 1);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)"FenceForeignKey", 15);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)" FROM ", 6);
  sub_100132EFC(v8, (uint64_t)"GeoFences", 9);
  std::stringbuf::str();
  if (v13 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100959034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1009590B0()
{
  sub_10010F274((uint64_t)v45);
  uint64_t v0 = sub_100132EFC(v46, (uint64_t)"INSERT OR IGNORE INTO ", 22);
  unint64_t v1 = sub_100132EFC(v0, (uint64_t)"GeoFence", 8);
  uint64_t v2 = sub_100132EFC(v1, (uint64_t)" (", 2);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"BundleId", 8);
  char v4 = sub_100132EFC(v3, (uint64_t)",", 1);
  char v5 = sub_100132EFC(v4, (uint64_t)"Name", 4);
  char v6 = sub_100132EFC(v5, (uint64_t)",", 1);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)"Timestamp", 9);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)",", 1);
  uint64_t v9 = sub_100132EFC(v8, (uint64_t)"Distance", 8);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)",", 1);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)"DesiredAccuracy", 15);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)",", 1);
  char v13 = sub_100132EFC(v12, (uint64_t)"SetupComplete", 13);
  char v14 = sub_100132EFC(v13, (uint64_t)",", 1);
  char v15 = sub_100132EFC(v14, (uint64_t)"MonitorFlags", 12);
  int v16 = sub_100132EFC(v15, (uint64_t)",", 1);
  char v17 = sub_100132EFC(v16, (uint64_t)"OnBehalfBundleId", 16);
  char v18 = sub_100132EFC(v17, (uint64_t)",", 1);
  char v19 = sub_100132EFC(v18, (uint64_t)"ReferenceFrame", 14);
  uint64_t v20 = sub_100132EFC(v19, (uint64_t)",", 1);
  char v21 = sub_100132EFC(v20, (uint64_t)"FenceForeignKey", 15);
  uint64_t v22 = sub_100132EFC(v21, (uint64_t)") SELECT ", 9);
  char v23 = sub_100132EFC(v22, (uint64_t)"BundleId", 8);
  __int16 v24 = sub_100132EFC(v23, (uint64_t)",", 1);
  char v25 = sub_100132EFC(v24, (uint64_t)"Name", 4);
  uint64_t v26 = sub_100132EFC(v25, (uint64_t)",", 1);
  long long v27 = sub_100132EFC(v26, (uint64_t)"Timestamp", 9);
  unint64_t v28 = sub_100132EFC(v27, (uint64_t)",", 1);
  long long v29 = sub_100132EFC(v28, (uint64_t)"Distance", 8);
  uint64_t v30 = sub_100132EFC(v29, (uint64_t)",", 1);
  __int16 v31 = sub_100132EFC(v30, (uint64_t)"DesiredAccuracy", 15);
  int v32 = sub_100132EFC(v31, (uint64_t)",", 1);
  __int16 v33 = sub_100132EFC(v32, (uint64_t)"SetupComplete", 13);
  long long v34 = sub_100132EFC(v33, (uint64_t)",", 1);
  __int16 v35 = sub_100132EFC(v34, (uint64_t)"MonitorFlags", 12);
  double v36 = sub_100132EFC(v35, (uint64_t)",", 1);
  long long v37 = sub_100132EFC(v36, (uint64_t)"OnBehalfBundleId", 16);
  uint64_t v38 = sub_100132EFC(v37, (uint64_t)",", 1);
  uint64_t v39 = sub_100132EFC(v38, (uint64_t)"ReferenceFrame", 14);
  __int16 v40 = sub_100132EFC(v39, (uint64_t)",", 1);
  long long v41 = sub_100132EFC(v40, (uint64_t)"FenceForeignKey", 15);
  __int16 v42 = sub_100132EFC(v41, (uint64_t)" FROM ", 6);
  sub_100132EFC(v42, (uint64_t)"GeoFences", 9);
  std::stringbuf::str();
  *(void *)((char *)v45
  v46[0] = v43;
  if (v47 < 0) {
    operator delete((void *)v46[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1009594D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009594EC(uint64_t a1, uint64_t *a2)
{
  sub_100959F1C((uint64_t)a2, *a2);
  sub_10010F274((uint64_t)&v10);
  uint64_t v3 = sub_100132EFC(&v11, (uint64_t)"SELECT ", 7);
  char v4 = sub_100132EFC(v3, (uint64_t)"DeviceId", 8);
  char v5 = sub_100132EFC(v4, (uint64_t)" FROM ", 6);
  char v6 = sub_100132EFC(v5, (uint64_t)"FenceHandOffDeviceId", 20);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)" WHERE ", 7);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)"DeviceIdIndex", 13);
  sub_100132EFC(v8, (uint64_t)">?", 2);
  std::stringbuf::str();
  if (v13 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100959D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100959E0C(uint64_t *a1)
{
  uint64_t v3 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 3;
  if (v6 < (v3 - *a1) >> 3)
  {
    uint64_t v13 = result;
    if (v5 == v4)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v7 = (char *)sub_1000DA54C(result, v6);
    }
    uint64_t v9 = v7;
    uint64_t v10 = &v7[8 * v6];
    uint64_t v11 = v10;
    uint64_t v12 = &v7[8 * v8];
    sub_100959F68(a1, &v9);
    return sub_10095A1A4((uint64_t)&v9);
  }
  return result;
}

void sub_100959E94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_100959EBC(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100959EEC(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100959F1C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 8)
  {
    uint64_t v5 = *(void **)(i - 8);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_100959F68(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100959FE0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100959FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 8) = 0;
      uint64_t v10 = *(void **)(v9 - 8);
      v9 -= 8;
      *(void *)(v7 - 8) = v10;
      uint64_t v7 = *((void *)&v16 + 1) - 8;
      *((void *)&v16 + 1) -= 8;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10095A09C((uint64_t)v13);
  return v11;
}

void sub_10095A088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10095A09C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10095A0D4((uint64_t *)a1);
  }
  return a1;
}

void sub_10095A0D4(uint64_t *a1)
{
  unint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_10095A14C(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_10095A14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(void *)(a2 + 32) = i)
  {

    uint64_t i = (id *)(*(void *)(a2 + 32) + 8);
  }
}

uint64_t sub_10095A1A4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10095A1DC(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void **)(v4 - 8);
    *(void *)(a1 + 16) = v4 - 8;
  }
}

BOOL sub_10095A22C()
{
  uint64_t v2 = *(NSObject **)(v0 + 968);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_10095A248()
{
  uint64_t v2 = *(NSObject **)(v0 + 968);
  return os_signpost_enabled(v2);
}

uint64_t sub_10095A260(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101D53720;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0x403E000000000000;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0x40F5180000000000;
  sub_10095A4E0(a1);
  sub_1000C7F88(buf);
  double v2 = *(double *)(a1 + 88);
  v10[0] = 0.0;
  int v3 = sub_1000A699C(*(uint64_t *)&buf[0], "LCStatsSubmitMetricsThrSec", v10);
  double v4 = v10[0];
  if (!v3) {
    double v4 = v2;
  }
  *(double *)(a1 + 80) = v4;
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022D4AB0);
  }
  uint64_t v5 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 80);
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,fMetricsCollectionDuration,%{public}f", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    uint64_t v8 = *(void *)(a1 + 80);
    LODWORD(v10[0]) = 134349056;
    *(void *)((char *)v10 + 4) = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "cllcf::CLLCFusionStats::CLLCFusionStats()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return a1;
}

void sub_10095A4AC(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_10095A4E0(uint64_t a1)
{
  memcpy(__dst, &unk_101D53750, sizeof(__dst));
  sub_10095CF7C((uint64_t **)(a1 + 48), __dst, (int *)&v3);
  *(double *)(a1 + 72) = sub_10016C458();
}

void sub_10095A56C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10095A57C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(unsigned char *)a2)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 4);
    unsigned int v8 = *(_DWORD *)(a2 + 8);
    unsigned int v11 = *(_DWORD *)(a2 + 12);
    unsigned int v10 = *(_DWORD *)(a2 + 16);
    unsigned int v12 = *(_DWORD *)(a2 + 20);
    unsigned int v13 = v8 + v9 + v11 + v10 + v12;
    if (v13)
    {
      unsigned int v14 = ((double)v9 * 100.0 / (double)v13);
      unsigned int v15 = ((double)v8 * 100.0 / (double)v13);
      unsigned int v16 = ((double)v11 * 100.0 / (double)v13);
      LODWORD(v106) = ((double)v12 * 100.0 / (double)v13);
      HIDWORD(v106) = ((double)v10 * 100.0 / (double)v13);
    }
    else
    {
      uint64_t v106 = 0;
      unsigned int v16 = 0;
      unsigned int v15 = 0;
      unsigned int v14 = 0;
    }
    unsigned int v20 = *(_DWORD *)(a2 + 184);
    unsigned int v19 = *(_DWORD *)(a2 + 188);
    unsigned int v22 = *(_DWORD *)(a2 + 192);
    unsigned int v21 = *(_DWORD *)(a2 + 196);
    unsigned int v23 = v19 + v20 + v22 + v21;
    if (v23)
    {
      LODWORD(v105) = ((double)v19 * 100.0 / (double)v23);
      HIDWORD(v105) = ((double)v20 * 100.0 / (double)v23);
      LODWORD(v104) = ((double)v21 * 100.0 / (double)v23);
      HIDWORD(v104) = ((double)v22 * 100.0 / (double)v23);
    }
    else
    {
      uint64_t v104 = 0;
      uint64_t v105 = 0;
    }
    unsigned int v25 = *(_DWORD *)(a2 + 200);
    unsigned int v24 = *(_DWORD *)(a2 + 204);
    unsigned int v27 = *(_DWORD *)(a2 + 208);
    unsigned int v26 = *(_DWORD *)(a2 + 212);
    unsigned int v28 = v24 + v25 + v27 + v26;
    if (v28)
    {
      LODWORD(v103) = ((double)v24 * 100.0 / (double)v28);
      HIDWORD(v103) = ((double)v25 * 100.0 / (double)v28);
      LODWORD(v102) = ((double)v26 * 100.0 / (double)v28);
      HIDWORD(v102) = ((double)v27 * 100.0 / (double)v28);
    }
    else
    {
      uint64_t v102 = 0;
      uint64_t v103 = 0;
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    long long v29 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *(_DWORD *)(a2 + 144);
      int v30 = *(_DWORD *)(a2 + 148);
      int v32 = *(_DWORD *)(a2 + 152);
      int v33 = *(_DWORD *)(a2 + 156);
      int v35 = *(_DWORD *)(a2 + 136);
      int v34 = *(_DWORD *)(a2 + 140);
      int v36 = *(_DWORD *)(a2 + 120);
      int v37 = *(_DWORD *)(a2 + 124);
      int v38 = *(_DWORD *)(a2 + 128);
      int v39 = *(_DWORD *)(a2 + 132);
      int v41 = *(_DWORD *)(a2 + 60);
      int v40 = *(_DWORD *)(a2 + 64);
      int v42 = *(_DWORD *)(a2 + 48);
      int v43 = *(_DWORD *)(a2 + 52);
      int v44 = *(_DWORD *)(a2 + 56);
      int v45 = *(_DWORD *)(a2 + 40);
      unsigned int v46 = *(_DWORD *)(a2 + 44);
      unsigned int v48 = *(_DWORD *)(a2 + 32);
      int v47 = *(_DWORD *)(a2 + 36);
      *(_DWORD *)int buf = 67245056;
      int v108 = a4;
      __int16 v109 = 1026;
      int v110 = v32;
      __int16 v111 = 1026;
      int v112 = v30;
      __int16 v113 = 1026;
      int v114 = v36;
      __int16 v115 = 1026;
      int v116 = v31;
      __int16 v117 = 1026;
      int v118 = v34;
      __int16 v119 = 1026;
      int v120 = v33;
      __int16 v121 = 1026;
      int v122 = v38;
      __int16 v123 = 1026;
      int v124 = v35;
      __int16 v125 = 1026;
      int v126 = v37;
      __int16 v127 = 1026;
      int v128 = v39;
      __int16 v129 = 1026;
      int v130 = v45;
      __int16 v131 = 1026;
      int v132 = v42;
      __int16 v133 = 1026;
      int v134 = v40;
      __int16 v135 = 1026;
      int v136 = v44;
      __int16 v137 = 1026;
      int v138 = v43;
      __int16 v139 = 1026;
      int v140 = v47;
      __int16 v141 = 1026;
      int v142 = v41;
      __int16 v143 = 1026;
      unsigned int v144 = v46;
      __int16 v145 = 1026;
      unsigned int v146 = v48;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,dynamics mode,loc rejection reason,visitContext,%{public}d,cntDynModeAirborneHighG,%{public}d,cntDynModeAirborneLowG,%{public}d,cntDynModeGeneralPurpose,%{public}d,cntDynModeGroundVehicleFast,%{public}d,cntDynModeGroundVehicleSlow,%{public}d,cntDynModeLsqTest,%{public}d,cntDynModeMovPed,%{public}d,cntDynModeRunning,%{public}d,cntDynModeStationaryKnown,%{public}d,cntDynModeWalking,%{public}d,cntRejReasonDuplicateLocation,%{public}d,cntRejReasonGrossOutlier,%{public}d,cntRejReasonHypothesisSelectionFailed,%{public}d,cntRejReasonInconsistentCellPosition,%{public}d,cntRejReasonIndoorFavoringWiFiAP,%{public}d,cntRejReasonInvalidLocation,%{public}d,cntRejReasonLowAccuracyCellOrWiFiPosition,%{public}d,cntRejReasonOldLocation,%{public}d,cntRejReasonOther,%{public}d,", buf, 0x7Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022D4AB0);
      }
      char v97 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v97);
      if (v97 != (char *)buf) {
        free(v97);
      }
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    uint64_t v49 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      int v50 = *(_DWORD *)(a2 + 168);
      int v51 = *(_DWORD *)(a2 + 172);
      int v52 = *(_DWORD *)(a2 + 176);
      int v53 = *(_DWORD *)(a2 + 180);
      int v55 = *(_DWORD *)(a2 + 72);
      int v54 = *(_DWORD *)(a2 + 76);
      int v56 = *(_DWORD *)(a2 + 160);
      int v57 = *(_DWORD *)(a2 + 164);
      int v58 = *(_DWORD *)(a2 + 68);
      int v59 = *(_DWORD *)(a2 + 24);
      int v60 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)int buf = 67246336;
      int v108 = a4;
      __int16 v109 = 1026;
      int v110 = v56;
      __int16 v111 = 1026;
      int v112 = v58;
      __int16 v113 = 1026;
      int v114 = v50;
      __int16 v115 = 1026;
      int v116 = v51;
      __int16 v117 = 1026;
      int v118 = v52;
      __int16 v119 = 1026;
      int v120 = v53;
      __int16 v121 = 1026;
      int v122 = v54;
      __int16 v123 = 1026;
      int v124 = v57;
      __int16 v125 = 1026;
      int v126 = v55;
      __int16 v127 = 1026;
      int v128 = v60;
      __int16 v129 = 1026;
      int v130 = v59;
      __int16 v131 = 1026;
      int v132 = HIDWORD(v105);
      __int16 v133 = 1026;
      int v134 = v105;
      __int16 v135 = 1026;
      int v136 = HIDWORD(v104);
      __int16 v137 = 1026;
      int v138 = v104;
      __int16 v139 = 1026;
      int v140 = v106;
      __int16 v141 = 1026;
      int v142 = HIDWORD(v106);
      __int16 v143 = 1026;
      unsigned int v144 = v16;
      __int16 v145 = 1026;
      unsigned int v146 = v15;
      __int16 v147 = 1026;
      unsigned int v148 = v14;
      __int16 v149 = 1026;
      int v150 = HIDWORD(v103);
      __int16 v151 = 1026;
      int v152 = v103;
      __int16 v153 = 1026;
      int v154 = HIDWORD(v102);
      __int16 v155 = 1026;
      int v156 = v102;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,hypothesis,visitContext,%{public}d,cntGPSFuserDistanceGT500m,%{public}d,cntGPSIsYieldingButNotSelected,%{public}d,cntHypoDistanceLT50m,%{public}d,cntHypoDistanceGT50mLT100m,%{public}d,cntHypoDistanceGT100mLT200m,%{public}d,cntHypoDistanceGT200m,%{public}d,cntHypoCreated,%{public}d,cntWiFiFuserDistanceGT500m,%{public}d,cntLikelihoodOutlierRej,%{public}d,maxEuclideanDistBtwnActiveHypo,%{public}d,maxMDistBtwnActiveHypo,%{public}d,pctGPSFuserDistLT50m,%{public}d,pctGPSFuserDistGT50mLT100m,%{public}d,pctGPSFuserDistGT100mLT200m,%{public}d,pctGPSFuserDistGT200m,%{public}d,pctFixesWithMoreThanFourHypoActive,%{public}d,pctFixesWithFourHypoActive,%{public}d,pctFixesWithThreeHypoActive,%{public}d,pctFixesWithTwoHypoActive,%{public}d,pctFixesWithOneHypoActive,%{public}d,pctWiFiFuserDistLT50m,%{public}d,pctWiFiFuserDistGT50mLT100m,%{public}d,pctWiFiFuserDistGT100mLT200m,%{public}d,pctWiFiFuserDistGT200m,%{public}d,", buf, 0x98u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022D4AB0);
      }
      BOOL v98 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v98);
      if (v98 != (char *)buf) {
        free(v98);
      }
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    long long v61 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      int v62 = *(_DWORD *)(a2 + 4);
      int v63 = *(_DWORD *)(a2 + 8);
      int v64 = *(_DWORD *)(a2 + 12);
      int v65 = *(_DWORD *)(a2 + 16);
      int v66 = *(_DWORD *)(a2 + 20);
      int v67 = *(_DWORD *)(a2 + 184);
      int v68 = *(_DWORD *)(a2 + 188);
      int v69 = *(_DWORD *)(a2 + 192);
      int v70 = *(_DWORD *)(a2 + 196);
      int v72 = *(_DWORD *)(a2 + 200);
      int v71 = *(_DWORD *)(a2 + 204);
      int v73 = *(_DWORD *)(a2 + 208);
      int v74 = *(_DWORD *)(a2 + 212);
      *(_DWORD *)int buf = 67243520;
      int v108 = a4;
      __int16 v109 = 1026;
      int v110 = v62;
      __int16 v111 = 1026;
      int v112 = v63;
      __int16 v113 = 1026;
      int v114 = v64;
      __int16 v115 = 1026;
      int v116 = v65;
      __int16 v117 = 1026;
      int v118 = v66;
      __int16 v119 = 1026;
      int v120 = v67;
      __int16 v121 = 1026;
      int v122 = v68;
      __int16 v123 = 1026;
      int v124 = v69;
      __int16 v125 = 1026;
      int v126 = v70;
      __int16 v127 = 1026;
      int v128 = v72;
      __int16 v129 = 1026;
      int v130 = v71;
      __int16 v131 = 1026;
      int v132 = v73;
      __int16 v133 = 1026;
      int v134 = v74;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,hypotheses count valuesvisitContext,%{public}d,cntFixesWithOneHypothesActive,%{public}d,cntFixesWithTwoHypothesActive,%{public}d,cntFixesWithThreeHypothesActive,%{public}d,cntFixesWithFourHypothesActive,%{public}d,cntFixesWithMoreThanFourHypothesActive,%{public}d,cntGPSFuserDistanceLT50m,%{public}d,cntGPSFuserDistanceGT50mLT100m,%{public}d,cntGPSFuserDistanceGT100mLT200m,%{public}d,cntGPSFuserDistanceGT200m,%{public}d,cntWiFiFuserDistanceLT50m,%{public}d,cntWiFiFuserDistanceGT50mLT100m,%{public}d,cntWiFiFuserDistanceGT100mLT200m,%{public}d,cntWiFiFuserDistanceGT200m,%{public}d,", buf, 0x56u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022D4AB0);
      }
      char v99 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v99);
      if (v99 != (char *)buf) {
        free(v99);
      }
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    long long v75 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      int v77 = *(_DWORD *)(a2 + 80);
      int v76 = *(_DWORD *)(a2 + 84);
      int v78 = *(_DWORD *)(a2 + 88);
      int v79 = *(_DWORD *)(a2 + 92);
      int v81 = *(_DWORD *)(a2 + 104);
      int v80 = *(_DWORD *)(a2 + 108);
      int v83 = *(_DWORD *)(a2 + 96);
      int v82 = *(_DWORD *)(a2 + 100);
      *(_DWORD *)int buf = 67242240;
      int v108 = a4;
      __int16 v109 = 1026;
      int v110 = v76;
      __int16 v111 = 1026;
      int v112 = v77;
      __int16 v113 = 1026;
      int v114 = v78;
      __int16 v115 = 1026;
      int v116 = v79;
      __int16 v117 = 1026;
      int v118 = v80;
      __int16 v119 = 1026;
      int v120 = v82;
      __int16 v121 = 1026;
      int v122 = v81;
      __int16 v123 = 1026;
      int v124 = v83;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,io,visitContext,%{public}d,cntBioDispGTExpected,%{public}d,cntBioDispLargeGapInIO,%{public}d,cntIODerivedMotionSpeedMatchMotionActivity,%{public}d,cntIODerivedMotionSpeedMisMatchMotionActivity,%{public}d,cntIOMotionActivityMovingGroundVehicle,%{public}d,cntIOMotionActivityMovingInPlace,%{public}d,cntIOMotionActivityMovingWithPurpose,%{public}d,cntIOMotionActivityStationary,%{public}d,", buf, 0x38u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022D4AB0);
      }
      uint64_t v100 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v100);
      if (v100 != (char *)buf) {
        free(v100);
      }
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    double v84 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      int v85 = *(_DWORD *)(a2 + 216);
      int v86 = *(_DWORD *)(a2 + 220);
      int v87 = *(_DWORD *)(a2 + 224);
      int v88 = *(_DWORD *)(a2 + 228);
      int v89 = *(_DWORD *)(a2 + 232);
      int v90 = *(_DWORD *)(a2 + 236);
      int v91 = *(_DWORD *)(a2 + 240);
      int v92 = *(_DWORD *)(a2 + 244);
      int v93 = *(_DWORD *)(a2 + 248);
      int v94 = *(_DWORD *)(a2 + 252);
      int v95 = *(_DWORD *)(a2 + 256);
      int v96 = *(_DWORD *)(a2 + 260);
      *(_DWORD *)int buf = 67243264;
      int v108 = a4;
      __int16 v109 = 1026;
      int v110 = v85;
      __int16 v111 = 1026;
      int v112 = v86;
      __int16 v113 = 1026;
      int v114 = v87;
      __int16 v115 = 1026;
      int v116 = v88;
      __int16 v117 = 1026;
      int v118 = v89;
      __int16 v119 = 1026;
      int v120 = v90;
      __int16 v121 = 1026;
      int v122 = v91;
      __int16 v123 = 1026;
      int v124 = v92;
      __int16 v125 = 1026;
      int v126 = v93;
      __int16 v127 = 1026;
      int v128 = v94;
      __int16 v129 = 1026;
      int v130 = v95;
      __int16 v131 = 1026;
      int v132 = v96;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,Mahalanobis distances,UncLT50m,visitContext,%{public}d,CountHypoDistLT2Sd,%{public}d,CountHypoDistGT2SdLT3Sd,%{public}d,CountHypoDistGT3SdLTThresholdSd,%{public}d,CountHypoDistGTThresholdSd,%{public}d,CountGPSFuserDistLT2Sd,%{public}d,CountGPSFuserDistGT2SdLT3Sd,%{public}d,CountGPSFuserDistGT3SdLTThresholdSd,%{public}d,CountGPSFuserDistGTThresholdSd,%{public}d,CountWiFiFuserDistLT2Sd,%{public}d,CountWiFiFuserDistGT2SdLT3Sd,%{public}d,CountWiFiFuserDistGT3SdLTThresholdSd,%{public}d,CountWiFiFuserDistGTThresholdSd,%{public}d,", buf, 0x50u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022D4AB0);
      }
      char v101 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v101);
      if (v101 != (char *)buf) {
        free(v101);
      }
    }
    if (a3) {
      *(double *)(a1 + 72) = sub_10016C458();
    }
    else {
      AnalyticsSendEventLazy();
    }
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    uint64_t v17 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67240192;
      int v108 = a4;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#LCFusionStats,submitMetrics,no data for visitContext,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022D4AB0);
      }
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::submitMetrics(const LCFuserInternalMetrics &, const BOOL, const LCFuserInternalMetricsVisitContext)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

void sub_10095B778(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

NSDictionary *sub_10095B784(uint64_t a1)
{
  v4[0] = @"CountBIODisplacementMoreThanExpected";
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 84)];
  v4[1] = @"CountBIOResetLargeGapInIOData";
  v5[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 80)];
  void v4[2] = @"CountDynamicsModeAirborneHighG";
  void v5[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 152)];
  void v4[3] = @"CountDynamicsModeAirborneLowG";
  v5[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 148)];
  void v4[4] = @"CountDynamicsModeGeneralPurposeMode";
  v5[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 120)];
  _DWORD v4[5] = @"CountDynamicsModeGroundVehicleFast";
  v5[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 144)];
  v4[6] = @"CountDynamicsModeGroundVehicleSlow";
  v5[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 140)];
  v4[7] = @"CountDynamicsModeLsqTestMode";
  v5[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 156)];
  v4[8] = @"CountDynamicsModeMovingPedestrian";
  v5[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 128)];
  v4[9] = @"CountDynamicsModeRunning";
  v5[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 136)];
  v4[10] = @"CountDynamicsModeStationaryKnown";
  v5[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 124)];
  v4[11] = @"CountDynamicsModeWalking";
  v5[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 132)];
  v4[12] = @"CountGPSFuserDistanceGT500m";
  v5[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 160)];
  v4[13] = @"CountGPSIsYieldingButNotSelected";
  v5[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 68)];
  v4[14] = @"CountHypoDistanceGT100mLT200mHypoUncLT50m";
  v5[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 176)];
  void v4[15] = @"CountHypoDistanceGT200mHypoUncLT50m";
  v5[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 180)];
  v4[16] = @"CountHypoDistanceGT50mLT100mHypoUncLT50m";
  v5[16] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 172)];
  v4[17] = @"CountHypoDistanceLT50mHypoUncLT50m";
  v5[17] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 168)];
  v4[18] = @"CountIODerivedMotionSpeedMatchMotionActivity";
  v5[18] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 88)];
  v4[19] = @"CountIODerivedMotionSpeedMisMatchMotionActivity";
  v5[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 92)];
  v4[20] = @"CountIOMotionActivityMovingGroundVehicle";
  v5[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 108)];
  v4[21] = @"CountIOMotionActivityMovingInPlace";
  v5[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 100)];
  v4[22] = @"CountIOMotionActivityMovingWithPurpose";
  v5[22] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 104)];
  v4[23] = @"CountIOMotionActivityStationary";
  v5[23] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 96)];
  v4[24] = @"CountLocRejectionReasonDuplicateLocation";
  v5[24] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 40)];
  v4[25] = @"CountLocRejectionReasonGrossOutlier";
  v5[25] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 48)];
  v4[26] = @"CountLocRejectionReasonHypothesisSelectionFailed";
  v5[26] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 64)];
  v4[27] = @"CountLocRejectionReasonInconsistentCellPosition";
  v5[27] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 56)];
  void v4[28] = @"CountLocRejectionReasonIndoorFavoringWiFiAP";
  v5[28] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 52)];
  v4[29] = @"CountLocRejectionReasonInvalidLocation";
  v5[29] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 36)];
  v4[30] = @"CountLocRejectionReasonLowAccuracyCellOrWiFiPosition";
  v5[30] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 60)];
  v4[31] = @"CountLocRejectionReasonOldLocation";
  v5[31] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 44)];
  v4[32] = @"CountLocRejectionReasonOther";
  v5[32] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 32)];
  v4[33] = @"CountOfHypothesisCreated";
  v5[33] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 76)];
  v4[34] = @"CountWiFiFuserDistanceGT500m";
  v5[34] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 164)];
  v5[35] = &off_102392C78;
  v4[35] = @"CumulativeDistanceWanderWhenStatic";
  v4[36] = @"LCFuserInternalMetricsVisitContext";
  v5[36] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  v4[37] = @"LCFuserInternalSignalEnvironmentForHomeVisit";
  v5[37] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 40)];
  v4[38] = @"LikelihoodOutlierRejectionCount";
  v5[38] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 72)];
  v4[39] = @"MaxEuclideanDistBtwnActiveHypothesis";
  v5[39] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 28)];
  v5[40] = &off_102392C78;
  v4[40] = @"MaxFusionHypothesisConvergenceSeconds";
  v4[41] = @"MaxIODerivedGroundSpeed";
  v5[41] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 112)];
  v4[42] = @"MaxLocDistanceWithIOMotionStationary";
  v5[42] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 116)];
  v4[43] = @"MaxMahalanobisDistBtwnActiveHypothesis";
  v5[43] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 24)];
  v4[44] = @"PctGPSFuserDistanceGT100mLT200mGPSUncLT50m";
  v5[44] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 52)];
  v4[45] = @"PctGPSFuserDistanceGT200mGPSUncLT50m";
  v5[45] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  v4[46] = @"PctGPSFuserDistanceGT50mLT100mGPSUncLT50m";
  v5[46] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 60)];
  v4[47] = @"PctGPSFuserDistanceLT50mGPSUncLT50m";
  v5[47] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
  v4[48] = @"PctOfFixesWithFourHypothesActive";
  v5[48] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 68)];
  v4[49] = @"PctOfFixesWithMoreThanFourHypothesActive";
  v5[49] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  v4[50] = @"PctOfFixesWithOneHypothesActive";
  v5[50] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 76)];
  v4[51] = @"PctOfFixesWithThreeHypothesActive";
  v5[51] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
  v4[52] = @"PctOfFixesWithTwoHypothesActive";
  v5[52] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  v4[53] = @"PctWiFiFuserDistanceGT100mLT200mFuserUncLT50m";
  v5[53] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
  v4[54] = @"PctWiFiFuserDistanceGT200mFuserUncLT50m";
  v5[54] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  v4[55] = @"PctWiFiFuserDistanceGT50mLT100mFuserUncLT50m";
  v5[55] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  v4[56] = @"PctWiFiFuserDistanceLT50mFuserUncLT50m";
  v5[56] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 100)];
  v4[57] = @"CountHypoDistanceGTThresholdSdHypoUncLT50m";
  v5[57] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 228)];
  v4[58] = @"CountHypoDistanceGT3SdLTThresholdHypoUncLT50m";
  v5[58] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 224)];
  v4[59] = @"CountHypoDistanceGT2SdLT3SdHypoUncLT50m";
  v5[59] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 220)];
  v4[60] = @"CountHypoDistanceLT2SdHypoUncLT50m";
  v5[60] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 216)];
  v4[61] = @"PctGPSFuserDistanceGTThresholdSdGPSUncLT50m";
  v5[61] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 104)];
  v4[62] = @"PctGPSFuserDistanceGT3SdLTThresholdGPSUncLT50m";
  v5[62] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 108)];
  v4[63] = @"PctGPSFuserDistanceGT2SdLT3SdGPSUncLT50m";
  v5[63] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 112)];
  v4[64] = @"PctGPSFuserDistanceLT2SdGPSUncLT50m";
  v5[64] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 116)];
  v4[65] = @"PctWiFiFuserDistanceGTThresholdSdFuserUncLT50m";
  v5[65] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 120)];
  v4[66] = @"PctWiFiFuserDistanceGT3SdLTThresholdFuserUncLT50m";
  v5[66] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 124)];
  v4[67] = @"PctWiFiFuserDistanceGT2SdLT3SdFuserUncLT50m";
  v5[67] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 128)];
  v4[68] = @"PctWiFiFuserDistanceLT2SdFuserUncLT50m";
  v5[68] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 132)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:69];
}

uint64_t sub_10095C074(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        uint64_t v7 = (uint64_t *)v2;
      }
      else {
        uint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      char v8 = *(unsigned char *)(v4 + 32);
      *(unsigned char *)(v4 + 32) = 1;
      switch(a2)
      {
        case 1:
          ++*(_DWORD *)(v4 + 64);
          break;
        case 2:
          ++*(_DWORD *)(v4 + 68);
          break;
        case 3:
          ++*(_DWORD *)(v4 + 72);
          break;
        case 4:
          ++*(_DWORD *)(v4 + 76);
          break;
        case 5:
          ++*(_DWORD *)(v4 + 80);
          break;
        case 6:
          ++*(_DWORD *)(v4 + 84);
          break;
        case 7:
          ++*(_DWORD *)(v4 + 88);
          break;
        case 8:
          ++*(_DWORD *)(v4 + 92);
          break;
        case 9:
          ++*(_DWORD *)(v4 + 96);
          break;
        default:
          *(unsigned char *)(v4 + 32) = v8;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_10095C1B0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 24);
    uint64_t v3 = result + 56;
    do
    {
      int v4 = *(_DWORD *)(v1 + 28);
      BOOL v5 = v4 < v2;
      if (v4 >= v2) {
        BOOL v6 = (uint64_t *)v1;
      }
      else {
        BOOL v6 = (uint64_t *)(v1 + 8);
      }
      if (!v5) {
        uint64_t v3 = v1;
      }
      uint64_t v1 = *v6;
    }
    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(unsigned char *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 100);
    }
  }
  return result;
}

uint64_t sub_10095C20C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 24);
    uint64_t v3 = result + 56;
    do
    {
      int v4 = *(_DWORD *)(v1 + 28);
      BOOL v5 = v4 < v2;
      if (v4 >= v2) {
        BOOL v6 = (uint64_t *)v1;
      }
      else {
        BOOL v6 = (uint64_t *)(v1 + 8);
      }
      if (!v5) {
        uint64_t v3 = v1;
      }
      uint64_t v1 = *v6;
    }
    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(unsigned char *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 104);
    }
  }
  return result;
}

uint64_t sub_10095C268(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if (v1)
  {
    int v2 = *(_DWORD *)(result + 24);
    uint64_t v3 = result + 56;
    do
    {
      int v4 = *(_DWORD *)(v1 + 28);
      BOOL v5 = v4 < v2;
      if (v4 >= v2) {
        BOOL v6 = (uint64_t *)v1;
      }
      else {
        BOOL v6 = (uint64_t *)(v1 + 8);
      }
      if (!v5) {
        uint64_t v3 = v1;
      }
      uint64_t v1 = *v6;
    }
    while (*v6);
    if (v3 != result + 56 && v2 >= *(_DWORD *)(v3 + 28))
    {
      *(unsigned char *)(v3 + 32) = 1;
      ++*(_DWORD *)(v3 + 108);
    }
  }
  return result;
}

uint64_t sub_10095C2C4(uint64_t result, double **a2, double a3)
{
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    int v4 = *(_DWORD *)(result + 24);
    uint64_t v5 = result + 56;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        char v8 = (uint64_t *)v3;
      }
      else {
        char v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 56 && v4 >= *(_DWORD *)(v5 + 28) && a3 > 0.0)
    {
      unsigned int v9 = *a2;
      unsigned int v10 = a2[1];
      if (*a2 != v10)
      {
        uint64_t result = 0x4059000000000000;
        do
        {
          double v11 = *v9;
          if (a3 <= 50.0)
          {
            BOOL v13 = v11 <= 0.0 || v11 > 50.0;
            unsigned int v12 = (_DWORD *)(v5 + 216);
            if (v13)
            {
              BOOL v14 = v11 <= 50.0 || v11 > 100.0;
              unsigned int v12 = (_DWORD *)(v5 + 220);
              if (v14)
              {
                if (v11 > 200.0 || v11 <= 100.0) {
                  unsigned int v12 = (_DWORD *)(v5 + 228);
                }
                else {
                  unsigned int v12 = (_DWORD *)(v5 + 224);
                }
              }
            }
          }
          else
          {
            unsigned int v12 = (_DWORD *)(v5 + 192);
            if (v11 <= 500.0) {
              goto LABEL_34;
            }
          }
          ++*v12;
          *(unsigned char *)(v5 + 32) = 1;
LABEL_34:
          ++v9;
        }
        while (v9 != v10);
      }
    }
  }
  return result;
}

uint64_t sub_10095C3C8(uint64_t result, double **a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        BOOL v7 = (uint64_t *)v2;
      }
      else {
        BOOL v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      char v8 = *a2;
      unsigned int v9 = a2[1];
      if (*a2 != v9)
      {
        uint64_t result = 0x4059000000000000;
        do
        {
          double v10 = v8[1];
          if (v10 > 0.0)
          {
            double v11 = *v8;
            if (v10 <= 50.0)
            {
              BOOL v13 = v11 <= 0.0 || v11 > 50.0;
              unsigned int v12 = (_DWORD *)(v4 + 232);
              if (v13)
              {
                BOOL v14 = v11 <= 50.0 || v11 > 100.0;
                unsigned int v12 = (_DWORD *)(v4 + 236);
                if (v14)
                {
                  if (v11 > 200.0 || v11 <= 100.0) {
                    unsigned int v12 = (_DWORD *)(v4 + 244);
                  }
                  else {
                    unsigned int v12 = (_DWORD *)(v4 + 240);
                  }
                }
              }
            }
            else
            {
              unsigned int v12 = (_DWORD *)(v4 + 196);
              if (v11 <= 500.0) {
                goto LABEL_34;
              }
            }
            ++*v12;
            *(unsigned char *)(v4 + 32) = 1;
          }
LABEL_34:
          v8 += 2;
        }
        while (v8 != v9);
      }
    }
  }
  return result;
}

uint64_t sub_10095C4D0(uint64_t result, double **a2, double a3)
{
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    int v4 = *(_DWORD *)(result + 24);
    uint64_t v5 = result + 56;
    do
    {
      int v6 = *(_DWORD *)(v3 + 28);
      BOOL v7 = v6 < v4;
      if (v6 >= v4) {
        char v8 = (uint64_t *)v3;
      }
      else {
        char v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 56 && v4 >= *(_DWORD *)(v5 + 28) && a3 > 0.0 && a3 <= 50.0)
    {
      unsigned int v9 = *a2;
      double v10 = a2[1];
      if (*a2 != v10)
      {
        *(unsigned char *)(v5 + 32) = 1;
        double v11 = (_DWORD *)(v5 + 264);
        unsigned int v12 = (_DWORD *)(v5 + 268);
        BOOL v13 = (_DWORD *)(v5 + 272);
        BOOL v14 = (_DWORD *)(v5 + 276);
        double v15 = *(double *)result;
        do
        {
          double v16 = *v9;
          BOOL v17 = *v9 <= 0.0 || v16 > v15;
          char v18 = v11;
          if (v17)
          {
            double v19 = *(double *)(result + 8);
            BOOL v20 = v16 <= v15 || v16 > v19;
            char v18 = v12;
            if (v20)
            {
              if (v16 <= v19 || (char v18 = v13, v16 > *(double *)(result + 16))) {
                char v18 = v14;
              }
            }
          }
          ++*v18;
          ++v9;
        }
        while (v9 != v10);
      }
    }
  }
  return result;
}

uint64_t sub_10095C5B4(uint64_t result, double **a2)
{
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 24);
    uint64_t v4 = result + 56;
    do
    {
      int v5 = *(_DWORD *)(v2 + 28);
      BOOL v6 = v5 < v3;
      if (v5 >= v3) {
        BOOL v7 = (uint64_t *)v2;
      }
      else {
        BOOL v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 56 && v3 >= *(_DWORD *)(v4 + 28))
    {
      char v8 = *a2;
      unsigned int v9 = a2[1];
      if (*a2 != v9)
      {
        do
        {
          double v10 = v8[1];
          if (v10 <= 50.0 || v10 > 0.0)
          {
            double v11 = *v8;
            double v12 = *(double *)result;
            BOOL v13 = *v8 <= 0.0 || v11 > v12;
            BOOL v14 = (_DWORD *)(v4 + 280);
            if (v13)
            {
              double v15 = *(double *)(result + 8);
              BOOL v16 = v11 <= v12 || v11 > v15;
              BOOL v14 = (_DWORD *)(v4 + 284);
              if (v16)
              {
                if (v11 <= v15 || (BOOL v14 = (_DWORD *)(v4 + 288), v11 > *(double *)(result + 16))) {
                  BOOL v14 = (_DWORD *)(v4 + 292);
                }
              }
            }
            ++*v14;
            *(unsigned char *)(v4 + 32) = 1;
          }
          v8 += 2;
        }
        while (v8 != v9);
      }
    }
  }
  return result;
}

void sub_10095C69C(uint64_t a1, int a2)
{
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022D4AB0);
  }
  uint64_t v4 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)int buf = 67240192;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedInAVisit,%{public}d,", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedInAVisit(const BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a2) {
    int v6 = 1;
  }
  else {
    int v6 = 2;
  }
  *(_DWORD *)(a1 + 24) = v6;
}

void sub_10095C864(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10095C870(uint64_t a1)
{
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022D4AB0);
  }
  uint64_t v2 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)int buf = 67240192;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedLikelyOutOfAVisit,%{public}d,", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    char v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedLikelyOutOfAVisit()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 == 3)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    int v5 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)int buf = 67240192;
      int v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedLikelyOutOfAVisit,Ignored,%{public}d,", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022D4AB0);
      }
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedLikelyOutOfAVisit()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) = v4;
    *(double *)(a1 + 32) = sub_10016C458();
    *(_DWORD *)(a1 + 24) = 4;
  }
}

void sub_10095CB8C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10095CB98(uint64_t a1)
{
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022D4AB0);
  }
  uint64_t v2 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)int buf = 67240192;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedOutOfAVisit,%{public}d,", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedOutOfAVisit()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)(a1 + 24) = 3;
}

void sub_10095CD54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10095CD60(uint64_t a1, int *a2)
{
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022D4AB0);
  }
  int v4 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 24);
    int v6 = *a2;
    *(_DWORD *)int buf = 67240448;
    int v9 = v5;
    __int16 v10 = 1026;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#LCFusionStats,feedSignalEnvironment,%{public}d,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022D4AB0);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusionStats::feedSignalEnvironment(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(_DWORD *)(a1 + 40) = *a2;
}

void sub_10095CF40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10095CF4C(id a1)
{
  qword_102419518 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t **sub_10095CF7C(uint64_t **result, int *a2, int *a3)
{
  int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    BOOL v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    __int16 v10 = result;
    int v11 = v8;
    double v12 = v8;
    if (v8)
    {
      int v11 = sub_1002FABD8((uint64_t)v8);
      while (a2 != a3)
      {
        sub_10095D084(v5, a2, (uint64_t)v8);
        if (v9)
        {
          char v8 = v11;
          double v12 = v11;
          if (!v11)
          {
            a2 += 67;
            break;
          }
          int v11 = sub_1002FABD8((uint64_t)v11);
        }
        else
        {
          char v8 = v12;
        }
        a2 += 67;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)sub_1002FAC2C((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)sub_10095D138(v5, a2, a2);
    a2 += 67;
  }
  return result;
}

void sub_10095D070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10095D084(uint64_t **a1, int *a2, uint64_t a3)
{
  int v3 = (uint64_t *)a3;
  int v6 = a1 + 1;
  int v5 = a1[1];
  int v7 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      int v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_9:
    *(_DWORD *)(a3 + 28) = v7;
    memcpy((void *)(a3 + 32), a2 + 1, 0x108uLL);
    sub_1000EDF90(a1, (uint64_t)v8, v6, v3);
  }
  return v3;
}

uint64_t *sub_10095D138(uint64_t **a1, int *a2, const void *a3)
{
  int v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_10:
    __int16 v10 = (uint64_t *)operator new(0x128uLL);
    memcpy((char *)v10 + 28, a3, 0x10CuLL);
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_10095D3B8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_30;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v15;
    }
    else if ((v6 >> 3) == 1)
    {
      String = (void *)PBReaderReadString();

      *(void *)(a1 + 8) = String;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

float sub_10095D90C(float a1)
{
  return sqrtf((float)(a1 * 9.8067) * 0.58) * 0.742;
}

uint64_t sub_10095D938(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_10095D9D0(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  *((void *)__dst + 6) = 0x100000002;
  *((_WORD *)__dst + 28) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst + 64, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 10) = *((void *)a3 + 2);
    *((_OWORD *)__dst + 4) = v7;
  }
  *((void *)__dst + 15) = 0;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  sub_10095E040((uint64_t)__dst);
  uint64_t v8 = *((void *)__dst + 15);
  if (!v8 || !sub_10014C3C0(v8))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
    }
    BOOL v9 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@TileData, CLWifiTileBlobsTable, not connected to wifi #tile header table", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
      }
      LOWORD(v45.__r_.__value_.__l.__data_) = 0;
      int v36 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiTileBlobsTable::CLWifiTileBlobsTable(const std::string &, const std::string &)", "%s\n", (const char *)v36);
      if (v36 != buf) {
        free(v36);
      }
    }
  }
  *((unsigned char *)&v37.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v37, "SELECT rowid,");
  int v10 = std::string::append(&v37, "TileDataOffsetBytes");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  double v12 = std::string::append(&v38, ",");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  unsigned int v14 = std::string::append(&v39, "SizeOfTileDataBytes");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  unint64_t v16 = std::string::append(&v40, " FROM ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = __dst[23];
  if (v18 >= 0) {
    double v19 = __dst;
  }
  else {
    double v19 = *(const std::string::value_type **)__dst;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = __dst[23];
  }
  else {
    std::string::size_type v20 = *((void *)__dst + 1);
  }
  unsigned int v21 = std::string::append(&v41, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  unsigned int v23 = std::string::append(&v42, " WHERE ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  unsigned int v25 = std::string::append(&v43, "TileX");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  unsigned int v27 = std::string::append(&v44, " = ? AND ");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  long long v29 = std::string::append(&v45, "TileY");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  int v31 = std::string::append(buf, " = ? LIMIT 1;");
  std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
  v46[0] = v31->__r_.__value_.__l.__size_;
  *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
  char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (__dst[119] < 0) {
    operator delete(*((void **)__dst + 12));
  }
  uint64_t v34 = v46[0];
  *((void *)__dst + 12) = v32;
  *((void *)__dst + 13) = v34;
  *(void *)(__dst + 111) = *(void *)((char *)v46 + 7);
  __dst[119] = v33;
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return __dst;
}

void sub_10095DEC0(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10095E040(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (!v1 || !(BOOL result = sub_10014C3C0(v1))) {
    sub_10095E0D8();
  }
  return result;
}

uint64_t sub_10095E0C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 120);
  if (result) {
    return sub_10014C3C0(result);
  }
  return result;
}

void sub_10095E0D8()
{
}

void sub_10095E56C(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10095E5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5 && sub_10014C3C0(v5))
  {
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_101D04970;
    strcpy(v25.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    int v6 = *(char *)(a1 + 23);
    if (v6 >= 0) {
      long long v7 = (const std::string::value_type *)a1;
    }
    else {
      long long v7 = *(const std::string::value_type **)a1;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a1 + 8);
    }
    BOOL v9 = std::string::append(&v25, v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    long long v11 = std::string::append(&v26, " (");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_10095EE88(0, (uint64_t)__p);
    if ((v24 & 0x80u) == 0) {
      long long v13 = __p;
    }
    else {
      long long v13 = (void **)__p[0];
    }
    if ((v24 & 0x80u) == 0) {
      std::string::size_type v14 = v24;
    }
    else {
      std::string::size_type v14 = (std::string::size_type)__p[1];
    }
    long long v15 = std::string::append(&v31, (const std::string::value_type *)v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    long long v17 = std::string::append(&v32, ") VALUES (?, ?, ?, ?, ?)");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t v28 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)unsigned int v27 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if ((char)v24 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v28 >= 0) {
      double v19 = v27;
    }
    else {
      double v19 = (void **)v27[0];
    }
    sub_10014D518(*(void *)(a1 + 120), (uint64_t)v19);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
  }
  std::string::size_type v20 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v32.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "@TileData, saveWifiTileBlobData, not connected to wifi #tile blobs table", (uint8_t *)&v32, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v32, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
    }
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    long long v22 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileBlobsTable::saveWifiTileBlobData(const CLWifiTileBlobsEntry &, std::optional<CLWifiTileParser::MemoryMappedFileHandle *>)", "%s\n", (const char *)v22);
    if (v22 != &v32) {
      free(v22);
    }
  }
  return 0;
}

void sub_10095ED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  sub_100960F14(&a39);
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10095EE88(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if (!a1 || LODWORD(qword_10247EF70[v4 + 1]) != 4)
    {
      uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
      if ((v5 & 0x80u) != 0) {
        uint64_t v5 = *(void *)(a2 + 8);
      }
      if (v5)
      {
        *((unsigned char *)&v10.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v10, ", ");
        int v6 = std::string::append(&v10, (const std::string::value_type *)qword_10247EF70[v4]);
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        int64_t v12 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (v12 >= 0) {
          std::string::size_type v8 = __p;
        }
        else {
          std::string::size_type v8 = (void **)__p[0];
        }
        if (v12 >= 0) {
          std::string::size_type v9 = HIBYTE(v12);
        }
        else {
          std::string::size_type v9 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)a2, (const std::string::value_type *)v8, v9);
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::append((std::string *)a2, (const std::string::value_type *)qword_10247EF70[v4]);
      }
    }
    v4 += 6;
  }
  while (v4 != 30);
}

void sub_10095EFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_10095EFF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  int v3 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    int v3 = (void *)*v3;
  }
  sub_10014D518(v2, (uint64_t)v3);
}

void sub_10095F278(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10095F2C0(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[16] = 0;
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3 && sub_10014C3C0(v3))
  {
    *((unsigned char *)&v38.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v38, "SELECT ");
    sub_10095EE88(1, (uint64_t)__p);
    if ((v37 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v37 & 0x80u) == 0) {
      std::string::size_type v5 = v37;
    }
    else {
      std::string::size_type v5 = (std::string::size_type)__p[1];
    }
    int v6 = std::string::append(&v38, (const std::string::value_type *)v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    char v35 = 6;
    strcpy(__s, " FROM ");
    std::string::size_type v8 = std::string::append(&v39, __s, 6uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = *(char *)(a1 + 23);
    if (v10 >= 0) {
      long long v11 = (const std::string::value_type *)a1;
    }
    else {
      long long v11 = *(const std::string::value_type **)a1;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a1 + 8);
    }
    long long v13 = std::string::append(&v40, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    char v33 = 7;
    strcpy(v32, " WHERE ");
    long long v15 = std::string::append(&v41, v32, 7uLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    long long v17 = std::string::append(&v42, "TileX");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v31 = 7;
    strcpy(v30, "=? AND ");
    double v19 = std::string::append(&v43, v30, 7uLL);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v44, "TileY");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    char v29 = 2;
    strcpy(v28, "=?");
    unsigned int v23 = std::string::append(&v45, v28, 2uLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v47 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)int buf = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v29 < 0) {
      operator delete(*(void **)v28);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (v31 < 0) {
      operator delete(*(void **)v30);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(*(void **)v32);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (v35 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if ((char)v37 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (v47 >= 0) {
      std::string v25 = buf;
    }
    else {
      std::string v25 = *(uint8_t **)buf;
    }
    sub_10014D518(*(void *)(a1 + 120), (uint64_t)v25);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
  }
  std::string v26 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "@TileData, selectBlobDataByTileXY, not connected to wifi #tile data table", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
    }
    LOWORD(v45.__r_.__value_.__l.__data_) = 0;
    unsigned int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<CLWifiTileBlobsEntry> CLWifiTileBlobsTable::selectBlobDataByTileXY(const WifiTileXY &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
}

void sub_10095F864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  if (a62 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10095F9E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2 && sub_10014C3C0(v2))
  {
    *((unsigned char *)&v22.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v22, "DELETE FROM ");
    int v3 = *(char *)(a1 + 23);
    if (v3 >= 0) {
      uint64_t v4 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v4 = *(const std::string::value_type **)a1;
    }
    if (v3 >= 0) {
      std::string::size_type v5 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v5 = *(void *)(a1 + 8);
    }
    int v6 = std::string::append(&v22, v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v8 = std::string::append(&v23, " WHERE ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = std::string::append(&v24, "TileX");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v12 = std::string::append(&v25, " = ? AND ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = std::string::append(&v26, "TileY");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    long long v16 = std::string::append(&v29, " = ? ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v28 = v16->__r_.__value_.__r.__words[2];
    long long __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (v28 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    sub_10014D518(*(void *)(a1 + 120), (uint64_t)p_p);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
  }
  double v19 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v29.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@TileData, deleteBlobDataByTileXY, not connected to wifi #tile blob data table", (uint8_t *)&v29, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v29, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
    }
    LOWORD(__p) = 0;
    uint64_t v21 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileBlobsTable::deleteBlobDataByTileXY(const WifiTileXY &)", "%s\n", (const char *)v21);
    if (v21 != &v29) {
      free(v21);
    }
  }
  return 0;
}

void sub_10095FF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100960004(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v7 = a2[1];
  if (*a2 == v7) {
    goto LABEL_12;
  }
  sub_100960F98(a6, (v7 - *a2) >> 3);
  long long v13 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    long long v13 = *(const char **)a1;
  }
  uint64_t v14 = *(void *)(a1 + 120);
  long long v15 = operator new(0x30uLL);
  *long long v15 = off_1022D4BB0;
  v15[1] = a1;
  void v15[2] = a2;
  v15[3] = a6;
  *((_DWORD *)v15 + 8) = a4;
  *((_DWORD *)v15 + 9) = a5;
  v15[5] = &v19;
  uint64_t v21 = v15;
  int v16 = sub_100600468(v14, "main", v13, "TileData", a3, 1, (uint64_t)buf);
  sub_100960F14(buf);
  if (v16)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
    }
    long long v17 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Failed to read wifi tile successfully", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
      }
      long long v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::vector<std::optional<CLTilesManager_Type::AccessPointEntry>> CLWifiTileBlobsTable::findMacAddresses(const std::vector<CLMacAddress> &, int, int, int)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  if (0x2E8BA2E8BA2E8BA3 * (a6[1] - *a6) != (uint64_t)(a2[1] - *a2) >> 3)
  {
    sub_101A74A04();
    abort_report_np();
    __break(1u);
LABEL_12:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_1009602C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  long long v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009602FC(uint64_t a1)
{
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v26, "SELECT rowid, ");
  uint64_t v2 = std::string::append(&v26, "TileDataOffsetBytes");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v27, ", ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v28, "SizeOfTileDataBytes");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v8 = std::string::append(&v29, " FROM ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a1 + 23);
  if (v10 >= 0) {
    long long v11 = (const std::string::value_type *)a1;
  }
  else {
    long long v11 = *(const std::string::value_type **)a1;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a1 + 8);
  }
  long long v13 = std::string::append(&v30, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = std::string::append(&v31, " WHERE ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  long long v17 = std::string::append(&v32, "TileX");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  char v19 = std::string::append(&v33, " = ? AND ");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  uint64_t v21 = std::string::append(&v37, "TileY");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::string v23 = std::string::append(&v36, " = ?;");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  int64_t v35 = v23->__r_.__value_.__r.__words[2];
  long long v34 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v35 >= 0) {
    std::string v25 = &v34;
  }
  else {
    std::string v25 = (long long *)v34;
  }
  sub_10014D518(*(void *)(a1 + 120), (uint64_t)v25);
}

void sub_100960A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  sub_100960F14((void *)(v56 - 144));
  uint64_t v58 = (uint64_t)__p;
  long long __p = 0;
  if (v58) {
    sub_100436D2C((uint64_t)&__p, v58);
  }
  uint64_t v59 = *(void *)(v56 - 208);
  *(void *)(v56 - 208) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  if (*(char *)(v56 - 153) < 0) {
    operator delete(*(void **)(v56 - 176));
  }
  _Unwind_Resume(a1);
}

void sub_100960C08(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100960C38(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100960C6C()
{
}

__n128 sub_100960C80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022D4B20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100960CD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022D4B20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100960D0C(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = sqlite3_blob_write(*a2, *(const void **)(**(void **)(a1 + 16) + 40), **(_DWORD **)(a1 + 24), 0);
  if (v3)
  {
    int v4 = v3;
    sub_1005F7AF4(*(void *)(v2 + 120), v3);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
    }
    long long v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 1026;
      int v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"@TileData, wifi, failed to write #blob data to #tile #database\", \"code\":%{public}d}", (uint8_t *)&v7, 0x18u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
      }
    }
    int v6 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 1026;
      int v12 = v4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "@TileData, wifi, failed to write #blob data to #tile #database", "{\"msg%{public}.0s\":\"@TileData, wifi, failed to write #blob data to #tile #database\", \"code\":%{public}d}", (uint8_t *)&v7, 0x18u);
    }
  }
}

uint64_t sub_100960EC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100960F08()
{
}

void *sub_100960F14(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100960F98(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100961014(a1, a2);
    int v4 = (unsigned char *)a1[1];
    long long v5 = &v4[11 * a2];
    do
    {
      *int v4 = 0;
      v4[10] = 0;
      v4 += 11;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_100960FF8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100961014(void *a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2) {
    sub_1001D7FD4();
  }
  __n128 result = (char *)sub_10096106C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[11 * v4];
  return result;
}

void *sub_10096106C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2) {
    sub_1001D7FA0();
  }
  return operator new(11 * a2);
}

void sub_1009610BC()
{
}

__n128 sub_1009610D0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_1022D4BB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_10096112C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022D4BB0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10096116C(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v2 = **(void **)(a1 + 16);
  if (*(void *)(*(void *)(a1 + 16) + 8) != v2)
  {
    unint64_t v4 = 0;
    long long v5 = *a2;
    uint64_t v23 = *(void *)(a1 + 8);
    do
    {
      int v6 = *(_DWORD *)(a1 + 32);
      unint64_t v7 = (*(_DWORD *)(a1 + 36) + ~v6) / 0xAuLL;
      if ((v7 & 0x80000000) != 0)
      {
LABEL_14:
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        int v17 = 0;
LABEL_23:
        unint64_t v21 = v16 | v15;
        uint64_t v22 = **(void **)(a1 + 24) + 11 * v4;
        *(void *)uint64_t v22 = v21;
        *(unsigned char *)(v22 + 10) = BYTE2(v17);
        *(_WORD *)(v22 + 8) = v17;
      }
      else
      {
        int v8 = 0;
        __int16 v9 = (void *)(v2 + 8 * v4);
        unint64_t v10 = (*(_DWORD *)(a1 + 36) + ~v6) / 0xAuLL;
        while (1)
        {
          int v11 = (v7 & 0x80000000) == 0 ? v7 : (int)v7 + 1;
          int v12 = v11 >> 1;
          int v13 = sqlite3_blob_read(v5, &Z, 10, v6 + 10 * (v11 >> 1));
          if (v13) {
            break;
          }
          uint64_t Z = sub_1010AC608((uint64_t)&Z);
          unsigned __int16 v26 = v14;
          unint64_t v24 = sub_100B390EC((unsigned __int8 *)&Z);
          if (sub_100B39178(&v24, v9))
          {
            unint64_t v15 = Z & 0xFFFFFFFFFFFFFF00;
            int v17 = v26 | 0x10000;
            uint64_t v16 = Z;
            goto LABEL_23;
          }
          if (sub_100B391A0(&v24, v9)) {
            int v8 = v12 + 1;
          }
          else {
            LODWORD(v10) = v12 - 1;
          }
          LODWORD(v7) = v8 + v10;
          if (v8 > (int)v10) {
            goto LABEL_14;
          }
        }
        int v18 = v13;
        sub_1005F7AF4(*(void *)(v23 + 120), v13);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
        }
        char v19 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
        {
          uint64_t Z = 68289282;
          unsigned __int16 v26 = 2082;
          std::string v27 = "";
          __int16 v28 = 1026;
          int v29 = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"@TileData, wifi, failed to read #blob data from #tile #database\", \"code\":%{public}d}", (uint8_t *)&Z, 0x18u);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
          }
        }
        long long v20 = qword_1024193B8;
        if (os_signpost_enabled((os_log_t)qword_1024193B8))
        {
          uint64_t Z = 68289282;
          unsigned __int16 v26 = 2082;
          std::string v27 = "";
          __int16 v28 = 1026;
          int v29 = v18;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "@TileData, wifi, failed to read #blob data from #tile #database", "{\"msg%{public}.0s\":\"@TileData, wifi, failed to read #blob data from #tile #database\", \"code\":%{public}d}", (uint8_t *)&Z, 0x18u);
        }
      }
      ++v4;
      uint64_t v2 = **(void **)(a1 + 16);
    }
    while (v4 < (*(void *)(*(void *)(a1 + 16) + 8) - v2) >> 3);
  }
}

uint64_t sub_100961464(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1009614A4()
{
}

void sub_1009614B4()
{
}

__n128 sub_1009614C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022D4C30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10096151C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022D4C30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100961554(uint64_t a1, sqlite3_blob **a2)
{
  uint64_t v3 = **(void **)(a1 + 24);
  if (*(void *)(v3 + 8) == *(void *)v3) {
    sub_100273D6C();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = sqlite3_blob_read(*a2, *(void **)v3, **(_DWORD **)(a1 + 16), 0);
  if (v5)
  {
    sub_1005F7AF4(*(void *)(v4 + 120), v5);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
    }
    int v6 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"@TileData, wifi, failed to incrementally read contents of blob from #tile header\"}", (uint8_t *)&v10, 0x12u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022D4AD0);
      }
    }
    unint64_t v7 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      int v10 = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "@TileData, wifi, failed to incrementally read contents of blob from #tile header", "{\"msg%{public}.0s\":\"@TileData, wifi, failed to incrementally read contents of blob from #tile header\"}", (uint8_t *)&v10, 0x12u);
    }
    int v8 = *(uint64_t **)(a1 + 24);
    uint64_t v9 = *v8;
    *int v8 = 0;
    if (v9) {
      sub_100436D2C((uint64_t)v8, v9);
    }
  }
}

uint64_t sub_100961718(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100961758()
{
}

void sub_100961764()
{
  qword_10247EF70 = (uint64_t)"TileX";
  dword_10247EF78 = 1;
  word_10247EF7C = 1;
  byte_10247EF80 = 0;
  byte_10247EF98 = 0;
  qword_10247EFA0 = (uint64_t)"TileY";
  dword_10247EFA8 = 1;
  word_10247EFAC = 1;
  byte_10247EFB0 = 0;
  byte_10247EFC8 = 0;
  qword_10247EFD0 = (uint64_t)"TileDataOffsetBytes";
  dword_10247EFD8 = 1;
  word_10247EFDC = 0;
  byte_10247EFE0 = 0;
  byte_10247EFF8 = 0;
  qword_10247F000 = (uint64_t)"SizeOfTileDataBytes";
  dword_10247F008 = 1;
  word_10247F00C = 0;
  byte_10247F010 = 0;
  byte_10247F028 = 0;
  qword_10247F030 = (uint64_t)"TileData";
  dword_10247F038 = 4;
  word_10247F03C = 0;
  byte_10247F040 = 0;
  byte_10247F058 = 0;
  qword_10247F060 = 0;
  dword_10247F068 = 5;
  word_10247F06C = 0;
  byte_10247F070 = 0;
  byte_10247F088 = 0;
}

BOOL sub_10096181C(void *a1, _WORD *a2)
{
  if ((unint64_t)[a1 length] > 1)
  {
    int v8 = *(unsigned __int16 *)[a1 bytes];
    if (a2)
    {
      *a2 = v8;
    }
    else
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      uint64_t v9 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Invalid version parameter.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
        }
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    return v8 == 2;
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
    }
    uint64_t v4 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "GYTT data not long enough to get version properly", buf, 2u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::isGYTTVersionValid(NSData *, UInt16 *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100961B1C(void *a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, buf);
  int v3 = sub_1004D0164(*(uint64_t *)&buf[0], "GYTTOverride", &cf);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v3)
  {
    CFRetain(cf);
  }
  else
  {
    CFStringRef v24 = @"name";
    CFStringRef v25 = @"gyro";
    uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    CFStringRef v22 = @"IOPropertyMatch";
    uint64_t v23 = v4;
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1]);
    io_object_t v6 = MatchingService;
    if (!MatchingService)
    {
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022D4CC0);
      }
      unsigned __int16 v14 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Service doesn't exist", (uint8_t *)buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022D4CC0);
      }
      goto LABEL_57;
    }
    CFTypeRef cf = IORegistryEntryCreateCFProperty(MatchingService, @"gyro-temp-table", kCFAllocatorDefault, 0);
    IOObjectRelease(v6);
  }
  if (!cf || (CFTypeID v7 = CFGetTypeID(cf), v7 != CFDataGetTypeID()))
  {
    if ((sub_1000A16E8() & 0x80000) != 0)
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      int v13 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No optional GYTT data found", (uint8_t *)buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_30;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      LOWORD(v19) = 0;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v12);
    }
    else
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      int v11 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Cannot get GYTT property", (uint8_t *)buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_30;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      LOWORD(v19) = 0;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v12);
    }
    if (v12 != (char *)buf) {
      free(v12);
    }
LABEL_30:
    uint64_t result = (uint64_t)cf;
    if (!cf) {
      return result;
    }
    CFRelease(cf);
    return 0;
  }
  CFTypeRef v8 = cf;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
  }
  uint64_t v9 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 138412290;
    *(void *)((char *)buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "GYTT data %@", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
    }
    int v19 = 138412290;
    CFTypeRef v20 = v8;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (a1)
  {
    *a1 = v8;
    return 1;
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
  }
  unint64_t v15 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Invalid GYTT parameter data.", (uint8_t *)buf, 2u);
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
    }
LABEL_57:
    LOWORD(v19) = 0;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    return 0;
  }
  return result;
}

void sub_100962288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009622A8(void *a1)
{
  uint64_t v2 = (char *)[a1 bytes];
  id result = [a1 length];
  if ((unint64_t)result >= 4)
  {
    unint64_t v4 = (unint64_t)result;
    uint64_t v5 = 0;
    do
    {
      unsigned int v6 = bswap32(*(_DWORD *)&v2[v5]);
      id result = [a1 replaceBytesInRange:v5 withBytes:&v6 length:4];
      v5 += 4;
      v4 -= 4;
    }
    while (v4 > 3);
  }
  return result;
}

id sub_10096232C(void *a1)
{
  uint64_t v2 = [a1 bytes];
  __int16 v3 = v2[2];
  __int16 v6 = -v2[3];
  __int16 v5 = v3;
  [a1 replaceBytesInRange:4 withBytes:&v6 length:2];
  return [a1 replaceBytesInRange:6 withBytes:&v5 length:2];
}

void sub_10096239C(void **a1)
{
  std::string v40 = 0;
  if (sub_100961B1C(&v40))
  {
    unsigned __int16 v39 = -1;
    if (sub_10096181C(v40, &v39))
    {
LABEL_3:
      uint64_t v2 = (char *)[v40 bytes];
      __int16 v3 = (char *)[v40 length];
      if ((unint64_t)(v3 - 10) > 0xFFFFFFFFFFFFFFF7)
      {
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v5 = 2;
        do
        {
          uint64_t v38 = *(void *)&v2[v5];
          float v6 = (float)(__int16)v38 * 0.0039062;
          if (v6 > 100.0)
          {
            if (qword_1024190B0 != -1) {
              dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
            }
            CFTypeID v7 = off_1024190B8;
            if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 134349056;
              *(double *)uint64_t v51 = v6;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid GYTT temperature %{public}f", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
              }
              int v41 = 134349056;
              *(double *)std::string v42 = v6;
              __int16 v28 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v28);
              if (v28 != (char *)buf) {
                free(v28);
              }
            }
          }
          float v8 = (float)SWORD1(v38) * 0.0039062;
          float v9 = (float)SWORD2(v38) * 0.0039062;
          float v10 = (float)SHIWORD(v38) * 0.0039062;
          if (v38)
          {
            if (qword_1024190B0 != -1) {
              dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
            }
            int v11 = off_1024190B8;
            if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 134219008;
              *(void *)uint64_t v51 = v4;
              *(_WORD *)&v51[8] = 2048;
              double v52 = v6;
              __int16 v53 = 2048;
              double v54 = v8;
              __int16 v55 = 2048;
              double v56 = v9;
              __int16 v57 = 2048;
              double v58 = v10;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Reading GYTT point %zu: %f,%f,%f,%f", buf, 0x34u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
              }
              int v41 = 134219008;
              *(void *)std::string v42 = v4;
              *(_WORD *)&v42[8] = 2048;
              double v43 = v6;
              __int16 v44 = 2048;
              double v45 = v8;
              __int16 v46 = 2048;
              double v47 = v9;
              __int16 v48 = 2048;
              double v49 = v10;
              std::string v27 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v27);
              if (v27 != (char *)buf) {
                free(v27);
              }
            }
            __int16 v12 = (float *)a1[1];
            unint64_t v13 = (unint64_t)a1[2];
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v17 = ((char *)v12 - (unsigned char *)*a1) >> 4;
              unint64_t v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 60) {
                sub_1001D7FD4();
              }
              uint64_t v19 = v13 - (void)*a1;
              if (v19 >> 3 > v18) {
                unint64_t v18 = v19 >> 3;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v18;
              }
              unint64_t v21 = (char *)sub_1000C571C((uint64_t)(a1 + 2), v20);
              uint64_t v23 = (float *)&v21[16 * v17];
              *uint64_t v23 = v6;
              v23[1] = v8;
              v23[2] = v9;
              v23[3] = v10;
              CFStringRef v25 = (char *)*a1;
              CFStringRef v24 = (char *)a1[1];
              unsigned __int16 v26 = v23;
              if (v24 != *a1)
              {
                do
                {
                  *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
                  v26 -= 4;
                  v24 -= 16;
                }
                while (v24 != v25);
                CFStringRef v24 = (char *)*a1;
              }
              unsigned __int16 v14 = v23 + 4;
              *a1 = v26;
              a1[1] = v23 + 4;
              a1[2] = &v21[16 * v22];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *__int16 v12 = v6;
              v12[1] = v8;
              unsigned __int16 v14 = v12 + 4;
              v12[2] = v9;
              uint64_t v12[3] = v10;
            }
            a1[1] = v14;
            ++v4;
          }
          else
          {
            if (qword_1024190B0 != -1) {
              dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
            }
            unint64_t v15 = off_1024190B8;
            if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 134219008;
              *(void *)uint64_t v51 = v4;
              *(_WORD *)&v51[8] = 2048;
              double v52 = v6;
              __int16 v53 = 2048;
              double v54 = v8;
              __int16 v55 = 2048;
              double v56 = v9;
              __int16 v57 = 2048;
              double v58 = v10;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Skipping GYTT point %zu: %f,%f,%f,%f", buf, 0x34u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
              }
              int v41 = 134219008;
              *(void *)std::string v42 = v4;
              *(_WORD *)&v42[8] = 2048;
              double v43 = v6;
              __int16 v44 = 2048;
              double v45 = v8;
              __int16 v46 = 2048;
              double v47 = v9;
              __int16 v48 = 2048;
              double v49 = v10;
              uint64_t v16 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v16);
              if (v16 != (char *)buf) {
                free(v16);
              }
            }
          }
          v5 += 8;
        }
        while ((unint64_t)&v3[-v5] > 7);
      }
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      std::string v32 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134217984;
        *(void *)uint64_t v51 = v4;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%zu GYTT points found", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_86;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      int v41 = 134217984;
      *(void *)std::string v42 = v4;
      std::string v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v33);
LABEL_97:
      if (v33 != (char *)buf) {
        free(v33);
      }
LABEL_86:

      return;
    }
    sub_100103240();
    if (sub_1000B5AD4() - 191 >= 2)
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      long long v34 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 67240448;
        *(_DWORD *)uint64_t v51 = v39;
        *(_WORD *)&v51[4] = 1026;
        *(_DWORD *)&v51[6] = 2;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "GYTT version (%{public}u) does not match expected version (%{public}u)", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_86;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 == -1) {
        goto LABEL_96;
      }
    }
    else
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      std::string v30 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Attempting GYTT recovery!", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
        }
        LOWORD(v41) = 0;
        std::string v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      id v31 = [v40 mutableCopy];

      std::string v40 = v31;
      sub_1009622A8(v31);
      if (sub_10096181C(v40, &v39))
      {
        sub_100103240();
        if (sub_1000B5AD4() - 191 <= 1) {
          sub_10096232C(v40);
        }
        goto LABEL_3;
      }
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
      }
      int64_t v35 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 67240448;
        *(_DWORD *)uint64_t v51 = v39;
        *(_WORD *)&v51[4] = 1026;
        *(_DWORD *)&v51[6] = 2;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "After recovery, GYTT version (%{public}u) still does not match expected version (%{public}u)", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_86;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 == -1)
      {
LABEL_96:
        int v41 = 67240448;
        *(_DWORD *)std::string v42 = v39;
        *(_WORD *)&v42[4] = 1026;
        *(_DWORD *)&v42[6] = 2;
        std::string v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v33);
        goto LABEL_97;
      }
    }
    dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
    goto LABEL_96;
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
  }
  int v29 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to read GYTT.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D4CA0);
    }
    LOWORD(v41) = 0;
    std::string v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationUtils::readFactoryGYTT(std::vector<std::pair<float, CLMotionTypeRotationRate>> &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
}

void sub_10096311C(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_10096314C(id a1)
{
  qword_102418FE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void *sub_10096317C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247F098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247F098))
  {
    __cxa_guard_release(&qword_10247F098);
  }
  return &unk_10247F090;
}

uint64_t sub_1009631C8()
{
  return AnalyticsSendEventLazy();
}

uint64_t sub_1009631D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1022D4CF0;
  sub_10077B4F4(a1 + 8, a3);
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_100963228(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return 1;
  }
  __int16 v3 = operator new(4uLL);
  long long __p = v3;
  _DWORD *v3 = 0;
  float v8 = v3 + 1;
  float v9 = v3 + 1;
  __int16 v12 = 0;
  *(_OWORD *)int v11 = xmmword_101D1E250;
  memset(&v11[2], 0, 135);
  long long v13 = xmmword_101D1E250;
  uint64_t v14 = 0;
  int v15 = 0;
  v17[0] = 0;
  uint64_t v16 = 0;
  *(void *)((char *)v17 + 5) = 0;
  *(void *)((char *)&v17[1] + 6) = 0;
  char v18 = 0;
  memset(&v17[3], 0, 24);
  long long v19 = xmmword_101D1E250;
  uint64_t v20 = 0;
  int v21 = 0;
  unint64_t v22 = 0xFFEFFFFFFFFFFFFFLL;
  int v33 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  int v28 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v37 = 0;
  int v38 = 0;
  uint64_t v44 = 0;
  __int16 v45 = 0;
  int v50 = 0;
  int v43 = 0;
  long long v42 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  char v48 = 0;
  memset(v49, 0, sizeof(v49));
  unint64_t v51 = 0xFFEFFFFFFFFFFFFFLL;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  uint64_t v71 = 0;
  unint64_t v72 = 0xFFEFFFFFFFFFFFFFLL;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  unint64_t v77 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v78 = 0;
  int v79 = 0;
  uint64_t v80 = 0;
  char v81 = 0;
  unint64_t v82 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v84 = 0;
  uint64_t v83 = 0;
  uint64_t v85 = 0x80000000800000;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  long long v88 = xmmword_101D1E260;
  uint64_t v89 = 0x80000000800000;
  long long v90 = 0u;
  long long v91 = 0u;
  uint64_t v92 = 0;
  unint64_t v93 = 0xFFEFFFFFFFFFFFFFLL;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  int v100 = 0;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v102 = 0;
  int v103 = 0;
  unint64_t v104 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v105 = 7;
  unint64_t v106 = 0xFFEFFFFFFFFFFFFFLL;
  char v107 = 0;
  uint64_t v109 = 0;
  uint64_t v108 = 0;
  uint64_t v110 = 0;
  uint64_t v1 = sub_100174478(*(double **)(a1 + 40), &__p, (uint64_t)v11);
  if (v1)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022D4D18);
    }
    uint64_t v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Started Tier2 smoother.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022D4D18);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutLabeler::startTier2SmootherIfNecessary()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100052E44((uint64_t)v11, (uint64_t)buf);
    operator new();
  }
  if (__p)
  {
    float v8 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1009636A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009636E4(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022D4D18);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped Tier2 smoother.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022D4D18);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutLabeler::stopTier2Smoother()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result)
  {
    *(void *)(result + 2760) = off_1022F3E40;
    operator delete();
  }
  return result;
}

void *sub_1009638BC(void *a1)
{
  *a1 = off_1022D4CF0;
  sub_1009636E4((uint64_t)a1);
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    *(void *)(v2 + 2760) = off_1022F3E40;
    operator delete();
  }
  sub_1006ADDD8(a1 + 1);
  return a1;
}

void sub_100963950(void *a1)
{
  sub_1009638BC(a1);

  operator delete();
}

uint64_t sub_100963988(uint64_t a1)
{
  uint64_t result = sub_100963228(a1);
  if (result)
  {
    uint64_t result = sub_1006BEF3C(*(void *)(a1 + 48), (uint64_t)&v5);
    if (result)
    {
      memset(&v33[8], 0, 192);
      long long v31 = v5;
      long long v32 = v6;
      *(void *)int v33 = v7;
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022D4D18);
      }
      __int16 v3 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 67109376;
        int v28 = DWORD2(v5);
        __int16 v29 = 1024;
        int v30 = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Tier2Smoothed,%d,Confidence,%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022D4D18);
        }
        int v23 = 67109376;
        int v24 = DWORD2(v5);
        __int16 v25 = 1024;
        int v26 = v6;
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWorkoutLabeler::update()", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
      long long v20 = *(_OWORD *)&v33[160];
      long long v21 = *(_OWORD *)&v33[176];
      uint64_t v22 = *(void *)&v33[192];
      long long v16 = *(_OWORD *)&v33[96];
      long long v17 = *(_OWORD *)&v33[112];
      long long v18 = *(_OWORD *)&v33[128];
      long long v19 = *(_OWORD *)&v33[144];
      long long v12 = *(_OWORD *)&v33[32];
      long long v13 = *(_OWORD *)&v33[48];
      long long v14 = *(_OWORD *)&v33[64];
      long long v15 = *(_OWORD *)&v33[80];
      long long v8 = v31;
      long long v9 = v32;
      long long v10 = *(_OWORD *)v33;
      long long v11 = *(_OWORD *)&v33[16];
      return sub_10077AD10(a1 + 8, 4);
    }
  }
  return result;
}

void sub_100963C1C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100963C4C()
{
  sub_100103240();
  if (sub_10010145C()) {
    operator new();
  }
  sub_100103240();
  if (sub_10016CCBC()) {
    operator new();
  }
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1022D4D38);
  }
  uint64_t v0 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Indoor outdoor detection running on unsupported platform, defaulting to watch version", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022D4D38);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static std::unique_ptr<CLIndoorOutdoorDetectorInterface> CLIndoorOutdoorDetectorInterface::create(CLOutdoorSources &, CLIndoorOutdoorProtocol *)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  operator new();
}

void sub_100963EA8()
{
}

void sub_100963EDC(id a1)
{
  qword_1024192A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

BOOL sub_100964174(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            long long v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            long long v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
            goto LABEL_40;
          }
        }
        long long v18 = &OBJC_IVAR___ALCMCoarseElevation__elevationAscended;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + *v18) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        long long v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        long long v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
        goto LABEL_40;
      }
    }
    long long v18 = &OBJC_IVAR___ALCMCoarseElevation__source;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100964720()
{
  if (qword_10247F0A0 != -1) {
    dispatch_once(&qword_10247F0A0, &stru_1022D4D58);
  }
  return qword_10248A718;
}

void sub_100964764(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (*(void *)(a1 + 48) == a2)
  {
    if (a4 == 30)
    {
      __int16 v7 = *(_WORD *)(a3 + 7);
      unsigned __int8 v8 = a3[17];
      int v9 = *(_DWORD *)(a3 + 26);
      *(void *)int buf = *(void *)(a3 + 9);
      *(_WORD *)&buf[20] = v7;
      unsigned __int8 v31 = v8;
      *(void *)&uint8_t buf[8] = *(void *)(a3 + 18);
      *(_DWORD *)&uint8_t buf[16] = v9;
      *(void *)long long v27 = sub_1000D3D90(*(unint64_t *)buf);
      int v10 = buf;
      uint64_t v11 = a1;
      uint64_t v12 = 0;
      uint64_t v13 = 23;
LABEL_13:
      sub_1000E7BA0(v11, v12, (uint64_t)v10, v13);
      return;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
    }
    unint64_t v15 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = a4;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = 30;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Bad motion report input %ld, expected %lu", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1)
    {
LABEL_25:
      *(_DWORD *)long long v27 = 134218240;
      *(void *)&v27[4] = a4;
      __int16 v28 = 2048;
      uint64_t v29 = 30;
LABEL_64:
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKeyboardMotionNotifier::onIoHidReportBounce(CLHidDevice *, uint8_t *, CFIndex)", "%s\n", v23);
      if (v23 != buf) {
        free(v23);
      }
      return;
    }
LABEL_72:
    dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
    goto LABEL_25;
  }
  if (*(void *)(a1 + 40) == a2)
  {
    if (!a4)
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
      }
      char v16 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Empty keyboard device report input", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
        }
        *(_WORD *)long long v27 = 0;
        goto LABEL_64;
      }
      return;
    }
    int v14 = *a3;
    if (v14 == 196)
    {
      if (a4 == 3)
      {
        unsigned int v17 = a3[1] & 2;
        if (*(unsigned __int8 *)(a1 + 88) != v17 >> 1)
        {
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
          }
          long long v18 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
          {
            char v19 = "entered";
            if (!v17) {
              char v19 = "dismissed";
            }
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Accessory Hall Effect sensor detected tablet mode %s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
            }
            int v24 = "entered";
            if (!v17) {
              int v24 = "dismissed";
            }
            *(_DWORD *)long long v27 = 136315138;
            *(void *)&v27[4] = v24;
            __int16 v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::onIoHidReportBounce(CLHidDevice *, uint8_t *, CFIndex)", "%s\n", v25);
            if (v25 != buf) {
              free(v25);
            }
          }
          if (v17) {
            char v20 = 3;
          }
          else {
            char v20 = 4;
          }
          v27[0] = v20;
          *(void *)int buf = sub_1000D3E50();
          sub_1000E7BA0(a1, 4, (uint64_t)v27, 1);
        }
        *(unsigned char *)(a1 + 88) = v17 >> 1;
      }
      else
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
        }
        char v22 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)int buf = 134218240;
          *(void *)&uint8_t buf[4] = a4;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = 3;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Bad motion report input state %ld, expected %lu", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
          }
          *(_DWORD *)long long v27 = 134218240;
          *(void *)&v27[4] = a4;
          __int16 v28 = 2048;
          uint64_t v29 = 3;
          goto LABEL_64;
        }
      }
      return;
    }
    if (v14 != 1) {
      return;
    }
    if (a4 == 30)
    {
      *(void *)int buf = *(void *)a3;
      *(_WORD *)&uint8_t buf[8] = *((_WORD *)a3 + 4);
      BOOL v26 = !sub_100965FFC(buf, byte_101D53EF5);
      *(void *)long long v27 = sub_1000D3E50();
      int v10 = &v26;
      uint64_t v11 = a1;
      uint64_t v12 = 1;
      uint64_t v13 = 1;
      goto LABEL_13;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
    }
    unint64_t v21 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = a4;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = 30;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Bad motion report input %ld, expected %lu", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
  }
  unint64_t v6 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "received bad hid report", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
    }
    *(_WORD *)long long v27 = 0;
    goto LABEL_64;
  }
}

unsigned char *sub_100965004(unsigned char *result, uint64_t a2, int a3)
{
  uint64_t v4 = (uint64_t)result;
  if (*((void *)result + 5) == a2)
  {
    char v8 = a3;
    double v7 = sub_1000D3E50();
    uint64_t result = (unsigned char *)sub_1000E7BA0(v4, 2, (uint64_t)&v8, 1);
    *(unsigned char *)(v4 + 91) = v8;
    if (a3)
    {
      uint64_t result = (unsigned char *)sub_100965EB4();
      if (*(unsigned __int8 *)(v4 + 89) != result)
      {
        char v6 = (char)result;
        v9[0] = -60;
        v9[1] = (_BYTE)result;
        uint64_t result = [*(id *)(v4 + 40) setReport:196 payload:v9 length:2 * *(void *)&v7];
        if (result) {
          *(unsigned char *)(v4 + 89) = v6;
        }
      }
    }
    else
    {
      *(unsigned char *)(v4 + 89) = 0;
    }
  }
  else if (*((void *)result + 6) == a2)
  {
    if (a3)
    {
      uint64_t result = (unsigned char *)sub_100965BA4();
      if (*(unsigned __int8 *)(v4 + 90) != result)
      {
        char v5 = (char)result;
        v10[0] = 105;
        v10[1] = (_BYTE)result;
        uint64_t result = [*(id *)(v4 + 48) setReport:105 payload:v10 length:2];
        if (result) {
          *(unsigned char *)(v4 + 90) = v5;
        }
      }
    }
    else
    {
      result[90] = 0;
    }
  }
  return result;
}

uint64_t sub_10096516C(uint64_t a1)
{
  uint64_t result = IOHIDEventConformsTo();
  if (result)
  {
    uint64_t result = IOHIDEventGetChildren();
    if (result)
    {
      CFArrayRef v3 = (const __CFArray *)result;
      uint64_t result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        uint64_t v4 = result;
        for (CFIndex i = 0; i != v4; ++i)
        {
          CFArrayGetValueAtIndex(v3, i);
          uint64_t result = IOHIDEventGetType();
          if (result == 11)
          {
            uint64_t result = IOHIDEventGetIntegerValue();
            int v6 = result == 1;
            if (*(unsigned __int8 *)(a1 + 72) != v6)
            {
              BOOL v7 = result == 1;
              uint64_t result = sub_1000E01AC(a1, 3, (uint64_t)&v7, 1);
              *(unsigned char *)(a1 + 72) = v6;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1009652A8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 91))
  {
    uint64_t v3 = result;
    if (a2 == 1)
    {
      char v4 = 2;
    }
    else
    {
      if (a2 != 3) {
        return result;
      }
      char v4 = 1;
    }
    char v7 = v4;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
    }
    char v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 138412290;
      *(void *)&uint8_t buf[4] = off_10241EEB8(a2);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iPad Hall Effect sensor detected the cover was, %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
      }
      int v8 = 138412290;
      uint64_t v9 = off_10241EEB8(a2);
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::onSmartCoverOpened(SBSSmartCoverState)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(void *)int buf = sub_1000D3E50();
    return sub_1000E7BA0(v3, 4, (uint64_t)&v7, 1);
  }
  return result;
}

void sub_1009654C4()
{
  if (qword_10247F0A0 != -1) {
    dispatch_once(&qword_10247F0A0, &stru_1022D4D58);
  }
  uint64_t v0 = qword_10248A718;

  sub_100965518(v0);
}

void sub_100965518(uint64_t a1)
{
  int v2 = sub_100965EB4();
  int v3 = sub_100965BA4();
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
  }
  char v4 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v2;
    LOWORD(v16) = 1024;
    *(_DWORD *)((char *)&v16 + 2) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "KeyboardMotion preferences changed,dataCollection,%d,accelStreaming,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
    }
    int v11 = 67109376;
    BOOL v12 = v2;
    __int16 v13 = 1024;
    int v14 = v3;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100965B24((id *)a1, v3);
  if (*(unsigned __int8 *)(a1 + 89) != v2)
  {
    buf[0] = -60;
    buf[1] = v2;
    if ([*(id *)(a1 + 40) setReport:196 payload:buf length:2]) {
      *(unsigned char *)(a1 + 89) = v2;
    }
  }
  if (*(unsigned __int8 *)(a1 + 90) != v3)
  {
    buf[0] = 105;
    buf[1] = v3;
    if ([*(id *)(a1 + 48) setReport:105 payload:buf length:2]) {
      *(unsigned char *)(a1 + 90) = v3;
    }
  }
  BOOL v10 = 0;
  sub_1000C7F88(buf);
  int v5 = sub_1000D2988(*(uint64_t *)buf, "MotionLoggerLogKeyboardMotion", &v10);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (v5)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
    }
    int v6 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "KeyboardMotion,Msl Logging,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D4DF0);
      }
      int v11 = 67109120;
      BOOL v12 = v10;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_1000C7F88(buf);
    sub_1000EA238(*(uint64_t *)buf, "MslLogger.Enable", &v10);
    if (v16) {
      sub_1000DB0A0(v16);
    }
    sub_1000C7F88(buf);
    if (v10) {
      int v7 = 15;
    }
    else {
      int v7 = 255;
    }
    int v11 = v7;
    sub_1000EA838(*(uint64_t *)buf, "MslLogger.FlushTimeout", &v11);
    if (v16) {
      sub_1000DB0A0(v16);
    }
  }
}

void sub_100965950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100965978(id a1)
{
  if (sub_1001B7C64()) {
    operator new();
  }
}

void sub_1009659C8()
{
}

void sub_1009659EC(uint64_t a1)
{
}

void sub_100965B10(_Unwind_Exception *a1)
{
  sub_1009D1DE4(v1);
  _Unwind_Resume(a1);
}

id *sub_100965B24(id *result, int a2)
{
  uint64_t v2 = (uint64_t)result;
  if (a2)
  {
    if (!result[5])
    {
      uint64_t result = (id *)[result[4] registerForDeviceMatching:&off_102397450];
      *(void *)(v2 + 40) = result;
    }
  }
  else
  {
    uint64_t result = (id *)sub_1009D3158((uint64_t)result, 1);
    if (!result)
    {
      uint64_t result = (id *)sub_1009D3158(v2, 2);
      if (!result)
      {
        uint64_t result = (id *)sub_1009D3158(v2, 4);
        if (!result)
        {
          uint64_t result = (id *)[*(id *)(v2 + 32) unregisterForDeviceMatching:*(void *)(v2 + 40)];
          *(void *)(v2 + 40) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100965BA4()
{
  BOOL v4 = 0;
  sub_1000C7F88(&v2);
  unsigned int v0 = sub_1000D2988(v2, "EnableKeyboardMotionAccelStream", &v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v4) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_100965C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100965C20(id *a1)
{
  *a1 = off_1022D4D88;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.locationd.KeyboardMotion.DataCollectionMode", 0);

  [a1[10] invalidate];

  return sub_1009D1DE4(a1);
}

void sub_100965CC0(id *a1)
{
  sub_100965C20(a1);

  operator delete();
}

void sub_100965CF8(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      if (a3)
      {
        if (!*(void *)(a1 + 48)) {
          *(void *)(a1 + 48) = [*(id *)(a1 + 32) registerForDeviceMatching:&off_102397388];
        }
      }
      else
      {
        [*(id *)(a1 + 32) unregisterForDeviceMatching:*(void *)(a1 + 48)];

        *(void *)(a1 + 48) = 0;
      }
      break;
    case 1:
    case 4:
      sub_100965B24((id *)a1, a3 != 0);
      break;
    case 2:
      sub_100965B24((id *)a1, a3 != 0);
      if (a3)
      {
        sub_1000D3E50();
        sub_1000E7BA0(a1, 2, a1 + 91, 1);
      }
      break;
    case 3:
      int v5 = *(void **)(a1 + 64);
      if (a3)
      {
        if (!v5)
        {
          int v6 = [[CLHidEventMonitorManager alloc] initWithDelegate:*(void *)(a1 + 56) queue:dispatch_get_global_queue(0, 0) matching:&off_102397428];
          *(void *)(a1 + 64) = v6;
          [(CLHidEventMonitorManager *)v6 addSystemClientMatching:&off_102397428];
        }
      }
      else
      {
        _[v5 removeSystemClientmatching:&off_102397428];
      }
      break;
    default:
      return;
  }
}

uint64_t sub_100965EB4()
{
  BOOL v4 = 0;
  sub_1000C7F88(&v2);
  unsigned int v0 = sub_1000D2988(v2, "EnableKeyboardMotionDataCollectionMode", &v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v4) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_100965F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

Class sub_100965F30()
{
  if (qword_10247F0B0 != -1) {
    dispatch_once(&qword_10247F0B0, &stru_1022D4DD0);
  }
  Class result = objc_getClass("SBSSmartCoverService");
  qword_10247F0A8 = (uint64_t)result;
  off_10241EEB0 = sub_100965F94;
  return result;
}

uint64_t sub_100965F94()
{
  return qword_10247F0A8;
}

void sub_100965FA0(id a1)
{
  qword_10247F0B8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
}

void sub_100965FCC(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

BOOL sub_100965FFC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2
    && a1[1] == a2[1]
    && a1[2] == a2[2]
    && (*(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3)
      ? (BOOL v2 = *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7))
      : (BOOL v2 = 0),
        v2))
  {
    return a1[9] == a2[9];
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100966064(uint64_t a1)
{
  if (qword_10247F0B0 != -1) {
    dispatch_once(&qword_10247F0B0, &stru_1022D4DD0);
  }
  BOOL v2 = (uint64_t (*)())dlsym((void *)qword_10247F0B8, "NSStringFromSBSSmartCoverState");
  off_10241EEB8 = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t sub_1009660E4(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247F0D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247F0D8))
  {
    *(void *)long long __p = 3;
    sub_1004F7D80(qword_10247F0C0, __p, 2uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_10247F0C0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247F0D8);
  }
  *(void *)(a1 + 400) = 0;
  __int16 v110 = 0;
  v107[0] = xmmword_101D1E250;
  memset(&v107[1], 0, 96);
  long long v108 = 0u;
  memset(v109, 0, sizeof(v109));
  long long v111 = xmmword_101D1E250;
  uint64_t v112 = 0;
  int v113 = 0;
  v115[0] = 0;
  uint64_t v114 = 0;
  *(void *)((char *)v115 + 5) = 0;
  *(void *)((char *)&v115[1] + 6) = 0;
  double v117 = 0.0;
  char v118 = 0;
  v115[3] = 0;
  double v116 = 0.0;
  long long v119 = xmmword_101D1E250;
  uint64_t v120 = 0;
  int v121 = 0;
  unint64_t v122 = 0xFFEFFFFFFFFFFFFFLL;
  int v133 = 0;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  int v128 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  memset(v132, 0, sizeof(v132));
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unint64_t v136 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v137 = 0;
  int v138 = 0;
  uint64_t v144 = 0;
  __int16 v145 = 0;
  int v150 = 0;
  int v143 = 0;
  long long v142 = 0u;
  long long v141 = 0u;
  long long v140 = 0u;
  long long v139 = 0u;
  long long v147 = 0u;
  long long v146 = 0u;
  char v148 = 0;
  memset(v149, 0, sizeof(v149));
  unint64_t v151 = 0xFFEFFFFFFFFFFFFFLL;
  long long v170 = 0u;
  long long v169 = 0u;
  long long v168 = 0u;
  long long v167 = 0u;
  long long v166 = 0u;
  long long v165 = 0u;
  long long v164 = 0u;
  long long v163 = 0u;
  long long v162 = 0u;
  long long v161 = 0u;
  long long v160 = 0u;
  long long v159 = 0u;
  long long v158 = 0u;
  long long v157 = 0u;
  long long v156 = 0u;
  long long v155 = 0u;
  long long v154 = 0u;
  long long v153 = 0u;
  long long v152 = 0u;
  uint64_t v171 = 0;
  unint64_t v172 = 0xFFEFFFFFFFFFFFFFLL;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  unint64_t v177 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v178 = 0;
  int v179 = 0;
  uint64_t v180 = 0;
  char v181 = 0;
  unint64_t v182 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v184 = 0;
  uint64_t v183 = 0;
  uint64_t v185 = 0x80000000800000;
  uint64_t v187 = 0;
  uint64_t v186 = 0;
  long long v188 = xmmword_101D1E260;
  uint64_t v189 = 0x80000000800000;
  long long v190 = 0u;
  long long v191 = 0u;
  uint64_t v192 = 0;
  unint64_t v193 = 0xFFEFFFFFFFFFFFFFLL;
  long long v194 = 0u;
  long long v195 = 0u;
  long long v196 = 0u;
  long long v197 = 0u;
  long long v198 = 0u;
  long long v199 = 0u;
  int v200 = 0;
  unint64_t v201 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v202 = 0;
  int v203 = 0;
  unint64_t v204 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v205 = 7;
  unint64_t v206 = 0xFFEFFFFFFFFFFFFFLL;
  char v207 = 0;
  uint64_t v209 = 0;
  uint64_t v208 = 0;
  uint64_t v210 = 0;
  if ((sub_100174478((double *)a2, qword_10247F0C0, (uint64_t)v107) & 1) == 0)
  {
    sub_100134750(__p, "HRStop");
    sub_10111B644((void *)a2, (uint64_t *)__p, (uint64_t)qword_10247F0C0);
    if (SHIBYTE(v95) < 0) {
      operator delete(*(void **)__p);
    }
    return 0;
  }
  uint64_t v4 = *((void *)&v119 + 1);
  if (*(double *)(a1 + 24) == *((double *)&v119 + 1)) {
    return 0;
  }
  *(void *)(a1 + 24) = *((void *)&v119 + 1);
  double v5 = *(double *)(a2 + 304);
  float v6 = *(float *)(a2 + 356);
  double v7 = v116;
  double v8 = v117;
  if (v117 > 0.389999986)
  {
    unint64_t v9 = *(void *)(a1 + 56);
    BOOL v10 = *(double **)(a1 + 48);
    if ((unint64_t)v10 >= v9)
    {
      __int16 v13 = *(double **)(a1 + 40);
      uint64_t v14 = ((char *)v10 - (char *)v13) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        sub_1001D7FD4();
      }
      uint64_t v16 = v9 - (void)v13;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        long long v18 = (char *)sub_1000C571C(a1 + 56, v17);
        __int16 v13 = *(double **)(a1 + 40);
        BOOL v10 = *(double **)(a1 + 48);
      }
      else
      {
        long long v18 = 0;
      }
      char v19 = (double *)&v18[16 * v14];
      char v20 = &v18[16 * v17];
      *(void *)char v19 = v4;
      v19[1] = v7;
      int v11 = v19 + 2;
      if (v10 != v13)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v10 - 1);
          v19 -= 2;
          v10 -= 2;
        }
        while (v10 != v13);
        __int16 v13 = *(double **)(a1 + 40);
      }
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 56) = v20;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(void *)BOOL v10 = v4;
      v10[1] = v7;
      int v11 = v10 + 2;
    }
    *(void *)(a1 + 48) = v11;
    double v8 = v117;
  }
  if (v8 < 0.59)
  {
    int v21 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v21 + 1;
    *(unsigned char *)(a1 + 440) = 1;
    if (v21 >= 9)
    {
      *(void *)(a1 + 416) = 0xC08F380000000000;
      *(unsigned char *)(a1 + 424) = 0;
      *(void *)(a1 + 432) = 0;
    }
    uint64_t result = 0;
    *(void *)(a1 + 392) = 0;
    return result;
  }
  double v22 = (v7 - v5) * 100.0 / (v6 - v5);
  *(unsigned char *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  double v23 = *(double *)(a1 + 392);
  if (v23 > 0.0) {
    *(double *)(a1 + 400) = v22 - v23;
  }
  __int16 v25 = (char **)(a1 + 40);
  int v24 = *(double **)(a1 + 40);
  long long v27 = (char **)(a1 + 48);
  BOOL v26 = *(double **)(a1 + 48);
  unint64_t v28 = 126 - 2 * __clz(((char *)v26 - (char *)v24) >> 4);
  *(double *)(a1 + 416) = v22;
  *(double *)(a1 + 392) = v22;
  *(double *)(a1 + 432) = v8;
  if (v26 == v24) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  sub_100967004(v24, v26, (uint64_t)__p, v29, 1);
  int v30 = *v25;
  if (*v25 != *v27)
  {
    int v30 = *v25;
    while (*(double *)(a2 + 296) - *(double *)v30 > *(double *)(a1 + 16))
    {
      v30 += 16;
      if (v30 == *v27)
      {
        int v30 = *v27;
        break;
      }
    }
  }
  sub_100966EC4(a1 + 40, *v25, v30);
  unsigned __int8 v31 = *(double **)(a1 + 40);
  long long v32 = *(double **)(a1 + 48);
  double v33 = 0.0;
  double v34 = 0.0;
  double v35 = 0.0;
  if ((unint64_t)((char *)v32 - (char *)v31) >= 0x3C1)
  {
    uint64_t v36 = (int)((double)(int)(((unint64_t)((char *)v32 - (char *)v31) >> 4) - 1) * 0.75);
    uint64_t v37 = &v31[2 * v36];
    while (v32 != v37)
    {
      unint64_t v38 = ((char *)v32 - (char *)v31) >> 4;
      if (v38 < 2) {
        break;
      }
      if (v38 == 3)
      {
        sub_100967A38(v31, v31 + 2, v32 - 2);
        break;
      }
      if (v38 == 2)
      {
        if (*(v32 - 1) < v31[1])
        {
          double v73 = *v31;
          *unsigned __int8 v31 = *(v32 - 2);
          *(v32 - 2) = v73;
          uint64_t v74 = *((void *)v31 + 1);
          v31[1] = *(v32 - 1);
          *((void *)v32 - 1) = v74;
        }
        break;
      }
      if ((char *)v32 - (char *)v31 <= 127)
      {
        while (v31 != v32 - 2)
        {
          long long v75 = v31;
          v31 += 2;
          if (v75 != v32 && v31 != v32)
          {
            long long v76 = v31;
            unint64_t v77 = v75;
            do
            {
              if (v76[1] < v77[1]) {
                unint64_t v77 = v76;
              }
              v76 += 2;
            }
            while (v76 != v32);
            if (v77 != v75)
            {
              uint64_t v78 = *(void *)v75;
              *long long v75 = *v77;
              *(void *)unint64_t v77 = v78;
              uint64_t v79 = *((void *)v75 + 1);
              v75[1] = v77[1];
              *((void *)v77 + 1) = v79;
            }
          }
        }
        break;
      }
      long long v39 = &v31[2 * (v38 >> 1)];
      long long v40 = v32 - 2;
      int v41 = sub_100967A38(v31, v39, v32 - 2);
      double v42 = v31[1];
      double v43 = v39[1];
      if (v42 >= v43)
      {
        __int16 v45 = v32 - 2;
        while (1)
        {
          uint64_t v44 = v45 - 2;
          if (v45 - 2 == v31) {
            break;
          }
          double v46 = *(v45 - 1);
          v45 -= 2;
          if (v46 < v43)
          {
            double v47 = *v31;
            *unsigned __int8 v31 = *v44;
            *uint64_t v44 = v47;
            uint64_t v48 = *((void *)v31 + 1);
            v31[1] = v44[1];
            *((void *)v44 + 1) = v48;
            ++v41;
            goto LABEL_51;
          }
        }
        long long v62 = v31 + 2;
        if (v42 >= *(v32 - 1))
        {
          while (v62 != v40)
          {
            if (v42 < v62[1])
            {
              double v66 = *v62;
              *long long v62 = *(v32 - 2);
              *(v32 - 2) = v66;
              uint64_t v67 = *((void *)v62 + 1);
              v62[1] = *(v32 - 1);
              *((void *)v32 - 1) = v67;
              v62 += 2;
              goto LABEL_83;
            }
            v62 += 2;
          }
          break;
        }
LABEL_83:
        if (v62 == v40) {
          break;
        }
        while (1)
        {
          double v68 = v31[1];
          long long v59 = v62 - 2;
          do
          {
            double v69 = v59[3];
            v59 += 2;
          }
          while (v68 >= v69);
          long long v62 = v59 + 2;
          do
          {
            double v70 = *(v40 - 1);
            v40 -= 2;
          }
          while (v68 < v70);
          if (v59 >= v40) {
            break;
          }
          double v71 = *v59;
          *long long v59 = *v40;
          *long long v40 = v71;
          uint64_t v72 = *((void *)v59 + 1);
          v59[1] = v40[1];
          *((void *)v40 + 1) = v72;
        }
        if (v59 > v37) {
          break;
        }
      }
      else
      {
        uint64_t v44 = v32 - 2;
LABEL_51:
        double v49 = v31 + 2;
        if (v31 + 2 >= v44)
        {
          unint64_t v52 = (unint64_t)(v31 + 2);
        }
        else
        {
          int v50 = v31 + 2;
          while (1)
          {
            double v51 = v39[1];
            unint64_t v52 = (unint64_t)(v50 - 2);
            do
            {
              double v53 = *(double *)(v52 + 24);
              v52 += 16;
            }
            while (v53 < v51);
            int v50 = (double *)(v52 + 16);
            do
            {
              double v54 = *(v44 - 1);
              v44 -= 2;
            }
            while (v54 >= v51);
            if (v52 >= (unint64_t)v44) {
              break;
            }
            double v55 = *(double *)v52;
            *(double *)unint64_t v52 = *v44;
            *uint64_t v44 = v55;
            uint64_t v56 = *(void *)(v52 + 8);
            *(double *)(v52 + 8) = v44[1];
            *((void *)v44 + 1) = v56;
            ++v41;
            if ((double *)v52 == v39) {
              long long v39 = v44;
            }
          }
        }
        if ((double *)v52 != v39 && v39[1] < *(double *)(v52 + 8))
        {
          double v57 = *(double *)v52;
          *(double *)unint64_t v52 = *v39;
          *long long v39 = v57;
          uint64_t v58 = *(void *)(v52 + 8);
          *(double *)(v52 + 8) = v39[1];
          *((void *)v39 + 1) = v58;
          ++v41;
        }
        if ((double *)v52 == v37) {
          break;
        }
        if (!v41)
        {
          if (v52 <= (unint64_t)v37)
          {
            unint64_t v63 = v52 + 16;
            while ((double *)v63 != v32)
            {
              double v64 = *(double *)(v63 + 8);
              double v65 = *(double *)(v63 - 8);
              v63 += 16;
              if (v64 < v65) {
                goto LABEL_67;
              }
            }
          }
          else
          {
            while (v49 != (double *)v52)
            {
              double v60 = v49[1];
              double v61 = *(v49 - 1);
              v49 += 2;
              if (v60 < v61) {
                goto LABEL_67;
              }
            }
          }
          break;
        }
LABEL_67:
        if (v52 <= (unint64_t)v37)
        {
          long long v59 = (double *)(v52 + 16);
        }
        else
        {
          long long v32 = (double *)v52;
          long long v59 = v31;
        }
      }
      unsigned __int8 v31 = v59;
    }
    double v35 = (*(double *)(*(void *)(a1 + 40) + 16 * v36 + 8) - *(double *)(a2 + 304))
        * 100.0
        / (*(float *)(a2 + 356) - *(double *)(a2 + 304));
    *(double *)(a1 + 408) = v35;
    double v34 = v35 - (fmax(fmin((v35 + -35.0) / 50.0, 1.0), 0.0) * 25.0 + 10.0);
    if (v22 >= v34 || v22 >= *(double *)(a1 + 8))
    {
      *(unsigned char *)(a1 + 424) = 0;
      *(_DWORD *)long long __p = 0;
      sub_1000C0D88((unsigned __int16 *)(a1 + 80), __p);
    }
    else
    {
      *(unsigned char *)(a1 + 424) = 1;
      if (*((float *)&v108 + 1) >= 18.0) {
        goto LABEL_112;
      }
      *(_DWORD *)long long __p = 1;
      sub_1000C0D88((unsigned __int16 *)(a1 + 80), __p);
    }
    *(unsigned char *)(a1 + 64) = 1;
  }
LABEL_112:
  uint64_t v80 = *(unsigned __int16 *)(a1 + 82);
  if (*(_WORD *)(a1 + 82))
  {
    unint64_t v81 = 0;
    int v82 = 0;
    do
      v82 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 80), v81++);
    while (v80 != v81);
    double v33 = (double)v82 * 100.0;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022D4E58);
  }
  uint64_t v83 = qword_1024191C8;
  double v84 = v33 / 75.0;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v85 = (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4;
    uint64_t v86 = *(void *)(a1 + 24);
    uint64_t v87 = *(void *)(a1 + 8);
    *(_DWORD *)long long __p = 134219776;
    *(void *)&__p[4] = v85;
    __int16 v93 = 2048;
    double v94 = v35;
    __int16 v95 = 2048;
    double v96 = v84;
    __int16 v97 = 2048;
    uint64_t v98 = v86;
    __int16 v99 = 2048;
    double v100 = v22;
    __int16 v101 = 2048;
    double v102 = v34;
    __int16 v103 = 2048;
    uint64_t v104 = v87;
    __int16 v105 = 2048;
    double v106 = *((float *)&v108 + 1);
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "n,%lu,baseline,%f,counter,%f,t,%f,exertion,%f,baseThreshold,%f,lowExertionThreshold,%f,accelVectorMagnitude,%f,HRStop", __p, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022D4E58);
    }
    long long v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLWorkoutStopModelHR::update(const CLWorkoutPredictorInputs &)", "%s\n", v90);
    if (v90 != __p) {
      free(v90);
    }
  }
  if (v84 <= 80.0) {
    return 0;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022D4E58);
  }
  long long v88 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    double v89 = *(double *)(a2 + 304);
    *(_DWORD *)long long __p = 134283777;
    *(double *)&__p[4] = v35;
    __int16 v93 = 2049;
    double v94 = v89;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "HRModel,stopping workout,baseline,%{private}f,restingHeartRate,%{private}f", __p, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022D4E58);
    }
    long long v91 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLWorkoutStopModelHR::update(const CLWorkoutPredictorInputs &)", "%s\n", v91);
    if (v91 != __p) {
      free(v91);
    }
  }
  return 5;
}

void sub_100966E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

char *sub_100966EC4(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v3 = *(char **)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 16 * ((a3 - a2) >> 4);
      uint64_t v4 = a2;
      do
      {
        uint64_t v6 = *(void *)&v4[v5 + 8];
        *(void *)uint64_t v4 = *(void *)&v4[v5];
        *((void *)v4 + 1) = v6;
        v4 += 16;
      }
      while (&v4[v5] != v3);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a2;
}

void *sub_100966F14(void *a1)
{
  *a1 = off_1022D4E20;
  BOOL v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100966F64(void *a1)
{
  *a1 = off_1022D4E20;
  BOOL v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_100966FD4(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100967004(double *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL sub_1009673FC(uint64_t a1, double *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 2);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1 || v7 >= v6 && *(a2 - 1) < *(double *)(a1 + 8))
      {
        *(double *)a1 = v6;
        *(a2 - 2) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(double *)(a1 + 8) = *(a2 - 1);
        *((void *)a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_10064345C((double *)a1, (double *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_100643A5C((double *)a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_100643B60((double *)a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1;
    default:
      unint64_t v9 = (double *)(a1 + 32);
      sub_10064345C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      BOOL v10 = (double *)(a1 + 48);
      if ((double *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    double v13 = *v10;
    double v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      double v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      double v15 = v10[1];
    }
    *BOOL v10 = v14;
    v10[1] = v9[1];
    unint64_t v16 = (double *)a1;
    if (v9 == (double *)a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      uint64_t v18 = a1 + v17;
      double v19 = *(double *)(a1 + v17 + 16);
      if (v13 < v19)
      {
        double v20 = *(double *)(v18 + 24);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        unint64_t v16 = v9;
        goto LABEL_22;
      }
      double v20 = *(double *)(a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *(double *)(v18 + 32) = v19;
      *(double *)(a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        unint64_t v16 = (double *)a1;
        goto LABEL_22;
      }
    }
    unint64_t v16 = (double *)(a1 + v17 + 32);
LABEL_22:
    *unint64_t v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_100967620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (double *)(a1 + 16 * v10);
      do
      {
        sub_1009677A4(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        double v15 = *(double *)v14;
        double v16 = *(double *)a1;
        if (*(double *)v14 < *(double *)a1 || v16 >= v15 && *(double *)(v14 + 8) < *(double *)(a1 + 8))
        {
          *(double *)uint64_t v14 = v16;
          *(double *)a1 = v15;
          uint64_t v17 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v17;
          sub_1009677A4(a1, a4, v9, (double *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      double v19 = (double *)(a2 - 16);
      do
      {
        double v21 = *(double *)a1;
        uint64_t v20 = *(void *)(a1 + 8);
        sub_1009678F0((double *)a1, a4, v18);
        if (v19 == v22)
        {
          *BOOL v22 = v21;
          *((void *)v22 + 1) = v20;
        }
        else
        {
          *BOOL v22 = *v19;
          v22[1] = v19[1];
          *double v19 = v21;
          *((void *)v19 + 1) = v20;
          sub_100967984(a1, (uint64_t)(v22 + 2), a4, ((uint64_t)v22 - a1 + 16) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1009677A4(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (double *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(double *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      double v11 = *v8;
      double v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          double v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          double v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v14 = (double *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              double v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(double *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            double v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }
        uint64_t v14 = v8;
LABEL_23:
        *uint64_t v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

double sub_1009678F0(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      double v10 = a1[2];
      if (*a1 < v10 || v10 >= *a1 && v6[2 * v7 + 1] < a1[3])
      {
        a1 += 2;
        uint64_t v3 = v9;
      }
    }
    double *v6 = *a1;
    double result = a1[1];
    v6[1] = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_100967984(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (double *)(result + 16 * (v4 >> 1));
    double v7 = *v6;
    double v8 = *(double *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      double v9 = *(double *)(a2 - 8);
      if (*(double *)(result + 16 * v5 + 8) >= v9) {
        return result;
      }
    }
    else
    {
      double v9 = *(double *)(a2 - 8);
    }
    *(double *)(a2 - 16) = v7;
    *(void *)(a2 - 8) = *(void *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        double v10 = (double *)(result + 16 * v5);
        double v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12) {
            break;
          }
          double v13 = *(double *)(result + 16 * v5 + 8);
          if (v13 >= v9) {
            break;
          }
        }
        else
        {
          double v13 = v10[1];
        }
        double *v6 = v12;
        v6[1] = v13;
        uint64_t v6 = (double *)(result + 16 * v5);
        if (v11 <= 1) {
          goto LABEL_13;
        }
      }
    }
    double v10 = v6;
LABEL_13:
    *double v10 = v8;
    v10[1] = v9;
  }
  return result;
}

uint64_t sub_100967A38(double *a1, double *a2, double *a3)
{
  uint64_t v3 = a2 + 1;
  double v4 = a2[1];
  unint64_t v5 = a1 + 1;
  double v6 = a3[1];
  if (v4 >= a1[1])
  {
    if (v6 >= v4) {
      return 0;
    }
    double v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    uint64_t v10 = *((void *)a2 + 1);
    a2[1] = a3[1];
    *((void *)a3 + 1) = v10;
    if (a2[1] < *v5)
    {
      double v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
      uint64_t result = 2;
LABEL_10:
      double v14 = *v5;
      *unint64_t v5 = *v3;
      double *v3 = v14;
      return result;
    }
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    if (v6 < v4)
    {
      *a1 = *a3;
      *(void *)a3 = v7;
      uint64_t result = 1;
LABEL_9:
      uint64_t v3 = a3 + 1;
      goto LABEL_10;
    }
    *a1 = *a2;
    *(void *)a2 = v7;
    double v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    if (a3[1] < v12)
    {
      double v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t result = 2;
      unint64_t v5 = a2 + 1;
      goto LABEL_9;
    }
  }
  return 1;
}

void sub_100967BE0(id a1)
{
  qword_10247F0E0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTransitMacTileDataProviderSilo"];
}

id sub_100967EA4(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, void *a4)
{
  return _[a4 onDarwinNotifierNotification:*a2 data:*a3];
}

void sub_10096816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009684A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_100968524()
{
}

id sub_10096852C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_100968AD4;
  void v3[3] = &unk_1022D4ED8;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  long long __p = 0;
  sub_1001DD364(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  id v1 = [v3 copy];
  if (__p)
  {
    unint64_t v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1009685D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009685F4(id a1, NSArray *a2, NSError *a3)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022D4EB8);
  }
  double v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = [(NSArray *)a2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TransitMac: result, %lu", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D4EB8);
    }
    LODWORD(v20.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = [(NSArray *)a2 count];
    uint64_t v15 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTransitMacTileDataProvider onDarwinNotifierNotification:data:]_block_invoke", "%s\n", (const char *)v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = [(NSArray *)a2 countByEnumeratingWithState:&v16 objects:v23 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v17;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(a2);
        }
        id v8 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v7) macAddress];
        nullsub_41(v8, v9);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022D4EB8);
        }
        uint64_t v10 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
        {
          sub_100B39278(buf);
          double v11 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? buf
              : (std::string *)buf[0].__r_.__value_.__r.__words[0];
          LODWORD(v20.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "TransitMac, result, mac, %s", (uint8_t *)&v20, 0xCu);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf[0].__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022D4EB8);
          }
          sub_100B39278(&v20);
          double v12 = &v20;
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            double v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
          }
          int v21 = 136315138;
          BOOL v22 = v12;
          double v13 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTransitMacTileDataProvider onDarwinNotifierNotification:data:]_block_invoke", "%s\n", (const char *)v13);
          if (v13 != buf) {
            free(v13);
          }
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v14 = [(NSArray *)a2 countByEnumeratingWithState:&v16 objects:v23 count:16];
      id v5 = v14;
    }
    while (v14);
  }
}

void sub_100968AA4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_100968AD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1001DD364(a2, *(const void **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3);
}

void *sub_100968AF0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  BOOL v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return sub_1001DD364(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
}

void sub_100968B0C(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_100968B24()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100968BA4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100968C34(_Unwind_Exception *a1)
{
}

void sub_100968CBC(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    *(unsigned char *)(a1 + 32) = a2 == 1;
    if (a2 != 1) {
      *(unsigned char *)(a1 + 13792) = 0;
    }
    if (*(unsigned char *)(a1 + 129))
    {
      int v8 = 0;
      sub_100864B20(a2, &v8);
      if (*(unsigned char *)(a1 + 32))
      {
        double v4 = sub_1012F7FC4();
        sub_10120EFA4((uint64_t)v4);
        id v5 = sub_1012F7FC4();
        sub_1012F8490((uint64_t)v5, &v8);
      }
      else
      {
        uint64_t v6 = sub_1012F7FC4();
        sub_1012F8490((uint64_t)v6, &v8);
        if (!*(unsigned char *)(a1 + 130) || *(double *)(a1 + 11704) <= 0.0)
        {
          uint64_t v7 = sub_1012F7FC4();
          sub_101212CAC((uint64_t)v7);
        }
      }
    }
    if (*(unsigned char *)(a1 + 130)) {
      sub_1011A5484((unsigned __int8 *)(a1 + 152), a2);
    }
  }
}

void sub_100968D8C(unsigned char *a1, void *a2)
{
  if (a1[128] && a2 && a1[32])
  {
    if (a1[129])
    {
      sub_100B66FE4((uint64_t)v5);
      sub_100864CF0(a2, (uint64_t)v5);
      double v4 = sub_1012F7FC4();
      sub_1012F864C((uint64_t)v4, (uint64_t)v5);
      sub_100B6B85C((wireless_diagnostics::google::protobuf::MessageLite *)v5);
    }
    if (a1[130]) {
      sub_1011A5E88(a1 + 152, a2);
    }
  }
}

void sub_100968E20(unsigned char *a1, void *a2)
{
  if (a1[128] && a2 && a1[32])
  {
    if (a1[129])
    {
      sub_100B6715C((uint64_t)v5);
      sub_10086646C(a2, (uint64_t)v5);
      double v4 = sub_1012F7FC4();
      sub_1012F881C((uint64_t)v4, (uint64_t)v5);
      sub_100B74AA0((wireless_diagnostics::google::protobuf::MessageLite *)v5);
    }
    if (a1[130]) {
      sub_1011A6C10((uint64_t)(a1 + 152));
    }
  }
}

uint64_t sub_100968EB8(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  long long v5 = *a3;
  *(void *)(a1 + 144) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 128) = v5;
  sub_1011A3C38(a1 + 152, a3 + 1);
  *(unsigned char *)(a1 + 13792) = 0;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = [[CLVisionControllerAdapter alloc] initWithController:a1];
    id v6 = [[objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLVisionNotifier"];
    *(void *)(a1 + 16) = v6;
    [v6 registerDelegate:*(void *)(a1 + 8) inSilo:[*(id *)a1 silo]];
    *(void *)(a1 + 24) = [objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLDigitalElevationModel"];
    *(unsigned char *)(a1 + 128) = *(unsigned char *)a3;
    if (*((unsigned char *)a3 + 1)) {
      char v7 = sub_1012F80A4();
    }
    else {
      char v7 = 0;
    }
    *(unsigned char *)(a1 + 129) = v7;
    *(unsigned char *)(a1 + 130) = *((unsigned char *)a3 + 2);
    sub_1009691A4((unsigned char *)a1);
    sub_100969820(a1);
  }
  else
  {
    *(unsigned char *)(a1 + 128) = 0;
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022D4F08);
    }
    int v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVC,CLVisionController,Controller disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022D4F08);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLVisionController::CLVisionController(id<CLIntersiloUniverse>, const CLVisionConfig &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return a1;
}

void sub_100969144(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100969150(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v3 = 0xA00010101;
  *((void *)&v3 + 1) = 0x3F847AE147AE147BLL;
  uint64_t v4 = 0;
  return sub_100968EB8(a1, a2, &v3);
}

void sub_1009691A4(unsigned char *a1)
{
  sub_1000C7F88(&v19);
  if (v19)
  {
    int v18 = 0;
    if (sub_10006EF84(v19, "EnableVision", &v18)) {
      a1[128] = v18 == 1;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022D4F08);
    }
    BOOL v2 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      int v3 = a1[128];
      *(_DWORD *)int buf = 136315394;
      BOOL v26 = "EnableVision";
      __int16 v27 = 1026;
      int v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLVC,readDaemonSettings,%s,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022D4F08);
      }
      int v11 = a1[128];
      int v21 = 136315394;
      BOOL v22 = "EnableVision";
      __int16 v23 = 1026;
      int v24 = v11;
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionController::readDaemonSettings()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v17 = 0;
    if (sub_10006EF84(v19, "EnableVisionRecorder", &v17))
    {
      if (v17 == 1) {
        char v4 = sub_1012F80A4();
      }
      else {
        char v4 = 0;
      }
      a1[129] = v4;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022D4F08);
    }
    char v7 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      int v8 = a1[129];
      *(_DWORD *)int buf = 136315394;
      BOOL v26 = "EnableVisionRecorder";
      __int16 v27 = 1026;
      int v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVC,readDaemonSettings,%s,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022D4F08);
      }
      int v13 = a1[129];
      int v21 = 136315394;
      BOOL v22 = "EnableVisionRecorder";
      __int16 v23 = 1026;
      int v24 = v13;
      id v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionController::readDaemonSettings()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    int v16 = 0;
    if (sub_10006EF84(v19, "EnableVisionLocationFuser", &v16)) {
      a1[130] = v16 == 1;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022D4F08);
    }
    uint64_t v9 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      int v10 = a1[130];
      *(_DWORD *)int buf = 136315394;
      BOOL v26 = "EnableVisionLocationFuser";
      __int16 v27 = 1026;
      int v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLVC,readDaemonSettings,%s,%{public}d", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_34;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022D4F08);
    }
    int v15 = a1[130];
    int v21 = 136315394;
    BOOL v22 = "EnableVisionLocationFuser";
    __int16 v23 = 1026;
    int v24 = v15;
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionController::readDaemonSettings()", "%s\n", v6);
LABEL_48:
    if (v6 != (char *)buf) {
      free(v6);
    }
    goto LABEL_34;
  }
  a1[128] = 0;
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1022D4F08);
  }
  long long v5 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVC,readDaemonSettings,Controller disabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022D4F08);
    }
    LOWORD(v21) = 0;
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionController::readDaemonSettings()", "%s\n", v6);
    goto LABEL_48;
  }
LABEL_34:
  if (v20) {
    sub_1000DB0A0(v20);
  }
}

void sub_100969814(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100969820(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(void *)(a1 + 8) && *(void *)(a1 + 16))
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022D4F08);
      }
      BOOL v2 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLVC,registerForVisionNotifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022D4F08);
        }
        char v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionController::registerForVisionNotifications()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      [*(id *)(a1 + 16) registerForVisionNotifications:*(void *)(a1 + 8)];
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022D4F08);
      }
      int v3 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        BOOL v4 = *(void *)(a1 + 8) != 0;
        BOOL v5 = *(void *)(a1 + 16) != 0;
        *(_DWORD *)int buf = 67240448;
        BOOL v9 = v4;
        __int16 v10 = 1026;
        BOOL v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLVC,registerForVisionNotifications,fAdapter,%{public}d,fVisionNotifierProxy,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022D4F08);
        }
        id v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionController::registerForVisionNotifications()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
}

void sub_100969B60(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100969B6C(uint64_t a1)
{
  sub_100969C2C(a1);

  *(void *)(a1 + 16) = 0;
  [*(id *)(a1 + 8) invalidate];

  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100969E78((void *)(a1 + 152));
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_100969C2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(void *)(a1 + 8) && (uint64_t v2 = *(void **)(a1 + 16)) != 0)
    {
      [v2 deregisterForVisionNotifications:];
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022D4F08);
      }
      uint64_t v3 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        BOOL v4 = *(void *)(a1 + 8) != 0;
        BOOL v5 = *(void *)(a1 + 16) != 0;
        *(_DWORD *)int buf = 67240448;
        BOOL v8 = v4;
        __int16 v9 = 1026;
        BOOL v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLVC,deregisterForVisionNotifications,fAdapter,%{public}d,fVisionNotifierProxy,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022D4F08);
        }
        id v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionController::deregisterForVisionNotifications()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
}

void sub_100969E38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100969E48(id a1)
{
  qword_102419428 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void *sub_100969E78(void *a1)
{
  uint64_t v2 = (void *)a1[844];
  if (v2)
  {
    a1[845] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_100969EDC()
{
}

void sub_100969F1C()
{
}

__n128 sub_100969F40@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

void sub_100969F74()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D54008;
      v0[3] = unk_101D54018;
      v0[4] = xmmword_101D54028;
      v0[0] = xmmword_101D53FE8;
      v0[1] = unk_101D53FF8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10096A054(_Unwind_Exception *a1)
{
}

uint64_t sub_10096A06C()
{
  sub_100134750(qword_10247F0F0, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F0F0, (void *)&_mh_execute_header);
  sub_100134750(qword_10247F108, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F108, (void *)&_mh_execute_header);
  sub_100134750(qword_10247F120, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F120, (void *)&_mh_execute_header);
  sub_100134750(qword_10247F138, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F138, (void *)&_mh_execute_header);
  sub_100134750(qword_10247F150, ", ");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F150, (void *)&_mh_execute_header);
}

uint64_t sub_10096A250(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
      }
      else
      {
        *(unsigned char *)(a2 + v11) = 1;
        int v15 = 0;
      }
      *(_DWORD *)(a1 + 8) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10096A580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 166056;
  *(void *)a1 = off_1022D4F38;
  *(void *)(a1 + 8) = a2;
  sub_10112AE68(a1 + 16, a2);
  sub_1010A13D4((void *)(a1 + 80));
  bzero((void *)(a1 + 712), 0x8D08uLL);
  *(_DWORD *)(a1 + 740) = 501;
  sub_100DE3B1C(a1 + 36816);
  sub_100B2D60C(a1 + 114064);
  sub_10121F38C(a1 + 114712);
  sub_101441560(a1 + 121752, 6.0, 1.0);
  sub_100E0A2CC(a1 + 153112);
  sub_1011E8F0C(a1 + 153240, a2);
  *(void *)uint64_t v4 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v11 = _Q0;
  *(_OWORD *)(v4 + 8) = _Q0;
  sub_1002918E0((void *)(a1 + 153112), *(void *)(a1 + 8));
  *(_OWORD *)(a1 + 165992) = xmmword_101D54088;
  *(_OWORD *)(a1 + 166008) = unk_101D54098;
  *(_OWORD *)(a1 + 166024) = xmmword_101D540A8;
  *(_OWORD *)(a1 + 166036) = *(long long *)((char *)&xmmword_101D540A8 + 12);
  *(_OWORD *)(a1 + 153144) = 0u;
  *(_OWORD *)(a1 + 153160) = 0u;
  *(_OWORD *)(a1 + 153176) = 0u;
  *(_OWORD *)(a1 + 153192) = 0u;
  *(void *)(a1 + 153208) = 0;
  *(_OWORD *)(a1 + 114040) = 0u;
  *(_DWORD *)(a1 + 114056) = 0;
  *(_OWORD *)(v4 + 8) = v11;
  *(void *)(a1 + 712) = 0;
  return a1;
}

void sub_10096A6C8(uint64_t a1, double a2)
{
  if (vabdd_f64(a2, *(double *)(a1 + 728)) > 1.0)
  {
    *(void *)((char *)&v15[1] + 1) = 0;
    *(void *)int v15 = 0;
    int v4 = sub_10121FDD4(a1 + 114712, (uint64_t)v15, v16, 3.75);
    sub_1011E8F10(a1 + 153240, (uint64_t)v12);
    int v6 = v5;
    *(double *)(a1 + 728) = a2;
    uint64_t v9 = 0;
    uint64_t v10 = 0x3F80000000000000;
    sub_10096A7D0((unsigned __int16 *)(a1 + 736), (uint64_t)v8);
    if (v4)
    {
      if (v6)
      {
        *(void *)&v7[0] = __PAIR64__(LODWORD(v16[13]), v15[0]);
        *((void *)&v7[0] + 1) = __PAIR64__(v14, v13);
        v7[1] = (__int128)vextq_s8(v11, v11, 8uLL);
        sub_10112B10C(a1 + 16, v7);
      }
    }
  }
}

__n128 sub_10096A7D0(unsigned __int16 *a1, uint64_t a2)
{
  int v4 = *a1;
  long long v2 = a1 + 4;
  int v3 = v4;
  int v5 = &v2[36 * v4];
  *(_DWORD *)a2 = *(_DWORD *)v5;
  *(_DWORD *)(a2 + 4) = *((_DWORD *)v5 + 1);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)v5 + 2);
  *(_DWORD *)(a2 + 12) = *((_DWORD *)v5 + 3);
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v5 + 4);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)v5 + 5);
  *(_DWORD *)(a2 + 24) = *((_DWORD *)v5 + 6);
  *(_DWORD *)(a2 + 28) = *((_DWORD *)v5 + 7);
  *(_DWORD *)(a2 + 32) = *((_DWORD *)v5 + 8);
  if (v5 != (unsigned __int16 *)a2) {
    *(_OWORD *)(a2 + 36) = *(_OWORD *)&v2[36 * v3 + 18];
  }
  __n128 result = *(__n128 *)&v2[36 * v3 + 28];
  *(__n128 *)(a2 + 56) = result;
  return result;
}

unsigned __int16 *sub_10096A850(uint64_t a1, uint64_t a2)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022D4F68);
  }
  int v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(double *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    double v7 = *(float *)(a2 + 16);
    double v8 = *(float *)(a2 + 32);
    *(_DWORD *)int buf = 134218752;
    double v12 = v5;
    __int16 v13 = 2048;
    uint64_t v14 = v6;
    __int16 v15 = 2048;
    double v16 = v7;
    __int16 v17 = 2048;
    double v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SwimAlg, workout classifier result, startTime, %f, workoutType, %lu, confidence, %f, probability_swimming, %f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022D4F68);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimAlgController::feedWorkoutClassification(const CLMotionStateMediator_Type::WorkoutClassifierResult &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return sub_1010A13F4(a1 + 80, *(void *)(a2 + 8), *(double *)a2, *(float *)(a2 + 32));
}

uint64_t sub_10096AA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(double *)(a1 + 712) <= 0.0) {
    sub_10041BAA4(*(void *)(a1 + 8), *(double *)(a2 + 56));
  }
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(*(void *)(a1 + 8) + 2168) = *(void *)(a2 + 64);
  *(void *)(a1 + 712) = v6;
  sub_10096CDD0((unsigned __int16 *)(a1 + 736), a2);
  double v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16);

  return v7(a1, a2, a3);
}

uint64_t sub_10096AB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1 + 166000;
  double v7 = (float *)(a1 + 121752);
  double v8 = (double *)(a1 + 36816);
  double v9 = *(double *)(a2 + 56);
  sub_10096A6C8(a1, v9);
  sub_10096B6F0(a1, a1 + 114712);
  sub_10096B768(a1, (uint64_t)v7);
  uint64_t v78 = a1 + 153240;
  sub_10096B7E0(a1, a1 + 153240);
  if (sub_10096B858(a1, (uint64_t)v8, *v7 / *(float *)v6, v7[4]))
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 36816);
    float v10 = *(double *)__p - *(double *)(v6 + 56);
    int v82 = sub_10121F9E8(a1 + 114712, v10);
    *(void **)(v6 + 56) = __p[0];
    *(void *)double v106 = 0x400000000;
    sub_1010A16D8(a1 + 80, (double *)__p, (unsigned __int16 *)v106);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022D4F68);
    }
    int8x16_t v11 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
    {
      double v12 = *v8;
      double v13 = v8[1];
      *(_DWORD *)int buf = 134218496;
      double v97 = v12;
      __int16 v98 = 2048;
      double v99 = v13;
      __int16 v100 = 2048;
      *(void *)__int16 v101 = v82;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Potential stroke,timestamp,%.3f,startTime,%f,style,%lu", buf, 0x20u);
    }
    uint64_t v77 = v4;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022D4F68);
      }
      double v59 = *v8;
      double v60 = v8[1];
      int v83 = 134218496;
      double v84 = v59;
      __int16 v85 = 2048;
      double v86 = v60;
      __int16 v87 = 2048;
      *(void *)long long v88 = v82;
      double v61 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v61);
      if (v61 != (char *)buf) {
        free(v61);
      }
    }
    for (; *(_WORD *)&v106[2]; --*(_WORD *)&v106[2])
    {
      uint64_t v14 = &v106[56 * *(unsigned __int16 *)v106 + 8];
      double v15 = *(double *)v14;
      uint64_t v16 = *((void *)v14 + 1);
      uint64_t v17 = *((unsigned int *)v14 + 4);
      ++qword_10247F168;
      sub_10112AF18((uint64_t *)(a1 + 16), v15);
      double v18 = (*(double (**)(void, uint64_t))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), v17);
      uint64_t v20 = v19;
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022D4F68);
      }
      int v21 = qword_102419008;
      if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = qword_10247F168;
        BOOL v23 = sub_10112AEAC(a1 + 16);
        *(_DWORD *)int buf = 134219520;
        double v97 = v15;
        __int16 v98 = 2048;
        double v99 = *(double *)&v22;
        __int16 v100 = 2048;
        *(void *)__int16 v101 = v16;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)double v102 = v23;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v17;
        *(_WORD *)__int16 v103 = 2048;
        *(double *)&v103[2] = v18;
        __int16 v104 = 2048;
        *(void *)__int16 v105 = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d,style,%d,length,%f,distanceError,%f", buf, 0x40u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022D4F68);
        }
        uint64_t v28 = qword_10247F168;
        BOOL v29 = sub_10112AEAC(a1 + 16);
        int v83 = 134219520;
        double v84 = v15;
        __int16 v85 = 2048;
        double v86 = *(double *)&v28;
        __int16 v87 = 2048;
        *(void *)long long v88 = v16;
        *(_WORD *)&v88[8] = 1024;
        BOOL v89 = v29;
        __int16 v90 = 1024;
        int v91 = v17;
        __int16 v92 = 2048;
        double v93 = v18;
        __int16 v94 = 2048;
        uint64_t v95 = v20;
        int v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
      uint64_t v24 = *(void *)(a1 + 8);
      char v25 = sub_10112AEAC(a1 + 16);
      sub_10041C4AC(v24, v17, v25, v15);
      if (!*(_WORD *)&v106[2]) {
        break;
      }
      unint64_t v26 = *(unsigned __int16 *)v106 + 1;
      __int16 v27 = *(_WORD *)&v106[4];
      if (v26 < *(unsigned int *)&v106[4]) {
        __int16 v27 = 0;
      }
      *(_WORD *)double v106 = v26 - v27;
    }
    uint64_t v4 = v77;
  }
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8))
    || (uint64_t v114 = 0,
        *(void *)__int16 v115 = 0x3F80000000000000,
        sub_10096A7D0((unsigned __int16 *)(a1 + 736), (uint64_t)v106),
        double v80 = *(double *)v117,
        uint64_t v79 = 0,
        int v31 = sub_10112AE80(a1 + 16, &v79),
        ((sub_10096B8F8(a1, a1 + 114064, *(void *)(a1 + 8), &v80) | v31) & 1) == 0))
  {
    uint64_t v42 = 0;
    goto LABEL_45;
  }
  long long v32 = &v80;
  if (v31) {
    long long v32 = (double *)&v79;
  }
  double v80 = *v32;
  BOOL v33 = sub_10112AEBC(a1 + 16, v80);
  sub_1011E90EC(v78, (double **)__p, v80);
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022D4F68);
  }
  double v34 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    double v35 = *(double *)(a1 + 712);
    double v36 = v35 - v80;
    BOOL v37 = v35 <= v80;
    double v38 = 0.0;
    if (!v37) {
      double v38 = v36;
    }
    double v39 = *(double *)(*(void *)(a1 + 8) + 2168) - v38;
    *(_DWORD *)int buf = 134218752;
    double v97 = v80;
    __int16 v98 = 2048;
    double v99 = v39;
    __int16 v100 = 1024;
    *(_DWORD *)__int16 v101 = v33;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)&v101[6] = v31;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Turn detected,timestamp,%f,startTime,%f,isSwimming,%d,injectedForPause,%d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022D4F68);
    }
    double v72 = *(double *)(a1 + 712);
    double v73 = v72 - v80;
    BOOL v37 = v72 <= v80;
    double v74 = 0.0;
    if (!v37) {
      double v74 = v73;
    }
    double v75 = *(double *)(*(void *)(a1 + 8) + 2168) - v74;
    int v83 = 134218752;
    double v84 = v80;
    __int16 v85 = 2048;
    double v86 = v75;
    __int16 v87 = 1024;
    *(_DWORD *)long long v88 = v33;
    *(_WORD *)&v88[4] = 1024;
    *(_DWORD *)&v88[6] = v31;
    long long v76 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v76);
    if (v76 != (char *)buf) {
      free(v76);
    }
  }
  if (v33)
  {
LABEL_37:
    if (sub_10096B988((uint64_t *)a1, v80, *(double *)(a1 + 712))) {
      uint64_t v42 = 2;
    }
    else {
      uint64_t v42 = 0;
    }
    int v41 = (double *)__p[0];
    if (__p[0]) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  int v41 = (double *)__p[0];
  long long v40 = (double *)__p[1];
  if (__p[0] != __p[1])
  {
    do
      sub_10041C4AC(*(void *)(a1 + 8), 6u, 1, *v41++);
    while (v41 != v40);
    goto LABEL_37;
  }
  uint64_t v42 = 0;
  if (__p[0])
  {
LABEL_41:
    __p[1] = v41;
    operator delete(v41);
  }
LABEL_42:
  if (v42)
  {
    LOBYTE(v42) = 2;
LABEL_48:
    unsigned int v47 = sub_10096BBA4(a1, a3);
    if (v47)
    {
      sub_1011E8F5C(v78, a3);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022D4F68);
      }
      uint64_t v48 = qword_102419008;
      if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
      {
        double v49 = *(double *)(a3 + 40);
        double v50 = *(double *)(a3 + 48);
        int v51 = *(_DWORD *)(a3 + 124);
        uint64_t v52 = *(void *)(a3 + 72);
        uint64_t v53 = *(void *)(a3 + 80);
        int v54 = *(_DWORD *)(a3 + 100);
        int v55 = *(_DWORD *)(a3 + 104);
        int v56 = *(_DWORD *)(a3 + 108);
        double v57 = *(float *)(a3 + 112);
        *(_DWORD *)int buf = 134220032;
        double v97 = v49;
        __int16 v98 = 2048;
        double v99 = v50;
        __int16 v100 = 1024;
        *(_DWORD *)__int16 v101 = v51;
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)&v101[6] = v54;
        *(_WORD *)double v102 = 2048;
        *(void *)&v102[2] = v52;
        *(_WORD *)__int16 v103 = 2048;
        *(void *)&v103[2] = v53;
        __int16 v104 = 1024;
        *(_DWORD *)__int16 v105 = v55;
        *(_WORD *)&v105[4] = 1024;
        *(_DWORD *)&v105[6] = v56;
        *(_WORD *)&v105[10] = 2048;
        *(double *)&v105[12] = v57;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "EpochSummary,start,%f,end,%f,style,%d,epochStyle,%d,distance,%f,distanceTimestamp,%f,strokes,%d,laps,%d,strokeRate,%f\n", buf, 0x4Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022D4F68);
        }
        uint64_t v62 = *(void *)(a3 + 40);
        uint64_t v63 = *(void *)(a3 + 48);
        int v64 = *(_DWORD *)(a3 + 124);
        uint64_t v65 = *(void *)(a3 + 72);
        uint64_t v66 = *(void *)(a3 + 80);
        int v67 = *(_DWORD *)(a3 + 100);
        int v68 = *(_DWORD *)(a3 + 104);
        int v69 = *(_DWORD *)(a3 + 108);
        double v70 = *(float *)(a3 + 112);
        *(_DWORD *)double v106 = 134220032;
        *(void *)&v106[4] = v62;
        __int16 v107 = 2048;
        uint64_t v108 = v63;
        __int16 v109 = 1024;
        int v110 = v64;
        __int16 v111 = 1024;
        int v112 = v67;
        __int16 v113 = 2048;
        uint64_t v114 = v65;
        *(_WORD *)__int16 v115 = 2048;
        *(void *)&v115[2] = v66;
        __int16 v116 = 1024;
        *(_DWORD *)double v117 = v68;
        *(_WORD *)&v117[4] = 1024;
        *(_DWORD *)&v117[6] = v69;
        __int16 v118 = 2048;
        double v119 = v70;
        double v71 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v71);
        if (v71 != (char *)buf) {
          free(v71);
        }
      }
    }
    uint64_t v42 = v42 & 2 | v47;
    *(void *)(a1 + 720) = *(void *)(v4 + 56);
    goto LABEL_55;
  }
LABEL_45:
  double v43 = *(double *)(a1 + 720);
  int v44 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
  double v45 = vabdd_f64(v9, v43);
  double v46 = 2.56;
  if (v44) {
    double v46 = 1.0;
  }
  if (v45 > v46) {
    goto LABEL_48;
  }
LABEL_55:
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8)) & 1) == 0)
  {
    *(void *)&v102[2] = 0;
    *(void *)__int16 v103 = 0x3F80000000000000;
    sub_10096A7D0((unsigned __int16 *)(a1 + 736), (uint64_t)buf);
    sub_10041EAB4(*(void *)(a1 + 8), *(double *)&v105[8], *(double *)v105);
  }
  return v42;
}

void sub_10096B6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10096B6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0x3F80000000000000;
  int v3 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_10096CE50((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v9);
  if (result)
  {
    *(void *)&v5[36] = 0;
    uint64_t v6 = 0x3F80000000000000;
    sub_10096A7D0(v3, (uint64_t)v5);
    return sub_10121F390(a2, (uint64_t)v9, v8, v7);
  }
  return result;
}

uint64_t sub_10096B768(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0x3F80000000000000;
  int v3 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_10096CE50((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v9);
  if (result)
  {
    *(void *)&v5[36] = 0;
    uint64_t v6 = 0x3F80000000000000;
    sub_10096A7D0(v3, (uint64_t)v5);
    return sub_1014415C8(a2, (uint64_t)v9, v8, v7);
  }
  return result;
}

uint64_t sub_10096B7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0x3F80000000000000;
  int v3 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_10096CE50((unsigned __int16 *)(a1 + 736), 0x100u, (uint64_t)v9);
  if (result)
  {
    *(void *)&v5[36] = 0;
    uint64_t v6 = 0x3F80000000000000;
    sub_10096A7D0(v3, (uint64_t)v5);
    return sub_1011E98B0(a2, (uint64_t)v9, v8, v7);
  }
  return result;
}

uint64_t sub_10096B858(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0x3F80000000000000;
  double v7 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_10096CE50((unsigned __int16 *)(a1 + 736), 0x12Cu, (uint64_t)v13);
  if (result)
  {
    *(void *)&unsigned char v9[36] = 0;
    uint64_t v10 = 0x3F80000000000000;
    sub_10096A7D0(v7, (uint64_t)v9);
    return sub_100DE3BC8(a2, (uint64_t)v13, v12, v11, a3, a4);
  }
  return result;
}

uint64_t sub_10096B8F8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0x3F80000000000000;
  double v7 = (unsigned __int16 *)(a1 + 736);
  uint64_t result = sub_10096CE50((unsigned __int16 *)(a1 + 736), 0x1F4u, (uint64_t)v13);
  if (result)
  {
    *(void *)&unsigned char v9[36] = 0;
    uint64_t v10 = 0x3F80000000000000;
    sub_10096A7D0(v7, (uint64_t)v9);
    return sub_100B2D68C(a2, (uint64_t)v13, a3, a4, v12, v11);
  }
  return result;
}

BOOL sub_10096B988(uint64_t *a1, double a2, double a3)
{
  if (!sub_10041DA28(a1[1]) || !sub_10041C628((void *)a1[1], (__n128 *)&v16, a2)) {
    return 0;
  }
  long long v13 = v16;
  uint64_t v14 = v17;
  sub_100E0AC24((uint64_t)(a1 + 19139), &v13, v6, v7, v8, v9, __p);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  (*(void (**)(long long *__return_ptr))(*(void *)a1[1] + 40))(&v20);
  if (sub_100E0B790((uint64_t)(a1 + 19139), DWORD2(v16), (uint64_t)&v20))
  {
    uint64_t v10 = a1[1];
    v19[4] = v24;
    v19[5] = v25;
    v19[6] = v26;
    v19[0] = v20;
    v19[1] = v21;
    v19[2] = v22;
    _DWORD v19[3] = v23;
    sub_10041DA40(v10, SDWORD2(v16), v19);
  }
  _DWORD v18[4] = v24;
  v18[5] = v25;
  v18[6] = v26;
  v18[0] = v20;
  v18[1] = v21;
  v18[2] = v22;
  v18[3] = v23;
  sub_10096C3D0((uint64_t)a1, SDWORD2(v16), (uint64_t)v18, a2, a3);
  BOOL v11 = sub_10096BE6C(a1, (long long **)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11;
}

void sub_10096BB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10096BB54(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8));
  double result = 2.56;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_10096BBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0x3F80000000000000;
  sub_10096A7D0((unsigned __int16 *)(a1 + 736), (uint64_t)v5);
  return (*(uint64_t (**)(void, uint64_t, double, double, double))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2, v8, v9, 2.56);
}

double sub_10096BC20(uint64_t a1, double *a2)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022D4F68);
  }
  uint64_t v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t v7 = *((void *)a2 + 4);
    uint64_t v8 = *((void *)a2 + 5);
    uint64_t v9 = *((void *)a2 + 6);
    uint64_t v10 = *((void *)a2 + 7);
    uint64_t v11 = *((void *)a2 + 8);
    *(_DWORD *)int buf = 134219520;
    uint64_t v15 = v5;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    __int16 v22 = 2048;
    uint64_t v23 = v9;
    __int16 v24 = 2048;
    uint64_t v25 = v10;
    __int16 v26 = 2048;
    uint64_t v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccuracy,%lf,timestampGps,%lf", buf, 0x48u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022D4F68);
    }
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimAlgController::feedOdometer(const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  double result = a2[1];
  if (result > 0.0) {
    return sub_10041EAAC(*(void *)(a1 + 8), result);
  }
  return result;
}

BOOL sub_10096BE6C(uint64_t *a1, long long **a2, double a3)
{
  uint64_t v14 = a2[1];
  uint64_t v15 = *a2;
  if (*a2 != v14)
  {
    for (CFIndex i = *a2; i != a2[1]; CFIndex i = (long long *)((char *)i + 24))
    {
      long long v7 = *i;
      uint64_t v17 = *((void *)i + 2);
      long long v16 = v7;
      (*(void (**)(uint64_t *, long long *))(*a1 + 24))(a1, &v16);
      sub_10041E438(a1[1], (uint64_t)&v16, a3);
      uint64_t v85 = 0;
      long long v84 = 0u;
      long long v83 = 0u;
      long long v82 = 0u;
      long long v81 = 0u;
      long long v80 = 0u;
      long long v79 = 0u;
      long long v78 = 0u;
      long long v77 = 0u;
      long long v76 = 0u;
      if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1[1] + 120))(a1[1], &v76))
      {
        memset(v75, 0, 37);
        memset(out, 0, 37);
        uuid_unparse((const unsigned __int8 *)&v76 + 8, out);
        uuid_unparse((const unsigned __int8 *)&v77 + 8, v75);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022D4F68);
        }
        uint64_t v8 = qword_102419008;
        if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
        {
          BOOL v9 = (long long *)((char *)i + 24) != a2[1];
          *(_DWORD *)int buf = 134221314;
          uint64_t v47 = v76;
          __int16 v48 = 2080;
          double v49 = out;
          __int16 v50 = 2080;
          int v51 = v75;
          __int16 v52 = 2048;
          uint64_t v53 = *((void *)&v78 + 1);
          __int16 v54 = 2048;
          uint64_t v55 = v79;
          __int16 v56 = 2048;
          uint64_t v57 = *((void *)&v79 + 1);
          __int16 v58 = 2048;
          uint64_t v59 = v80;
          __int16 v60 = 2048;
          uint64_t v61 = *((void *)&v80 + 1);
          __int16 v62 = 1024;
          int v63 = v82;
          __int16 v64 = 1024;
          int v65 = DWORD1(v82);
          __int16 v66 = 1024;
          int v67 = DWORD2(v82);
          __int16 v68 = 1024;
          int v69 = HIDWORD(v82);
          __int16 v70 = 1024;
          BOOL v71 = v9;
          __int16 v72 = 1024;
          int v73 = DWORD2(v83);
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d, segment, %d", buf, 0x76u);
        }
        if (!sub_10013D1A0(115, 2)) {
          continue;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022D4F68);
        }
        BOOL v10 = (long long *)((char *)i + 24) != a2[1];
        int v18 = 134221314;
        uint64_t v19 = v76;
        __int16 v20 = 2080;
        uint64_t v21 = out;
        __int16 v22 = 2080;
        uint64_t v23 = v75;
        __int16 v24 = 2048;
        uint64_t v25 = *((void *)&v78 + 1);
        __int16 v26 = 2048;
        uint64_t v27 = v79;
        __int16 v28 = 2048;
        uint64_t v29 = *((void *)&v79 + 1);
        __int16 v30 = 2048;
        uint64_t v31 = v80;
        __int16 v32 = 2048;
        uint64_t v33 = *((void *)&v80 + 1);
        __int16 v34 = 1024;
        int v35 = v82;
        __int16 v36 = 1024;
        int v37 = DWORD1(v82);
        __int16 v38 = 1024;
        int v39 = DWORD2(v82);
        __int16 v40 = 1024;
        int v41 = HIDWORD(v82);
        __int16 v42 = 1024;
        BOOL v43 = v10;
        __int16 v44 = 1024;
        int v45 = DWORD2(v83);
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSwimAlgController::commitLaps(std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)", "%s\n", v11);
      }
      else
      {
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022D4F68);
        }
        double v12 = qword_102419008;
        if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "New lap entry, failed to get and log new lap entry after adding to db.", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          continue;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022D4F68);
        }
        LOWORD(v18) = 0;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSwimAlgController::commitLaps(std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)", "%s\n", v11);
      }
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return v15 != v14;
}

void sub_10096C3D0(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  double v9 = a5 - a4;
  if (a5 <= a4) {
    double v10 = 0.0;
  }
  else {
    double v10 = v9;
  }
  double v11 = *(double *)(*(void *)(a1 + 8) + 2168);
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022D4F68);
  }
  double v12 = v11 - v10;
  long long v13 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a3 + 72);
    uint64_t v15 = *(void *)(a3 + 80);
    uint64_t v16 = *(void *)(a3 + 48);
    uint64_t v17 = *(void *)(a3 + 56);
    int v18 = *(_DWORD *)(a3 + 64);
    uint64_t v19 = *(void *)(a3 + 88);
    uint64_t v20 = *(void *)(a3 + 96);
    uint64_t v21 = *(void *)(a3 + 104);
    *(_DWORD *)int buf = 67111936;
    int v24 = a2;
    __int16 v25 = 2048;
    double v26 = a5;
    __int16 v27 = 2048;
    double v28 = a4;
    __int16 v29 = 2048;
    double v30 = v12;
    __int16 v31 = 2048;
    uint64_t v32 = v16;
    __int16 v33 = 2048;
    uint64_t v34 = v14;
    __int16 v35 = 2048;
    uint64_t v36 = v15;
    __int16 v37 = 2048;
    uint64_t v38 = v19;
    __int16 v39 = 2048;
    uint64_t v40 = v17;
    __int16 v41 = 1024;
    int v42 = v18;
    __int16 v43 = 2048;
    uint64_t v44 = v20;
    __int16 v45 = 2048;
    uint64_t v46 = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,%d,prctile10,%f,prctile90,%f", buf, 0x72u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022D4F68);
    }
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimAlgController::logDistributionParameters(CLSwimStyleType, CLMotionTypeTimestamp, CLMotionTypeTimestamp, CLSwimStrokesPerTurnDistribution) const", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
}

BOOL sub_10096C6A0(uint64_t a1, double a2, double a3)
{
  if (!sub_10041DA28(*(void *)(a1 + 8))) {
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 8) + 40))(&v24);
    if ((*(int (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), v6) >= 5)
    {
      sub_100E0B7E4(a1 + 153112, v6, (uint64_t)&v24);
      uint64_t v7 = *(void *)(a1 + 8);
      v23[4] = v28;
      v23[5] = v29;
      v23[6] = v30;
      v23[0] = v24;
      v23[1] = v25;
      v23[2] = v26;
      v23[3] = v27;
      sub_10041DA40(v7, v6, v23);
      v22[4] = v28;
      v22[5] = v29;
      v22[6] = v30;
      v22[0] = v24;
      v22[1] = v25;
      v22[2] = v26;
      v22[3] = v27;
      sub_10096C3D0(a1, v6, (uint64_t)v22, a2, a3);
    }
    uint64_t v6 = (v6 + 1);
  }
  while (v6 != 7);
  BOOL v8 = *(unsigned char *)(a1 + 52) == 0;
  sub_1011E90EC(a1 + 153240, (double **)&v24, a2);
  if (v8)
  {
    uint64_t v16 = (double *)*((void *)&v24 + 1);
    for (CFIndex i = (double *)v24; i != v16; ++i)
      sub_10041C4AC(*(void *)(a1 + 8), 6u, 1, *i);
  }
  if (sub_10041C628(*(void **)(a1 + 8), (__n128 *)&v20, a2))
  {
    long long v17 = v20;
    uint64_t v18 = v21;
    sub_100E0AC24(a1 + 153112, &v17, v9, v10, v11, v12, __p);
    BOOL v13 = sub_10096BE6C((uint64_t *)a1, (long long **)__p, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v13 = 0;
  }
  if ((void)v24)
  {
    *((void *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
  return v13;
}

void sub_10096C8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *(void **)(v14 - 192);
  if (v16)
  {
    *(void *)(v14 - 184) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

float sub_10096C93C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 166064);
  *(_OWORD *)a2 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 153144);
  unsigned int v5 = *(_DWORD *)(a1 + 153148);
  uint64_t v7 = *(void *)(a1 + 153152);
  int v8 = *(_DWORD *)(a1 + 153164);
  LODWORD(v9) = sub_100DE5368(a1 + 36816, *(double *)&v4).u32[0];
  float v11 = v10;
  float v13 = v12;
  if (v5) {
    float v14 = (float)((float)v6 * 100.0) / (float)v5;
  }
  else {
    float v14 = 0.0;
  }
  *(_DWORD *)(a2 + 20) = vcvtas_u32_f32(v14);
  float result = (*(float (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8)) * 10.0;
  *(_DWORD *)(a2 + 24) = vcvtas_u32_f32(result);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 40) = v8;
  *(_DWORD *)(a2 + 44) = vcvtas_u32_f32(v13);
  *(_DWORD *)(a2 + 48) = vcvtas_u32_f32(v9);
  *(_DWORD *)(a2 + 52) = vcvtas_u32_f32(v11);
  return result;
}

uint64_t sub_10096CA38(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = a1 + 166064;
  int v8 = sub_100419758(*(void *)(a1 + 8), a2, a4, *(double *)(a1 + 712));
  if ((v8 - 1) >= 3)
  {
    if (v8 == 5)
    {
      *(double *)(v7 + 8) = a4;
      sub_10096C93C(a1, a3);
      *(void *)(a1 + 153208) = 0;
      *(_OWORD *)(a1 + 153176) = 0u;
      *(_OWORD *)(a1 + 153192) = 0u;
      *(_OWORD *)(a1 + 153144) = 0u;
      *(_OWORD *)(a1 + 153160) = 0u;
      *(_OWORD *)(a1 + 114040) = 0u;
      *(_DWORD *)(a1 + 114056) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)uint64_t v7 = _Q0;
      uint64_t result = 1;
      *(void *)(a1 + 712) = 0;
    }
    else
    {
      if (v8 == 6) {
        sub_10096CB48((uint64_t *)a1, 0, *(double *)(a1 + 712), a4, a4);
      }
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a1 + 153208) = 0;
    *(_OWORD *)(a1 + 153176) = 0u;
    *(_OWORD *)(a1 + 153192) = 0u;
    *(_OWORD *)(a1 + 153144) = 0u;
    *(_OWORD *)(a1 + 153160) = 0u;
    *(_OWORD *)(a1 + 114040) = 0u;
    *(_DWORD *)(a1 + 114056) = 0;
    *(void *)(v7 + 8) = 0xBFF0000000000000;
    *(void *)(a1 + 712) = 0;
    *(double *)uint64_t v7 = a4;
  }
  return result;
}

void sub_10096CB48(uint64_t *a1, int a2, double a3, double a4, double a5)
{
  uint64_t v9 = a1[1];
  *(double *)(v9 + 2168) = a4;
  sub_10041F188(v9, a5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1[1] + 176))(a1[1]))
  {
    sub_10096C6A0((uint64_t)a1, a3, a3);
    sub_100E0AC04((uint64_t)(a1 + 19139), __p);
    if (a2) {
      sub_10096BE6C(a1, (long long **)__p, a3);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (a2) {
    sub_10041C138(a1[1], a4, a3);
  }
}

void sub_10096CC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10096CC34(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t result = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), v9);
  BOOL v8 = !result
    || (int v5 = DWORD1(v13),
        result = (*(uint64_t (**)(void, double, double))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), *(double *)(a2 + 8), *(double *)a2), v5 != result)&& (result != 6 ? (v6 = v5 == 6) : (v6 = 1), v6)|| (double v7 = *(double *)(a2 + 8), *((double *)&v10 + 1) > v7)|| v7 - *((double *)&v10 + 1) > 10.0;
  *(unsigned char *)(a2 + 20) = v8;
  return result;
}

void *sub_10096CD50(void *result)
{
  *uint64_t result = off_1022D4F38;
  return result;
}

void sub_10096CD70(void *a1)
{
  *a1 = off_1022D4F38;
  operator delete();
}

void sub_10096CDA0(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

unsigned __int16 *sub_10096CDD0(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  long long v4 = &result[36 * (v3 - v2)];
  int v5 = *(_DWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 4) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 12) = v6;
  *((_DWORD *)v4 + 10) = v5;
  *(_OWORD *)(v4 + 22) = *(_OWORD *)(a2 + 36);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 56);
  unsigned int v7 = result[1];
  unint64_t v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    unint64_t v9 = *result + 1;
    if (v9 < v8) {
      LOWORD(v8) = 0;
    }
    *uint64_t result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

BOOL sub_10096CE50(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = a2 - 501;
  unint64_t v5 = v4 + v3;
  if (__CFADD__(v4, v3))
  {
    uint64_t v7 = sub_10096CEFC(a1, v4 + v3);
    *(_DWORD *)a3 = *(_DWORD *)v7;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v7 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v7 + 12);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(v7 + 20);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(v7 + 28);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 32);
    if (v7 != a3) {
      *(_OWORD *)(a3 + 36) = *(_OWORD *)(v7 + 36);
    }
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(v7 + 56);
  }
  return v5 < v3;
}

uint64_t sub_10096CEFC(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D4F88);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)int buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022D4F88);
      }
      unint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLSwimFusionInput>::operator[](const size_t) const [T = CLSwimFusionInput]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[36 * (v4 - v5) + 4];
}

void sub_10096D0FC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

float sub_10096D130(uint64_t a1, void *a2, double *a3, int8x16_t a4, int8x16_t a5)
{
  float v5 = 3.4028e38;
  if (*(unsigned char *)(a1 + 82))
  {
    float v6 = 3.4028e38;
    float32x4_t v9 = (float32x4_t)veorq_s8(a4, a4);
    float32x4_t v7 = (float32x4_t)veorq_s8(a5, a5);
    v9.i64[0] = *a2;
    int v8 = (__int32 *)(a2 + 1);
    v9.i32[2] = *v8;
    double v10 = *(double *)((unint64_t)(v8 + 2) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v11 = *(void **)a1;
    int v12 = *(unsigned __int16 *)(a1 + 80);
    int v13 = *(_DWORD **)(a1 + 16);
    do
    {
      v7.i64[0] = *v11;
      long long v14 = v11 + 1;
      v7.i32[2] = *v14;
      unint64_t v11 = v14 + 1;
      float32x4_t v15 = vsubq_f32(v7, v9);
      float32x4_t v16 = vmulq_f32(v15, v15);
      float32x4_t v7 = vpaddq_f32(v16, v16);
      v7.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v7.f32));
      *v13++ = v7.i32[0];
      float v6 = fminf(v6, v7.f32[0]);
      BOOL v17 = __OFSUB__(v12--, 1);
    }
    while (v12 < 0 == v17);
    *(_WORD *)(a1 + 80) = *(_WORD *)(*(void *)(a1 + 64) + 2);
    if (SLODWORD(v6) <= *(_DWORD *)(a1 + 32))
    {
      int v18 = *(_DWORD *)(a1 + 40);
      BOOL v19 = v18 != 0;
      *(_DWORD *)(a1 + 40) = (v18 + 1) % *(unsigned __int16 *)(a1 + 38);
      long long v20 = *(_WORD **)(a1 + 48);
      uint64_t v21 = *(float **)(a1 + 24);
      int v22 = *(unsigned __int16 *)(a1 + 36);
      do
      {
        uint64_t v23 = (double *)(*(void *)(a1 + 72) + 4 * ((void)v20 - *(void *)(a1 + 48)));
        uint64_t v24 = (unsigned __int16)*v20;
        if (v19 || *v20)
        {
          if (*v20)
          {
            long long v30 = (unsigned __int16 *)(*(void *)(a1 + 64) + 4 * v24);
            uint64_t v31 = *v30;
            int v32 = *(v30 - 2);
            uint64_t v33 = (v31 - v32);
            float v34 = 3.4028e38;
            float v35 = 3.4028e38;
            if ((int)v33 >= 1) {
              float v34 = v21[(v33 - 1)];
            }
            if ((int)v33 < *(unsigned __int16 *)(a1 + 58) && (int)v33 >= 0) {
              float v35 = v21[v33];
            }
            int v36 = v30[1];
            __int16 v37 = (float *)(*(void *)(a1 + 16) + 4 * v31);
            int v38 = *(v30 - 1);
            int v39 = v31 + 1;
            float v41 = *v37;
            uint64_t v40 = v37 + 1;
            float v42 = v41 + fminf(v34, v35);
            __int16 v43 = &v21[v39 - v32];
            if (v38 > v36) {
              int v38 = v30[1];
            }
            int v45 = v38 - v39;
            BOOL v44 = v38 < v39;
            float v46 = v42;
            *uint64_t v21 = v42;
            uint64_t v47 = v21 + 1;
            if (!v44)
            {
              do
              {
                float v48 = fminf(v35, v46);
                float v49 = *v43++;
                float v35 = v49;
                float v50 = fminf(v48, v49);
                float v51 = *v40++;
                ++v39;
                float v46 = v51 + v50;
                float v42 = fminf(v42, v51 + v50);
                *v47++ = v51 + v50;
                BOOL v17 = __OFSUB__(v45--, 1);
              }
              while (v45 < 0 == v17);
            }
            int v52 = v36 - v39;
            if (v36 >= v39)
            {
              float v54 = *v40;
              uint64_t v53 = v40 + 1;
              BOOL v17 = __OFSUB__(v52, 1);
              int v55 = v52 - 1;
              float v56 = v54 + fminf(v35, v46);
              float v42 = fminf(v42, v56);
              *uint64_t v47 = v56;
              for (CFIndex i = v47 + 1; v55 < 0 == v17; --v55)
              {
                float v58 = *v53++;
                float v56 = v56 + v58;
                float v42 = fminf(v42, v56);
                *i++ = v56;
                BOOL v17 = __OFSUB__(v55, 1);
              }
            }
            int v59 = *(_DWORD *)(a1 + 32);
            uint64_t v60 = (v24 + 1);
            *long long v20 = v60;
            if (SLODWORD(v42) <= v59)
            {
              if ((int)v60 < *(unsigned __int16 *)(a1 + 10))
              {
                int v61 = *(unsigned __int16 *)(a1 + 80);
                if (v61 < SHIWORD(*(_DWORD *)(*(void *)(a1 + 64) + 4 * v60))) {
                  LOWORD(v61) = HIWORD(*(_DWORD *)(*(void *)(a1 + 64) + 4 * v60));
                }
                *(_WORD *)(a1 + 80) = v61;
              }
              else
              {
                if (SLODWORD(v5) > SLODWORD(v42))
                {
                  float v5 = v42;
                  *a3 = v10 - *v23;
                }
                *long long v20 = 0;
              }
            }
            else
            {
              *long long v20 = 0;
            }
          }
        }
        else
        {
          int v25 = *(unsigned __int16 *)(a1 + 58);
          *uint64_t v21 = **(float **)(a1 + 16);
          long long v26 = v21 + 1;
          BOOL v17 = __OFSUB__(v25, 1);
          for (int j = v25 - 1; !((j < 0) ^ v17 | (j == 0)); --j)
          {
            *v26++ = 2139095039;
            BOOL v17 = __OFSUB__(j, 1);
          }
          int v28 = *(unsigned __int16 *)(a1 + 80);
          uint64_t v29 = *(void *)(a1 + 64);
          *long long v20 = 1;
          if (v28 < SHIWORD(*(_DWORD *)(v29 + 4))) {
            LOWORD(v28) = HIWORD(*(_DWORD *)(v29 + 4));
          }
          *(_WORD *)(a1 + 80) = v28;
          *uint64_t v23 = v10;
          BOOL v19 = 1;
        }
        ++v20;
        v21 += *(unsigned __int16 *)(a1 + 58);
        BOOL v17 = __OFSUB__(v22--, 1);
      }
      while (!((v22 < 0) ^ v17 | (v22 == 0)));
    }
    else
    {
      bzero(*(void **)(a1 + 48), 2 * *(unsigned __int16 *)(a1 + 36));
      return 3.4028e38;
    }
  }
  return v5;
}

uint64_t sub_10096D418(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(void *)(a1 + 104) = a2;
  char v3 = sub_1000FFBA8();
  *(_OWORD *)(a1 + 128) = 0u;
  *(unsigned char *)(a1 + 120) = v3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 1065353216;
  int v20 = 0;
  sub_10097F554(&v20, &v21);
  int v19 = 0;
  int v22 = &v19;
  unint64_t v4 = sub_10097F2A8(a1 + 488, &v19, (uint64_t)&unk_101D0B290, &v22);
  long long v5 = v21;
  long long v21 = 0uLL;
  float v6 = (std::__shared_weak_count *)v4[4];
  *(_OWORD *)(v4 + 3) = v5;
  if (v6)
  {
    sub_1000DB0A0(v6);
    if (*((void *)&v21 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  int v20 = 1;
  sub_10097F554(&v20, &v21);
  int v19 = 1;
  int v22 = &v19;
  float32x4_t v7 = sub_10097F2A8(a1 + 488, &v19, (uint64_t)&unk_101D0B290, &v22);
  long long v8 = v21;
  long long v21 = 0uLL;
  float32x4_t v9 = (std::__shared_weak_count *)v7[4];
  *(_OWORD *)(v7 + 3) = v8;
  if (v9)
  {
    sub_1000DB0A0(v9);
    if (*((void *)&v21 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  LODWORD(v22) = 0;
  *(void *)&long long v21 = &v22;
  *((unsigned char *)sub_10097F690(a1 + 168, (int *)&v22, (uint64_t)&unk_101D0B290, (_DWORD **)&v21) + 20) = 0;
  if (*(unsigned char *)(a1 + 120))
  {
    int v20 = 2;
    sub_10097F554(&v20, &v21);
    int v19 = 2;
    int v22 = &v19;
    double v10 = sub_10097F2A8(a1 + 488, &v19, (uint64_t)&unk_101D0B290, &v22);
    long long v11 = v21;
    long long v21 = 0uLL;
    int v12 = (std::__shared_weak_count *)v10[4];
    *(_OWORD *)(v10 + 3) = v11;
    if (v12)
    {
      sub_1000DB0A0(v12);
      if (*((void *)&v21 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v21 + 1));
      }
    }
    int v20 = 3;
    sub_10097F554(&v20, &v21);
    int v19 = 3;
    int v22 = &v19;
    int v13 = sub_10097F2A8(a1 + 488, &v19, (uint64_t)&unk_101D0B290, &v22);
    long long v14 = v21;
    long long v21 = 0uLL;
    float32x4_t v15 = (std::__shared_weak_count *)v13[4];
    *(_OWORD *)(v13 + 3) = v14;
    if (v15)
    {
      sub_1000DB0A0(v15);
      if (*((void *)&v21 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v21 + 1));
      }
    }
    LODWORD(v22) = 1;
    *(void *)&long long v21 = &v22;
    *((unsigned char *)sub_10097F690(a1 + 168, (int *)&v22, (uint64_t)&unk_101D0B290, (_DWORD **)&v21) + 20) = 0;
  }
  *(void *)a1 = [objc_msgSend(*(id *)(a1 + 104), "silo") queue];
  id v16 = [[objc_msgSend(*(id *)(a1 + 104), "vendor") proxyForService:@"CLTelephonyService"];
  *(void *)(a1 + 112) = v16;
  id v17 = v16;
  sub_10096D820(a1);
  sub_10096E164(a1);
  return a1;
}

void sub_10096D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_10017FBB4(v19);
  sub_1000D7D80(v13 + 320);
  sub_1000D7D80(v18);
  sub_1000FF568(v13 + 240);
  sub_1000D7D80(v17);
  sub_1000D7D80(v16);
  sub_1000D7D80(v15);
  sub_1000DB114(a11);
  sub_1000D7D80(v14);
  sub_1000DB114(v13);
  sub_1002220F0(v12);
  sub_10097F1D8(v11 + 24);
  _Unwind_Resume(a1);
}

void sub_10096D820(uint64_t a1)
{
  sub_1000FECE0(@"kEmergencyModeChangeNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  unint64_t v2 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D54C0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v2 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kSimStatusChangeNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  char v3 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5540;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v3 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kBundleChangeNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  unint64_t v4 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D55C0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v4 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kDefaultBundleChangeNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  long long v5 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5640;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v5 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kInHomeCountryNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  float v6 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D56C0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v6 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kRegistrationDisplayStatusNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  float32x4_t v7 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5740;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v7 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kCellInfoNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  long long v8 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D57C0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v8 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kDataStatusNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  float32x4_t v9 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5840;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v9 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kSubscriptionChangeNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  double v10 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D58C0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v10 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kSubscriberMccAndMncNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v11 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5940;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v11 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kServingMccAndMncNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v12 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D59C0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v12 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kPhoneNumberStatusNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v13 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5A40;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v13 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kSimInfoChangedNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v14 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5AC0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v14 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kVoiceLinkQualityNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v15 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5B40;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v15 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kTandemCapabilityNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v16 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5BC0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v16 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kStewieSupportNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v17 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5C40;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v17 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  sub_1000FECE0(@"kImsRegStatusNotification", (uint64_t)__p);
  long long v21 = (uint64_t (**)())__p;
  uint64_t v18 = sub_10097F8B4(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v21);
  long long v21 = off_1022D5CC0;
  uint64_t v22 = a1;
  uint64_t v23 = &v21;
  sub_10084E088(&v21, (void *)v18 + 5);
  sub_10068280C(&v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10096E100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10096E164(uint64_t a1)
{
  sub_10096EA24(a1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 120);
    *(_DWORD *)int buf = 67109120;
    int v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,createCTClient,isTandem,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = *(unsigned __int8 *)(a1 + 120);
    int v30 = 67109120;
    int v31 = v7;
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::createCTClient()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v4 = [objc_alloc((Class)CoreTelephonyClient) initWithQueue:*(void *)a1];
  *(void *)(a1 + 16) = v4;
  if (!v4) {
    sub_101A74BCC();
  }
  long long v5 = objc_alloc_init(CTClientDelegate);
  *(void *)(a1 + 8) = v5;
  if (!v5) {
    sub_101A74D44();
  }
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10096EBD4;
  v29[3] = &unk_1022D4FA8;
  v29[4] = a1;
  [(CTClientDelegate *)v5 setFEmergModeCb:v29];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10096EDE0;
  v28[3] = &unk_1022D4FC8;
  v28[4] = a1;
  [*(id *)(a1 + 8) setFSimStatusCb:v28];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10096F110;
  v27[3] = &unk_1022D4FE8;
  v27[4] = a1;
  [*(id *)(a1 + 8) setFCarrierBundleChangeCb:v27];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10096F420;
  v26[3] = &unk_1022D4FE8;
  v26[4] = a1;
  [*(id *)(a1 + 8) setFOperatorBundleChangeCb:v26];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10096F730;
  v25[3] = &unk_1022A3020;
  v25[4] = a1;
  [*(id *)(a1 + 8) setFDefaultBundleChangeCb:v25];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10096F988;
  v24[3] = &unk_1022D5008;
  v24[4] = a1;
  [*(id *)(a1 + 8) setFDisplayStatusCb:v24];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10096FE8C;
  v23[3] = &unk_1022D5028;
  v23[4] = a1;
  [*(id *)(a1 + 8) setFDataStatusCb:v23];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100970344;
  v22[3] = &unk_1022A3020;
  v22[4] = a1;
  [*(id *)(a1 + 8) setFSubscriptionInfoCb:v22];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1009704E8;
  v21[3] = &unk_1022D4FE8;
  v21[4] = a1;
  [*(id *)(a1 + 8) setFSubscriberMccCb:v21];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100176928;
  v20[3] = &unk_1022D5048;
  v20[4] = a1;
  [*(id *)(a1 + 8) setFCellInfoCb:v20];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1009706FC;
  _DWORD v19[3] = &unk_1022D5068;
  v19[4] = a1;
  [*(id *)(a1 + 8) setFLinkQualityCb:v19];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100970BB8;
  v18[3] = &unk_1022D5088;
  _DWORD v18[4] = a1;
  [*(id *)(a1 + 8) setFVoiceLinkQualityCb:v18];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10017A6F0;
  v17[3] = &unk_1022D50A8;
  v17[4] = a1;
  [*(id *)(a1 + 8) setFServingCellChangedCb:v17];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10097130C;
  v16[3] = &unk_1022D4FE8;
  v16[4] = a1;
  [*(id *)(a1 + 8) setFServingNetworkChangedCb:v16];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10097178C;
  v15[3] = &unk_1022D50C8;
  unsigned int v15[4] = a1;
  [*(id *)(a1 + 8) setFSuplSmsCb:v15];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  int v14[2] = sub_100971AD0;
  v14[3] = &unk_1022D50E8;
  v14[4] = a1;
  [*(id *)(a1 + 8) setFSmsSentCb:v14];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100971D8C;
  void v13[3] = &unk_1022D4FE8;
  v13[4] = a1;
  [*(id *)(a1 + 8) setFprefDataSimChangedCb:v13];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1009720B4;
  uint64_t v12[3] = &unk_1022D4FE8;
  v12[4] = a1;
  [*(id *)(a1 + 8) setFPhoneNumberInfoCb:v12];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1009722C4;
  void v11[3] = &unk_1022A3020;
  v11[4] = a1;
  [*(id *)(a1 + 8) setFTandemCapabilityChangeCb:v11];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  unsigned char v10[2] = sub_100972468;
  v10[3] = &unk_1022A3020;
  v10[4] = a1;
  [*(id *)(a1 + 8) setFStewieSupportChangedCb:v10];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_100972678;
  _OWORD v9[3] = &unk_1022D5108;
  v9[4] = a1;
  [*(id *)(a1 + 8) setFImsRegStatusCb:v9];
  return [*(id *)(a1 + 16) setDelegate:*(void *)(a1 + 8)];
}

uint64_t sub_10096E98C(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  sub_10017FBB4(a1 + 488);
  sub_1000D7D80(a1 + 448);
  sub_1000D7D80(a1 + 408);
  sub_1000FF568(a1 + 368);
  sub_1000D7D80(a1 + 328);
  sub_1000D7D80(a1 + 288);
  sub_1000D7D80(a1 + 248);
  sub_1000DB114(a1 + 208);
  sub_1000D7D80(a1 + 168);
  sub_1000DB114(a1 + 128);
  sub_1002220F0(a1 + 64);
  sub_10097F1D8(a1 + 24);
  return a1;
}

void sub_10096EA24(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl destroyCTClient", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::destroyCTClient()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }

  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
}

id sub_10096EBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10096EBDC(*(void *)(a1 + 32), a2, a3);
}

id sub_10096EBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  float v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138478083;
    uint64_t v10 = a2;
    __int16 v11 = 2114;
    uint64_t v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ctcl,#emg,onEmergencyModeChanged context %{private}@, mode %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onEmergencyModeChanged(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10055DA4C(buf, a2, a3);
  return [*(id *)(a1 + 112) sendNotificationToClients:@"kEmergencyModeChangeNotification" notificationData:sub_10055E144(buf)];
}

void sub_10096EDE0(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_10096EDE8(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  float v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138478083;
    __int16 v11 = a2;
    __int16 v12 = 2113;
    uint64_t v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ctcl,#supl,onSimStatusChange context %{private}@, status %{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    float32x4_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSimStatusChange(CTXPCServiceSubscriptionContext *, NSString *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
  {
    sub_1009704F0(a1, a2);
    sub_1009763A4(a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onSimStatusChange,received Invalid from CTXPCServiceSubscriptionContext", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSimStatusChange(CTXPCServiceSubscriptionContext *, NSString *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_10096F110(uint64_t a1, void *a2)
{
}

void sub_10096F118(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138477827;
    float32x4_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,onCarrierBundleChangedNotifFromCT,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCarrierBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
  {
    sub_100977D84(a1, a2, 1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onCarrierBundleChangedNotifFromCT,InvalidSlot", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onCarrierBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_10096F420(uint64_t a1, void *a2)
{
}

void sub_10096F428(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138477827;
    float32x4_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,onOperatorBundleChangedNotifFromCT,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onOperatorBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
  {
    sub_100977D84(a1, a2, 2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onOperatorBundleChangedNotifFromCT,InvalidSlot", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onOperatorBundleChangedNotifFromCT(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

id sub_10096F730(uint64_t a1)
{
  return sub_10096F738(*(void *)(a1 + 32));
}

id sub_10096F738(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryDefaultBundle", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v10 = 0;
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDefaultBundle()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v3 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1];
  CFStringRef v11 = @"LocationByCountry";
  id v4 = +[NSArray arrayWithObjects:&v11 count:1];
  id v5 = [objc_alloc((Class)CTBundle) initWithBundleType:4];
  float v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_100979CC8;
  _OWORD v9[3] = &unk_1022D52C8;
  v9[4] = v4;
  void v9[5] = a1;
  return [v6 copyCarrierBundleValue:v3 keyHierarchy:v4 bundleType:v5 completion:v9];
}

void sub_10096F988(uint64_t a1, void *a2, void *a3)
{
}

void sub_10096F990(uint64_t a1, void *a2, void *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  float v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,onRegistrationDisplayStatusChanged,context,%{private}@,status,%{private}@", (uint8_t *)&buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_DWORD *)uint64_t v14 = 138478083;
    *(void *)&v14[4] = a2;
    __int16 v15 = 2113;
    uint64_t v16 = a3;
    __int16 v12 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onRegistrationDisplayStatusChanged(CTXPCServiceSubscriptionContext *, CTRegistrationDisplayStatus *)", "%s\n", (const char *)v12);
    if (v12 != &buf) {
      free(v12);
    }
  }
  if (sub_10132FC6C(a2, [a3 registrationDisplayStatus]))
  {
    if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
    {
      sub_10055E9C4(&buf, a3);
      int v13 = sub_100090424((uint64_t)[a2 slotID]);
      *(void *)uint64_t v14 = &v13;
      __int16 v10 = sub_100980D50(a1 + 208, &v13, (uint64_t)&unk_101D0B290, (_DWORD **)v14);
      CFStringRef v11 = (void **)(v10 + 3);
      if (*((char *)v10 + 47) < 0) {
        operator delete(*v11);
      }
      *(_OWORD *)CFStringRef v11 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      void v10[5] = buf.__r_.__value_.__r.__words[2];
      *((_DWORD *)v10 + 12) = v18;
      [*(id *)(a1 + 112) sendNotificationToClients:@"kRegistrationDisplayStatusNotification" notificationData:sub_101330EB0(a1 + 208)];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onRegistrationDisplayStatusChanged,InvalidInstance", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        *(_WORD *)uint64_t v14 = 0;
        long long v8 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onRegistrationDisplayStatusChanged(CTXPCServiceSubscriptionContext *, CTRegistrationDisplayStatus *)", "%s\n", (const char *)v8);
LABEL_25:
        if (v8 != &buf) {
          free(v8);
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    float32x4_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isValidParamsDisplayStatus failed", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      *(_WORD *)uint64_t v14 = 0;
      long long v8 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onRegistrationDisplayStatusChanged(CTXPCServiceSubscriptionContext *, CTRegistrationDisplayStatus *)", "%s\n", (const char *)v8);
      goto LABEL_25;
    }
  }
}

void sub_10096FE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10096FE8C(uint64_t a1, void *a2, void *a3)
{
}

void sub_10096FE94(uint64_t a1, void *a2, void *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  float v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138478083;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2113;
    *(void *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,onDataStatusChanged,context,%{private}@,status,%{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_DWORD *)__int16 v15 = 138478083;
    *(void *)&unsigned int v15[4] = a2;
    __int16 v16 = 2113;
    uint64_t v17 = a3;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onDataStatusChanged(CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n", v13);
    if (v13 != buf) {
      free(v13);
    }
  }
  if (sub_1013304C4(a2, (uint64_t)a3))
  {
    if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
    {
      sub_10055F768((uint64_t)buf, a3);
      int v14 = sub_100090424((uint64_t)[a2 slotID]);
      *(void *)__int16 v15 = &v14;
      __int16 v10 = sub_1007006D0(a1 + 248, &v14, (uint64_t)&unk_101D0B290, (_DWORD **)v15);
      char v11 = v19;
      long long v12 = *(_OWORD *)&buf[16];
      *(_OWORD *)((char *)v10 + 20) = *(_OWORD *)buf;
      *(_OWORD *)((char *)v10 + 36) = v12;
      *((unsigned char *)v10 + 52) = v11;
      [*(id *)(a1 + 112) sendNotificationToClients:@"kDataStatusNotification" notificationData:sub_10133137C(a1 + 248)];
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onDataStatusChanged,InvalidInstance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      *(_WORD *)__int16 v15 = 0;
      long long v8 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onDataStatusChanged(CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n");
LABEL_25:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    float32x4_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isValidParamsDataStatus failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      *(_WORD *)__int16 v15 = 0;
      long long v8 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onDataStatusChanged(CTXPCServiceSubscriptionContext *, CTDataStatus *)", "%s\n");
      goto LABEL_25;
    }
  }
}

void sub_100970344(uint64_t a1)
{
}

void sub_10097034C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,subscriptionInfoChanged", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSubscriptionInfoChanged()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100972B94(a1);
}

id sub_1009704E8(uint64_t a1, void *a2)
{
  return sub_1009704F0(*(void *)(a1 + 32), a2);
}

id sub_1009704F0(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,querySubscriberMccAndMnc,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = 138477827;
    char v11 = a2;
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v5 = a2;
  float v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_10097676C;
  _OWORD v9[3] = &unk_1022D5210;
  v9[4] = a2;
  void v9[5] = a1;
  return [v6 copyMobileSubscriberCountryCode:a2 completion:v9];
}

void sub_1009706FC(uint64_t a1, void *a2, void *a3)
{
}

void sub_100970704(uint64_t a1, void *a2, void *a3)
{
  if (!a3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022D5440);
    }
    long long v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#ci,onLinkQualityChanged ERROR: metric from notification is null", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022D5440);
    }
    LOWORD(v20) = 0;
LABEL_34:
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTEnhancedDataLinkQualityMetric *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    return;
  }
  int v5 = sub_100090424((uint64_t)[a2 slotID]);
  if (!v5)
  {
    int v7 = &off_1022BAEA0;
LABEL_14:
    float32x4_t v9 = *v7;
    __int16 v10 = sub_101335390([a3 enhancedLinkQuality]);
    if (v10 == 1)
    {
      char v11 = HIBYTE(v10);
      long long v12 = +[NSNumber numberWithInt:(v10 >> 8)];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022D5440);
      }
      int v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 16909058;
        v25[0] = v11;
        *(_DWORD *)&v25[1] = 1107362050;
        char v26 = 8;
        long long v27 = v9;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,#LQM onLinkQualityChanged lqm: %{public}hhd, type: %{public}hhd, key: %{public}@", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022D5440);
        }
        int v20 = 16909058;
        v21[0] = v11;
        *(_DWORD *)&v21[1] = 1107362050;
        char v22 = 8;
        uint64_t v23 = v9;
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTEnhancedDataLinkQualityMetric *)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      int v14 = *(void **)(a1 + 112);
      int v18 = v9;
      char v19 = v12;
      [v14 sendNotificationToClients:@"kLinkQualityNotification" notificationData:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1)];
    }
    return;
  }
  int v6 = v5;
  if (v5 == 1)
  {
    int v7 = &off_1022BAEA8;
    goto LABEL_14;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  __int16 v15 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)int v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,onLinkQualityChanged invalid slotdId %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v20 = 67240192;
    *(_DWORD *)long long v21 = v6;
    goto LABEL_34;
  }
}

void sub_100970BB8(uint64_t a1, void *a2, void *a3)
{
}

void sub_100970BC0(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
  {
    if ([a2 slotID])
    {
      if (a3)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022D5440);
        }
        int v7 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = [objc_msgSend(a3, "linkQuality") intValue];
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = [a2 slotID];
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,#vlqm, onVoiceLinkQualityChanged vlqm: %{public}d, slotID: %{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022D5440);
          }
          int v17 = 67240448;
          *(_DWORD *)int v18 = [objc_msgSend(a3, "linkQuality") intValue];
          *(_WORD *)&_DWORD v18[4] = 1026;
          *(_DWORD *)&v18[6] = [a2 slotID];
          int v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v14);
          if (v14 != buf) {
            free(v14);
          }
        }
        unsigned int v8 = [[objc_msgSend(a3, "linkQuality") intValue];
        int v17 = sub_100090424((uint64_t)[a2 slotID]);
        *(void *)std::string buf = &v17;
        *((_DWORD *)sub_1000F3C48(a1 + 448, &v17, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = v8;
        id v9 = sub_101335180((void *)(a1 + 448));
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022D5440);
        }
        __int16 v10 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 138543362;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,#vlqm, onVoiceLinkQualityChanged voiceLqmInfo:%{public}@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022D5440);
          }
          int v17 = 138543362;
          *(void *)int v18 = v9;
          __int16 v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v15);
          if (v15 != buf) {
            free(v15);
          }
        }
        [*(id *)(a1 + 112) sendNotificationToClients:@"kVoiceLinkQualityNotification" notificationData:v9];
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022D5440);
        }
        int v13 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ctcl,#vlqm,onVoiceLinkQualityChanged ERROR: vlqm is null", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022D5440);
          }
          LOWORD(v17) = 0;
          __int16 v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
        }
        int v17 = sub_100090424((uint64_t)[a2 slotID]);
        *(void *)std::string buf = &v17;
        *((_DWORD *)sub_1000F3C48(a1 + 448, &v17, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = -1;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022D5440);
      }
      char v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl,#vlqm,onVoiceLinkQualityChanged ERROR: unknown slotId", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022D5440);
        }
        LOWORD(v17) = 0;
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onVoiceLinkQualityChanged,InvalidInstance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v17) = 0;
LABEL_32:
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onVoiceLinkQualityChanged(CTXPCServiceSubscriptionContext *, CTVoiceLinkQualityMetric *)", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
  }
}

void sub_10097130C(uint64_t a1, void *a2)
{
}

void sub_100971314(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    v19[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onServingNetworkChanged context %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v16 = 138477827;
    int v17 = a2;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onServingNetworkChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  int v5 = sub_100090424((uint64_t)[a2 slotID]);
  if (!v5)
  {
    int v6 = &off_1022BAEA0;
LABEL_10:
    int v7 = *v6;
    if ([a2 label])
    {
      unsigned int v8 = *(void **)(a1 + 112);
      int v14 = v7;
      id v15 = [a2 label];
      [v8 sendNotificationToClients:@"kServingNetworkChangedNotification" notificationData:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1)];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      char v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        LODWORD(v19[0]) = 0;
        WORD2(v19[0]) = 2082;
        *(void *)((char *)v19 + 6) = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci,onServingNetworkChanged nil context label\"}", buf, 0x12u);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
      }
      long long v12 = qword_1024193D8;
      if (os_signpost_enabled((os_log_t)qword_1024193D8))
      {
        *(_DWORD *)std::string buf = 68289026;
        LODWORD(v19[0]) = 0;
        WORD2(v19[0]) = 2082;
        *(void *)((char *)v19 + 6) = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ctcl,#cterror,#ci,onServingNetworkChanged nil context label", "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci,onServingNetworkChanged nil context label\"}", buf, 0x12u);
      }
    }
    return;
  }
  if (v5 == 1)
  {
    int v6 = &off_1022BAEA8;
    goto LABEL_10;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,onServingNetworkChanged invalid slotdId", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    LOWORD(v16) = 0;
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onServingNetworkChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_10097178C(uint64_t a1, void *a2, void *a3)
{
}

void sub_100971794(uint64_t a1, void *a2, void *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138478083;
    int v13 = a2;
    __int16 v14 = 2113;
    id v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ctcl,#supl,OnSuplSMSReceived context %{private}@, body %{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::OnSuplSMSReceived(CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (sub_1013317AC(a2, (uint64_t)a3))
  {
    CFDictionaryRef v7 = sub_101331B00(a2, a3);
    CFDictionaryRef v8 = v7;
    [*(id *)(a1 + 112) sendNotificationToClients:@"kSuplInitPayloadNotification" notificationData:v7];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isSuplInfoValid failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::OnSuplSMSReceived(CTXPCServiceSubscriptionContext *, NSData *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_100971AD0(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
}

void sub_100971AD8(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  long long v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68290306;
    int v18 = 0;
    __int16 v19 = 2082;
    int v20 = "";
    __int16 v21 = 1026;
    unsigned int v22 = [a2 slotID];
    __int16 v23 = 1026;
    int v24 = a3;
    __int16 v25 = 1026;
    int v26 = a4;
    __int16 v27 = 1026;
    int v28 = a5;
    __int16 v29 = 1026;
    int v30 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ctcl,onSmsSent\", \"ins\":%{public}d, \"success\":%{public}hhd, \"messageID\":%{public}d, \"sendError\":%{public}d, \"modemError\":%{public}d}", buf, 0x30u);
  }
  if (sub_101332440(a2))
  {
    CFDictionaryRef v13 = sub_101332EAC(a2, a3, a4, a5, a6);
    CFDictionaryRef v14 = v13;
    [*(id *)(a1 + 112) sendNotificationToClients:@"kSmsSentNotification" notificationData:v13];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,isValidSubscriptionContext failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSmsSent(CTXPCServiceSubscriptionContext *, BOOL, NSInteger, NSInteger, NSInteger)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
}

void sub_100971D8C(uint64_t a1, void *a2)
{
}

void sub_100971D94(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    char v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,onPrefDSChanged context %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onPrefDataSimChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
  {
    CFDictionaryRef v7 = sub_101332770(a2);
    CFDictionaryRef v8 = v7;
    [*(id *)(a1 + 112) sendNotificationToClients:@"kPrefDataSimChangedNotification" notificationData:v7];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,onPrefDataSimChanged,InvalidInstance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onPrefDataSimChanged(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

id sub_1009720B4(uint64_t a1, uint64_t a2)
{
  return sub_1009720BC(*(void *)(a1 + 32), a2);
}

id sub_1009720BC(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    uint64_t v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryPhoneNumberInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v9 = 138477827;
    uint64_t v10 = a2;
    CFDictionaryRef v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryPhoneNumberInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  int v5 = *(void **)(a1 + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10097B688;
  v8[3] = &unk_1022D5340;
  v8[4] = a2;
  v8[5] = a1;
  return [v5 getPhoneNumberWithCompletion:a2 completion:v8];
}

void sub_1009722C4(uint64_t a1)
{
}

void sub_1009722CC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,TandemCapabilityChanged", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::tandemCapabilityChanged()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10097BEB8(a1);
}

id sub_100972468(uint64_t a1)
{
  return sub_100972470(*(void *)(a1 + 32));
}

id sub_100972470(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl();
  char v3 = v2;
  if (v2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryStewieSupport,querying", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      __int16 v10 = 0;
      CFDictionaryRef v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryStewieSupport()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  int v5 = *(void **)(a1 + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10097DCF0;
  v8[3] = &unk_1022D53B0;
  v8[4] = a1;
  char v9 = v3;
  return [v5 getStewieSupportWithCompletion:v8];
}

id sub_100972678(uint64_t a1, void *a2, void *a3)
{
  return sub_100972680(*(void *)(a1 + 32), a2, a3);
}

id sub_100972680(uint64_t a1, void *a2, void *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    __int16 v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,queryImsRegStatus,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFDictionaryRef v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryImsRegStatus(CTXPCServiceSubscriptionContext *, CTIMSRegistrationTransportInfo *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id result = [a3 transportType];
  if (!result) {
    return sub_10097E770(a1, a2);
  }
  return result;
}

void sub_100972854(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl onCTConnectionInvalidatedNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    char v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCTConnectionInvalidatedNotification()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10096EA24(a1);
}

void sub_1009729F0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl onCTDaemonReadyNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    char v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCTDaemonReadyNotification()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10096E164(a1);
  sub_100972B94(a1);
}

void sub_100972B94(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,queryCT", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFDictionaryRef v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCT()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  char v3 = *(unsigned __int8 **)(a1 + 80);
  if (v3)
  {
    id v4 = (void *)(a1 + 24);
    do
    {
      int v5 = sub_100103284(v4, v3 + 16);
      if (v5)
      {
        uint64_t v6 = *((void *)v5 + 8);
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        }
      }
      char v3 = *(unsigned __int8 **)v3;
    }
    while (v3);
  }
}

id sub_100972D78(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,querySubscriptionInfo", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v7 = 0;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriptionInfo()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  char v3 = *(void **)(a1 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100972F60;
  v6[3] = &unk_1022D5128;
  v6[4] = a1;
  return [v3 getSubscriptionInfo:v6];
}

id sub_100972F60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#sub,#cterror,querySubscriptionInfo,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      char v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySubscriptionInfo()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return [*(id *)(v3 + 112) sendNotificationToClients:@"kSubscriptionsInUseNotification" notificationData:0];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFDictionaryRef v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138477827;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,querySubscriptionInfo,SubscriptionInfo,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriptionInfo()_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return (id)sub_100973280(v3, a2);
  }
}

uint64_t sub_100973280(uint64_t a1, void *a2)
{
  memset(v40, 0, sizeof(v40));
  int v41 = 1065353216;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v3 = [a2 subscriptions];
  id v4 = [v3 countByEnumeratingWithState:&v36 objects:v52 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v37;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v37 != v5) {
          objc_enumerationMutation(v3);
        }
        __int16 v7 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v6);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        CFDictionaryRef v8 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v9 = [v7 slotID];
          *(_DWORD *)std::string buf = 67174915;
          *(_DWORD *)&uint8_t buf[4] = v9;
          __int16 v50 = 2113;
          float v51 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ctcl,#sub,subscriptions,ins,%{private}d,SubscriptionContext,%{private}@", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022D5420);
          }
          unsigned int v12 = [v7 slotID];
          int v45 = 67174915;
          unsigned int v46 = v12;
          __int16 v47 = 2113;
          float v48 = v7;
          CFDictionaryRef v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::processSubscriptionInfo(CTXPCServiceSubscriptionInfo *)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        if (sub_101332440(v7))
        {
          sub_100560E6C((uint64_t)&v34, v7);
          int v45 = sub_100090424((uint64_t)[v7 slotID]);
          *(void *)std::string buf = &v45;
          __int16 v10 = sub_100980B28((uint64_t)v40, &v45, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          *((_WORD *)v10 + 10) = v34;
          *((unsigned char *)v10 + 22) = v35;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022D5420);
          }
          char v11 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ctcl,#sub,#cterror,isValidSubscriptionContext failed", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022D5420);
            }
            LOWORD(v45) = 0;
            CFDictionaryRef v14 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::processSubscriptionInfo(CTXPCServiceSubscriptionInfo *)", "%s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v15 = [v3 countByEnumeratingWithState:&v36 objects:v52 count:16];
      id v4 = v15;
    }
    while (v15);
  }
  [*(id *)(a1 + 112) sendNotificationToClients:@"kSubscriptionChangeNotification" notificationData:sub_101332A84((uint64_t)v40)];
  id v16 = +[NSMutableArray array];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v17 = [a2 subscriptionsInUse];
  id v18 = [v17 countByEnumeratingWithState:&v30 objects:v44 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v31;
    do
    {
      int v20 = 0;
      do
      {
        if (*(void *)v31 != v19) {
          objc_enumerationMutation(v17);
        }
        __int16 v21 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v20);
        [v16 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100090424((uint64_t)objc_msgSend(v21, "slotID")))]];
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        unsigned int v22 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v23 = [v21 slotID];
          *(_DWORD *)std::string buf = 67174915;
          *(_DWORD *)&uint8_t buf[4] = v23;
          __int16 v50 = 2113;
          float v51 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#ctcl,#sub,subscriptionsInUse,ins,%{private}d,SubscriptionContext,%{private}@", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022D5420);
          }
          unsigned int v24 = [v21 slotID];
          int v45 = 67174915;
          unsigned int v46 = v24;
          __int16 v47 = 2113;
          float v48 = v21;
          __int16 v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::processSubscriptionInfo(CTXPCServiceSubscriptionInfo *)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        int v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      id v26 = [v17 countByEnumeratingWithState:&v30 objects:v44 count:16];
      id v18 = v26;
    }
    while (v26);
  }
  __int16 v27 = *(void **)(a1 + 112);
  CFStringRef v42 = @"kSubscriptionsInUseKey";
  id v43 = v16;
  [v27 sendNotificationToClients:@"kSubscriptionsInUseNotification" notificationData:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1)];
  return sub_1000D7D80((uint64_t)v40);
}

void sub_100973938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_100973990(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100973BD0(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
    if (*(unsigned char *)(a1 + 120))
    {
      id v2 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
      sub_100973BD0(a1, v2);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v6 = "queryRegistrationDisplayStatusInfo";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

id sub_100973BD0(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    CFDictionaryRef v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryRegistrationDisplayStatusInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = 138477827;
    char v11 = a2;
    CFDictionaryRef v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_100973DDC;
  _OWORD v9[3] = &unk_1022D5150;
  v9[4] = a2;
  void v9[5] = a1;
  return [v6 copyRegistrationDisplayStatus:a2 completion:v9];
}

void sub_100973DDC(uint64_t a1, void *a2, void *a3)
{
  if (!a2 || a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFDictionaryRef v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      unsigned int v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryRegistrationDisplayStatusInfo,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138477827;
      unsigned int v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,queryRegistrationDisplayStatusInfo,DisplayStatus,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      unsigned int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryRegistrationDisplayStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_10096F990(v6, *(void **)(a1 + 32), a2);
  }
}

void sub_100974100(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100974340(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
    if (*(unsigned char *)(a1 + 120))
    {
      id v2 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
      sub_100974340(a1, v2);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v6 = "queryDataStatusInfo";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryDataStatusInfo()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

id sub_100974340(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    CFDictionaryRef v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryDataStatusInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = 138477827;
    char v11 = a2;
    CFDictionaryRef v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDataStatusInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_10097454C;
  _OWORD v9[3] = &unk_1022D5178;
  v9[4] = a2;
  void v9[5] = a1;
  return [v6 getDataStatus:a2 completion:v9];
}

void sub_10097454C(uint64_t a1, void *a2, void *a3)
{
  if (!a2 || a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFDictionaryRef v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      unsigned int v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryDataStatusInfo,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryDataStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138477827;
      unsigned int v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,queryDataStatusInfo,DataStatus,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      unsigned int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDataStatusInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_10096FE94(v6, *(void **)(a1 + 32), a2);
  }
}

void sub_100974870(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,queryCellInfo", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v11) = 0;
      CFDictionaryRef v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    id v5 = a2;
    uint64_t v6 = *(void **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    unsigned char v10[2] = sub_100974BC0;
    v10[3] = &unk_1022D51A0;
    v10[4] = a2;
    void v10[5] = a1;
    [v6 copyCellInfo:a2 completion:v10];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      CFDictionaryRef v14 = "queryCellInfo";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v11 = 136315138;
      unsigned int v12 = "queryCellInfo";
      unsigned int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_100974BC0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  __int16 v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,queryCellInfo response", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    CFDictionaryRef v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryCellInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    a2 = 0;
  }
  sub_10008F998(v6, *(void **)(a1 + 32), a2);
}

void sub_100974ED0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci,query cell info for ins 1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100974870(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
  if (*(unsigned char *)(a1 + 120))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci,query cell info ins 2", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryCellInfo()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_100974870(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2]);
  }
}

void sub_1009751D8(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,querySimInfo", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v13) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    uint64_t v12 = 0;
    id v5 = [*(id *)(a1 + 16) getPrivateNetworkSimInfoForContext:a2 error:&v12];
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    if (v5)
    {
      [v6 setObject:objc_msgSend(v5, "networkIdentifier") forKeyedSubscript:@"kSimNidKey"];
      [v6 setObject:objc_msgSend(v5, "csgNetworkIdentifier") forKeyedSubscript:@"kSimCsgIdKey"];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      unsigned int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 138412290;
        id v16 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,querySimInfo returned nil,%@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        int v13 = 138412290;
        CFDictionaryRef v14 = v12;
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    sub_10097569C(a1, a2, v6);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      id v16 = "querySimInfo";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v13 = 136315138;
      CFDictionaryRef v14 = "querySimInfo";
      CFDictionaryRef v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySimInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_10097569C(uint64_t a1, void *a2, void *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138478083;
    *(void *)unsigned int v22 = a2;
    *(_WORD *)&v22[8] = 2113;
    *(void *)&v22[10] = [a3 description];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onSimInfoChange context %{private}@, info %{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v17 = 138478083;
    id v18 = a2;
    __int16 v19 = 2113;
    id v20 = [a3 description];
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSimInfoChange(CTXPCServiceSubscriptionContext *, NSDictionary *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  int v7 = sub_100090424((uint64_t)[a2 slotID]);
  if (!v7)
  {
    CFDictionaryRef v8 = &off_1022BAEA0;
    if (a3) {
      goto LABEL_9;
    }
LABEL_11:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)unsigned int v22 = 0;
      *(_WORD *)&v22[4] = 2082;
      *(void *)&v22[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci, onSimInfoChange nil info dict!\"}", buf, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
    }
    int v11 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)unsigned int v22 = 0;
      *(_WORD *)&v22[4] = 2082;
      *(void *)&v22[6] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ctcl,#cterror,#ci, onSimInfoChange nil info dict!", "{\"msg%{public}.0s\":\"#ctcl,#cterror,#ci, onSimInfoChange nil info dict!\"}", buf, 0x12u);
    }
    return;
  }
  if (v7 == 1)
  {
    CFDictionaryRef v8 = &off_1022BAEA8;
    if (a3)
    {
LABEL_9:
      unsigned int v9 = *(void **)(a1 + 112);
      id v15 = *v8;
      id v16 = a3;
      [v9 sendNotificationToClients:@"kSimInfoChangedNotification" notificationData:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1)];
      return;
    }
    goto LABEL_11;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci, onSimInfoChange invalid slotdId", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    LOWORD(v17) = 0;
    CFDictionaryRef v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSimInfoChange(CTXPCServiceSubscriptionContext *, NSDictionary *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100975B34(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci, query sim info for instance 1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1009751D8(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
  if (*(unsigned char *)(a1 + 120))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ctcl,#ci, query sim info for instance 2", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimInfo()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_1009751D8(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2]);
  }
}

void sub_100975E3C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl queryEmergencyModeChanged", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v8) = 0;
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryEmergencyModeChanged()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    id v3 = *(void **)(a1 + 16);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    long long v7[2] = sub_100976180;
    v7[3] = &unk_1022D51C0;
    v7[4] = a1;
    [v3 copyEmergencyMode:v7];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      int v11 = "queryEmergencyModeChanged";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v8 = 136315138;
      unsigned int v9 = "queryEmergencyModeChanged";
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryEmergencyModeChanged()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100976180(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v11 = a4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#emg,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      unsigned int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryEmergencyModeChanged()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (!*(unsigned char *)(v8 + 120) && [a2 slotID] == (id)2) {
      sub_101A74EBC();
    }
    sub_10096EBDC(v8, (uint64_t)a2, a3);
  }
}

void sub_1009763A4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#supl querySimStatusChanged", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v8) = 0;
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySimStatusChanged()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    id v3 = *(void **)(a1 + 16);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    long long v7[2] = sub_10097728C;
    v7[3] = &unk_1022D5230;
    v7[4] = a1;
    [v3 copyMobileEquipmentInfo:v7];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v11 = "querySimStatusChanged";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v8 = 136315138;
      unsigned int v9 = "querySimStatusChanged";
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySimStatusChanged()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

id sub_1009766E8(uint64_t a1)
{
  id result = sub_1009704F0(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
  if (*(unsigned char *)(a1 + 120))
  {
    id v3 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
    return sub_1009704F0(a1, v3);
  }
  return result;
}

void sub_10097676C(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  [*(id *)(v6 + 104) silo];
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MCC failed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_26:
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
LABEL_24:

      return;
    }
LABEL_32:
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
    goto LABEL_26;
  }
  if (!a2 || ![(__CFString *)a2 length])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MCC returned nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
  if ((unint64_t)[(__CFString *)a2 length] >= 4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,querySubscriberMccAndMnc,MCC is invalid,replacing with -1", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    a2 = @"-1";
  }
  unsigned int v9 = a2;
  [*(id *)(v6 + 16) copyMobileSubscriberNetworkCode:x0 completion:x1];
}

void sub_100976BB0(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  [*(id *)(v6 + 104) silo];
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MNC failed,replacing with -1", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_WORD *)unsigned int v24 = 0;
    goto LABEL_51;
  }
  if (!a2 || ![(__CFString *)a2 length])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    unsigned int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,query for subscriber MNC returned nil,replacing with -1", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_WORD *)unsigned int v24 = 0;
    goto LABEL_51;
  }
  if ((unint64_t)[(__CFString *)a2 length] < 4) {
    goto LABEL_27;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,querySubscriberMccAndMnc,MNC is invalid,replacing with -1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    *(_WORD *)unsigned int v24 = 0;
LABEL_51:
    unsigned int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
LABEL_26:
  a2 = @"-1";
LABEL_27:
  if (sub_100090CB0(*(void **)(a1 + 32), *(void **)(a1 + 40), a2))
  {
    int v10 = a2;
    sub_10009046C((uint64_t)buf, *(void **)(a1 + 40), a2);
    int v23 = sub_100090424((uint64_t)[*(id *)(a1 + 32) slotID]);
    *(void *)unsigned int v24 = &v23;
    uint64_t v11 = sub_1000D22E4(v6 + 288, &v23, (uint64_t)&unk_101D0B290, (_DWORD **)v24);
    *(void *)((char *)v11 + 20) = *(void *)buf;
    *((unsigned char *)v11 + 28) = buf[8];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = [*(id *)(a1 + 40) UTF8String];
      id v15 = [(__CFString *)a2 UTF8String];
      *(_DWORD *)std::string buf = 138478339;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v30 = 2082;
      id v31 = v14;
      __int16 v32 = 2082;
      id v33 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#ctcl,querySubscriberMccAndMnc,context,%{private}@,mcc,%{public}s,mnc,%{public}s", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = [*(id *)(a1 + 40) UTF8String];
      id v19 = [(__CFString *)a2 UTF8String];
      *(_DWORD *)unsigned int v24 = 138478339;
      *(void *)&v24[4] = v17;
      __int16 v25 = 2082;
      id v26 = v18;
      __int16 v27 = 2082;
      id v28 = v19;
      id v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    [*(id *)(v6 + 112) sendNotificationToClients:@"kSubscriberMccAndMncNotification" notificationData:sub_1000913C8(v6 + 288)];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,querySubscriberMccAndMnc,MCC and MNC invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      *(_WORD *)unsigned int v24 = 0;
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::querySubscriberMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
  }
}

void sub_10097728C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138477827;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#supl,#IMEI,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::querySimStatusChanged()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    sub_100977480(v5, a2);
  }
}

uint64_t sub_100977480(uint64_t a1, _DWORD *a2)
{
  memset(v27, 0, sizeof(v27));
  int v28 = 1065353216;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 138477827;
    *(void *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onSetIDReturn info %{private}@", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    LODWORD(v30[0]) = 138477827;
    *(_DWORD **)((char *)v30 + 4) = a2;
    id v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onSetIDReturn(CTMobileEquipmentInfoList *)", "%s\n", v20);
    if (v20 != (char *)&buf) {
      free(v20);
    }
  }
  if (a2)
  {
    uint64_t v21 = a1;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v5 = [a2 meInfoList];
    id v6 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v24;
LABEL_9:
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v5);
        }
        unsigned int v9 = *(void **)(*((void *)&v23 + 1) + 8 * v8);
        if (!v9) {
          break;
        }
        unsigned int v22 = 0;
        unsigned int v10 = sub_100090424((uint64_t)[v9 slotId]);
        unsigned int v22 = v10;
        if (v10 != 255)
        {
          sub_10055E2D8((uint64_t)&buf, v10, [v9 IMSI], [v9 IMEI]);
          v30[0] = &v22;
          uint64_t v11 = sub_100981110((uint64_t)v27, (int *)&v22, (uint64_t)&unk_101D0B290, v30);
          uint64_t v12 = (void **)(v11 + 3);
          if (*((char *)v11 + 47) < 0) {
            operator delete(*v12);
          }
          void v11[5] = v32;
          *(_OWORD *)uint64_t v12 = buf;
          HIBYTE(v32) = 0;
          LOBYTE(buf) = 0;
          uint64_t v13 = (void **)(v11 + 6);
          if (*((char *)v11 + 71) < 0) {
            operator delete(*v13);
          }
          v11[8] = v34;
          *(_OWORD *)uint64_t v13 = v33;
          HIBYTE(v34) = 0;
          LOBYTE(v33) = 0;
          id v14 = (void **)(v11 + 9);
          if (*((char *)v11 + 95) < 0)
          {
            operator delete(*v14);
            int v15 = SHIBYTE(v34);
            *(_OWORD *)id v14 = v35;
            v11[11] = v36;
            HIBYTE(v36) = 0;
            LOBYTE(v35) = 0;
            if (v15 < 0) {
              operator delete((void *)v33);
            }
          }
          else
          {
            *(_OWORD *)id v14 = v35;
            v11[11] = v36;
            HIBYTE(v36) = 0;
            LOBYTE(v35) = 0;
          }
          if (SHIBYTE(v32) < 0) {
            operator delete((void *)buf);
          }
        }
        if (v6 == (id)++v8)
        {
          id v6 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
          if (v6) {
            goto LABEL_9;
          }
          goto LABEL_26;
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "#ctcl,#supl,invalid setID", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        LOWORD(v30[0]) = 0;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSetIDReturn(CTMobileEquipmentInfoList *)", "%s\n", v17);
        goto LABEL_48;
      }
    }
    else
    {
LABEL_26:
      [*(id *)(v21 + 112) sendNotificationToClients:@"kSimStatusChangeNotification" notificationData:sub_101331E48((uint64_t)v27)];
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,CTMobileEquipmentInfoList is invalid", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v30[0]) = 0;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onSetIDReturn(CTMobileEquipmentInfoList *)", "%s\n", v17);
LABEL_48:
      if (v17 != (char *)&buf) {
        free(v17);
      }
    }
  }
  return sub_100981028((uint64_t)v27);
}

void sub_100977A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_100981028((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100977AE0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100977CE8(a1, 1);
    sub_100977CE8(a1, 2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      id v5 = "queryBundleInfo";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryBundleInfo()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_100977CE8(uint64_t a1, uint64_t a2)
{
  sub_100977D84(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1], a2);
  if (*(unsigned char *)(a1 + 120))
  {
    id v4 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
    sub_100977D84(a1, v4, a2);
  }
}

void sub_100977D84(uint64_t a1, void *a2, uint64_t a3)
{
  int v6 = sub_100090424((uint64_t)[a2 slotID]);
  int v7 = sub_100554FA4(a3);
  int v27 = sub_1000F4E80(v6, v7);
  sub_1009813DC(&v27, &v25);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109379;
    int v34 = v7;
    __int16 v35 = 2113;
    uint64_t v36 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleInfo,bundletype,%d,context,%{private}@", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v29 = 67109379;
    int v30 = v7;
    __int16 v31 = 2113;
    uint64_t v32 = a2;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, CTBundleType)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  unsigned int v9 = v26;
  v24[0] = v25;
  v24[1] = (unsigned int *)v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100978154(a1, (uint64_t)a2, v24);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  unsigned int v10 = v26;
  v23[0] = v25;
  v23[1] = (unsigned int *)v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100978258(a1, (uint64_t)a2, v23);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v11 = +[NSArray arrayWithObjects:@"Location", @"SUPL", @"LocationSecondaryOverlay", 0];
  id v12 = [(NSArray *)v11 countByEnumeratingWithState:&v19 objects:v28 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v20;
    do
    {
      for (CFIndex i = 0; i != v12; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v11);
        }
        uint64_t v15 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        id v16 = v26;
        v18[0] = v25;
        v18[1] = (unsigned int *)v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_10097835C(a1, a2, v15, v18);
        if (v16) {
          sub_1000DB0A0(v16);
        }
      }
      id v12 = [(NSArray *)v11 countByEnumeratingWithState:&v19 objects:v28 count:16];
    }
    while (v12);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
}

void sub_1009780FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    sub_1000DB0A0(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_100978154(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  id v6 = objc_alloc((Class)CTBundle);
  int v7 = sub_100554FF4(**a3);
  id v8 = [v6 initWithBundleType:sub_100554FBC(v7)];
  unsigned int v9 = *(void **)(a1 + 16);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_100978480;
  uint64_t v12[3] = &unk_1022D5258;
  uint64_t v11 = (uint64_t)*a3;
  unsigned int v10 = (std::__shared_weak_count *)a3[1];
  void v12[5] = a1;
  v12[6] = v11;
  uint64_t v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v12[4] = a2;
  [v9 copyBundleIdentifier:a2 bundleType:v8 completion:v12];
  if (v13) {
    sub_1000DB0A0(v13);
  }
}

void sub_100978240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100978258(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  id v6 = objc_alloc((Class)CTBundle);
  int v7 = sub_100554FF4(**a3);
  id v8 = [v6 initWithBundleType:sub_100554FBC(v7)];
  unsigned int v9 = *(void **)(a1 + 16);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_100978F20;
  uint64_t v12[3] = &unk_1022D5258;
  uint64_t v11 = (uint64_t)*a3;
  unsigned int v10 = (std::__shared_weak_count *)a3[1];
  void v12[5] = a1;
  v12[6] = v11;
  uint64_t v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v12[4] = a2;
  [v9 copyBundleVersion:a2 bundleType:v8 completion:v12];
  if (v13) {
    sub_1000DB0A0(v13);
  }
}

void sub_100978344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10097835C(uint64_t a1, void *a2, uint64_t a3, unsigned int **a4)
{
  id v8 = objc_alloc((Class)CTBundle);
  int v9 = sub_100554FF4(**a4);
  id v10 = [v8 initWithBundleType:sub_100554FBC(v9)];
  id v11 = a2;
  id v12 = v10;
  uint64_t v13 = *(void **)(a1 + 16);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3321888768;
  v16[2] = sub_100979554;
  v16[3] = &unk_1022D5290;
  uint64_t v15 = (uint64_t)*a4;
  id v14 = (std::__shared_weak_count *)a4[1];
  v16[7] = a1;
  v16[8] = v15;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v16[4] = a2;
  void v16[5] = a3;
  v16[6] = v10;
  [v13 copyCarrierBundleValueWithDefault:a2 key:a3 bundleType:v10 completion:v16];
  if (v17) {
    sub_1000DB0A0(v17);
  }
}

void sub_100978468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100978480(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  sub_100134750(&__str, (char *)[@"kBundleIDUnavailable" UTF8String]);
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v9 = [*(id *)(a1 + 32) slotID];
      *(_DWORD *)long long buf = 67109635;
      int v36 = v8;
      __int16 v37 = 1025;
      unsigned int v38 = v9;
      __int16 v39 = 2112;
      uint64_t v40 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,error,%@", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v10 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v11 = [*(id *)(a1 + 32) slotID];
      int v29 = 67109635;
      int v30 = v10;
      __int16 v31 = 1025;
      unsigned int v32 = v11;
      __int16 v33 = 2112;
      int v34 = a3;
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleId(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v12);
LABEL_10:
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else if (a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v15 = [*(id *)(a1 + 32) slotID];
      *(_DWORD *)long long buf = 67109635;
      int v36 = v14;
      __int16 v37 = 1025;
      unsigned int v38 = v15;
      __int16 v39 = 2113;
      uint64_t v40 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,bundleID,%{private}@", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v22 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v23 = [*(id *)(a1 + 32) slotID];
      int v29 = 67109635;
      int v30 = v22;
      __int16 v31 = 1025;
      unsigned int v32 = v23;
      __int16 v33 = 2113;
      int v34 = a2;
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleId(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    std::string::assign(&__str, (const std::string::value_type *)[a2 UTF8String]);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v18 = [*(id *)(a1 + 32) slotID];
      *(_DWORD *)long long buf = 67109377;
      int v36 = v17;
      __int16 v37 = 1025;
      unsigned int v38 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleIdRsp,bundletype,%d,ins,%{private}d,bundleID,nil", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v25 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v26 = [*(id *)(a1 + 32) slotID];
      int v29 = 67109377;
      int v30 = v25;
      __int16 v31 = 1025;
      unsigned int v32 = v26;
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleId(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v12);
      goto LABEL_10;
    }
  }
  uint64_t v19 = *(void *)(a1 + 48);
  *(unsigned char *)(v19 + 32) = 1;
  std::string::operator=((std::string *)(v19 + 8), &__str);
  long long v20 = *(int **)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 56);
  v27[0] = v20;
  v27[1] = (int *)v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100978AB4(v6, v27);
  if (v21) {
    sub_1000DB0A0((std::__shared_weak_count *)v21);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100978A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100978AB4(uint64_t a1, int **a2)
{
  id v3 = *a2;
  if (*((unsigned char *)v3 + 32) && *((unsigned char *)v3 + 64) && *((unsigned char *)v3 + 88) && *((unsigned char *)v3 + 112) && *((unsigned char *)v3 + 136))
  {
    uint64_t v5 = a1 + 488;
    *(void *)long long buf = v3;
    uint64_t v6 = sub_10097F2A8(a1 + 488, v3, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    int v8 = *a2;
    int v7 = (unsigned int *)a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    }
    unsigned int v9 = (std::__shared_weak_count *)v6[4];
    v6[3] = v8;
    v6[4] = v7;
    if (v9) {
      sub_1000DB0A0(v9);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = sub_100554FF4(**a2);
      int v12 = sub_100554FD4(**a2);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v11;
      __int16 v19 = 1026;
      int v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,sendBundleChangedNotifToClients,in response to queries for,bundletype,%{public}d,sim,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      sub_100554FF4(**a2);
      sub_100554FD4(**a2);
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendBundleChangedNotifToClients(std::shared_ptr<BundleInfo>)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    [*(id *)(a1 + 112) sendNotificationToClients:@"kBundleChangeNotification" notificationData:sub_1013308C0(v5)];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = sub_100554FF4(**a2);
      int v15 = sub_100554FD4(**a2);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v14;
      __int16 v19 = 1026;
      int v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ctcl,#cb,sendBundleChangedNotifToClients,still waiting for some queries to return for,bundletype,%{public}d,sim,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      sub_100554FF4(**a2);
      sub_100554FD4(**a2);
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendBundleChangedNotifToClients(std::shared_ptr<BundleInfo>)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
}

uint64_t sub_100978EF4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100978F10(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100978F20(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  sub_100134750(&__str, (char *)[@"kBundleVersionUnavailable" UTF8String]);
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v9 = [*(id *)(a1 + 32) slotID];
      *(_DWORD *)long long buf = 67109635;
      int v36 = v8;
      __int16 v37 = 1025;
      unsigned int v38 = v9;
      __int16 v39 = 2112;
      uint64_t v40 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,error,%@", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v10 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v11 = [*(id *)(a1 + 32) slotID];
      int v29 = 67109635;
      int v30 = v10;
      __int16 v31 = 1025;
      unsigned int v32 = v11;
      __int16 v33 = 2112;
      int v34 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleVersion(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v12);
LABEL_10:
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else if (a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v15 = [*(id *)(a1 + 32) slotID];
      *(_DWORD *)long long buf = 67109635;
      int v36 = v14;
      __int16 v37 = 1025;
      unsigned int v38 = v15;
      __int16 v39 = 2113;
      uint64_t v40 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,bundleVersion,%{private}@", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v22 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v23 = [*(id *)(a1 + 32) slotID];
      int v29 = 67109635;
      int v30 = v22;
      __int16 v31 = 1025;
      unsigned int v32 = v23;
      __int16 v33 = 2113;
      int v34 = a2;
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleVersion(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    std::string::assign(&__str, (const std::string::value_type *)[a2 UTF8String]);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v18 = [*(id *)(a1 + 32) slotID];
      *(_DWORD *)long long buf = 67109377;
      int v36 = v17;
      __int16 v37 = 1025;
      unsigned int v38 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleVersionRsp,bundletype,%d,ins,%{private}d,bundleVersion,nil", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v25 = sub_100554FF4(**(unsigned int **)(a1 + 48));
      unsigned int v26 = [*(id *)(a1 + 32) slotID];
      int v29 = 67109377;
      int v30 = v25;
      __int16 v31 = 1025;
      unsigned int v32 = v26;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleVersion(CTXPCServiceSubscriptionContext *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v12);
      goto LABEL_10;
    }
  }
  uint64_t v19 = *(void *)(a1 + 48);
  *(unsigned char *)(v19 + 64) = 1;
  std::string::operator=((std::string *)(v19 + 40), &__str);
  int v20 = *(int **)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 56);
  v27[0] = v20;
  v27[1] = (int *)v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100978AB4(v6, v27);
  if (v21) {
    sub_1000DB0A0((std::__shared_weak_count *)v21);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1009794F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100979554(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v36 = *(void *)(a1 + 56);
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = sub_100554FF4(**(unsigned int **)(a1 + 64));
      unsigned int v6 = [*(id *)(a1 + 32) slotID];
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 67109891;
      int v55 = v5;
      __int16 v56 = 1025;
      unsigned int v57 = v6;
      __int16 v58 = 2113;
      uint64_t v59 = v7;
      __int16 v60 = 2112;
      uint64_t v61 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryBundleInfoRsp,bundletype,%d,ins,%{private}d,dict,%{private}@,error,%@", buf, 0x22u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v33 = sub_100554FF4(**(unsigned int **)(a1 + 64));
    unsigned int v34 = [*(id *)(a1 + 32) slotID];
    uint64_t v35 = *(void *)(a1 + 40);
    int v43 = 67109891;
    int v44 = v33;
    __int16 v45 = 1025;
    unsigned int v46 = v34;
    __int16 v47 = 2113;
    uint64_t v48 = v35;
    __int16 v49 = 2112;
    uint64_t v50 = a3;
    unsigned int v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, NSString *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v32);
LABEL_43:
    if (v32 != (char *)buf) {
      free(v32);
    }
LABEL_7:
    int v8 = 0;
    goto LABEL_8;
  }
  int v8 = a2;
  if (!a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = sub_100554FF4(**(unsigned int **)(a1 + 64));
      unsigned int v27 = [*(id *)(a1 + 32) slotID];
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 67109635;
      int v55 = v26;
      __int16 v56 = 1025;
      unsigned int v57 = v27;
      __int16 v58 = 2113;
      uint64_t v59 = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleInfoRsp,bundletype,%d,ins,%{private}d,dict,%{private}@,null", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v29 = sub_100554FF4(**(unsigned int **)(a1 + 64));
    unsigned int v30 = [*(id *)(a1 + 32) slotID];
    uint64_t v31 = *(void *)(a1 + 40);
    int v43 = 67109635;
    int v44 = v29;
    __int16 v45 = 1025;
    unsigned int v46 = v30;
    __int16 v47 = 2113;
    uint64_t v48 = v31;
    unsigned int v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, NSString *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v32);
    goto LABEL_43;
  }
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v10 = [a2 countByEnumeratingWithState:&v39 objects:v53 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v40;
    do
    {
      int v12 = 0;
      do
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v39 + 1) + 8 * (void)v12);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        int v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = sub_100554FF4(**(unsigned int **)(a1 + 64));
          unsigned int v16 = [*(id *)(a1 + 32) slotID];
          uint64_t v17 = *(void *)(a1 + 40);
          id v18 = [v8 objectForKey:v13];
          *(_DWORD *)long long buf = 67241218;
          int v55 = v15;
          __int16 v56 = 1026;
          unsigned int v57 = v16;
          __int16 v58 = 2114;
          uint64_t v59 = v17;
          __int16 v60 = 2114;
          uint64_t v61 = v13;
          __int16 v62 = 2114;
          id v63 = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryBundleInfoRsp,bundletype,%{public}d,ins,%{public}d,dict,%{public}@,Key,%{public}@,Value,%{public}@", buf, 0x2Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022D5420);
          }
          int v19 = sub_100554FF4(**(unsigned int **)(a1 + 64));
          unsigned int v20 = [*(id *)(a1 + 32) slotID];
          uint64_t v21 = *(void *)(a1 + 40);
          id v22 = [v8 objectForKey:v13];
          int v43 = 67241218;
          int v44 = v19;
          __int16 v45 = 1026;
          unsigned int v46 = v20;
          __int16 v47 = 2114;
          uint64_t v48 = v21;
          __int16 v49 = 2114;
          uint64_t v50 = v13;
          __int16 v51 = 2114;
          id v52 = v22;
          unsigned int v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryBundleInfo(CTXPCServiceSubscriptionContext *, NSString *, std::shared_ptr<BundleInfo>)_block_invoke", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        int v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v24 = [v8 countByEnumeratingWithState:&v39 objects:v53 count:16];
      id v10 = v24;
    }
    while (v24);
  }
LABEL_8:
  sub_100555A48(*(int **)(a1 + 64), *(CFTypeRef *)(a1 + 40), (const __CFDictionary *)v8);
  uint64_t v9 = *(void *)(a1 + 72);
  v38[0] = *(int **)(a1 + 64);
  v38[1] = (int *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100978AB4(v36, v38);
  if (v9) {
    sub_1000DB0A0((std::__shared_weak_count *)v9);
  }
}

void sub_100979C7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100979C9C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100979CB8(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

id sub_100979CC8(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    unsigned int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138478083;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      uint64_t v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,#cb,queryDefaultBundle,dict,%{private}@,error,%@", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_23:
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDefaultBundle()_block_invoke", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
LABEL_7:
      CFPropertyListRef v8 = 0;
      goto LABEL_14;
    }
LABEL_29:
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
    goto LABEL_23;
  }
  if (!a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138477827;
      uint64_t v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryDefaultBundle,dict,%{private}@,null", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  CFPropertyListRef v8 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a2, 2uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138477827;
    uint64_t v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ctcl,#cb,queryDefaultBundle,retrieved %{private}@ dict", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    unsigned int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryDefaultBundle()_block_invoke", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
LABEL_14:
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  [v11 setValue:v8 forKey:@"LocationByCountry"];
  return [*(id *)(v4 + 112) sendNotificationToClients:@"kDefaultBundleChangeNotification" notificationData:v11];
}

void sub_10097A154(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022D5440);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,#vlqm, queryVoiceLinkQuality", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022D5440);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryVoiceLinkQuality()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_10097A498(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
    if (*(unsigned char *)(a1 + 120)) {
      sub_10097A498(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2]);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v7 = "queryVoiceLinkQuality";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryVoiceLinkQuality()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

id sub_10097A498(uint64_t a1, void *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022D5440);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138477827;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,#vlqm,queryVoiceLinkQualityForContext:%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022D5440);
    }
    int v10 = 138477827;
    id v11 = a2;
    CFPropertyListRef v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryVoiceLinkQualityForContext(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v5 = a2;
  unsigned int v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_10097A6A4;
  _OWORD v9[3] = &unk_1022D52F0;
  v9[4] = a2;
  void v9[5] = a1;
  return [v6 getVoiceLinkQualityMetric:a2 completion:v9];
}

void sub_10097A6A4(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022D5440);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#vlqm,queryVoiceLinkQualityForContext,#cb,%@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_20:
      CFPropertyListRef v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryVoiceLinkQualityForContext(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
LABEL_7:

      return;
    }
LABEL_22:
    dispatch_once(&qword_1024193E0, &stru_1022D5440);
    goto LABEL_20;
  }
  if (!a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022D5440);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#vlqm,queryVoiceLinkQualityForContext,#cb,nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  sub_100970BC0(*(void *)(a1 + 40), *(void **)(a1 + 32), a2);
  unsigned int v6 = *(void **)(a1 + 32);
}

id sub_10097A988(uint64_t a1)
{
  id result = sub_100090AA4(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
  if (*(unsigned char *)(a1 + 120))
  {
    id v3 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
    return sub_100090AA4(a1, v3);
  }
  return result;
}

void sub_10097AA0C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10097AC4C(a1, [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
    if (*(unsigned char *)(a1 + 120))
    {
      id v2 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
      sub_10097AC4C(a1, v2);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      unsigned int v6 = "queryInHomeCountryInfo";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryInHomeCountryInfo()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

id sub_10097AC4C(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138477827;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryInHomeCountryInfo,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = 138477827;
    id v11 = a2;
    CFPropertyListRef v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryInHomeCountryInfo(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v5 = a2;
  unsigned int v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_10097AE58;
  _OWORD v9[3] = &unk_1022D5318;
  v9[4] = a2;
  void v9[5] = a1;
  return [v6 copyIsInHomeCountry:a2 completion:v9];
}

void sub_10097AE58(uint64_t a1, int a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryInHomeCountryInfo,isInHomeCountry,error,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryInHomeCountryInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v12) = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#ctcl,queryInHomeCountryInfo,isInHomeCountry,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryInHomeCountryInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_10097B174(v8, *(void **)(a1 + 32), a2);
  }
}

void sub_10097B174(uint64_t a1, void *a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  unsigned int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138478083;
    *(void *)&uint8_t buf[4] = a2;
    __int16 v16 = 1024;
    int v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,sendInHomeCountryNotifToClients,context,%{private}@,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v11 = 138478083;
    uint64_t v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendInHomeCountryNotifToClients(CTXPCServiceSubscriptionContext *, BOOL)", "%s\n", v10);
    if (v10 != buf) {
      free(v10);
    }
  }
  if (sub_1013301AC(a2))
  {
    if (*(unsigned char *)(a1 + 120) || [a2 slotID] != (id)2)
    {
      int v11 = sub_100090424((uint64_t)[a2 slotID]);
      *(void *)long long buf = &v11;
      *((unsigned char *)sub_10097F690(a1 + 168, &v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) = a3;
      [*(id *)(a1 + 112) sendNotificationToClients:@"kInHomeCountryNotification" notificationData:sub_101330914(a1 + 168)];
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,sendInHomeCountryNotifToClients,InvalidInstance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v11) = 0;
      uint64_t v8 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::sendInHomeCountryNotifToClients(CTXPCServiceSubscriptionContext *, BOOL)", "%s\n");
LABEL_25:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isValidParamsInHomeCountryStatus failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      LOWORD(v11) = 0;
      uint64_t v8 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendInHomeCountryNotifToClients(CTXPCServiceSubscriptionContext *, BOOL)", "%s\n");
      goto LABEL_25;
    }
  }
}

id sub_10097B604(uint64_t a1)
{
  id result = sub_1009720BC(a1, (uint64_t)[objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1]);
  if (*(unsigned char *)(a1 + 120))
  {
    id v3 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
    return sub_1009720BC(a1, (uint64_t)v3);
  }
  return result;
}

void sub_10097B688(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    unsigned int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#sub,#cterror,queryPhoneNumberInfoContext,%@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v19 = 138412290;
    v20[0] = a3;
LABEL_27:
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryPhoneNumberInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
LABEL_7:
    int v19 = sub_100090424((uint64_t)[*(id *)(a1 + 32) slotID]);
    *(void *)long long buf = &v19;
    uint64_t v7 = (std::string *)(sub_100981438(v4 + 128, &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3);
    uint64_t v8 = "";
    goto LABEL_15;
  }
  if (!a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    __int16 v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = [*(id *)(a1 + 32) slotID];
      *(_DWORD *)long long buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#sub,queryPhoneNumberInfoContext,ins,%{private}d,PhoneNumberInfo,nil", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    unsigned int v15 = [*(id *)(a1 + 32) slotID];
    int v19 = 67174657;
    LODWORD(v20[0]) = v15;
    goto LABEL_27;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  int v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v11 = [*(id *)(a1 + 32) slotID];
    *(_DWORD *)long long buf = 67174915;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)&uint8_t buf[8] = 2113;
    *(void *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ctcl,#sub,queryPhoneNumberInfoContext,ins,%{private}d,PhoneNumberInfo,%{private}@", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    unsigned int v17 = [*(id *)(a1 + 32) slotID];
    int v19 = 67174915;
    LODWORD(v20[0]) = v17;
    WORD2(v20[0]) = 2113;
    *(void *)((char *)v20 + 6) = a2;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryPhoneNumberInfo(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  uint64_t v12 = (const std::string::value_type *)[a2 number];
  int v19 = sub_100090424((uint64_t)[*(id *)(a1 + 32) slotID]);
  *(void *)long long buf = &v19;
  uint64_t v7 = (std::string *)(sub_100981438(v4 + 128, &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3);
  uint64_t v8 = v12;
LABEL_15:
  std::string::assign(v7, v8);
  sub_10097BB70(v4);
}

void sub_10097BB70(uint64_t a1)
{
  memset(&v12, 0, sizeof(v12));
  id v2 = (void *)(a1 + 128);
  *(_DWORD *)long long buf = 0;
  if (sub_10011853C((void *)(a1 + 128), (int *)buf))
  {
    LODWORD(v11.__r_.__value_.__l.__data_) = 0;
    *(void *)long long buf = &v11;
    id v3 = (const std::string *)sub_100981438((uint64_t)v2, (int *)&v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    std::string::operator=(&v12, v3 + 1);
  }
  memset(&v11, 0, sizeof(v11));
  *(_DWORD *)long long buf = 1;
  if (sub_10011853C(v2, (int *)buf))
  {
    int v13 = 1;
    *(void *)long long buf = &v13;
    uint64_t v4 = (const std::string *)sub_100981438((uint64_t)v2, &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    std::string::operator=(&v11, v4 + 1);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v6 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    uint64_t v7 = &v11;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v18 = 2081;
    int v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ctcl,sendPhoneNumberNotification,phoneNumberOne,%{private}s,phoneNumberTwo,%{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v8 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    uint64_t v9 = &v11;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    int v13 = 136380931;
    unsigned int v14 = v8;
    __int16 v15 = 2081;
    __int16 v16 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendPhoneNumberNotification()", "%s\n", v10);
    if (v10 != buf) {
      free(v10);
    }
  }
  [*(id *)(a1 + 112) sendNotificationToClients:@"kPhoneNumberStatusNotification" notificationData:sub_1013332A4(v2)];
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_10097BE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10097BEB8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ctcl,queryTandemCapability", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    LOWORD(v8) = 0;
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryTandemCapability()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v7 = 0;
  id v3 = [*(id *)(a1 + 16) getDualSimCapability:&v7];
  if (v7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryTandemCapability,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v8 = 138412290;
      uint64_t v9 = v7;
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryTandemCapability()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    sub_10097C1B8(a1, (unint64_t)v3);
  }
}

void sub_10097C1B8(uint64_t a1, unint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    unint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,sendTandemCapabilityNotifToClients,tandemCapability,%ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendTandemCapabilityNotifToClients(CTDualSimCapability)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1013339C0(a2))
  {
    CFDictionaryRef v5 = sub_101333728(a2);
    CFDictionaryRef v6 = v5;
    [*(id *)(a1 + 112) sendNotificationToClients:@"kTandemCapabilityNotification" notificationData:v5];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning,#ctcl,#cterror,isTandemCapabilityInfoValid failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendTandemCapabilityNotifToClients(CTDualSimCapability)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

unsigned __int8 *sub_10097C4D0(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v5 = *(void *)a2;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl onRegisterForNotification,notification,%s,", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onRegisterForNotification(std::string)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id result = sub_100103284((void *)(a1 + 24), (unsigned __int8 *)a2);
  if (result)
  {
    uint64_t v7 = result;
    sub_10029A978(a1 + 64, (unsigned __int8 *)a2, a2);
    id result = (unsigned __int8 *)*((void *)v7 + 8);
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 48))(result);
    }
  }
  return result;
}

uint64_t *sub_10097C6F0(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = (uint64_t *)a2;
    if ((char)a2[23] < 0) {
      uint64_t v5 = *(uint64_t **)a2;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl onUnRegisterForNotification,notification,%s,", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onUnRegisterForNotification(std::string)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  CFDictionaryRef v6 = (void *)(a1 + 64);
  id result = (uint64_t *)sub_100122860(v6, a2);
  if (result) {
    return sub_1001052CC(v6, a2);
  }
  return result;
}

void sub_10097C8E0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 16);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_10097CAC8;
    v5[3] = &unk_1022D5390;
    v5[4] = a2;
    v5[5] = a1;
    [v2 getCurrentDataSubscriptionContext:v5];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#ctcl,null reply block, can't fetch APNs", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      __int16 v6 = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApn(CLUmtsApnBlockHandler)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10097CAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412546;
    uint64_t v16 = a2;
    __int16 v17 = 2112;
    uint64_t v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,getCurrentDataSubscriptionContext:context:%@,err:%@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v11 = 138412546;
    uint64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApn(CLUmtsApnBlockHandler)_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a2)
  {
    if (!a3)
    {
      int v8 = *(void **)(v6 + 16);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      unsigned char v10[2] = sub_10097CD04;
      v10[3] = &unk_1022D5368;
      v10[4] = *(void *)(a1 + 32);
      void v10[5] = v6;
      [v8 getConfiguredApns:a2 completion:v10];
    }
  }
}

void sub_10097CD04(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,getConfiguredApns error:%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v13 = 138412290;
    uint64_t v14 = a3;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApn(CLUmtsApnBlockHandler)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a2 && !a3 && [a2 count])
  {
    [*(id *)(v6 + 104) silo];
    uint64_t v8 = *(void *)(a1 + 32);
    sub_101333B7C(a2, &v11);
    id v9 = sub_10097CF40((uint64_t)&v11);
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    if (v12 < 0) {
      operator delete(*((void **)&v11 + 1));
    }
  }
}

void sub_10097CF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10097CF40(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_10098168C;
  void v3[3] = &unk_1022D5D30;
  void v3[4] = *(void *)a1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  id v1 = [v3 copy];
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
  return v1;
}

void sub_10097D004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10097D020(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 && (a2 != 1 || (sub_1000FFBA8() & 1) == 0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ctcl,invalid sim instance, can't fetch APNs", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    LOWORD(v15) = 0;
LABEL_36:
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApnForInstance(CLTelephonyService_Type::SimInstance, CLUmtsApnBlockHandler)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
    return;
  }
  if (a3)
  {
    if (a2) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    id v7 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:v6];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ctcl,getCurrentDataSubscriptionContext:context:%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v15 = 138412290;
      id v16 = v7;
      char v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApnForInstance(CLTelephonyService_Type::SimInstance, CLUmtsApnBlockHandler)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (v7)
    {
      id v9 = *(void **)(a1 + 16);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      int v14[2] = sub_10097D480;
      v14[3] = &unk_1022D5368;
      v14[4] = a3;
      void v14[5] = a1;
      [v9 getConfiguredApns:v7 completion:v14];
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  long long v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ctcl,null reply block, can't fetch APNs", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    LOWORD(v15) = 0;
    goto LABEL_36;
  }
}

void sub_10097D480(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ctcl,getConfiguredApns error:%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v13 = 138412290;
    uint64_t v14 = a3;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::getUmtsApnForInstance(CLTelephonyService_Type::SimInstance, CLUmtsApnBlockHandler)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a2 && !a3 && [a2 count])
  {
    [*(id *)(v6 + 104) silo];
    uint64_t v8 = *(void *)(a1 + 32);
    sub_101333B7C(a2, &v11);
    id v9 = sub_10097CF40((uint64_t)&v11);
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v9);
    if (v12 < 0) {
      operator delete(*((void **)&v11 + 1));
    }
  }
}

void sub_10097D698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_UNKNOWN **sub_10097D6BC(uint64_t a1, void *a2, int a3)
{
  if (!a3 || a3 == 1 && (sub_1000FFBA8() & 1) != 0)
  {
    if (a3) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    id v7 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:v6];
    uint64_t v18 = 0;
    if ([a2 isEqualToString:@"RegistrationStatus"])
    {
      id v8 = [*(id *)(a1 + 16) copyRegistrationStatus:v7 error:&v18];
    }
    else if ([a2 isEqualToString:@"RAT"])
    {
      id v8 = [*(id *)(a1 + 16) copyRadioAccessTechnology:v7 error:&v18];
    }
    else
    {
      if ([a2 isEqualToString:@"SignalStrength"])
      {
        uint64_t v10 = &off_102392D50;
LABEL_19:
        if (v18)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022D5420);
          }
          char v12 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412802;
            int v26 = a2;
            __int16 v27 = 2112;
            id v28 = v7;
            __int16 v29 = 2112;
            uint64_t v30 = v18;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,fetching %@:context:%@,err:%@", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022D5420);
            }
            int v19 = 138412802;
            uint64_t v20 = a2;
            __int16 v21 = 2112;
            id v22 = v7;
            __int16 v23 = 2112;
            uint64_t v24 = v18;
            uint64_t v16 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "id CLCoreTelephonyClient::_getValueForSpecifiedOptionAndSim(NSString *, SimInstance)", "%s\n", v16);
            if (v16 != (char *)buf) {
              free(v16);
            }
          }
        }
        return v10;
      }
      if ([a2 isEqualToString:@"ServingOperator"])
      {
        long long v11 = (_UNKNOWN **)[*(id *)(a1 + 16) getOperatorName:v7 error:&v18];
        goto LABEL_18;
      }
      if (![a2 isEqualToString:@"ServingProvider"])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        uint64_t v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          int v26 = a2;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,Unknown option: %@, for fetching values from InUseSubscriptions", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022D5420);
          }
          int v19 = 138412290;
          uint64_t v20 = a2;
          __int16 v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "id CLCoreTelephonyClient::_getValueForSpecifiedOptionAndSim(NSString *, SimInstance)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        uint64_t v10 = 0;
        goto LABEL_19;
      }
      id v8 = [[*(id *)(a1 + 16) copyCarrierBundleValue:v7 key:@"CarrierName" bundleType:1 error:&v18];
    }
    long long v11 = (_UNKNOWN **)v8;
LABEL_18:
    uint64_t v10 = v11;
    goto LABEL_19;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    int v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,fetching %@:, invalid SIM instance", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v19 = 138412290;
    uint64_t v20 = a2;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "id CLCoreTelephonyClient::_getValueForSpecifiedOptionAndSim(NSString *, SimInstance)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return 0;
}

_UNKNOWN **sub_10097DC7C(uint64_t a1, int a2)
{
  return sub_10097D6BC(a1, @"RegistrationStatus", a2);
}

_UNKNOWN **sub_10097DC8C(uint64_t a1, int a2)
{
  return sub_10097D6BC(a1, @"RAT", a2);
}

id sub_10097DC9C(uint64_t a1, int a2)
{
  id v2 = sub_10097D6BC(a1, @"SignalStrength", a2);

  return [v2 intValue];
}

_UNKNOWN **sub_10097DCD0(uint64_t a1, int a2)
{
  return sub_10097D6BC(a1, @"ServingOperator", a2);
}

_UNKNOWN **sub_10097DCE0(uint64_t a1, int a2)
{
  return sub_10097D6BC(a1, @"ServingProvider", a2);
}

id sub_10097DCF0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a3)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138477827;
        uint64_t v14 = a3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryStewieSupport,error,%{private}@", buf, 0xCu);
      }
      id v7 = 0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_9;
        }
        goto LABEL_32;
      }
      return [*(id *)(v4 + 112) sendNotificationToClients:@"kStewieSupportNotification" notificationData:sub_101334AD8((uint64_t)v7)];
    }
LABEL_30:
    id v7 = 0;
    return [*(id *)(v4 + 112) sendNotificationToClients:@"kStewieSupportNotification" notificationData:sub_101334AD8((uint64_t)v7)];
  }
  if (a2)
  {
    id v7 = [a2 hwSupport];
    if (*(unsigned char *)(a1 + 40))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        LODWORD(v14) = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ctcl,queryStewieSupport,supported,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D5420);
        }
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryStewieSupport()_block_invoke", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    return [*(id *)(v4 + 112) sendNotificationToClients:@"kStewieSupportNotification" notificationData:sub_101334AD8((uint64_t)v7)];
  }
  if (!*(unsigned char *)(a1 + 40)) {
    goto LABEL_30;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  long long v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryStewieSupport,stewieSupport is nil", buf, 2u);
  }
  id v7 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_9:
      id v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryStewieSupport()_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      goto LABEL_30;
    }
LABEL_32:
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
    goto LABEL_9;
  }
  return [*(id *)(v4 + 112) sendNotificationToClients:@"kStewieSupportNotification" notificationData:sub_101334AD8((uint64_t)v7)];
}

id sub_10097E118(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  id v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ctcl,queryImsRegStatus", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryImsRegStatus()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:1];
  id result = [*(id *)(a1 + 16) copyRegistrationIMSTransportInfo:completion:];
  if (*(unsigned char *)(a1 + 120))
  {
    [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:2];
    return [*(id *)(a1 + 16) copyRegistrationIMSTransportInfo:completion:];
  }
  return result;
}

void sub_10097E388(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryImsRegStatus,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryImsRegStatus()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(a1 + 32);
    sub_100972680(v7, v8, a2);
  }
}

void sub_10097E57C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,queryImsRegStatus,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::queryImsRegStatus()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(a1 + 32);
    sub_100972680(v7, v8, a2);
  }
}

id sub_10097E770(uint64_t a1, void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138477827;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,sendImsRegChangeNotificationToClients,context,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    int v10 = 138477827;
    uint64_t v11 = a2;
    id v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendImsRegChangeNotificationToClients(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_10097E97C;
  _OWORD v9[3] = &unk_1022D5400;
  v9[4] = a2;
  void v9[5] = a1;
  return [v6 getIMSRegistrationStatus:a2 completion:v9];
}

void sub_10097E97C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,sendImsRegChangeNotificationToClients,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v13 = 138412290;
      *(void *)uint64_t v14 = a3;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoreTelephonyClient::sendImsRegChangeNotificationToClients(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v6);
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D5420);
    }
    id v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67174913;
      *(_DWORD *)&uint8_t buf[4] = [a2 isRegisteredForVoice];
      *(_WORD *)&uint8_t buf[8] = 1025;
      *(_DWORD *)&buf[10] = [a2 isRegisteredForSMS];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#ctcl,sendImsRegChangeNotificationToClients,isRegisteredForVoice %{private}d isRegisteredForSMS %{private}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
      int v13 = 67174913;
      *(_DWORD *)uint64_t v14 = [a2 isRegisteredForVoice];
      *(_WORD *)&v14[4] = 1025;
      *(_DWORD *)&void v14[6] = [a2 isRegisteredForSMS];
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendImsRegChangeNotificationToClients(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
    sub_1005608D8((uint64_t)&v12, a2);
    int v13 = sub_100090424((uint64_t)[*(id *)(a1 + 32) slotID]);
    *(void *)long long buf = &v13;
    int v10 = sub_10098170C(v8 + 408, &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    *((_WORD *)v10 + 10) = v12;
    [*(id *)(v8 + 112) sendNotificationToClients:@"kImsRegStatusNotification" notificationData:sub_1013350A0(v8 + 408)];
  }
}

void sub_10097F178(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10097F1A8(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_10097F1D8(uint64_t a1)
{
  sub_10097F214(a1, *(void **)(a1 + 16));
  id v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10097F214(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      sub_10097F258((uint64_t)(v2 + 2));
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
}

void sub_10097F258(uint64_t a1)
{
  sub_10068280C((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    id v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_10097F2A8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  v11[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  __int16 v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *__int16 v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *int v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    __int16 v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10097F4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10097F4F8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10097F4F8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    id v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_10097F554@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0xA8uLL);
  id result = sub_10097F5B0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10097F59C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10097F5B0(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022D5470;
  sub_100562B88((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_10097F5FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10097F610(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D5470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10097F630(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D5470;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10097F684(uint64_t a1)
{
  return sub_100562C84(a1 + 24);
}

void *sub_10097F690(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((unsigned char *)v11 + 20) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10097F8A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10097F8B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (CFIndex i = *v14; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_10097FB50(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  __int16 v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *__int16 v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  CFIndex i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_10097FBF0((uint64_t)v26, 0);
  return i;
}

void sub_10097FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10097FBF0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_10097FB50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  id result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    id result = sub_1000DC48C(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)id result = v11;
  }
  unsigned char v8[8] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10097FBD8(_Unwind_Exception *a1)
{
  sub_10097FBF0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10097FBF0(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10097F258((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_10097FC4C()
{
}

void *sub_10097FC60(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D54C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10097FCA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D54C0;
  a2[1] = v2;
  return result;
}

void sub_10097FCD4(uint64_t a1)
{
}

uint64_t sub_10097FCDC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10097FD1C()
{
}

void sub_10097FD2C()
{
}

void *sub_10097FD40(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5540;
  result[1] = v3;
  return result;
}

uint64_t sub_10097FD88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5540;
  a2[1] = v2;
  return result;
}

void sub_10097FDB4(uint64_t a1)
{
}

uint64_t sub_10097FDBC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10097FDFC()
{
}

void sub_10097FE0C()
{
}

void *sub_10097FE20(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D55C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10097FE68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D55C0;
  a2[1] = v2;
  return result;
}

void sub_10097FE94(uint64_t a1)
{
}

uint64_t sub_10097FE9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10097FEDC()
{
}

void sub_10097FEEC()
{
}

void *sub_10097FF00(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5640;
  result[1] = v3;
  return result;
}

uint64_t sub_10097FF48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5640;
  a2[1] = v2;
  return result;
}

id sub_10097FF74(uint64_t a1)
{
  return sub_10096F738(*(void *)(a1 + 8));
}

uint64_t sub_10097FF7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10097FFBC()
{
}

void sub_10097FFCC()
{
}

void *sub_10097FFE0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D56C0;
  result[1] = v3;
  return result;
}

uint64_t sub_100980028(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D56C0;
  a2[1] = v2;
  return result;
}

void sub_100980054(uint64_t a1)
{
}

uint64_t sub_10098005C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098009C()
{
}

void sub_1009800AC()
{
}

void *sub_1009800C0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5740;
  result[1] = v3;
  return result;
}

uint64_t sub_100980108(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5740;
  a2[1] = v2;
  return result;
}

void sub_100980134(uint64_t a1)
{
}

uint64_t sub_10098013C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098017C()
{
}

void sub_10098018C()
{
}

void *sub_1009801A0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D57C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1009801E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D57C0;
  a2[1] = v2;
  return result;
}

void sub_100980214(uint64_t a1)
{
}

uint64_t sub_10098021C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098025C()
{
}

void sub_10098026C()
{
}

void *sub_100980280(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5840;
  result[1] = v3;
  return result;
}

uint64_t sub_1009802C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5840;
  a2[1] = v2;
  return result;
}

void sub_1009802F4(uint64_t a1)
{
}

uint64_t sub_1009802FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098033C()
{
}

void sub_10098034C()
{
}

void *sub_100980360(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D58C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1009803A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D58C0;
  a2[1] = v2;
  return result;
}

id sub_1009803D4(uint64_t a1)
{
  return sub_100972D78(*(void *)(a1 + 8));
}

uint64_t sub_1009803DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098041C()
{
}

void sub_10098042C()
{
}

void *sub_100980440(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5940;
  result[1] = v3;
  return result;
}

uint64_t sub_100980488(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5940;
  a2[1] = v2;
  return result;
}

id sub_1009804B4(uint64_t a1)
{
  return sub_1009766E8(*(void *)(a1 + 8));
}

uint64_t sub_1009804BC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1009804FC()
{
}

void sub_10098050C()
{
}

void *sub_100980520(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D59C0;
  result[1] = v3;
  return result;
}

uint64_t sub_100980568(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D59C0;
  a2[1] = v2;
  return result;
}

id sub_100980594(uint64_t a1)
{
  return sub_10097A988(*(void *)(a1 + 8));
}

uint64_t sub_10098059C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1009805DC()
{
}

void sub_1009805EC()
{
}

void *sub_100980600(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5A40;
  result[1] = v3;
  return result;
}

uint64_t sub_100980648(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5A40;
  a2[1] = v2;
  return result;
}

id sub_100980674(uint64_t a1)
{
  return sub_10097B604(*(void *)(a1 + 8));
}

uint64_t sub_10098067C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1009806BC()
{
}

void sub_1009806CC()
{
}

void *sub_1009806E0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5AC0;
  result[1] = v3;
  return result;
}

uint64_t sub_100980728(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5AC0;
  a2[1] = v2;
  return result;
}

void sub_100980754(uint64_t a1)
{
}

uint64_t sub_10098075C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098079C()
{
}

void sub_1009807AC()
{
}

void *sub_1009807C0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5B40;
  result[1] = v3;
  return result;
}

uint64_t sub_100980808(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5B40;
  a2[1] = v2;
  return result;
}

void sub_100980834(uint64_t a1)
{
}

uint64_t sub_10098083C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098087C()
{
}

void sub_10098088C()
{
}

void *sub_1009808A0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5BC0;
  result[1] = v3;
  return result;
}

uint64_t sub_1009808E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5BC0;
  a2[1] = v2;
  return result;
}

void sub_100980914(uint64_t a1)
{
}

uint64_t sub_10098091C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10098095C()
{
}

void sub_10098096C()
{
}

void *sub_100980980(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5C40;
  result[1] = v3;
  return result;
}

uint64_t sub_1009809C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5C40;
  a2[1] = v2;
  return result;
}

id sub_1009809F4(uint64_t a1)
{
  return sub_100972470(*(void *)(a1 + 8));
}

uint64_t sub_1009809FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100980A3C()
{
}

void sub_100980A4C()
{
}

void *sub_100980A60(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1022D5CC0;
  result[1] = v3;
  return result;
}

uint64_t sub_100980AA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D5CC0;
  a2[1] = v2;
  return result;
}

id sub_100980AD4(uint64_t a1)
{
  return sub_10097E118(*(void *)(a1 + 8));
}

uint64_t sub_100980ADC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100980B1C()
{
}

void *sub_100980B28(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x18uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_WORD *)v11 + 10) = 0;
  *((unsigned char *)v11 + 22) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_100980D3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100980D50(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      for (id result = *v9; result; id result = (uint64_t *)*result)
      {
        unint64_t v11 = result[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)result + 4) == v6) {
            return result;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_100980F88(a1, *a2, a4, (uint64_t)v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  size_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v20[0] = *v18;
    *size_t v18 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v19 = *(void *)(*(void *)v20[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20[0];
    }
  }
  id result = (uint64_t *)v20[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100980F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10050E97C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100980F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = **a3;
  id result = sub_100134750(v8 + 3, "");
  *((_DWORD *)v8 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10098100C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10050E97C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100981028(uint64_t a1)
{
  sub_100981064(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100981064(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1009810A8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1009810A8(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

uint64_t *sub_100981110(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (CFIndex i = *v10; i; CFIndex i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  BOOL v14 = (char *)operator new(0x60uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)BOOL v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((void *)v14 + 11) = 0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  CFIndex i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100981384((uint64_t)v24, 0);
  return i;
}

void sub_10098136C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100981384((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100981384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1009810A8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_1009813DC@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0xA8uLL);
  id result = sub_10097F5B0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100981424(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100981438(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  void v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v11 = *v21;
LABEL_38:
    *unint64_t v21 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_100981670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10050E97C(v11, v10);
  _Unwind_Resume(a1);
}

char *sub_10098168C@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = *((void *)result + 4);
  uint64_t v2 = a2 + 1;
  if (result[63] < 0) {
    return (char *)sub_1000DC48C(v2, *((void **)result + 5), *((void *)result + 6));
  }
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(result + 40);
  v2[2] = *((void *)result + 7);
  return result;
}

void *sub_1009816C0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  id result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  long long v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)id result = v3;
  return result;
}

void sub_1009816F8(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void *sub_10098170C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_WORD *)v11 + 10) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10098191C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100981930(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100981B20((uint64_t)a1, "MobilityWalkingBoutHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022D5D70;
  a1[9] = off_1022D5E50;
  a1[43] = off_1022D5EA0;
  sub_100F03BA0(a1 + 44, 0, 0);
  sub_100F03BA0(a1 + 46, 0, 0);
  sub_100F03BA0(a1 + 48, 0, 0);
  sub_100F03BA0(a1 + 50, 0, 0);
  sub_100F03BA0(a1 + 52, 0, 0);
  sub_100F03BA0(a1 + 54, 0, 0);
  sub_100F03BA0(a1 + 56, 0, 0);
  sub_100F03BA0(a1 + 58, 0, 0);
  sub_100F03BA0(a1 + 60, 0, 0);
  sub_100F03BA0(a1 + 62, 0, 0);
  sub_100F03BA0(a1 + 64, 0, 0);
  sub_100F03BA0(a1 + 66, 0, 0);
  sub_100F03BA0(a1 + 68, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100981AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100981B20(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *unint64_t v12 = &off_1022B2C68;
  *(void *)a1 = off_1022D6108;
  *(void *)(a1 + 72) = off_1022D61B0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022D6108;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 72) = off_1022D61B0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 264) = 12000;
  *(void *)(a1 + 272) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 280));
  *(void *)(a1 + 280) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100981F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_1003BE294(v28);
  sub_1011F8AE0(v27);
  *char v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100981FDC()
{
}

void *sub_100981FE4(void *a1)
{
  *a1 = off_1022D6108;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022D61B0;
  a1[34] = off_1022B2C20;
  sub_1003BE1F8(a1 + 35);
  sub_1003BE294(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1009820A8(uint64_t a1)
{
  return sub_100981FE4((void *)(a1 - 72));
}

void *sub_1009820B0(uint64_t a1)
{
  return sub_100981FE4((void *)(a1 - 344));
}

void sub_1009820B8(void *a1)
{
  sub_100981FE4(a1);

  operator delete();
}

void sub_1009820F0(uint64_t a1)
{
  sub_100981FE4((void *)(a1 - 72));

  operator delete();
}

void sub_10098212C(uint64_t a1)
{
  sub_100981FE4((void *)(a1 - 344));

  operator delete();
}

uint64_t sub_100982168(uint64_t *a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) != 1.79769313e308 || !sub_100082064(a1 + 9)) {
    return -1;
  }
  sub_10002B640(a1[10]);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100082068(a1 + 50, &v13);
  id v5 = (sqlite3_stmt *)sub_10014D19C(v13);
  if (sub_100055D58(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
  {
    uint64_t v6 = a1[10];
    unint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v13);
    sub_10001FEB0(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    uint64_t v8 = -1;
  }
  sub_100028FB4(a1[10]);
  uint64_t v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_10003CC68(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v8;
}

void sub_1009822A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009822C0(uint64_t a1, uint64_t a2)
{
  return sub_100982168((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_1009822C8(uint64_t a1, char **a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_100082068((void *)(a1 + 416), &v22);
    sub_10002B640(*(void *)(a1 + 80));
    *(_DWORD *)unint64_t v21 = 0;
    memset(&v21[8], 0, 32);
    while (!sub_1009824E8(&v22, (uint64_t)v21))
    {
      unint64_t v5 = (unint64_t)a2[1];
      unint64_t v6 = (unint64_t)a2[2];
      if (v5 >= v6)
      {
        unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)*a2) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0x666666666666666) {
          sub_1001D7FD4();
        }
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)*a2) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x333333333333333) {
          unint64_t v12 = 0x666666666666666;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_1002E5328((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0;
        }
        float v14 = &v13[40 * v9];
        long long v15 = *(_OWORD *)&v21[16];
        *(_OWORD *)float v14 = *(_OWORD *)v21;
        *((_OWORD *)v14 + 1) = v15;
        *((void *)v14 + 4) = *(void *)&v21[32];
        uint64_t v17 = *a2;
        uint64_t v16 = a2[1];
        __int16 v18 = v14;
        if (v16 != *a2)
        {
          do
          {
            long long v19 = *(_OWORD *)(v16 - 40);
            long long v20 = *(_OWORD *)(v16 - 24);
            *((void *)v18 - 1) = *((void *)v16 - 1);
            *(_OWORD *)(v18 - 24) = v20;
            *(_OWORD *)(v18 - 40) = v19;
            v18 -= 40;
            v16 -= 40;
          }
          while (v16 != v17);
          uint64_t v16 = *a2;
        }
        uint64_t v8 = v14 + 40;
        *a2 = v18;
        a2[1] = v14 + 40;
        a2[2] = &v13[40 * v12];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        long long v7 = *(_OWORD *)&v21[16];
        *(_OWORD *)unint64_t v5 = *(_OWORD *)v21;
        *(_OWORD *)(v5 + 16) = v7;
        *(void *)(v5 + 32) = *(void *)&v21[32];
        uint64_t v8 = (char *)(v5 + 40);
      }
      a2[1] = v8;
    }
    sub_100028FB4(*(void *)(a1 + 80));
    uint64_t result = v22;
    uint64_t v22 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1009824A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009824E8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  unint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  long long v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  unint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  unint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 28) = sqlite3_column_int(v10, 4);
  unint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 32) = sqlite3_column_int(v11, 5);
  unint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v13 = sqlite3_column_int(v12, 6);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 36) = v13;
  return result;
}

uint64_t sub_1009825CC(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 432), &v8);
  long long v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100982678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009826B8(uint64_t a1)
{
  return sub_1009825CC(a1 - 72);
}

uint64_t sub_1009826C0(uint64_t a1, int a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 352), &v10);
    int v5 = (sqlite3_stmt *)sub_10014D19C(v10);
    if (sub_10014D1A4(v5, 1, a2))
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022D5F58);
      }
      uint64_t v6 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67240192;
        int v14 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Deleting boundary from db: id=%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022D5F58);
        }
        int v11 = 67240192;
        int v12 = a2;
        unint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMobility::BoutBoundaryRecorderDb::deleteBoundary(int)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      uint64_t v7 = *(void *)(a1 + 80);
      uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v10);
      sub_10001FEB0(v7, v8);
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1009828E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100982930(uint64_t a1, int a2)
{
  return sub_1009826C0(a1 - 344, a2);
}

uint64_t sub_100982938(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v9 = a1 + 112;
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v10 = a1 + 72;
  v32[1] = a1 + 112;
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 112);
  __int16 v33 = 256;
  if (sub_100082064(v10))
  {
    a2[1] = *a2;
    sub_100082068((void *)(a1 + 448), v32);
    LODWORD(buf[0]) = 0;
    memset((char *)buf + 8, 0, 32);
    if (a4 >= a3)
    {
      int v11 = (sqlite3_stmt *)sub_10014D19C(v32[0]);
      if (sub_100055D58(v11, 1, a3))
      {
        int v12 = (sqlite3_stmt *)sub_10014D19C(v32[0]);
        if (sub_100055D58(v12, 2, a4))
        {
          while (!sub_1009824E8(v32, (uint64_t)buf))
          {
            unint64_t v13 = (unint64_t)a2[1];
            unint64_t v14 = (unint64_t)a2[2];
            if (v13 >= v14)
            {
              unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*a2) >> 3);
              unint64_t v17 = v16 + 1;
              if (v16 + 1 > 0x666666666666666) {
                sub_1001D7FD4();
              }
              unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)*a2) >> 3);
              if (2 * v18 > v17) {
                unint64_t v17 = 2 * v18;
              }
              if (v18 >= 0x333333333333333) {
                unint64_t v19 = 0x666666666666666;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19) {
                long long v20 = (char *)sub_1002E5328((uint64_t)(a2 + 2), v19);
              }
              else {
                long long v20 = 0;
              }
              unint64_t v21 = &v20[40 * v16];
              *(_OWORD *)unint64_t v21 = buf[0];
              *((_OWORD *)v21 + 1) = buf[1];
              *((void *)v21 + 4) = *(void *)&buf[2];
              __int16 v23 = *a2;
              uint64_t v22 = a2[1];
              unint64_t v24 = v21;
              if (v22 != *a2)
              {
                do
                {
                  long long v25 = *(_OWORD *)(v22 - 40);
                  long long v26 = *(_OWORD *)(v22 - 24);
                  *((void *)v24 - 1) = *((void *)v22 - 1);
                  *(_OWORD *)(v24 - 24) = v26;
                  *(_OWORD *)(v24 - 40) = v25;
                  v24 -= 40;
                  v22 -= 40;
                }
                while (v22 != v23);
                uint64_t v22 = *a2;
              }
              long long v15 = v21 + 40;
              *a2 = v24;
              a2[1] = v21 + 40;
              a2[2] = &v20[40 * v19];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *(_OWORD *)unint64_t v13 = buf[0];
              *(_OWORD *)(v13 + 16) = buf[1];
              *(void *)(v13 + 32) = *(void *)&buf[2];
              long long v15 = (char *)(v13 + 40);
            }
            a2[1] = v15;
          }
        }
      }
    }
    uint64_t v29 = v32[0];
    v32[0] = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    uint64_t v28 = 100;
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022D5F58);
    }
    uint64_t v27 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "MobilityWalkingBoutHistory not accessible", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022D5F58);
      }
      LOWORD(v32[0]) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLMobility::BoutBoundaryRecorderDb::queryBoundariesInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<BoutBoundary> &)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    uint64_t v28 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  return v28;
}

void sub_100982D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100982D9C(uint64_t a1, char **a2, double a3, double a4)
{
  return sub_100982938(a1 - 344, a2, a3, a4);
}

void sub_100982DA4(void *a1, uint64_t a2)
{
  sub_10098312C(a1, a2, 0);
  int v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  int v4 = 0;
  if (sub_10098320C(a1, (uint64_t)&v13))
  {
    if (*(double *)&v14 == *(double *)(a2 + 8))
    {
      int v4 = v13;
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022D5F58);
      }
      int v5 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 67240448;
        *(_DWORD *)unint64_t v19 = v4;
        *(_WORD *)&v19[4] = 2050;
        *(void *)&v19[6] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Wrote boundary to db: id=%{public}d, startTime=%{public}.2f", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022D5F58);
        }
        uint64_t v7 = *(void *)(a2 + 8);
        int v16 = 67240448;
        *(_DWORD *)unint64_t v17 = v4;
        *(_WORD *)&v17[4] = 2050;
        *(void *)&void v17[6] = v7;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMobility::BoutBoundaryRecorderDb::addBoundary(BoutBoundary &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022D5F58);
      }
      uint64_t v9 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 134349312;
        *(void *)unint64_t v19 = v10;
        *(_WORD *)&v19[8] = 2050;
        *(void *)&v19[10] = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Inserted boundary (startTime=%{public}f) is not the latest boundary (startTime=%{public}f)", buf, 0x16u);
      }
      int v4 = 0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022D5F58);
        }
        uint64_t v11 = *(void *)(a2 + 8);
        int v16 = 134349312;
        *(void *)unint64_t v17 = v11;
        *(_WORD *)&v17[8] = 2050;
        *(void *)&v17[10] = v14;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMobility::BoutBoundaryRecorderDb::addBoundary(BoutBoundary &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        int v4 = 0;
      }
    }
  }
  *(_DWORD *)a2 = v4;
}

uint64_t sub_10098312C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1009831F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10098320C(void *a1, uint64_t a2)
{
  int v4 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  LODWORD(a2) = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104))(a1, a2);
  (*(void (**)(void *))(*v4 + 24))(v4);
  return a2 == 0;
}

void sub_1009832DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009832F0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1009832F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = a1 + 112;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v8 = a1 + 72;
  uint64_t v19 = a1 + 112;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  __int16 v20 = 256;
  if ((sub_100082064(v8) & 1) == 0)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022D5F58);
    }
    uint64_t v10 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "MobilityWalkingBoutHistory not accessible", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022D5F58);
    }
    LOWORD(v16) = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v11);
    goto LABEL_32;
  }
  int v16 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  int v9 = sub_1009837DC(a1, (uint64_t)&v16);
  if (v9)
  {
    if (v9 == 1)
    {
      *a3 = 0;
      *a2 = 0;
LABEL_28:
      uint64_t v14 = 1;
      goto LABEL_29;
    }
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022D5F58);
    }
    int v13 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "MobilityWalkingBoutHistory Encountered an error getting earliest record", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 == -1) {
      goto LABEL_31;
    }
LABEL_34:
    dispatch_once(&qword_1024191F0, &stru_1022D5F58);
LABEL_31:
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLMobility::BoutBoundaryRecorderDb::getTimeRangeOfAllBoundaries(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v11);
LABEL_32:
    if (v11 != (char *)buf) {
      free(v11);
    }
    goto LABEL_26;
  }
  *a2 = v17;
  if (!sub_100983888(a1, (uint64_t)&v16))
  {
    *a3 = *((void *)&v17 + 1);
    goto LABEL_28;
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022D5F58);
  }
  int v12 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "MobilityWalkingBoutHistory Encountered an error getting latest record", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 == -1) {
      goto LABEL_31;
    }
    goto LABEL_34;
  }
LABEL_26:
  uint64_t v14 = 0;
LABEL_29:
  (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  return v14;
}

void sub_1009837A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009837DC(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 496), &v7);
  uint64_t v4 = sub_1009824E8(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v4;
}

void sub_10098386C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100983888(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 480), &v7);
  uint64_t v4 = sub_1009824E8(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v4;
}

void sub_100983918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100983934(uint64_t a1, void *a2, void *a3)
{
  return sub_1009832F8(a1 - 344, a2, a3);
}

BOOL sub_100983940(uint64_t a1, uint64_t a2)
{
  return sub_10098320C((void *)(a1 - 344), a2);
}

uint64_t sub_100983948(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_100983AB0((uint64_t)a1);
    sub_1005F7B0C(a1[10], "MobilityWalkingBoutHistory", (const char **)&off_1022D5F78, (const std::string::value_type **)&off_10241F2E0, 0);
    a1[44] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM MobilityWalkingBoutHistory WHERE id = ?");
    a1[45] = v3;
    a1[46] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM MobilityWalkingBoutHistory WHERE startTime > ?");
    a1[47] = v4;
    a1[48] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM MobilityWalkingBoutHistory");
    a1[49] = v5;
    a1[50] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM MobilityWalkingBoutHistory WHERE startTime < ?");
    a1[51] = v6;
    a1[52] = sub_100601D1C(a1[10], (uint64_t)"SELECT * from MobilityWalkingBoutHistory ORDER BY startTime ASC");
    a1[53] = v7;
    a1[54] = sub_100601D1C(a1[10], (uint64_t)"SELECT COUNT(*) FROM MobilityWalkingBoutHistory");
    a1[55] = v8;
    a1[56] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM MobilityWalkingBoutHistory WHERE startTime >= ? and endTime > 0 and endTime <= ? ORDER BY startTime ASC");
    a1[57] = v9;
    a1[58] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM MobilityWalkingBoutHistory ORDER BY id DESC LIMIT 1");
    a1[59] = v10;
    a1[60] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM MobilityWalkingBoutHistory ORDER BY endTime DESC LIMIT 1");
    a1[61] = v11;
    a1[62] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM MobilityWalkingBoutHistory ORDER BY startTime ASC LIMIT 1");
    a1[63] = v12;
    a1[64] = sub_100601D1C(a1[10], (uint64_t)"INSERT INTO MobilityWalkingBoutHistory (startTime, endTime, stepCount, workoutType, terminationReason, boundaryType) VALUES (?, ?, ?, ?, ?, ?)");
    a1[65] = v13;
    a1[66] = sub_100601D1C(a1[10], (uint64_t)"UPDATE MobilityWalkingBoutHistory SET startTime = startTime + ?");
    a1[67] = v14;
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"UPDATE MobilityWalkingBoutHistory SET startTime = ?, endTime = ?, stepCount = ?, workoutType = ?, terminationReason = ?, boundaryType = ? WHERE id = ?");
    a1[68] = result;
    a1[69] = v15;
  }
  return result;
}

uint64_t sub_100983AB0(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "MobilityWalkingBoutHistory");
  if (result)
  {
    uint64_t v3 = "workoutType";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "MobilityWalkingBoutHistory", (uint64_t)"workoutType", (uint64_t)&v3);
  }
  return result;
}

void sub_100983FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_100984050(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 384), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    int v4 = (sqlite3_stmt *)sub_10014D19C(v7);
    sub_10001FEB0(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0) {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_10003CC68(v5, v6);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1009840F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10098410C(uint64_t a1)
{
  return sub_100984050(a1 - 72);
}

uint64_t sub_100984114(void *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100082068(a1 + 46, &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v10);
    if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = a1[10];
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v10);
      sub_10001FEB0(v6, v7);
    }
    uint64_t v8 = a1[10];
    if (*(uint64_t *)(v8 + 88) <= 0) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = *(void *)(v8 + 88);
    }
    sub_10003CC68(v8, v9);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_100984200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10098421C(uint64_t a1, double a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 528), &v8);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    if (sub_100055D58(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v8);
      sub_10001FEB0(v6, v7);
    }
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1009842C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009842E4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 512), &v15);
    if (v15)
    {
      uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v15);
      if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
      {
        uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v15);
        if (sub_100055D58(v6, 2, *(double *)(a2 + 16)))
        {
          uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v15);
          if (sub_100055B20(v7, 3, *(_DWORD *)(a2 + 24)))
          {
            uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v15);
            if (sub_10014D1A4(v8, 4, *(_DWORD *)(a2 + 28)))
            {
              uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v15);
              if (sub_10014D1A4(v9, 5, *(_DWORD *)(a2 + 32)))
              {
                uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v15);
                if (sub_10014D1A4(v10, 6, *(_DWORD *)(a2 + 36)))
                {
                  uint64_t v11 = *(void *)(a1 + 80);
                  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v15);
                  sub_10001FEB0(v11, v12);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022D5F58);
      }
      uint64_t v13 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "BoutBoundaryRecorderDb: unable to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022D5F58);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMobility::BoutBoundaryRecorderDb::insertRecordUL(const BoutBoundary &, BOOL)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_10098456C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009845B4()
{
  return 0;
}

uint64_t sub_1009845BC(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 464), &v7);
  uint64_t v4 = sub_1009824E8(&v7, a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v4;
}

void sub_10098464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100984668(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D61F0);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D61F0);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      __int16 v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    uint64_t v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    uint64_t v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      int v16 = __p;
    }
    else {
      int v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100985894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100985BF4(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A75034(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_10098604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1009860CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100988024(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D61F0);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D61F0);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D61F0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::BoutBoundary>::setDatabaseAccessible() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_10098684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100986880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

id *sub_100986894(uint64_t a1, long long *a2, char a3)
{
  v32[0] = (id)os_transaction_create();
  v32[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v32);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v29 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104))(a1, &v29);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D61F0);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D61F0);
        }
        LOWORD(v33) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = *(double *)&v30;
    double v9 = v7 - *(double *)&v30;
    if (v7 - *(double *)&v30 < 0.0) {
      double v9 = -(v7 - *(double *)&v30);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D61F0);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)long long buf = 134349312;
        double v38 = *(double *)&v30;
        __int16 v39 = 2050;
        uint64_t v40 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D61F0);
        }
        uint64_t v23 = *((void *)a2 + 1);
        int v33 = 134349312;
        double v34 = *(double *)&v30;
        __int16 v35 = 2050;
        uint64_t v36 = v23;
        unint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = *(double *)&v30;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D61F0);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)long long buf = 134217984;
          double v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022D61F0);
          }
          double v25 = *((double *)a2 + 1);
          int v33 = 134217984;
          double v34 = v25;
          long long v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v28 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022D61F0);
        double v17 = v28;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D61F0);
        }
        int v33 = 134217984;
        double v34 = v18;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutBoundary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, int *, uint64_t, long long *))(*(void *)a1 + 144))(a1, &v29, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  *(void *)(a1 + 256) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v32);
}

void sub_1009870A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009870D4(uint64_t a1)
{
  return sub_1009860CC(a1 - 72);
}

void sub_1009870DC(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_10098710C(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A751A4(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100987520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1009875A0(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A75314(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100987914(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A75484(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100987C40(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A755F4(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100987F64(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100987F94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100988024(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1009880A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009880C0(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

char *sub_1009880F0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *((_DWORD *)result + 2);
  long long v4 = *((_OWORD *)result + 1);
  char v5 = result[56];
  uint64_t v6 = *(void *)(result + 60);
  char v7 = result[68];
  *(void *)a2 = *(void *)result;
  *(_DWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v8 = a2 + 32;
  if (result[55] < 0)
  {
    uint64_t result = (char *)sub_1000DC48C((unsigned char *)v8, *((void **)result + 4), *((void *)result + 5));
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *((_OWORD *)result + 2);
    *(void *)(v8 + 16) = *((void *)result + 6);
  }
  *(unsigned char *)(a2 + 56) = v5;
  *(void *)(a2 + 60) = v6;
  *(unsigned char *)(a2 + 68) = v7;
  return result;
}

uint64_t sub_100988180(float32x4_t *a1)
{
  sub_10010F274((uint64_t)v29);
  *(void *)((char *)&v29[2] + *(void *)(v29[0] - 24)) = 4;
  uint64_t v2 = sub_100132EFC(v30, (uint64_t)"device identifier: ", 19);
  int v3 = a1[3].i8[7];
  if (v3 >= 0) {
    uint64_t v4 = (uint64_t)&a1[2];
  }
  else {
    uint64_t v4 = a1[2].i64[0];
  }
  if (v3 >= 0) {
    uint64_t v5 = a1[3].u8[7];
  }
  else {
    uint64_t v5 = a1[2].i64[1];
  }
  uint64_t v6 = sub_100132EFC(v2, v4, v5);
  char v7 = sub_100132EFC(v6, (uint64_t)", device Type: ", 15);
  unint64_t v8 = a1[3].i8[8];
  if (v8 > 2) {
    double v9 = "unknown";
  }
  else {
    double v9 = off_1022D6270[v8];
  }
  sub_100134750(&__p, v9);
  if ((v28 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v11 = v28;
  }
  else {
    uint64_t v11 = v27;
  }
  uint64_t v12 = sub_100132EFC(v7, (uint64_t)p_p, v11);
  sub_100132EFC(v12, (uint64_t)", distance(m): ", 15);
  std::ostream::operator<<();
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  uint32x4_t v13 = (uint32x4_t)vceqq_f32(a1[1], (float32x4_t)NINearbyObjectDirectionNotAvailable);
  v13.i32[3] = v13.i32[2];
  if ((vminvq_u32(v13) & 0x80000000) != 0)
  {
    sub_100132EFC(v30, (uint64_t)", AOA not available", 19);
  }
  else
  {
    unsigned __int8 v14 = sub_100132EFC(v30, (uint64_t)", direction vector: ", 20);
    sub_100132EFC(v14, (uint64_t)"x: ", 3);
    uint64_t v15 = (void *)std::ostream::operator<<();
    sub_100132EFC(v15, (uint64_t)", y:  ", 6);
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_100132EFC(v16, (uint64_t)", z: ", 5);
    uint64_t v17 = (void *)std::ostream::operator<<();
    sub_100132EFC(v17, (uint64_t)", azimuth: ", 11);
    double v18 = (void *)std::ostream::operator<<();
    sub_100132EFC(v18, (uint64_t)", elevation: ", 13);
    std::ostream::operator<<();
  }
  uint64_t v19 = sub_100132EFC(v30, (uint64_t)", range quality: ", 17);
  unsigned int v20 = a1[4].u8[4] - 1;
  if (v20 > 2) {
    long long v21 = "unspecified";
  }
  else {
    long long v21 = off_1022D6288[(char)v20];
  }
  sub_100134750(&__p, v21);
  if ((v28 & 0x80u) == 0) {
    int64_t v22 = &__p;
  }
  else {
    int64_t v22 = __p;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v23 = v28;
  }
  else {
    uint64_t v23 = v27;
  }
  sub_100132EFC(v19, (uint64_t)v22, v23);
  if ((char)v28 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  *(void *)((char *)v29
  v30[0] = v24;
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100988514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100988CFC(uint64_t a1)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022D6230);
  }
  uint64_t v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMicroLocationHomeNearbyRangeBridge: custom range timer expired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022D6230);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLHomeNearbyRangeBridge setRangingRateWithConfiguration:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_100223EB4(*(void *)(*(void *)(a1 + 32) + 8));
}

id sub_10098975C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) startRanging];
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  return result;
}

void sub_100989C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10098A140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  a49 = (uint64_t)&a36;
  sub_10098AFD4((void ***)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_10098A1CC(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333) {
      sub_1001D7FD4();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x199999999999999) {
      unint64_t v15 = 0x333333333333333;
    }
    else {
      unint64_t v15 = v13;
    }
    v22[4] = v4;
    if (v15) {
      uint64_t v16 = (char *)sub_100214C7C(v4, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[80 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[80 * v15];
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v18;
    long long v19 = *(_OWORD *)(a2 + 32);
    *((void *)v17 + 6) = *(void *)(a2 + 48);
    *((_OWORD *)v17 + 2) = v19;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    uint64_t v20 = *(void *)(a2 + 56);
    *(void *)(v17 + 61) = *(void *)(a2 + 61);
    *((void *)v17 + 7) = v20;
    v22[2] = v17 + 80;
    sub_10098B078(a1, v22);
    uint64_t v11 = a1[1];
    sub_10098B22C((uint64_t)v22);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 32);
    *(void *)(v7 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(v7 + 32) = v9;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(v7 + 61) = *(void *)(a2 + 61);
    *(void *)(v7 + 56) = v10;
    uint64_t v11 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v11;
  return v11 - 80;
}

void sub_10098A328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10098B22C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10098AE84()
{
  if (objc_msgSend(+[CLMicroLocationEnvironment shared](CLMicroLocationEnvironment, "shared"), "isTestingEnvironment"))
  {
    sub_1000C7F88(&v6);
    BOOL v5 = 0;
    CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingUwbRangeEnable", 0x8000100u, kCFAllocatorNull);
    int v1 = sub_1000D29FC(v6, (uint64_t)v0, &v5);
    CFRelease(v0);
    BOOL v2 = v5;
    if (v7) {
      sub_1000DB0A0(v7);
    }
    if (v2) {
      return 1;
    }
    else {
      return v1 ^ 1u;
    }
  }
  else
  {
    id v4 = +[NISession deviceCapabilities];
    return (uint64_t)_[v4 supportsPreciseDistanceMeasurement];
  }
}

void sub_10098AF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10098AF74(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10098AFA4(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_10098AFD4(void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    sub_10098B028((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_10098B028(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

uint64_t sub_10098B078(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10098B0F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10098B0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 64) = v8;
      long long v9 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v9;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      uint64_t v10 = *(void *)(a3 - 24);
      *(void *)(v7 - 19) = *(void *)(a3 - 19);
      *(void *)(v7 - 24) = v10;
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10098B1AC((uint64_t)v13);
  return v11;
}

uint64_t sub_10098B1AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10098B1E4(a1);
  }
  return a1;
}

void sub_10098B1E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    v1 += 80;
  }
}

uint64_t sub_10098B22C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10098B264(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 80;
      *(void *)(a1 + 16) = v2 - 80;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_10098B2BC(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1002F3410(result, a4);
    uint64_t result = (void *)sub_10098B344((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10098B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10098AFD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10098B344(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v16 = a4;
  uint64_t v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  int v14[2] = &v17;
  char v15 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 2;
    do
    {
      long long v7 = *(v6 - 1);
      *(_OWORD *)uint64_t v4 = *(v6 - 2);
      *(_OWORD *)(v4 + 16) = v7;
      long long v8 = (unsigned char *)(v4 + 32);
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000DC48C(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v10 = v17;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 48) = *((void *)v6 + 2);
        *(_OWORD *)long long v8 = v9;
        uint64_t v10 = v4;
      }
      uint64_t v11 = v6 - 2;
      uint64_t v12 = *((void *)v6 + 3);
      *(void *)(v4 + 61) = *(void *)((char *)v6 + 29);
      *(void *)(v4 + 56) = v12;
      uint64_t v4 = v10 + 80;
      uint64_t v17 = v10 + 80;
      v6 += 5;
    }
    while (v11 + 5 != a3);
  }
  char v15 = 1;
  sub_10098B428((uint64_t)v14);
  return v4;
}

void sub_10098B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10098B428(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10098B460(a1);
  }
  return a1;
}

void sub_10098B460(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0) {
      operator delete(*(void **)(v1 - 48));
    }
    v1 -= 80;
  }
}

void sub_10098B58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 4 || a3)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022D62C8);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLDeviceProximity,queryForProximityCallback,FaliedParamCheck", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022D62C8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLDeviceProximityHelper queryForProximity:monitorInterval:withTimeout:]_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v3)
    {
      int v4 = +[CLDeviceProximityHelper convertPocketStateToDeviceProximity:a2];
      sub_10098B780(v3, v4);
    }
  }
}

void sub_10098B780(uint64_t a1, int a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022D62C8);
  }
  int v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLDeviceProximity,proximityStateCallback,state,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022D62C8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceProximity::proximityStateCallback(const CLDeviceProximityState)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    [*(id *)(a1 + 32) setNextFireDelay:5.0];
    double v5 = sub_10016C458();
    sub_10098BF4C(a1 + 40, a2, v5);
  }
}

uint64_t sub_10098B998(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_101D54DA0;
  [*(void *)(a1 + 32) = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer")];
  sub_10098BFD8(a1 + 40, a3);
  *(unsigned char *)(a1 + 72) = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10098BD2C;
  void v11[3] = &unk_1022A3020;
  v11[4] = a1;
  [*(id *)(a1 + 32) setHandler:v11];
  if (+[CMPocketStateManager isPocketStateAvailable])
  {
    uint64_t v6 = [CLDeviceProximityHelper alloc];
    *(void *)(a1 + 8) = v6;
    if (v6) {
      [(CLDeviceProximityHelper *)v6 initWithOwnerClass:a1];
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022D62C8);
    }
    long long v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLDeviceProximity,isPocketStateAvailable,1", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_18:
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLDeviceProximity::CLDeviceProximity(id<CLIntersiloUniverse>, const CLDeviceProximityCallbackType)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return a1;
      }
LABEL_20:
      dispatch_once(&qword_102419380, &stru_1022D62C8);
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022D62C8);
    }
    int v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLDeviceProximity,isPocketStateAvailable,0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  return a1;
}

void sub_10098BD10(_Unwind_Exception *a1)
{
  sub_10078D928(v1);
  _Unwind_Resume(a1);
}

id sub_10098BD2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022D62C8);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLDeviceProximity,PeriodicCheck", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022D62C8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLDeviceProximity::CLDeviceProximity(id<CLIntersiloUniverse>, const CLDeviceProximityCallbackType)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(v1 + 8) queryForProximity:[*(id *)v1 silo].queue monitorInterval:*(double *)(v1 + 24) withTimeout:*(double *)(v1 + 16)];
}

uint64_t sub_10098BEE0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 8) = 0;
  }
  [*(id *)(a1 + 32) invalidate];

  *(void *)(a1 + 32) = 0;
  *(void *)a1 = 0;
  sub_10078D928((void *)(a1 + 40));
  return a1;
}

uint64_t sub_10098BF4C(uint64_t a1, int a2, double a3)
{
  int v6 = a2;
  double v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, double *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_10098BFA8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10098BFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

id sub_10098C158(long long *a1, void *a2)
{
  long long v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return [a2 onResultAvailable:&v3];
}

uint64_t sub_10098C454(uint64_t a1, int a2, double a3)
{
  *(_DWORD *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022D62E8);
  }
  uint64_t v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SessionMetrics,Start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022D62E8);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLStrideCalibrationSessionMetrics::CLStrideCalibrationSessionMetrics(CFTimeInterval, int32_t)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return a1;
}

void sub_10098CA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_10098D554(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10098D584(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10098D5B4(uint64_t a1)
{
  return a1;
}

void sub_10098D690(id a1)
{
  qword_10247F1A0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSeparationAlertsServiceSilo"];
}

void sub_10098D708(id a1)
{
  sub_100103240();
  if ((sub_10016CCBC() & 1) != 0 || (sub_100103240(), sub_10010145C()))
  {
    byte_10247F1B0 = 1;
  }
  else
  {
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    uint64_t v1 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#sa not supported on this platform because platform is not iPhone or Watch", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLSeparationAlertsService isSupported]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  if (!objc_opt_class())
  {
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    uint64_t v2 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#sa not supported on this platform because SPOwner.framework is not present", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
      long long v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLSeparationAlertsService isSupported]_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    byte_10247F1B0 = 0;
  }
}

void sub_10098DE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

id sub_10098DEB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onStopLocationRequestTimerFire];
}

void sub_10098E234(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_100089AE0((char *)v7, (long long *)a3);
  uint64_t v21 = *(void *)(a3 + 184);
  [a4 onClientManagerNotification:v6 data:v7];
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_10098E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10098E484(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onGnssNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_10098E514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10098E9A0(uint64_t a1, unsigned int *a2, long long *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return [a4 onDaemonStatusNotification:v4 data:&v6];
}

id sub_10098EBBC(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onDataProtectionManagerNotification:*a2 data:*a3];
}

void sub_10098ED58(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  v7[0] = *(unsigned char *)a3;
  sub_100997A7C((uint64_t)&v8, a3 + 8);
  uint64_t v15 = *(void *)(a3 + 112);
  int v16 = *(_DWORD *)(a3 + 120);
  [a4 onBluetoothServiceNotification:v6 data:v7];
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
}

void sub_10098EDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10098EF88(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  long long v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  long long v7 = a3[3];
  v11[2] = a3[2];
  void v11[3] = v7;
  long long v8 = a3[5];
  v11[4] = a3[4];
  void v11[5] = v8;
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return [a4 onMotionStateNotification:v4 data:v11];
}

id sub_10098F1BC(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 onVehicleStateNotification];
}

id sub_10098F948(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  long long v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  long long v7 = a3[5];
  v12[4] = a3[4];
  void v12[5] = v7;
  long long v8 = a3[7];
  v12[6] = a3[6];
  void v12[7] = v8;
  long long v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  long long v10 = a3[3];
  v12[2] = a3[2];
  uint64_t v12[3] = v10;
  return [a4 onCompanionNotification:v4 data:v12];
}

id sub_1009905F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    long long v5 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v22 = 68289539;
      *(_WORD *)uint64_t v23 = 2082;
      *(void *)&v23[2] = "";
      *(_WORD *)&v23[10] = 2113;
      *(void *)&v23[12] = v6;
      *(_WORD *)&v23[20] = 2114;
      *(void *)&v23[22] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
    }
    uint64_t v7 = qword_1024194A8;
    if (!os_signpost_enabled((os_log_t)qword_1024194A8)) {
      return [*(id *)(a1 + 40) sendVisit:*(void *)(a1 + 32) v22:*(_OWORD *)v23 *(_OWORD *)&v23[16]];
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v22 = 68289539;
    *(_WORD *)uint64_t v23 = 2082;
    *(void *)&v23[2] = "";
    *(_WORD *)&v23[10] = 2113;
    *(void *)&v23[12] = v8;
    *(_WORD *)&v23[20] = 2114;
    *(void *)&v23[22] = a3;
    long long v9 = "#sa #loi error fetching LOI";
    long long v10 = "{\"msg%{public}.0s\":\"#sa #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\":%"
          "{public, location:escape_only}@}";
    uint64_t v11 = v7;
LABEL_9:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v9, v10, (uint8_t *)&v22, 0x26u);
    return [*(id *)(a1 + 40) sendVisit:*(void *)(a1 + 32) v22:*(_OWORD *)v23 *(_OWORD *)&v23[16]];
  }
  if (!a2)
  {
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    int v16 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 48);
      uint64_t v22 = 68289539;
      *(_WORD *)uint64_t v23 = 2082;
      *(void *)&v23[2] = "";
      *(_WORD *)&v23[10] = 2113;
      *(void *)&v23[12] = v17;
      *(_WORD *)&v23[20] = 2113;
      *(void *)&v23[22] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sa #loi received nil in return when fetching LOI\", \"visit\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
    }
    uint64_t v19 = qword_1024194A8;
    if (!os_signpost_enabled((os_log_t)qword_1024194A8)) {
      return [*(id *)(a1 + 40) sendVisit:*(void *)(a1 + 32) v22:*(_OWORD *)v23 *(_OWORD *)&v23[16]];
    }
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = 68289539;
    *(_WORD *)uint64_t v23 = 2082;
    *(void *)&v23[2] = "";
    *(_WORD *)&v23[10] = 2113;
    *(void *)&v23[12] = v20;
    *(_WORD *)&v23[20] = 2113;
    *(void *)&v23[22] = v21;
    long long v9 = "#sa #loi received nil in return when fetching LOI";
    long long v10 = "{\"msg%{public}.0s\":\"#sa #loi received nil in return when fetching LOI\", \"visit\":%{private, location:esca"
          "pe_only}@, \"loiIdentifier\":%{private, location:escape_only}@}";
    uint64_t v11 = v19;
    goto LABEL_9;
  }
  if (qword_1024194A0 != -1) {
    dispatch_once(&qword_1024194A0, &stru_1022D64D8);
  }
  char v14 = qword_1024194A8;
  if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v22 = 68289539;
    *(_WORD *)uint64_t v23 = 2082;
    *(void *)&v23[2] = "";
    *(_WORD *)&v23[10] = 2113;
    *(void *)&v23[12] = a2;
    *(_WORD *)&v23[20] = 2113;
    *(void *)&v23[22] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa #loi received LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
  }
  return [*(id *)(a1 + 40) ingestTAEventIfSAServiceRunning:[+[CLSeparationAlertsService convertRTLocationOfInterest:](CLSeparationAlertsService, "convertRTLocationOfInterest:", a2)];
}

void sub_100990A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024194A0 != -1) {
    dispatch_once(&qword_1024194A0, &stru_1022D64D8);
  }
  uint64_t v8 = qword_1024194A8;
  if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134284033;
    *(void *)uint64_t v36 = a2;
    *(_WORD *)&v36[8] = 2049;
    *(void *)&v36[10] = a3;
    *(_WORD *)&v36[18] = 2049;
    *(void *)&v36[20] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#sa received vehicle state notification - state %{private}lu; hints %{private}lu; operator state %{private}lu",
      buf,
      0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    int v29 = 134284033;
    uint64_t v30 = a2;
    __int16 v31 = 2049;
    uint64_t v32 = a3;
    __int16 v33 = 2049;
    uint64_t v34 = a4;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSeparationAlertsService onVehicleStateNotification]_block_invoke", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  if (a2 == 1)
  {
    long long v9 = (id *)(a1 + 32);
    if ([*(id *)(*(void *)(a1 + 32) + 184) count])
    {
      uint64_t v23 = a3;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v11 = (void *)*((void *)*v9 + 23);
      id v12 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v25;
        do
        {
          uint64_t v15 = 0;
          do
          {
            if (*(void *)v25 != v14) {
              objc_enumerationMutation(v11);
            }
            int v16 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v15);
            if (qword_1024194A0 != -1) {
              dispatch_once(&qword_1024194A0, &stru_1022D64D8);
            }
            uint64_t v17 = qword_1024194A8;
            if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
            {
              id v18 = [objc_msgSend(v16, "identifier") UUIDString];
              *(_DWORD *)long long buf = 68289283;
              *(_DWORD *)uint64_t v36 = 0;
              *(_WORD *)&v36[4] = 2082;
              *(void *)&v36[6] = "";
              *(_WORD *)&v36[14] = 2113;
              *(void *)&v36[16] = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa feedback dialogue triggered end of travel\", \"device\":%{private, location:escape_only}@}", buf, 0x1Cu);
            }
            [*v9 showSAUserFeedbackDialogue:v16];
            uint64_t v15 = (char *)v15 + 1;
          }
          while (v13 != v15);
          id v13 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
        }
        while (v13);
      }
      [*((id *)*v9 + 23) removeAllObjects];
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
      a2 = 1;
      a3 = v23;
      uint64_t v19 = qword_1024194A8;
      if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289026;
        *(_DWORD *)uint64_t v36 = 0;
        *(_WORD *)&v36[4] = 2082;
        *(void *)&v36[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa dialogue queue emptied\"}", buf, 0x12u);
      }
    }
    char v10 = 0;
    goto LABEL_26;
  }
  if (a2 == 2)
  {
    long long v9 = (id *)(a1 + 32);
    char v10 = 1;
LABEL_26:
    *((unsigned char *)*v9 + 192) = v10;
    goto LABEL_28;
  }
  a2 = 0;
LABEL_28:
  if (a4 == 2) {
    uint64_t v20 = 2;
  }
  else {
    uint64_t v20 = a4 == 1;
  }
  id v21 = [objc_alloc((Class)TAVehicleStateNotification) initWithVehicularState:a2 andVehicularHints:a3 andOperatorState:v20 date:[NSDate date]];
  [*(id *)(a1 + 32) ingestTAEventIfSAServiceRunning:v21];
}

void sub_100990FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10099106C;
  block[3] = &unk_1022D6400;
  uint64_t v4 = *(void *)(a1 + 40);
  block[5] = v2;
  block[6] = v4;
  block[4] = a2;
  dispatch_async(v3, block);
}

void sub_10099106C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    uint64_t v2 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 32) identifier];
      uint64_t v4 = *(void *)(a1 + 48);
      int v8 = 68289539;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2113;
      id v13 = v3;
      __int16 v14 = 2050;
      uint64_t v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa ingesting connection update\", \"UUID\":%{private, location:escape_only}@, \"state\":%{public}lu}", (uint8_t *)&v8, 0x26u);
    }
    id v5 = [objc_alloc((Class)SAConnectionEvent) initWithDeviceUUID:*(id *)(a1 + 32) state:*(void *)(a1 + 48) date:[NSDate date]];
    [*(id *)(a1 + 40) ingestTAEventIfSAServiceRunning:v5];
  }
  else
  {
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    uint64_t v6 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v8, 0x12u);
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
    }
    uint64_t v7 = qword_1024194A8;
    if (os_signpost_enabled((os_log_t)qword_1024194A8))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa received nil beacon but got companion notification, ignoring", "{\"msg%{public}.0s\":\"#sa received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v8, 0x12u);
    }
  }
}

NSDictionary *__cdecl sub_100992394(id a1)
{
  return (NSDictionary *)&off_102397478;
}

NSDictionary *__cdecl sub_1009926E8(id a1)
{
  return (NSDictionary *)&off_1023974A0;
}

char *sub_100994974(uint64_t a1, int a2, NSNumber *a3)
{
  uint64_t v4 = "ds";
  if (a2)
  {
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    id v5 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(NSNumber **)(a1 + 32);
      *(_DWORD *)long long buf = 68289283;
      int v41 = 0;
      __int16 v42 = 2082;
      int v43 = "";
      __int16 v44 = 2113;
      __int16 v45 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa separation published\", \"count\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v7 + 192))
    {
      [*(id *)(v7 + 184) addObjectsFromArray:*(void *)(a1 + 48)];
    }
    else
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      int v9 = *(void **)(a1 + 48);
      id v10 = [v9 countByEnumeratingWithState:&v35 objects:v48 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v36;
        uint64_t v29 = 1;
        do
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v36 != v12) {
              objc_enumerationMutation(v9);
            }
            __int16 v14 = *(void **)(*((void *)&v35 + 1) + 8 * i);
            if (qword_1024194A0 != -1) {
              dispatch_once(&qword_1024194A0, &stru_1022D64D8);
            }
            uint64_t v15 = qword_1024194A8;
            if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
            {
              int v16 = (NSNumber *)[objc_msgSend(v14, "identifier") UUIDString];
              *(_DWORD *)long long buf = 68289283;
              int v41 = 0;
              __int16 v42 = 2082;
              int v43 = "";
              __int16 v44 = 2113;
              __int16 v45 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa feedback dialogue triggered in non-driving state\", \"device\":%{private, location:escape_only}@}", buf, 0x1Cu);
            }
            [*(id *)(a1 + 40) showSAUserFeedbackDialogue:v14];
          }
          id v11 = [v9 countByEnumeratingWithState:&v35 objects:v48 count:16];
        }
        while (v11);
        uint64_t v30 = -1;
        uint64_t v4 = "kWorkoutRecorderMinimumPowerAssertionTimeSeconds" + 46;
        goto LABEL_31;
      }
    }
    uint64_t v29 = 1;
    uint64_t v30 = -1;
  }
  else
  {
    if (a3) {
      uint64_t v30 = (uint64_t)[(NSNumber *)a3 code];
    }
    else {
      uint64_t v30 = -1;
    }
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    uint64_t v17 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_FAULT))
    {
      id v18 = *(NSNumber **)(a1 + 32);
      *(_DWORD *)long long buf = 68289539;
      int v41 = 0;
      __int16 v42 = 2082;
      int v43 = "";
      __int16 v44 = 2113;
      __int16 v45 = v18;
      __int16 v46 = 2114;
      __int16 v47 = a3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sa separation published failed\", \"count\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
    }
    uint64_t v19 = qword_1024194A8;
    if (!os_signpost_enabled((os_log_t)qword_1024194A8))
    {
      uint64_t v29 = 0;
      goto LABEL_34;
    }
    uint64_t v20 = *(NSNumber **)(a1 + 32);
    *(_DWORD *)long long buf = 68289539;
    int v41 = 0;
    __int16 v42 = 2082;
    int v43 = "";
    __int16 v44 = 2113;
    __int16 v45 = v20;
    __int16 v46 = 2114;
    __int16 v47 = a3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa separation published failed", "{\"msg%{public}.0s\":\"#sa separation published failed\", \"count\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    uint64_t v29 = 0;
  }
LABEL_31:
  if (qword_1024194A0 != -1) {
    dispatch_once(&qword_1024194A0, &stru_1022D64D8);
  }
LABEL_34:
  id v21 = qword_1024194A8;
  if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = +[NSNumber numberWithInteger:v30];
    uint64_t v23 = +[NSNumber numberWithInteger:v29];
    *(_DWORD *)long long buf = *((void *)v4 + 246);
    int v41 = 0;
    __int16 v42 = 2082;
    int v43 = "";
    __int16 v44 = 2113;
    __int16 v45 = v22;
    __int16 v46 = 2113;
    __int16 v47 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sa analytics submitting spd success / failure analytics event\", \"error code\":%{private, location:escape_only}@, \"published\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t result = (char *)[*(id *)(a1 + 48) countByEnumeratingWithState:&v31 objects:v39 count:16];
  if (result)
  {
    long long v25 = result;
    uint64_t v26 = *(void *)v32;
    do
    {
      long long v27 = 0;
      do
      {
        if (*(void *)v32 != v26) {
          objc_enumerationMutation(obj);
        }
        +[NSString stringWithUTF8String:"com.apple.locationd.separationalerts.spdsuccess"];
        AnalyticsSendEventLazy();
        ++v27;
      }
      while (v25 != v27);
      uint64_t result = (char *)[obj countByEnumeratingWithState:&v31 objects:v39 count:16];
      long long v25 = result;
    }
    while (result);
  }
  return result;
}

NSDictionary *sub_100994F58(uint64_t a1)
{
  v3[0] = @"deviceType";
  v4[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) deviceType]);
  v3[1] = @"productId";
  v4[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) productId]);
  v3[2] = @"vendorId";
  void v4[2] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) vendorId]);
  void v3[3] = @"eventType";
  void v4[3] = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
  void v3[4] = @"lastAlertType";
  void v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) intValue]);
  void v3[5] = @"isPublished";
  _DWORD v4[5] = +[NSNumber numberWithInteger:*(void *)(a1 + 56)];
  v3[6] = @"errorNum";
  v4[6] = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:7];
}

void sub_100997690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009979C8(id a1)
{
  qword_1024194A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "SeparationAlerts");
}

void sub_1009979F8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100997A28(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_100997A7C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  uint64_t v6 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1000DC48C(v6, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)uint64_t v6 = v7;
  }
  long long v8 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_100997B50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100997B84(unint64_t a1, char a2)
{
  uint64_t v2 = qword_10247F178;
  if (!qword_10247F178) {
    goto LABEL_12;
  }
  long long v4 = &qword_10247F178;
  do
  {
    unint64_t v5 = *(void *)(v2 + 32);
    BOOL v6 = v5 >= a1;
    if (v5 >= a1) {
      long long v7 = (uint64_t *)v2;
    }
    else {
      long long v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      long long v4 = (uint64_t *)v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 != &qword_10247F178 && v4[4] <= a1)
  {
    uint64_t v10 = v4[5];
    switch(v10)
    {
      case 0:
        id v11 = "None";
        goto LABEL_35;
      case 1:
        id v11 = "Self Beaconing";
        goto LABEL_35;
      case 2:
        id v11 = "Durian";
        goto LABEL_35;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_23;
      case 4:
        id v11 = "Accessory";
        goto LABEL_35;
      case 8:
        id v11 = "Watch";
        goto LABEL_35;
      default:
        if (v10 == 16)
        {
          id v11 = "HELE";
LABEL_35:
          CFStringRef v14 = +[NSString stringWithUTF8String:v11];
        }
        else
        {
LABEL_23:
          if (qword_1024194A0 != -1) {
            dispatch_once(&qword_1024194A0, &stru_1022D64D8);
          }
          uint64_t v12 = qword_1024194A8;
          if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            LOWORD(v18[0]) = 2082;
            *(std::__shared_weak_count **)((char *)v18 + 2) = (std::__shared_weak_count *)"";
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa unknown device type for user feedback dialogue\"}", buf, 0x12u);
            if (qword_1024194A0 != -1) {
              dispatch_once(&qword_1024194A0, &stru_1022D64D8);
            }
          }
          id v13 = qword_1024194A8;
          if (os_signpost_enabled((os_log_t)qword_1024194A8))
          {
            *(_DWORD *)long long buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            LOWORD(v18[0]) = 2082;
            *(std::__shared_weak_count **)((char *)v18 + 2) = (std::__shared_weak_count *)"";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa unknown device type for user feedback dialogue", "{\"msg%{public}.0s\":\"#sa unknown device type for user feedback dialogue\"}", buf, 0x12u);
          }
          CFStringRef v14 = &stru_10234F018;
        }
        uint64_t v15 = a2 & 3;
        if ((a2 & 3) != 0)
        {
          if (v15 == 2)
          {
            sub_100997FE8((uint64_t)&off_102392DB0, (uint64_t)v14);
          }
          else if (v15 == 1)
          {
            sub_100997FE8((uint64_t)&off_102392D98, (uint64_t)v14);
          }
        }
        else
        {
          sub_100997FE8((uint64_t)&off_102392DC8, (uint64_t)v14);
          sub_1000C7F88(buf);
          char v16 = 0;
          sub_1000EA238(*(uint64_t *)buf, "SeparationAlertsAllowUserFeedback", &v16);
          if (v18[0]) {
            sub_1000DB0A0(v18[0]);
          }
        }
        sub_1000F0A30((uint64_t **)&qword_10247F170, v4);
        operator delete(v4);
        break;
    }
  }
  else
  {
LABEL_12:
    if (qword_1024194A0 != -1) {
      dispatch_once(&qword_1024194A0, &stru_1022D64D8);
    }
    long long v8 = qword_1024194A8;
    if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v18[0]) = 2082;
      *(std::__shared_weak_count **)((char *)v18 + 2) = (std::__shared_weak_count *)"";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#sa CFUserNotification event delivery for unknown notification\"}", buf, 0x12u);
      if (qword_1024194A0 != -1) {
        dispatch_once(&qword_1024194A0, &stru_1022D64D8);
      }
    }
    int v9 = qword_1024194A8;
    if (os_signpost_enabled((os_log_t)qword_1024194A8))
    {
      *(_DWORD *)long long buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v18[0]) = 2082;
      *(std::__shared_weak_count **)((char *)v18 + 2) = (std::__shared_weak_count *)"";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sa CFUserNotification event delivery for unknown notification", "{\"msg%{public}.0s\":\"#sa CFUserNotification event delivery for unknown notification\"}", buf, 0x12u);
    }
  }
}

void sub_100997FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100997FE8(uint64_t a1, uint64_t a2)
{
  v13[0] = +[NSString stringWithUTF8String:"ResponseCount"];
  v14[0] = &off_102392D80;
  v13[1] = +[NSString stringWithUTF8String:"Response"];
  v14[1] = a1;
  v13[2] = +[NSString stringWithUTF8String:"deviceType"];
  int v14[2] = a2;
  long long v4 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:3]);
  if (qword_1024194A0 != -1) {
    dispatch_once(&qword_1024194A0, &stru_1022D64D8);
  }
  unint64_t v5 = qword_1024194A8;
  if (os_log_type_enabled((os_log_t)qword_1024194A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2114;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSeparationAlerts: submitUserResponseEvent\", \"analyticsEvent\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  +[NSString stringWithUTF8String:"com.apple.locationd.separationalerts.userfeedback"];
  return AnalyticsSendEventLazy();
}

uint64_t sub_1009981C0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1009981C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100998248()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1009982D8(_Unwind_Exception *a1)
{
}

void sub_1009982F0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D54E08;
      v0[3] = unk_101D54E18;
      v0[4] = xmmword_101D54E28;
      v0[0] = xmmword_101D54DE8;
      v0[1] = unk_101D54DF8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1009983D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1009983E8()
{
  qword_10247F180 = 0;
  qword_10247F178 = 0;
  qword_10247F170 = (uint64_t)&qword_10247F178;
  __cxa_atexit((void (*)(void *))sub_10098D5B4, &qword_10247F170, (void *)&_mh_execute_header);
  sub_100134750(qword_10247F188, "SeparationAlertsService");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F188, (void *)&_mh_execute_header);
}

void sub_10099847C(id a1)
{
  qword_102419618 = (uint64_t)os_log_create("com.apple.locationd.Utility", "QA");
}

id sub_100998688(uint64_t a1)
{
  return _[*(id *)(a1 + 32) timerFired:*(void *)(a1 + 40)];
}

uint64_t sub_1009988CC(uint64_t a1)
{
  [*(id *)(a1 + 24) assertInside];
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022D6570);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    id v3 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      id v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315394;
    int v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "timerFired, fIdentifier, %s, f, %p", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022D6570);
    }
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPersistentTimer::timerFired()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a1, *(void *)(a1 + 16));
}

uint64_t sub_100998AEC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8, double a9)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), *(void **)a2, *((void *)a2 + 1));
    uint64_t v17 = *(void **)(a1 + 24);
  }
  else
  {
    long long v16 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v16;
    uint64_t v17 = a5;
  }
  [v17 assertInside];
  id v18 = [CLPersistentTimerInternal alloc];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = *(void **)a2;
  }
  *(void *)a1 = [(CLPersistentTimerInternal *)v18 initWithFireTime:v19 timeInterval:a6 serviceIdentifier:a1 wakeDevice:a5 clTimer:a7 silo:a8 minimumEarlyFireProportion:a9];
  return a1;
}

void sub_100998BC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100998BE4(uint64_t a1)
{
  *(void *)a1 = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_100998C3C(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100998C6C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(void *)a1 = off_1022D65A0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *a4;
  uint64_t v7 = a4[1];
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *a5;
  uint64_t v8 = a5[1];
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 64) = 0;
  __int16 v9 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 68) = 0;
  *(void *)(a1 + 88) = 0xFFFF00000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 112) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 128) = _Q1;
  *(_OWORD *)(a1 + 144) = _Q1;
  *(_OWORD *)(a1 + 160) = _Q1;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 180) = 0xBFF0000000000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 208) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 220) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(unsigned char *)(a1 + 248) = 1;
  *(void *)(a1 + 256) = 0;
  sub_1000C7F88(buf);
  char v15 = sub_1000D2988(*(uint64_t *)buf, "StationaryLocationHarvest", (BOOL *)(a1 + 64));
  if (v24) {
    sub_1000DB0A0(v24);
  }
  if (v15)
  {
    if (*v9)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022D6648);
      }
      long long v16 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "StationaryLocationHarvest enabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMonitorGps::CLMonitorGps(id<CLIntersiloUniverse>, std::shared_ptr<CLMonitorGpsInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLMonitorGpsInterface::GpsReceiver>)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
  }
  else
  {
    *__int16 v9 = 0;
  }
  sub_1000C7F88(buf);
  id v18 = (unsigned char *)(a1 + 65);
  char v19 = sub_1000D2988(*(uint64_t *)buf, "IgnoreVehicularSpeed", (BOOL *)(a1 + 65));
  if (v24) {
    sub_1000DB0A0(v24);
  }
  if (v19)
  {
    if (*v18)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022D6648);
      }
      uint64_t v20 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "ignore vehicular speed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        id v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMonitorGps::CLMonitorGps(id<CLIntersiloUniverse>, std::shared_ptr<CLMonitorGpsInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLMonitorGpsInterface::GpsReceiver>)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
  }
  else
  {
    *id v18 = 0;
  }
  return a1;
}

void sub_1009990A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  long long v16 = (std::__shared_weak_count *)v14[7];
  if (v16) {
    sub_1000DB0A0(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)v14[5];
  if (v17) {
    sub_1000DB0A0(v17);
  }
  id v18 = (std::__shared_weak_count *)v14[3];
  if (v18) {
    sub_1000DB0A0(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100999104(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t sub_10099912C(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (result && *(unsigned __int8 *)(a1 + 66) != a2)
  {
    if (a2)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022D6648);
      }
      unint64_t v5 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HARVEST: starting gps harvesting.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMonitorGps::gpsHarvesting(BOOL)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), 4);
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), 4);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022D6648);
      }
      uint64_t v6 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HARVEST: stopping gps harvesting.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMonitorGps::gpsHarvesting(BOOL)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), 4);
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), 4);
      *(_DWORD *)(a1 + 92) = 0xFFFF;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      __asm { FMOV            V1.2D, #-1.0 }
      *(_OWORD *)(a1 + 112) = xmmword_101D1C320;
      *(_OWORD *)(a1 + 128) = _Q1;
      *(_OWORD *)(a1 + 144) = _Q1;
      *(_OWORD *)(a1 + 160) = _Q1;
      *(_DWORD *)(a1 + 176) = 0;
      *(void *)(a1 + 180) = 0xBFF0000000000000;
      *(void *)(a1 + 196) = 0;
      *(void *)(a1 + 188) = 0;
      *(_DWORD *)(a1 + 204) = 0;
      *(void *)(a1 + 208) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
      *(void *)(a1 + 220) = 0;
      *(void *)(a1 + 236) = 0;
      *(void *)(a1 + 228) = 0;
      *(unsigned char *)(a1 + 244) = 0;
    }
    *(unsigned char *)(a1 + 66) = a2;
  }
  return result;
}

uint64_t sub_10099952C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t sub_100999554(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t sub_100999580(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022D6648);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "getting GPS notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMonitorGps::initHarvesting()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), 13);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), 47);
}

BOOL sub_100999798(uint64_t a1)
{
  return *(unsigned char *)(a1 + 65) || *(unsigned char *)(a1 + 68) != 0;
}

uint64_t sub_1009997B8(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 68) != a2)
  {
    uint64_t v2 = result;
    *(unsigned char *)(result + 68) = a2;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    id v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v4 = *(unsigned __int8 *)(v2 + 68);
      v5[0] = 68289283;
      v5[1] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 1025;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"vehicular speed achieved\", \"vehicularSpeedAchieved\":%{private}hhd}", (uint8_t *)v5, 0x18u);
    }
    return (*(uint64_t (**)(void))(**(void **)(v2 + 32) + 40))(*(void *)(v2 + 32));
  }
  return result;
}

void sub_1009998DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000EF97C((uint64_t)v47, a4);
  *(unsigned char *)(a1 + 248) = 1;
  if (!v54) {
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 248) = 0;
  if (a3 == 47)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    uint64_t v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Server side location can be harvested", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022D6648);
      }
      LOWORD(v62) = 0;
      long long v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
LABEL_8:
    if (sub_1000E6DB4((uint64_t)v47))
    {
      if (a3 == 13)
      {
        *(unsigned char *)(a1 + 67) = v57;
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        __int16 v8 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
        {
          if (*(unsigned char *)(a1 + 67)) {
            int v9 = "enabled";
          }
          else {
            int v9 = "disabled";
          }
          *(float *)long long buf = 4.8149e-34;
          *(void *)int v67 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Got GPS location simulation %s notification", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022D6648);
          }
          if (*(unsigned char *)(a1 + 67)) {
            long long v37 = "enabled";
          }
          else {
            long long v37 = "disabled";
          }
          int v62 = 136315138;
          *(void *)id v63 = v37;
          long long v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        (*(void (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
        goto LABEL_41;
      }
      int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160))(*(void *)(a1 + 32));
      v14.n128_u64[0] = *(void *)&v47[20];
      if (*(double *)&v47[20] >= 0.0) {
        int v15 = v13;
      }
      else {
        int v15 = 0;
      }
      if (v15 != 1) {
        goto LABEL_41;
      }
      double v16 = (*(double (**)(void, __n128))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32), v14);
      if (v16 - *(double *)&v48[12] > 5.0) {
        goto LABEL_41;
      }
      if (*(_DWORD *)&v51[4] != 1 && *(_DWORD *)&v51[8] != 1)
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        uint64_t v17 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
        {
          *(float *)long long buf = 1.7163e-36;
          *(_DWORD *)int v67 = 0;
          *(_WORD *)&v67[4] = 2082;
          *(void *)&v67[6] = "";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"We have no WGS84, anywhere! Only Chinese Stark\"}", buf, 0x12u);
        }
        goto LABEL_41;
      }
      double v18 = *(double *)&v47[28];
      if (v52 == 2)
      {
        *(float *)long long buf = 0.0;
        if (sub_10014933C((float *)buf, *(double *)&v47[4], *(double *)&v47[12])) {
          double v18 = v18 + v53 - *(float *)buf;
        }
      }
      *(double *)&v47[28] = v18;
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022D6648);
      }
      char v19 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(float *)long long buf = 1.7164e-36;
        *(_DWORD *)int v67 = 0;
        *(_WORD *)&v67[4] = 2082;
        *(void *)&v67[6] = "";
        *(_WORD *)&v67[14] = 1040;
        *(_DWORD *)&v67[16] = 156;
        *(_WORD *)&v67[20] = 2097;
        *(void *)&v67[22] = v47;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onGps\", \"location\":%{private, location:CLDaemonLocation}.*P}", buf, 0x22u);
      }
      if (a3 <= 0x2F && ((1 << a3) & 0x800000000011) != 0)
      {
        v20.n128_u64[0] = *(void *)&v48[12];
        if (*(double *)&v48[12] - *(double *)(a1 + 168) > 180.0)
        {
          if (*(double *)&v48[12] - *(double *)(a1 + 80) > 180.0)
          {
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_1022D6648);
            }
            id v21 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
            {
              double v22 = *(double *)&v48[12] - *(double *)(a1 + 80);
              int v23 = *(_DWORD *)(a1 + 72);
              *(float *)long long buf = 3.8521e-34;
              *(double *)int v67 = v22;
              *(_WORD *)&v67[8] = 1024;
              *(_DWORD *)&v67[10] = v23;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GPS dropped out for %.3fs while warming - resetting count (from %d)", buf, 0x12u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419560 != -1) {
                dispatch_once(&qword_102419560, &stru_1022D6648);
              }
              double v39 = *(double *)&v48[12] - *(double *)(a1 + 80);
              int v40 = *(_DWORD *)(a1 + 72);
              int v62 = 134218240;
              *(double *)id v63 = v39;
              *(_WORD *)&v63[8] = 1024;
              *(_DWORD *)&v63[10] = v40;
              int v41 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v41);
              if (v41 != (char *)buf) {
                free(v41);
              }
            }
            *(_DWORD *)(a1 + 72) = 0;
            (*(void (**)(uint64_t, void))(*(void *)a1 + 112))(a1, 0);
            v20.n128_u64[0] = *(void *)&v48[12];
          }
          *(void *)(a1 + 80) = v20.n128_u64[0];
          ++*(_DWORD *)(a1 + 72);
        }
        if (*(double *)(a1 + 96) == *(double *)&v47[4]
          && *(double *)(a1 + 104) == *(double *)&v47[12]
          && ((double v24 = *(double *)(a1 + 112), v24 <= 50.0) || v24 <= *(double *)&v47[20]))
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022D6648);
          }
          long long v31 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = *(void *)(a1 + 96);
            uint64_t v33 = *(void *)(a1 + 104);
            uint64_t v34 = *(void *)(a1 + 112);
            int v35 = *(_DWORD *)(a1 + 88);
            *(float *)long long buf = 3.8523e-34;
            *(void *)int v67 = v32;
            *(_WORD *)&v67[8] = 2048;
            *(void *)&v67[10] = v33;
            *(_WORD *)&v67[18] = 2048;
            *(void *)&v67[20] = v34;
            *(_WORD *)&v67[28] = 1024;
            int v68 = v35;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "location is clamped at <%+.8f,%+.8f> acc %.2f - count %d", buf, 0x26u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_1022D6648);
            }
            uint64_t v42 = *(void *)(a1 + 96);
            uint64_t v43 = *(void *)(a1 + 104);
            uint64_t v44 = *(void *)(a1 + 112);
            int v45 = *(_DWORD *)(a1 + 88);
            int v62 = 134218752;
            *(void *)id v63 = v42;
            *(_WORD *)&v63[8] = 2048;
            *(void *)&v63[10] = v43;
            *(_WORD *)&v63[18] = 2048;
            *(void *)&v63[20] = v44;
            __int16 v64 = 1024;
            int v65 = v45;
            __int16 v46 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v46);
            if (v46 != (char *)buf) {
              free(v46);
            }
          }
          ++*(_DWORD *)(a1 + 88);
        }
        else
        {
          *(_DWORD *)(a1 + 88) = 0;
        }
        v20.n128_u64[0] = *(void *)&v47[44];
        (*(void (**)(uint64_t, BOOL, __n128))(*(void *)a1 + 112))(a1, *(double *)&v47[44] >= 6.7, v20);
        (*(void (**)(void, unsigned char *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v47);
        if ((*(uint64_t (**)(void, unsigned char *))(**(void **)(a1 + 32) + 184))(*(void *)(a1 + 32), v47))
        {
          long long v25 = *(_OWORD *)&v48[16];
          *(_OWORD *)(a1 + 156) = *(_OWORD *)v48;
          *(_OWORD *)(a1 + 172) = v25;
          long long v26 = *(_OWORD *)&v47[48];
          *(_OWORD *)(a1 + 124) = *(_OWORD *)&v47[32];
          *(_OWORD *)(a1 + 140) = v26;
          *(_OWORD *)(a1 + 232) = *(_OWORD *)&v51[12];
          long long v27 = *(_OWORD *)v51;
          long long v28 = v49;
          *(_OWORD *)(a1 + 204) = v50;
          *(_OWORD *)(a1 + 220) = v27;
          *(_OWORD *)(a1 + 188) = v28;
          long long v29 = *(_OWORD *)&v47[16];
          *(_OWORD *)(a1 + 92) = *(_OWORD *)v47;
          *(_OWORD *)(a1 + 108) = v29;
          (*(void (**)(void, uint64_t, uint64_t, unsigned char *))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), a2, a3, v47);
          goto LABEL_41;
        }
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        uint64_t v30 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "on gps notification. Pos harvesting not eligible", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419560 == -1) {
            goto LABEL_33;
          }
          goto LABEL_113;
        }
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022D6648);
      }
      uint64_t v10 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        *(float *)long long buf = 1.5283e-36;
        *(_DWORD *)int v67 = v49;
        *(_WORD *)&v67[4] = 2049;
        *(void *)&v67[6] = *(void *)&v47[4];
        *(_WORD *)&v67[14] = 2049;
        *(void *)&v67[16] = *(void *)&v47[12];
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning,invalid,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022D6648);
        }
        int v62 = 67240705;
        *(_DWORD *)id v63 = v49;
        *(_WORD *)&v63[4] = 2049;
        *(void *)&v63[6] = *(void *)&v47[4];
        *(_WORD *)&v63[14] = 2049;
        *(void *)&v63[16] = *(void *)&v47[12];
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
        goto LABEL_34;
      }
    }
    goto LABEL_41;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022D6648);
  }
  uint64_t v12 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Location is from test equipment, do not harvest", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 == -1)
    {
LABEL_33:
      LOWORD(v62) = 0;
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMonitorGps::onGpsNotification(int, const CLLocationProvider_Type::Notification, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
LABEL_34:
      if (v11 != (char *)buf) {
        free(v11);
      }
      goto LABEL_41;
    }
LABEL_113:
    dispatch_once(&qword_102419560, &stru_1022D6648);
    goto LABEL_33;
  }
LABEL_41:

  if (v60) {
    sub_1000DB0A0(v60);
  }
  if (v59 < 0) {
    operator delete(__p);
  }
  if (v56) {
    sub_1000DB0A0(v56);
  }
  if (v55) {
    sub_1000DB0A0(v55);
  }
}

void sub_10099A788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10099A7D8(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022D6648);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 248);
    *(_DWORD *)long long buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Client side harvesting eligibility,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMonitorGps::isGpsForClientHarvestingEligible() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return *(unsigned __int8 *)(a1 + 248);
}

id sub_10099A990(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(a1 + 256) = result;
  return result;
}

id sub_10099A9C4(uint64_t a1)
{
  id v1 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLAccessoryLocationProvider"];

  return _[v1 syncgetConnectedAccessory];
}

void *sub_10099A9FC(void *a1)
{
  *a1 = off_1022D65A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_10099AA60(void *a1)
{
  *a1 = off_1022D65A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    sub_1000DB0A0(v4);
  }

  operator delete();
}

void sub_10099AAE4(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10099AB14()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10099AB94()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10099AC24(_Unwind_Exception *a1)
{
}

uint64_t sub_10099AD90(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v15 = 0;
        }
        *(void *)(a1 + 8) = v15;
        continue;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        break;
      case 3u:
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v24 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v24 = 0;
        }
        uint64_t v26 = 16;
        goto LABEL_46;
      case 4u:
        unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v24 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v24 = 0;
        }
        uint64_t v26 = 20;
LABEL_46:
        *(_DWORD *)(a1 + v26) = v24;
        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v21 = v20 + 1;
      if (v20 == -1 || v21 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0) {
        goto LABEL_37;
      }
      v17 += 7;
      BOOL v10 = v18++ >= 9;
      if (v10)
      {
        LODWORD(v19) = 0;
        goto LABEL_39;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_37:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v19) = 0;
    }
LABEL_39:
    *(_DWORD *)(a1 + 24) = v19;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10099B4DC(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v9 = _Q0;
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  sub_101171D90(a1 + 160);
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0x10000000000000;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = v9;
  *(void *)(a1 + 240) = 0xBFF0000000000000;
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)(a1 + 248) = v7;
  *(_OWORD *)(a1 + 264) = v7;
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 36) = v9;
  *(_OWORD *)(a1 + 52) = v9;
  *(_OWORD *)(a1 + 68) = v9;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  return a1;
}

void sub_10099B5F4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 9)
  {
    if (*a3) {
      return;
    }
    long long v6 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = *(_OWORD *)(a4 + 32);
    long long v8 = *(_OWORD *)(a4 + 48);
    long long v9 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = v8;
    long long v10 = *(_OWORD *)(a4 + 96);
    long long v11 = *(_OWORD *)(a4 + 112);
    long long v12 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = v12;
    *(_OWORD *)(a1 + 96) = v10;
    uint64_t v13 = sub_10016BA10();
    *(_DWORD *)long long buf = 0;
    *(double *)(a1 + 76) = sub_10016BA54(v13, buf);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a4 + 772);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    unint64_t v14 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 4);
      uint64_t v16 = *(void *)(a1 + 12);
      uint64_t v17 = *(void *)(a1 + 20);
      uint64_t v18 = *(void *)(a1 + 76);
      int v19 = *(_DWORD *)(a1 + 156);
      uint64_t v20 = sub_10016BA10();
      double v21 = sub_10018202C(v20);
      *(_DWORD *)long long buf = 134284801;
      uint64_t v31 = v15;
      __int16 v32 = 2049;
      uint64_t v33 = v16;
      __int16 v34 = 2050;
      uint64_t v35 = v17;
      __int16 v36 = 2050;
      uint64_t v37 = v18;
      __int16 v38 = 1026;
      int v39 = v19;
      __int16 v40 = 2050;
      double v41 = v21;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#loiOverride received LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,timestamp,%{public}.3f,sourceAccuracy,%{public}d,propagation_us,%{public}.3f", buf, 0x3Au);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    uint64_t v22 = sub_10016BA10();
    sub_10018202C(v22);
    unint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLoiLocationOverride::feedLoiLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
    if (v23 == (char *)buf) {
      return;
    }
LABEL_21:
    free(v23);
    return;
  }
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_1022D6668);
  }
  long long v29 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is not valid anymore.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    unint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLoiLocationOverride::feedLoiLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      goto LABEL_21;
    }
  }
}

void sub_10099BA38(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 200) = a2;
  if (a2)
  {
    uint64_t v3 = sub_10016BA10();
    *(_DWORD *)long long buf = 0;
    *(double *)(a1 + 208) = sub_10016BA54(v3, buf);
  }
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_1022D6668);
  }
  char v4 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a1 + 200)) {
      unsigned int v5 = "YES";
    }
    else {
      unsigned int v5 = "NO";
    }
    uint64_t v6 = *(void *)(a1 + 208);
    uint64_t v7 = *(void *)(a1 + 76);
    uint64_t v8 = sub_10016BA10();
    double v9 = sub_10018202C(v8);
    *(_DWORD *)long long buf = 136446978;
    uint64_t v13 = v5;
    __int16 v14 = 2050;
    uint64_t v15 = v6;
    __int16 v16 = 2050;
    uint64_t v17 = v7;
    __int16 v18 = 2050;
    double v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#loiOverride update WiFi association state,isWiFiAssociated,%{public}s,last association time,%{public}.3f,LOI location timestamp,%{public}.3f,propagation_us,%{public}.3f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    uint64_t v10 = sub_10016BA10();
    sub_10018202C(v10);
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLoiLocationOverride::updateWiFiAssociationState(BOOL)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_10099BC9C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_1022D6668);
  }
  uint64_t v6 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 4);
    uint64_t v8 = *(void *)(a1 + 12);
    uint64_t v9 = *(void *)(a1 + 20);
    uint64_t v10 = sub_10003E9A4(*(_DWORD *)(a1 + 96));
    int v11 = *(_DWORD *)(a1 + 84);
    uint64_t v12 = *(void *)(a1 + 76);
    uint64_t v13 = *(void *)(a1 + 88);
    int v14 = *(_DWORD *)(a1 + 128);
    uint64_t v15 = *(void *)(a1 + 36);
    uint64_t v16 = *(void *)(a1 + 28);
    *(_DWORD *)long long buf = 134285827;
    uint64_t v48 = v7;
    __int16 v49 = 2049;
    uint64_t v50 = v8;
    __int16 v51 = 2050;
    uint64_t v52 = v9;
    __int16 v53 = 2082;
    char v54 = v10;
    __int16 v55 = 1026;
    int v56 = v11;
    __int16 v57 = 2050;
    uint64_t v58 = v12;
    __int16 v59 = 2050;
    uint64_t v60 = v13;
    __int16 v61 = 1026;
    int v62 = v14;
    __int16 v63 = 2050;
    uint64_t v64 = v15;
    __int16 v65 = 2049;
    uint64_t v66 = v16;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", buf, 0x5Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    sub_10003E9A4(*(_DWORD *)(a1 + 96));
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_1022D6668);
  }
  uint64_t v17 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a2 + 4);
    uint64_t v19 = *(void *)(a2 + 12);
    uint64_t v20 = *(void *)(a2 + 20);
    double v21 = sub_10003E9A4(*(_DWORD *)(a2 + 96));
    int v22 = *(_DWORD *)(a2 + 84);
    uint64_t v23 = *(void *)(a2 + 76);
    uint64_t v24 = *(void *)(a2 + 88);
    int v25 = *(_DWORD *)(a2 + 128);
    uint64_t v26 = *(void *)(a2 + 36);
    uint64_t v27 = *(void *)(a2 + 28);
    *(_DWORD *)long long buf = 134285827;
    uint64_t v48 = v18;
    __int16 v49 = 2049;
    uint64_t v50 = v19;
    __int16 v51 = 2050;
    uint64_t v52 = v20;
    __int16 v53 = 2082;
    char v54 = v21;
    __int16 v55 = 1026;
    int v56 = v22;
    __int16 v57 = 2050;
    uint64_t v58 = v23;
    __int16 v59 = 2050;
    uint64_t v60 = v24;
    __int16 v61 = 1026;
    int v62 = v25;
    __int16 v63 = 2050;
    uint64_t v64 = v26;
    __int16 v65 = 2049;
    uint64_t v66 = v27;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#loiOverride filtered location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", buf, 0x5Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    sub_10003E9A4(*(_DWORD *)(a2 + 96));
    int v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  *(_DWORD *)a3 = 0xFFFF;
  *(unsigned char *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 4);
  uint64_t v28 = *(void *)(a1 + 20);
  *(void *)(a3 + 20) = v28;
  *(_DWORD *)(a3 + 96) = 13;
  int v29 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a3 + 84) = v29;
  int v30 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  *(_DWORD *)(a3 + 128) = v30;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 44) = _Q0;
  *(_OWORD *)(a3 + 60) = _Q0;
  *(void *)(a3 + 116) = 0xBFF0000000000000;
  uint64_t v36 = *(void *)(a2 + 76);
  *(void *)(a3 + 76) = v36;
  uint64_t v37 = *(void *)(a2 + 88);
  *(void *)(a3 + 88) = v37;
  *(_DWORD *)(a3 + 140) = *(_DWORD *)(a2 + 140);
  *(_OWORD *)(a3 + 100) = *(_OWORD *)(a1 + 4);
  *(void *)(a3 + 132) = *(void *)(a2 + 132);
  uint64_t v38 = *(void *)(a2 + 36);
  *(void *)(a3 + 36) = v38;
  uint64_t v39 = *(void *)(a2 + 28);
  *(void *)(a3 + 28) = v39;
  *(void *)(a3 + 144) = *(void *)(a2 + 144);
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_1022D6668);
  }
  __int16 v40 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v41 = *(void *)(a3 + 4);
    uint64_t v42 = *(void *)(a3 + 12);
    uint64_t v43 = sub_10003E9A4(0xDu);
    *(_DWORD *)long long buf = 134285827;
    uint64_t v48 = v41;
    __int16 v49 = 2049;
    uint64_t v50 = v42;
    __int16 v51 = 2050;
    uint64_t v52 = v28;
    __int16 v53 = 2082;
    char v54 = v43;
    __int16 v55 = 1026;
    int v56 = v29;
    __int16 v57 = 2050;
    uint64_t v58 = v36;
    __int16 v59 = 2050;
    uint64_t v60 = v37;
    __int16 v61 = 1026;
    int v62 = v30;
    __int16 v63 = 2050;
    uint64_t v64 = v38;
    __int16 v65 = 2049;
    uint64_t v66 = v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#loiOverride Fused location,%{private}.8lf,%{private}.8lf,HorAcc,%{public}.1lf,Type,%{public}s,Confidence,%{public}d,Timestamp,%{public}.3f,Lifespan,%{public}.3f,integrity,%{public}d,verticalAcc,%{public}.1lf,altitude,%{private}.1lf", buf, 0x5Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    sub_10003E9A4(0xDu);
    __int16 v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const CLDaemonLocation CLLoiLocationOverride::fuseLocations(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
}

uint64_t sub_10099C474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = hypot(*(long double *)(a2 + 20), *(long double *)(a3 + 20));
  double v7 = sub_1000F1648((double *)(a1 + 160), *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a3 + 4), *(double *)(a3 + 12), 0.0);
  *(double *)(a1 + 240) = v7;
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_1022D6668);
  }
  uint64_t v8 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    double v18 = v6;
    __int16 v19 = 2050;
    double v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#loiOverride totalUncertainty,%{public}.8lf,distanceBetweenLocations,%{public}.8lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (v7 >= v6)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_1022D6668);
    }
    int v11 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is not sufficiently proximate, uncertainty bubbles don't touch.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_1022D6668);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 268) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 268) = 1;
    if (v7 <= 50.0)
    {
      *(_DWORD *)(a1 + 264) = 1;
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_1022D6668);
      }
      uint64_t v12 = qword_1024194D8;
      if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is sufficiently proximate.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194D0 != -1) {
          dispatch_once(&qword_1024194D0, &stru_1022D6668);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      return 1;
    }
    else
    {
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_1022D6668);
      }
      uint64_t v9 = qword_1024194D8;
      if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#loiOverride LOI location is not sufficiently proximate, does not meet distance threshold.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194D0 != -1) {
          dispatch_once(&qword_1024194D0, &stru_1022D6668);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::areLocationsSufficientlyProximate(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t result = 0;
      *(_DWORD *)(a1 + 264) = 0;
    }
  }
  return result;
}

__n128 sub_10099CA34(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 36) = result;
  *(__n128 *)(a1 + 52) = result;
  *(__n128 *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  return result;
}

void sub_10099CA90(id a1)
{
  qword_1024194D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LoiPosition");
}

void sub_10099CAC0(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_DWORD *)(a1 + 128) = 1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 192) = _Q1;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = _Q1;
  *(unsigned char *)(a1 + 232) = 0;
  long long v13 = _Q1;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(void *)(a1 + 328) = 0x100000005;
  *(void *)(a1 + 336) = 0;
  sub_100513074(a1 + 344, "CLGnssOdometer", 1, 1);
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(unsigned char *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 448) = 1;
  *(unsigned char *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 512) = v13;
  *(unsigned char *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0xBFF0000000000000;
  *(void *)(a1 + 544) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = v13;
  *(unsigned char *)(a1 + 576) = 0;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_DWORD *)(a1 + 640) = 1065353216;
  *(void *)(a1 + 648) = 0x100000005;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 712) = 0;
  *(unsigned char *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_WORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  *(unsigned char *)(a1 + 732) = 0;
  *(_DWORD *)(a1 + 736) = -1;
  *(void *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 752) = 0;
  *(void *)(a1 + 756) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  memset(&v14, 0, sizeof(v14));
  sub_1000C7F88(buf);
  BOOL v10 = sub_1004D1284(*(uint64_t *)buf, "GPSOdometryType", &v14);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (v10)
  {
    if (!std::string::compare(&v14, "SubSample")) {
      operator new();
    }
    if (!std::string::compare(&v14, "Smoother")) {
      goto LABEL_16;
    }
    if (!std::string::compare(&v14, "ModifiedSubsampler")) {
      goto LABEL_23;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "GPSODOM,Invalid type for GPSOdometryType", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0))
    {
      if (!a3) {
        goto LABEL_23;
      }
LABEL_16:
      operator new();
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssOdometer::CLGnssOdometer(id<CLIntersiloUniverse>, BOOL, RhythmicBatchedLocationCallback)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
    if (a3) {
      goto LABEL_16;
    }
  }
  else if (a3 && (sub_10073C750() & 1) != 0)
  {
    goto LABEL_16;
  }
LABEL_23:
  operator new();
}

void sub_10099DA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v36 = v31[97];
  v31[97] = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  sub_10071874C((uint64_t)(v31 + 76));
  sub_10051310C(v34);
  sub_10071874C((uint64_t)(v31 + 36));
  sub_10099FDCC(v33, 0);
  sub_10084FF58(v32, 0);
  uint64_t v37 = v31[1];
  v31[1] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = *v31;
  *uint64_t v31 = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(a1);
}

void sub_10099DC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10084F82C((uint64_t)v5, a3);
  sub_10099CAC0(a1, a2, 0);
}

void sub_10099DC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1007189B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10099DCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D66A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssOdometer::onRhythmicModeOfOperationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D66A8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssOdometer::onRhythmicModeOfOperationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10099E748(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10099DE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10099DE88(uint64_t a1, _DWORD *a2, void *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D66A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssOdometer::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D66A8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssOdometer::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10099EC24(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10099E044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10099E064(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D66A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssOdometer::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D66A8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssOdometer::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10099F554(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10099E220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10099E240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a1 + 344;
  (*(void (**)(void))(*(void *)(a1 + 344) + 16))();
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = (_OWORD *)(a1 + 40);
    uint64_t v8 = a1 + 360;
    char v9 = *(unsigned char *)(a1 + 670);
    if (v9) {
      char v9 = *(unsigned char *)(a1 + 669) == 0;
    }
    BOOL v10 = sub_1012EF710(v6, a2, a1 + 40, a3, (unint64_t *)(a1 + 768), *(unsigned __int8 *)(a1 + 664) != 0, a1 + 360, (int *)(a1 + 760), v9, a1 + 680);
    if (!v10) {
      uint64_t v8 = a2;
    }
    long long v11 = *(_OWORD *)v8;
    long long v12 = *(_OWORD *)(v8 + 16);
    long long v13 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a1 + 88) = v13;
    *uint64_t v7 = v11;
    *(_OWORD *)(a1 + 56) = v12;
    long long v14 = *(_OWORD *)(v8 + 64);
    long long v15 = *(_OWORD *)(v8 + 80);
    long long v16 = *(_OWORD *)(v8 + 112);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(a1 + 152) = v16;
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 120) = v15;
    long long v17 = *(_OWORD *)(v8 + 128);
    long long v18 = *(_OWORD *)(v8 + 144);
    long long v19 = *(_OWORD *)(v8 + 176);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 + 160);
    *(_OWORD *)(a1 + 216) = v19;
    *(_OWORD *)(a1 + 168) = v17;
    *(_OWORD *)(a1 + 184) = v18;
    long long v20 = *(_OWORD *)(v8 + 192);
    long long v21 = *(_OWORD *)(v8 + 208);
    long long v22 = *(_OWORD *)(v8 + 224);
    *(void *)(a1 + 280) = *(void *)(v8 + 240);
    *(_OWORD *)(a1 + 248) = v21;
    *(_OWORD *)(a1 + 264) = v22;
    *(_OWORD *)(a1 + 232) = v20;
    if (v7 != (_OWORD *)v8)
    {
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(v8 + 280);
      sub_10084EEAC((void *)(a1 + 288), *(uint64_t **)(v8 + 264), 0);
    }
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v8 + 288);
    if (!*(unsigned char *)(a1 + 665)) {
      goto LABEL_13;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    uint64_t v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = *(void *)(a1 + 48);
      __int16 v47 = 2082;
      uint64_t v48 = "";
      __int16 v49 = 2082;
      uint64_t v50 = "PerEpochData";
      uint64_t v26 = *(void *)(a1 + 112);
      uint64_t v27 = *(void *)(a1 + 120);
      uint64_t v52 = v24;
      uint64_t v54 = v25;
      uint64_t v29 = *(void *)(a1 + 136);
      uint64_t v28 = *(void *)(a1 + 144);
      uint64_t v68 = v26;
      uint64_t v70 = v27;
      uint64_t v30 = *(void *)(a1 + 152);
      uint64_t v31 = *(void *)(a1 + 160);
      uint64_t v72 = v29;
      uint64_t v32 = *(void *)(a1 + 168);
      uint64_t v76 = v30;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 184);
      uint64_t v78 = v31;
      uint64_t v80 = v32;
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v34 = *(void *)(a1 + 200);
      int v84 = v30;
      uint64_t v86 = v33;
      uint64_t v35 = *(void *)(a1 + 216);
      uint64_t v36 = *(void *)(a1 + 224);
      uint64_t v88 = v34;
      LODWORD(v34) = *(_DWORD *)(a1 + 328);
      uint64_t v92 = v35;
      int v96 = v34;
      uint64_t v37 = *(void *)(a2 + 232);
      uint64_t v100 = *(void *)(a2 + 224);
      uint64_t v38 = *(void *)(a1 + 64);
      uint64_t v56 = *(void *)(a1 + 56);
      uint64_t v39 = *(void *)(a1 + 72);
      uint64_t v58 = v38;
      LODWORD(v38) = *(unsigned __int8 *)(a1 + 88);
      uint64_t v60 = v39;
      uint64_t v40 = *(void *)(a2 + 240);
      int v62 = v38;
      uint64_t v104 = v40;
      uint64_t v41 = *(void *)(a1 + 104);
      uint64_t v64 = *(void *)(a1 + 96);
      uint64_t v66 = v41;
      __int16 v63 = 2049;
      __int16 v65 = 2049;
      __int16 v67 = 2049;
      uint64_t v74 = v28;
      int v82 = *(_DWORD *)(a1 + 180);
      int v90 = *(unsigned __int8 *)(a1 + 208);
      uint64_t v94 = v36;
      BOOL v98 = v10;
      uint64_t v102 = v37;
      __int16 v51 = 2050;
      __int16 v53 = 2050;
      __int16 v55 = 2050;
      __int16 v57 = 2050;
      __int16 v59 = 2050;
      __int16 v69 = 2050;
      __int16 v71 = 2050;
      __int16 v73 = 2050;
      __int16 v75 = 2050;
      __int16 v77 = 2050;
      __int16 v79 = 2050;
      __int16 v85 = 2050;
      __int16 v87 = 2050;
      __int16 v91 = 2050;
      __int16 v93 = 2050;
      __int16 v99 = 2050;
      __int16 v101 = 2050;
      __int16 v103 = 2050;
      __int16 v61 = 1026;
      __int16 v81 = 1026;
      __int16 v83 = 1026;
      __int16 v89 = 1026;
      __int16 v95 = 1026;
      __int16 v97 = 1026;
      __int16 v105 = 1026;
      int v106 = *(unsigned __int8 *)(a2 + 216);
      *(_DWORD *)long long buf = 68296451;
      int v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GPSODOM\", \"event\":%{public, location:escape_only}s, \"gpsNs\":%{public}lld, \"cfTime\":\"%{public}f\", \"cfTimeGps\":\"%{public}f\", \"machTime\":\"%{public}f\", \"machContinuousTime\":\"%{public}f\", \"posValid\":%{public}hhd, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"altitude\":\"%{private}f\", \"undulation\":\"%{public}f\", \"hunc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"semiMaj\":\"%{public}f\", \"semiMin\":\"%{public}f\", \"semiMajAz\":\"%{public}f\", \"reliability\":%{public}d, \"speedValid\":%{public}hhd, \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\", \"courseValid\":%{public}hhd, \"course\":\"%{public}f\", \"courseUnc\":\"%{public}f\", \"gnssContent\":%{public}d, \"ravenPosUsed\":%{public}hhd, \"odometry\":\"%{public}f\", \"deltaDist\":\"%{public}f\", \"deltaDistUnc\":\"%{public}f\", \"odometryValid\":%{public}hhd}", buf, 0x118u);
      *(unsigned char *)(a1 + 664) = 0;
    }
    else
    {
LABEL_13:
      *(unsigned char *)(a1 + 664) = 0;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    uint64_t v42 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "GPSODOM,no odometer interface object", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D6688);
      }
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssOdometer::updateOdometer(GNSS::PerEpochData &, const CLMotionActivity &)", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
}

void sub_10099E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10099E748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 666) = *(unsigned char *)(a1 + 669);
  *(_WORD *)(a1 + 667) = *(_WORD *)(a1 + 670);
  int v5 = *(_DWORD *)(a4 + 1448);
  int v6 = *(unsigned __int8 *)(a4 + 1452);
  int v7 = *(_DWORD *)(a4 + 1456);
  uint64_t v8 = *(void *)(a4 + 1464);
  int v9 = *(unsigned __int8 *)(a4 + 1472);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D6688);
  }
  BOOL v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67241472;
    int v28 = v5;
    __int16 v29 = 1026;
    int v30 = v7;
    __int16 v31 = 1026;
    int v32 = v8 & 1;
    __int16 v33 = 1026;
    unsigned int v34 = (v8 >> 1) & 1;
    __int16 v35 = 1026;
    int v36 = v6;
    __int16 v37 = 1026;
    int v38 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "GPSODOM,onRhythmicModeOfOperationNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  *(unsigned char *)(a1 + 669) = v8 & 1;
  if (v5 == 1)
  {
    if (v9) {
      BOOL v11 = v7 == 1;
    }
    else {
      BOOL v11 = 0;
    }
    char v12 = v11;
    *(unsigned char *)(a1 + 670) = v12;
  }
  if ((v8 & 2) != 0) {
    LOBYTE(v13) = 0;
  }
  else {
    int v13 = (*(unsigned __int8 *)(a1 + 744) >> 1) & 1;
  }
  *(unsigned char *)(a1 + 671) = v13;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D6688);
  }
  long long v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(unsigned __int8 *)(a1 + 666);
    int v16 = *(unsigned __int8 *)(a1 + 669);
    int v17 = *(unsigned __int8 *)(a1 + 667);
    unsigned int v18 = *(unsigned __int8 *)(a1 + 670);
    int v19 = *(unsigned __int8 *)(a1 + 668);
    int v20 = *(unsigned __int8 *)(a1 + 671);
    int v21 = *(unsigned __int8 *)(a1 + 672);
    int v22 = *(unsigned __int8 *)(a1 + 673);
    *(_DWORD *)long long buf = 67241984;
    int v28 = v15;
    __int16 v29 = 1026;
    int v30 = v16;
    __int16 v31 = 1026;
    int v32 = v17;
    __int16 v33 = 1026;
    unsigned int v34 = v18;
    __int16 v35 = 1026;
    int v36 = v19;
    __int16 v37 = 1026;
    int v38 = v20;
    __int16 v39 = 1026;
    int v40 = v21;
    __int16 v41 = 1026;
    int v42 = v22;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "GPSODOM,1Hz before,%{public}d,after,%{public}d,Rhythmic before,%{public}d,after,%{public}d,RhythmicFixQualified before,%{public}d,after,%{public}d,LowPowerMode,%{public}d,InAWalkOrRunWorkout,%{public}d", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  uint64_t v23 = *(void *)(a1 + 32);
  if (v23) {
    sub_1012F0A50(v23, *(unsigned __int8 *)(a1 + 669), *(unsigned __int8 *)(a1 + 666), *(unsigned __int8 *)(a1 + 670), *(unsigned __int8 *)(a1 + 667), *(unsigned __int8 *)(a1 + 671), *(unsigned __int8 *)(a1 + 668), *(unsigned __int8 *)(a1 + 672), *(unsigned char *)(a1 + 673));
  }
  *(void *)(a1 + 744) = v8;
  *(_DWORD *)(a1 + 736) = v7;
  *(unsigned char *)(a1 + 732) = v6;
  *(unsigned char *)(a1 + 752) = v9;
  char v24 = *(unsigned char *)(a1 + 670);
  if (v24)
  {
    char v24 = *(unsigned char *)(a1 + 672);
    if (v24) {
      char v24 = *(unsigned char *)(a1 + 673) != 0;
    }
  }
  *(unsigned char *)(a1 + 670) = v24;
}

void sub_10099EC24(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  if (*a3 == 4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *a4;
      uint64_t v8 = a4[1];
      uint64_t v9 = a4[2];
      *(_DWORD *)long long buf = 134349569;
      uint64_t v14 = v7;
      __int16 v15 = 2049;
      uint64_t v16 = v8;
      __int16 v17 = 2049;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GPSODOM,PATHSTR,timeStamp,%{public}.3lf,straightnessMetric,%{private}.3lf,confidence,%{private}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D6688);
      }
      char v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::onStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v10 = *(unsigned __int8 *)(a1 + 712);
    long long v11 = *((_OWORD *)a4 + 1);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 696) = v11;
    if (!v10) {
      *(unsigned char *)(a1 + 712) = 1;
    }
  }
}

void *sub_10099EE34(void *result)
{
  if (!*((unsigned char *)result + 720))
  {
    id v1 = result;
    if (result[1])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D6688);
      }
      uint64_t v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,registering path straightness metric", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D6688);
        }
        uint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::registerPathStraightnessNotifications()", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
      __n128 result = [*(id *)(v1[1] + 16) register:*(void *)(v1[1] + 8) forNotification:4 registrationInfo:0];
      *((unsigned char *)v1 + 720) = 1;
    }
  }
  return result;
}

void *sub_10099EFF4(void *result)
{
  if (*((unsigned char *)result + 720))
  {
    id v1 = result;
    if (result[1])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D6688);
      }
      uint64_t v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,unregistering path straightness metric", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022D6688);
        }
        uint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::unregisterPathStraightnessNotifications()", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
      __n128 result = [*(id *)(v1[1] + 16) unregister:*(void *)(v1[1] + 8) forNotification:4];
      *((unsigned char *)v1 + 720) = 0;
    }
  }
  return result;
}

void sub_10099F1AC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D6688);
  }
  CFStringRef v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "GPSODOM,instantiating fAssistanceMotion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    id v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::handleAssistanceMotion(GNSS::Context)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10099F334(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 == 15)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (v3 == 13)
  {
    uint64_t v4 = *(void *)(a2 + 112);
LABEL_6:
    *(void *)(a1 + 768) = v4;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D6688);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 768);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GPSODOM,CMWorkoutType %ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::handleCMWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v7 = *(void *)(a1 + 768);
  unsigned __int8 v9 = v7 == 15 || v7 == 17;
  *(unsigned char *)(a1 + 673) = v9;
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    sub_1012F0A50(v10, *(unsigned __int8 *)(a1 + 669), *(unsigned __int8 *)(a1 + 666), *(unsigned __int8 *)(a1 + 670), *(unsigned __int8 *)(a1 + 667), *(unsigned __int8 *)(a1 + 671), *(unsigned __int8 *)(a1 + 668), *(unsigned __int8 *)(a1 + 672), v9);
  }
}

void sub_10099F554(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  if (*a3 == 15)
  {
    *(unsigned char *)(a1 + 672) = *a4;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 672);
      *(_DWORD *)long long buf = 67109120;
      int v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GPSODOM,Low Power Mode = %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D6688);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      sub_1012F0A50(v7, *(unsigned __int8 *)(a1 + 669), *(unsigned __int8 *)(a1 + 666), *(unsigned __int8 *)(a1 + 670), *(unsigned __int8 *)(a1 + 667), *(unsigned __int8 *)(a1 + 671), *(unsigned __int8 *)(a1 + 668), *(unsigned __int8 *)(a1 + 672), *(unsigned char *)(a1 + 673));
    }
  }
}

uint64_t sub_10099F74C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return sub_1012F12EC(result, a2);
  }
  return result;
}

uint64_t sub_10099F75C(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 184);
  *(void *)&long long v11 = (unint64_t)(v3 * 1000000000.0);
  *((void *)&v11 + 1) = *(void *)(a2 + 76);
  long long v12 = *(unint64_t *)&v3;
  v13[0] = 1;
  *(_OWORD *)&unsigned char v13[8] = *(_OWORD *)(a2 + 4);
  *(double *)&v13[24] = *(double *)(a2 + 28) + *(float *)(a2 + 476);
  *(double *)&long long v14 = *(float *)(a2 + 476);
  DWORD2(v14) = *(_DWORD *)(a2 + 472);
  *(void *)&long long v15 = *(void *)(a2 + 20);
  *((void *)&v15 + 1) = *(void *)(a2 + 36);
  float64x2_t v16 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 200));
  *(double *)&unint64_t v17 = *(float *)(a2 + 208);
  v18[0] = 1;
  *(_OWORD *)&v18[8] = *(_OWORD *)(a2 + 44);
  v18[24] = 1;
  long long v19 = *(_OWORD *)(a2 + 60);
  v20[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v20[8] = _Q0;
  v20[24] = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  int v23 = 1065353216;
  long long v24 = 0x100000005uLL;
  uint64_t v9 = a1 + 360;
  *(_OWORD *)(a1 + 552) = *(_OWORD *)v20;
  *(_OWORD *)(a1 + 568) = *(_OWORD *)&v20[16];
  *(_OWORD *)(a1 + 520) = *(_OWORD *)&v18[16];
  *(_OWORD *)(a1 + 536) = v19;
  *(_OWORD *)(a1 + 488) = v17;
  *(_OWORD *)(a1 + 504) = *(_OWORD *)v18;
  *(_OWORD *)(a1 + 360) = v11;
  *(_OWORD *)(a1 + 376) = v12;
  *(_OWORD *)(a1 + 392) = 0uLL;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)&v13[16];
  *(_OWORD *)(a1 + 440) = v14;
  *(_OWORD *)(a1 + 456) = v15;
  *(float64x2_t *)(a1 + 472) = v16;
  *(void *)(a1 + 600) = *(void *)&v21[0];
  *(_OWORD *)(a1 + 584) = 0u;
  sub_10084E2F4(a1 + 608, (uint64_t *)v21 + 1);
  *(_OWORD *)(v9 + 288) = v24;
  uint64_t result = sub_10071874C((uint64_t)v21 + 8);
  *(unsigned char *)(a1 + 664) = 1;
  return result;
}

uint64_t *sub_10099F8D4(uint64_t *a1)
{
  if (*a1) {
    [*(id *)(*a1 + 16) unregister:*(void *)(*a1 + 8) forNotification:41];
  }
  uint64_t v2 = a1[97];
  if (v2
    && ([*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:15],
        uint64_t v3 = a1[97],
        a1[97] = 0,
        v3))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    uint64_t v4 = a1[97];
    a1[97] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    a1[97] = 0;
  }
  sub_10071874C((uint64_t)(a1 + 76));
  sub_10051310C(a1 + 43);
  sub_10071874C((uint64_t)(a1 + 36));
  sub_10099FDCC(a1 + 4, 0);
  sub_10084FF58(a1 + 2, 0);
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_10099FA20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    sub_1012F12FC(v2, a2);
  }
}

void sub_10099FA30(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D6688);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM,Set signal environment,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::setSignalEnvironment(CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(_DWORD *)(a1 + 760) = a2;
}

void sub_10099FBE4()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D6688);
  }
  CFStringRef v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "GPSODOM,rhythmicGnssRegisteredClientStateChanged", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
    id v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssOdometer::rhythmicGnssRegisteredClientStateChanged(const BOOL, const CLRhythmicGnssWakeMode, const uint32_t)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10099FD6C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10099FD9C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10099FDCC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10099FE1C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10099FE1C(uint64_t a1)
{
  sub_10071874C(a1 + 568);
  sub_1007189B8((void *)(a1 + 280));
  sub_1000F5BB0(a1 + 240, *(void **)(a1 + 248));
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 200) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    sub_10099FEC4(a1 + 32, v4);
  }
  sub_10099FF44((uint64_t *)(a1 + 24), 0);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    sub_10099FF94(a1 + 16, v5);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6) {
    sub_10099FFF0(a1 + 8, v6);
  }
  return a1;
}

void sub_10099FEC4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1006A9CC0((void *)(a2 + 1648));
    *(void *)a2 = off_1022CAE80;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    operator delete();
  }
}

uint64_t sub_10099FF44(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10190CA10();
    operator delete();
  }
  return result;
}

void sub_10099FF94(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 104);
    if (v2)
    {
      *(void *)(a2 + 112) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_10099FFF0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 104);
    if (v2)
    {
      *(void *)(a2 + 112) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_1009A0050()
{
}

void *sub_1009A0064(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022D66D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1009A00AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D66D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1009A00DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1009A011C()
{
}

void sub_1009A012C()
{
}

void *sub_1009A0140(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022D6758;
  result[1] = v3;
  return result;
}

uint64_t sub_1009A0188(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022D6758;
  a2[1] = v2;
  return result;
}

void sub_1009A01B4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1009A01BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1009A01FC()
{
}

void sub_1009A0208()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D54EA0;
      v0[3] = unk_101D54EB0;
      v0[4] = xmmword_101D54EC0;
      v0[0] = xmmword_101D54E80;
      v0[1] = unk_101D54E90;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1009A02E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1009A0300()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F1D0, (void *)&_mh_execute_header);
}

unint64_t sub_1009A0354(uint64_t a1, void *a2, unsigned int a3)
{
  int v23 = 0;
  long long v24 = 0;
  uint64_t v25 = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v22 = 0.0;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000A699C(*(uint64_t *)buf, "ElevationGradeRecordId", &v22);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v22 <= 0.0)
  {
    uint64_t v11 = sub_1000A6958();
    sub_1000A699C(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", &v22);
  }
  else
  {
    uint64_t v8 = sub_1000A6958();
    sub_10016332C(v8, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", &v22);
    uint64_t v9 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v9 + 944))(v9);
    uint64_t v10 = sub_1000D3E78();
    sub_10006B564(v10, buf);
    sub_1004CF7DC(*(uint64_t *)buf, "ElevationGradeRecordId", 0xFFFFFFFFLL);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (sub_100EEAB74(a1, a3 / 0x18uLL, &v23) != 100)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D67C8);
    }
    long long v12 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v22;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(CFAbsoluteTime *)&buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLElevationGradeCompanionSyncManager: Failed to fetch database results for time range, startTime: %f, endTime: %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D67C8);
      }
      int v26 = 134218240;
      double v27 = v22;
      __int16 v28 = 2048;
      CFAbsoluteTime v29 = Current;
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "size_t CLElevationGradeCompanionSyncManager::queryLatestRecords(NSMutableDictionary *, uint32_t)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
  }
  *(void *)(a1 + 360) = 0xBFF0000000000000;
  uint64_t v13 = v23;
  if (v23 == v24)
  {
    long long v19 = v23;
    if (!v23) {
      return 0xAAAAAAAAAAAAAAABLL * ((v13 - v19) >> 3);
    }
    goto LABEL_17;
  }
  *(void *)(a1 + 360) = *((void *)v24 - 2);
  id v14 = +[NSMutableArray array];
  long long v15 = v23;
  for (uint64_t i = v24; v15 != i; v15 += 24)
  {
    long long v17 = *(_OWORD *)v15;
    *(void *)&uint8_t buf[16] = *((void *)v15 + 2);
    *(_OWORD *)long long buf = v17;
    uint64_t v18 = [[CLElevationGradeData alloc] initWithElevationGradeEntry:buf];
    [v14 addObject:v18];
  }
  [a2 setObject:v14 forKey:@"ElevationGradeKey"];
  long long v19 = v23;
  uint64_t v13 = v24;
  if (v23)
  {
LABEL_17:
    long long v24 = v19;
    operator delete(v19);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v13 - v19) >> 3);
}

void sub_1009A0704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A0750(uint64_t result)
{
  if (*(double *)(result + 360) > 0.0)
  {
    uint64_t v1 = result;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D67C8);
    }
    uint64_t v2 = (uint64_t *)(v1 + 360);
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *v2;
      *(_DWORD *)long long buf = 134217984;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D67C8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationGradeCompanionSyncManager::saveCurrentSyncProgress()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    uint64_t v5 = sub_1000A6958();
    sub_10016332C(v5, "CMHealthColdStorageWatchServiceLastSyncTimestampElevationGrade", v2);
    uint64_t v6 = *(void *)sub_1000A6958();
    return (*(uint64_t (**)(void))(v6 + 944))();
  }
  return result;
}

void sub_1009A0964(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1009A0994(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  *uint64_t v5 = off_1022D67F8;
  v5[8] = 0;
  v5[9] = 0;
  v5[7] = 0;
  sub_1012A0598();
}

void sub_1009A0A90(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_1009A0AE4(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6880);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetrySubscription::onNatalimetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6880);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetrySubscription::onNatalimetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1009A2CF8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1009A0CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A0CC4(uint64_t a1)
{
  *(void *)a1 = off_1022D67F8;

  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    sub_1000DB0A0(v4);
  }

  return sub_100029A7C(a1);
}

void sub_1009A0D90(uint64_t a1)
{
  sub_1009A0CC4(a1);

  operator delete();
}

void *sub_1009A0DC8@<X0>(uint64_t a1@<X8>)
{
  v13[0] = off_1022D68F0;
  v13[1] = sub_1009A126C;
  v13[2] = 0;
  void v13[3] = v13;
  sub_100134750(v14, "kCLConnectionMessageNatalimetryUpdate");
  sub_1009A3CE8((uint64_t)&v15, (uint64_t)v13);
  uint64_t v10 = off_1022D69A0;
  v11[0] = sub_1009A1548;
  v11[1] = 0;
  long long v12 = &v10;
  sub_100134750(v16, "kCLConnectionMessageNatalimetryAvailable");
  sub_1009A3CE8((uint64_t)&v17, (uint64_t)&v10);
  v9[0] = off_1022D69A0;
  v9[1] = sub_1009A164C;
  unsigned char v9[2] = 0;
  _OWORD v9[3] = v9;
  sub_100134750(v18, "kCLConnectionMessageNatalimetryQuery");
  sub_1009A3CE8((uint64_t)&v19, (uint64_t)v9);
  v8[0] = off_1022D69A0;
  v8[1] = sub_1009A1DC8;
  void v8[2] = 0;
  v8[3] = v8;
  sub_100134750(v20, "kCLConnectionMessageNatalimetryGetUserProfile");
  sub_1009A3CE8((uint64_t)&v21, (uint64_t)v8);
  v7[0] = off_1022D69A0;
  v7[1] = sub_1009A209C;
  long long v7[2] = 0;
  v7[3] = v7;
  sub_100134750(v22, "kCLConnectionMessageNatalimetrySetUserProfile");
  sub_1009A3CE8((uint64_t)&v23, (uint64_t)v7);
  v6[0] = off_1022D69A0;
  v6[1] = sub_1009A2364;
  v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v24, "kCLConnectionMessageNatalimetryCalibrationPromptsNeeded");
  sub_1009A3CE8((uint64_t)&v25, (uint64_t)v6);
  v5[0] = off_1022D69A0;
  v5[1] = sub_1009A264C;
  _DWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v26, "kCLConnectionMessageNatalimetryResetCalibration");
  sub_1009A3CE8((uint64_t)&v27, (uint64_t)v5);
  v4[0] = off_1022D69A0;
  v4[1] = sub_1009A28D0;
  void v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v28, "kCLConnectionMessageWorkoutMetsQuery");
  sub_1009A3CE8((uint64_t)&v29, (uint64_t)v4);
  sub_1009A4388(a1, (unsigned __int8 *)v14, 8);
  uint64_t v2 = 56;
  do
  {
    sub_1009A4170(&v13[v2]);
    if (SHIBYTE((&v12)[v2]) < 0) {
      operator delete((void *)v11[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_1009A4170(v4);
  sub_1009A4170(v5);
  sub_1009A4170(v6);
  sub_1009A4170(v7);
  sub_1009A4170(v8);
  sub_1009A4170(v9);
  sub_1009A4170(&v10);
  return sub_1009A4170(v13);
}

void sub_1009A1174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  for (uint64_t i = 392; i != -56; i -= 56)
    sub_1009A2CBC(v38 + i);
  sub_1009A4170(&a10);
  sub_1009A4170(&a14);
  sub_1009A4170(&a18);
  sub_1009A4170(&a22);
  sub_1009A4170(&a26);
  sub_1009A4170(&a30);
  sub_1009A4170(&a34);
  sub_1009A4170(&a38);
  _Unwind_Resume(a1);
}

void sub_1009A126C(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D68C0);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v20 = 2112;
    uint64_t v21 = v6;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calorie subscription changed, %d, %@, %p", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D68C0);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    v14[0] = 67109634;
    v14[1] = a2;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    __int16 v17 = 2048;
    uint64_t v18 = a1;
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleRequestNatalimetryUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  v14[0] = 0;
  if (sub_1009A3394(a1, v14))
  {
    sub_10009C834(a1);
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:0 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:0];
    }
  }
  else
  {
    uint64_t v12 = CMErrorMessage;
    int v13 = +[NSNumber numberWithUnsignedInt:v14[0]];
    *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    sub_1009A33F4(a1);
  }
}

void sub_1009A150C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1009A1548(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v4 = CMAvailable;
  if (sub_1009A3488(a1)) {
    uint64_t v3 = sub_101290CD0(*(void *)(a1 + 8));
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = +[NSNumber numberWithBool:v3];
  +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  CLConnectionMessage::sendReply();
}

void sub_1009A1624(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_1009A164C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v35 = 0;
  if (sub_1009A3394(a1, (int *)&v35))
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    uint64_t v6 = Dictionary;
    if (Dictionary
      && (uint64_t v7 = CMNatalimetryRecordId, [Dictionary objectForKeyedSubscript:CMNatalimetryRecordId]))
    {
      sub_1000E1294((uint64_t *)v34, (uint64_t)"CLDaemonClient.NatalimetryQuery", 0);
      long long __p = 0;
      int v32 = 0;
      uint64_t v33 = 0;
      unsigned int v42 = [[v6 objectForKeyedSubscript:v7] integerValue];
      uint64_t v8 = CMNatalimetryNatalieDataStartDate;
      if ([v6 objectForKeyedSubscript:CMNatalimetryNatalieDataStartDate]) {
        [objc_msgSend(v6, "objectForKeyedSubscript:", v8) doubleValue];
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v44 = v9;
      uint64_t v11 = CMNatalimetrySessionId;
      if ([v6 objectForKeyedSubscript:CMNatalimetrySessionId]) {
        unsigned int v12 = +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", [objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", v11), "integerValue") integerValue]);
      }
      else {
        unsigned int v12 = 2;
      }
      unsigned int v45 = v12;
      uint64_t v13 = CMNatalimetryNatalieDataMets;
      if ([v6 objectForKeyedSubscript:CMNatalimetryNatalieDataMets]) {
        [objc_msgSend(v6, "objectForKeyedSubscript:", v13) doubleValue];
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v46 = v14;
      uint64_t v15 = CMNatalimetryNatalieDataBasalNatalies;
      if ([v6 objectForKeyedSubscript:CMNatalimetryNatalieDataBasalNatalies]) {
        [objc_msgSend(v6, "objectForKeyedSubscript:", v15) doubleValue];
      }
      else {
        double v16 = 0.0;
      }
      uint64_t v48 = (uint64_t)v16;
      uint64_t v17 = CMNatalimetryNatalieDataNatalies;
      if ([v6 objectForKeyedSubscript:CMNatalimetryNatalieDataNatalies]) {
        [objc_msgSend(v6, "objectForKeyedSubscript:", v17) doubleValue];
      }
      else {
        double v18 = 0.0;
      }
      uint64_t v47 = (uint64_t)v18;
      uint64_t v19 = CMNatalimetryNatalieDataSourceId;
      id v20 = [v6 objectForKeyedSubscript:CMNatalimetryNatalieDataSourceId];
      if (v20) {
        id v20 = [v6 objectForKeyedSubscript:v19];
      }
      id v43 = v20;
      id v21 = [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "syncgetQueryNatalieDataSince:records:", &v42, &__p);
      unsigned int v35 = v21;
      if (v21 == 100)
      {
        id v30 = v4;
        id v22 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v23 = (int *)__p;
        long long v24 = v32;
        if (__p != v32)
        {
          do
          {
            if (*((void *)v23 + 1)) {
              id v25 = [objc_alloc((Class)NSUUID) initWithUUIDString:*((void *)v23 + 1)];
            }
            else {
              id v25 = 0;
            }
            id v26 = [objc_alloc((Class)CMNatalieData) initWithStartDate:*v23 recordId:+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", v23[6]) activityType:v25 mets:*((double *)v23 + 2) natalies:*((double *)v23 + 4) basalNatalies:(double)*((uint64_t *)v23 + 6) sourceId:(double)*((uint64_t *)v23 + 7)];
            [v22 addObject:v26];

            v23 += 22;
          }
          while (v23 != v24);
        }
        uint64_t v36 = CMNatalimetryNatalieDataArray;
        id v37 = v22;
        id v4 = v30;
        +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];

        CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D68A0);
        }
        uint64_t v27 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67240192;
          int v52 = (int)v21;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Error querying calorie data, %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_1022D68A0);
          }
          int v40 = 67240192;
          int v41 = (int)v21;
          uint64_t v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        uint64_t v38 = CMErrorMessage;
        __int16 v39 = +[NSNumber numberWithUnsignedInt:v21];
        +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
        CLConnectionMessage::sendReply();
      }
      if (__p)
      {
        int v32 = (int *)__p;
        operator delete(__p);
      }
      sub_1000E1098(v34);
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      uint64_t v10 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Error in query request.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D68A0);
        }
        LOWORD(v42) = 0;
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      uint64_t v49 = CMErrorMessage;
      uint64_t v50 = &off_102392DE0;
      +[NSDictionary dictionaryWithObjects:&v50 forKeys:&v49 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v53 = CMErrorMessage;
    uint64_t v54 = +[NSNumber numberWithUnsignedInt:v35];
    +[NSDictionary dictionaryWithObjects:&v54 forKeys:&v53 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1009A1D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, id a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000E1098(&a16);

  _Unwind_Resume(a1);
}

void sub_1009A1DC8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v3 = +[NSMutableDictionary dictionaryWithCapacity:5];
  if (sub_1009A36B8(a1))
  {
    -[NSMutableDictionary addEntriesFromDictionary:](v3, "addEntriesFromDictionary:", [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "syncgetUserProfile"]);
    sub_100103240();
    if (sub_10073E30C())
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      id v4 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v8 = v3;
        __int16 v9 = 2112;
        uint64_t v10 = v5;
        __int16 v11 = 2048;
        uint64_t v12 = a1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Getting user profile, %@, %@, %p", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D68A0);
        }
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetryGetUserProfile(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v13 = CMErrorMessage;
    uint64_t v14 = &off_102392DF8;
    +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1009A206C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1009A209C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1009A36B8(a1))
  {
    uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "setUserProfileFromCMNatalimeter:", Dictionary);
    sub_100103240();
    if (sub_10073E30C())
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      uint64_t v6 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 138478339;
        uint64_t v10 = Dictionary;
        __int16 v11 = 2112;
        uint64_t v12 = v7;
        __int16 v13 = 2048;
        uint64_t v14 = a1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting user profile, %{private}@, %@, %p", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D68A0);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetrySetUserProfile(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v15 = CMErrorMessage;
    double v16 = &off_102392DF8;
    +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1009A2334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1009A2364(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1009A3488(a1))
  {
    sub_100103240();
    if (sub_10010145C() && !sub_1010A4CC4(a1))
    {
      int v4 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = sub_1009A31B0(a1) ^ 1;
      int v4 = 1;
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D68A0);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109376;
      int v14 = v4;
      __int16 v15 = 2048;
      uint64_t v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Calibration prompt, isConnectedToCompanion: %d, promptsNeeded: %ld.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      int v9 = 67109376;
      int v10 = v4;
      __int16 v11 = 2048;
      uint64_t v12 = v3;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetryCalibrationPromptsNeeded(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v7 = CMReturnCode;
    uint64_t v8 = +[NSNumber numberWithUnsignedInteger:v3];
    +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v17 = CMErrorMessage;
    double v18 = &off_102392DF8;
    +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1009A2618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1009A264C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1009A3488(a1))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D68A0);
    }
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Resetting calibration.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleMessageNatalimetryResetCalibration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLMotionSyncStore"), "resetStoredCalibrations");
    uint64_t v5 = CMReturnCode;
    uint64_t v6 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  }
  else
  {
    uint64_t v8 = CMErrorMessage;
    int v9 = &off_102392DF8;
    +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  }
  CLConnectionMessage::sendReply();
}

void sub_1009A28A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1009A28D0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  if (sub_1009A3394(a1, &v21))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v6);
    uint64_t v8 = CMWorkoutSessionIdKey;
    if ([DictionaryOfClasses objectForKeyedSubscript:CMWorkoutSessionIdKey])
    {
      sub_1000E1294((uint64_t *)buf, (uint64_t)"CLDaemonClient.WorkoutMetsQueryForSessionId", 0);
      int v9 = *(void **)(*(void *)(a1 + 72) + 16);
      id v10 = [DictionaryOfClasses objectForKeyedSubscript:v8];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768;
      void v15[2] = sub_1009A38D0;
      v15[3] = &unk_1022D6820;
      uint64_t v12 = *(CLConnectionMessage **)a2;
      __int16 v11 = *(std::__shared_weak_count **)(a2 + 8);
      unsigned int v15[4] = &v18;
      void v15[5] = v12;
      uint64_t v16 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v9 queryWorkoutMets:v10 withReply:v15];
      if (v16) {
        sub_1000DB0A0(v16);
      }
      sub_1000E1098(buf);
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      __int16 v13 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "WorkoutMets,query,empty request", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D68A0);
        }
        __int16 v17 = 0;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v22 = CMErrorMessage;
      uint64_t v23 = &off_102392DE0;
      +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v25 = CMErrorMessage;
    id v26 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v19 + 6)];
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    CLConnectionMessage::sendReply();
  }
  _Block_object_dispose(&v18, 8);
}

void sub_1009A2C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1009A2CBC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1009A2CF8(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if (!*a3)
  {
    if (*((void *)a4 + 1)
      && (id v6 = [objc_alloc((Class)NSUUID) initWithUUIDString:*((void *)a4 + 1)]) != 0)
    {
      uint64_t v7 = v6;
      id v8 = [objc_alloc((Class)CMNatalieData) initWithStartDate:*(int *)a4 recordId:+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *((unsigned int *)a4 + 6)) activityType:v6 mets:a4[2] basalNatalies:a4[4] sourceId:*(double)*((uint64_t *)a4 + 6) *(double)*((uint64_t *)a4 + 7)];
      sub_100103240();
      if (sub_10073E30C())
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D68A0);
        }
        int v9 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = *(void *)(a1 + 24);
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v8;
          __int16 v26 = 2112;
          uint64_t v27 = v10;
          __int16 v28 = 2048;
          uint64_t v29 = a1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@, %@, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_1022D68A0);
          }
          uint64_t v15 = *(void *)(a1 + 24);
          int v19 = 138412802;
          id v20 = v8;
          __int16 v21 = 2112;
          uint64_t v22 = v15;
          __int16 v23 = 2048;
          uint64_t v24 = a1;
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetrySubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
        }
      }
      uint64_t v17 = CMNatalimetryNatalieData;
      id v18 = v8;
      *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];

      sub_1009A312C(a1);
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      __int16 v11 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v26 = 2048;
        uint64_t v27 = a1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Error in calorie update, %@, %p", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D68A0);
        }
        __int16 v13 = *(void **)(a1 + 24);
        int v19 = 138412546;
        id v20 = v13;
        __int16 v21 = 2048;
        uint64_t v22 = a1;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetrySubscription::onNatalimetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v14);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }
}

void sub_1009A312C(uint64_t a1)
{
  sub_1000E9420(&off_1022D6A10, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1009A3198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009A31B0(uint64_t a1)
{
  id v1 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLClientAuthorizationCache"];
  id v2 = [[[v1 syncgetAuthorizationContextIfClientIsNonZonal:[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle")] isAuthorizedForServiceTypeMask:16];
  if ((v2 & 1) == 0)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D68A0);
    }
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNatalimetrySubscription::isNatalimetryCalibrationAuthorized()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }

  return v2;
}

uint64_t sub_1009A3394(uint64_t a1, int *a2)
{
  if (sub_1009A3488(a1))
  {
    if (!sub_101290CD0(*(void *)(a1 + 8)))
    {
      int v5 = 104;
      goto LABEL_7;
    }
    if (sub_1010A4D14(a1)) {
      return 1;
    }
  }
  int v5 = 105;
LABEL_7:
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

void sub_1009A33F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_1022D6A10, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1009A3470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A3488(uint64_t a1)
{
  sub_100134750(__p, "com.apple.locationd.natalimetry");
  uint64_t v2 = sub_1010A4BAC(a1);
  uint64_t v3 = v2;
  if (v11 < 0)
  {
    operator delete(*(void **)__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D68A0);
  }
  id v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)long long __p = 138412546;
    *(void *)&__p[4] = v5;
    __int16 v9 = 2048;
    uint64_t v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client failed entitlement check for calorimetry, %@, %p", __p, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D68A0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNatalimetrySubscription::isEntitledForNatalimetry()", "%s\n", v7);
    if (v7 != __p) {
      free(v7);
    }
  }
  return v3;
}

void sub_1009A3694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A36B8(uint64_t a1)
{
  sub_100134750(__p, "com.apple.locationd.userprofile");
  uint64_t v2 = sub_1010A4BAC(a1);
  uint64_t v3 = v2;
  if (v9 < 0)
  {
    operator delete(*(void **)__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D68A0);
  }
  id v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)long long __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access user info spi", __p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D68A0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNatalimetrySubscription::isEntitledForUserInfoAccess()", "%s\n", v7);
    if (v7 != __p) {
      free(v7);
    }
  }
  return v3;
}

void sub_1009A38AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A38D0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 == 100)
  {
    uint64_t v13 = CMWorkoutMetsDataKey;
    int v14 = a2;
    +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D68A0);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [a2 description];
      *(_DWORD *)long long buf = 138412290;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Workout Mets Query Result: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      [a2 description];
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D68A0);
    }
    id v8 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v18) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error querying workout mets, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D68A0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetrySubscription::handleQueryWorkoutMetsForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    uint64_t v15 = CMErrorMessage;
    uint64_t v16 = +[NSNumber numberWithUnsignedInt:a3];
    +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  }
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1009A3C8C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1009A3CA8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1009A3CB8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1009A3CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_1009A3D68(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1009A3D98(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_1009A3DC8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022D68F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1009A3E14(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022D68F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1009A3E44(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_1009A3E4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1009A3E8C()
{
}

void sub_1009A3E98(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1009A3EF4(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1009A3EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A3EF4(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  id v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    id v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      id v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022D6960);
    }
    char v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022D6960);
      }
    }
    uint64_t v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_1009A4124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1009A4140(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void *sub_1009A4170(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_1009A41F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022D69A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1009A4240(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022D69A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1009A4270(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1009A4278(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1009A42B8()
{
}

void sub_1009A42C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_1009A4364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A4388(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1009A4404(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1009A43F0(_Unwind_Exception *a1)
{
  sub_1009A48B8(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1009A4404(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1009A4688(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1009A4810((uint64_t)v25, 0);
  return i;
}

void sub_1009A4670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1009A4810((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1009A4688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1009A4700(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1009A46E8(_Unwind_Exception *a1)
{
  sub_1009A4810(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1009A4700(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_1009A4778((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1009A475C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A4778(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1009A4810(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1009A4868((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1009A4868(uint64_t a1)
{
  sub_1009A4170((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_1009A48B8(uint64_t a1)
{
  sub_1009A48F4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1009A48F4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1009A4868((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1009A4938()
{
  sub_100134750(qword_10247F1E8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F1E8, (void *)&_mh_execute_header);
}

void sub_1009A4B80(id a1)
{
  qword_10247F200 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMotionAlarmNotifierSilo"];
}

uint64_t sub_1009A4C40(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1009A9148;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247F210 != -1) {
    dispatch_once(&qword_10247F210, block);
  }
  return qword_10248A728;
}

void sub_1009A4F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1009A4F64(uint64_t a1, long long *a2, uint64_t a3)
{
  if (!a2)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    BOOL v14 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid name.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    LOWORD(v51) = 0;
    unint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)", "%s\n", v15);
LABEL_65:
    if (v15 != (char *)buf) {
      free(v15);
    }
    return 0;
  }
  sub_100089AE0((char *)__dst, a2);
  uint64_t v6 = sub_1009261A8((uint64_t)__dst);
  if (v49 < 0) {
    operator delete(__p);
  }
  if (v47 < 0) {
    operator delete(v46);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(__dst[0]);
  }
  if ([(NSString *)v6 length])
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v7 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      uint64_t v54 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Registering client: %{private}@.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      int v51 = 138477827;
      int v52 = v6;
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    unint64_t v8 = objc_alloc_init(ClientRegistration);
    [(ClientRegistration *)v8 setAdapter:a3];
    sub_100089AE0((char *)v22, a2);
    [(ClientRegistration *)v8 setName:v22];
    if (v35 < 0) {
      operator delete(v34);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    [*(id *)(a1 + 136) setObject:v8 forKey:v6];

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    unint64_t v9 = (void *)sub_100AE6018(*(void *)(a1 + 112), v6);
    id v10 = [v9 countByEnumeratingWithState:&v18 objects:v50 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v9);
          }
          sub_1009AAF68(a1, *(void **)(*((void *)&v18 + 1) + 8 * i));
        }
        id v10 = [v9 countByEnumeratingWithState:&v18 objects:v50 count:16];
      }
      while (v10);
    }
    return 1;
  }
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  float v16 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to create client bundle identifier.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    LOWORD(v51) = 0;
    unint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerClient(CLClientManager_Type::Name *, id<CLMotionAlarmNotifierClientProtocol>, BOOL)", "%s\n", v15);
    goto LABEL_65;
  }
  return result;
}

void sub_1009A555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1009A5648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1009A565C(uint64_t a1, long long *a2)
{
  if (!a2)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid name.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    LOWORD(v24) = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)", "%s\n", v7);
LABEL_44:
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  sub_100089AE0((char *)__dst, a2);
  uint64_t v3 = sub_1009261A8((uint64_t)__dst);
  if (v23 < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(__dst[0]);
  }
  if ([(NSString *)v3 length])
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    long long v4 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      char v27 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unregistering client: %{private}@.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      int v24 = 138477827;
      char v25 = v3;
      unint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    [*(id *)(a1 + 136) removeObjectForKey:v3];
    return 1;
  }
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  unint64_t v8 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unable to create client bundle identifier.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    LOWORD(v24) = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterClient(CLClientManager_Type::Name *, BOOL)", "%s\n", v7);
    goto LABEL_44;
  }
  return result;
}

void sub_1009A5B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009A5B68(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  uint64_t v6 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138478083;
    id v68 = [a2 bundleId];
    __int16 v69 = 2113;
    id v70 = [a2 name];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registering alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v63 = 138478083;
    id v64 = [a2 bundleId];
    __int16 v65 = 2113;
    id v66 = [a2 name];
    char v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  if (!a2)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    long long v20 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Invalid alarm to add!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      LOWORD(v63) = 0;
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
    if (a3) {
      (*(void (**)(uint64_t, void, uint64_t))(a3 + 16))(a3, 0, 107);
    }
    return 0;
  }
  id v7 = [a2 bundleId];
  if (!sub_1009AB50C((uint64_t)v7, v7))
  {
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 107);
    }
    return 0;
  }
  unint64_t v8 = (void *)sub_100AE5410(*(void *)(a1 + 112), [a2 bundleId], [a2 name]);
  if (!v8) {
    goto LABEL_113;
  }
  unint64_t v9 = v8;
  unsigned int v10 = [v8 duration];
  if (v10 == [a2 duration])
  {
    unsigned int v11 = [v9 type];
    if (v11 == [a2 type])
    {
      unsigned int v12 = [v9 repeats];
      if (v12 == [a2 repeats])
      {
        if (a3) {
          (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v9, 100);
        }
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        char v29 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
        {
          id v30 = [a2 bundleId];
          id v31 = [a2 name];
          *(_DWORD *)long long buf = 138478083;
          id v68 = v30;
          __int16 v69 = 2113;
          id v70 = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Alarm already exists for client, firing: %{private}@, name: %{private}@.", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          int v63 = 138478083;
          id v64 = [a2 bundleId];
          __int16 v65 = 2113;
          id v66 = [a2 name];
          __int16 v55 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v55);
          if (v55 != (char *)buf) {
            free(v55);
          }
        }
        sub_1009AAF68(a1, v9);
        return 1;
      }
    }
  }
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  char v13 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [a2 bundleId];
    id v15 = [a2 name];
    *(_DWORD *)long long buf = 138478083;
    id v68 = v14;
    __int16 v69 = 2113;
    id v70 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Updating alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v63 = 138478083;
    id v64 = [a2 bundleId];
    __int16 v65 = 2113;
    id v66 = [a2 name];
    int v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_1009AB6B4;
  v62[3] = &unk_1022D6B20;
  v62[4] = a3;
  uint64_t result = sub_1009A6B0C(a1, v9, (uint64_t)v62);
  if (result)
  {
LABEL_113:
    if (!sub_100AE5194(*(void *)(a1 + 112), a2) || ![a2 alarmId])
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v21 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
      {
        id v22 = [a2 bundleId];
        id v23 = [a2 name];
        *(_DWORD *)long long buf = 138478083;
        id v68 = v22;
        __int16 v69 = 2113;
        id v70 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to update or insert alarm for client: %{private}@ name: %{private}@.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        id v52 = [a2 bundleId];
        id v53 = [a2 name];
        int v63 = 138478083;
        id v64 = v52;
        __int16 v65 = 2113;
        id v66 = v53;
        uint64_t v54 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v54);
        if (v54 != (char *)buf) {
          free(v54);
        }
      }
      goto LABEL_38;
    }
    if ([a2 type] == 15)
    {
      int v17 = [a2 bundleId];
      [a2 name];
      id v18 = [a2 alarmId];
      [a2 duration];
      [a2 repeats];
      sub_1009AB6D8(a1, v17, v19, (unint64_t)v18);
      goto LABEL_55;
    }
    if ([a2 type] == 19)
    {
      [a2 bundleId];
      [a2 name];
      id v24 = [a2 alarmId];
      unsigned int v25 = [a2 duration];
      unsigned __int8 v26 = [a2 repeats];
      sub_1009ABBA8(a1, v27, v28, (uint64_t)v24, v25, v26);
      goto LABEL_55;
    }
    if ([a2 type] == 22
      || [a2 type] == 23
      || [a2 type] == 24
      || [a2 type] == 25)
    {
      id v32 = [a2 bundleId];
      [a2 name];
      id v33 = [a2 alarmId];
      int v34 = [a2 duration];
      int v35 = [a2 type];
      if (sub_1009ABEC0(a1, (uint64_t)v32, v36, (uint64_t)v33, v34, v35)) {
        goto LABEL_55;
      }
      goto LABEL_66;
    }
    unsigned int v37 = [a2 type];
    id v38 = [a2 bundleId];
    [a2 name];
    id v39 = [a2 alarmId];
    id v40 = [a2 type];
    unsigned int v42 = [a2 duration];
    if (v37 == 26)
    {
      if ((sub_1009AC3F0(a1, v38, v41, (std::string::size_type)v39, (uint64_t)v40, v42) & 1) == 0) {
        goto LABEL_66;
      }
    }
    else if ((sub_1009ACB94(a1, v38, v41, (std::string::size_type)v39, (uint64_t)v40, v42) & 1) == 0)
    {
LABEL_66:
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v44 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Alarm construction failed!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        LOWORD(v63) = 0;
        uint64_t v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v56);
        if (v56 != (char *)buf) {
          free(v56);
        }
      }
      if ((sub_100AE6480(*(void *)(a1 + 112), [a2 bundleId], objc_msgSend(a2, "name")) & 1) == 0)
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        char v45 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
        {
          id v46 = [a2 alarmId];
          *(_DWORD *)long long buf = 134217984;
          id v68 = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Failed to remove alarm entry for id: %llu.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          id v60 = [a2 alarmId];
          int v63 = 134217984;
          id v64 = v60;
          __int16 v61 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v61);
          if (v61 != (char *)buf) {
            free(v61);
          }
        }
      }
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v47 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
      {
        id v48 = [a2 bundleId];
        id v49 = [a2 name];
        *(_DWORD *)long long buf = 138478083;
        id v68 = v48;
        __int16 v69 = 2113;
        id v70 = v49;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Construction of alarm failed for client: %{private}@ name: %{private}@.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        id v57 = [a2 bundleId];
        id v58 = [a2 name];
        int v63 = 138478083;
        id v64 = v57;
        __int16 v65 = 2113;
        id v66 = v58;
        __int16 v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::registerAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v59);
        if (v59 != (char *)buf) {
          free(v59);
        }
      }
      [a2 setAlarmId:0];
LABEL_38:
      if (a3) {
        (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 103);
      }
      return 0;
    }
LABEL_55:
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 100);
    }
    return 1;
  }
  return result;
}

uint64_t sub_1009A6B0C(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  uint64_t v6 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138478083;
    id v24 = [a2 bundleId];
    __int16 v25 = 2113;
    id v26 = [a2 name];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unregistering alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    [a2 bundleId];
    [a2 name];
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (!a2)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    unsigned int v11 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid alarm to remove!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    if (a3) {
      (*(void (**)(uint64_t, void, uint64_t))(a3 + 16))(a3, 0, 107);
    }
    return 0;
  }
  id v7 = (void *)sub_100AE5410(*(void *)(a1 + 112), [a2 bundleId], [a2 name]);
  if (!v7)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    unsigned int v12 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unable to find alarm to remove!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 108);
    }
    return 0;
  }
  unint64_t v8 = v7;
  id v9 = [v7 alarmId];
  if ([v8 type] == 15)
  {
    int v10 = sub_1009AD460(a1, (unint64_t)v9);
  }
  else
  {
    id v14 = [v8 type];
    if (v14 == 19)
    {
      sub_1009AA728((uint64_t)v14, (uint64_t)v9);
      int v15 = 1;
      goto LABEL_33;
    }
    if ([v8 type] == 22
      || [v8 type] == 23
      || [v8 type] == 24
      || [v8 type] == 25)
    {
      int v10 = sub_1009AA8F8(a1, (uint64_t)v9);
    }
    else
    {
      int v10 = sub_1009AD7C4(a1, (uint64_t)v9);
    }
  }
  int v15 = v10;
LABEL_33:
  sub_1009ADB00(a1, (uint64_t)v9);
  if (sub_100AE6480(*(void *)(a1 + 112), [v8 bundleId], objc_msgSend(v8, "name")))
  {
    if (v15)
    {
      [v8 setAlarmId:0];
      [v8 setState:12];
      uint64_t v13 = 1;
      if (!a3) {
        return v13;
      }
      goto LABEL_43;
    }
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    float v16 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      id v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to remove activity alarm entry for id: %llu.", buf, 0xCu);
    }
    uint64_t v13 = 0;
    if (!sub_10013D1A0(115, 0))
    {
      if (!a3) {
        return v13;
      }
      goto LABEL_43;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    id v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::unregisterAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  uint64_t v13 = 0;
  if (!a3) {
    return v13;
  }
LABEL_43:
  if (v13) {
    uint64_t v17 = 100;
  }
  else {
    uint64_t v17 = 103;
  }
  (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, v17);
  return v13;
}

uint64_t sub_1009A7298(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  uint64_t v6 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138478083;
    id v33 = [a2 bundleId];
    __int16 v34 = 2113;
    id v35 = [a2 name];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Acknowledging alarm for client: %{private}@, name: %{private}@.", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    [a2 bundleId];
    [a2 name];
    id v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (!a2)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    float v16 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid alarm to acknowledge!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    if (a3) {
      (*(void (**)(uint64_t, void, uint64_t))(a3 + 16))(a3, 0, 107);
    }
    return 0;
  }
  id v7 = (void *)sub_100AE5410(*(void *)(a1 + 112), [a2 bundleId], [a2 name]);
  if (!v7)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v17 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unable to find alarm entry to acknowledge!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 108);
    }
    return 0;
  }
  unint64_t v8 = v7;
  id v9 = [v7 alarmId];
  unsigned int v10 = [v8 state];
  if (v10 - 12 <= 0xFFFFFFF5)
  {
    unsigned int v11 = v10;
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    unsigned int v12 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = sub_10155916C(v11);
      id v14 = [v8 bundleId];
      id v15 = [v8 name];
      *(_DWORD *)long long buf = 138413059;
      id v33 = (id)v13;
      __int16 v34 = 2113;
      id v35 = v14;
      __int16 v36 = 2113;
      id v37 = v15;
      __int16 v38 = 2048;
      id v39 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unable to acknowledge alarm in state: %@ for client: %{private}@ name: %{private}@, id: %llu.", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      sub_10155916C(v11);
      [v8 bundleId];
      [v8 name];
      char v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 108);
    }
    return 0;
  }
  if ([v8 repeats])
  {
    sub_1009ADB00(a1, (uint64_t)v9);
    if ([v8 type] != 15 && objc_msgSend(v8, "type") != 19)
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      __int16 v25 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Preconditions have been violated and we have a repeating activity alarm!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        id v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      if (a3) {
        (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 103);
      }
      return 0;
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    long long v20 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = sub_10155916C(1u);
      id v22 = [v8 bundleId];
      *(_DWORD *)long long buf = 138412803;
      id v33 = (id)v21;
      __int16 v34 = 2113;
      id v35 = v22;
      __int16 v36 = 2048;
      id v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Setting alarm to %@ for client: %{private}@, id: %llu.", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      sub_10155916C(1u);
      [v8 bundleId];
      id v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::acknowledgeAlarm(CMMotionAlarm *, CLMotionAlarmReplyHandler)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    uint64_t v18 = 1;
    [v8 setState:1];
    sub_100AE5194(*(void *)(a1 + 112), v8);
    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, 100);
    }
  }
  else
  {
    int v23 = sub_1009A6B0C(a1, v8, 0);
    if (a3)
    {
      if (v23) {
        uint64_t v24 = 100;
      }
      else {
        uint64_t v24 = 103;
      }
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v8, v24);
    }
    return 1;
  }
  return v18;
}

uint64_t sub_1009A7D34(uint64_t a1, void *a2, uint64_t a3)
{
  if (!sub_1009AB50C(a1, a2)) {
    return 0;
  }
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  uint64_t v6 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138477827;
    uint64_t v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Application %{private}@ sending remote app launch.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v14 = 138477827;
    id v15 = a2;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::launchRemoteApplication(NSString *, CLMotionAlarmLaunchHandler)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  BOOL v7 = *(unsigned char *)(a1 + 110) != 0;
  if (*(unsigned char *)(a1 + 110))
  {
    id v8 = [a2 dataUsingEncoding:4];
    id v9 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1009B0898;
    void v13[3] = &unk_1022CA588;
    void v13[4] = v8;
    [v9 doAsync:v13];
    if (!a3) {
      return 1;
    }
    uint64_t v10 = 100;
    goto LABEL_12;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v10 = 109;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v10);
  return v7;
}

void sub_1009A7FF8(uint64_t a1, xpc_activity_t activity, uint64_t a3)
{
  if (!activity)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    unsigned int v12 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid alarm activity.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    LOWORD(v20) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v13);
LABEL_45:
    if (v13 != (char *)buf) {
      free(v13);
    }
    return;
  }
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 4 || (xpc_activity_state_t v7 = state, state == 2))
  {
    uint64_t v8 = *(void *)(a1 + 192);
    sub_100134750(__p, "none");
    sub_100EBBFD8(v8, (uint64_t *)__p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (![[*(id *)(a1 + 152) objectForKeyedSubscript:[NSNumber numberWithUnsignedLongLong:a3]])[*(id *)(a1 + 152) setObject:activity forKeyedSubscript:[NSNumber numberWithUnsignedLongLong:a3]]; {
    if (qword_102419130 != -1)
    }
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    id v9 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v23 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Class A timer fired id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      int v20 = 134217984;
      uint64_t v21 = a3;
      id v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_1009AF73C(a1, a3);
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v10 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t v11 = xpc_activity_get_state(activity);
        *(_DWORD *)long long buf = 134349056;
        uint64_t v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Failed to mark activity as done. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        xpc_activity_state_t v16 = xpc_activity_get_state(activity);
        int v20 = 134349056;
        uint64_t v21 = v16;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    sub_100EBC6AC(*(void *)(a1 + 192));
    return;
  }
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  int v14 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Unexpected activity state: %ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v20 = 134217984;
    uint64_t v21 = v7;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onClassATimerActivity(xpc_activity_t, uint64_t)", "%s\n", v13);
    goto LABEL_45;
  }
}

void sub_1009A862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1009A8678(uint64_t a1)
{
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_1022D6BB0);
  }
  uint64_t v2 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMotionAlarmNotifier::onCardioChangeEvent triggered.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_1022D6BB0);
    }
    LOWORD(v22) = 0;
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t v3 = *(void *)(a1 + 192);
  sub_100134750(__p, "none");
  sub_100EBBFD8(v3, (uint64_t *)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v4 = *(void **)(a1 + 160);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v17;
    do
    {
      xpc_activity_state_t v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v7) unsignedLongLongValue];
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        id v9 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          id v26 = v8;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CardioChange alarm fired: %llu.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          int v22 = 134217984;
          id v23 = v8;
          unsigned int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v8)))
        {
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          uint64_t v10 = qword_102419138;
          if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CardioChange alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419130 != -1) {
              dispatch_once(&qword_102419130, &stru_1022D6B90);
            }
            LOWORD(v22) = 0;
            xpc_activity_state_t v11 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onCardioChangeEvent()", "%s\n", v11);
            if (v11 != (char *)buf) {
              free(v11);
            }
          }
        }
        else
        {
          sub_1009AF73C(a1, (uint64_t)v8);
        }
        xpc_activity_state_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v13 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
      id v5 = v13;
    }
    while (v13);
  }
  return sub_100EBC6AC(*(void *)(a1 + 192));
}

void sub_1009A8B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1009A8BE4(uint64_t a1, int a2)
{
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  long long v4 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v29) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLMotionAlarmNotifier::fireEventAlarm triggered,type:%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v25 = 67109120;
    LODWORD(v26) = a2;
    long long v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  uint64_t v5 = *(void *)(a1 + 192);
  sub_100134750(__p, "none");
  sub_100EBBFD8(v5, (uint64_t *)__p);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v6 = *(void **)(a1 + 120);
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v20;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v9);
        id v11 = [v10 unsignedLongLongValue];
        if (objc_msgSend(objc_msgSend(*(id *)(a1 + 120), "objectForKey:", v10), "trigger") == a2)
        {
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          unsigned int v12 = qword_102419138;
          if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            id v29 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Event alarm fired: %llu.", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419130 != -1) {
              dispatch_once(&qword_102419130, &stru_1022D6B90);
            }
            int v25 = 134217984;
            id v26 = v11;
            id v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
          if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11)))
          {
            if (qword_102419130 != -1) {
              dispatch_once(&qword_102419130, &stru_1022D6B90);
            }
            id v13 = qword_102419138;
            if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Event alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419130 != -1) {
                dispatch_once(&qword_102419130, &stru_1022D6B90);
              }
              LOWORD(v25) = 0;
              int v14 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireEventAlarm(CMMotionAlarmType)", "%s\n", v14);
              if (v14 != (char *)buf) {
                free(v14);
              }
            }
          }
          else
          {
            sub_1009AF73C(a1, (uint64_t)v11);
          }
        }
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v16 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
      id v7 = v16;
    }
    while (v16);
  }
  return sub_100EBC6AC(*(void *)(a1 + 192));
}

void sub_1009A9124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009A9148()
{
}

void sub_1009A9194()
{
}

void sub_1009A91B8(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_1009A9710(a1, "CLMotionAlarmNotifier", a2);
  *(void *)uint64_t v2 = off_1022D6A48;
  *(_WORD *)(v2 + 109) = 0;
  operator new();
}

void sub_1009A9574(_Unwind_Exception *a1)
{
  uint64_t v7 = v1[28];
  v1[28] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[27];
  v1[27] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[26];
  v1[26] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *v4;
  *long long v4 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v1[24];
  v1[24] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_1009B2D88(v3, *v5);
  uint64_t v12 = *v2;
  *uint64_t v2 = 0;
  if (v12) {
    sub_1009B2DE8((uint64_t)v2, v12);
  }
  sub_1009A9F2C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009A9710(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022D6BE0;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1009A97A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009A97BC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1009B08E4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1009A9978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009A9998(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onDataProtectionManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onDataProtectionManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1009B096C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1009A9B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009A9B74(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (*a2 == 5) {
    *(unsigned char *)(a4 + 110) = *a3;
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1009A9D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009A9D50(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1009B0B90((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1009A9F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009A9F2C(uint64_t a1)
{
  *(void *)a1 = off_1022D6BE0;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1009A9FB0(uint64_t a1)
{
  *(void *)a1 = off_1022D6A48;
  sub_1009AA154(a1);
  uint64_t v2 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1009B2D88(a1 + 168, *(void **)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v7) {
    sub_1009B2DE8(a1 + 112, v7);
  }

  return sub_1009A9F2C(a1);
}

void sub_1009AA11C(uint64_t a1)
{
  sub_1009A9FB0(a1);

  operator delete();
}

void sub_1009AA154(uint64_t a1)
{
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  uint64_t v2 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Shutting down alarm notifier.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    __int16 v59 = 0;
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionAlarmNotifier::shutdown()", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v3 = [*(id *)(a1 + 144) allValues];
  id v4 = [v3 countByEnumeratingWithState:&v55 objects:v64 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v56;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v56 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v55 + 1) + 8 * i) invalidate];
      }
      id v5 = [v3 countByEnumeratingWithState:&v55 objects:v64 count:16];
    }
    while (v5);
  }

  *(void *)(a1 + 144) = 0;
  uint64_t v8 = *(void **)(a1 + 168);
  uint64_t v9 = (void *)(a1 + 176);
  if (v8 != (void *)(a1 + 176))
  {
    do
    {
      sub_1001B0AE4(v8[5]);
      char v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          char v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          char v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v12);
      }
      uint64_t v8 = v11;
    }
    while (v11 != v9);
  }
  sub_1009B2D88(a1 + 168, *(void **)(a1 + 176));
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = v9;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v13 = [*(id *)(a1 + 152) allKeys];
  id v14 = [v13 countByEnumeratingWithState:&v51 objects:v63 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v52;
    do
    {
      for (int j = 0; j != v15; int j = (char *)j + 1)
      {
        if (*(void *)v52 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = [*(id *)(*((void *)&v51 + 1) + 8 * (void)j) unsignedIntegerValue];
        sub_1009AA728((uint64_t)v18, (uint64_t)v18);
      }
      id v15 = [v13 countByEnumeratingWithState:&v51 objects:v63 count:16];
    }
    while (v15);
  }

  *(void *)(a1 + 152) = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v19 = [*(id *)(a1 + 120) allValues];
  id v20 = [v19 countByEnumeratingWithState:&v47 objects:v62 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v48;
    do
    {
      for (k = 0; k != v21; k = (char *)k + 1)
      {
        if (*(void *)v48 != v22) {
          objc_enumerationMutation(v19);
        }
        [*(id *)(*((void *)&v47 + 1) + 8 * (void)k) invalidate];
      }
      id v21 = [v19 countByEnumeratingWithState:&v47 objects:v62 count:16];
    }
    while (v21);
  }

  *(void *)(a1 + 120) = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v24 = [*(id *)(a1 + 128) allKeys];
  id v25 = [v24 countByEnumeratingWithState:&v43 objects:v61 count:16];
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = *(void *)v44;
    do
    {
      for (m = 0; m != v26; m = (char *)m + 1)
      {
        if (*(void *)v44 != v27) {
          objc_enumerationMutation(v24);
        }
        sub_1009AA8F8(a1, (uint64_t)[*(id *)(*((void *)&v43 + 1) + 8 * (void)m) unsignedLongLongValue]);
      }
      id v26 = [v24 countByEnumeratingWithState:&v43 objects:v61 count:16];
    }
    while (v26);
  }

  *(void *)(a1 + 128) = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v29 = [*(id *)(a1 + 160) allKeys];
  id v30 = [v29 countByEnumeratingWithState:&v39 objects:v60 count:16];
  if (v30)
  {
    id v31 = v30;
    uint64_t v32 = *(void *)v40;
    do
    {
      for (n = 0; n != v31; n = (char *)n + 1)
      {
        if (*(void *)v40 != v32) {
          objc_enumerationMutation(v29);
        }
        sub_1009AAC2C(a1, (uint64_t)[*(id *)(*((void *)&v39 + 1) + 8 * (void)n) unsignedLongLongValue]);
      }
      id v31 = [v29 countByEnumeratingWithState:&v39 objects:v60 count:16];
    }
    while (v31);
  }

  *(void *)(a1 + 160) = 0;
  __int16 v34 = *(int **)(a1 + 192);
  if (v34[2] <= 0)
  {
    *(void *)(a1 + 192) = 0;
    goto LABEL_52;
  }
  sub_100EBC6AC((uint64_t)v34);
  __int16 v34 = *(int **)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v34) {
LABEL_52:
  }
    (*(void (**)(int *))(*(void *)v34 + 8))(v34);

  *(void *)(a1 + 136) = 0;
  uint64_t v35 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v37) {
    sub_1009B2DE8(a1 + 112, v37);
  }
  *(unsigned char *)(a1 + 108) = 1;
}

uint64_t sub_1009AA728(uint64_t a1, uint64_t a2)
{
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  id v3 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing Class A timer alarm for id: %llu.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    LODWORD(v6) = 12;
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeClassATimerAlarm(uint64_t)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  xpc_activity_unregister([+[NSString stringWithFormat:@"com.apple.locationd.MotionAlarm_%llu", a2, v6] UTF8String]);
  return 1;
}

BOOL sub_1009AA8F8(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSNumber numberWithUnsignedLongLong:a2];
  id v5 = [*(id *)(a1 + 128) objectForKeyedSubscript:v4];
  if (v5)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing workout event alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeWorkoutEventAlarm(uint64_t)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    [*(id *)(a1 + 128) removeObjectForKey:v4];
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v7 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to find activity alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeWorkoutEventAlarm(uint64_t)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1009AAC2C(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSNumber numberWithUnsignedLongLong:a2];
  id v5 = [*(id *)(a1 + 160) objectForKeyedSubscript:v4];
  if (v5)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing CardioChange alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeCardioChangeAlarm(uint64_t)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    [v5 invalidate];
    [*(id *)(a1 + 160) removeObjectForKey:v4];
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v7 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to find CardioChange alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeCardioChangeAlarm(uint64_t)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

void sub_1009AAF68(uint64_t a1, void *a2)
{
  if ((int)[a2 state] <= 11 && (int)objc_msgSend(a2, "state") > 1)
  {
    uint64_t v6 = *(void *)(a1 + 192);
    sub_100134750(__p, "none");
    sub_100EBBFD8(v6, (uint64_t *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    id v7 = [[*(id *)(a1 + 136) objectForKey:[a2 bundleId]];
    if (v7)
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v8 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [a2 bundleId];
        uint64_t v10 = sub_10155916C([a2 state]);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v27 = (uint64_t)v9;
        __int16 v28 = 2112;
        uint64_t v29 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Firing alarm on client: %@, current state: %@.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        id v14 = [a2 bundleId];
        uint64_t v15 = sub_10155916C([a2 state]);
        int v22 = 138412546;
        uint64_t v23 = (uint64_t)v14;
        __int16 v24 = 2112;
        uint64_t v25 = v15;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      [objc_msgSend(v7, "adapter") fireAlarm:a2 error:100];
    }
    else
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v11 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [a2 bundleId];
        uint64_t v13 = sub_10155916C([a2 state]);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v27 = (uint64_t)v12;
        __int16 v28 = 2112;
        uint64_t v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unable to fire alarm on client, client is not registered: %@, current state: %@.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        id v17 = [a2 bundleId];
        uint64_t v18 = sub_10155916C([a2 state]);
        int v22 = 138412546;
        uint64_t v23 = (uint64_t)v17;
        __int16 v24 = 2112;
        uint64_t v25 = v18;
        id v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    sub_100EBC6AC(*(void *)(a1 + 192));
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    id v4 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v27 = sub_10155916C([a2 state]);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Will not fire due to invalid fire state, current state: %@.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      int v22 = 138412290;
      uint64_t v23 = sub_10155916C([a2 state]);
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmOnClient(CMMotionAlarm *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_1009AB4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1009AB50C(uint64_t a1, void *a2)
{
  id v2 = [a2 length];
  if (!v2)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    id v3 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid alarm bundle identifier!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::isBundleValid(NSString *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return v2 != 0;
}

uint64_t sub_1009AB6B4(uint64_t result, uint64_t a2, int a3)
{
  if (a3 && a3 != 100)
  {
    uint64_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }
  return result;
}

uint64_t sub_1009AB6D8(uint64_t a1, int a2, int a3, unint64_t __val)
{
  id v5 = *(void **)(a1 + 176);
  if (!v5)
  {
LABEL_6:
    std::to_string(&v10, __val);
    CFAbsoluteTimeGetCurrent();
    operator new();
  }
  while (1)
  {
    unint64_t v6 = v5[4];
    if (v6 <= __val) {
      break;
    }
LABEL_5:
    id v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_6;
    }
  }
  if (v6 < __val)
  {
    ++v5;
    goto LABEL_5;
  }
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  id v7 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 134217984;
    *(void *)buf_4 = __val;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Time alarm already exists for id: %llu.", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v11 = 134217984;
    unint64_t v12 = __val;
    id v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addTimeAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)", "%s\n", v9);
    if (v9 != (char *)&buf) {
      free(v9);
    }
  }
  return 1;
}

void sub_1009ABB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1009ABBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, BOOL a6)
{
  if (objc_msgSend(*(id *)(a1 + 152), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4)))
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    std::string v10 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Class A timer alarm already exists for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      int v16 = 134217984;
      uint64_t v17 = a4;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addClassATimerAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_REPEATING, a6);
    xpc_dictionary_set_int64(v12, XPC_ACTIVITY_INTERVAL, a5);
    xpc_dictionary_set_int64(v12, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_int64(v12, XPC_ACTIVITY_DELAY, a5);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    id v13 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLMotionAlarmNotifier"];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1009ADFB4;
    handler[3] = &unk_1022AD1E8;
    handler[4] = v13;
    handler[5] = a4;
    xpc_activity_register([+[NSString stringWithFormat:@"com.apple.locationd.MotionAlarm_%llu", a4] UTF8String], v12, handler);
    xpc_release(v12);
  }
  return 1;
}

uint64_t sub_1009ABEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  switch(a6)
  {
    case 22:
      goto LABEL_16;
    case 23:
      uint64_t v10 = 0;
      goto LABEL_15;
    case 24:
      uint64_t v11 = 0;
      uint64_t v10 = 1;
      goto LABEL_16;
    case 25:
      uint64_t v10 = 1;
LABEL_15:
      uint64_t v11 = 1;
LABEL_16:
      int v16 = +[NSNumber numberWithUnsignedLongLong:a4];
      if ([*(id *)(a1 + 128) objectForKeyedSubscript:v16])
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        uint64_t v17 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 134217984;
          uint64_t v22 = a4;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Workout alarm already exists for id: %llu.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      else
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        uint64_t v19 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138478595;
          uint64_t v22 = a2;
          __int16 v23 = 2048;
          uint64_t v24 = a4;
          __int16 v25 = 2048;
          uint64_t v26 = v11;
          __int16 v27 = 1024;
          int v28 = a5;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Saving workout alarm for client: %{private}@, id: %llu, trigger: %ld duration: %u.", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          id v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        [*(id *)(a1 + 128) setObject: -[CLWorkoutAlarm initWithType:dataCollection:]([CLWorkoutAlarm alloc], "initWithType:dataCollection:", v11, v10) forKeyedSubscript:v16];
      }
      uint64_t result = 1;
      break;
    default:
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      xpc_object_t v12 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Unsupported Alarm Type", buf, 2u);
      }
      BOOL v13 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addWorkoutEventAlarm(NSString *, NSString *, uint64_t, uint32_t, CMMotionAlarmType)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1009AC3F0(uint64_t a1, void *a2, uint64_t a3, std::string::size_type a4, uint64_t a5, unsigned int a6)
{
  uint64_t v11 = +[NSNumber numberWithUnsignedLongLong:a4];
  if (v11)
  {
    xpc_object_t v12 = v11;
    if ([*(id *)(a1 + 160) objectForKeyedSubscript:v11])
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      BOOL v13 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a4;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CardioChange alarm already exists for id: %llu.", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        *(_DWORD *)uint64_t v35 = 134217984;
        *(void *)&v35[4] = a4;
        uint64_t v22 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v22);
        if (v22 != &buf) {
          free(v22);
        }
      }
      return 1;
    }
    else
    {
      sub_100134750(&buf, (char *)[a2 UTF8String]);
      sub_1000B7144(&buf, (uint64_t)v35);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      int v16 = [CMActivityAlarmLocal alloc];
      id v17 = [*(id *)(a1 + 40) queue];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1009AE78C;
      void v26[3] = &unk_1022B7B30;
      v26[4] = a1;
      uint64_t v18 = [(CMActivityAlarmLocal *)v16 initWithTrigger:a5 duration:v17 onQueue:v35 forClient:v26 withHandler:(double)a6];
      BOOL v14 = v18 != 0;
      if (v18)
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        uint64_t v19 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
          int v50 = a5;
          __int16 v51 = 1024;
          unsigned int v52 = a6;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Saving CardioChange alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.", (uint8_t *)&buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          int v27 = 138478595;
          int v28 = a2;
          __int16 v29 = 2048;
          std::string::size_type v30 = a4;
          __int16 v31 = 1024;
          int v32 = a5;
          __int16 v33 = 1024;
          unsigned int v34 = a6;
          uint64_t v24 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v24);
          if (v24 != &buf) {
            free(v24);
          }
        }
        [*(id *)(a1 + 160) setObject:v18 forKeyedSubscript:v12];
      }
      else
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        id v20 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to create CardioChange alarm for client: %{private}@, id: %llu.", (uint8_t *)&buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          int v27 = 138478083;
          int v28 = a2;
          __int16 v29 = 2048;
          std::string::size_type v30 = a4;
          __int16 v25 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v25);
          if (v25 != &buf) {
            free(v25);
          }
        }
      }
      if (v48 < 0) {
        operator delete(__p);
      }
      if (v46 < 0) {
        operator delete(v45);
      }
      if (v44 < 0) {
        operator delete(v43);
      }
      if (v42 < 0) {
        operator delete(v41);
      }
      if (v40 < 0) {
        operator delete(v39);
      }
      if (v38 < 0) {
        operator delete(v37);
      }
      if (v36 < 0) {
        operator delete(*(void **)v35);
      }
    }
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v15 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unable to create CardioChange alarm key.", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      *(_WORD *)uint64_t v35 = 0;
      __int16 v23 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addCardioChangeAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v23);
      if (v23 != &buf) {
        free(v23);
      }
    }
    return 0;
  }
  return v14;
}

void sub_1009ACB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
}

uint64_t sub_1009ACB94(uint64_t a1, void *a2, uint64_t a3, std::string::size_type a4, uint64_t a5, unsigned int a6)
{
  if (a5 >= 0x1C)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    unint64_t v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid trigger type!", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419130 == -1)
    {
LABEL_57:
      *(_WORD *)char v36 = 0;
      uint64_t v24 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v24);
      if (v24 != &buf) {
        free(v24);
      }
      return 0;
    }
LABEL_67:
    dispatch_once(&qword_102419130, &stru_1022D6B90);
    goto LABEL_57;
  }
  xpc_object_t v12 = +[NSNumber numberWithUnsignedLongLong:a4];
  if (!v12)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v16 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to create activity alarm key.", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419130 == -1) {
      goto LABEL_57;
    }
    goto LABEL_67;
  }
  BOOL v13 = v12;
  if ([*(id *)(a1 + 120) objectForKeyedSubscript:v12])
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    BOOL v14 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Activity alarm already exists for id: %llu.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      *(_DWORD *)char v36 = 134217984;
      *(void *)&v36[4] = a4;
      __int16 v23 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v23);
      if (v23 != &buf) {
        free(v23);
      }
    }
    return 1;
  }
  else
  {
    sub_100134750(&buf, (char *)[a2 UTF8String]);
    sub_1000B7144(&buf, (uint64_t)v36);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v18 = [CMActivityAlarmLocal alloc];
    id v19 = [*(id *)(a1 + 40) queue];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    _OWORD v27[2] = sub_1009AE1A4;
    v27[3] = &unk_1022B7B30;
    v27[4] = a1;
    id v20 = [(CMActivityAlarmLocal *)v18 initWithTrigger:a5 duration:v19 onQueue:v36 forClient:v27 withHandler:(double)a6];
    BOOL v15 = v20 != 0;
    if (v20)
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v21 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        int v51 = a5;
        __int16 v52 = 1024;
        unsigned int v53 = a6;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Saving activity alarm for client: %{private}@, id: %llu, trigger: %d duration: %u.", (uint8_t *)&buf, 0x22u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        int v28 = 138478595;
        __int16 v29 = a2;
        __int16 v30 = 2048;
        std::string::size_type v31 = a4;
        __int16 v32 = 1024;
        int v33 = a5;
        __int16 v34 = 1024;
        unsigned int v35 = a6;
        __int16 v25 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v25);
        if (v25 != &buf) {
          free(v25);
        }
      }
      [*(id *)(a1 + 120) setObject:v20 forKeyedSubscript:v13];
    }
    else
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v22 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138478083;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to create activity alarm for client: %{private}@, id: %llu.", (uint8_t *)&buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        int v28 = 138478083;
        __int16 v29 = a2;
        __int16 v30 = 2048;
        std::string::size_type v31 = a4;
        uint64_t v26 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addActivityAlarm(NSString *, NSString *, uint64_t, CMMotionAlarmType, uint32_t)", "%s\n", (const char *)v26);
        if (v26 != &buf) {
          free(v26);
        }
      }
    }
    if (v49 < 0) {
      operator delete(__p);
    }
    if (v47 < 0) {
      operator delete(v46);
    }
    if (v45 < 0) {
      operator delete(v44);
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    if (v37 < 0) {
      operator delete(*(void **)v36);
    }
  }
  return v15;
}

void sub_1009AD424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
}

uint64_t sub_1009AD460(uint64_t a1, unint64_t a2)
{
  id v5 = *(void **)(a1 + 176);
  id v3 = (uint64_t *)(a1 + 176);
  id v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = (uint64_t **)(v3 - 1);
  id v7 = v3;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      id v7 = v4;
    }
    id v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v3 && v7[4] <= a2)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    BOOL v14 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Removing persistent alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeTimeAlarm(uint64_t)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    sub_1001B0AE4(v7[5]);
    sub_1009B2F34(v6, v7);
    return 1;
  }
  else
  {
LABEL_12:
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v11 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unable to find persistent alarm for id: %llu.", buf, 0xCu);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeTimeAlarm(uint64_t)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1009AD7C4(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSNumber numberWithUnsignedLongLong:a2];
  id v5 = [*(id *)(a1 + 120) objectForKeyedSubscript:v4];
  if (v5)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    unint64_t v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing activity alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeActivityAlarm(uint64_t)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    [v5 invalidate];
    [*(id *)(a1 + 120) removeObjectForKey:v4];
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    id v7 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unable to find activity alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::removeActivityAlarm(uint64_t)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1009ADB00(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSNumber numberWithUnsignedLongLong:a2];
  id v4 = [*(id *)(a1 + 144) objectForKeyedSubscript:v3];
  id v5 = v4;
  if (v4)
  {
    [v4 invalidate];
    [*(id *)(a1 + 144) removeObjectForKey:v3];
  }
  return v5 != 0;
}

uint64_t sub_1009ADB6C(uint64_t a1, void *a2)
{
  if (!sub_1009AB50C(a1, a2)) {
    return 0;
  }
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  id v4 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138477827;
    char v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing all alarms for client: %{private}@.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    int v18 = 138477827;
    id v19 = a2;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::removeAllAlarmsForBundle(NSString *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  id v5 = (void *)sub_100AE6018(*(void *)(a1 + 112), a2);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (!v6) {
    return 1;
  }
  id v7 = v6;
  uint64_t v8 = *(void *)v14;
  LODWORD(v9) = 1;
  do
  {
    for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v14 != v8) {
        objc_enumerationMutation(v5);
      }
      uint64_t v9 = v9 & sub_1009A6B0C(a1, *(void **)(*((void *)&v13 + 1) + 8 * i), 0);
    }
    id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  }
  while (v7);
  return v9;
}

void sub_1009ADDE0(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    id v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionAlarmNotifier::onPersistentTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    id v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      long long v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionAlarmNotifier::onPersistentTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_1009AF940(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1009ADF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009ADFB4(uint64_t a1, _xpc_activity_s *a2)
{
  [*(id *)(a1 + 32) onClassATimerActivity:a2 withAlarmId:*(void *)(a1 + 40)];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    id v3 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      xpc_activity_get_state(a2);
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmNotifier::addClassATimerAlarm(NSString *, NSString *, uint64_t, uint32_t, BOOL)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1009AE1A4(uint64_t a1, uint64_t a2)
{
}

void sub_1009AE1AC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = [[objc_msgSend(*(id *)(a1 + 120), "allKeysForObject:", a2) firstObject];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)(a1 + 192);
      sub_100134750(__p, "none");
      sub_100EBBFD8(v5, (uint64_t *)__p);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      id v6 = [v4 unsignedLongLongValue];
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      char v7 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        id v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Activity alarm timer fired: %llu.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        int v16 = 134217984;
        id v17 = v6;
        long long v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v6)))
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        uint64_t v8 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Activity alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          LOWORD(v16) = 0;
          int v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
        }
      }
      else
      {
        sub_1009AF73C(a1, (uint64_t)v6);
      }
      sub_100EBC6AC(*(void *)(a1 + 192));
      return;
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v11 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid alarm identifier.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 == -1) {
        goto LABEL_33;
      }
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    __int16 v10 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Invalid alarm timer.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 == -1)
      {
LABEL_33:
        LOWORD(v16) = 0;
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onActivityAlarmFired(CMActivityAlarm *, NSError *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        return;
      }
LABEL_42:
      dispatch_once(&qword_102419130, &stru_1022D6B90);
      goto LABEL_33;
    }
  }
}

void sub_1009AE768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1009AE78C(uint64_t a1)
{
  return sub_1009A8678(*(void *)(a1 + 32));
}

void sub_1009AE794()
{
}

void sub_1009AEF9C()
{
}

void sub_1009AEFC8(uint64_t a1, void *a2)
{
  id v4 = [a2 bundleId];
  if (sub_1009B0160(a1, v4))
  {
    if ((int)[a2 state] > 11 || (int)objc_msgSend(a2, "state") <= 0)
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      __int16 v12 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 138412290;
        uint64_t v29 = sub_10155916C([a2 state]);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Invalid fire state: %@.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        int v24 = 138412290;
        uint64_t v25 = sub_10155916C([a2 state]);
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 192);
      sub_100134750(__p, "none");
      sub_100EBBFD8(v5, (uint64_t *)__p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      id v6 = [a2 state];
      unsigned int v7 = v6;
      sub_1009AFF7C((uint64_t)v6, a2);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v8 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = sub_10155916C(v7);
        uint64_t v10 = sub_10155916C([a2 state]);
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v29 = v9;
        __int16 v30 = 2112;
        uint64_t v31 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Previous alarm state: %@, current state: %@.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        uint64_t v16 = sub_10155916C(v7);
        uint64_t v17 = sub_10155916C([a2 state]);
        int v24 = 138412546;
        uint64_t v25 = v16;
        __int16 v26 = 2112;
        uint64_t v27 = v17;
        int v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if ((int)[a2 state] < 12)
      {
        if ((sub_100AE5194(*(void *)(a1 + 112), a2) & 1) == 0)
        {
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          long long v13 = qword_102419138;
          if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_FAULT))
          {
            id v14 = [a2 alarmId];
            *(_DWORD *)std::string buf = 134217984;
            uint64_t v29 = (uint64_t)v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Failed to update state for the alarm: %llu!", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419130 != -1) {
              dispatch_once(&qword_102419130, &stru_1022D6B90);
            }
            id v20 = [a2 alarmId];
            int v24 = 134217984;
            uint64_t v25 = (uint64_t)v20;
            char v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v21);
            if (v21 != (char *)buf) {
              free(v21);
            }
          }
        }
        sub_1009B0394(a1, v4);
        sub_1009AAF68(a1, a2);
        if ([a2 type] != 19) {
          sub_1009B05A0(a1, a2);
        }
        sub_100EBC6AC(*(void *)(a1 + 192));
      }
      else
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        uint64_t v11 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138477827;
          uint64_t v29 = (uint64_t)v4;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Maximum launch attempts reached for: %{private}@.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          int v24 = 138477827;
          uint64_t v25 = (uint64_t)v4;
          id v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(CMMotionAlarm *)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        sub_1009A6B0C(a1, a2, 0);
        sub_100EBC6AC(*(void *)(a1 + 192));
      }
    }
  }
  else
  {
    sub_1009ADB6C(a1, v4);
  }
}

void sub_1009AF718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009AF73C(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)sub_100AE6398(*(void *)(a1 + 112));
  if (v4)
  {
    sub_1009AEFC8(a1, v4);
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v5 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to find alarm for id: %llu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::fireAlarmWithRetry(uint64_t)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1009AF940(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1001B0A78(a2, (uint64_t)&__str);
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v4 = *(void *)(a1 + 192);
      sub_100134750(__p, "none");
      sub_100EBBFD8(v4, (uint64_t *)__p);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v5 = std::stoull(&__str, 0, 10);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      id v6 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        unint64_t v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Persistent timer fired id: %llu.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        int v17 = 134217984;
        unint64_t v18 = v5;
        long long v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      if (objc_msgSend(*(id *)(a1 + 144), "objectForKeyedSubscript:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v5)))
      {
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        unsigned int v7 = qword_102419138;
        if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Persistent timer is pending acknowledgment. Not firing alarm.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419130 != -1) {
            dispatch_once(&qword_102419130, &stru_1022D6B90);
          }
          LOWORD(v17) = 0;
          uint64_t v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
        }
      }
      else
      {
        sub_1009AF73C(a1, v5);
      }
      sub_100EBC6AC(*(void *)(a1 + 192));
    }
    else
    {
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v11 = qword_102419138;
      if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unexpected alarm identifier.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419130 != -1) {
          dispatch_once(&qword_102419130, &stru_1022D6B90);
        }
        LOWORD(v17) = 0;
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v9 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Invalid alarm timer.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::onPersistentTimerFired(CLPersistentTimer *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_1009AFF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009AFF7C(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 state];
  uint64_t v4 = v3 + 1;
  if (v3 == 12)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    unint64_t v5 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      id v10 = [a2 alarmId];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Alarm state is rolling over for alarm: %llu.", buf, 0xCu);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    uint64_t v4 = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      [a2 alarmId];
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionAlarmNotifier::incrementState(CMMotionAlarm *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      uint64_t v4 = 0;
    }
  }
  return [a2 setState:v4];
}

uint64_t sub_1009B0160(uint64_t a1, void *a2)
{
  if ([a2 hasPrefix:@"/"]) {
    return 1;
  }
  id v5 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLAppMonitor"];
  unsigned int v6 = [[[a2 pathExtension] isEqualToString:@"watchkitextension"];
  id v7 = a2;
  if (v6) {
    id v7 = [a2 stringByDeletingPathExtension];
  }
  id v4 = [v5 syncgetIsApplicationInstalledLocally:v7];
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  uint64_t v8 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138478083;
    __int16 v12 = a2;
    __int16 v13 = 1024;
    int v14 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Application %{private}@ installed: %d.", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::isApplicationInstalled(NSString *)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return (uint64_t)v4;
}

uint64_t sub_1009B0394(uint64_t a1, void *a2)
{
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  id v4 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138477827;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Launching application: %{private}@.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmNotifier::launchApplication(NSString *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  id v5 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLApplicationLifecycleManager"];
  unsigned int v6 = [[objc_msgSend(a2, "pathExtension") isEqualToString:@"watchkitextension"]
  id v7 = a2;
  if (v6) {
    id v7 = [a2 stringByDeletingPathExtension];
  }
  [v5 launchApplication:v7 requiringAuthForServiceMask:0];
  [v5 launchDaemon:a2];
  return 1;
}

void sub_1009B05A0(uint64_t a1, void *a2)
{
  id v4 = [a2 alarmId];
  id v5 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [a2 alarmId]);
  id v6 = [*(id *)(a1 + 144) objectForKeyedSubscript:v5];
  if (!v6)
  {
    id v6 = [*(id *)(a1 + 40) newTimer];
    [*(id *)(a1 + 144) setObject:v6 forKeyedSubscript:v5];
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1009B06D4;
  v8[3] = &unk_1022B8660;
  void v8[4] = a1;
  void v8[5] = v4;
  [v6 setHandler:v8];
  if ([a2 duration] < 0x3D) {
    unsigned int v7 = 60;
  }
  else {
    unsigned int v7 = [a2 duration];
  }
  [v6 setNextFireDelay:((double)((objc_msgSend(a2, "state") - 1) * v7));
}

uint64_t sub_1009B06D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_102419130 != -1) {
    dispatch_once(&qword_102419130, &stru_1022D6B90);
  }
  unsigned int v3 = qword_102419138;
  if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Re-firing alarm: %llu.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::setupRetryTimerForAlarm(CMMotionAlarm *)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_1009AF73C(v2, *(void *)(a1 + 40));
}

id sub_1009B0898(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(120.0, a2, 19, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

id sub_1009B08E4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) silo];
  if (*a3 == 8)
  {
    uint64_t v10 = *(void *)(a4 + 8);
    uint64_t v9 = a4 + 8;
    uint64_t v8 = v10;
    if (*(char *)(v9 + 23) >= 0) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v8;
    }
    __int16 v12 = +[NSString stringWithUTF8String:v11];
    return (id)sub_1009ADB6C(a1, v12);
  }
  return result;
}

void sub_1009B096C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  [*(id *)(a1 + 32) silo];
  if (*a3 == 1)
  {
    int v7 = *(unsigned __int8 *)(a4 + 4);
    *(unsigned char *)(a1 + 109) = v7;
    if (v7)
    {
      [*(id *)(*(void *)(a1 + 208) + 16) unregister:*(void *)(*(void *)(a1 + 208) + 8) forNotification:1];
      sub_1009AE794();
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022D6B90);
    }
    uint64_t v8 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 109)) {
        uint64_t v9 = "Yes";
      }
      else {
        uint64_t v9 = "No";
      }
      *(_DWORD *)std::string buf = 136380675;
      __int16 v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device unlocked since boot: %{private}s.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022D6B90);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void *sub_1009B0B90(void *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    uint64_t v4 = (uint64_t)result;
    id v5 = *(id *)(a4 + 16);
    unint64_t v6 = *(void *)(a4 + 112);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    int v7 = (void *)result[16];
    id result = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = *(void *)v22;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v10);
          id v12 = [*(id *)(v4 + 128) objectForKey:v11];
          if ([v12 eventType] == v5)
          {
            unsigned __int8 v13 = [v12 eligibleForDataCollection];
            if (v6 <= 0x18 && ((1 << v6) & 0x10F803E) != 0)
            {
              if ((v13 & 1) == 0) {
                goto LABEL_30;
              }
            }
            else if (v13)
            {
              goto LABEL_30;
            }
            uint64_t v14 = *(void *)(v4 + 192);
            sub_100134750(__p, "none");
            sub_100EBBFD8(v14, (uint64_t *)__p);
            if (v20 < 0) {
              operator delete(__p[0]);
            }
            if ([*(id *)(v4 + 144) objectForKeyedSubscript:v11])
            {
              if (qword_102419130 != -1) {
                dispatch_once(&qword_102419130, &stru_1022D6B90);
              }
              char v15 = qword_102419138;
              if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Workout alarm is pending acknowledgment. Not firing alarm.", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419130 != -1) {
                  dispatch_once(&qword_102419130, &stru_1022D6B90);
                }
                uint64_t v16 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v16);
                if (v16 != (char *)buf) {
                  free(v16);
                }
              }
            }
            else
            {
              if (qword_102419130 != -1) {
                dispatch_once(&qword_102419130, &stru_1022D6B90);
              }
              int v17 = qword_102419138;
              if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Firing workout alarm with with event type", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419130 != -1) {
                  dispatch_once(&qword_102419130, &stru_1022D6B90);
                }
                unint64_t v18 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionAlarmNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v18);
                if (v18 != (char *)buf) {
                  free(v18);
                }
              }
              sub_1009AF73C(v4, (uint64_t)[v11 unsignedLongLongValue]);
            }
            sub_100EBC6AC(*(void *)(v4 + 192));
          }
LABEL_30:
          uint64_t v10 = (void *)((char *)v10 + 1);
        }
        while (v8 != v10);
        id result = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
        uint64_t v8 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1009B0FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1009B0FD0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1009B104C()
{
  return 1;
}

uint64_t sub_1009B1054()
{
  return 1;
}

void sub_1009B105C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D6B70);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        id v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022D6B70);
        }
        id v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        char v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1009B12EC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1009B13A0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1009B13E8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1009B1430(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1009B1478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241F530);
}

uint64_t sub_1009B14A4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        unsigned __int8 v13 = (uint64_t *)v7;
      }
      else {
        unsigned __int8 v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)char v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          long long v24 = (uint64_t *)v18;
        }
        else {
          long long v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1009B2FA4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241F531;
        int v39 = v17;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        uint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        __int16 v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        __int16 v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    char v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    char v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    char v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1009B1948(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      long long v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D6B70);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1009B1BCC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        unsigned __int8 v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            unsigned __int8 v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022D6B70);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022D6B70);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                char v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1009B1FA0(uint64_t a1, int *a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(unsigned char **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  *a3 = *v11;
  return 1;
}

uint64_t sub_1009B2000(uint64_t a1, int *a2, unsigned char *a3)
{
  int v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *((unsigned char *)v6 + 24) = *a3;
  void *v6 = off_1022D6CE0;
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  unsigned char v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_1009B20B4(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009B20C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1009B211C(uint64_t a1, unsigned int *a2, unsigned char *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    *BOOL v18 = off_1022D6CE0;
    *((unsigned char *)v18 + 24) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1009B3A54();
  }
  os_activity_scope_leave(&state);
}

void sub_1009B2700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1009B274C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D6B70);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D6B70);
    }
    char v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D6B70);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022D6B70);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022D6B70);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::listClients() [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1009B2CF8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1009B2D28(id a1)
{
  qword_102419138 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

void sub_1009B2D58(id a1)
{
  qword_1024192B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

void sub_1009B2D88(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1009B2D88(a1, *a2);
    sub_1009B2D88(a1, a2[1]);
    sub_1006677A0(a2 + 5, 0);
    operator delete(a2);
  }
}

void sub_1009B2DE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    operator delete();
  }
}

uint64_t *sub_1009B2E74(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        char v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      char v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = *a3;
    uint64_t v12 = a3[1];
    a3[1] = 0;
    v10[4] = v11;
    void v10[5] = v12;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *sub_1009B2F34(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000F0A30(a1, a2);
  sub_1006677A0(a2 + 5, 0);
  operator delete(a2);
  return v3;
}

void sub_1009B2F74(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1009B2FA4()
{
}

unsigned char *sub_1009B3050(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    unint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1009B3168(a4);
    uint64_t v10 = *(void *)a3 + 80;
    uint64_t v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

uint64_t sub_1009B3148(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1009B3168(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1009B3204(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1009B3590(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1009B3204(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1009B3950((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022D6CB0);
    }
    char v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D55686 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022D6CB0);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D55686 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022D6CB0);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D55686 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionAlarm_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1009B3590(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022D6CB0);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D55686 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionAlarm_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022D6CB0);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D55686 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022D6CB0);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1009B3950(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392E10))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1) {
      sub_101A75F28();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1009B39D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D6CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009B39F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D6CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1009B3A54()
{
}

void sub_1009B3B00(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    char v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        char v49 = v9;
        id v13 = sub_1009B3168(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              char v48 = v19;
              sub_1009B3050(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              char v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              char v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022D6B70);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022D6B70);
                }
                char v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  char v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLMotionAlarm_Type::Notification, CLMotionAlarm_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionAlarm_Type::Notification, NotificationData_T = CLMotionAlarm_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_1009B3EF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_1009B3F10()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D555E8;
      v0[3] = unk_101D555F8;
      v0[4] = xmmword_101D55608;
      v0[0] = xmmword_101D555C8;
      v0[1] = unk_101D555D8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1009B3FF0(_Unwind_Exception *a1)
{
}

void sub_1009B4008()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1009B4088()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1009B4118(_Unwind_Exception *a1)
{
}

uint64_t sub_1009B4130(uint64_t a1, char *a2, uint64_t *a3, double a4)
{
  double v10 = a4;
  sub_10064DE4C(a1, a3, &v10);
  *(void *)a1 = off_1022D6D30;
  sub_100134750((void *)(a1 + 232), a2);
  sub_100F03BA0((void *)(a1 + 256), a1 + 64, 0);
  if (sub_10014C3C0(a1 + 64))
  {
    int v6 = (char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0) {
      int v6 = *(char **)(a1 + 232);
    }
    sub_1005F7B0C(a1 + 64, v6, (const char **)&qword_10247F218, 0, 0);
    sub_10064DFA4(a1);
    sub_1009B439C();
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D6D60);
    }
    char v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Database is not valid; not initializing",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022D6D60);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLCdmaCellLocationDatabase::CLCdmaCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return a1;
}

void sub_1009B4364(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 255) < 0) {
    operator delete(*v2);
  }
  sub_10064DF48(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009B439C()
{
  sub_10010F274((uint64_t)v2);
  *(void *)((char *)v2
  v2[2] = v0;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

uint64_t sub_1009B44E4(uint64_t a1)
{
  *(void *)a1 = off_1022D6D30;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022D6D60);
  }
  id v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Delete CLCdmaCellLocationDatabase", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D6D60);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLCdmaCellLocationDatabase::~CLCdmaCellLocationDatabase()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  sub_10064DF48(a1);
  return a1;
}

void sub_1009B46B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1009B46C0(uint64_t a1)
{
  sub_1009B44E4(a1);

  operator delete();
}

char *sub_1009B46F8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 29), *((void *)result + 30));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(void *)(a2 + 16) = *((void *)result + 31);
  return result;
}

void sub_1009B4724(uint64_t a1)
{
}

void sub_1009B47A0(uint64_t a1)
{
  sub_10010F274((uint64_t)&v26);
  id v2 = sub_100132EFC(&v27, (uint64_t)"SELECT ", 7);
  size_t v3 = strlen("ROWID");
  uint64_t v4 = sub_100132EFC(v2, (uint64_t)"ROWID", v3);
  char v5 = sub_100132EFC(v4, (uint64_t)" FROM ", 6);
  int v6 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    int v6 = *(const char **)v6;
  }
  size_t v7 = strlen(v6);
  int v8 = sub_100132EFC(v5, (uint64_t)v6, v7);
  __int16 v9 = sub_100132EFC(v8, (uint64_t)" WHERE ", 7);
  double v10 = sub_100132EFC(v9, (uint64_t)"MCC", 3);
  BOOL v11 = sub_100132EFC(v10, (uint64_t)"=? AND ", 7);
  unint64_t v12 = sub_100132EFC(v11, (uint64_t)"SID", 3);
  id v13 = sub_100132EFC(v12, (uint64_t)"=? AND ", 7);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)"NID", 3);
  id v15 = sub_100132EFC(v14, (uint64_t)"=? AND ", 7);
  __int16 v16 = sub_100132EFC(v15, (uint64_t)"BSID", 4);
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)"=? AND ", 7);
  int v18 = sub_100132EFC(v17, (uint64_t)"ZONEID", 6);
  unint64_t v19 = sub_100132EFC(v18, (uint64_t)"=? AND ", 7);
  int v20 = sub_100132EFC(v19, (uint64_t)"BANDCLASS", 9);
  BOOL v21 = sub_100132EFC(v20, (uint64_t)"=? AND ", 7);
  int v22 = sub_100132EFC(v21, (uint64_t)"CHANNEL", 7);
  int v23 = sub_100132EFC(v22, (uint64_t)"=? AND ", 7);
  BOOL v24 = sub_100132EFC(v23, (uint64_t)"PNOFFSET", 8);
  sub_100132EFC(v24, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v29 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1 + 64, (uint64_t)p_p);
}

void sub_1009B4E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1009B4EB8(uint64_t a1, int *a2, uint64_t a3)
{
  sqlite3_int64 v66 = 0;
  int v6 = (void *)(a1 + 256);
  if (sub_100F03BA8((void *)(a1 + 256)))
  {
LABEL_13:
    sub_100082068(v6, &v65);
    int v30 = (sqlite3_stmt *)sub_10014D19C(v65);
    if (sub_10014D1A4(v30, 1, *a2)
      && (BOOL v31 = (sqlite3_stmt *)sub_10014D19C(v65), sub_10014D1A4(v31, 2, a2[8]))
      && (int v32 = (sqlite3_stmt *)sub_10014D19C(v65), sub_10014D1A4(v32, 3, a2[9]))
      && (uint64_t v33 = (sqlite3_stmt *)sub_10014D19C(v65), sub_10014D1A4(v33, 4, a2[11]))
      && (uint64_t v34 = (sqlite3_stmt *)sub_10014D19C(v65), sub_10014D1A4(v34, 5, a2[10]))
      && (uint64_t v35 = (sqlite3_stmt *)sub_10014D19C(v65), sub_10014D1A4(v35, 6, a2[12]))
      && (uint64_t v36 = (sqlite3_stmt *)sub_10014D19C(v65), sub_10014D1A4(v36, 7, a2[13]))
      && (int v37 = (sqlite3_stmt *)sub_10014D19C(v65), sub_10014D1A4(v37, 8, a2[14])))
    {
      BOOL v38 = (sqlite3_stmt *)sub_10014D19C(v65);
      sub_10001FEB0(a1 + 64, v38);
      sqlite3_int64 v66 = sub_1006037D0(a1 + 64);
      uint64_t v39 = sub_10064F1E8((void *)a1, &v66, a3);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022D6D60);
      }
      int v40 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v41 = *a2;
        int v42 = a2[58];
        int v43 = a2[8];
        int v44 = a2[9];
        int v46 = a2[10];
        int v45 = a2[11];
        int v47 = a2[12];
        int v48 = a2[13];
        int v49 = a2[14];
        LODWORD(__p) = 67111168;
        HIDWORD(__p) = v41;
        __int16 v68 = 1024;
        int v69 = v42;
        __int16 v70 = 1024;
        int v71 = v43;
        __int16 v72 = 1024;
        int v73 = v44;
        __int16 v74 = 1024;
        int v75 = v45;
        __int16 v76 = 1024;
        int v77 = v46;
        __int16 v78 = 1024;
        int v79 = v47;
        __int16 v80 = 1024;
        int v81 = v48;
        __int16 v82 = 1024;
        int v83 = v49;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "SET could not bind %d %d %d %d %d %d %d %d %d", (uint8_t *)&__p, 0x38u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022D6D60);
        }
        int v54 = *a2;
        int v55 = a2[58];
        int v56 = a2[8];
        int v57 = a2[9];
        int v59 = a2[10];
        int v58 = a2[11];
        int v60 = a2[12];
        int v61 = a2[13];
        int v62 = a2[14];
        LODWORD(v84) = 67111168;
        HIDWORD(v84) = v54;
        __int16 v85 = 1024;
        int v86 = v55;
        __int16 v87 = 1024;
        LODWORD(v88) = v56;
        WORD2(v88) = 1024;
        *(_DWORD *)((char *)&v88 + 6) = v57;
        WORD5(v88) = 1024;
        HIDWORD(v88) = v58;
        __int16 v89 = 1024;
        int v90 = v59;
        __int16 v91 = 1024;
        int v92 = v60;
        __int16 v93 = 1024;
        int v94 = v61;
        __int16 v95 = 1024;
        int v96 = v62;
        int v63 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)", "%s\n", v63);
        if (v63 != (char *)&__p) {
          free(v63);
        }
      }
      uint64_t v39 = 0;
    }
    uint64_t v50 = v65;
    uint64_t v65 = 0;
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
    }
    return v39;
  }
  sub_10010F274((uint64_t)&v84);
  size_t v7 = sub_100132EFC(&v88, (uint64_t)"INSERT OR REPLACE INTO ", 23);
  int v8 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    int v8 = *(const char **)v8;
  }
  size_t v9 = strlen(v8);
  double v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
  BOOL v11 = sub_100132EFC(v10, (uint64_t)" (", 2);
  unint64_t v12 = sub_100132EFC(v11, (uint64_t)"MCC", 3);
  id v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)"SID", 3);
  id v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
  __int16 v16 = sub_100132EFC(v15, (uint64_t)"NID", 3);
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
  int v18 = sub_100132EFC(v17, (uint64_t)"BSID", 4);
  unint64_t v19 = sub_100132EFC(v18, (uint64_t)", ", 2);
  int v20 = sub_100132EFC(v19, (uint64_t)"ZONEID", 6);
  BOOL v21 = sub_100132EFC(v20, (uint64_t)", ", 2);
  int v22 = sub_100132EFC(v21, (uint64_t)"BANDCLASS", 9);
  int v23 = sub_100132EFC(v22, (uint64_t)", ", 2);
  BOOL v24 = sub_100132EFC(v23, (uint64_t)"CHANNEL", 7);
  __int16 v25 = sub_100132EFC(v24, (uint64_t)", ", 2);
  uint64_t v26 = sub_100132EFC(v25, (uint64_t)"PNOFFSET", 8);
  sub_100132EFC(v26, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 33);
  std::stringbuf::str();
  if ((v73 & 0x8000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  *(void *)(a1 + 256) = sub_100601D1C(a1 + 64, (uint64_t)p_p);
  *(void *)(a1 + 264) = v28;
  if (SBYTE1(v73) < 0) {
    operator delete(__p);
  }
  if (sub_100F03BA8(v6))
  {
    *(uint64_t *)((char *)&v84
    *(void *)&long long v88 = v29;
    if (v98 < 0) {
      operator delete(v97);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    goto LABEL_13;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022D6D60);
  }
  int v51 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "Could not prepare cached insert statement", (uint8_t *)&__p, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D6D60);
    }
    LOWORD(v65) = 0;
    id v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)", "%s\n", v64);
    if (v64 != (char *)&__p) {
      free(v64);
    }
  }
  *(uint64_t *)((char *)&v84
  *(void *)&long long v88 = v52;
  if (v98 < 0) {
    operator delete(v97);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 0;
}

void sub_1009B5784(_Unwind_Exception *a1)
{
}

void sub_1009B57FC(uint64_t a1)
{
}

void sub_1009B5840(uint64_t a1)
{
  sub_10010F274((uint64_t)&v26);
  id v2 = sub_100132EFC(&v27, (uint64_t)"SELECT ", 7);
  size_t v3 = sub_100132EFC(v2, (uint64_t)"MCC", 3);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)", ", 2);
  char v5 = sub_100132EFC(v4, (uint64_t)"SID", 3);
  int v6 = sub_100132EFC(v5, (uint64_t)", ", 2);
  size_t v7 = sub_100132EFC(v6, (uint64_t)"NID", 3);
  int v8 = sub_100132EFC(v7, (uint64_t)", ", 2);
  size_t v9 = sub_100132EFC(v8, (uint64_t)"BSID", 4);
  double v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
  BOOL v11 = sub_100132EFC(v10, (uint64_t)"ZONEID", 6);
  unint64_t v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
  id v13 = sub_100132EFC(v12, (uint64_t)"BANDCLASS", 9);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  id v15 = sub_100132EFC(v14, (uint64_t)"CHANNEL", 7);
  __int16 v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)"PNOFFSET", 8);
  int v18 = sub_100132EFC(v17, (uint64_t)" FROM ", 6);
  unint64_t v19 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    unint64_t v19 = *(const char **)v19;
  }
  size_t v20 = strlen(v19);
  BOOL v21 = sub_100132EFC(v18, (uint64_t)v19, v20);
  int v22 = sub_100132EFC(v21, (uint64_t)" WHERE ", 7);
  size_t v23 = strlen("ROWID");
  BOOL v24 = sub_100132EFC(v22, (uint64_t)"ROWID", v23);
  sub_100132EFC(v24, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v29 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1 + 64, (uint64_t)p_p);
}

void sub_1009B5F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1009B5FE8(uint64_t a1)
{
  sub_10013FA84((uint64_t)&v13);
  *(_DWORD *)a1 = v13;
  if (&v13 != (int *)a1) {
    sub_1000FB43C((char *)(a1 + 8), (char *)v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
  }
  long long v2 = v27[0];
  *(_OWORD *)(a1 + 192) = v26;
  *(_OWORD *)(a1 + 208) = v2;
  *(_OWORD *)(a1 + 220) = *(_OWORD *)((char *)v27 + 12);
  long long v3 = v23;
  *(_OWORD *)(a1 + 128) = v22;
  *(_OWORD *)(a1 + 144) = v3;
  long long v4 = v25;
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v4;
  long long v5 = v19;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = v21;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v6;
  long long v7 = v17;
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v7;
  std::string::operator=((std::string *)(a1 + 240), &__p);
  *(_DWORD *)(a1 + 424) = v39;
  long long v8 = v38;
  *(_OWORD *)(a1 + 392) = v37;
  *(_OWORD *)(a1 + 408) = v8;
  long long v9 = v34;
  *(_OWORD *)(a1 + 328) = v33;
  *(_OWORD *)(a1 + 344) = v9;
  long long v10 = v36;
  *(_OWORD *)(a1 + 360) = v35;
  *(_OWORD *)(a1 + 376) = v10;
  long long v11 = v30;
  *(_OWORD *)(a1 + 264) = v29;
  *(_OWORD *)(a1 + 280) = v11;
  long long v12 = v32;
  *(_OWORD *)(a1 + 296) = v31;
  *(_OWORD *)(a1 + 312) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14)
  {
    id v15 = v14;
    operator delete(v14);
  }
}

void sub_1009B60E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1009B60FC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1009B612C()
{
  qword_10247F218 = (uint64_t)"MCC";
  dword_10247F220 = 1;
  word_10247F224 = 1;
  byte_10247F228 = 0;
  byte_10247F240 = 0;
  qword_10247F248 = (uint64_t)"SID";
  dword_10247F250 = 1;
  word_10247F254 = 1;
  byte_10247F258 = 0;
  byte_10247F270 = 0;
  qword_10247F278 = (uint64_t)"NID";
  dword_10247F280 = 1;
  word_10247F284 = 1;
  byte_10247F288 = 0;
  byte_10247F2A0 = 0;
  qword_10247F2A8 = (uint64_t)"BSID";
  dword_10247F2B0 = 1;
  word_10247F2B4 = 1;
  byte_10247F2B8 = 0;
  byte_10247F2D0 = 0;
  qword_10247F2D8 = (uint64_t)"ZONEID";
  dword_10247F2E0 = 1;
  word_10247F2E4 = 1;
  byte_10247F2E8 = 0;
  byte_10247F300 = 0;
  qword_10247F308 = (uint64_t)"BANDCLASS";
  dword_10247F310 = 1;
  word_10247F314 = 1;
  byte_10247F318 = 0;
  byte_10247F330 = 0;
  qword_10247F338 = (uint64_t)"CHANNEL";
  dword_10247F340 = 1;
  word_10247F344 = 1;
  byte_10247F348 = 0;
  byte_10247F360 = 0;
  qword_10247F368 = (uint64_t)"PNOFFSET";
  dword_10247F370 = 1;
  word_10247F374 = 1;
  byte_10247F378 = 0;
  byte_10247F390 = 0;
  qword_10247F398 = (uint64_t)"Timestamp";
  dword_10247F3A0 = 2;
  word_10247F3A4 = 0;
  byte_10247F3A8 = 0;
  byte_10247F3C0 = 0;
  qword_10247F3C8 = (uint64_t)"Latitude";
  dword_10247F3D0 = 2;
  word_10247F3D4 = 0;
  byte_10247F3D8 = 0;
  byte_10247F3F0 = 0;
  qword_10247F3F8 = (uint64_t)"Longitude";
  dword_10247F400 = 2;
  word_10247F404 = 0;
  byte_10247F408 = 0;
  byte_10247F420 = 0;
  qword_10247F428 = (uint64_t)"HorizontalAccuracy";
  dword_10247F430 = 2;
  word_10247F434 = 0;
  byte_10247F438 = 0;
  byte_10247F450 = 0;
  qword_10247F458 = (uint64_t)"Altitude";
  dword_10247F460 = 2;
  word_10247F464 = 0;
  byte_10247F468 = 0;
  byte_10247F480 = 0;
  qword_10247F488 = (uint64_t)"VerticalAccuracy";
  dword_10247F490 = 2;
  word_10247F494 = 0;
  byte_10247F498 = 0;
  byte_10247F4B0 = 0;
  qword_10247F4B8 = (uint64_t)"Speed";
  dword_10247F4C0 = 2;
  word_10247F4C4 = 0;
  byte_10247F4C8 = 0;
  byte_10247F4E0 = 0;
  qword_10247F4E8 = (uint64_t)"Course";
  dword_10247F4F0 = 2;
  word_10247F4F4 = 0;
  byte_10247F4F8 = 0;
  byte_10247F510 = 0;
  qword_10247F518 = (uint64_t)"Confidence";
  dword_10247F520 = 1;
  word_10247F524 = 0;
  byte_10247F528 = 0;
  byte_10247F540 = 0;
  qword_10247F548 = 0;
  dword_10247F550 = 5;
  word_10247F554 = 0;
  byte_10247F558 = 0;
  byte_10247F570 = 0;
}

void sub_1009B6358(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1009B65AC()
{
}

id sub_1009B6E4C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  if (!result)
  {
    long long v3 = *(void **)(a1 + 32);
    return [v3 toggleVehicleStateListener:0];
  }
  return result;
}

void sub_1009B7838(id a1)
{
  qword_102419248 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DistributedSensing");
}

BOOL sub_1009B7A60(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v8 = v7 + 1;
        if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          uint64_t v11 = OBJC_IVAR___PBDataReader__error;
          int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      uint64_t v11 = OBJC_IVAR___PBDataReader__error;
      int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v12 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v14 = v6 >> 3;
      if ((v6 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v16 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v16 = 0;
        }
        long long v19 = &OBJC_IVAR___ALCLRowingModel__strokeFrequency;
        goto LABEL_37;
      }
      if (v14 == 2) {
        break;
      }
      if (v14 == 1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 <= 0xFFFFFFFFFFFFFFFBLL && v15 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v16 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v16 = 0;
        }
        long long v19 = &OBJC_IVAR___ALCLRowingModel__strokePower;
LABEL_37:
        *(_DWORD *)(a1 + *v19) = v16;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_38:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    *(unsigned char *)(a1 + 20) |= 1u;
    unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      int v16 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
    }
    else
    {
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      int v16 = 0;
    }
    long long v19 = &OBJC_IVAR___ALCLRowingModel__strokeAmp;
    goto LABEL_37;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1009B81AC()
{
  if (qword_10248A730) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A730 + 8))(qword_10248A730);
  }
  if (qword_10248A738) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A738 + 8))(qword_10248A738);
  }
  if (qword_10248A740) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A740 + 8))(qword_10248A740);
  }
  if (qword_10248A748) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A748 + 8))(qword_10248A748);
  }
  if (qword_10248A750) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A750 + 8))(qword_10248A750);
  }
  if (qword_10248A758) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A758 + 8))(qword_10248A758);
  }
  if (qword_10248A760) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A760 + 8))(qword_10248A760);
  }
  if (qword_10248A768) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A768 + 8))(qword_10248A768);
  }
  if (qword_10248A770) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A770 + 8))(qword_10248A770);
  }
  if (qword_10248A778) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A778 + 8))(qword_10248A778);
  }
  if (qword_10248A780) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A780 + 8))(qword_10248A780);
  }
  if (qword_10248A788) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A788 + 8))(qword_10248A788);
  }
  if (qword_10248A790) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A790 + 8))(qword_10248A790);
  }
  if (qword_10248A798) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A798 + 8))(qword_10248A798);
  }
  if (qword_10248A7A0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A7A0 + 8))(qword_10248A7A0);
  }
  if (qword_10248A7A8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A7A8 + 8))(qword_10248A7A8);
  }
  if (qword_10248A7B0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A7B0 + 8))(qword_10248A7B0);
  }
  if (qword_10248A7B8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A7B8 + 8))(qword_10248A7B8);
  }
  uint64_t result = qword_10248A7C0;
  if (qword_10248A7C0)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248A7C0 + 8);
    return v1();
  }
  return result;
}

void sub_1009B8564(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10247F578 & 1) == 0)
  {
    byte_10247F578 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRegionMonitoringLogEntry.pb.cc", a4);
    sub_1003DAD90(v4, v5, v6, v7);
    operator new();
  }
}

uint64_t sub_1009B8CB4(uint64_t result)
{
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(void *)uint64_t result = off_1022D6DF0;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

double sub_1009B8CDC(uint64_t a1)
{
  *(void *)a1 = off_1022D6E68;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_1009B8D20(uint64_t result)
{
  *(unsigned char *)(result + 16) = 0;
  *(void *)double result = &off_1022D6EE0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009B8D48(uint64_t result)
{
  *(void *)double result = &off_1022D6F58;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1009B8D70(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022D6FD0;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 36) = 0;
  *(void *)(result + 28) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1009B8DA4(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = &off_1022D7048;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009B8DCC(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = &off_1022D70C0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *sub_1009B8DF4(void *result)
{
  *double result = off_1022D7138;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0;
  result[5] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_1009B8E24(void *result)
{
  *double result = off_1022D71B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_1009B8E48(void *result)
{
  result[3] = 0;
  *double result = &off_1022D7228;
  result[1] = 0;
  *(void *)((char *)result + 14) = 0;
  return result;
}

uint64_t sub_1009B8E70(uint64_t result)
{
  *(void *)double result = off_1022D72A0;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 12) = 0;
  *(void *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009B8EA4(uint64_t result)
{
  *(void *)double result = off_1022D7318;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_1009B8ECC(void *result)
{
  *double result = &off_1022D7390;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_1009B8EF0(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022D7408;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  return result;
}

uint64_t sub_1009B8F24(uint64_t result)
{
  *(unsigned char *)(result + 16) = 0;
  *(void *)double result = off_1022D7480;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009B8F54(uint64_t result)
{
  *(void *)double result = off_1022D74F8;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009B8F88(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)double result = off_1022D7570;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void *sub_1009B8FBC(void *result)
{
  *double result = &off_1022D7660;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1009B8FE0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    char v7 = *(unsigned char *)(a2 + 8);
    *(_DWORD *)(a1 + 24) |= 1u;
    *(unsigned char *)(a1 + 8) = v7;
    int v4 = *(_DWORD *)(a2 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  char v8 = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 24) |= 2u;
  *(unsigned char *)(a1 + 9) = v8;
  int v4 = *(_DWORD *)(a2 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v9 = *(unsigned char *)(a2 + 10);
  *(_DWORD *)(a1 + 24) |= 4u;
  *(unsigned char *)(a1 + 10) = v9;
  int v4 = *(_DWORD *)(a2 + 24);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  char v10 = *(unsigned char *)(a2 + 11);
  *(_DWORD *)(a1 + 24) |= 8u;
  *(unsigned char *)(a1 + 11) = v10;
  int v4 = *(_DWORD *)(a2 + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    char v12 = *(unsigned char *)(a2 + 13);
    *(_DWORD *)(a1 + 24) |= 0x20u;
    *(unsigned char *)(a1 + 13) = v12;
    int v4 = *(_DWORD *)(a2 + 24);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_20:
  char v11 = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 24) |= 0x10u;
  *(unsigned char *)(a1 + 12) = v11;
  int v4 = *(_DWORD *)(a2 + 24);
  if ((v4 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  char v13 = *(unsigned char *)(a2 + 14);
  *(_DWORD *)(a1 + 24) |= 0x40u;
  *(unsigned char *)(a1 + 14) = v13;
  int v4 = *(_DWORD *)(a2 + 24);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    char v5 = *(unsigned char *)(a2 + 15);
    *(_DWORD *)(a1 + 24) |= 0x80u;
    *(unsigned char *)(a1 + 15) = v5;
    int v4 = *(_DWORD *)(a2 + 24);
  }
LABEL_13:
  if ((v4 & 0x100) != 0)
  {
    char v6 = *(unsigned char *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 0x100u;
    *(unsigned char *)(a1 + 16) = v6;
  }
}

void sub_1009B9174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009B918C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D6DF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009B91AC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D6DF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1009B9200()
{
}

uint64_t sub_1009B9250(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 24);
  if ((_BYTE)v1) {
    *(void *)(result + 8) = 0;
  }
  if ((v1 & 0xFF00) != 0) {
    *(unsigned char *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009B9274(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    char v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        unsigned int v37 = 0;
        char v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 < v8 && (*v9 & 0x80000000) == 0)
        {
          unsigned int v10 = *v9;
          char v11 = v9 + 1;
          *((void *)this + 1) = v11;
LABEL_33:
          *(unsigned char *)(a1 + 8) = v10 != 0;
          *(_DWORD *)(a1 + 24) |= 1u;
          if ((unint64_t)v11 < v8 && *v11 == 16)
          {
            char v12 = v11 + 1;
            *((void *)this + 1) = v12;
            goto LABEL_36;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
        if (result)
        {
          unsigned int v10 = v37;
          char v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
          goto LABEL_33;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        char v12 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_36:
        unsigned int v37 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v20 = v37;
          long long v21 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v20 = *v12;
          long long v21 = v12 + 1;
          *((void *)this + 1) = v21;
        }
        *(unsigned char *)(a1 + 9) = v20 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        if ((unint64_t)v21 >= v8 || *v21 != 24) {
          continue;
        }
        char v13 = v21 + 1;
        *((void *)this + 1) = v13;
LABEL_44:
        unsigned int v37 = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v22 = v37;
          long long v23 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v22 = *v13;
          long long v23 = v13 + 1;
          *((void *)this + 1) = v23;
        }
        *(unsigned char *)(a1 + 10) = v22 != 0;
        *(_DWORD *)(a1 + 24) |= 4u;
        if ((unint64_t)v23 >= v8 || *v23 != 32) {
          continue;
        }
        unint64_t v14 = v23 + 1;
        *((void *)this + 1) = v14;
LABEL_52:
        unsigned int v37 = 0;
        if ((unint64_t)v14 >= v8 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v24 = v37;
          long long v25 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v24 = *v14;
          long long v25 = v14 + 1;
          *((void *)this + 1) = v25;
        }
        *(unsigned char *)(a1 + 11) = v24 != 0;
        *(_DWORD *)(a1 + 24) |= 8u;
        if ((unint64_t)v25 >= v8 || *v25 != 40) {
          continue;
        }
        unint64_t v15 = v25 + 1;
        *((void *)this + 1) = v15;
LABEL_60:
        unsigned int v37 = 0;
        if ((unint64_t)v15 >= v8 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v26 = v37;
          uint64_t v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v26 = *v15;
          uint64_t v27 = v15 + 1;
          *((void *)this + 1) = v27;
        }
        *(unsigned char *)(a1 + 12) = v26 != 0;
        *(_DWORD *)(a1 + 24) |= 0x10u;
        if ((unint64_t)v27 >= v8 || *v27 != 48) {
          continue;
        }
        int v16 = v27 + 1;
        *((void *)this + 1) = v16;
LABEL_68:
        unsigned int v37 = 0;
        if ((unint64_t)v16 >= v8 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v28 = v37;
          long long v29 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v28 = *v16;
          long long v29 = v16 + 1;
          *((void *)this + 1) = v29;
        }
        *(unsigned char *)(a1 + 13) = v28 != 0;
        *(_DWORD *)(a1 + 24) |= 0x20u;
        if ((unint64_t)v29 >= v8 || *v29 != 56) {
          continue;
        }
        unint64_t v17 = v29 + 1;
        *((void *)this + 1) = v17;
LABEL_76:
        unsigned int v37 = 0;
        if ((unint64_t)v17 >= v8 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v30 = v37;
          long long v31 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v30 = *v17;
          long long v31 = v17 + 1;
          *((void *)this + 1) = v31;
        }
        *(unsigned char *)(a1 + 14) = v30 != 0;
        *(_DWORD *)(a1 + 24) |= 0x40u;
        if ((unint64_t)v31 >= v8 || *v31 != 64) {
          continue;
        }
        unint64_t v18 = v31 + 1;
        *((void *)this + 1) = v18;
LABEL_84:
        unsigned int v37 = 0;
        if ((unint64_t)v18 >= v8 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v32 = v37;
          long long v33 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v32 = *v18;
          long long v33 = v18 + 1;
          *((void *)this + 1) = v33;
        }
        *(unsigned char *)(a1 + 15) = v32 != 0;
        *(_DWORD *)(a1 + 24) |= 0x80u;
        if ((unint64_t)v33 >= v8 || *v33 != 72) {
          continue;
        }
        long long v19 = v33 + 1;
        *((void *)this + 1) = v19;
LABEL_92:
        unsigned int v37 = 0;
        if ((unint64_t)v19 >= v8 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v34 = v37;
          long long v35 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v34 = *v19;
          long long v35 = (unsigned __int8 *)(v19 + 1);
          *((void *)this + 1) = v35;
        }
        *(unsigned char *)(a1 + 16) = v34 != 0;
        *(_DWORD *)(a1 + 24) |= 0x100u;
        if (v35 != (unsigned __int8 *)v8 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        char v13 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_44;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        unint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_52;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        unint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_60;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_68;
      case 7u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        unint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_76;
      case 8u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        unint64_t v18 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_84;
      case 9u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        long long v19 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_92;
      default:
        int v7 = TagFallback & 7;
LABEL_27:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_1009B97F0(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 13), a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 15), a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 0x100) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 14), a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v6 & 0x100) == 0) {
    return result;
  }
LABEL_19:
  int v7 = *(unsigned __int8 *)(v5 + 16);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v7, a2, a4);
}

uint64_t sub_1009B9924(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v1)
  {
    unsigned int v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0) {
      v2 += 2;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x10) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x20) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x40) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x80) != 0) {
      v2 += 2;
    }
  }
  else
  {
    unsigned int v2 = 0;
  }
  if ((v1 & 0x100) != 0) {
    uint64_t v3 = v2 + 2;
  }
  else {
    uint64_t v3 = v2;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_1009B99A8(uint64_t a1, void *lpsrc)
{
  sub_1009B8FE0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009B9A30()
{
  return 1;
}

void *sub_1009B9A38@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorOptions");
}

void sub_1009B9A48(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  int v4 = *(_DWORD *)(a2 + 80);
  if (!(_BYTE)v4) {
    goto LABEL_30;
  }
  if (v4)
  {
    uint64_t v5 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 80) |= 1u;
    int v6 = *(std::string **)(a1 + 8);
    if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v6, v5);
    int v4 = *(_DWORD *)(a2 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  int v7 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 80) |= 2u;
  unint64_t v8 = *(std::string **)(a1 + 16);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v8, v7);
  int v4 = *(_DWORD *)(a2 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v9 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 80) |= 4u;
  *(void *)(a1 + 24) = v9;
  int v4 = *(_DWORD *)(a2 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v10 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 80) |= 8u;
  *(void *)(a1 + 32) = v10;
  int v4 = *(_DWORD *)(a2 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_22:
    uint64_t v12 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 80) |= 0x20u;
    *(void *)(a1 + 48) = v12;
    int v4 = *(_DWORD *)(a2 + 80);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t v11 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 80) |= 0x10u;
  *(void *)(a1 + 40) = v11;
  int v4 = *(_DWORD *)(a2 + 80);
  if ((v4 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_23:
  *(_DWORD *)(a1 + 80) |= 0x40u;
  uint64_t v13 = *(void *)(a1 + 56);
  if (!v13) {
    operator new();
  }
  uint64_t v14 = *(void *)(a2 + 56);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_10248A738 + 56);
  }
  sub_1009B8FE0(v13, v14);
  int v4 = *(_DWORD *)(a2 + 80);
  if ((v4 & 0x80) != 0)
  {
LABEL_28:
    unsigned int v15 = *(_DWORD *)(a2 + 64);
    if (v15 >= 3) {
      sub_101A760D8();
    }
    *(_DWORD *)(a1 + 80) |= 0x80u;
    *(_DWORD *)(a1 + 64) = v15;
    int v4 = *(_DWORD *)(a2 + 80);
  }
LABEL_30:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      unsigned int v16 = *(_DWORD *)(a2 + 68);
      if (v16 >= 5) {
        sub_101A760AC();
      }
      *(_DWORD *)(a1 + 80) |= 0x100u;
      *(_DWORD *)(a1 + 68) = v16;
      int v4 = *(_DWORD *)(a2 + 80);
    }
    if ((v4 & 0x200) != 0)
    {
      char v17 = *(unsigned char *)(a2 + 72);
      *(_DWORD *)(a1 + 80) |= 0x200u;
      *(unsigned char *)(a1 + 72) = v17;
      int v4 = *(_DWORD *)(a2 + 80);
    }
    if ((v4 & 0x400) != 0)
    {
      char v18 = *(unsigned char *)(a2 + 73);
      *(_DWORD *)(a1 + 80) |= 0x400u;
      *(unsigned char *)(a1 + 73) = v18;
    }
  }
}

void sub_1009B9D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1009B9D1C(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  if ((void *)qword_10248A738 != result)
  {
    uint64_t result = (void *)result[7];
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  return result;
}

void sub_1009B9E14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D6E68;
  sub_1009B9D1C(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009B9E68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D6E68;
  sub_1009B9D1C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1009B9ED0()
{
}

uint64_t sub_1009B9F3C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 80);
  if ((_BYTE)v1)
  {
    if (v1)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 80) & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    int v1 = *(_DWORD *)(result + 80);
    if ((v1 & 0x40) != 0)
    {
      uint64_t v4 = *(void *)(result + 56);
      if (v4)
      {
        int v5 = *(_DWORD *)(v4 + 24);
        if ((_BYTE)v5) {
          *(void *)(v4 + 8) = 0;
        }
        if ((v5 & 0xFF00) != 0) {
          *(unsigned char *)(v4 + 16) = 0;
        }
        *(_DWORD *)(v4 + 24) = 0;
        int v1 = *(_DWORD *)(result + 80);
      }
    }
    *(_DWORD *)(result + 64) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_DWORD *)(result + 68) = 0;
    *(_WORD *)(result + 72) = 0;
  }
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_1009BA010(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_56;
        }
        *(_DWORD *)(a1 + 80) |= 1u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (result)
        {
          uint64_t v9 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 18)
          {
            *((void *)this + 1) = v9 + 1;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_56;
        }
LABEL_16:
        *(_DWORD *)(a1 + 80) |= 2u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (result)
        {
          uint64_t v10 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 25)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_23;
          }
          continue;
        }
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_56;
        }
LABEL_23:
        *(void *)int v41 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v41) & 1) == 0)return 0; {
        *(void *)(a1 + 24) = *(void *)v41;
        }
        *(_DWORD *)(a1 + 80) |= 4u;
        uint64_t v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 != 33) {
          continue;
        }
        *((void *)this + 1) = v11 + 1;
        goto LABEL_28;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_56;
        }
LABEL_28:
        *(void *)int v41 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v41) & 1) == 0)return 0; {
        *(void *)(a1 + 32) = *(void *)v41;
        }
        *(_DWORD *)(a1 + 80) |= 8u;
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 != 41) {
          continue;
        }
        *((void *)this + 1) = v12 + 1;
LABEL_33:
        *(void *)int v41 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v41) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v41;
        }
        *(_DWORD *)(a1 + 80) |= 0x10u;
        uint64_t v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 49) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_38:
        *(void *)int v41 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v41) & 1) == 0)return 0; {
        *(void *)(a1 + 48) = *(void *)v41;
        }
        int v14 = *(_DWORD *)(a1 + 80) | 0x20;
        *(_DWORD *)(a1 + 80) = v14;
        unsigned int v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 != 58) {
          continue;
        }
        *((void *)this + 1) = v15 + 1;
LABEL_44:
        *(_DWORD *)(a1 + 80) = v14 | 0x40;
        uint64_t v16 = *(void *)(a1 + 56);
        if (!v16) {
          operator new();
        }
        v41[0] = 0;
        char v17 = (char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v41))return 0; {
        }
          }
        else
        {
          v41[0] = *v17;
          *((void *)this + 1) = v17 + 1;
        }
        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 < v26)
        {
          int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41[0]);
          if (sub_1009B9274(v16, this, v28))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
              int v29 = *((_DWORD *)this + 14);
              BOOL v30 = __OFSUB__(v29, 1);
              int v31 = v29 - 1;
              if (v31 < 0 == v30) {
                *((_DWORD *)this + 14) = v31;
              }
              unsigned int v32 = (unsigned char *)*((void *)this + 1);
              unint64_t v18 = *((void *)this + 2);
              if ((unint64_t)v32 < v18 && *v32 == 64)
              {
                long long v19 = v32 + 1;
                *((void *)this + 1) = v19;
LABEL_69:
                v41[0] = 0;
                if ((unint64_t)v19 >= v18 || *v19 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v41);
                  if (!result) {
                    return result;
                  }
                  unsigned int v33 = v41[0];
                }
                else
                {
                  unsigned int v33 = *v19;
                  *((void *)this + 1) = v19 + 1;
                }
                if (v33 <= 2)
                {
                  *(_DWORD *)(a1 + 80) |= 0x80u;
                  *(_DWORD *)(a1 + 64) = v33;
                }
                unsigned int v34 = (unsigned char *)*((void *)this + 1);
                unint64_t v20 = *((void *)this + 2);
                if ((unint64_t)v34 < v20 && *v34 == 72)
                {
                  long long v21 = v34 + 1;
                  *((void *)this + 1) = v21;
LABEL_79:
                  v41[0] = 0;
                  if ((unint64_t)v21 >= v20 || *v21 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v41);
                    if (!result) {
                      return result;
                    }
                    unsigned int v35 = v41[0];
                  }
                  else
                  {
                    unsigned int v35 = *v21;
                    *((void *)this + 1) = v21 + 1;
                  }
                  if (v35 <= 4)
                  {
                    *(_DWORD *)(a1 + 80) |= 0x100u;
                    *(_DWORD *)(a1 + 68) = v35;
                  }
                  long long v36 = (unsigned char *)*((void *)this + 1);
                  unint64_t v22 = *((void *)this + 2);
                  if ((unint64_t)v36 < v22 && *v36 == 80)
                  {
                    long long v23 = v36 + 1;
                    *((void *)this + 1) = v23;
LABEL_89:
                    v41[0] = 0;
                    if ((unint64_t)v23 >= v22 || *v23 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v41);
                      if (!result) {
                        return result;
                      }
                      unsigned int v37 = v41[0];
                      long long v38 = (unsigned char *)*((void *)this + 1);
                      unint64_t v22 = *((void *)this + 2);
                    }
                    else
                    {
                      unsigned int v37 = *v23;
                      long long v38 = v23 + 1;
                      *((void *)this + 1) = v38;
                    }
                    *(unsigned char *)(a1 + 72) = v37 != 0;
                    *(_DWORD *)(a1 + 80) |= 0x200u;
                    if ((unint64_t)v38 < v22 && *v38 == 88)
                    {
                      unsigned int v24 = v38 + 1;
                      *((void *)this + 1) = v24;
LABEL_97:
                      v41[0] = 0;
                      if ((unint64_t)v24 >= v22 || *v24 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v41);
                        if (!result) {
                          return result;
                        }
                        unsigned int v39 = v41[0];
                        int v40 = (unsigned __int8 *)*((void *)this + 1);
                        unint64_t v22 = *((void *)this + 2);
                      }
                      else
                      {
                        unsigned int v39 = *v24;
                        int v40 = (unsigned __int8 *)(v24 + 1);
                        *((void *)this + 1) = v40;
                      }
                      *(unsigned char *)(a1 + 73) = v39 != 0;
                      *(_DWORD *)(a1 + 80) |= 0x400u;
                      if (v40 == (unsigned __int8 *)v22
                        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + 8) = 0;
                        uint64_t result = 1;
                        *((unsigned char *)this + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_33;
        }
        goto LABEL_56;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_38;
        }
        goto LABEL_56;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_56;
        }
        int v14 = *(_DWORD *)(a1 + 80);
        goto LABEL_44;
      case 8u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        long long v19 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_69;
      case 9u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        long long v21 = (char *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        goto LABEL_79;
      case 0xAu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        long long v23 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_89;
      case 0xBu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_56;
        }
        unsigned int v24 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_97;
      default:
        int v7 = TagFallback & 7;
LABEL_56:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1009BA6A0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 80);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    int v6 = *(_DWORD *)(v5 + 80);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 48), a3);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v7 = *(void *)(v5 + 56);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A738 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 64), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 72), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 80) & 0x400) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 68), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x200) != 0) {
    goto LABEL_24;
  }
LABEL_11:
  if ((v6 & 0x400) == 0) {
    return result;
  }
LABEL_25:
  int v8 = *(unsigned __int8 *)(v5 + 73);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v8, (BOOL)a2, a4);
}

uint64_t sub_1009BA81C(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 80);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_47;
  }
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v11 = v12 + 1;
      int v3 = *(_DWORD *)(a1 + 80);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 2;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    unsigned int v4 = v11 + v7;
    if ((v3 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  unsigned int v4 = 0;
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 80);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    v4 += v18 + v14 + 1;
  }
LABEL_24:
  unsigned int v19 = v4 + 9;
  if ((v3 & 4) == 0) {
    unsigned int v19 = v4;
  }
  if ((v3 & 8) != 0) {
    v19 += 9;
  }
  if ((v3 & 0x10) != 0) {
    v19 += 9;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t v5 = v19 + 9;
  }
  else {
    uint64_t v5 = v19;
  }
  if ((v3 & 0x40) != 0)
  {
    uint64_t v20 = *(void *)(a1 + 56);
    if (!v20) {
      uint64_t v20 = *(void *)(qword_10248A738 + 56);
    }
    long long v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009B9924(v20);
    int v22 = (int)v21;
    if (v21 >= 0x80) {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    }
    else {
      int v23 = 1;
    }
    uint64_t v5 = (v5 + v22 + v23 + 1);
    int v3 = *(_DWORD *)(a1 + 80);
  }
  if ((v3 & 0x80) != 0)
  {
    unsigned int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v24 & 0x80000000) != 0)
    {
      int v25 = 11;
    }
    else if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 80);
    }
    else
    {
      int v25 = 2;
    }
    uint64_t v5 = (v25 + v5);
  }
LABEL_47:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 68);
      if ((v26 & 0x80000000) != 0)
      {
        int v27 = 11;
      }
      else if (v26 >= 0x80)
      {
        int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 80);
      }
      else
      {
        int v27 = 2;
      }
      LODWORD(v5) = v27 + v5;
    }
    unsigned int v28 = v5 + 2;
    if ((v3 & 0x200) == 0) {
      unsigned int v28 = v5;
    }
    if ((v3 & 0x400) != 0) {
      uint64_t v5 = v28 + 2;
    }
    else {
      uint64_t v5 = v28;
    }
  }
  *(_DWORD *)(a1 + 76) = v5;
  return v5;
}

void sub_1009BAA18(uint64_t a1, void *lpsrc)
{
  sub_1009B9A48(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BAAA0()
{
  return 1;
}

void *sub_1009BAAA8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.Fence");
}

void sub_1009BAAB8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      char v5 = *(unsigned char *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(unsigned char *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248A740 + 8);
      }
      sub_1009B9A48(v6, v7);
    }
  }
}

void sub_1009BABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BABF0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022D6EE0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A740 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009BAC80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009BABF0(a1);

  operator delete();
}

uint64_t sub_1009BACB8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A740;
  if (!qword_10248A740)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A740;
  }
  return result;
}

void sub_1009BACE8()
{
}

uint64_t sub_1009BAD38(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 24);
  if (v2)
  {
    *(unsigned char *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1009B9F3C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1009BAD78(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    do
    {
      while (1)
      {
        char v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 == 1) {
          break;
        }
        if (TagFallback >> 3 == 2)
        {
          int v7 = TagFallback & 7;
          if (v7 == 2)
          {
            int v8 = *(_DWORD *)(a1 + 24);
            goto LABEL_23;
          }
        }
        else
        {
          int v7 = TagFallback & 7;
        }
LABEL_15:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
      }
        }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v23 = 0;
      unint64_t v10 = (char *)*((void *)this + 1);
      unint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if (!result) {
          return result;
        }
        unsigned int v11 = v23;
        int v12 = (unsigned char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
      }
      else
      {
        unsigned int v11 = *v10;
        int v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }
      *(unsigned char *)(a1 + 16) = v11 != 0;
      int v8 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v8;
    }
    while ((unint64_t)v12 >= v9 || *v12 != 18);
    *((void *)this + 1) = v12 + 1;
LABEL_23:
    *(_DWORD *)(a1 + 24) = v8 | 2;
    uint64_t v14 = *(void *)(a1 + 8);
    if (!v14) {
      operator new();
    }
    unsigned int v24 = 0;
    char v15 = (char *)*((void *)this + 1);
    if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24)) {
        return 0;
      }
    }
    else
    {
      unsigned int v24 = *v15;
      *((void *)this + 1) = v15 + 1;
    }
    int v16 = *((_DWORD *)this + 14);
    int v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17) {
      return 0;
    }
    int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
    if (!sub_1009BA010(v14, this, v19) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    int v20 = *((_DWORD *)this + 14);
    BOOL v21 = __OFSUB__(v20, 1);
    int v22 = v20 - 1;
    if (v22 < 0 == v21) {
      *((_DWORD *)this + 14) = v22;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009BAFF8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0) {
      return result;
    }
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A740 + 8);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_1009BB078(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    uint64_t v4 = 2 * (v3 & 1u);
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_10248A740 + 8);
      }
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BA81C(v5, a2);
      int v8 = (int)v6;
      if (v6 >= 0x80) {
        int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, v7);
      }
      else {
        int v9 = 1;
      }
      uint64_t v4 = (v4 | 1) + v8 + v9;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009BB104(uint64_t a1, void *lpsrc)
{
  sub_1009BAAB8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BB18C()
{
  return 1;
}

void *sub_1009BB194@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorUpdate");
}

void sub_1009BB1A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 >= 8) {
        sub_101A7615C();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248A748 + 8);
      }
      sub_1009B9A48(v6, v7);
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 4) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 20);
      if (v8 >= 5) {
        sub_101A76130();
      }
      *(_DWORD *)(a1 + 32) |= 4u;
      *(_DWORD *)(a1 + 20) = v8;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 8) != 0)
    {
      unsigned int v9 = *(_DWORD *)(a2 + 24);
      if (v9 >= 5) {
        sub_101A76104();
      }
      *(_DWORD *)(a1 + 32) |= 8u;
      *(_DWORD *)(a1 + 24) = v9;
    }
  }
}

void sub_1009BB320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BB338(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022D6F58;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A748 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009BB3C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009BB338(a1);

  operator delete();
}

uint64_t sub_1009BB400(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A748;
  if (!qword_10248A748)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A748;
  }
  return result;
}

void sub_1009BB430()
{
}

uint64_t sub_1009BB480(uint64_t result)
{
  uint64_t v1 = (_DWORD *)result;
  char v2 = *(unsigned char *)(result + 32);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1009B9F3C(result);
      }
    }
    v1[5] = 0;
    v1[6] = 0;
  }
  v1[8] = 0;
  return result;
}

uint64_t sub_1009BB4C4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    unsigned int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v29 = 0;
        unsigned int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!result) {
            return result;
          }
          unsigned int v9 = v29;
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 <= 7)
        {
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        char v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 18)
        {
          *((void *)this + 1) = v15 + 1;
          goto LABEL_28;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
LABEL_28:
        *(_DWORD *)(a1 + 32) |= 2u;
        uint64_t v16 = *(void *)(a1 + 8);
        if (!v16) {
          operator new();
        }
        unsigned int v29 = 0;
        int v17 = (char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0; {
        }
          }
        else
        {
          unsigned int v29 = *v17;
          *((void *)this + 1) = v17 + 1;
        }
        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 < v19)
        {
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
          if (sub_1009BA010(v16, this, v21))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
              int v22 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v22, 1);
              int v24 = v22 - 1;
              if (v24 < 0 == v23) {
                *((_DWORD *)this + 14) = v24;
              }
              int v25 = (unsigned char *)*((void *)this + 1);
              unint64_t v10 = *((void *)this + 2);
              if ((unint64_t)v25 < v10 && *v25 == 24)
              {
                unsigned int v11 = v25 + 1;
                *((void *)this + 1) = v11;
LABEL_42:
                unsigned int v29 = 0;
                if ((unint64_t)v11 >= v10 || *v11 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
                  if (!result) {
                    return result;
                  }
                  unsigned int v26 = v29;
                }
                else
                {
                  unsigned int v26 = *v11;
                  *((void *)this + 1) = v11 + 1;
                }
                if (v26 <= 4)
                {
                  *(_DWORD *)(a1 + 32) |= 4u;
                  *(_DWORD *)(a1 + 20) = v26;
                }
                int v27 = (unsigned char *)*((void *)this + 1);
                unint64_t v12 = *((void *)this + 2);
                if ((unint64_t)v27 < v12 && *v27 == 32)
                {
                  uint64_t v13 = v27 + 1;
                  *((void *)this + 1) = v13;
LABEL_52:
                  unsigned int v29 = 0;
                  if ((unint64_t)v13 >= v12 || *v13 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
                    if (!result) {
                      return result;
                    }
                    unsigned int v28 = v29;
                  }
                  else
                  {
                    unsigned int v28 = *v13;
                    *((void *)this + 1) = v13 + 1;
                  }
                  if (v28 <= 4)
                  {
                    *(_DWORD *)(a1 + 32) |= 8u;
                    *(_DWORD *)(a1 + 24) = v28;
                  }
                  if (*((void *)this + 1) == *((void *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    uint64_t result = 1;
                    *((unsigned char *)this + 36) = 1;
                    return result;
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_42;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_52;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1009BB874(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A748 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_11:
  int v8 = *(_DWORD *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, (int)a2, a4);
}

uint64_t sub_1009BB92C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_19;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248A748 + 8);
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BA81C(v6, a2);
  int v8 = (int)v7;
  if (v7 >= 0x80) {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  }
  else {
    int v9 = 1;
  }
  uint64_t v4 = (v4 + v8 + v9 + 1);
  int v3 = *(_DWORD *)(a1 + 32);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v10 & 0x80000000) != 0)
  {
    int v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    int v11 = 2;
  }
  uint64_t v4 = (v11 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_28:
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v12 & 0x80000000) != 0)
    {
      int v13 = 11;
    }
    else if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    }
    else
    {
      int v13 = 2;
    }
    uint64_t v4 = (v13 + v4);
  }
LABEL_34:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1009BBA64(uint64_t a1, void *lpsrc)
{
  sub_1009BB1A4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BBAEC()
{
  return 1;
}

void *sub_1009BBAF4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceNotificationEvent");
}

void sub_1009BBB04(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v4 = *(_DWORD *)(a2 + 44);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
    }
    else if ((*(unsigned char *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
LABEL_14:
    char v8 = *(unsigned char *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(unsigned char *)(a1 + 24) = v8;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_15:
    int v9 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_DWORD *)(a1 + 28) = v9;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        return;
      }
      goto LABEL_10;
    }
LABEL_16:
    int v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v10;
    if ((*(_DWORD *)(a2 + 44) & 0x20) == 0) {
      return;
    }
LABEL_10:
    int v5 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v5;
  }
}

void sub_1009BBC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BBC50(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D6FD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009BBC70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D6FD0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_1009BBCC4(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A750;
  if (!qword_10248A750)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A750;
  }
  return result;
}

void sub_1009BBCF4()
{
}

uint64_t sub_1009BBD50(uint64_t result)
{
  if (*(unsigned char *)(result + 44))
  {
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 28) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1009BBD70(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_28;
        }
        *(void *)int v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v24) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v24;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        char v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 != 17) {
          continue;
        }
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_28;
        }
LABEL_14:
        *(void *)int v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v24) & 1) == 0)return 0; {
        *(void *)(a1 + 16) = *(void *)v24;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        int v10 = (unsigned char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 != 24) {
          continue;
        }
        int v11 = v10 + 1;
        *((void *)this + 1) = v11;
LABEL_20:
        v24[0] = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!result) {
            return result;
          }
          unsigned int v12 = v24[0];
          int v13 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v12 = *v11;
          int v13 = v11 + 1;
          *((void *)this + 1) = v13;
        }
        *(unsigned char *)(a1 + 24) = v12 != 0;
        *(_DWORD *)(a1 + 44) |= 4u;
        if ((unint64_t)v13 >= v9 || *v13 != 32) {
          continue;
        }
        uint64_t v14 = v13 + 1;
        *((void *)this + 1) = v14;
LABEL_37:
        v24[0] = 0;
        if ((unint64_t)v14 >= v9 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!result) {
            return result;
          }
          unsigned int v18 = v24[0];
          int v19 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v18 = *v14;
          int v19 = v14 + 1;
          *((void *)this + 1) = v19;
        }
        *(_DWORD *)(a1 + 28) = v18;
        *(_DWORD *)(a1 + 44) |= 8u;
        if ((unint64_t)v19 >= v9 || *v19 != 40) {
          continue;
        }
        char v15 = v19 + 1;
        *((void *)this + 1) = v15;
LABEL_45:
        v24[0] = 0;
        if ((unint64_t)v15 >= v9 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!result) {
            return result;
          }
          unsigned int v20 = v24[0];
          unsigned int v21 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v20 = *v15;
          unsigned int v21 = v15 + 1;
          *((void *)this + 1) = v21;
        }
        *(_DWORD *)(a1 + 32) = v20;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        if ((unint64_t)v21 >= v9 || *v21 != 48) {
          continue;
        }
        uint64_t v16 = v21 + 1;
        *((void *)this + 1) = v16;
LABEL_53:
        v24[0] = 0;
        if ((unint64_t)v16 >= v9 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!result) {
            return result;
          }
          unsigned int v22 = v24[0];
          BOOL v23 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v22 = *v16;
          BOOL v23 = (unsigned __int8 *)(v16 + 1);
          *((void *)this + 1) = v23;
        }
        *(_DWORD *)(a1 + 36) = v22;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        if (v23 != (unsigned __int8 *)v9 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_20;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_37;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        char v15 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_45;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_53;
      default:
        int v7 = TagFallback & 7;
LABEL_28:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_1009BC0F8(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 32), a2, a4);
    if ((*(_DWORD *)(v5 + 44) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  int v7 = *(_DWORD *)(v5 + 36);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v7, a2, a4);
}

uint64_t sub_1009BC1D8(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  if (!*(unsigned char *)(a1 + 44))
  {
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  unsigned int v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 2;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      int v7 = 2;
    }
    uint64_t v5 = (v7 + v5);
    if ((v3 & 0x10) == 0)
    {
LABEL_9:
      if ((v3 & 0x20) == 0) {
        goto LABEL_30;
      }
      goto LABEL_24;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  char v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v8 & 0x80000000) != 0)
  {
    int v9 = 11;
  }
  else if (v8 >= 0x80)
  {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    int v9 = 2;
  }
  uint64_t v5 = (v9 + v5);
  if ((v3 & 0x20) != 0)
  {
LABEL_24:
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    }
    else
    {
      int v11 = 2;
    }
    uint64_t v5 = (v11 + v5);
  }
LABEL_30:
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

void sub_1009BC2D8(uint64_t a1, void *lpsrc)
{
  sub_1009BBB04(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BC360()
{
  return 1;
}

void *sub_1009BC368@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.MicroLocationEvent");
}

void sub_1009BC378(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 >= 5) {
        sub_101A76188();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248A758 + 8);
      }
      sub_1009B9A48(v6, v7);
    }
  }
}

void sub_1009BC4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BC4BC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022D7048;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A758 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009BC54C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009BC4BC(a1);

  operator delete();
}

uint64_t sub_1009BC584(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A758;
  if (!qword_10248A758)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A758;
  }
  return result;
}

void sub_1009BC5B4()
{
}

uint64_t sub_1009BC604(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1009B9F3C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1009BC644(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_15;
        }
        unsigned int v21 = 0;
        char v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!result) {
            return result;
          }
          unsigned int v9 = v21;
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 <= 4)
        {
          *(_DWORD *)(a1 + 24) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_15;
      }
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        break;
      }
LABEL_15:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_25:
    *(_DWORD *)(a1 + 24) |= 2u;
    uint64_t v12 = *(void *)(a1 + 8);
    if (!v12) {
      operator new();
    }
    unsigned int v22 = 0;
    int v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22)) {
        return 0;
      }
    }
    else
    {
      unsigned int v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }
    int v14 = *((_DWORD *)this + 14);
    int v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0;
    }
    int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    if (!sub_1009BA010(v12, this, v17) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    int v18 = *((_DWORD *)this + 14);
    BOOL v19 = __OFSUB__(v18, 1);
    int v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009BC8C4(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0) {
      return result;
    }
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A758 + 8);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_1009BC944(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 24);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        goto LABEL_19;
      }
    }
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A758 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BA81C(v6, a2);
    int v9 = (int)v7;
    if (v7 >= 0x80) {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    }
    else {
      int v10 = 1;
    }
    uint64_t v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009BCA0C(uint64_t a1, void *lpsrc)
{
  sub_1009BC378(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BCA94()
{
  return 1;
}

void *sub_1009BCA9C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLocationType");
}

void sub_1009BCAAC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 >= 2) {
        sub_101A761B4();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248A760 + 8);
      }
      sub_1009B9A48(v6, v7);
    }
  }
}

void sub_1009BCBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BCBF0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022D70C0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A760 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009BCC80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009BCBF0(a1);

  operator delete();
}

uint64_t sub_1009BCCB8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A760;
  if (!qword_10248A760)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A760;
  }
  return result;
}

void sub_1009BCCE8()
{
}

uint64_t sub_1009BCD38(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1009B9F3C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1009BCD78(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_15;
        }
        unsigned int v21 = 0;
        unsigned int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!result) {
            return result;
          }
          unsigned int v9 = v21;
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 <= 1)
        {
          *(_DWORD *)(a1 + 24) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_15;
      }
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        break;
      }
LABEL_15:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_25:
    *(_DWORD *)(a1 + 24) |= 2u;
    uint64_t v12 = *(void *)(a1 + 8);
    if (!v12) {
      operator new();
    }
    unsigned int v22 = 0;
    int v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22)) {
        return 0;
      }
    }
    else
    {
      unsigned int v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }
    int v14 = *((_DWORD *)this + 14);
    int v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0;
    }
    int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    if (!sub_1009BA010(v12, this, v17) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    int v18 = *((_DWORD *)this + 14);
    BOOL v19 = __OFSUB__(v18, 1);
    int v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009BCFF8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0) {
      return result;
    }
  }
  else if ((v6 & 2) == 0)
  {
    return result;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A760 + 8);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t sub_1009BD078(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 24);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        goto LABEL_19;
      }
    }
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A760 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BA81C(v6, a2);
    int v9 = (int)v7;
    if (v7 >= 0x80) {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
    }
    else {
      int v10 = 1;
    }
    uint64_t v4 = (v4 + v9 + v10 + 1);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009BD140(uint64_t a1, void *lpsrc)
{
  sub_1009BCAAC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BD1C8()
{
  return 1;
}

void *sub_1009BD1D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLoiNotFound");
}

double sub_1009BD1E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 1u;
      uint64_t v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
    }
    else if ((*(unsigned char *)(a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = result;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_8;
    }
LABEL_14:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }
  return result;
}

void sub_1009BD318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BD330(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7138;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009BD384(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7138;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1009BD3EC()
{
}

uint64_t sub_1009BD444(uint64_t result)
{
  if (*(unsigned char *)(result + 44))
  {
    if (*(unsigned char *)(result + 44))
    {
      uint64_t v1 = *(void *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(unsigned char **)uint64_t v1 = 0;
          *(void *)(v1 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v1 = 0;
          *(unsigned char *)(v1 + 23) = 0;
        }
      }
    }
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_1009BD494(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_31;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (result)
        {
          int v9 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 17)
          {
            *((void *)this + 1) = v9 + 1;
            goto LABEL_16;
          }
          continue;
        }
        return result;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_31;
        }
LABEL_16:
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v12;
        *(_DWORD *)(a1 + 44) |= 2u;
        int v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 25) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
        goto LABEL_21;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_31;
        }
LABEL_21:
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 24) = v12;
        *(_DWORD *)(a1 + 44) |= 4u;
        int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 != 33) {
          continue;
        }
        *((void *)this + 1) = v11 + 1;
LABEL_26:
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 32) = v12;
        *(_DWORD *)(a1 + 44) |= 8u;
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_26;
        }
        goto LABEL_31;
      default:
        int v7 = TagFallback & 7;
LABEL_31:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
    return result;
  }
}

uint64_t sub_1009BD710(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 44);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    int v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
      if ((*(_DWORD *)(v4 + 44) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v5 & 8) == 0) {
    return result;
  }
LABEL_9:
  double v6 = *(double *)(v4 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, v6, a3);
}

uint64_t sub_1009BD7B8(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 44);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 44))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        int v11 = v12 + 1;
        int v3 = *(_DWORD *)(a1 + 44);
        char v8 = *(unsigned char *)(v6 + 23);
      }
      else
      {
        int v11 = 2;
      }
      if (v8 < 0) {
        int v7 = v9;
      }
      unsigned int v4 = v11 + v7;
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      uint64_t result = v4 + 9;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

double sub_1009BD86C(uint64_t a1, void *lpsrc)
{
  return sub_1009BD1E0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BD8F4()
{
  return 1;
}

void *sub_1009BD8FC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.LocationOfInterest");
}

void sub_1009BD90C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248A770 + 8);
      }
      sub_1009BD1E0(v5, v6);
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248A770 + 16);
      }
      sub_1009B9A48(v7, v8);
    }
  }
}

void sub_1009BDA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1009BDAA4(void *result)
{
  if ((void *)qword_10248A770 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_1009BDB44(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D71B0;
  sub_1009BDAA4(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009BDB98(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D71B0;
  sub_1009BDAA4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_1009BDC00(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A770;
  if (!qword_10248A770)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A770;
  }
  return result;
}

void sub_1009BDC30()
{
}

uint64_t sub_1009BDC7C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 28);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1009BD444(result);
        int v2 = *(_DWORD *)(v1 + 28);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result) {
        uint64_t result = sub_1009B9F3C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_1009BDCCC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v27 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0; {
        }
          }
        else
        {
          unsigned int v27 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_1009BD494(v8, this, v13) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        unsigned int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 18)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_17;
      }
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v18 = *(void *)(a1 + 16);
      if (!v18) {
        operator new();
      }
      unsigned int v28 = 0;
      BOOL v19 = (char *)*((void *)this + 1);
      if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0; {
      }
        }
      else
      {
        unsigned int v28 = *v19;
        *((void *)this + 1) = v19 + 1;
      }
      int v20 = *((_DWORD *)this + 14);
      int v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21) {
        return 0;
      }
      int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_1009BA010(v18, this, v23) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      int v24 = *((_DWORD *)this + 14);
      BOOL v15 = __OFSUB__(v24, 1);
      int v25 = v24 - 1;
      if (v25 < 0 == v15) {
        *((_DWORD *)this + 14) = v25;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_1009BDFE8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A770 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A770 + 16);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_1009BE078(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 28))
  {
    uint64_t v3 = 0;
    goto LABEL_18;
  }
  if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248A770 + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BD7B8(v4, a2);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  }
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A770 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BA81C(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v3 = (v3 + v11 + v12 + 1);
  }
LABEL_18:
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

void sub_1009BE14C(uint64_t a1, void *lpsrc)
{
  sub_1009BD90C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BE1D4()
{
  return 1;
}

void *sub_1009BE1DC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceSetLoi");
}

void sub_1009BE1EC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248A778 + 8);
      }
      sub_1009B9A48(v5, v6);
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 16);
      if (v7 >= 5) {
        sub_101A761E0();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      char v8 = *(unsigned char *)(a2 + 20);
      *(_DWORD *)(a1 + 28) |= 4u;
      *(unsigned char *)(a1 + 20) = v8;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 8) != 0)
    {
      char v9 = *(unsigned char *)(a2 + 21);
      *(_DWORD *)(a1 + 28) |= 8u;
      *(unsigned char *)(a1 + 21) = v9;
    }
  }
}

void sub_1009BE350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BE368(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022D7228;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A778 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009BE3F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009BE368(a1);

  operator delete();
}

uint64_t sub_1009BE430(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A778;
  if (!qword_10248A778)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A778;
  }
  return result;
}

void sub_1009BE460()
{
}

uint64_t sub_1009BE4B0(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 28))
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_1009B9F3C(result);
      }
    }
    *(_DWORD *)(v1 + 16) = 0;
    *(_WORD *)(v1 + 20) = 0;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_1009BE4F4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v30 = 0;
        char v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30))return 0; {
        }
          }
        else
        {
          unsigned int v30 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30);
        if (!sub_1009BA010(v8, this, v18) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        int v22 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v22 >= v10 || *v22 != 16) {
          continue;
        }
        int v11 = v22 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_32;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_32:
        unsigned int v30 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!result) {
            return result;
          }
          unsigned int v23 = v30;
        }
        else
        {
          unsigned int v23 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v23 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 16) = v23;
        }
        int v25 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v25 >= v12 || *v25 != 24) {
          continue;
        }
        unsigned int v13 = v25 + 1;
        *((void *)this + 1) = v13;
LABEL_42:
        unsigned int v30 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!result) {
            return result;
          }
          unsigned int v26 = v30;
          unsigned int v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          unsigned int v26 = *v13;
          unsigned int v27 = v13 + 1;
          *((void *)this + 1) = v27;
        }
        *(unsigned char *)(a1 + 20) = v26 != 0;
        *(_DWORD *)(a1 + 28) |= 4u;
        if ((unint64_t)v27 >= v12 || *v27 != 32) {
          continue;
        }
        int v14 = v27 + 1;
        *((void *)this + 1) = v14;
LABEL_50:
        unsigned int v30 = 0;
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!result) {
            return result;
          }
          unsigned int v28 = v30;
          unsigned int v29 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          unsigned int v28 = *v14;
          unsigned int v29 = (unsigned __int8 *)(v14 + 1);
          *((void *)this + 1) = v29;
        }
        *(unsigned char *)(a1 + 21) = v28 != 0;
        *(_DWORD *)(a1 + 28) |= 8u;
        if (v29 != (unsigned __int8 *)v12 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_42;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_50;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_1009BE8A4(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A778 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), (BOOL)a2, a4);
      if ((*(_DWORD *)(v5 + 28) & 8) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_11:
  int v8 = *(unsigned __int8 *)(v5 + 21);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, (BOOL)a2, a4);
}

uint64_t sub_1009BE95C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A778 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BA81C(v6, a2);
    int v8 = (int)v7;
    if (v7 >= 0x80) {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    }
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 28);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_18;
    }
  }
  unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v10 & 0x80000000) != 0)
  {
    int v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v11 = 2;
  }
  v4 += v11;
LABEL_18:
  unsigned int v12 = v4 + 2;
  if ((v3 & 4) == 0) {
    unsigned int v12 = v4;
  }
  if ((v3 & 8) != 0) {
    uint64_t result = v12 + 2;
  }
  else {
    uint64_t result = v12;
  }
LABEL_23:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void sub_1009BEA2C(uint64_t a1, void *lpsrc)
{
  sub_1009BE1EC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BEAB4()
{
  return 1;
}

void *sub_1009BEABC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceUpdateStatusForHandoff");
}

void sub_1009BEACC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      if (v5 >= 6) {
        sub_101A7620C();
      }
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      char v7 = *(unsigned char *)(a2 + 12);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(unsigned char *)(a1 + 12) = v7;
      int v4 = *(_DWORD *)(a2 + 28);
      if ((v4 & 4) == 0)
      {
LABEL_9:
        if ((v4 & 8) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_9;
    }
    int v8 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 4u;
    int v9 = *(std::string **)(a1 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v9, v8);
    if ((*(_DWORD *)(a2 + 28) & 8) != 0)
    {
LABEL_10:
      char v6 = *(unsigned char *)(a2 + 13);
      *(_DWORD *)(a1 + 28) |= 8u;
      *(unsigned char *)(a1 + 13) = v6;
    }
  }
}

void sub_1009BEC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BEC24(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D72A0;
  sub_1002444F8((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009BEC78(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D72A0;
  sub_1002444F8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_1009BECE0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A780;
  if (!qword_10248A780)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A780;
  }
  return result;
}

void sub_1009BED10()
{
}

uint64_t sub_1009BED6C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(_DWORD *)(result + 8) = 0;
    *(unsigned char *)(result + 12) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(result + 13) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1009BEDC0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    unsigned int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v24 = 0;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
          goto LABEL_23;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
        if (result)
        {
          unsigned int v9 = v24;
LABEL_23:
          if (v9 <= 5)
          {
            *(_DWORD *)(a1 + 28) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }
          int v15 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v15 < v10 && *v15 == 16)
          {
            int v11 = v15 + 1;
            *((void *)this + 1) = v11;
            goto LABEL_28;
          }
          continue;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_28:
        unsigned int v23 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
          if (!result) {
            return result;
          }
          unsigned int v16 = v23;
          int v17 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v16 = *v11;
          int v17 = v11 + 1;
          *((void *)this + 1) = v17;
        }
        *(unsigned char *)(a1 + 12) = v16 != 0;
        int v12 = *(_DWORD *)(a1 + 28) | 2;
        *(_DWORD *)(a1 + 28) = v12;
        if ((unint64_t)v17 >= v10 || *v17 != 26) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 28) = v12 | 4;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v18 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v18 >= v13 || *v18 != 32) {
          continue;
        }
        int v14 = v18 + 1;
        *((void *)this + 1) = v14;
LABEL_42:
        unsigned int v22 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!result) {
            return result;
          }
          unsigned int v19 = v22;
          BOOL v20 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          unsigned int v19 = *v14;
          BOOL v20 = (unsigned __int8 *)(v14 + 1);
          *((void *)this + 1) = v20;
        }
        *(unsigned char *)(a1 + 13) = v19 != 0;
        *(_DWORD *)(a1 + 28) |= 8u;
        if (v20 != (unsigned __int8 *)v13 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        int v12 = *(_DWORD *)(a1 + 28);
        goto LABEL_36;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_42;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_1009BF0B4(uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
      if ((*(_DWORD *)(v5 + 28) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 12), a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  int v7 = *(unsigned __int8 *)(v5 + 13);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_1009BF15C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 28))
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        int v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v4 = 2;
      }
    }
    else
    {
      int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      unsigned int v7 = v4 + 2;
    }
    else {
      unsigned int v7 = v4;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      char v10 = v9;
      uint64_t v11 = *(void *)(v8 + 8);
      if ((v9 & 0x80u) == 0) {
        unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12 >= 0x80)
      {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
        int v9 = *(unsigned __int8 *)(v8 + 23);
        uint64_t v11 = *(void *)(v8 + 8);
        int v3 = *(_DWORD *)(a1 + 28);
        char v10 = *(unsigned char *)(v8 + 23);
      }
      else
      {
        int v13 = 1;
      }
      if (v10 < 0) {
        int v9 = v11;
      }
      v7 += v13 + v9 + 1;
    }
    if ((v3 & 8) != 0) {
      uint64_t result = v7 + 2;
    }
    else {
      uint64_t result = v7;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void sub_1009BF240(uint64_t a1, void *lpsrc)
{
  sub_1009BEACC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BF2C8()
{
  return 1;
}

void *sub_1009BF2D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.LocationRequest");
}

void sub_1009BF2E0(uint64_t a1, unsigned char *a2)
{
  if (a2 == (unsigned char *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = a2[16];
  if ((_BYTE)v4)
  {
    if (a2[16])
    {
      char v5 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(unsigned char *)(a1 + 8) = v5;
      int v4 = *((_DWORD *)a2 + 4);
    }
    if ((v4 & 2) != 0)
    {
      char v6 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(unsigned char *)(a1 + 9) = v6;
    }
  }
}

void sub_1009BF38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BF3A4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7318;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009BF3C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7318;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1009BF418()
{
}

uint64_t sub_1009BF468(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_WORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1009BF47C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      char v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v17 = 0;
      char v10 = (char *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!result) {
          return result;
        }
        unsigned int v11 = v17;
        unint64_t v12 = (unsigned char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
      }
      else
      {
        unsigned int v11 = *v10;
        unint64_t v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }
      *(unsigned char *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        int v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_23:
        unsigned int v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v13 = v16;
          int v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v13 = *v9;
          int v14 = (unsigned __int8 *)(v9 + 1);
          *((void *)this + 1) = v14;
        }
        *(unsigned char *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_1009BF634(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(unsigned __int8 *)(v5 + 9);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t sub_1009BF6A0(uint64_t a1)
{
  unsigned int v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  if ((*(_DWORD *)(a1 + 16) & 2) != 0) {
    v1 += 2;
  }
  if (*(_DWORD *)(a1 + 16)) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(a1 + 12) = v2;
  return v2;
}

void sub_1009BF6C8(uint64_t a1, unsigned char *lpsrc)
{
  sub_1009BF2E0(a1, lpsrc);
}

uint64_t sub_1009BF750()
{
  return 1;
}

void *sub_1009BF758@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.ScenarioTriggerOptions");
}

void sub_1009BF768(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 >= 3) {
        sub_101A76264();
      }
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      int v7 = *(unsigned char **)(a2 + 8);
      if (!v7) {
        int v7 = *(unsigned char **)(qword_10248A790 + 8);
      }
      sub_1009BF2E0(v6, v7);
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 20);
      if (v8 >= 3) {
        sub_101A76238();
      }
      *(_DWORD *)(a1 + 28) |= 4u;
      *(_DWORD *)(a1 + 20) = v8;
    }
  }
}

void sub_1009BF8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009BF8B8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022D7390;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A790 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009BF948(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009BF8B8(a1);

  operator delete();
}

uint64_t sub_1009BF980(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A790;
  if (!qword_10248A790)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A790;
  }
  return result;
}

void sub_1009BF9B0()
{
}

uint64_t sub_1009BF9FC(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 16)) {
          *(_WORD *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
    *(_DWORD *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1009BFA30(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v27 = 0;
        unsigned int v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v12 = v27;
        }
        else
        {
          unsigned int v12 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v12 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 1u;
          *(_DWORD *)(a1 + 16) = v12;
        }
        int v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 18)
        {
          *((void *)this + 1) = v14 + 1;
          goto LABEL_28;
        }
      }
      if (v7 == 2) {
        break;
      }
      if (v7 == 3)
      {
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          char v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          goto LABEL_42;
        }
      }
      else
      {
        int v8 = TagFallback & 7;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    int v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_18;
    }
LABEL_28:
    *(_DWORD *)(a1 + 28) |= 2u;
    uint64_t v15 = *(void *)(a1 + 8);
    if (!v15) {
      operator new();
    }
    unsigned int v28 = 0;
    unsigned int v16 = (char *)*((void *)this + 1);
    if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v16;
      *((void *)this + 1) = v16 + 1;
    }
    int v17 = *((_DWORD *)this + 14);
    int v18 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v17 + 1;
    if (v17 >= v18) {
      return 0;
    }
    int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_1009BF47C(v15, this, v20) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
    int v21 = *((_DWORD *)this + 14);
    BOOL v22 = __OFSUB__(v21, 1);
    int v23 = v21 - 1;
    if (v23 < 0 == v22) {
      *((_DWORD *)this + 14) = v23;
    }
    unsigned int v24 = (unsigned char *)*((void *)this + 1);
    unint64_t v9 = *((void *)this + 2);
    if ((unint64_t)v24 < v9 && *v24 == 24)
    {
      char v10 = v24 + 1;
      *((void *)this + 1) = v10;
LABEL_42:
      unsigned int v26 = 0;
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
        if (!result) {
          return result;
        }
        unsigned int v25 = v26;
      }
      else
      {
        unsigned int v25 = *v10;
        *((void *)this + 1) = v10 + 1;
      }
      if (v25 <= 2)
      {
        *(_DWORD *)(a1 + 28) |= 4u;
        *(_DWORD *)(a1 + 20) = v25;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_1009BFD14(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A790 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0)
  {
LABEL_9:
    int v8 = *(_DWORD *)(v5 + 20);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, (int)a2, a4);
  }
  return result;
}

uint64_t sub_1009BFDB0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_28;
  }
  if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_21;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A790 + 8);
    }
    int v7 = 2 * (*(_DWORD *)(v6 + 16) & 1);
    if ((*(_DWORD *)(v6 + 16) & 2) != 0) {
      v7 += 2;
    }
    if (*(_DWORD *)(v6 + 16)) {
      int v8 = v7;
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)(v6 + 12) = v8;
    uint64_t v4 = (v4 + v8 + 2);
    int v3 = *(_DWORD *)(a1 + 28);
    goto LABEL_21;
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_21;
      }
      goto LABEL_13;
    }
    uint64_t v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    }
    else
    {
      int v10 = 2;
    }
    uint64_t v4 = (v10 + v4);
  }
LABEL_28:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_1009BFEA0(uint64_t a1, void *lpsrc)
{
  sub_1009BF768(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009BFF28()
{
  return 1;
}

void *sub_1009BFF30@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.ScenarioTrigger");
}

void sub_1009BFF40(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        sub_1009C2AD8();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100408E50(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 40) + a1[10]);
  if (*(int *)(a2 + 40) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 32) + 8 * v9);
      int v11 = a1[11];
      uint64_t v12 = (int)a1[10];
      if ((int)v12 >= v11)
      {
        if (v11 == a1[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v11 + 1);
          int v11 = a1[11];
        }
        a1[11] = v11 + 1;
        sub_1009C2AD8();
      }
      uint64_t v13 = *((void *)a1 + 4);
      a1[10] = v12 + 1;
      sub_100408E50(*(void *)(v13 + 8 * v12), v10);
      ++v9;
    }
    while (v9 < *(int *)(a2 + 40));
  }
}

void sub_1009C0110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009C0128(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022D7408;
  sub_10016B2E8(a1 + 4);
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1009C0190(uint64_t *a1)
{
  sub_1009C0128(a1);

  operator delete();
}

uint64_t sub_1009C01C8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A798;
  if (!qword_10248A798)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A798;
  }
  return result;
}

void sub_1009C01F8()
{
}

uint64_t sub_1009C0254(uint64_t a1)
{
  sub_10026DEDC(a1 + 8);
  uint64_t result = sub_10026DEDC(a1 + 32);
  *(_DWORD *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1009C0288(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  int v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        uint64_t v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v7;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_30;
        }
        while (1)
        {
          int v10 = a1[5];
          uint64_t v11 = a1[4];
          if ((int)v11 >= v10)
          {
            if (v10 == a1[6])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v10 + 1);
              int v10 = a1[5];
            }
            a1[5] = v10 + 1;
            sub_1009C2AD8();
          }
          uint64_t v12 = *((void *)a1 + 1);
          a1[4] = v11 + 1;
          uint64_t v13 = *(void *)(v12 + 8 * v11);
          unsigned int v37 = 0;
          int v14 = (char *)*((void *)this + 1);
          if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37))return 0; {
          }
            }
          else
          {
            unsigned int v37 = *v14;
            *((void *)this + 1) = v14 + 1;
          }
          int v15 = *((_DWORD *)this + 14);
          int v16 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v15 + 1;
          if (v15 >= v16) {
            return 0;
          }
          int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37);
          if (!sub_100409208(v13, this, v18) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
          int v19 = *((_DWORD *)this + 14);
          BOOL v20 = __OFSUB__(v19, 1);
          int v21 = v19 - 1;
          if (v21 < 0 == v20) {
            *((_DWORD *)this + 14) = v21;
          }
          BOOL v22 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v22 >= *((void *)this + 2)) {
            break;
          }
          int v23 = *v22;
          if (v23 != 10)
          {
            if (v23 != 18) {
              goto LABEL_2;
            }
            goto LABEL_34;
          }
          *((void *)this + 1) = v22 + 1;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_30;
      }
      while (1)
      {
        int v24 = a1[11];
        uint64_t v25 = a1[10];
        if ((int)v25 >= v24)
        {
          if (v24 == a1[12])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v24 + 1);
            int v24 = a1[11];
          }
          a1[11] = v24 + 1;
          sub_1009C2AD8();
        }
        uint64_t v26 = *((void *)a1 + 4);
        a1[10] = v25 + 1;
        uint64_t v27 = *(void *)(v26 + 8 * v25);
        unsigned int v38 = 0;
        unsigned int v28 = (char *)*((void *)this + 1);
        if ((unint64_t)v28 >= *((void *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38))return 0; {
        }
          }
        else
        {
          unsigned int v38 = *v28;
          *((void *)this + 1) = v28 + 1;
        }
        int v29 = *((_DWORD *)this + 14);
        int v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30) {
          return 0;
        }
        int v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v38);
        if (!sub_100409208(v27, this, v32) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        int v33 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v33, 1);
        int v34 = v33 - 1;
        if (v34 < 0 == v20) {
          *((_DWORD *)this + 14) = v34;
        }
        BOOL v22 = (unsigned char *)*((void *)this + 1);
        unsigned int v35 = (unsigned char *)*((void *)this + 2);
        if (v22 >= v35 || *v22 != 18) {
          break;
        }
LABEL_34:
        *((void *)this + 1) = v22 + 1;
      }
      if (v22 == v35 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v9 = TagFallback & 7;
LABEL_30:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_1009C05D0(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  return result;
}

uint64_t sub_1009C0664(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100409900(*(void *)(*(void *)(a1 + 8) + 8 * v4), a2);
      int v6 = (int)v5;
      if (v5 >= 0x80) {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      }
      else {
        int v7 = 1;
      }
      v3 += v6 + v7;
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = (v8 + v3);
  if (v8 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100409900(*(void *)(*(void *)(a1 + 32) + 8 * v10), a2);
      int v12 = (int)v11;
      if (v11 >= 0x80) {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      }
      else {
        int v13 = 1;
      }
      uint64_t v9 = (v12 + v9 + v13);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 40));
  }
  *(_DWORD *)(a1 + 56) = v9;
  return v9;
}

void sub_1009C0738(_DWORD *a1, void *lpsrc)
{
  sub_1009BFF40(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009C07C0()
{
  return 1;
}

void *sub_1009C07C8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.EntryExitScanNetworks");
}

void sub_1009C07D8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      char v5 = *(unsigned char *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(unsigned char *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_1009C08C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009C08D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7480;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009C092C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7480;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_1009C0994(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A7A0;
  if (!qword_10248A7A0)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A7A0;
  }
  return result;
}

void sub_1009C09C4()
{
}

uint64_t sub_1009C0A1C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 24);
  if (v1)
  {
    *(unsigned char *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1009C0A68(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        char v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_15;
        }
        unsigned int v14 = 0;
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v14);
          if (!result) {
            return result;
          }
          unsigned int v11 = v14;
          int v12 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v11 = *v10;
          int v12 = v10 + 1;
          *((void *)this + 1) = v12;
        }
        *(unsigned char *)(a1 + 16) = v11 != 0;
        int v8 = *(_DWORD *)(a1 + 24) | 1;
        *(_DWORD *)(a1 + 24) = v8;
        if ((unint64_t)v12 < v9 && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_23;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_15;
      }
      int v8 = *(_DWORD *)(a1 + 24);
LABEL_23:
      *(_DWORD *)(a1 + 24) = v8 | 2;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_1009C0C2C(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), a2, a4);
    int v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return result;
}

uint64_t sub_1009C0C98(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    uint64_t v4 = 2 * (v3 & 1u);
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      char v7 = v6;
      uint64_t v8 = *(void *)(v5 + 8);
      if ((v6 & 0x80u) == 0) {
        unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
        int v6 = *(unsigned __int8 *)(v5 + 23);
        uint64_t v8 = *(void *)(v5 + 8);
        char v7 = *(unsigned char *)(v5 + 23);
      }
      else
      {
        int v10 = 1;
      }
      if (v7 < 0) {
        int v6 = v8;
      }
      uint64_t v4 = (v4 | 1) + v10 + v6;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_1009C0D34(uint64_t a1, void *lpsrc)
{
  sub_1009C07D8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009C0DBC()
{
  return 1;
}

void *sub_1009C0DC4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.PowerAssertionEvent");
}

float sub_1009C0DD4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      char v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(float *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0) {
      return result;
    }
LABEL_7:
    char v6 = *(unsigned char *)(a2 + 20);
    *(_DWORD *)(a1 + 28) |= 4u;
    *(unsigned char *)(a1 + 20) = v6;
  }
  return result;
}

void sub_1009C0EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009C0F04(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D74F8;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009C0F58(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D74F8;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_1009C0FC0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A7A8;
  if (!qword_10248A7A8)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A7A8;
  }
  return result;
}

void sub_1009C0FF0()
{
}

uint64_t sub_1009C104C(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t v1 = *(void *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(unsigned char **)uint64_t v1 = 0;
          *(void *)(v1 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v1 = 0;
          *(unsigned char *)(v1 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 16) = 0;
    *(unsigned char *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1009C109C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_27;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 21)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_19;
        }
      }
      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 5) {
        goto LABEL_27;
      }
LABEL_19:
      unsigned int v17 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v17) & 1) == 0) {
        return 0;
      }
      *(_DWORD *)(a1 + 16) = v17;
      *(_DWORD *)(a1 + 28) |= 2u;
      int v13 = (unsigned char *)*((void *)this + 1);
      unint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v13 < v9 && *v13 == 24)
      {
        int v10 = v13 + 1;
        *((void *)this + 1) = v10;
LABEL_23:
        unsigned int v16 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v14 = v16;
          int v15 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v14 = *v10;
          int v15 = (unsigned __int8 *)(v10 + 1);
          *((void *)this + 1) = v15;
        }
        *(unsigned char *)(a1 + 20) = v14 != 0;
        *(_DWORD *)(a1 + 28) |= 4u;
        if (v15 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_27:
    if (v8 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1009C12C0(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v5 + 16), a3);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  int v7 = *(unsigned __int8 *)(v5 + 20);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_1009C134C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 28))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        int v11 = v12 + 1;
        int v3 = *(_DWORD *)(a1 + 28);
        char v8 = *(unsigned char *)(v6 + 23);
      }
      else
      {
        int v11 = 2;
      }
      if (v8 < 0) {
        int v7 = v9;
      }
      unsigned int v4 = v11 + v7;
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 5;
    }
    if ((v3 & 4) != 0) {
      uint64_t result = v4 + 2;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

float sub_1009C13F4(uint64_t a1, void *lpsrc)
{
  return sub_1009C0DD4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009C147C()
{
  return 1;
}

void *sub_1009C1484@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.TriggerReceived");
}

void sub_1009C1494(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 32);
      if (v5 >= 0x13) {
        sub_101A76290();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v5;
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(void *)(a1 + 8) = v6;
      int v4 = *(_DWORD *)(a2 + 40);
      if ((v4 & 4) == 0)
      {
LABEL_9:
        if ((v4 & 8) == 0) {
          return;
        }
LABEL_13:
        char v8 = *(const std::string **)(a2 + 24);
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v9 = *(std::string **)(a1 + 24);
        if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::operator=(v9, v8);
        return;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_9;
    }
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(void *)(a1 + 16) = v7;
    if ((*(_DWORD *)(a2 + 40) & 8) == 0) {
      return;
    }
    goto LABEL_13;
  }
}

void sub_1009C15CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009C15E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7570;
  sub_100241350((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1009C1638(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D7570;
  sub_100241350((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_1009C16A0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A7B0;
  if (!qword_10248A7B0)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A7B0;
  }
  return result;
}

void sub_1009C16D0()
{
}

uint64_t sub_1009C172C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1009C177C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    unsigned int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        v15[0] = 0;
        char v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v15);
          if (!result) {
            return result;
          }
          unsigned int v9 = v15[0];
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 <= 0x12)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 32) = v9;
        }
        int v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 17)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_28;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_18;
        }
LABEL_28:
        *(void *)int v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v15) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v15;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 25) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_32:
        *(void *)int v15 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v15))
        {
          *(void *)(a1 + 16) = *(void *)v15;
          int v10 = *(_DWORD *)(a1 + 40) | 4;
          *(_DWORD *)(a1 + 40) = v10;
          unsigned int v14 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 34)
          {
            *((void *)this + 1) = v14 + 1;
LABEL_36:
            *(_DWORD *)(a1 + 40) = v10 | 8;
            if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!result) {
              return result;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_32;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        int v10 = *(_DWORD *)(a1 + 40);
        goto LABEL_36;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1009C1A20(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 16), a3);
      if ((*(_DWORD *)(v5 + 40) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t sub_1009C1AC8(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        unsigned int v4 = 2;
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      char v9 = v8;
      uint64_t v10 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
        int v8 = *(unsigned __int8 *)(v7 + 23);
        uint64_t v10 = *(void *)(v7 + 8);
        char v9 = *(unsigned char *)(v7 + 23);
      }
      else
      {
        int v12 = 1;
      }
      if (v9 < 0) {
        int v8 = v10;
      }
      uint64_t v5 = (v5 + v12 + v8 + 1);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_1009C1BAC(uint64_t a1, void *lpsrc)
{
  sub_1009C1494(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009C1C34()
{
  return 1;
}

void *sub_1009C1C3C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.MotionAlarmEvent");
}

void sub_1009C1C4C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 >= 4) {
        sub_101A762BC();
      }
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 2u;
      uint64_t v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 4) == 0)
      {
LABEL_9:
        if ((v4 & 8) == 0) {
          return;
        }
LABEL_15:
        char v9 = *(const std::string **)(a2 + 24);
        *(_DWORD *)(a1 + 36) |= 8u;
        uint64_t v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::operator=(v10, v9);
        return;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_9;
    }
    int v8 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v8;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
      return;
    }
    goto LABEL_15;
  }
}

void sub_1009C1DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009C1DE0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D75E8;
  sub_1001A4C64((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_1009C1E34(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A7B8;
  if (!qword_10248A7B8)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A7B8;
  }
  return result;
}

void sub_1009C1E64()
{
}

uint64_t sub_1009C1EBC(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 36);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 20) = 0;
    if ((*(unsigned char *)(result + 36) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1009C1F40(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    unsigned int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v15 = 0;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!result) {
            return result;
          }
          unsigned int v9 = v15;
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 <= 3)
        {
          *(_DWORD *)(a1 + 36) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        int v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_28;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
LABEL_28:
        *(_DWORD *)(a1 + 36) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 29) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_34:
        unsigned int v16 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v16))
        {
          *(_DWORD *)(a1 + 20) = v16;
          int v10 = *(_DWORD *)(a1 + 36) | 4;
          *(_DWORD *)(a1 + 36) = v10;
          unsigned int v14 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 34)
          {
            *((void *)this + 1) = v14 + 1;
LABEL_38:
            *(_DWORD *)(a1 + 36) = v10 | 8;
            if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!result) {
              return result;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_34;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        int v10 = *(_DWORD *)(a1 + 36);
        goto LABEL_38;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_1009C2208(uint64_t a1, void *lpsrc)
{
  sub_1009C1C4C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009C2290()
{
  return 1;
}

void *sub_1009C2298@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.FenceMonitorTimerEvent");
}

void sub_1009C22A8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      if (v5 >= 5) {
        sub_101A76314();
      }
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 6) {
        sub_101A762E8();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248A7C0 + 16);
      }
      sub_1009B9A48(v7, v8);
    }
  }
}

void sub_1009C23FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1009C2414(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022D7660;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A7C0 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1009C24A4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1009C2414(a1);

  operator delete();
}

uint64_t sub_1009C24DC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A7C0;
  if (!qword_10248A7C0)
  {
    sub_1009B8564(0, a2, a3, a4);
    return qword_10248A7C0;
  }
  return result;
}

void sub_1009C250C()
{
}

uint64_t sub_1009C2558(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_1009B9F3C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_1009C2598(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v27 = 0;
          unsigned int v9 = (char *)*((void *)this + 1);
          if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
            if (!result) {
              return result;
            }
            unsigned int v10 = v27;
          }
          else
          {
            unsigned int v10 = *v9;
            *((void *)this + 1) = v9 + 1;
          }
          if (v10 <= 4)
          {
            *(_DWORD *)(a1 + 28) |= 1u;
            *(_DWORD *)(a1 + 8) = v10;
          }
          unsigned int v14 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v14 < v11 && *v14 == 16)
          {
            int v12 = v14 + 1;
            *((void *)this + 1) = v12;
            goto LABEL_28;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_28:
        unsigned int v26 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!result) {
            return result;
          }
          unsigned int v15 = v26;
        }
        else
        {
          unsigned int v15 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (v15 <= 5)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_38;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_38:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    unsigned int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_1009BA010(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1009C28A0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A7C0 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_1009C293C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A7C0 + 16);
    }
    unsigned int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009BA81C(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_1009C2A38(uint64_t a1, void *lpsrc)
{
  sub_1009C22A8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1009C2AC0()
{
  return 1;
}

void *sub_1009C2AC8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RegionMonitoring.ConvergingStateEvent");
}

void sub_1009C2AD8()
{
}

void sub_1009C2B18()
{
}

void sub_1009C2B40(void *a1, void *a2)
{
  *a1 = a2;
  operator new();
}

void sub_1009C2D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009C2DD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1009C2E24(uint64_t a1, int a2, double a3)
{
  double v10 = a3;
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D7890);
  }
  int v6 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v16 = a2;
    __int16 v17 = 2048;
    double v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#FenceMetrics marking converging state session result, %d, time, %f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D7890);
    }
    int v11 = 67109376;
    int v12 = a2;
    __int16 v13 = 2048;
    double v14 = a3;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFencePersistentCache::markConvergingStateSessionResult(CFAbsoluteTime, CLFenceConvergingStateSessionResult)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if ((a2 - 1) >= 7)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D7890);
    }
    int v7 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#FenceMetrics unrecognized converging state session result %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D7890);
      }
      int v11 = 67109120;
      int v12 = a2;
      unsigned int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFencePersistentCache::markConvergingStateSessionResult(CFAbsoluteTime, CLFenceConvergingStateSessionResult)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    sub_1004D51BC(*(void *)(a1 + 8), (const char *)[(__CFString *)*(&off_1022D78B0 + a2 - 1) UTF8String], &v10);
    (*(void (**)(void))(**(void **)(a1 + 8) + 944))();
  }
}

uint64_t sub_1009C31B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)a2 = sub_1009C32AC(a1, @"CLFenceConvergingStateSessionStartedKey", a3, a4);
  *(_DWORD *)(a2 + 4) = sub_1009C32AC(a1, @"CLFenceConvergingStateSessionSucceededEntryKey", a3, a4);
  *(_DWORD *)(a2 + 8) = sub_1009C32AC(a1, @"CLFenceConvergingStateSessionFailedTimeoutKey", a3, a4);
  *(_DWORD *)(a2 + 12) = sub_1009C32AC(a1, @"CLFenceConvergingStateSessionFailedExitedAreaKey", a3, a4);
  *(_DWORD *)(a2 + 16) = sub_1009C32AC(a1, @"CLFenceConvergingStateSessionNotStartedBudgetKey", a3, a4);
  *(_DWORD *)(a2 + 20) = sub_1009C32AC(a1, @"CLFenceConvergingStateSessionNotStartedInsideKey", a3, a4);
  uint64_t result = sub_1009C32AC(a1, @"CLFenceConvergingStateEnteredSignificantFenceKey", a3, a4);
  *(_DWORD *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1009C32AC(uint64_t a1, void *a2, double a3, double a4)
{
  int v8 = sub_1004D5D9C(*(void *)(a1 + 8), (const char *)[a2 UTF8String]);
  if (v8 < 1) {
    return 0;
  }
  int v9 = v8;
  uint64_t v10 = 0;
  for (int i = 0; i != v9; ++i)
  {
    double v18 = 0.0;
    if (sub_1000A699C(*(void *)(a1 + 8), (const char *)[a2 UTF8String], &v18))
    {
      BOOL v12 = v18 <= a4 && v18 >= a3;
      uint64_t v10 = (v10 + v12);
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D7890);
      }
      __int16 v13 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
      {
        id v14 = [a2 UTF8String];
        *(_DWORD *)std::string buf = 136315394;
        id v24 = v14;
        __int16 v25 = 1024;
        int v26 = i;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "failed to retrieve value for key, %s, at index, %d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D7890);
        }
        id v15 = [a2 UTF8String];
        int v19 = 136315394;
        id v20 = v15;
        __int16 v21 = 1024;
        int v22 = i;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "int CLFencePersistentCache::countEntriesForTimeWindow(NSString *, const CFAbsoluteTime, const CFAbsoluteTime) const", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
  }
  return v10;
}

uint64_t sub_1009C3538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int v6 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
  int v7 = [(NSCalendar *)v6 startOfDayForDate:+[NSDate dateWithTimeIntervalSince1970:a3]];
  [(NSDate *)[(NSCalendar *)v6 dateByAddingUnit:16 value:-1 toDate:v7 options:0] timeIntervalSince1970];
  double v9 = v8;
  [(NSDate *)v7 timeIntervalSince1970];

  return sub_1009C31B4(a1, a2, v9, v10);
}

id sub_1009C35F4(uint64_t a1, double a2, double a3)
{
  v16[0] = @"CLFenceConvergingStateSessionStartedKey";
  v16[1] = @"CLFenceConvergingStateSessionSucceededEntryKey";
  v16[2] = @"CLFenceConvergingStateSessionFailedTimeoutKey";
  void v16[3] = @"CLFenceConvergingStateSessionFailedExitedAreaKey";
  v16[4] = @"CLFenceConvergingStateSessionNotStartedBudgetKey";
  void v16[5] = @"CLFenceConvergingStateSessionNotStartedInsideKey";
  v16[6] = @"CLFenceConvergingStateEnteredSignificantFenceKey";
  int v6 = +[NSArray arrayWithObjects:v16 count:7];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id result = [(NSArray *)v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v8 = result;
    uint64_t v9 = *(void *)v12;
    do
    {
      double v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        sub_1009C3750(a1, *(void **)(*((void *)&v11 + 1) + 8 * (void)v10), a2, a3);
        double v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id result = [(NSArray *)v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v8 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1009C3750(uint64_t a1, void *a2, double a3, double a4)
{
  int v8 = sub_1004D5D9C(*(void *)(a1 + 8), (const char *)[a2 UTF8String]);
  if (v8 >= 1)
  {
    int v10 = v8;
    uint64_t v11 = 0;
    double v12 = a3 - a4;
    do
    {
      double v18 = 0.0;
      if (sub_1000A699C(*(void *)(a1 + 8), (const char *)[a2 UTF8String], &v18))
      {
        v9.n128_f64[0] = v18;
        if (v18 <= v12)
        {
          sub_1004CF7DC(*(void *)(a1 + 8), [a2 UTF8String], v11);
          --v10;
        }
        else
        {
          uint64_t v11 = (v11 + 1);
        }
      }
      else
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D7890);
        }
        long long v13 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
        {
          id v14 = [a2 UTF8String];
          *(_DWORD *)std::string buf = 136315394;
          id v24 = v14;
          __int16 v25 = 1024;
          int v26 = v11;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "failed retrieve value for key, %s, index, %d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D7890);
          }
          id v15 = [a2 UTF8String];
          int v19 = 136315394;
          id v20 = v15;
          __int16 v21 = 1024;
          int v22 = v11;
          int v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFencePersistentCache::prune(NSString *, CFAbsoluteTime, CFTimeInterval)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
      }
    }
    while ((int)v11 < v10);
  }
  return (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 8) + 944))(*(void *)(a1 + 8), v9);
}

void sub_1009C3A14(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_1009C3AF4(id a1)
{
  qword_10247F580 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSimulatedLocationProviderSilo"];
}

uint64_t sub_1009C3BB4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1009C3E44;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247F5A0 != -1) {
    dispatch_once(&qword_10247F5A0, block);
  }
  return qword_10248A7C8;
}

void sub_1009C3E18(id a1)
{
  if ((sub_1001073D0() & 0x2000) != 0) {
    byte_10247F590 = 1;
  }
}

void sub_1009C3E44()
{
}

void sub_1009C3EB4()
{
}

void sub_1009C3EDC(uint64_t a1)
{
  sub_1006B7BEC(a1);

  operator delete();
}

uint64_t sub_1009C3F18(char *a1, int a2)
{
  sub_1006B8928(a1, a2);
  if (a2)
  {
    int v6 = 9;
    return (*(uint64_t (**)(char *, int *))(*(void *)a1 + 120))(a1, &v6);
  }
  else
  {
    int v5 = 9;
    return (*(uint64_t (**)(char *, int *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v5, 1, 0xFFFFFFFFLL);
  }
}

void sub_1009C3FBC()
{
}

void sub_1009C4074(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1009C40B0()
{
}

void sub_1009C4170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

id sub_1009C41AC(uint64_t a1)
{
  id v2 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLSimulatedLocationProvider"];

  return [v2 syncgetDoSync:a1];
}

void sub_1009C41F8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

id sub_1009C4228(uint64_t a1)
{
  if (!objc_opt_class()) {
    return 0;
  }
  id v2 = +[NSMutableArray array];
  id v3 = v2;
  uint64_t v4 = *(void **)(a1 + 8);
  int v5 = (void *)(a1 + 16);
  if (v4 != (void *)(a1 + 16))
  {
    uint64_t v6 = byte_102489B57;
    uint64_t v7 = *((void *)&xmmword_102489B40 + 1);
    int v41 = v5;
    int v42 = v2;
    while (1)
    {
      int v8 = (const void **)(v4 + 4);
      uint64_t v9 = *((unsigned __int8 *)v4 + 55);
      size_t v10 = v4[5];
      if ((v9 & 0x80u) == 0) {
        uint64_t v11 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        uint64_t v11 = v4[5];
      }
      if ((v6 & 0x80u) == 0) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = v7;
      }
      if (v11 == v12)
      {
        if ((v6 & 0x80u) == 0) {
          long long v13 = &xmmword_102489B40;
        }
        else {
          long long v13 = (long long *)xmmword_102489B40;
        }
        if ((v9 & 0x80) != 0)
        {
          int v16 = memcmp(*v8, v13, v10);
          int v8 = (const void **)(v4 + 4);
          if (!v16) {
            goto LABEL_34;
          }
        }
        else
        {
          if (!*((unsigned char *)v4 + 55)) {
            goto LABEL_34;
          }
          id v14 = (unsigned __int8 *)(v4 + 4);
          uint64_t v15 = *((unsigned __int8 *)v4 + 55);
          while (*v14 == *(unsigned __int8 *)v13)
          {
            ++v14;
            long long v13 = (long long *)((char *)v13 + 1);
            if (!--v15) {
              goto LABEL_34;
            }
          }
        }
      }
      uint64_t v17 = byte_102489B87;
      if (byte_102489B87 < 0) {
        uint64_t v17 = qword_102489B78;
      }
      if (v11 != v17) {
        goto LABEL_47;
      }
      double v18 = byte_102489B87 >= 0 ? &qword_102489B70 : (uint64_t *)qword_102489B70;
      if ((v9 & 0x80) == 0) {
        break;
      }
      id v20 = v8;
      int v21 = memcmp(*v8, v18, v10);
      int v8 = v20;
      if (!v21) {
        goto LABEL_34;
      }
LABEL_47:
      unsigned int v37 = (void *)v4[1];
      if (v37)
      {
        do
        {
          unsigned int v38 = v37;
          unsigned int v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          unsigned int v38 = (void *)v4[2];
          BOOL v39 = *v38 == (void)v4;
          uint64_t v4 = v38;
        }
        while (!v39);
      }
      uint64_t v4 = v38;
      if (v38 == v5) {
        return v3;
      }
    }
    if (v9)
    {
      int v19 = v8;
      while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
      {
        int v19 = (const void **)((char *)v19 + 1);
        double v18 = (uint64_t *)((char *)v18 + 1);
        if (!--v9) {
          goto LABEL_34;
        }
      }
      goto LABEL_47;
    }
LABEL_34:
    if (v4[8] == v4[7]) {
      sub_101A76510();
    }
    int v43 = v8;
    id v22 = +[NSMutableArray array];
    uint64_t v24 = v4[7];
    uint64_t v23 = v4[8];
    if (v24 == v23)
    {
      id v25 = 0;
      double v28 = 0.0;
    }
    else
    {
      id v25 = 0;
      double v26 = 0.0;
      do
      {
        id v27 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v24];
        double v28 = *(double *)(v24 + 16);
        id v29 = [objc_alloc((Class)BMLocationMicroLocationVisitProbabilityPerLocation) initWithMicroLocationIdentifier:objc_msgSend(v27, "UUIDString") probability:[NSNumber numberWithDouble:v28]];
        [v22 addObject:v29];

        if (v28 <= v26)
        {
          double v28 = v26;
        }
        else
        {

          id v25 = v27;
          double v26 = v28;
        }

        v24 += 32;
      }
      while (v24 != v23);
    }
    id v30 = [objc_alloc((Class)BMLocationMicroLocationVisitNumDevicesPerTechnology) initWithTechnology:@"numberOfWifiDevices" numDevices:[NSNumber numberWithUnsignedLong:v4[10]]];
    id v31 = [objc_alloc((Class)BMLocationMicroLocationVisitNumDevicesPerTechnology) initWithTechnology:@"numberOfBleDevices" numDevices:[NSNumber numberWithUnsignedLong:v4[11]]];
    id v32 = [objc_alloc((Class)BMLocationMicroLocationVisitNumDevicesPerTechnology) initWithTechnology:@"numberOfUwbDevices" numDevices:[NSNumber numberWithUnsignedLong:v4[12]]];
    int v33 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v30, v31, v32, 0);

    id v34 = objc_alloc((Class)BMLocationMicroLocationVisit);
    if (*((char *)v4 + 55) < 0) {
      unsigned int v35 = (const void **)*v43;
    }
    else {
      unsigned int v35 = v43;
    }
    id v36 = [v34 initWithDomain:[NSString stringWithUTF8String:v35] maxProbabilityMicroLocationIdentifier:[v25 UUIDString] maxProbability:[NSNumber numberWithDouble:v28] probabilityVector:v22 isStable:[NSNumber numberWithBool:*((unsigned __int8 *)v4 + 104)] numDevicesVector:v33];
    id v3 = v42;
    [v42 addObject:v36];

    uint64_t v6 = byte_102489B57;
    uint64_t v7 = *((void *)&xmmword_102489B40 + 1);
    int v5 = v41;
    goto LABEL_47;
  }
  return v3;
}

id sub_1009C4678(double *a1)
{
  id result = (id)objc_opt_class();
  if (result)
  {
    id result = +[NSMutableArray array];
    id v3 = (double *)*((void *)a1 + 1);
    if (v3 != a1 + 2)
    {
      double v28 = result;
      double v4 = *a1;
      while (1)
      {
        uint64_t v5 = *((unsigned __int8 *)v3 + 55);
        if ((v5 & 0x80u) == 0) {
          uint64_t v6 = *((unsigned __int8 *)v3 + 55);
        }
        else {
          uint64_t v6 = *((void *)v3 + 5);
        }
        uint64_t v7 = byte_102489B6F;
        if (byte_102489B6F < 0) {
          uint64_t v7 = *((void *)&xmmword_102489B58 + 1);
        }
        if (v6 != v7) {
          goto LABEL_34;
        }
        int v8 = (const void **)(v3 + 4);
        if (byte_102489B6F >= 0) {
          uint64_t v9 = &xmmword_102489B58;
        }
        else {
          uint64_t v9 = (long long *)xmmword_102489B58;
        }
        if ((v5 & 0x80) != 0)
        {
          if (memcmp(*v8, v9, *((void *)v3 + 5))) {
            goto LABEL_34;
          }
        }
        else if (*((unsigned char *)v3 + 55))
        {
          while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v9)
          {
            int v8 = (const void **)((char *)v8 + 1);
            uint64_t v9 = (long long *)((char *)v9 + 1);
            if (!--v5) {
              goto LABEL_19;
            }
          }
          goto LABEL_34;
        }
LABEL_19:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v30 = 0;
        sub_10021FB74((char *)v3 + 112, (uint64_t)__p, (uint64_t)v31);
        if (SHIBYTE(v30) < 0) {
          operator delete(__p[0]);
        }
        if (*((void *)v3 + 8) == *((void *)v3 + 7))
        {
          sub_101A766C0();
          id result = (id)abort_report_np();
          __break(1u);
          return result;
        }
        id v10 = +[NSMutableArray array];
        uint64_t v11 = *((void *)v3 + 7);
        uint64_t v12 = *((void *)v3 + 8);
        if (v11 == v12)
        {
          id v13 = 0;
          double v14 = 0.0;
        }
        else
        {
          id v13 = 0;
          double v14 = 0.0;
          do
          {
            id v15 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v11];
            double v16 = *(double *)(v11 + 16);
            id v17 = [objc_alloc((Class)BMMicroLocationProbabilityPerLabel) initWithLabelIdentifier:v15 probability:v16];
            [v10 addObject:v17];

            if (v16 > v14)
            {

              id v13 = v15;
              double v14 = v16;
            }

            v11 += 32;
          }
          while (v11 != v12);
        }
        id v18 = [objc_alloc((Class)BMMicroLocationNumDevicesPerTechnology) initWithTechnology:@"numberOfWifiDevices" numDevices:*((unsigned int *)v3 + 20)];
        id v19 = [objc_alloc((Class)BMMicroLocationNumDevicesPerTechnology) initWithTechnology:@"numberOfBleDevices" numDevices:*((unsigned int *)v3 + 22)];
        id v20 = [objc_alloc((Class)BMMicroLocationNumDevicesPerTechnology) initWithTechnology:@"numberOfUwbDevices" numDevices:*((unsigned int *)v3 + 24)];
        int v21 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v18, v19, v20, 0);

        id v22 = objc_alloc((Class)BMMicroLocationRestrictedLocalizationEvent);
        if (v32 >= 0) {
          uint64_t v23 = v31;
        }
        else {
          uint64_t v23 = (void **)v31[0];
        }
        id v24 = [v22 initWithAbsoluteTimeStamp:v23 clientBundleIdentifier:v13 maxProbabilityLabelIdentifier:v10 maxProbability:v21 probabilityVector:v4 numDevicesVector:v14];
        [v28 addObject:v24];

        if (v32 < 0) {
          operator delete(v31[0]);
        }
LABEL_34:
        id v25 = (double *)*((void *)v3 + 1);
        if (v25)
        {
          do
          {
            double v26 = v25;
            id v25 = *(double **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            double v26 = (double *)*((void *)v3 + 2);
            BOOL v27 = *(void *)v26 == (void)v3;
            id v3 = v26;
          }
          while (!v27);
        }
        id v3 = v26;
        if (v26 == a1 + 2) {
          return v28;
        }
      }
    }
  }
  return result;
}

void sub_1009C49CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009C4A1C(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t **sub_1009C4A4C@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  id v3 = *result;
  double v4 = result[1];
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    id result = (uint64_t **)sub_1000E34E4(a2, &v5, &v5);
    v3 += 11;
  }
  return result;
}

void sub_1009C4AB8(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void sub_1009C4ACC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1009C4B84(_Unwind_Exception *a1)
{
}

void sub_1009C4B9C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1009C4C44(_Unwind_Exception *a1)
{
}

uint64_t sub_1009C4C5C(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  int v4 = *(_DWORD *)(a1 + 8);
  do
  {
    if (v4)
    {
      --v4;
      unsigned int v5 = *(unsigned __int8 *)(a1 + 12);
    }
    else
    {
      uint64_t v6 = (unsigned __int8 *)(*(void *)a1)++;
      unsigned int v5 = *v6;
      *(unsigned char *)(a1 + 12) = v5;
      int v4 = 7;
    }
    *(_DWORD *)(a1 + 8) = v4;
    result |= (unint64_t)((v5 >> v4) & 1) << v2++;
  }
  while (v2 != 64);
  return result;
}

uint64_t sub_1009C4CB8(uint64_t result, int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = result;
  int v3 = 0;
  LODWORD(result) = 0;
  int v4 = *(_DWORD *)(v2 + 8);
  do
  {
    if (v4)
    {
      --v4;
      unsigned int v5 = *(unsigned __int8 *)(v2 + 12);
    }
    else
    {
      uint64_t v6 = (unsigned __int8 *)(*(void *)v2)++;
      unsigned int v5 = *v6;
      *(unsigned char *)(v2 + 12) = v5;
      int v4 = 7;
    }
    *(_DWORD *)(v2 + 8) = v4;
    uint64_t result = (((v5 >> v4) & 1) << v3++) | result;
  }
  while (a2 != v3);
  return result;
}

uint64_t sub_1009C4D20(uint64_t a1)
{
  int v2 = sub_1009C4CB8(a1, 4);
  int v3 = ((v2 << 28 >> 31) & 0xFFFFFFF0) + v2;
  if (v3 == -8)
  {
    uint64_t result = sub_1009C4C5C(a1);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t result = v5 + v3 + *(void *)(a1 + 24);
  }
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = result - v5;
  return result;
}

float sub_1009C4D80@<S0>(int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a1;
  uint64_t v7 = sub_1009C4D20((uint64_t)a1);
  sub_1009C4E44((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  *(float32x2_t *)a3 = vmul_f32(vcvt_f32_s32(v9), (float32x2_t)vdup_n_s32(0x39800000u));
  float result = (float)v10 * 0.00024414;
  *(float *)(a3 + 8) = result;
  *(void *)(a3 + 12) = v7;
  return result;
}

uint64_t sub_1009C4E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = byte_101D55E62[(int)sub_1009C4CB8(a1, 3)];
  do
  {
    uint64_t result = sub_1009C4CB8(a1, v7);
    if ((result & (1 << (v7 - 1))) != 0) {
      int v9 = -1 << v7;
    }
    else {
      int v9 = 0;
    }
    int v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4;
  }
  while (v6 != 12);
  return result;
}

uint64_t sub_1009C4EE4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

float32x4_t sub_1009C4EFC@<Q0>(int *a1@<X0>, _DWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int v6 = *a1;
  uint64_t v7 = sub_1009C4D20((uint64_t)a1);
  sub_1009C4FAC((uint64_t)a1, (uint64_t)&v9, (uint64_t)(a1 + 8));
  *a2 = *a1 - v6;
  float32x4_t result = vmulq_f32(vcvtq_f32_s32(v9), (float32x4_t)vdupq_n_s32(0x3D800000u));
  *a3 = result;
  a3[1].i64[0] = v7;
  return result;
}

uint64_t sub_1009C4FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = byte_101D55E6A[(int)sub_1009C4CB8(a1, 3)];
  do
  {
    uint64_t result = sub_1009C4CB8(a1, v7);
    if ((result & (1 << (v7 - 1))) != 0) {
      int v9 = -1 << v7;
    }
    else {
      int v9 = 0;
    }
    int v10 = *(_DWORD *)(a3 + v6) + result + v9;
    *(_DWORD *)(a2 + v6) = v10;
    *(_DWORD *)(a3 + v6) = v10;
    v6 += 4;
  }
  while (v6 != 16);
  return result;
}

double sub_1009C504C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t sub_1009C5060(uint64_t result, double a2)
{
  *(double *)(result + 752) = a2;
  *(unsigned char *)(result + 760) = 1;
  return result;
}

void sub_1009C5070(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 760))
  {
    *(double *)(a1 + 768) = *(double *)(a1 + 768) + a2 - *(double *)(a1 + 752);
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D7B08);
    }
    int v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "converging state, tried to mark gnss ended, but never started", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D7B08);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceConvergenceAttempt::markGnssEnded(CFAbsoluteTime)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  if (*(unsigned char *)(a1 + 760)) {
    *(unsigned char *)(a1 + 760) = 0;
  }
}

double sub_1009C5230(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 760)) {
    return *(double *)(a1 + 768) + a2 - *(double *)(a1 + 752);
  }
  else {
    return *(double *)(a1 + 768);
  }
}

double sub_1009C5254(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  return result;
}

BOOL sub_1009C527C(int *a1)
{
  return *((void *)a1 + 8) < (unint64_t)*a1;
}

unint64_t sub_1009C5290(void *a1)
{
  unint64_t v1 = a1[8];
  if (v1)
  {
    long long v2 = *(uint64_t **)(*(void *)(a1[4] + (((v1 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v1 + *((unsigned char *)a1 + 56) - 1));
    if (!*((unsigned char *)v2 + 24))
    {
      uint64_t v3 = *v2;
      unint64_t v1 = *v2 & 0xFFFFFFFFFFFFFF00;
      uint64_t v3 = v3;
      return v3 | v1;
    }
    unint64_t v1 = 0;
  }
  uint64_t v3 = 0;
  return v3 | v1;
}

BOOL sub_1009C52F0(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2
    && (uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32)
                                   + (((unint64_t)(v2 + *(void *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v2 + *(unsigned char *)(a1 + 56) - 1)),
        !*(unsigned char *)(v3 + 24)))
  {
    return a2 - *(double *)(v3 + 8) > *(double *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

double sub_1009C5348(uint64_t a1, double result)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32)
                               + (((unint64_t)(v2 + *(void *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v2 + *(unsigned char *)(a1 + 56) - 1));
    if (!*(unsigned char *)(v3 + 24)) {
      return *(double *)(a1 + 16) - (result - *(double *)(v3 + 8));
    }
  }
  return result;
}

BOOL sub_1009C53A8(void *a1, uint64_t *a2, uint64_t *a3, double a4)
{
  double v22 = a4;
  unint64_t v4 = a1[8];
  unint64_t v5 = *(int *)a1;
  if (v4 < v5)
  {
    uint64_t v9 = a1[9];
    a1[9] = v9 + 1;
    *(void *)std::string buf = v9;
    sub_1009C59FC((uint64_t *)buf, &v22, &v21);
    sub_1009C5670(a1 + 3, &v21);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D7B08);
    }
    int v10 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = (uint64_t *)*a2;
      }
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v12 = a3;
      }
      else {
        uint64_t v12 = (uint64_t *)*a3;
      }
      uint64_t v14 = *(void *)v21;
      uint64_t v13 = *(void *)(v21 + 8);
      *(_DWORD *)std::string buf = 134218754;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v32 = 2080;
      int v33 = v11;
      __int16 v34 = 2080;
      unsigned int v35 = v12;
      __int16 v36 = 2048;
      uint64_t v37 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "converging state, starting new attempt, id, %zu, fence, %s/%s, startTime, %f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D7B08);
      }
      if (*((char *)a2 + 23) >= 0) {
        double v16 = a2;
      }
      else {
        double v16 = (uint64_t *)*a2;
      }
      if (*((char *)a3 + 23) >= 0) {
        id v17 = a3;
      }
      else {
        id v17 = (uint64_t *)*a3;
      }
      uint64_t v19 = *(void *)v21;
      uint64_t v18 = *(void *)(v21 + 8);
      int v23 = 134218754;
      uint64_t v24 = v19;
      __int16 v25 = 2080;
      double v26 = v16;
      __int16 v27 = 2080;
      double v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v18;
      id v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceConvergenceStateBudget::startNewAttempt(CFAbsoluteTime, const std::string &, const std::string &)", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    if (*((void *)&v21 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  return v4 < v5;
}

void sub_1009C564C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009C5670(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1009C5CE4(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_1009C5710(void *a1, double a2)
{
  unint64_t v3 = a1[8] + a1[7] - 1;
  uint64_t v4 = (double **)(*(void *)(a1[4] + ((v3 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v3);
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v6[2] = a2;
  *((unsigned char *)v6 + 24) = 1;
  v6[16] = *(double *)((char *)v6 + 252) - v6[51];
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D7B08);
  }
  uint64_t v7 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    if (!*((unsigned char *)v6 + 24)) {
      sub_10020D700();
    }
    double v9 = *v6;
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t v10 = *((void *)v6 + 2);
    *(_DWORD *)std::string buf = 134218496;
    double v14 = v9;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 2048;
    uint64_t v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "converging state, ending current attempt, id, %zu, startTime, %f, endTime, %f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D7B08);
    }
    if (!*((unsigned char *)v6 + 24)) {
      sub_10020D700();
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceConvergenceStateBudget::endCurrentAttempt(CFAbsoluteTime)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  unsigned char v6[8] = a2 - v6[1];
  if (*((unsigned char *)v6 + 760)) {
    double v11 = v6[96] + a2 - v6[94];
  }
  else {
    double v11 = v6[96];
  }
  v6[11] = v11;
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1009C59A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009C59CC(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void *sub_1009C59FC@<X0>(uint64_t *a1@<X1>, double *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x320uLL);
  double result = sub_1009C5A60(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1009C5A4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1009C5A60(void *a1, uint64_t *a2, double *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022D7B38;
  sub_1009C5B64((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1009C5AB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1009C5AC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D7B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1009C5AE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D7B38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1009C5B38(uint64_t a1)
{
  sub_1009C5C50((uint64_t)&v1, a1 + 24);
}

uint64_t sub_1009C5B64(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 116) = 0;
  *(void *)(a1 + 164) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 192) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 240) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 256) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 208) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 224) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 316) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 304) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 272) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 288) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 428) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 444) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 460) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 472) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 364) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 380) = xmmword_101D82EE8;
  *(_DWORD *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 396) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 412) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 332) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 348) = xmmword_101D82EC8;
  sub_100110970((char *)(a1 + 488));
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 752) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = 0;
  return a1;
}

void sub_1009C5C50(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 712);
  if (v3)
  {
    *(void *)(a2 + 720) = v3;
    operator delete(v3);
  }

  if (*(char *)(a2 + 703) < 0) {
    operator delete(*(void **)(a2 + 680));
  }
  if (*(char *)(a2 + 559) < 0) {
    operator delete(*(void **)(a2 + 536));
  }
  if (*(char *)(a2 + 535) < 0) {
    operator delete(*(void **)(a2 + 512));
  }
  if (*(char *)(a2 + 511) < 0)
  {
    uint64_t v4 = *(void **)(a2 + 488);
    operator delete(v4);
  }
}

void sub_1009C5CE4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      unsigned int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      unsigned int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1009C5FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1009C60AC(id a1)
{
  qword_10247F600 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLFitnessDailyAnalyticsAggregatorSilo"];
}

id sub_1009C6C2C(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1009D1814;
  void v3[3] = &unk_10229FED8;
  void v3[4] = a2;
  return [objc_msgSend(objc_msgSend(objc_msgSend(a2, "universe"), "silo"), "async:", v3];
}

id sub_1009C6CB0(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onDataProtectionNotification:*a2 data:*a3];
}

id sub_1009C6CC4(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  long long v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  long long v7 = a3[5];
  v12[4] = a3[4];
  void v12[5] = v7;
  long long v8 = a3[7];
  v12[6] = a3[6];
  void v12[7] = v8;
  long long v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  long long v10 = a3[3];
  v12[2] = a3[2];
  uint64_t v12[3] = v10;
  return [a4 onCompanionNotification:v4 data:v12];
}

id sub_1009C6D24(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5 = *a2;
  memcpy(__dst, __src, sizeof(__dst));
  return [a4 onNatalimetryNotification:v5 data:__dst];
}

id sub_1009C6DA4(uint64_t a1, unsigned int *a2, unsigned int *a3, void *a4)
{
  return _[a4 onFitnessTrackingNotification:*a2 data:*a3];
}

void sub_1009C7628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009C7640(uint64_t a1)
{
  return [*(id *)(a1 + 32) storeCache:*(void *)(*(void *)(a1 + 32) + 24)];
}

void sub_1009C8AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009C8ABC(uint64_t a1)
{
  unint64_t v2 = *(_DWORD **)(a1 + 32);
  if (v2[21])
  {
    [v2 resetQueryState];
    unint64_t v2 = *(_DWORD **)(a1 + 32);
  }
  v2[21] = 1;
  BOOL v3 = *(void **)(a1 + 32);

  return _[v3 runQueries];
}

id sub_1009C8F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  if (a4)
  {
    uint64_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472;
    uint64_t v17 = sub_1009C9078;
    uint64_t v18 = &unk_10229FEB0;
    uint64_t v19 = a4;
    uint64_t v20 = *(void *)(a1 + 32);
  }
  else
  {
    long long v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    uint64_t v11 = sub_1009C9250;
    uint64_t v12 = &unk_10229FEB0;
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = a3;
  }
  return [v7 async:v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20];
}

id sub_1009C9078(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    unint64_t v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, querySources encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator querySources]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

id sub_1009C9250(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 128) = objc_alloc_init((Class)NSMutableSet);
  *(void *)(*(void *)(a1 + 32) + 136) = objc_alloc_init((Class)NSMutableSet);
  *(void *)(*(void *)(a1 + 32) + 144) = objc_alloc_init((Class)NSMutableSet);
  *(void *)(*(void *)(a1 + 32) + 152) = objc_alloc_init((Class)NSMutableSet);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  unint64_t v2 = *(void **)(a1 + 40);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      for (int i = 0; i != v4; int i = (char *)i + 1)
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        if (!objc_msgSend(objc_msgSend(v7, "_productType"), "hasPrefix:", *(void *)(*(void *)(a1 + 32) + 112)))
        {
          unsigned int v10 = [[objc_msgSend(v7, "_productType") hasPrefix:*(void *)(*(void *)(a1 + 32) + 120)];
          uint64_t v9 = 152;
          if (!v10) {
            continue;
          }
LABEL_12:
          [*(id *)(*(void *)(a1 + 32) + v9) addObject:v7];
          continue;
        }
        [*(id *)(*(void *)(a1 + 32) + 128) addObject:v7];
        if ([v7 _hasFirstPartyBundleID]) {
          [*(id *)(*(void *)(a1 + 32) + 136) addObject:v7];
        }
        unsigned __int8 v8 = [[v7 bundleIdentifier] isEqual:@"com.apple.Fitness"];
        uint64_t v9 = 144;
        if (v8) {
          goto LABEL_12;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }
  unint64_t v11 = (unint64_t)[*(id *)(*(void *)(a1 + 32) + 128) count];
  unint64_t v12 = (unint64_t)[*(id *)(*(void *)(a1 + 32) + 152) count];
  if (v11 | v12)
  {
    if (v12)
    {
      sub_100103240();
      if (sub_10010145C())
      {
        *(_DWORD *)(*(void *)(a1 + 32) + 160) = 2;
        *(_DWORD *)(*(void *)(a1 + 32) + 164) = 2;
        *(_DWORD *)(*(void *)(a1 + 32) + 168) = 2;
        *(_DWORD *)(*(void *)(a1 + 32) + 172) = 2;
        *(_DWORD *)(*(void *)(a1 + 32) + 176) = 2;
      }
    }
    if (v11)
    {
      sub_100103240();
      if (sub_10010145C())
      {
        *(_DWORD *)(*(void *)(a1 + 32) + 180) = 2;
        *(_DWORD *)(*(void *)(a1 + 32) + 184) = 2;
      }
      *(_DWORD *)(*(void *)(a1 + 32) + 188) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 192) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 196) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 200) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 204) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 208) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 212) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 216) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 220) = 2;
      *(_DWORD *)(*(void *)(a1 + 32) + 224) = 2;
    }
    return [*(id *)(a1 + 32) runNextPendingQuery];
  }
  else
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    uint64_t v14 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, #Warning No step count / workouts", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator querySources]_block_invoke", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    return [*(id *)(a1 + 32) resetQueryState];
  }
}

id sub_1009C9F38(uint64_t a1, double **a2)
{
  id v3 = *a2;
  double v4 = 0.0;
  while (v3 != a2[1])
  {
    double v5 = *v3++;
    double v4 = v4 + v5;
  }
  id v6 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v6];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  id v7 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v11 = [v6 UTF8String];
    __int16 v12 = 2048;
    double v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionStepCount, day, %s, steps, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v6 UTF8String];
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionStepCount]_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v6) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4) forKeyedSubscript:@"kCompanionStepsKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 176);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CA298(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = *(double **)a2;
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    double v8 = 0.0;
    a3 = 30.0;
    do
    {
      double v9 = *v4++;
      double v10 = v9;
      if (v9 < 30.0) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = (v5 + 1);
      }
      double v8 = v8 + v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    double v8 = 0.0;
  }
  id v11 = [[*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40) a3];
  [*(id *)(a1 + 32) initDataDictForDay:v11];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  __int16 v12 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315650;
    id v16 = [v11 UTF8String];
    __int16 v17 = 2048;
    double v18 = v8;
    __int16 v19 = 1024;
    int v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryStepCount, day, %s, steps, %f, hours, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v11 UTF8String];
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryStepCount]_block_invoke", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v11) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8) forKeyedSubscript:@"kStepsKey"];
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v11) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5) forKeyedSubscript:@"kHoursActiveKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 188);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

void sub_1009CA768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1009CA790(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1009CA958;
    void v20[3] = &unk_1022D7BF0;
    v20[4] = *(void *)(a1 + 56);
    double v8 = (void ***)v20;
  }
  else if (a4)
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1009CA9D4;
    _DWORD v19[3] = &unk_10229FEB0;
    uint64_t v9 = *(void *)(a1 + 32);
    v19[4] = a4;
    void v19[5] = v9;
    double v8 = (void ***)v19;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1009CABAC;
    void v18[3] = &unk_1022D7C18;
    _DWORD v18[4] = *(void *)(a1 + 64);
    [a3 enumerateStatisticsFromDate:v10 toDate:v11 withBlock:v18];
    id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    double v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    uint64_t v15 = sub_1009CACD4;
    id v16 = &unk_1022D7C40;
    long long v17 = *(_OWORD *)(a1 + 56);
    double v8 = &v13;
  }
  return [v7 async:v8, v13, v14, v15, v16, v17];
}

void sub_1009CA958(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = operator new(8uLL);
  std::string __p = v2;
  *unint64_t v2 = 0;
  double v4 = v2 + 1;
  uint64_t v5 = v2 + 1;
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    double v4 = __p;
    operator delete(__p);
  }
}

void sub_1009CA9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009CA9D4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    unint64_t v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryStepCount encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryStepCount:endDate:sources:stepCountHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

void sub_1009CABAC(uint64_t a1, void *a2)
{
  id v4 = [a2 sumQuantity];
  if (a2)
  {
    [v4 doubleValueForUnit:+[HKUnit countUnit](HKUnit, "countUnit")];
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = *(void **)(*(void *)(a1 + 32) + 8);
  double v8 = (char *)v7[7];
  unint64_t v9 = v7[8];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = (char *)v7[6];
    uint64_t v12 = (v8 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_1001D7FD4();
    }
    unint64_t v13 = v9 - (void)v11;
    unint64_t v14 = (uint64_t)(v9 - (void)v11) >> 2;
    if (v14 <= v12 + 1) {
      unint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      id v16 = (char *)sub_1000DA54C((uint64_t)(v7 + 8), v15);
      uint64_t v11 = (char *)v7[6];
      double v8 = (char *)v7[7];
    }
    else
    {
      id v16 = 0;
    }
    long long v17 = &v16[8 * v12];
    double v18 = &v16[8 * v15];
    *(void *)long long v17 = v6;
    uint64_t v10 = v17 + 8;
    while (v8 != v11)
    {
      uint64_t v19 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v17 - 1) = v19;
      v17 -= 8;
    }
    v7[6] = v17;
    v7[7] = v10;
    unsigned char v7[8] = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)double v8 = v6;
    uint64_t v10 = v8 + 8;
  }
  v7[7] = v10;
}

void sub_1009CACD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  sub_1001DD364(&__p, *(const void **)(v2 + 48), *(void *)(v2 + 56), (uint64_t)(*(void *)(v2 + 56) - *(void *)(v2 + 48)) >> 3);
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    id v4 = __p;
    operator delete(__p);
  }
}

void sub_1009CAD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009CAE4C(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryFlightsClimbed, day, %s, count, %zu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryFlightsClimbed]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kFlightsClimbedKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 192);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CB198(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionFlightsClimbed, day, %s, count, %zu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionFlightsClimbed]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kCompanionFlightsClimbedKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 168);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CB564(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    int v14[2] = sub_1009CB6C4;
    void v14[3] = &unk_1022D7BF0;
    v14[4] = *(void *)(a1 + 40);
    double v8 = v14;
  }
  else
  {
    id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009CB6D8;
      void v13[3] = &unk_10229FEB0;
      uint64_t v9 = *(void *)(a1 + 32);
      void v13[4] = a4;
      void v13[5] = v9;
      double v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009CB8B0;
      uint64_t v12[3] = &unk_1022B30F8;
      uint64_t v10 = *(void *)(a1 + 40);
      v12[4] = a3;
      void v12[5] = v10;
      double v8 = v12;
    }
  }
  return [v7 async:v8];
}

uint64_t sub_1009CB6C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1009CB6D8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    uint64_t v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryFlightsClimbed encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryFlightsClimbed:endDate:sources:flightsClimbedHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

uint64_t sub_1009CB8B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [objc_msgSend(*(id *)(a1 + 32), "sumQuantity") doubleValueForUnit:[HKUnit countUnit]];
  id v3 = *(uint64_t (**)(uint64_t, unint64_t))(v1 + 16);

  return v3(v1, (unint64_t)v2);
}

id sub_1009CBA0C(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryActiveCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryActiveCalories]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kActiveCaloriesKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 200);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CBD64(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionActiveCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionActiveCalories]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kCompanionActiveCaloriesKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 160);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CC0BC(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryBasalCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryBasalCalories]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kBasalCaloriesKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 204);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CC414(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionBasalCalories, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionBasalCalories]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kCompanionBasalCaloriesKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 164);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CC7DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    int v14[2] = sub_1009CC93C;
    void v14[3] = &unk_1022D7BF0;
    v14[4] = *(void *)(a1 + 40);
    double v8 = v14;
  }
  else
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009CC950;
      void v13[3] = &unk_10229FEB0;
      uint64_t v9 = *(void *)(a1 + 32);
      void v13[4] = a4;
      void v13[5] = v9;
      double v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009CCB28;
      uint64_t v12[3] = &unk_1022B30F8;
      uint64_t v10 = *(void *)(a1 + 40);
      v12[4] = a3;
      void v12[5] = v10;
      double v8 = v12;
    }
  }
  return [v7 async:v8];
}

uint64_t sub_1009CC93C(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))(0.0);
}

id sub_1009CC950(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    double v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryCalories encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryCalories:endDate:hkIdentifier:sources:caloriesHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

uint64_t sub_1009CCB28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [objc_msgSend(*(id *)(a1 + 32), "sumQuantity") doubleValueForUnit:+[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit")];
  double v2 = *(uint64_t (**)(uint64_t))(v1 + 16);

  return v2(v1);
}

id sub_1009CCC74(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryPedDistance, day, %s, distance, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryPedDistance]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kPedDistanceKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 208);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CCFC0(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCompanionPedDistance, day, %s, distance, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCompanionPedDistance]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kCompanionPedDistanceKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 172);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CD38C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [[[*(id *)(a1 + 32) universe] silo];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    int v14[2] = sub_1009CD4EC;
    void v14[3] = &unk_1022D7BF0;
    v14[4] = *(void *)(a1 + 40);
    double v8 = v14;
  }
  else
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009CD500;
      void v13[3] = &unk_10229FEB0;
      uint64_t v9 = *(void *)(a1 + 32);
      void v13[4] = a4;
      void v13[5] = v9;
      double v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009CD6D8;
      uint64_t v12[3] = &unk_1022B30F8;
      uint64_t v10 = *(void *)(a1 + 40);
      v12[4] = a3;
      void v12[5] = v10;
      double v8 = v12;
    }
  }
  return [v7 async:v8];
}

uint64_t sub_1009CD4EC(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))(0.0);
}

id sub_1009CD500(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    double v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryPedDistance encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryPedDistance:endDate:sources:distanceHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

uint64_t sub_1009CD6D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [objc_msgSend(*(id *)(a1 + 32), "sumQuantity") doubleValueForUnit:+[HKUnit meterUnit](HKUnit, "meterUnit")];
  double v2 = *(uint64_t (**)(uint64_t))(v1 + 16);

  return v2(v1);
}

id sub_1009CD824(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v8 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v8];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v9 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315906;
    id v13 = [v8 UTF8String];
    __int16 v14 = 2048;
    double v15 = a3;
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    __int16 v18 = 2048;
    double v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromAllWorkouts, day, %s, calories, %f, nonPedWorkoutCount, %zu, nonPedWorkoutTime(seconds), %f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v8 UTF8String];
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromAllWorkouts]_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8) setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3) forKeyedSubscript:@"kCaloriesFromAllWorkoutsKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 212);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CDBA0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v8 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v8];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v9 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315906;
    id v13 = [v8 UTF8String];
    __int16 v14 = 2048;
    double v15 = a3;
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    __int16 v18 = 2048;
    double v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromFirstPartyWorkouts, day, %s, calories, %f, nonPedWorkoutCount, %zu, nonPedWorkoutTime(seconds), %f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v8 UTF8String];
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromFirstPartyWorkouts]_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3) forKeyedSubscript:@"kCaloriesFromFirstPartyWorkoutsKey"];
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kNonPedWorkoutsKey"];
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (int)(a4 / 60.0)) forKeyedSubscript:@"kNonPedWorkoutMinutesKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 216);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CDF88(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromFitnessPlusWorkouts, day, %s, calories, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromFitnessPlusWorkouts]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kCaloriesFromFitnessPlusWorkoutsKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 220);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

void sub_1009CE34C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1009CE630;
    v31[3] = &unk_1022D7BF0;
    v31[4] = *(void *)(a1 + 40);
    id v8 = v31;
LABEL_5:
    [v7 async:v8];
    return;
  }
  if (a4)
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1009CE64C;
    _DWORD v30[3] = &unk_10229FEB0;
    uint64_t v9 = *(void *)(a1 + 32);
    v30[4] = a4;
    v30[5] = v9;
    id v8 = v30;
    goto LABEL_5;
  }
  id v10 = a3;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)v27;
    double v15 = 0.0;
    double v16 = 0.0;
    do
    {
      for (int i = 0; i != v12; int i = (char *)i + 1)
      {
        if (*(void *)v27 != v14) {
          objc_enumerationMutation(v10);
        }
        __int16 v18 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        [objc_msgSend(v18, "totalEnergyBurned") doubleValueForUnit:+[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit")];
        double v20 = v19;
        if ([v18 workoutActivityType] != (id)37 && objc_msgSend(v18, "workoutActivityType") != (id)52)
        {
          ++v13;
          [objc_msgSend(v18, "endDate") timeIntervalSinceReferenceDate];
          double v22 = v21;
          [objc_msgSend(v18, "startDate") timeIntervalSinceReferenceDate];
          double v16 = v16 + v22 - v23;
        }
        double v15 = v15 + v20;
      }
      id v12 = [v10 countByEnumeratingWithState:&v26 objects:v32 count:16];
    }
    while (v12);
  }
  else
  {
    uint64_t v13 = 0;
    double v15 = 0.0;
    double v16 = 0.0;
  }
  id v24 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1009CE824;
  void v25[3] = &unk_1022D7D30;
  v25[4] = *(void *)(a1 + 40);
  *(double *)&unsigned char v25[5] = v15;
  v25[6] = v13;
  *(double *)&v25[7] = v16;
  [v24 async:v25];
}

uint64_t sub_1009CE630(uint64_t a1)
{
  return (*(uint64_t (**)(double, double))(*(void *)(a1 + 32) + 16))(0.0, 0.0);
}

id sub_1009CE64C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    double v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryCaloriesFromWorkouts encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryCaloriesFromWorkouts:endDate:sources:workoutsHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

uint64_t sub_1009CE824(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, double, double))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 48), *(double *)(a1 + 40), *(double *)(a1 + 56));
}

id sub_1009CE934(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryExerciseMinutes, day, %s, exerciseMinutes, %zu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryExerciseMinutes]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kExerciseMinutesKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 224);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CED00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    int v14[2] = sub_1009CEE60;
    void v14[3] = &unk_1022D7BF0;
    v14[4] = *(void *)(a1 + 40);
    id v8 = v14;
  }
  else
  {
    id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009CEE74;
      void v13[3] = &unk_10229FEB0;
      uint64_t v9 = *(void *)(a1 + 32);
      void v13[4] = a4;
      void v13[5] = v9;
      id v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009CF04C;
      uint64_t v12[3] = &unk_1022B30F8;
      uint64_t v10 = *(void *)(a1 + 40);
      v12[4] = a3;
      void v12[5] = v10;
      id v8 = v12;
    }
  }
  return [v7 async:v8];
}

uint64_t sub_1009CEE60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1009CEE74(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    double v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryExerciseMinutes encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryExerciseMinutes:endDate:sources:exerciseMinutesHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

uint64_t sub_1009CF04C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [objc_msgSend(*(id *)(a1 + 32), "sumQuantity") doubleValueForUnit:[+[HKUnit minuteUnit](HKUnit, "minuteUnit")]];
  id v3 = *(uint64_t (**)(uint64_t, unint64_t))(v1 + 16);

  return v3(v1, (unint64_t)v2);
}

id sub_1009CF19C(uint64_t a1, unint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    unint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylight, day, %s, timeInDaylight, %zu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylight]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (unint64_t)sub_10126D948(0xAu, (double)a2)) forKeyedSubscript:@"kTimeInDaylightKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 180);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

id sub_1009CF574(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    int v14[2] = sub_1009CF6D4;
    void v14[3] = &unk_1022D7BF0;
    v14[4] = *(void *)(a1 + 40);
    id v8 = v14;
  }
  else
  {
    id v7 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    if (a4)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1009CF6E8;
      void v13[3] = &unk_10229FEB0;
      uint64_t v9 = *(void *)(a1 + 32);
      void v13[4] = a4;
      void v13[5] = v9;
      id v8 = v13;
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1009CF8C0;
      uint64_t v12[3] = &unk_1022B30F8;
      uint64_t v10 = *(void *)(a1 + 40);
      v12[4] = a3;
      void v12[5] = v10;
      id v8 = v12;
    }
  }
  return [v7 async:v8];
}

uint64_t sub_1009CF6D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1009CF6E8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    double v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylight encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylight:endDate:sources:timeInDaylightHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

uint64_t sub_1009CF8C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  [objc_msgSend(*(id *)(a1 + 32), "sumQuantity") doubleValueForUnit:+[HKUnit minuteUnit](HKUnit, "minuteUnit")];
  id v3 = *(uint64_t (**)(uint64_t, unint64_t))(v1 + 16);

  return v3(v1, (unint64_t)v2);
}

id sub_1009CFA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [*(id *)(a1 + 32) NSDateToNSStringKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v8];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  uint64_t v9 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315906;
    id v13 = [v8 UTF8String];
    __int16 v14 = 2048;
    uint64_t v15 = a2;
    __int16 v16 = 2048;
    uint64_t v17 = a3;
    __int16 v18 = 2048;
    uint64_t v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylightMetadata, day, %s, ambientLightIntensityMin, %zu, ambientLightIntensityMedian, %zu, ambientLightIntensityMax, %zu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v8 UTF8String];
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylightMetadata]_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kAmbientLightIntensityMinKey"];
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3) forKeyedSubscript:@"kAmbientLightIntensityMedianKey"];
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v8) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4) forKeyedSubscript:@"kAmbientLightIntensityMaxKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 184);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

void sub_1009CFE70(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ([a4 code] == (id)11)
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    id v32[2] = sub_1009D01DC;
    uint64_t v32[3] = &unk_1022D7BF0;
    v32[4] = *(void *)(a1 + 40);
    [v7 async:v32];
  }
  else if (a4)
  {
    id v8 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1009D01F8;
    v31[3] = &unk_10229FEB0;
    uint64_t v9 = *(void *)(a1 + 32);
    v31[4] = a4;
    void v31[5] = v9;
    [v8 async:v31];
  }
  else
  {
    id v10 = a3;
    sub_1009D181C((uint64_t)&v27, 500, -250, 65750);
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    id v11 = [v10 countByEnumeratingWithState:&v23 objects:v33 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v24;
      do
      {
        for (int i = 0; i != v11; int i = (char *)i + 1)
        {
          if (*(void *)v24 != v12) {
            objc_enumerationMutation(v10);
          }
          [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * i), "metadata"), "objectForKeyedSubscript:", HKMetadataKeyMaximumLightIntensity), "doubleValueForUnit:", +[HKUnit luxUnit](HKUnit, "luxUnit"));
          int v15 = (int)v14;
          if (SDWORD1(v27) > (int)v14) {
            int v15 = DWORD1(v27);
          }
          if (v15 >= SDWORD2(v27)) {
            int v15 = DWORD2(v27);
          }
          ++*((_DWORD *)v29 + (v15 - DWORD1(v27)) / (int)v27);
        }
        id v11 = [v10 countByEnumeratingWithState:&v23 objects:v33 count:16];
      }
      while (v11);
    }
    id v16 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3321888768;
    void v17[2] = sub_1009D03D0;
    v17[3] = &unk_1022D7DA8;
    long long v18 = v27;
    uint64_t v19 = v28;
    std::string __p = 0;
    double v21 = 0;
    uint64_t v22 = 0;
    sub_10010F834(&__p, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
    v17[4] = *(void *)(a1 + 40);
    [v16 async:v17];

    if (__p)
    {
      double v21 = __p;
      operator delete(__p);
    }
    if (v29)
    {
      long long v30 = v29;
      operator delete(v29);
    }
  }
}

void sub_1009D0188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009D01DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1009D01F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    double v2 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 32) code];
      *(_DWORD *)std::string buf = 134349056;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLFitnessDailyAnalyticsAggregator, queryTimeInDaylightMetadata encountered error, %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022D7E28);
      }
      [*(id *)(a1 + 32) code];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFitnessDailyAnalyticsAggregator queryTimeInDaylightMetadata:endDate:sources:timeInDaylightMetadataHandler:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return [*(id *)(a1 + 40) resetQueryState];
}

uint64_t sub_1009D03D0(void *a1)
{
  uint64_t v1 = (int *)a1[8];
  double v2 = (int *)a1[9];
  if (v1 == v2) {
    goto LABEL_6;
  }
  int v3 = 0;
  uint64_t v4 = (uint64_t)(a1 + 5);
  do
  {
    int v5 = *v1++;
    v3 += v5;
  }
  while (v1 != v2);
  if (v3 < 1)
  {
LABEL_6:
    uint64_t v11 = a1[4];
    id v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = (int)sub_1009D0488((uint64_t)(a1 + 5));
    uint64_t v8 = (int)sub_1009D0508(v4);
    uint64_t v9 = (int)sub_1009D05C0(v4);
    id v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    uint64_t v13 = v8;
  }

  return v10(v11, v12, v13, v9);
}

uint64_t sub_1009D0488(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 24);
  double v2 = *(char **)(a1 + 32);
  if (v1 == v2) {
    return 0x80000000;
  }
  int v3 = 0;
  uint64_t v4 = *(int **)(a1 + 24);
  do
  {
    int v5 = *v4++;
    v3 += v5;
  }
  while (v4 != (int *)v2);
  if (v3 < 1) {
    return 0x80000000;
  }
  uint64_t v6 = *(char **)(a1 + 24);
  while (!*(_DWORD *)v6)
  {
    v6 += 4;
    if (v6 == v2)
    {
      uint64_t v6 = *(char **)(a1 + 32);
      break;
    }
  }
  unint64_t v7 = (unint64_t)(v6 - v1) >> 2;
  int v8 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0) {
    int v9 = *(_DWORD *)a1;
  }
  else {
    int v9 = v8 + 1;
  }
  int v10 = *(_DWORD *)(a1 + 4) + (v9 >> 1) + v8 * v7;
  int v11 = *(_DWORD *)(a1 + 8) - (v9 >> 1);
  if (v11 >= v10) {
    return v10;
  }
  else {
    return v11;
  }
}

uint64_t sub_1009D0508(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 24);
  double v2 = *(int **)(a1 + 32);
  if (v1 == v2) {
    return 0x80000000;
  }
  int v3 = 0;
  uint64_t v4 = *(int **)(a1 + 24);
  do
  {
    int v5 = *v4++;
    v3 += v5;
  }
  while (v4 != v2);
  if (v3 < 1) {
    return 0x80000000;
  }
  int v6 = 0;
  unint64_t v7 = *(int **)(a1 + 24);
  do
  {
    int v8 = *v7++;
    v6 += v8;
  }
  while (v7 != v2);
  int v9 = v6 + 2;
  if (v6 >= -1) {
    int v9 = v6 + 1;
  }
  int v10 = v9 >> 1;
  int v11 = *v1;
  unint64_t v12 = *(void *)(a1 + 16);
  if (v12) {
    BOOL v13 = v11 < v10;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    unint64_t v16 = 1;
    do
    {
      int v17 = v16 + 1;
      if (v12 <= v16) {
        break;
      }
      v11 += v1[v16++];
    }
    while (v11 < v10);
    int v14 = v17 - 1;
  }
  else
  {
    int v14 = 0;
  }
  int v18 = *(_DWORD *)(a1 + 4) + *(_DWORD *)a1 * v14;
  if (*(int *)a1 >= 0) {
    int v19 = *(_DWORD *)a1;
  }
  else {
    int v19 = *(_DWORD *)a1 + 1;
  }
  return (v18 + (v19 >> 1));
}

uint64_t sub_1009D05C0(uint64_t a1)
{
  double v2 = *(char **)(a1 + 24);
  uint64_t v1 = *(char **)(a1 + 32);
  if (v2 == v1) {
    return 0x80000000;
  }
  int v3 = 0;
  uint64_t v4 = *(int **)(a1 + 24);
  do
  {
    int v5 = *v4++;
    v3 += v5;
  }
  while (v4 != (int *)v1);
  if (v3 < 1) {
    return 0x80000000;
  }
  int v6 = *(char **)(a1 + 32);
  while (v6 != v2)
  {
    int v7 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    if (v7)
    {
      double v2 = v6 + 4;
      break;
    }
  }
  unint64_t v8 = (unint64_t)(v1 - v2) >> 2;
  int v9 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0) {
    int v10 = *(_DWORD *)a1;
  }
  else {
    int v10 = v9 + 1;
  }
  int v11 = *(_DWORD *)(a1 + 8) - (v10 >> 1);
  int v12 = v11 + v9 - v9 * v8;
  if (v11 >= v12) {
    return v12;
  }
  else {
    return v11;
  }
}

void *sub_1009D063C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (void *)(a1 + 64);
  *(v4 - 1) = v3;
  *(_OWORD *)(v4 - 3) = v2;
  v4[1] = 0;
  void v4[2] = 0;
  return sub_10010F834(v4, *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2);
}

void sub_1009D0668(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

id sub_1009D0754(uint64_t a1, double a2)
{
  id v4 = [*(id *)(a1 + 32) CFAbsoluteTimeToNSStringKey:*(double *)(a1 + 40)];
  [*(id *)(a1 + 32) initDataDictForDay:v4];
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022D7E28);
  }
  int v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315394;
    id v9 = [v4 UTF8String];
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFitnessDailyAnalyticsAggregator, queryTimeNonStatic, day, %s, duration, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022D7E28);
    }
    [v4 UTF8String];
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFitnessDailyAnalyticsAggregator queryTimeNonStatic]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "objectForKeyedSubscript:", v4) setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2) forKeyedSubscript:@"kTimeNonStaticKey"];
  --*(_DWORD *)(*(void *)(a1 + 32) + 196);
  return [*(id *)(a1 + 32) runNextPendingQuery];
}

void sub_1009D0A88(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    [objc_msgSend(objc_msgSend(objc_msgSend(a2, "firstObject"), "startDate"), "timeIntervalSinceReferenceDate");
    double v5 = 0.0;
    double v6 = v4 - *(double *)(a1 + 56) + 0.0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v7 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v19;
      do
      {
        for (int i = 0; i != v8; int i = (char *)i + 1)
        {
          if (*(void *)v19 != v9) {
            objc_enumerationMutation(a2);
          }
          double v11 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          [objc_msgSend(v11, "startDate") timeIntervalSinceReferenceDate];
          double v13 = v12;
          if ([v11 stationary])
          {
            if (v5 == 0.0) {
              double v5 = v13;
            }
          }
          else if (v5 != 0.0)
          {
            double v6 = v6 + v13 - v5;
            double v5 = 0.0;
          }
        }
        id v8 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v8);
    }
    if (objc_msgSend(objc_msgSend(a2, "lastObject"), "stationary"))
    {
      double v14 = *(double *)(a1 + 64);
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "lastObject"), "startDate"), "timeIntervalSinceReferenceDate");
      double v6 = v6 + v14 - v15;
    }
  }
  else
  {
    double v6 = 86400.0;
  }
  id v16 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1009D0C90;
  v17[3] = &unk_1022ACE00;
  v17[4] = *(void *)(a1 + 48);
  *(double *)&void v17[5] = v6;
  [v16 async:v17];
}

uint64_t sub_1009D0C90(uint64_t a1)
{
  return (*(uint64_t (**)(void, double))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 86400.0 - *(double *)(a1 + 40));
}

uint64_t sub_1009D1240(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1009D153C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1009D1748(id a1)
{
  qword_102419278 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

Class sub_1009D1778()
{
  if (qword_10247F618 != -1) {
    dispatch_once(&qword_10247F618, &stru_1022D7E48);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_10247F610 = (uint64_t)result;
  off_10241F718 = sub_1009D17DC;
  return result;
}

uint64_t sub_1009D17DC()
{
  return qword_10247F610;
}

void sub_1009D17E8(id a1)
{
  qword_10247F620 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

id sub_1009D1814(uint64_t a1)
{
  return [*(id *)(a1 + 32) onDataCollectionChangedNotification];
}

uint64_t sub_1009D181C(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  unint64_t v5 = (a4 - a3) / a2 + 1;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v7 = 0;
  sub_1004528EC((char **)(a1 + 24), v5, &v7);
  return a1;
}

void sub_1009D1888(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009D18A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D55F10;
      v0[3] = unk_101D55F20;
      v0[4] = xmmword_101D55F30;
      v0[0] = xmmword_101D55EF0;
      v0[1] = unk_101D55F00;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1009D1984(_Unwind_Exception *a1)
{
}

uint64_t sub_1009D199C()
{
  sub_100134750(qword_10247F5A8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F5A8, (void *)&_mh_execute_header);
  v2[0] = @"kActiveCaloriesKey";
  v2[1] = @"kBasalCaloriesKey";
  v2[2] = @"kFlightsClimbedKey";
  v2[3] = @"kPedDistanceKey";
  v2[4] = @"kStepsKey";
  v2[5] = @"kExerciseMinutesKey";
  v2[6] = @"kCaloriesFromAllWorkoutsKey";
  v2[7] = @"kCaloriesFromFirstPartyWorkoutsKey";
  v2[8] = @"kCaloriesFromFitnessPlusWorkoutsKey";
  v2[9] = @"kNonPedWorkoutsKey";
  v2[10] = @"kNonPedWorkoutMinutesKey";
  v2[11] = @"kAgeBinKey";
  v2[12] = @"kGenderKey";
  void v2[13] = @"kWeightKGKey";
  v2[14] = @"kTimeNonStaticKey";
  v2[15] = @"kCompanionActiveCaloriesKey";
  v2[16] = @"kCompanionBasalCaloriesKey";
  v2[17] = @"kCompanionFlightsClimbedKey";
  v2[18] = @"kCompanionPedDistanceKey";
  v2[19] = @"kCompanionStepsKey";
  v2[20] = @"kTimeInDaylightKey";
  v2[21] = @"kAmbientLightIntensityMinKey";
  v2[22] = @"kAmbientLightIntensityMedianKey";
  v2[23] = @"kAmbientLightIntensityMaxKey";
  v2[24] = @"kLocalDaytimeDurationKey";
  qword_10247F5C0 = +[NSArray arrayWithObjects:v2 count:25];
  v2[0] = @"kPhoneFitnessModeKey";
  qword_10247F5C8 = +[NSArray arrayWithObjects:v2 count:1];
  sub_101A1F180(byte_10247F5D0, "FitnessDailyAnalyticsAggregatorQueryTimerFireInterval", &qword_101D55F48, 0);
  qword_10247F5E8 = 0;
  qword_10247F5F0 = 0;
  qword_10247F5F8 = 0;
  uint64_t v0 = operator new(0x10uLL);
  qword_10247F5E8 = (uint64_t)v0;
  *uint64_t v0 = xmmword_101D55EE0;
  qword_10247F5F0 = (uint64_t)(v0 + 1);
  qword_10247F5F8 = (uint64_t)(v0 + 1);
  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_10247F5E8, (void *)&_mh_execute_header);
}

void sub_1009D1BD0()
{
}

uint64_t sub_1009D1C98(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_1009D1D04(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_1022D7E78;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  is_mul_ok(a3, 0x50uLL);
  operator new[]();
}

void *sub_1009D1DE4(void *result)
{
  *uint64_t result = off_1022D7E78;
  uint64_t v1 = result[2];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 - 8);
    if (v2)
    {
      uint64_t v3 = 80 * v2;
      do
      {
        sub_1003B2350((void *)(v1 + v3 - 24));
        sub_1000F5BB0(v1 + v3 - 48, *(void **)(v1 + v3 - 40));
        v3 -= 80;
      }
      while (v3);
    }
    operator delete[]();
  }
  return result;
}

void sub_1009D1E8C(void *a1)
{
  sub_1009D1DE4(a1);

  operator delete();
}

uint64_t sub_1009D1EC4(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v13 = 0;
  double v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v8 = sub_1000D3E78();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1009D1FB0;
  void v11[3] = &unk_1022D7EB0;
  v11[4] = &v13;
  void v11[5] = a1;
  int v12 = a2;
  v11[6] = a3;
  *(double *)&v11[7] = a4;
  sub_1009E8E94(v8, (uint64_t)v11);
  uint64_t v9 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1009D1F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1009D1FB0(uint64_t a1)
{
  BOOL result = sub_1009D1FF0(*(void **)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), (double *)(a1 + 56));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL sub_1009D1FF0(void *a1, uint64_t a2, uint64_t a3, double *a4)
{
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  double v9 = *a4;
  double v10 = *a4 * (double)v8;
  double v36 = v10;
  if (v9 != 0.0)
  {
    if (v9 >= 0.0)
    {
      uint64_t v16 = a1[2];
      if (v10 > 0.0
        && ((uint64_t v17 = v16 + 80 * (int)a2, v19 = *(double *)(v17 + 8), v18 = (double *)(v17 + 8), v20 = v19, v10 < v19)
         || v20 <= 0.0))
      {
        *long long v18 = v10;
        double v22 = (*(double (**)(void *, uint64_t, double *))(*a1 + 24))(a1, a2, &v36);
        uint64_t v16 = a1[2];
        *(double *)(v16 + 80 * (int)a2 + 24) = v22;
        double v21 = *a4;
        double v10 = v36;
      }
      else
      {
        double v21 = v9;
      }
      long long v23 = (double *)(v16 + 80 * (int)a2);
      if (v21 < *v23 || *v23 <= 0.0)
      {
        *long long v23 = v21;
        double v27 = (*(double (**)(void *, uint64_t, double *))(*a1 + 16))(a1, a2, a4);
        uint64_t v28 = a1[2] + 80 * (int)a2;
        *(double *)(v28 + 16) = v27;
        *(void *)std::string buf = a3;
        *(void *)int v44 = &_mh_execute_header;
        *(double *)&v44[8] = v21;
        *(double *)&v44[16] = v10;
        sub_1009D393C((uint64_t **)(v28 + 32), (unint64_t *)buf, (uint64_t)buf);
        sub_1009D351C((uint64_t)a1, a2);
      }
      else
      {
        if (*(double *)(v16 + 80 * (int)a2 + 16) <= 0.0)
        {
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
          }
          long long v24 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
            }
            LOWORD(v37) = 0;
            unsigned int v35 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v35);
            if (v35 != (char *)buf) {
              free(v35);
            }
          }
        }
        uint64_t v25 = a1[2] + 80 * (int)a2;
        unsigned int v26 = llround(*a4 / *(double *)(v25 + 16));
        *(void *)std::string buf = a3;
        *(_DWORD *)int v44 = 0;
        *(_DWORD *)&v44[4] = v26;
        *(double *)&v44[8] = v21;
        *(double *)&v44[16] = v10;
        sub_1009D393C((uint64_t **)(v25 + 32), (unint64_t *)buf, (uint64_t)buf);
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, *(void *)(a1[2] + 80 * (int)a2 + 48) - 1);
    }
    else
    {
      double v11 = (void *)(a1[2] + 80 * (int)a2);
      int v12 = operator new(0x18uLL);
      v12[2] = a3;
      uint64_t v13 = v11[7];
      v11 += 7;
      *int v12 = v13;
      v12[1] = v11;
      *(void *)(v13 + 8) = v12;
      *double v11 = v12;
      ++v11[2];
      (*(void (**)(void *, uint64_t))(*a1 + 32))(a1, a2);
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
    }
    long long v29 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      double v30 = *a4;
      double v31 = 0.0;
      if (*a4 > 0.0) {
        double v31 = 1.0 / v30;
      }
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)int v44 = 2048;
      *(double *)&v44[2] = v30;
      *(_WORD *)&v44[10] = 2048;
      *(double *)&v44[12] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return v9 != 0.0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
    }
    double v33 = *a4;
    double v34 = 0.0;
    if (*a4 > 0.0) {
      double v34 = 1.0 / v33;
    }
    int v37 = 67109632;
    int v38 = a2;
    __int16 v39 = 2048;
    double v40 = v33;
    __int16 v41 = 2048;
    double v42 = v34;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v15);
LABEL_41:
    if (v15 != (char *)buf) {
      free(v15);
    }
    return v9 != 0.0;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
  }
  double v14 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
    }
    LOWORD(v37) = 0;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v15);
    goto LABEL_41;
  }
  return v9 != 0.0;
}

void sub_1009D26C4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D3E78();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  long long v7[2] = sub_1009D2754;
  v7[3] = &unk_1022BE758;
  int v8 = a2;
  void v7[4] = a1;
  void v7[5] = a3;
  sub_1009E8E94(v6, (uint64_t)v7);
}

uint64_t *sub_1009D2754(uint64_t a1)
{
  return sub_1009D2764(*(void **)(a1 + 32), *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
}

uint64_t *sub_1009D2764(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1[2];
  int v6 = a2;
  uint64_t v7 = v5 + 80 * (int)a2;
  double v10 = *(void **)(v7 + 40);
  int v8 = (uint64_t *)(v7 + 40);
  double v9 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  double v11 = v8;
  do
  {
    unint64_t v12 = v9[4];
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      double v14 = v9;
    }
    else {
      double v14 = v9 + 1;
    }
    if (v13) {
      double v11 = v9;
    }
    double v9 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v8 && v11[4] <= a3)
  {
    sub_1000F0A30((uint64_t **)v8 - 1, v11);
    operator delete(v11);
    double v21 = sub_1009D37E4((uint64_t)a1, a2);
    double v30 = v21;
    double v22 = sub_1009D3878((uint64_t)a1, a2);
    double v29 = v22;
    uint64_t v23 = a1[2];
    long long v24 = (double *)(v23 + 80 * v6);
    if (v21 != *v24)
    {
      *long long v24 = v21;
      *(double *)(a1[2] + 80 * v6 + 16) = (*(double (**)(void *, uint64_t, double *))(*a1 + 16))(a1, a2, &v30);
      sub_1009D351C((uint64_t)a1, a2);
      uint64_t v23 = a1[2];
    }
    uint64_t v25 = v23 + 80 * v6;
    double v27 = *(double *)(v25 + 8);
    unsigned int v26 = (double *)(v25 + 8);
    if (v22 != v27)
    {
      *unsigned int v26 = v22;
      double v28 = (*(double (**)(void *, uint64_t, double *))(*a1 + 24))(a1, a2, &v29);
      uint64_t v23 = a1[2];
      *(double *)(v23 + 80 * v6 + 24) = v28;
    }
    return (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, *(void *)(v23 + 80 * v6 + 48) + 1);
  }
  else
  {
LABEL_12:
    uint64_t v15 = (void *)(v5 + 80 * (int)a2);
    uint64_t v16 = v15 + 7;
    for (BOOL result = (uint64_t *)v15[8]; result != v16; BOOL result = (uint64_t *)result[1])
    {
      if (result[2] == a3)
      {
        if (result != v16)
        {
          uint64_t v18 = *result;
          *(void *)(v18 + 8) = result[1];
          *(void *)result[1] = v18;
          --v15[9];
          operator delete(result);
          uint64_t v19 = *(void *)(a1[2] + 80 * v6 + 72);
          double v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 32);
          return (uint64_t *)v20(a1, a2, v19);
        }
        return result;
      }
    }
  }
  return result;
}

void sub_1009D29E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000D3E78();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  unsigned char v9[2] = sub_1009D2A80;
  _OWORD v9[3] = &unk_1022BBB98;
  int v10 = a2;
  void v9[4] = a1;
  void v9[5] = a3;
  void v9[6] = a4;
  sub_1009E8E94(v8, (uint64_t)v9);
}

void sub_1009D2A80(uint64_t a1)
{
}

void sub_1009D2A94(void *a1, uint64_t a2, unint64_t a3, double *a4)
{
  unsigned int v8 = (*(uint64_t (**)(unint64_t))(*(void *)a3 + 24))(a3);
  uint64_t v9 = a1[2];
  uint64_t v10 = v9 + 80 * (int)a2;
  BOOL v13 = *(void **)(v10 + 40);
  double v11 = (double *)(v10 + 40);
  unint64_t v12 = v13;
  if (!v13) {
    goto LABEL_12;
  }
  double v14 = *a4;
  uint64_t v15 = v11;
  do
  {
    unint64_t v16 = v12[4];
    BOOL v17 = v16 >= a3;
    if (v16 >= a3) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = v12 + 1;
    }
    if (v17) {
      uint64_t v15 = (double *)v12;
    }
    unint64_t v12 = (void *)*v18;
  }
  while (*v18);
  if (v15 != v11 && *((void *)v15 + 4) <= a3)
  {
    void v15[6] = v14;
    v15[7] = v14 * (double)v8;
    if (*(double *)(v9 + 80 * (int)a2 + 16) <= 0.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
      }
      double v20 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v21 = *((void *)v15 + 6);
        uint64_t v22 = *(void *)(a1[2] + 80 * (int)a2 + 16);
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "CLMotionNotifier::setUpdateIntervalPrivate RequestedUpdateInterval:%f, UpdateInterval:%f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
        }
        uint64_t v30 = *((void *)v15 + 6);
        uint64_t v31 = *(void *)(a1[2] + 80 * (int)a2 + 16);
        *(_DWORD *)double v33 = 134218240;
        *(void *)&v33[4] = v30;
        *(_WORD *)&v33[12] = 2048;
        *(void *)&v33[14] = v31;
        long long v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionNotifier::setUpdateIntervalPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v32);
        if (v32 != buf) {
          free(v32);
        }
      }
    }
    uint64_t v23 = (double *)(a1[2] + 80 * (int)a2);
    *((_DWORD *)v15 + 11) = llround(v15[6] / v23[2]);
    double v24 = sub_1009D37E4((uint64_t)a1, a2);
    *(double *)std::string buf = v24;
    if (v24 != *v23)
    {
      *uint64_t v23 = v24;
      *(double *)(a1[2] + 80 * (int)a2 + 16) = (*(double (**)(void *, uint64_t, unsigned char *))(*a1 + 16))(a1, a2, buf);
      sub_1009D351C((uint64_t)a1, a2);
    }
    double v25 = sub_1009D3878((uint64_t)a1, a2);
    *(double *)double v33 = v25;
    uint64_t v26 = a1[2] + 80 * (int)a2;
    double v28 = *(double *)(v26 + 8);
    double v27 = (double *)(v26 + 8);
    if (v25 != v28)
    {
      *double v27 = v25;
      *(double *)(a1[2] + 80 * (int)a2 + 24) = (*(double (**)(void *, uint64_t, unsigned char *))(*a1 + 24))(a1, a2, v33);
    }
  }
  else
  {
LABEL_12:
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
    }
    uint64_t v19 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Unknown (notification,dispatcher) pair: (%d, %p)", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
      }
      *(_DWORD *)double v33 = 67109376;
      *(_DWORD *)&v33[4] = a2;
      *(_WORD *)&v33[8] = 2048;
      *(void *)&v33[10] = a3;
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionNotifier::setUpdateIntervalPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v29);
      if (v29 != buf) {
        free(v29);
      }
    }
  }
}

uint64_t sub_1009D2F88(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(void *)(*(void *)(a1 + 16) + 80 * a2 + 48);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
  }
  double v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "ssize_t CLMotionNotifier::numberOfClients(int)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return -1;
}

uint64_t sub_1009D3158(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(void *)(*(void *)(a1 + 16) + 80 * a2 + 72);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
  }
  double v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "ssize_t CLMotionNotifier::numberOfSpectators(int)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return -1;
}

double sub_1009D3328(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) > a2) {
    return *(double *)(*(void *)(a1 + 16) + 80 * a2);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
  }
  double v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  double v3 = -1.0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CFTimeInterval CLMotionNotifier::minimumUpdateInterval(int)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v3;
}

uint64_t sub_1009D3504(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 80 * a2 + 32);
}

void sub_1009D351C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = v2 + 80 * a2;
  int v6 = *(void **)(v3 + 32);
  uint64_t v4 = v3 + 32;
  uint64_t v5 = v6;
  double v7 = *(double *)(v4 - 16);
  if (v7 <= 0.0)
  {
    if (v5 != (void *)(v4 + 8))
    {
      do
      {
        *((_DWORD *)v5 + 11) = 1;
        BOOL v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            BOOL v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v15 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v15);
        }
        uint64_t v5 = v18;
      }
      while (v18 != (void *)(v4 + 8));
    }
  }
  else if (v5 != (void *)(v2 + 80 * a2 + 40))
  {
    do
    {
      if (v7 <= 0.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
        }
        uint64_t v10 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 80 * a2 + 16);
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v20 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "CLMotionNotifier::updateSamplePeriod UpdateInterval:%f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022D7EE0);
          }
          unint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionNotifier::updateSamplePeriods(int)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
      }
      uint64_t v12 = *(void *)(a1 + 16);
      double v7 = *(double *)(v12 + 80 * a2 + 16);
      *((_DWORD *)v5 + 11) = llround(*((double *)v5 + 6) / v7);
      BOOL v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          double v14 = v13;
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          double v14 = (void *)v5[2];
          BOOL v15 = *v14 == (void)v5;
          uint64_t v5 = v14;
        }
        while (!v15);
      }
      uint64_t v5 = v14;
    }
    while (v14 != (void *)(v12 + 80 * a2 + 40));
  }
}

double sub_1009D37E4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16) + 80 * a2;
  uint64_t v3 = *(double **)(v2 + 32);
  uint64_t v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    double result = 1.79769313e308;
  }
  else
  {
    double result = 1.79769313e308;
    do
    {
      double v6 = v3[6];
      if (v6 < result && v6 > 0.0) {
        double result = v3[6];
      }
      int v8 = (double *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (double *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308) {
    return 0.0;
  }
  return result;
}

double sub_1009D3878(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16) + 80 * a2;
  uint64_t v3 = *(double **)(v2 + 32);
  uint64_t v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    double result = 1.79769313e308;
  }
  else
  {
    double result = 1.79769313e308;
    do
    {
      double v6 = v3[7];
      if (v6 < result && v6 > 0.0) {
        double result = v3[7];
      }
      int v8 = (double *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (double *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308) {
    return 0.0;
  }
  return result;
}

void sub_1009D390C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t **sub_1009D393C(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  double v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        double v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        double v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    BOOL v10 = operator new(0x40uLL);
    v10[4] = *(void *)a3;
    void v10[5] = *(void *)(a3 + 8);
    *((_OWORD *)v10 + 3) = *(_OWORD *)(a3 + 16);
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1009D3AB8(id a1)
{
  qword_10247F628 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLAuthSyncManagerSilo"];
}

void sub_1009D3B30(id a1)
{
  if (objc_opt_class())
  {
    sub_100103240();
    if (sub_100106424() || (sub_100103240(), sub_10010145C()))
    {
      if (qword_10247F650 != -1) {
        dispatch_once(&qword_10247F650, &stru_1022D81E0);
      }
      if (qword_10247F658) {
        byte_10247F638 = 1;
      }
    }
  }
}

void sub_1009D3DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
    }
    uint64_t v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync IDS service failed to initialize", "{\"msg%{public}.0s\":\"#authsync IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setIdsService:a2];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    unint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    [*(id *)(a1 + 40) resume];
  }
}

id sub_1009D45E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) refreshSettings];
}

id sub_1009D45E8(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1009E3A7C;
  void v3[3] = &unk_10229FED8;
  void v3[4] = a2;
  return [objc_msgSend(objc_msgSend(objc_msgSend(a2, "universe"), "silo"), "async:", v3];
}

void sub_1009D5558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1009D5580(uint64_t a1, id a2)
{
  if (objc_msgSend(objc_msgSend((Class)off_10241F810[0](), "sharedInstance"), "getActivePairedDevice") != a2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [a2 valueForProperty:off_10241F818[0]()];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8)+ 40) stringByAppendingPathComponent:@"CoreLocation"];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8)+ 40) stringByAppendingPathComponent:@"AUTH"];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8)+ 40) stringByAppendingPathComponent:@"ReunionSyncList"];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [a2 valueForProperty:off_10241F820[0]()];
    [objc_msgSend(*(id *)(a1 + 32), "reunionSyncListPaths") setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKey:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) UTF8String];
      v6[0] = 68289282;
      v6[1] = 0;
      __int16 v7 = 2082;
      int v8 = "";
      __int16 v9 = 2082;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Adding to the list of reunionSyncLists\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
    }
  }
}

id sub_1009D5768(uint64_t a1, void *a2, uint64_t a3)
{
  double v6 = +[NSArray arrayWithContentsOfFile:a2];
  if (!v6)
  {
    double v6 = +[NSArray array];
    if ([(NSArray *)v6 writeToFile:a2 atomically:1])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
      int v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        BOOL v15 = "";
        __int16 v16 = 2082;
        id v17 = [a2 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync ReunionSyncList created\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
      __int16 v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        BOOL v15 = "";
        __int16 v16 = 2082;
        id v17 = [a2 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#authsync ReunionSyncList creation failed\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022D8200);
        }
      }
      id v10 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        id v11 = [a2 UTF8String];
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        BOOL v15 = "";
        __int16 v16 = 2082;
        id v17 = v11;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync ReunionSyncList creation failed", "{\"msg%{public}.0s\":\"#authsync ReunionSyncList creation failed\", \"reunionSyncListPath\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
      }
    }
  }
  return [objc_msgSend(*(id *)(a1 + 32), "reunionSyncLists") setObject:+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v6) forKey:a3];
}

void sub_1009D5F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

id sub_1009D5F78(uint64_t a1)
{
  id result = sub_1007C4CFC(*(void *)(a1 + 32));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

id sub_1009D6480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = sub_1007C51C0(a2, *(void **)(a1 + 40), (char)[*(id *)(a1 + 48) isWatchBuildVersionPriorTo:196608], *(unsigned char *)(a1 + 56), 1);

  return [v2 addObjectsFromArray:v3];
}

void sub_1009D8E50(id a1, void *a2)
{
}

void sub_1009D8E58(id a1, void *a2)
{
}

void sub_1009D8E60(id a1, void *a2)
{
}

void sub_1009D8E68(id a1, void *a2)
{
}

void sub_1009D9B6C(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  if ([(NSString *)a2 isEqualToString:@"RESET", a4]) {
    byte_10247F649 = 1;
  }
}

id sub_1009D9F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = sub_1007C8B50(a2);

  return [v2 addObjectsFromArray:v3];
}

void sub_1009D9F94(uint64_t a1, void *a2, uint64_t a3)
{
  [a2 setClientKey:[*(id *)(a1 + 32) getTranslatedGizmoKeyForCompanionClient:[a2 clientKey]]];
  if (([*(id *)(a1 + 32) isWatchBuildVersionPriorTo:0x40000] & 1) == 0
    && objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", &stru_10234F018))
  {
    [*(id *)(a1 + 40) addIndex:a3];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    double v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removing LS as an add message from the full sync queue\"}", (uint8_t *)v7, 0x12u);
    }
  }
}

void sub_1009DA418(id a1, CLCompanionSyncAuthObject *a2, unint64_t a3, BOOL *a4)
{
  if ([(CLCompanionSyncAuthObject *)a2 hasCorrectiveCompensationMask])
  {
    if ([(CLCompanionSyncAuthObject *)a2 correctiveCompensationMask] == 2)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
      id v5 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 68289794;
        int v12 = 0;
        __int16 v13 = 2082;
        __int16 v14 = "";
        __int16 v15 = 2082;
        __int16 v16 = [(NSString *)[(CLCompanionSyncAuthObject *)a2 clientKey] UTF8String];
        __int16 v17 = 1026;
        unsigned int v18 = [(CLCompanionSyncAuthObject *)a2 correctiveCompensationMask];
        __int16 v19 = 1026;
        unsigned int v20 = 1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync translating corrective compenesation\", \"Client\":%{public, location:escape_only}s, \"CorrectiveCompensationMask\":%{public}u, \"AuthorizationMask\":%{public}u}", (uint8_t *)&v11, 0x28u);
      }
      [(CLCompanionSyncAuthObject *)a2 setAuthMask:1];
      return;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 68289794;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = [(NSString *)[(CLCompanionSyncAuthObject *)a2 clientKey] UTF8String];
      __int16 v17 = 1026;
      unsigned int v18 = [(CLCompanionSyncAuthObject *)a2 correctiveCompensationMask];
      __int16 v19 = 1026;
      unsigned int v20 = [(CLCompanionSyncAuthObject *)a2 authMask];
      __int16 v7 = "{\"msg%{public}.0s\":\"#authsync corrective compensation translation is off\", \"Client\":%{public, location:"
           "escape_only}s, \"CorrectiveCompensationMask\":%{public}u, \"AuthorizationMask\":%{public}u}";
      __int16 v8 = v10;
      uint32_t v9 = 40;
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = [(NSString *)[(CLCompanionSyncAuthObject *)a2 clientKey] UTF8String];
      __int16 v7 = "{\"msg%{public}.0s\":\"#authsync no valid corrective compensation mask\", \"Client\":%{public, location:escape_only}s}";
      __int16 v8 = v6;
      uint32_t v9 = 28;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
    }
  }
}

void sub_1009DA8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1009DA8B8(uint64_t a1, void *a2)
{
  id result = [a2 hasNotification];
  if (result)
  {
    id result = [a2 notification];
    if (!result) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

id sub_1009DB330(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022D8200);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) syncSessionRetryInterval];
    uint64_t v4 = (uint64_t)v3;
    unsigned int v5 = [*(id *)(a1 + 32) numberOfConsecutiveSyncSessionRetries];
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint32_t v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = v4;
    __int16 v12 = 1026;
    unsigned int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Retrying sync session\", \"retryInterval\":%{public}ld, \"retryCount\":%{public}d}", (uint8_t *)v7, 0x22u);
  }
  return [*(id *)(a1 + 32) watchNeedsFullSync:@"SyncSessionRetry"];
}

id sub_1009DB450(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022D8200);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) syncSessionRetryInterval];
    uint64_t v4 = (uint64_t)v3;
    unsigned int v5 = [*(id *)(a1 + 32) numberOfConsecutiveSyncSessionRetries];
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint32_t v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = v4;
    __int16 v12 = 1026;
    unsigned int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Retrying sync session\", \"retryInterval\":%{public}ld, \"retryCount\":%{public}d}", (uint8_t *)v7, 0x22u);
  }
  return [*(id *)(a1 + 32) watchNeedsDeltaSync:@"FailedDeltaSyncSession"];
}

void sub_1009DD374(id a1, void *a2)
{
}

void sub_1009DD37C(id a1, void *a2)
{
}

uint64_t sub_1009DD388(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) authMask];

  return sub_1007CA1C4(a2, v3);
}

void sub_1009DD3C8(uint64_t a1, void *a2)
{
  sub_100134750(__p, *(char **)(a1 + 40));
  sub_1007C6370((uint64_t)a2, (uint64_t)__p, 0, *(_DWORD *)(a1 + 48), *(void *)(a1 + 52), *(unsigned char *)(a1 + 60), *(_WORD *)(a1 + 61), 1u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, *(char **)(a1 + 40));
  sub_1007C6EA8(a2, (uint64_t)__p, [*(id *)(a1 + 32) interestZones]);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1009DD468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009DD780(id a1, void *a2)
{
}

void sub_1009DD788(uint64_t a1, void *a2)
{
  sub_100134750(__p, *(char **)(a1 + 40));
  sub_1007C6370((uint64_t)a2, (uint64_t)__p, 0, *(_DWORD *)(a1 + 48), *(void *)(a1 + 52), *(unsigned char *)(a1 + 60), *(_WORD *)(a1 + 61), 2u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, *(char **)(a1 + 40));
  sub_1007C6EA8(a2, (uint64_t)__p, [*(id *)(a1 + 32) interestZones]);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1009DD828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009DD9B0(uint64_t a1, uint64_t a2)
{
  sub_100134750(__p, *(char **)(a1 + 32));
  sub_1007C7670(a2, (uint64_t *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1009DDA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009DDD18(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"))];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 32) clientKey];
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2114;
      id v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from deltaSyncObjectsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return [*(id *)(a1 + 40) addIndex:a3];
  }
  return result;
}

id sub_1009DE048(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"));
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    id v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2114;
      id v12 = [a2 clientKey];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from notificationsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return [*(id *)(a1 + 40) addIndex:a3];
  }
  return result;
}

id sub_1009DE39C(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"))];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    id v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2114;
      id v12 = [a2 clientKey];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from deltaSyncObjectsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return [*(id *)(a1 + 40) addIndex:a3];
  }
  return result;
}

id sub_1009DE6DC(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [objc_msgSend(objc_msgSend(a2, "clientKey"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 32), "clientKey"))];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 32) clientKey];
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2114;
      id v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Removed duplicate from deltaSyncObjectsInCompanionQueue\", \"clientKey\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
    return [*(id *)(a1 + 40) addIndex:a3];
  }
  return result;
}

void sub_1009DF1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(exception_object);
}

id *sub_1009E0374(id *result)
{
  if ((byte_10247F648 & 1) == 0)
  {
    uint64_t v1 = result;
    byte_10247F648 = 1;
    [result[4] prepareToDoMigrationSync];
    id v2 = v1[4];
    return (id *)[v2 sendNotification:2];
  }
  return result;
}

id sub_1009E03D4(uint64_t a1, void *a2)
{
  id result = [a2 hasNotification];
  if (result)
  {
    id result = [a2 notification];
    if (result == 2)
    {
      char v5 = *(void **)(a1 + 32);
      return [v5 setReason:@"SYSessionReasonMigrationSync-ResetVersionNumbers-DeltaSync-FromCompanion"];
    }
  }
  return result;
}

void sub_1009E100C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

id sub_1009E1074(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    __int16 v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"fullSyncMessage\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
    }
    [objc_msgSend(*(id *)(a1 + 32), "fullSyncObjectsInGizmoQueue") addObject:a2];
    return [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addIndex:a3];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    __int16 v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
    }
    __int16 v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    id result = [*(id *)(a1 + 32) setShouldSendMoreDataInCurrentSyncSession:1];
    *a4 = 1;
  }
  return result;
}

id sub_1009E12DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    __int16 v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"notificationMessage\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
    }
    [objc_msgSend(*(id *)(a1 + 32), "notificationsInGizmoQueue") addObject:a2];
    return [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addIndex:a3];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    __int16 v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
    }
    __int16 v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v12, 0x12u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    id result = [*(id *)(a1 + 32) setShouldSendMoreDataInCurrentSyncSession:1];
    *a4 = 1;
  }
  return result;
}

void sub_1009E1544(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    [objc_msgSend(*(id *)(a1 + 32), "deltaSyncObjectsInGizmoQueue") addObject:a2];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addIndex:a3];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    __int16 v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"deltaSyncMessage\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    __int16 v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v11 = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v11, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
    }
    __int16 v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v11 = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v11, 0x12u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    [*(id *)(a1 + 32) setShouldSendMoreDataInCurrentSyncSession:1];
    *a4 = 1;
  }
}

id sub_1009E17B8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022D8200);
  }
  __int16 v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2114;
    id v18 = [a2 description];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Sending notifications\", \"notification.description\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x1Cu);
  }
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    __int16 v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2114;
      id v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Message enqueued\", \"notificationMessage\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x1Cu);
    }
    [objc_msgSend(*(id *)(a1 + 32), "notificationsInGizmoQueue") addObject:a2];
    return [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addIndex:a3];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    int v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v13 = 68289026;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v13, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
    }
    int v12 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v13 = 68289026;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#authsync Message enqueue failed", "{\"msg%{public}.0s\":\"#authsync Message enqueue failed\"}", (uint8_t *)&v13, 0x12u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    id result = [*(id *)(a1 + 32) setShouldSendMoreDataInCurrentSyncSession:1];
    *a4 = 1;
  }
  return result;
}

void sub_1009E23F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

id sub_1009E2418(uint64_t a1, void *a2)
{
  id v4 = [[objc_msgSend(*(id *)(a1 + 32), "fullSyncClientsList") copy];
  int v5 = [*(id *)(a1 + 32) shouldResetAuthDbOnFullSync];

  return sub_1007C554C(a2, v4, v5);
}

id sub_1009E28A8(uint64_t a1)
{
  [*(id *)(a1 + 32) setSyncRestriction:[*(id *)(a1 + 40) syncRestriction]];
  [*(id *)(a1 + 32) setActiveWatchSyncSession:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) updateActivePairedDeviceInfo];
  [*(id *)(a1 + 32) setPairedSyncSessionActive:1];
  [*(id *)(a1 + 32) setIsQuickSwitchInProgress:objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeWatchSyncSession"), "syncSessionType") == (id)1];
  if ([*(id *)(a1 + 32) isQuickSwitchInProgress])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    id v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 68289026;
      v6[1] = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Quick switch - PS\"}", (uint8_t *)v6, 0x12u);
    }
    [*(id *)(a1 + 32) setShouldConfirmHandlingQuickSwitchNotification:1];
    [*(id *)(a1 + 32) setRecoverySyncInProgress:0];
    [*(id *)(a1 + 32) setResetRecoveryMode:0];
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "authSyncStoreState"), "objectForKey:", @"kCLHandledQuickSwitchNotification"))
    {
      if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "authSyncStoreState"), "objectForKey:", @"kCLHandledQuickSwitchNotification"), "BOOLValue"))
      {
        [objc_msgSend(*(id *)(a1 + 32), "authSyncStoreState") setObject:&__kCFBooleanFalse forKey:@"kCLHandledQuickSwitchNotification"];
        [*(id *)(a1 + 32) updateSyncStoreState:@"QuickSwitch-PS"];
      }
    }
    return [*(id *)(a1 + 32) handleQuickSwitch];
  }
  else
  {
    id v4 = [[objc_msgSend(*(id *)(a1 + 32), "activeWatchSyncSession") syncSessionType];
    int v5 = *(void **)(a1 + 32);
    if (v4 == (id)2)
    {
      return [v5 watchMigrationDidStart];
    }
    else
    {
      return [v5 watchNeedsFullSync:@"Recovery-PairingInPairedSync"];
    }
  }
}

id sub_1009E2CA4(uint64_t a1)
{
  [*(id *)(a1 + 32) setSyncRestriction:[*(id *)(a1 + 40) syncRestriction]];
  [*(id *)(a1 + 32) setActiveWatchSyncSession:0];
  id v2 = *(void **)(a1 + 32);

  return [v2 setPairedSyncSessionActive:0];
}

id sub_1009E2D80(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022D8200);
  }
  id v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) syncRestriction];
    id v3 = [*(id *)(a1 + 32) syncRestriction];
    unsigned int v4 = [*(id *)(a1 + 40) isPairedSyncSessionActive];
    *(_DWORD *)std::string buf = 68289538;
    int v9 = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2050;
    id v13 = v3;
    __int16 v14 = 1026;
    unsigned int v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Sync coordinator changed restriction\", \"syncRestriction\":%{public, location:PSYSyncRestriction}lld, \"isPairedSyncSessionActive\":%{public}hhd}", buf, 0x22u);
  }
  [*(id *)(a1 + 40) setSyncRestriction:[*(id *)(a1 + 32) syncRestriction]];
  id result = [*(id *)(a1 + 40) syncRestriction];
  if (!result)
  {
    id v6 = [objc_msgSend(*(id *)(a1 + 40), "universe") silo];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1009E2F1C;
    v7[3] = &unk_10229FED8;
    void v7[4] = *(void *)(a1 + 40);
    return [v6 afterInterval:v7 async:1.0];
  }
  return result;
}

id sub_1009E2F1C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) activeWatchSyncSession];
  if (!result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8200);
    }
    id v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      __int16 v5 = 2082;
      id v6 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Checking sync store state after restriction change to PSYSyncRestrictionNone\"}", (uint8_t *)v4, 0x12u);
    }
    return [*(id *)(a1 + 32) checkSyncStoreStateAftreRestrictionChange];
  }
  return result;
}

void sub_1009E37E0(id a1)
{
  qword_10247F658 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync", 2);
}

void sub_1009E380C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1009E383C()
{
  if (qword_10247F650 != -1) {
    dispatch_once(&qword_10247F650, &stru_1022D81E0);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F658, "SYServiceOptionDiskBufferProtectionClass");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F660 = result;
  }
  else
  {
    uint64_t result = qword_10247F660;
  }
  off_10241F7E0[0] = sub_1009E38BC;
  return result;
}

uint64_t sub_1009E38BC()
{
  return qword_10247F660;
}

Class sub_1009E38C8()
{
  if (qword_10247F650 != -1) {
    dispatch_once(&qword_10247F650, &stru_1022D81E0);
  }
  Class result = objc_getClass("SYService");
  qword_10247F668 = (uint64_t)result;
  off_10241F7E8[0] = sub_1009E392C;
  return result;
}

uint64_t sub_1009E392C()
{
  return qword_10247F668;
}

uint64_t sub_1009E3938()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "NRPairedDeviceRegistryDeviceDidPairNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F670 = result;
  }
  else
  {
    uint64_t result = qword_10247F670;
  }
  off_10241F7F0[0] = sub_1009E39B8;
  return result;
}

uint64_t sub_1009E39B8()
{
  return qword_10247F670;
}

void sub_1009E39C4(id a1)
{
  qword_10247F680 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_1009E39F0()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "NRPairedDeviceRegistryDeviceDidUnpairNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F688 = result;
  }
  else
  {
    uint64_t result = qword_10247F688;
  }
  off_10241F7F8[0] = sub_1009E3A70;
  return result;
}

uint64_t sub_1009E3A70()
{
  return qword_10247F688;
}

id sub_1009E3A7C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) deviceDidChangeCapabilitiesDarwinNotification];
}

uint64_t sub_1009E3A84()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "NRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F690 = result;
  }
  else
  {
    uint64_t result = qword_10247F690;
  }
  off_10241F800[0] = sub_1009E3B04;
  return result;
}

uint64_t sub_1009E3B04()
{
  return qword_10247F690;
}

Class sub_1009E3B10()
{
  if (qword_10247F6A0 != -1) {
    dispatch_once(&qword_10247F6A0, &stru_1022D8240);
  }
  Class result = objc_getClass("PSYSyncCoordinator");
  qword_10247F698 = (uint64_t)result;
  off_10241F808[0] = sub_1009E3B74;
  return result;
}

uint64_t sub_1009E3B74()
{
  return qword_10247F698;
}

void sub_1009E3B80(id a1)
{
  qword_10247F6A8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PairedSync.framework/PairedSync", 2);
}

Class sub_1009E3BAC()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_10247F6B0 = (uint64_t)result;
  off_10241F810[0] = sub_1009E3C10;
  return result;
}

uint64_t sub_1009E3C10()
{
  return qword_10247F6B0;
}

uint64_t sub_1009E3C1C()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "NRDevicePropertyLocalPairingDataStorePath");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F6B8 = result;
  }
  else
  {
    uint64_t result = qword_10247F6B8;
  }
  off_10241F818[0] = sub_1009E3C9C;
  return result;
}

uint64_t sub_1009E3C9C()
{
  return qword_10247F6B8;
}

uint64_t sub_1009E3CA8()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "NRDevicePropertyPairingID");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F6C0 = result;
  }
  else
  {
    uint64_t result = qword_10247F6C0;
  }
  off_10241F820[0] = sub_1009E3D28;
  return result;
}

uint64_t sub_1009E3D28()
{
  return qword_10247F6C0;
}

uint64_t sub_1009E3D34()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "_NRDevicePropertyBluetoothIdentifier");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F6C8 = result;
  }
  else
  {
    uint64_t result = qword_10247F6C8;
  }
  off_10241F828[0] = sub_1009E3DB4;
  return result;
}

uint64_t sub_1009E3DB4()
{
  return qword_10247F6C8;
}

uint64_t sub_1009E3DC0()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "NRDevicePropertySystemBuildVersion");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F6D0 = result;
  }
  else
  {
    uint64_t result = qword_10247F6D0;
  }
  off_10241F830[0] = sub_1009E3E40;
  return result;
}

uint64_t sub_1009E3E40()
{
  return qword_10247F6D0;
}

uint64_t sub_1009E3E4C()
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10247F680, "NRDevicePropertyName");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247F6D8 = result;
  }
  else
  {
    uint64_t result = qword_10247F6D8;
  }
  off_10241F838[0] = sub_1009E3ECC;
  return result;
}

uint64_t sub_1009E3ECC()
{
  return qword_10247F6D8;
}

uint64_t sub_1009E3ED8(uint64_t a1)
{
  if (qword_10247F678 != -1) {
    dispatch_once(&qword_10247F678, &stru_1022D8220);
  }
  id v2 = (uint64_t (*)())dlsym((void *)qword_10247F680, "NRWatchOSVersionForRemoteDevice");
  off_10241F840 = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

__n128 sub_1009E3F54(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 8) = result;
  *(unsigned char *)a1 = 0;
  return result;
}

void sub_1009E3F64(uint64_t a1, double a2, double a3)
{
  if (a2 > a3 && a2 > 0.0 && a3 > 0.0)
  {
    *(double *)(a1 + 8) = a2;
    *(double *)(a1 + 16) = a3;
    *(unsigned char *)a1 = 1;
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_1022D8260);
    }
    __int16 v5 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134284033;
      double v8 = a2;
      __int16 v9 = 2049;
      double v10 = a3;
      __int16 v11 = 2049;
      double v12 = a2 - a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#VDR, CLGPSMachContConversion update with timestamp_gps_s, %{private}.3f, mach_continuous_s, %{private}.3f, GPSMachContDelta, %{private}.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_1022D8260);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGPSMachContConversion::Update(const double, const double)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

BOOL sub_1009E4168(uint64_t a1, double *a2, double a3)
{
  *a2 = *(double *)(a1 + 8) - *(double *)(a1 + 16) + a3;
  return *(unsigned char *)a1 && vabdd_f64(a3, *(double *)(a1 + 16)) < 20000.0;
}

void sub_1009E41A4(id a1)
{
  qword_102419508 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_1009E41D4(uint64_t a1, int a2, uint64_t a3, char a4)
{
  id v6 = (void *)sub_1009E4320(a1, "CLWalkingSpeedCalRecorderDb", a2, a3, 1, 2.56);
  void *v6 = off_1022D8290;
  v6[9] = off_1022D8350;
  v6[44] = off_1022D83A0;
  sub_100F03BA0(v6 + 45, 0, 0);
  sub_100F03BA0((void *)(a1 + 376), 0, 0);
  sub_100F03BA0((void *)(a1 + 392), 0, 0);
  sub_100F03BA0((void *)(a1 + 408), 0, 0);
  sub_100F03BA0((void *)(a1 + 424), 0, 0);
  *(unsigned char *)(a1 + 440) = a4;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  *(void *)(a1 + 160) = [[CLWalkingSpeedCalCloudKitDelegate alloc] initWithWalkingSpeedCalRecorderDb:a1];
  return a1;
}

void sub_1009E430C(_Unwind_Exception *a1)
{
  sub_1009E47D4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E4320(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  double v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *double v12 = off_1022ADB08;
  *(void *)a1 = off_1022D8470;
  *(void *)(a1 + 72) = off_1022D8518;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022D8470;
  *(void *)(a1 + 72) = off_1022D8518;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 12000;
  *(void *)(a1 + 280) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 288));
  *(void *)(a1 + 288) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1009E4738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *double v27 = v30;
  sub_1003BE1F8(v31);
  sub_10080DBC4(v29);
  sub_1011F8AE0(v28);
  *double v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1009E47CC()
{
}

void *sub_1009E47D4(void *a1)
{
  *a1 = off_1022D8470;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022D8518;
  a1[35] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 36);
  sub_10080DBC4(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1009E4894(void *a1)
{
  *a1 = off_1022D8290;
  a1[9] = off_1022D8350;
  a1[44] = off_1022D83A0;
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0;
  }

  return sub_1009E47D4(a1);
}

void *sub_1009E493C(uint64_t a1)
{
  return sub_1009E4894((void *)(a1 - 72));
}

void *sub_1009E4944(uint64_t a1)
{
  return sub_1009E4894((void *)(a1 - 352));
}

void sub_1009E494C(void *a1)
{
  sub_1009E4894(a1);

  operator delete();
}

void sub_1009E4984(uint64_t a1)
{
  sub_1009E4894((void *)(a1 - 72));

  operator delete();
}

void sub_1009E49C0(uint64_t a1)
{
  sub_1009E4894((void *)(a1 - 352));

  operator delete();
}

uint64_t sub_1009E49FC(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 408), &v8);
  id v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    __int16 v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1009E4AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009E4AE8(uint64_t a1)
{
  return sub_1009E49FC(a1 - 72);
}

uint64_t sub_1009E4AF0(_DWORD *a1)
{
  LODWORD(result) = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 152))(a1);
  a1[33] = result;
  return (int)result;
}

uint64_t sub_1009E4B3C(uint64_t a1)
{
  uint64_t v1 = a1 - 72;
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 72) + 152))(a1 - 72);
  *(_DWORD *)(v1 + 132) = result;
  return (int)result;
}

void *sub_1009E4B8C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "WalkingSpeedStrideCal");
}

void *sub_1009E4B9C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "WalkingSpeedStrideCal");
}

uint64_t sub_1009E4BAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1009E4BD4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 - 352) + 120))(a1 - 352, a2, 0);
}

uint64_t sub_1009E4C00(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v8 = a1 + 112;
  uint64_t v10 = v8 - 40;
  uint64_t v35 = v8;
  (*(void (**)(void))(v9 + 16))();
  __int16 v37 = 256;
  if ((sub_100082064(v10) & 1) == 0)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022D8440);
    }
    double v29 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Database not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022D8440);
      }
      LOWORD(v34) = 0;
      double v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLWalkingSpeedCalRecorderDb::queryCalsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<WalkingSpeedStrideCal> &) const", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    uint64_t v30 = 109;
    goto LABEL_32;
  }
  sub_100082068((void *)(a1 + 424), &v34);
  *(_DWORD *)std::string buf = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  if (a4 >= a3)
  {
    __int16 v11 = (sqlite3_stmt *)sub_10014D19C(v34);
    if (sub_100055D58(v11, 1, a3))
    {
      double v12 = (sqlite3_stmt *)sub_10014D19C(v34);
      if (sub_100055D58(v12, 2, a4))
      {
        while (!sub_1009E5068(&v34, (uint64_t)buf))
        {
          long long v13 = v39;
          long long v14 = v40;
          long long v15 = v41;
          uint64_t v17 = *(_OWORD **)(a2 + 8);
          unint64_t v16 = *(void *)(a2 + 16);
          if ((unint64_t)v17 >= v16)
          {
            __int16 v19 = *(_OWORD **)a2;
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(void *)a2) >> 4);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0x555555555555555) {
              sub_1001D7FD4();
            }
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v19) >> 4);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v23 = 0x555555555555555;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23)
            {
              double v24 = (char *)sub_10014F86C(a2 + 16, v23);
              __int16 v19 = *(_OWORD **)a2;
              uint64_t v17 = *(_OWORD **)(a2 + 8);
            }
            else
            {
              double v24 = 0;
            }
            double v25 = &v24[48 * v20];
            *(_OWORD *)double v25 = v13;
            *((_OWORD *)v25 + 1) = v14;
            *((_OWORD *)v25 + 2) = v15;
            uint64_t v26 = v25;
            if (v17 != v19)
            {
              do
              {
                long long v27 = *(v17 - 3);
                long long v28 = *(v17 - 1);
                *((_OWORD *)v26 - 2) = *(v17 - 2);
                *((_OWORD *)v26 - 1) = v28;
                *((_OWORD *)v26 - 3) = v27;
                v26 -= 48;
                v17 -= 3;
              }
              while (v17 != v19);
              __int16 v19 = *(_OWORD **)a2;
            }
            __int16 v18 = v25 + 48;
            *(void *)a2 = v26;
            *(void *)(a2 + 8) = v25 + 48;
            *(void *)(a2 + 16) = &v24[48 * v23];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *uint64_t v17 = v39;
            v17[1] = v14;
            __int16 v18 = v17 + 3;
            void v17[2] = v15;
          }
          *(void *)(a2 + 8) = v18;
        }
      }
    }
  }
  uint64_t v31 = v34;
  uint64_t v34 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v30 = 100;
  if (HIBYTE(v37))
  {
LABEL_32:
    if ((_BYTE)v37) {
      pthread_mutex_unlock(v36);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
    }
  }
  return v30;
}

void sub_1009E5000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E5068(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_1009E5BCC(a1, a2);
  return 0;
}

uint64_t sub_1009E50C8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return sub_1009E4C00(a1 - 352, a2, a3, a4);
}

BOOL sub_1009E50D0(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  if (!a3) {
    return 0;
  }
  id v6 = objc_alloc_init((Class)NSMutableArray);
  memset(v16, 0, sizeof(v16));
  int v7 = sub_1009E5374(a1, a2, (uint64_t)v16);
  if (!v7)
  {
    do
    {
      uint64_t v15 = 0;
      uint64_t v8 = [[CLSerializableWalkingSpeedStrideCal alloc] initWithWalkingSpeedStrideCal:v16];
      uint64_t v9 = +[NSKeyedArchiver archivedDataWithRootObject:v8 requiringSecureCoding:1 error:&v15];
      if (v15)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022D8440);
        }
        uint64_t v10 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138412290;
          uint64_t v20 = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize walking speed stride cal: %@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1022D8440);
          }
          int v17 = 138412290;
          uint64_t v18 = v15;
          __int16 v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWalkingSpeedCalRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      else
      {
        [v6 addObject:v9];
      }

      int v12 = sub_1009E5374(a1, a2, (uint64_t)v16);
    }
    while (!v12);
    int v7 = v12;
  }
  long long v14 = (NSArray *)[v6 count];
  if (v14) {
    long long v14 = +[NSArray arrayWithArray:v6];
  }
  *a3 = v14;

  return v7 == 1;
}

uint64_t sub_1009E5374(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

BOOL sub_1009E5404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  id v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:a2 error:&v9];
  uint64_t v5 = v9;
  if (v9)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022D8440);
    }
    id v6 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize walking speed stride cal: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022D8440);
      }
      int v10 = 138412290;
      uint64_t v11 = v9;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWalkingSpeedCalRecorderDb::dataBlobToEntry(NSData *, WalkingSpeedStrideCal &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    [v4 getWalkingSpeedStrideCal:a3];
  }
  return v5 == 0;
}

void sub_1009E5600(uint64_t a1)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_1005F7B0C(*(void *)(a1 + 80), "WalkingSpeedStrideCal", (const char **)&qword_10247F6E0, (const std::string::value_type **)&qword_10247F860, 0);
    *(void *)(a1 + 360) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO WalkingSpeedStrideCal (startTime, endTime, cadenceWatch, cadenceGaitCycle, meanWalkingSpeed, gaitCycleYield) VALUES (?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 368) = v2;
    *(void *)(a1 + 376) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM WalkingSpeedStrideCal WHERE id <= ?");
    *(void *)(a1 + 384) = v3;
    *(void *)(a1 + 392) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM WalkingSpeedStrideCal ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 400) = v4;
    *(void *)(a1 + 408) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM WalkingSpeedStrideCal");
    *(void *)(a1 + 416) = v5;
    *(void *)(a1 + 424) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM WalkingSpeedStrideCal WHERE startTime BETWEEN ? and ? ORDER BY startTime DESC");
    *(void *)(a1 + 432) = v6;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  }
  else
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022D8440);
    }
    int v7 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022D8440);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWalkingSpeedCalRecorderDb::prepareSQLStatements()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_1009E5850(uint64_t a1, double *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_10002B640(*(void *)(a1 + 80));
    sub_100082068((void *)(a1 + 360), &v21);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v21);
    if (sub_100055D58(v5, 1, *a2))
    {
      uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v21);
      if (sub_100055D58(v6, 2, a2[1]))
      {
        int v7 = (sqlite3_stmt *)sub_10014D19C(v21);
        if (sub_100055D58(v7, 3, a2[2]))
        {
          uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v21);
          if (sub_100055D58(v8, 4, a2[3]))
          {
            uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v21);
            if (sub_100055D58(v9, 5, a2[4]))
            {
              int v10 = (sqlite3_stmt *)sub_10014D19C(v21);
              if (sub_100055D58(v10, 6, a2[5]))
              {
                uint64_t v11 = *(void *)(a1 + 80);
                int v12 = (sqlite3_stmt *)sub_10014D19C(v21);
                sub_10001FEB0(v11, v12);
                ++*(_DWORD *)(a1 + 132);
              }
            }
          }
        }
      }
    }
    if (!*(unsigned char *)(a1 + 440))
    {
      int v13 = sub_1006037D0(*(void *)(a1 + 80));
      sub_100082068((void *)(a1 + 376), &v20);
      long long v14 = (sqlite3_stmt *)sub_10014D19C(v20);
      if (sub_10014D1A4(v14, 1, v13 - 100))
      {
        uint64_t v15 = *(void *)(a1 + 80);
        unint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v20);
        sub_10001FEB0(v15, v16);
        *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
      }
      uint64_t v17 = v20;
      uint64_t v20 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    sub_100028FB4(*(void *)(a1 + 80));
    uint64_t v18 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v18 + 88) <= 0) {
      uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v19 = *(void *)(v18 + 88);
    }
    sub_10003CC68(v18, v19);
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1009E5A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009E5AA8(uint64_t a1, _OWORD *a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 392), &v12);
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  uint64_t v4 = sub_1009E5068(&v12, (uint64_t)&v8);
  if (!v4)
  {
    long long v5 = v10;
    *a2 = v9;
    a2[1] = v5;
    a2[2] = v11;
  }
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

void sub_1009E5B60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

double sub_1009E5B7C(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  sub_1009E5BCC(a2, (uint64_t)v6);
  long long v4 = v8;
  *a3 = v7;
  a3[1] = v4;
  double result = *(double *)&v9;
  a3[2] = v9;
  return result;
}

void sub_1009E5BCC(uint64_t *a1, uint64_t a2)
{
  long long v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  long long v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  long long v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
  long long v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  long long v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  long long v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 6);
}

uint64_t sub_1009E5C7C(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A76A30(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    uint64_t v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v7 = __p;
    }
    else {
      long long v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    long long v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1009E6080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E6100(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        long long v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          long long v5 = __p;
        }
        else {
          long long v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        long long v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          long long v9 = __p;
        }
        else {
          long long v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A76BA0(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1009E6548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E65C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1009E7FF4(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D8558);
  }
  long long v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)int v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D8558);
    }
    long long v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D8558);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1009E6D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1009E6D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_1009E6D88(uint64_t a1, long long *a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  memset(v29, 0, sizeof(v29));
  int v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 104))(a1, v29);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D8558);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D8558);
        }
        LOWORD(v31) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)a2;
    double v8 = *(double *)v29;
    double v9 = *(double *)a2 - *(double *)v29;
    if (v9 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D8558);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = *(double *)a2;
        *(_DWORD *)std::string buf = 134349312;
        double v36 = *(double *)v29;
        __int16 v37 = 2050;
        double v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D8558);
        }
        double v23 = *(double *)a2;
        int v31 = 134349312;
        double v32 = *(double *)v29;
        __int16 v33 = 2050;
        double v34 = v23;
        double v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)a2;
      double v8 = *(double *)v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D8558);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)a2;
          *(_DWORD *)std::string buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022D8558);
          }
          double v25 = *(double *)a2;
          int v31 = 134217984;
          double v32 = v25;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v28 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022D8558);
        double v17 = v28;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D8558);
        }
        int v31 = 134217984;
        double v32 = v18;
        long long v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<WalkingSpeedStrideCal, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = WalkingSpeedStrideCal, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v29, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 224) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_1009E759C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009E75C8(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A76D10(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1009E793C(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101A76E80(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1009E7C68(uint64_t a1)
{
  return sub_1009E65C8(a1 - 72);
}

void sub_1009E7C70(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

uint64_t sub_1009E7CA0(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101A76FF0(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1009E7FC4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1009E7FF4(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1009E8074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009E8090(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1009E80C0()
{
  qword_10247F6E0 = (uint64_t)"id";
  dword_10247F6E8 = 1;
  word_10247F6EC = 257;
  byte_10247F6F0 = 0;
  byte_10247F708 = 0;
  qword_10247F710 = (uint64_t)"startTime";
  dword_10247F718 = 2;
  word_10247F71C = 0;
  byte_10247F720 = 0;
  byte_10247F738 = 0;
  qword_10247F740 = (uint64_t)"endTime";
  dword_10247F748 = 2;
  word_10247F74C = 0;
  byte_10247F750 = 0;
  byte_10247F768 = 0;
  qword_10247F770 = (uint64_t)"cadenceWatch";
  dword_10247F778 = 2;
  word_10247F77C = 0;
  byte_10247F780 = 0;
  byte_10247F798 = 0;
  qword_10247F7A0 = (uint64_t)"cadenceGaitCycle";
  dword_10247F7A8 = 2;
  word_10247F7AC = 0;
  byte_10247F7B0 = 0;
  byte_10247F7C8 = 0;
  qword_10247F7D0 = (uint64_t)"meanWalkingSpeed";
  dword_10247F7D8 = 2;
  word_10247F7DC = 0;
  byte_10247F7E0 = 0;
  byte_10247F7F8 = 0;
  qword_10247F800 = (uint64_t)"gaitCycleYield";
  dword_10247F808 = 2;
  word_10247F80C = 0;
  byte_10247F810 = 0;
  byte_10247F828 = 0;
  qword_10247F830 = 0;
  dword_10247F838 = 5;
  word_10247F83C = 0;
  byte_10247F840 = 0;
  byte_10247F858 = 0;
  qword_10247F860 = (uint64_t)"startTime";
  *(void *)algn_10247F868 = 0;
}

void sub_1009E81C0()
{
}

uint64_t sub_1009E852C(uint64_t a1)
{
  uint64_t v3 = (const char **)_CFGetProgname();
  BOOL v4 = strcmp(*v3, "locationd") == 0;
  *(unsigned char *)(qword_10248A7D0 + 16) = v4;
  pthread_setname_np("com.apple.CoreMotion.MotionThread");
  if (!*(unsigned char *)(qword_10248A7D0 + 16)) {
    operator new();
  }
  sub_1000C7F88(buf);
  long long v5 = *(_OWORD *)&buf[0].version;
  buf[0].version = 0;
  buf[0].info = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(qword_10248A7D0 + 32);
  *(_OWORD *)(qword_10248A7D0 + 24) = v5;
  if (v6)
  {
    sub_1000DB0A0(v6);
    if (buf[0].info) {
      sub_1000DB0A0((std::__shared_weak_count *)buf[0].info);
    }
  }
  int v31 = 0;
  if ((sub_10006EF84(*(void *)(qword_10248A7D0 + 24), "MotionThreadPriority", &v31) & 1) == 0) {
    int v31 = -1;
  }
  int v29 = 0;
  uint64_t v7 = pthread_self();
  int v8 = pthread_getschedparam(v7, &v29, &v30);
  if (v8)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D8658);
    }
    double v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0].version) = 67240192;
      HIDWORD(buf[0].version) = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Could not get scheduling parameters for motion thread, error = %{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022D8658);
      }
      LODWORD(context.version) = 67240192;
      HIDWORD(context.version) = v8;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    int sched_priority = v31;
    if (v31 <= 0)
    {
      int priority_max = sched_get_priority_max(v29);
      int sched_priority = v30.sched_priority;
      if (priority_max > v30.sched_priority) {
        int sched_priority = priority_max;
      }
    }
    v30.int sched_priority = sched_priority;
    unsigned __int8 v13 = pthread_self();
    pthread_setschedparam(v13, v29, &v30);
    unsigned __int8 v14 = pthread_self();
    pthread_getschedparam(v14, &v29, &v30);
  }
  *(void *)qword_10248A7D0 = CFRunLoopGetCurrent();
  sub_1009E93D4(a1);
  pthread_dependency_fulfill_np();
  memset(&context, 0, sizeof(context));
  uint64_t v15 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &context);
  if (!v15)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D8658);
    }
    uint64_t v16 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].version) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "could not create runloop source", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022D8658);
      }
      LOWORD(v32) = 0;
      double v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
  CFRunLoopAddSource(*(CFRunLoopRef *)qword_10248A7D0, v15, kCFRunLoopCommonModes);
  int v17 = _CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D8678);
  }
  double v18 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67174657;
    HIDWORD(buf[0].version) = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "_CFRunLoopSetPerCalloutAutoreleasepoolEnabled() returned a value of, %{private}d.", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D8678);
    }
    int v32 = 67174657;
    int v33 = v17;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (v17)
  {
    uint64_t v19 = 0;
    long long v20 = 0;
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
    buf[0].version = 0;
    buf[0].info = Mutable;
    buf[0].retain = (const void *(__cdecl *)(const void *))&_CFRetain;
    buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
    buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
    long long v20 = CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_1009E90BC, buf);
    uint64_t v19 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_1009E90BC, buf);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_10248A7D0, v20, kCFRunLoopCommonModes);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_10248A7D0, v19, kCFRunLoopCommonModes);
  }
  *(void *)(qword_10248A7D0 + 40) = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v23 = CFRunLoopTimerCreateWithHandler(kCFAllocatorDefault, Current + 1.0, 5.0, 0, 0, &stru_1022D85F8);
  CFRunLoopAddTimer(*(CFRunLoopRef *)qword_10248A7D0, v23, kCFRunLoopCommonModes);
  CFRunLoopRun();
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022D8658);
  }
  double v24 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf[0].version) = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Motion thread exiting", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D8658);
    }
    LOWORD(context.version) = 0;
    long long v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  if (v23)
  {
    CFRunLoopRemoveTimer(*(CFRunLoopRef *)qword_10248A7D0, v23, kCFRunLoopCommonModes);
    CFRelease(v23);
  }
  if (v19)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_10248A7D0, v19, kCFRunLoopCommonModes);
    CFRelease(v19);
  }
  if (v20)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_10248A7D0, v20, kCFRunLoopCommonModes);
    CFRelease(v20);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v15)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_10248A7D0, v15, kCFRunLoopCommonModes);
    CFRelease(v15);
  }
  return 0;
}

void sub_1009E8E14()
{
}

id sub_1009E8E44()
{
  return +[CLSilo main];
}

void sub_1009E8E50(id a1)
{
  qword_10247F880 = (uint64_t)+[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", +[CLSilo main]);
}

void sub_1009E8E94(uint64_t a1, uint64_t a2)
{
  if (CFRunLoopGetCurrent() == *(CFRunLoopRef *)qword_10248A7D0)
  {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  }
  else
  {
    uint64_t inited = pthread_dependency_init_np();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1009E9018;
    v5[3] = &unk_1022ACE00;
    void v5[4] = a2;
    v5[5] = &v6;
    sub_1009E8F7C(inited, (uint64_t)v5);
    pthread_dependency_wait_np();
  }
}

void sub_1009E8F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(__CFRunLoop **)qword_10248A7D0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1009E9060;
  block[3] = &unk_1022D7BF0;
  block[4] = a2;
  CFRunLoopPerformBlock(v2, kCFRunLoopDefaultMode, block);
  CFRunLoopWakeUp(*(CFRunLoopRef *)qword_10248A7D0);
}

uint64_t sub_1009E9018(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  return pthread_dependency_fulfill_np();
}

void sub_1009E9060(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1009E90AC()
{
  return *(unsigned __int8 *)(qword_10248A7D0 + 16);
}

void sub_1009E90BC(int a1, uint64_t a2, CFArrayRef theArray)
{
  if (a2 == 1) {
    goto LABEL_6;
  }
  if (a2 == 128 || a2 == 32)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count <= 0) {
      sub_101A77330();
    }
    CFIndex v6 = Count - 1;
    CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool();
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      uint64_t v7 = (const void *)NSPushAutoreleasePool();
      CFArrayAppendValue(theArray, v7);
    }
  }
}

void sub_1009E916C(id a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D8678);
  }
  uint64_t v1 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = *(_DWORD *)(qword_10248A7D0 + 48);
    *(_DWORD *)std::string buf = 67109120;
    int v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Motion thread deadlock watchdog after %d petting", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D8678);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (&_ADClientAddValueForScalarKey)
  {
    ADClientAddValueForScalarKey();
    id v3 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@", @"com.apple.CoreMotion.ThreadDeadlockCount", -[NSProcessInfo processName](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "processName")];
    ADClientAddValueForScalarKey();
  }
}

uint64_t sub_1009E9388()
{
  return *(void *)_CFGetProgname();
}

void sub_1009E93A4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1009E93D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    int v2 = *(dispatch_once_t **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1009E9470;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    if (*v2 != -1) {
      dispatch_once(v2, block);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

uint64_t sub_1009E9470()
{
  return pthread_dependency_init_np();
}

void sub_1009E9484(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1009E94B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1009E94E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1009E956C(id a1)
{
  qword_10247F898 = objc_alloc_init(CLLocationPushRegistrar);
}

void sub_1009E96F4(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022D8748);
  }
  int v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Location Push Registrar XPC invalidation handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8748);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLLocationPushRegistrar connect]_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }

  *(void *)(*(void *)(a1 + 32) + 8) = 0;
}

void sub_1009E989C(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022D8748);
  }
  int v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Location Push Registrar XPC interruption handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022D8748);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLLocationPushRegistrar connect]_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }

  *(void *)(*(void *)(a1 + 32) + 8) = 0;
}

uint64_t sub_1009E9AE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1009E9BA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1009E9BC4(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

unint64_t sub_1009E9BF4()
{
  unint64_t result = sub_101115BEC();
  if (result) {
    operator new();
  }
  return result;
}

void sub_1009E9C40()
{
}

uint64_t sub_1009E9C64()
{
  if (qword_10247F8A0 != -1) {
    dispatch_once(&qword_10247F8A0, &stru_1022D8768);
  }
  return qword_10248A7D8;
}

uint64_t sub_1009E9CAC(uint64_t a1)
{
  uint64_t v2 = sub_1011157F4(a1);
  *(void *)uint64_t v2 = off_1022D8798;
  *(unsigned char *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  uint64_t v3 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1009E9D68;
  v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  sub_1009E8E94(v3, (uint64_t)v5);
  return a1;
}

void sub_1009E9D54(_Unwind_Exception *a1)
{
  sub_1009E9DA4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1009E9D68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1011158D8(v1);

  return sub_101115CC8(v1);
}

void *sub_1009E9DA4(void *a1)
{
  *a1 = &off_1022D8830;
  sub_1004C62FC(a1 + 3, 0);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

uint64_t sub_1009E9DF8(uint64_t a1, char a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 1;
  uint64_t v4 = sub_1000D3E78();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1009E9ED0;
  v7[3] = &unk_1022D87C0;
  char v8 = a2;
  void v7[4] = &v9;
  void v7[5] = a1;
  sub_1009E8E94(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1009E9EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009E9ED0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(v2 + 52);
  if (*(unsigned char *)(a1 + 48))
  {
    if (v3 != -1)
    {
      int v4 = v3 + 1;
LABEL_6:
      *(_DWORD *)(v2 + 52) = v4;
      goto LABEL_20;
    }
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    uint64_t v5 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid client count. Not increasing.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1022D8850);
      }
      LOWORD(v25) = 0;
LABEL_75:
      double v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  else
  {
    if (v3)
    {
      int v4 = v3 - 1;
      goto LABEL_6;
    }
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    int v6 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid client count. Not decreasing.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1022D8850);
      }
      LOWORD(v25) = 0;
      goto LABEL_75;
    }
  }
LABEL_20:
  int v7 = *(_DWORD *)(v2 + 52) != 0;
  int v8 = *(unsigned __int8 *)(v2 + 40);
  if (qword_102419070 != -1) {
    dispatch_once(&qword_102419070, &stru_1022D8850);
  }
  uint64_t v9 = qword_102419078;
  if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)(v2 + 52);
    int v11 = *(unsigned __int8 *)(v2 + 40);
    *(_DWORD *)std::string buf = 67240704;
    int v32 = v10;
    __int16 v33 = 1026;
    int v34 = v11;
    __int16 v35 = 1026;
    BOOL v36 = v8 != v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[CLSPUMagicMountControl] Number of clients,%{public}u, enabled,%{public}d, shouldConfigure,%{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    int v16 = *(_DWORD *)(v2 + 52);
    int v17 = *(unsigned __int8 *)(v2 + 40);
    int v25 = 67240704;
    int v26 = v16;
    __int16 v27 = 1026;
    int v28 = v17;
    __int16 v29 = 1026;
    BOOL v30 = v8 != v7;
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (sub_1009EA808(v2) && !sub_1009EAB68(v2))
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    char v12 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[CLMagicMountControl] APWakesAllowed command failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1022D8850);
      }
      LOWORD(v25) = 0;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  if (v8 == v7)
  {
    if (*(unsigned char *)(a1 + 48))
    {
      char v24 = 5;
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1022D8850);
      }
      unsigned __int8 v13 = qword_102419078;
      if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[CLMagicMountControl] Querying current MagicMount state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419070 != -1) {
          dispatch_once(&qword_102419070, &stru_1022D8850);
        }
        LOWORD(v25) = 0;
        long long v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      if (!sub_101115C08(v2, (uint64_t)&v24, (char *)1))
      {
        if (qword_102419070 != -1) {
          dispatch_once(&qword_102419070, &stru_1022D8850);
        }
        unsigned __int8 v14 = qword_102419078;
        if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[CLMagicMountControl] Query failed", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419070 != -1) {
            dispatch_once(&qword_102419070, &stru_1022D8850);
          }
          LOWORD(v25) = 0;
          unint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
      }
    }
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    uint64_t v15 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[CLSPUMagicMountControl] No configure needed.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1022D8850);
      }
      LOWORD(v25) = 0;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  else
  {
    *(unsigned char *)(v2 + 40) = v7;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_101115CC8(v2);
  }
}

BOOL sub_1009EA808(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 52);
  int v4 = *(_DWORD *)(a1 + 56) == v2 && v2 != 0;
  int v5 = *(unsigned __int8 *)(a1 + 48);
  if (qword_102419070 != -1) {
    dispatch_once(&qword_102419070, &stru_1022D8850);
  }
  int v6 = qword_102419078;
  if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 52);
    int v7 = *(_DWORD *)(a1 + 56);
    int v9 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)std::string buf = 67240960;
    int v15 = v7;
    __int16 v16 = 1026;
    int v17 = v8;
    __int16 v18 = 1026;
    int v19 = v9;
    __int16 v20 = 1026;
    BOOL v21 = v5 != v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLSPUMagicMountControl] Number of DisableAPWakes clients,%{public}u, Number of service clients,%{public}d, prior status (isDisabled),%{public}d, shouldConfigure,%{public}d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    char v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::checkDisableAPWakesCriteria()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (v5 == v4)
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    int v10 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[CLSPUMagicMountControl] No APWakes configure needed.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1022D8850);
      }
      unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::checkDisableAPWakesCriteria()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 48) = v4;
  }
  return v5 != v4;
}

BOOL sub_1009EAB68(uint64_t a1)
{
  __int16 v6 = 4;
  int v2 = *(unsigned __int8 *)(a1 + 48) ^ 1;
  HIBYTE(v6) = *(unsigned char *)(a1 + 48) ^ 1;
  if (qword_102419070 != -1) {
    dispatch_once(&qword_102419070, &stru_1022D8850);
  }
  int v3 = qword_102419078;
  if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[CLMagicMountControl] APWakesSetting,isAllowed,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    int v7 = 67240192;
    int v8 = v2;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSPUMagicMountControl::sendAPWakesAllowedCommand()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_101115C08(a1, (uint64_t)&v6, (char *)2);
}

uint64_t sub_1009EAD38(uint64_t a1, char a2)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 1;
  uint64_t v4 = sub_1000D3E78();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1009EAE10;
  v7[3] = &unk_1022D87C0;
  char v8 = a2;
  void v7[4] = &v9;
  void v7[5] = a1;
  sub_1009E8E94(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1009EADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1009EAE10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(v2 + 56);
  if (*(unsigned char *)(a1 + 48))
  {
    if (v3)
    {
      int v4 = v3 - 1;
LABEL_6:
      *(_DWORD *)(v2 + 56) = v4;
      goto LABEL_19;
    }
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    uint64_t v5 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid APWake client count. Not decreasing.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 == -1)
      {
LABEL_32:
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setAPWakesAllowed(BOOL)_block_invoke", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        goto LABEL_19;
      }
LABEL_34:
      dispatch_once(&qword_102419070, &stru_1022D8850);
      goto LABEL_32;
    }
  }
  else
  {
    if (v3 != -1)
    {
      int v4 = v3 + 1;
      goto LABEL_6;
    }
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022D8850);
    }
    __int16 v6 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CLSPUMagicMountControl] Invalid APWake client count. Not increasing.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 == -1) {
        goto LABEL_32;
      }
      goto LABEL_34;
    }
  }
LABEL_19:
  if (sub_1009EA808(v2))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_1009EAB68(v2);
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1022D8850);
      }
      int v7 = qword_102419078;
      if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLMagicMountControl] APWakesAllowed command failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419070 != -1) {
          dispatch_once(&qword_102419070, &stru_1022D8850);
        }
        char v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUMagicMountControl::setAPWakesAllowed(BOOL)_block_invoke", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
}

void sub_1009EB20C(void *a1)
{
  sub_1009E9DA4(a1);

  operator delete();
}

void sub_1009EB244(void *a1)
{
  sub_1009E9DA4(a1);

  operator delete();
}

void sub_1009EB27C(id a1)
{
  qword_102419078 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

uint64_t sub_1009EB2AC(uint64_t a1)
{
  *(void *)a1 = off_1022D8880;
  *(_DWORD *)(a1 + 16) = 1065353216;
  uint64_t v2 = (float *)(a1 + 16);
  *(void *)(a1 + 8) = 0x40426A333F800000;
  *(_DWORD *)(a1 + 24) = 1053609165;
  int v3 = (float *)(a1 + 24);
  sub_1008A0670(a1 + 32, 2048, 0);
  uint64_t v4 = sub_1000D3E78();
  sub_10006B564(v4, buf);
  uint64_t v5 = (unsigned char *)(a1 + 20);
  char v6 = sub_1000D2988(*(uint64_t *)buf, "EnableEllipticalLoadCal", (BOOL *)(a1 + 20));
  if (v15[0]) {
    sub_1000DB0A0(v15[0]);
  }
  if ((v6 & 1) == 0) {
    *uint64_t v5 = 1;
  }
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1004D11B0(*(uint64_t *)buf, "EllipticalModelMetsScale", v2);
  if (v15[0]) {
    sub_1000DB0A0(v15[0]);
  }
  uint64_t v8 = sub_1000D3E78();
  sub_10006B564(v8, buf);
  sub_1004D11B0(*(uint64_t *)buf, "EllipticalModelSwitchMargin", v3);
  if (v15[0]) {
    sub_1000DB0A0(v15[0]);
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D88C0);
  }
  uint64_t v9 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *v5;
    double v11 = *v3;
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v10;
    LOWORD(v15[0]) = 2048;
    *(std::__shared_weak_count **)((char *)v15 + 2) = *(std::__shared_weak_count **)&v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Ellptical, Load Calibration Enabled status, %d, WR-HR switch margin, %f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D88C0);
    }
    unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLNatalieEllipticalModel::CLNatalieEllipticalModel()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return a1;
}

void sub_1009EB590(_Unwind_Exception *a1)
{
  sub_1008745F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009EB5D4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
    }
  }
  return result;
}

uint64_t sub_1009EB6A4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 40) + 48))(*(void *)(a3 + 40));
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(__n128))(**(void **)(a3 + 8) + 48);
    v6.n128_f64[0] = a1;
    return v7(v6);
  }
  return result;
}

void sub_1009EB744(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)(a2 + 1364);
  float v44 = *(float *)(a2 + 1368);
  float v7 = *(float *)(a2 + 1372);
  float v8 = *(float *)(a2 + 1376);
  float v9 = *(float *)(a2 + 1380);
  unsigned int v10 = *(_DWORD *)(a2 + 400);
  double v11 = *(double *)(a2 + 128);
  float v12 = (double)v10 / (v11 - *(double *)(a2 + 120));
  float v13 = (float)(*(float *)(a1 + 12) / v6) * v12;
  if (v12 <= 0.0) {
    float v14 = 2.1;
  }
  else {
    float v14 = (float)((float)(v12 * 0.5748) + 3.4781) + (float)(v13 * 34.475);
  }
  unsigned __int8 v45 = 0;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D88C0);
  }
  int v15 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v16 = *(double *)(a2 + 128) - *(double *)(a2 + 120);
    double v17 = *(float *)(a1 + 12);
    *(_DWORD *)std::string buf = 134219776;
    double v57 = v11;
    __int16 v58 = 2048;
    double v59 = v16;
    __int16 v60 = 1024;
    *(_DWORD *)int v61 = v10;
    *(_WORD *)&v61[4] = 2048;
    *(double *)&v61[6] = v12;
    *(_WORD *)&v61[14] = 2048;
    *(double *)&v61[16] = v17;
    *(_WORD *)&v61[24] = 2048;
    *(double *)&v61[26] = v6;
    *(_WORD *)&v61[34] = 2048;
    *(double *)&v61[36] = v13;
    *(_WORD *)&v61[44] = 2048;
    *(double *)&v61[46] = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Elliptical, Linear Regression, timestamp, %f, duration, %f, stepcount, %d, steprate, %f, resistance, %f, weight, %f, feature2, %f, mets, %f", buf, 0x4Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D88C0);
    }
    double v37 = *(double *)(a2 + 128) - *(double *)(a2 + 120);
    double v38 = *(float *)(a1 + 12);
    int v46 = 134219776;
    double v47 = v11;
    __int16 v48 = 2048;
    double v49 = v37;
    __int16 v50 = 1024;
    *(_DWORD *)int v51 = v10;
    *(_WORD *)&v51[4] = 2048;
    *(double *)&v51[6] = v12;
    *(_WORD *)&v51[14] = 2048;
    *(double *)&v51[16] = v38;
    *(_WORD *)&v51[24] = 2048;
    *(double *)&v51[26] = v6;
    *(_WORD *)&v51[34] = 2048;
    *(double *)&v51[36] = v13;
    *(_WORD *)&v51[44] = 2048;
    *(double *)&v51[46] = v14;
    long long v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  float v18 = 0.0;
  if (!sub_1001860C8(a2) || *(double *)(a2 + 600) >= *(double *)a2) {
    goto LABEL_18;
  }
  float v19 = *(double *)(a2 + 560);
  double v20 = v19;
  float v21 = (v9 - v19) / (v9 - v8);
  float v22 = sub_101141BD8(v21, v7);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D88C0);
  }
  float v18 = v44 * v22;
  double v23 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134219264;
    double v57 = v11;
    __int16 v58 = 2048;
    double v59 = v20;
    __int16 v60 = 2048;
    *(double *)int v61 = v9;
    *(_WORD *)&v61[8] = 2048;
    *(double *)&v61[10] = v8;
    *(_WORD *)&v61[18] = 2048;
    *(double *)&v61[20] = v44;
    *(_WORD *)&v61[28] = 2048;
    *(double *)&v61[30] = v18;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Elliptical, DT Regression, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D88C0);
    }
    int v46 = 134219264;
    double v47 = v11;
    __int16 v48 = 2048;
    double v49 = v20;
    __int16 v50 = 2048;
    *(double *)int v51 = v9;
    *(_WORD *)&v51[8] = 2048;
    *(double *)&unsigned char v51[10] = v8;
    *(_WORD *)&v51[18] = 2048;
    *(double *)&v51[20] = v44;
    *(_WORD *)&unsigned char v51[28] = 2048;
    *(double *)&v51[30] = v18;
    int v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  if (*(unsigned char *)(a1 + 20))
  {
    sub_1008A0674((char *)(a1 + 32), a2, &v45, v11, v18, v14);
    *(_DWORD *)(a1 + 8) = v24;
    int v25 = 2 * v45;
  }
  else
  {
LABEL_18:
    int v25 = 0;
  }
  double v26 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 40);
  float v27 = 1.0;
  if (*(float *)(a1 + 8) >= 1.0) {
    float v27 = *(float *)(a1 + 8);
  }
  if (v26 >= 300.0) {
    float v28 = v27;
  }
  else {
    float v28 = *(float *)(a1 + 8);
  }
  *(float *)(a1 + 8) = v28;
  float v29 = v14 * v28;
  float v30 = -1.0;
  if (v18 > 0.0) {
    float v30 = (float)(v18 - v29) / v18;
  }
  float v31 = *(float *)(a1 + 24);
  if (v30 > v31) {
    int v32 = 1;
  }
  else {
    int v32 = v25;
  }
  if (v30 <= v31) {
    float v33 = v29;
  }
  else {
    float v33 = v18;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D88C0);
  }
  int v34 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v35 = *(float *)(a1 + 8);
    double v36 = *(float *)(a1 + 16);
    *(_DWORD *)std::string buf = 134220288;
    double v57 = v11;
    __int16 v58 = 2048;
    double v59 = v18;
    __int16 v60 = 2048;
    *(double *)int v61 = v14;
    *(_WORD *)&v61[8] = 2048;
    *(double *)&v61[10] = v35;
    *(_WORD *)&v61[18] = 2048;
    *(double *)&v61[20] = v29;
    *(_WORD *)&v61[28] = 2048;
    *(double *)&v61[30] = v30;
    *(_WORD *)&v61[38] = 2048;
    *(double *)&v61[40] = v33;
    *(_WORD *)&v61[48] = 1024;
    *(_DWORD *)&v61[50] = v32;
    __int16 v62 = 2048;
    double v63 = v36;
    __int16 v64 = 1024;
    int v65 = v45;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Elliptical, METs, timestamp, %f, hrMets, %f, wrMets, %f, calibrationValue, %f, calibrated wrMets, %f, HR-WR diff, %f, mets, %f, metsSource, %d, fMetsScaling, %f, loadCalStatus, %d", buf, 0x5Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D88C0);
    }
    double v40 = *(float *)(a1 + 8);
    double v41 = *(float *)(a1 + 16);
    int v46 = 134220288;
    double v47 = v11;
    __int16 v48 = 2048;
    double v49 = v18;
    __int16 v50 = 2048;
    *(double *)int v51 = v14;
    *(_WORD *)&v51[8] = 2048;
    *(double *)&unsigned char v51[10] = v40;
    *(_WORD *)&v51[18] = 2048;
    *(double *)&v51[20] = v29;
    *(_WORD *)&unsigned char v51[28] = 2048;
    *(double *)&v51[30] = v30;
    *(_WORD *)&v51[38] = 2048;
    *(double *)&v51[40] = v33;
    *(_WORD *)&v51[48] = 1024;
    *(_DWORD *)&v51[50] = v32;
    __int16 v52 = 2048;
    double v53 = v41;
    __int16 v54 = 1024;
    int v55 = v45;
    double v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  *(float *)a3 = v18;
  *(float *)(a3 + 4) = v14;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v14;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v33 * *(float *)(a1 + 16);
  *(_DWORD *)(a3 + 24) = v32;
  *(_DWORD *)(a3 + 28) = 0;
  *(void *)(a3 + 32) = 0x600000003;
}

void sub_1009EBF44(void *a1)
{
  sub_1009EBFAC(a1);

  operator delete();
}

void sub_1009EBF7C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_1009EBFAC(void *a1)
{
  *a1 = off_1022D8880;
  uint64_t v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[12];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  float v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_1009EC038()
{
  uint64_t result = sub_10074157C();
  if ((result & 4) != 0) {
    operator new();
  }
  return result;
}

void sub_1009EC084()
{
}

uint64_t sub_1009EC0A8()
{
  if (qword_10247F8A8 != -1) {
    dispatch_once(&qword_10247F8A8, &stru_1022D88E0);
  }
  return qword_10248A7E0;
}

void sub_1009EC0F0(uint64_t a1)
{
}

void sub_1009EC19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  float v12 = (std::__shared_weak_count *)v10[6];
  if (v12) {
    sub_1000DB0A0(v12);
  }
  sub_1009D1DE4(v10);
  _Unwind_Resume(a1);
}

void *sub_1009EC1D0(void *a1)
{
  *a1 = off_1022D8910;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4(a1);
}

void sub_1009EC230(void *a1)
{
  sub_1009EC1D0(a1);

  operator delete();
}

double sub_1009EC268(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190C0 != -1) {
      dispatch_once(&qword_1024190C0, &stru_1022D8958);
    }
    int v3 = qword_1024190C8;
    if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    double v4 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022D8958);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    double v4 = 0.0;
    if (sub_1009EC580(a1))
    {
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022D8958);
      }
      float v8 = qword_1024190C8;
      if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_INFO))
      {
        double v9 = *a3;
        *(_DWORD *)std::string buf = 134349056;
        double v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Setting accelerometer update interval to %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022D8958);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_100A29D64(*(void *)(a1 + 40), *a3);
      return *a3;
    }
  }
  return v4;
}

uint64_t sub_1009EC580(uint64_t a1)
{
  unsigned int v2 = sub_10074157C();
  if ((v2 & 4) != 0)
  {
    if (!*(void *)(a1 + 40))
    {
      int v3 = (uint64_t *)sub_100A26784();
      uint64_t v16 = 0x30000FF00;
      char v17 = 0;
      sub_101A46D60(v3, (uint64_t)&v16, (uint64_t *)buf);
      long long v4 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
      *(_OWORD *)(a1 + 40) = v4;
      if (v5)
      {
        sub_1000DB0A0(v5);
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      id v6 = [&off_1023974C8 mutableCopy];
      unsigned int v15 = 0;
      uint64_t v7 = sub_1000D3E78();
      sub_10006B564(v7, buf);
      int v8 = sub_1004D0870(*(uint64_t *)buf, "IMULocationID", &v15);
      if (v15) {
        int v9 = 1;
      }
      else {
        int v9 = v8;
      }
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v9)
      {
        [v6 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15)] forKey:@"LocationID"];
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022D8958);
        }
        unsigned int v10 = qword_1024190C8;
        if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting Accel matching properties with IMULocationID %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190C0 != -1) {
            dispatch_once(&qword_1024190C0, &stru_1022D8958);
          }
          int v18 = 67109120;
          unsigned int v19 = v15;
          float v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAccelerometer::openHidDevice()", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
      }
      sub_100A29EB0(*(void *)(a1 + 40), v6);
      sub_100A2932C(*(uint64_t **)(a1 + 40), (uint64_t)sub_1009ED064, a1);
    }
  }
  else
  {
    if (qword_1024190C0 != -1) {
      dispatch_once(&qword_1024190C0, &stru_1022D8958);
    }
    double v11 = qword_1024190C8;
    if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Accel unavailable, unable to establish hid interface", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022D8958);
      }
      LOWORD(v18) = 0;
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAccelerometer::openHidDevice()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return (v2 >> 2) & 1;
}

void sub_1009EC970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

double sub_1009EC9A4(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190C0 != -1) {
      dispatch_once(&qword_1024190C0, &stru_1022D8958);
    }
    long long v4 = qword_1024190C8;
    if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unrecognized notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022D8958);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    double v5 = 0.0;
    if (sub_1009EC580(a1))
    {
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022D8958);
      }
      int v9 = qword_1024190C8;
      if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_INFO))
      {
        double v10 = *a3;
        *(_DWORD *)std::string buf = 134349056;
        double v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Setting batch interval to %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022D8958);
        }
        float v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      sub_100A29E04(*(void *)(a1 + 40), *a3);
      return *a3;
    }
  }
  return v5;
}

uint64_t sub_1009ECCD8(uint64_t a1, uint64_t *a2, void *a3)
{
  v24[0] = *a3;
  v24[1] = *a2;
  int v25 = *((_DWORD *)a2 + 2);
  if (qword_1024190C0 != -1) {
    dispatch_once(&qword_1024190C0, &stru_1022D8958);
  }
  id v6 = qword_1024190C8;
  if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *(float *)a2;
    double v8 = *((float *)a2 + 1);
    double v9 = *((float *)a2 + 2);
    uint64_t v10 = *a3;
    *(_DWORD *)std::string buf = 134218752;
    double v27 = v7;
    __int16 v28 = 2048;
    double v29 = v8;
    __int16 v30 = 2048;
    double v31 = v9;
    __int16 v32 = 2048;
    uint64_t v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Accelerometer] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190C0 != -1) {
      dispatch_once(&qword_1024190C0, &stru_1022D8958);
    }
    double v19 = *(float *)a2;
    double v20 = *((float *)a2 + 1);
    double v21 = *((float *)a2 + 2);
    uint64_t v22 = *a3;
    *(_DWORD *)double v36 = 134218752;
    *(double *)&v36[4] = v19;
    *(_WORD *)&unsigned char v36[12] = 2048;
    *(double *)&v36[14] = v20;
    __int16 v37 = 2048;
    double v38 = v21;
    *(_WORD *)long long v39 = 2048;
    *(void *)&v39[2] = v22;
    double v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccelerometer::onAccelerometerData(const CLMotionTypeAcceleration &, const CLMotionTypeTimestamp &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    *(void *)double v36 = off_1022E66B0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v12 = *a2;
    *(_DWORD *)&v39[8] = *((_DWORD *)a2 + 2);
    double v13 = *(double *)a3;
    *(CFAbsoluteTime *)&v36[8] = Current;
    double v38 = v13;
    *(void *)long long v39 = v12;
    uint64_t v14 = sub_101282D9C();
    sub_10128431C(v14, (uint64_t)v36);
    sub_10170140C(buf);
    sub_101726948((uint64_t)buf);
    v35 |= 1u;
    uint64_t v34 = *(void *)&v36[8];
    double v15 = v31;
    uint64_t v16 = *a3;
    char v17 = *(unsigned char *)(*(void *)&v31 + 32);
    *(unsigned char *)(*(void *)&v31 + 32) = v17 | 1;
    *(void *)(*(void *)&v15 + 8) = v16;
    LODWORD(v16) = *(_DWORD *)a2;
    *(unsigned char *)(*(void *)&v15 + 32) = v17 | 5;
    *(_DWORD *)(*(void *)&v15 + 20) = v16;
    LODWORD(v16) = *((_DWORD *)a2 + 1);
    *(unsigned char *)(*(void *)&v15 + 32) = v17 | 0xD;
    *(_DWORD *)(*(void *)&v15 + 24) = v16;
    LODWORD(v16) = *((_DWORD *)a2 + 2);
    *(unsigned char *)(*(void *)&v15 + 32) = v17 | 0x1D;
    *(_DWORD *)(*(void *)&v15 + 28) = v16;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022D8978);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  return sub_1000E7BA0(a1, 0, (uint64_t)v24, 24);
}

void sub_1009ED044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1009ED064(uint64_t a1)
{
  if (IOHIDEventGetType() == 13)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022D8958);
      }
      unsigned int v2 = qword_1024190C8;
      if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Received shake data, discarding.", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022D8958);
        }
        LOWORD(v8[0]) = 0;
        int v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLAccelerometer::onAccelerometerIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v3);
        if (v3 != (char *)&buf) {
          free(v3);
        }
      }
    }
    else
    {
      IOHIDEventGetFloatValue();
      *(float *)&double v4 = v4;
      LODWORD(buf) = LODWORD(v4);
      IOHIDEventGetFloatValue();
      *(float *)&double v5 = v5;
      HIDWORD(buf) = LODWORD(v5);
      IOHIDEventGetFloatValue();
      *(float *)&double v6 = v6;
      int v10 = LODWORD(v6);
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      v8[0] = sub_1000D3D90(TimeStamp);
      sub_1009ECCD8(a1, &buf, v8);
    }
  }
}

void sub_1009ED280(id a1)
{
  qword_1024190C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void sub_1009ED8E0(uint64_t a1, void *a2)
{
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D8A28);
  }
  double v4 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    v72[0] = @"idle_time_both_in_ear_trcy";
    CFStringRef v5 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v5) {
      CFStringRef v6 = v5;
    }
    else {
      CFStringRef v6 = @"<MISSING>";
    }
    v73[0] = v6;
    v72[1] = @"idle_time_trcy_l";
    CFStringRef v7 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v7) {
      CFStringRef v8 = v7;
    }
    else {
      CFStringRef v8 = @"<MISSING>";
    }
    v73[1] = v8;
    v72[2] = @"idle_time_trcy_r";
    CFStringRef v9 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v9) {
      CFStringRef v10 = v9;
    }
    else {
      CFStringRef v10 = @"<MISSING>";
    }
    v73[2] = v10;
    v72[3] = @"total_time_in_connect_session";
    CFStringRef v11 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v11) {
      CFStringRef v12 = v11;
    }
    else {
      CFStringRef v12 = @"<MISSING>";
    }
    v73[3] = v12;
    v72[4] = @"serial_number_left";
    CFStringRef v13 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v13) {
      CFStringRef v14 = v13;
    }
    else {
      CFStringRef v14 = @"<MISSING>";
    }
    v73[4] = v14;
    v72[5] = @"serial_number_right";
    CFStringRef v15 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v15) {
      CFStringRef v16 = v15;
    }
    else {
      CFStringRef v16 = @"<MISSING>";
    }
    v73[5] = v16;
    v72[6] = @"serial_number_system";
    CFStringRef v17 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v17) {
      CFStringRef v18 = v17;
    }
    else {
      CFStringRef v18 = @"<MISSING>";
    }
    v73[6] = v18;
    v72[7] = @"case_charging_cycle";
    CFStringRef v19 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v19) {
      CFStringRef v20 = v19;
    }
    else {
      CFStringRef v20 = @"<MISSING>";
    }
    v73[7] = v20;
    v72[8] = @"bud_daily_charging_soc_delta_r";
    CFStringRef v21 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v21) {
      CFStringRef v22 = v21;
    }
    else {
      CFStringRef v22 = @"<MISSING>";
    }
    v73[8] = v22;
    v72[9] = @"bud_daily_charging_soc_delta_l";
    CFStringRef v23 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v23) {
      CFStringRef v24 = v23;
    }
    else {
      CFStringRef v24 = @"<MISSING>";
    }
    v73[9] = v24;
    v72[10] = @"time_out_of_ear_both_incase";
    CFStringRef v25 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v25) {
      CFStringRef v26 = v25;
    }
    else {
      CFStringRef v26 = @"<MISSING>";
    }
    v73[10] = v26;
    v72[11] = @"bud_mileage_l";
    CFStringRef v27 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v27) {
      CFStringRef v28 = v27;
    }
    else {
      CFStringRef v28 = @"<MISSING>";
    }
    v73[11] = v28;
    v72[12] = @"bud_mileage_r";
    CFStringRef v29 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v29) {
      CFStringRef v30 = v29;
    }
    else {
      CFStringRef v30 = @"<MISSING>";
    }
    v73[12] = v30;
    v72[13] = @"timestamp_received_on_companion";
    CFStringRef v31 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v31) {
      CFStringRef v32 = v31;
    }
    else {
      CFStringRef v32 = @"<MISSING>";
    }
    v73[13] = v32;
    *(_DWORD *)uint64_t buf = 138477827;
    int v71 = +[NSDictionary dictionaryWithObjects:v73 forKeys:v72 count:14];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Received metrics. Sending to client, abridged: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    v68[0] = @"idle_time_both_in_ear_trcy";
    CFStringRef v34 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v34) {
      CFStringRef v35 = v34;
    }
    else {
      CFStringRef v35 = @"<MISSING>";
    }
    v69[0] = v35;
    v68[1] = @"idle_time_trcy_l";
    CFStringRef v36 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v36) {
      CFStringRef v37 = v36;
    }
    else {
      CFStringRef v37 = @"<MISSING>";
    }
    v69[1] = v37;
    v68[2] = @"idle_time_trcy_r";
    CFStringRef v38 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v38) {
      CFStringRef v39 = v38;
    }
    else {
      CFStringRef v39 = @"<MISSING>";
    }
    v69[2] = v39;
    v68[3] = @"total_time_in_connect_session";
    CFStringRef v40 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v40) {
      CFStringRef v41 = v40;
    }
    else {
      CFStringRef v41 = @"<MISSING>";
    }
    v69[3] = v41;
    v68[4] = @"serial_number_left";
    CFStringRef v42 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v42) {
      CFStringRef v43 = v42;
    }
    else {
      CFStringRef v43 = @"<MISSING>";
    }
    v69[4] = v43;
    v68[5] = @"serial_number_right";
    CFStringRef v44 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v44) {
      CFStringRef v45 = v44;
    }
    else {
      CFStringRef v45 = @"<MISSING>";
    }
    v69[5] = v45;
    v68[6] = @"serial_number_system";
    CFStringRef v46 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v46) {
      CFStringRef v47 = v46;
    }
    else {
      CFStringRef v47 = @"<MISSING>";
    }
    v69[6] = v47;
    v68[7] = @"case_charging_cycle";
    CFStringRef v48 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v48) {
      CFStringRef v49 = v48;
    }
    else {
      CFStringRef v49 = @"<MISSING>";
    }
    v69[7] = v49;
    v68[8] = @"bud_daily_charging_soc_delta_r";
    CFStringRef v50 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v50) {
      CFStringRef v51 = v50;
    }
    else {
      CFStringRef v51 = @"<MISSING>";
    }
    v69[8] = v51;
    v68[9] = @"bud_daily_charging_soc_delta_l";
    CFStringRef v52 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v52) {
      CFStringRef v53 = v52;
    }
    else {
      CFStringRef v53 = @"<MISSING>";
    }
    v69[9] = v53;
    v68[10] = @"time_out_of_ear_both_incase";
    CFStringRef v54 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v54) {
      CFStringRef v55 = v54;
    }
    else {
      CFStringRef v55 = @"<MISSING>";
    }
    v69[10] = v55;
    v68[11] = @"bud_mileage_l";
    CFStringRef v56 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v56) {
      CFStringRef v57 = v56;
    }
    else {
      CFStringRef v57 = @"<MISSING>";
    }
    v69[11] = v57;
    v68[12] = @"bud_mileage_r";
    CFStringRef v58 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v58) {
      CFStringRef v59 = v58;
    }
    else {
      CFStringRef v59 = @"<MISSING>";
    }
    v69[12] = v59;
    v68[13] = @"timestamp_received_on_companion";
    CFStringRef v60 = (const __CFString *)[a2 objectForKeyedSubscript:];
    if (v60) {
      CFStringRef v61 = v60;
    }
    else {
      CFStringRef v61 = @"<MISSING>";
    }
    v69[13] = v61;
    int v66 = 138477827;
    *(void *)__int16 v67 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:14];
    __int16 v62 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryStatsSubscription::onUsageMetricsEvent(NSDictionary *)", "%s\n", v62);
    if (v62 != (char *)buf) {
      free(v62);
    }
  }
  sub_1009EF69C("kCLConnectionMessageAudioAccessoryUsageMetricsUpdate", &v66);
  if (*(void *)(a1 + 8))
  {
    __int16 v64 = *(std::__shared_weak_count **)&v67[4];
    if (*(void *)&v67[4]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v67[4] + 8), 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v64) {
      sub_1000DB0A0(v64);
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    uint64_t v33 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "[HeadphoneUsage] #warning, connection invalid, unable to send usage message", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D8A28);
      }
      double v63 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryStatsSubscription::onUsageMetricsEvent(NSDictionary *)", "%s\n", v63);
      if (v63 != (char *)buf) {
        free(v63);
      }
    }
  }
  if (*(void *)&v67[4]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v67[4]);
  }
}

void sub_1009EE038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1009EE2DC(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = a2;
  a1[2] = a3;
  *a1 = &off_1022D89A8;
  a1[3] = 0;
  a1[4] = 0;
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D8A28);
  }
  double v4 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, void *))(*a1 + 24))(__p, a1);
    CFStringRef v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - CLAudioAccessoryStatsSubscription %s", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 24))(buf, a1);
    if (v11 >= 0) {
      CFStringRef v8 = buf;
    }
    else {
      CFStringRef v8 = *(unsigned char **)buf;
    }
    int v12 = 136315138;
    CFStringRef v13 = v8;
    CFStringRef v9 = (char *)_os_log_send_and_compose_impl();
    if (v11 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)", "%s\n", v9);
    if (v9 != (char *)__p) {
      free(v9);
    }
  }
  a1[3] = [[CLAudioAccessoryStatsSubscriptionClient alloc] initWithSubscription:a1];
  id v6 = [[[a1[2] vendor] proxyForService:@"CLAudioAccessoryService"];
  a1[4] = v6;
  [v6 registerDelegate:a1[3] inSilo:[a1[2] silo]];
  CLConnection::setDefaultMessageHandler();
  CLConnection::setInterruptionHandler();
  CLConnection::setDisconnectionHandler();
  return a1;
}

void sub_1009EE618(_Unwind_Exception *a1)
{
  sub_100426880(v1);
  _Unwind_Resume(a1);
}

void sub_1009EE638(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D8A28);
  }
  double v4 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - defaultMessageHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    __int16 v9 = 0;
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  CFStringRef v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  CFStringRef v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v7);
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_1009EE820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1009EE840(id a1)
{
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D8A28);
  }
  uint64_t v1 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - interruptionHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_1009EE9C8(id a1)
{
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D8A28);
  }
  uint64_t v1 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription - disconnectionHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    unsigned int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAudioAccessoryStatsSubscription::CLAudioAccessoryStatsSubscription(CLConnection *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void *sub_1009EEB54(uint64_t a1)
{
  *(void *)a1 = &off_1022D89A8;
  unsigned int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (*(void *)(a1 + 24))
    {
      [v2 unregisterForUsageMetricsUpdates:];
      unsigned int v2 = *(void **)(a1 + 32);
    }

    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 24) = 0;
  }

  return sub_100426880((void *)a1);
}

void sub_1009EEBE4(uint64_t a1)
{
  sub_1009EEB54(a1);

  operator delete();
}

void sub_1009EEC1C(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022D8A28);
  }
  double v4 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Client message received,name:%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    uint64_t v17 = CLConnectionMessage::name(*a2);
    if (*(char *)(v17 + 23) >= 0) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = *(void *)v17;
    }
    LODWORD(v36[0]) = 136315138;
    *(void *)((char *)v36 + 4) = v18;
    CFStringRef v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
  sub_100134750(buf, "com.apple.bluetooth.system");
  char isEntitled = CLConnection::isEntitled();
  char v8 = isEntitled;
  if (v38 < 0)
  {
    operator delete(*(void **)buf);
    if (v8) {
      goto LABEL_11;
    }
LABEL_16:
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    CFStringRef v35 = @"Client missing necessary entitlement.";
    v36[0] = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 110, +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1]);
    sub_1009EF5D4("kCLConnectionMessageAudioAccessoryUsageMetricsError", &v28);
    CLConnection::sendMessage();
    if (v29) {
      sub_1000DB0A0(v29);
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    char v11 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription: Client not entitled.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D8A28);
      }
      __int16 v27 = 0;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
    return;
  }
  if ((isEntitled & 1) == 0) {
    goto LABEL_16;
  }
LABEL_11:
  if (!*a2) {
    goto LABEL_30;
  }
  __int16 v9 = (void *)CLConnectionMessage::name(*a2);
  int v10 = *((char *)v9 + 23);
  if (v10 < 0)
  {
    if (v9[1] != 58) {
      goto LABEL_30;
    }
    __int16 v9 = (void *)*v9;
  }
  else if (v10 != 58)
  {
LABEL_30:
    NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
    CFStringRef v31 = @"Received invalid message from client";
    *(void *)uint64_t buf = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 107, +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1]);
    sub_1009EF5D4("kCLConnectionMessageAudioAccessoryUsageMetricsError", &v23);
    CLConnection::sendMessage();
    if (v24) {
      sub_1000DB0A0(v24);
    }
    return;
  }
  if (memcmp(v9, "kCLConnectionMessageAudioAccessoryUsageMetricsSubscription", 0x3AuLL)) {
    goto LABEL_30;
  }
  id v13 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageSubscribeKey"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if ([v13 isEqualToNumber:&__kCFBooleanTrue])
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D8A28);
      }
      CFStringRef v14 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription: Received request for audio accessory usage metrics.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022D8A28);
        }
        LOWORD(v36[0]) = 0;
        CFStringRef v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      [*(id *)(a1 + 32) registerForUsageMetricsUpdates:*(void *)(a1 + 24)];
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D8A28);
      }
      CFStringRef v16 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Subscription: Received unregistration request for audio accessory usage metrics.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022D8A28);
        }
        LOWORD(v36[0]) = 0;
        CFStringRef v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
      [*(id *)(a1 + 32) unregisterForUsageMetricsUpdates:*(void *)(a1 + 24)];
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022D8A28);
    }
    char v15 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Subscription: Received malformed subscription key %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022D8A28);
      }
      LODWORD(v36[0]) = 138412290;
      *(void *)((char *)v36 + 4) = v13;
      CFStringRef v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAudioAccessoryStatsSubscription::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    CFStringRef v33 = @"Received invalid subscription message from client";
    *(void *)uint64_t buf = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CMErrorDomain, 107, +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1]);
    sub_1009EF638("kCLConnectionMessageAudioAccessoryUsageMetricsError", &v25);
    CLConnection::sendMessage();
    if (v26) {
      sub_1000DB0A0(v26);
    }
    [*(id *)(a1 + 32) unregisterForUsageMetricsUpdates:*(void *)(a1 + 24)];
  }
}

void sub_1009EF54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009EF5A4(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void *sub_1009EF5D4@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1009EF624(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1009EF638@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1009EF688(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1009EF69C@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1009EF6EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1009EF700(uint64_t a1)
{
}

void sub_1009EFA94(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009EFAD8(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_1009EFBC0(a1, "CLVO2MaxInputCache", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_1022D8A58;
  *(void *)(a1 + 72) = off_1022D8B10;
  *(unsigned char *)(a1 + 416) = 0;
  sub_1009F1698(a1);
  return a1;
}

void sub_1009EFB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1009F0078(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1009EFBC0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *int v12 = off_1022ADB08;
  *(void *)a1 = off_1022D8F40;
  *(void *)(a1 + 72) = off_1022D8FE8;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022D8F40;
  *(void *)(a1 + 72) = off_1022D8FE8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 256) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 272) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 336) = 12000;
  *(void *)(a1 + 344) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 352));
  *(void *)(a1 + 352) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 256) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1009EFFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *__int16 v27 = v30;
  sub_1003BE1F8(v31);
  sub_1004B3E28(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1009F0070()
{
}

void *sub_1009F0078(void *a1)
{
  *a1 = off_1022D8F40;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022D8FE8;
  a1[43] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 44);
  sub_1004B3E28(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1009F013C(uint64_t a1)
{
  return sub_1009F0078((void *)(a1 - 72));
}

void sub_1009F0144(void *a1)
{
  sub_1009F0078(a1);

  operator delete();
}

void sub_1009F017C(uint64_t a1)
{
  sub_1009F0078((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1009F01B8(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  a3[1] = *a3;
  if (sub_100082064(a1 + 72))
  {
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxInputHistory WHERE uuid = ?");
  }
  return 109;
}

void sub_1009F042C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1009F0470(uint64_t a1, uint64_t *a2, char **a3)
{
  a3[1] = *a3;
  sub_10002B640(*(void *)(a1 + 80));
  *(void *)&long long v37 = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)&long long v38 = 0xFFEFFFFFFFFFFFFFLL;
  for (int i = sub_1009F14D8(a2, (uint64_t)&v35); !i; int i = sub_1009F14D8(a2, (uint64_t)&v35))
  {
    uint64_t v7 = a3[1];
    unint64_t v8 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a3) >> 4);
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) > 0x249249249249249) {
        sub_1001D7FD4();
      }
      unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (void)*a3) >> 4);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x124924924924924) {
        unint64_t v18 = 0x249249249249249;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18) {
        CFStringRef v19 = (char *)sub_100227C5C((uint64_t)(a3 + 2), v18);
      }
      else {
        CFStringRef v19 = 0;
      }
      CFStringRef v20 = &v19[112 * v15];
      long long v21 = v35;
      long long v22 = v37;
      *((_OWORD *)v20 + 1) = v36;
      *((_OWORD *)v20 + 2) = v22;
      *(_OWORD *)CFStringRef v20 = v21;
      long long v23 = v38;
      long long v24 = v39;
      long long v25 = v41;
      *((_OWORD *)v20 + 5) = v40;
      *((_OWORD *)v20 + 6) = v25;
      *((_OWORD *)v20 + 3) = v23;
      *((_OWORD *)v20 + 4) = v24;
      __int16 v27 = *a3;
      CFStringRef v26 = a3[1];
      uint64_t v28 = v20;
      if (v26 != *a3)
      {
        do
        {
          long long v29 = *((_OWORD *)v26 - 7);
          long long v30 = *((_OWORD *)v26 - 5);
          *((_OWORD *)v28 - 6) = *((_OWORD *)v26 - 6);
          *((_OWORD *)v28 - 5) = v30;
          *((_OWORD *)v28 - 7) = v29;
          long long v31 = *((_OWORD *)v26 - 4);
          long long v32 = *((_OWORD *)v26 - 3);
          long long v33 = *((_OWORD *)v26 - 2);
          *(_OWORD *)(v28 - 23) = *(_OWORD *)(v26 - 23);
          *((_OWORD *)v28 - 3) = v32;
          *((_OWORD *)v28 - 2) = v33;
          *((_OWORD *)v28 - 4) = v31;
          v28 -= 112;
          v26 -= 112;
        }
        while (v26 != v27);
        CFStringRef v26 = *a3;
      }
      CFStringRef v14 = v20 + 112;
      *a3 = v28;
      a3[1] = v20 + 112;
      a3[2] = &v19[112 * v18];
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      long long v9 = v35;
      long long v10 = v37;
      *((_OWORD *)v7 + 1) = v36;
      *((_OWORD *)v7 + 2) = v10;
      *(_OWORD *)uint64_t v7 = v9;
      long long v11 = v38;
      long long v12 = v39;
      long long v13 = v41;
      *((_OWORD *)v7 + 5) = v40;
      *((_OWORD *)v7 + 6) = v13;
      *((_OWORD *)v7 + 3) = v11;
      *((_OWORD *)v7 + 4) = v12;
      CFStringRef v14 = v7 + 112;
    }
    a3[1] = v14;
  }
  sub_100028FB4(*(void *)(a1 + 80));
  return i != 2;
}

uint64_t sub_1009F06B8(uint64_t a1, void *a2)
{
  CFAbsoluteTimeGetCurrent();

  return sub_1009F06F8(a1, a2);
}

uint64_t sub_1009F06F8(uint64_t a1, void *a2)
{
  if (*a2 != a2[1] && sub_100082064(a1 + 72))
  {
    if (!*(unsigned char *)(a1 + 416)) {
      (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE from VO2MaxInputHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1009F0C54(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F0CB4(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 - 72;
  CFAbsoluteTimeGetCurrent();

  return sub_1009F06F8(v3, a2);
}

void sub_1009F0CF4(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022D8BC0);
  }
  uint64_t v3 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    int buf = 134349056;
    CFAbsoluteTime buf_4 = CFAbsoluteTimeGetCurrent() - Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Completed fetch of input record count; duration: %{public}f",
      (uint8_t *)&buf,
      0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022D8BC0);
    }
    CFAbsoluteTimeGetCurrent();
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxInputCache::trimTableIfExceedingMaxRecordCount()", "%s\n", v4);
    if (v4 != (char *)&buf) {
      free(v4);
    }
  }
  if (*(int *)(a1 + 132) >= 513282)
  {
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxInputHistory WHERE uuid IN (SELECT uuid FROM VO2MaxInputHistory ORDER BY startTime ASC LIMIT ?)");
  }
}

void sub_1009F137C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F13D8(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(id) FROM VO2MaxInputHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_1009F1494(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F14D0(uint64_t a1)
{
  return sub_1009F13D8(a1 - 72);
}

uint64_t sub_1009F14D8(uint64_t *a1, uint64_t a2)
{
  double v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int64(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  unint64_t v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 8));
  long long v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v9, 2);
  long long v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v11 = sqlite3_column_double(v10, 3);
  *(float *)(a2 + 24) = v11;
  long long v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 76) = sqlite3_column_int(v12, 4);
  long long v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v14 = sqlite3_column_double(v13, 5);
  *(float *)(a2 + 40) = v14;
  uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v16 = sqlite3_column_double(v15, 6);
  *(float *)(a2 + 44) = v16;
  unint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v17, 7);
  unint64_t v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v18, 8);
  CFStringRef v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 72) = sqlite3_column_int(v19, 9) != 0;
  CFStringRef v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 73) = sqlite3_column_int(v20, 10) != 0;
  long long v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 80) = sqlite3_column_int(v21, 11);
  long long v22 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v22, 12);
  long long v23 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v23, 13);
  long long v24 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 104) = sqlite3_column_int(v24, 14) != 0;
  long long v25 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v26 = sqlite3_column_double(v25, 15);
  uint64_t result = 0;
  *(double *)(a2 + 48) = v26;
  return result;
}

uint64_t sub_1009F1698(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1009F1724(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "VO2MaxInputHistory", (const char **)&off_1022D8BE0, (const std::string::value_type **)&off_10241F910, 0);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    *(_DWORD *)(a1 + 132) = result;
    *(unsigned char *)(a1 + 416) = 1;
  }
  return result;
}

uint64_t sub_1009F1724(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxInputHistory");
  if (result)
  {
    uint64_t v3 = "workoutType";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxInputHistory", (uint64_t)"workoutType", (uint64_t)&v3);
  }
  return result;
}

void sub_1009F1C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F1D04(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxInputHistory");
  }
  return result;
}

void sub_1009F1DB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F1DD0(uint64_t a1)
{
  return sub_1009F1D04(a1 - 72);
}

uint64_t sub_1009F1DE0()
{
  return 0;
}

uint64_t sub_1009F1DE8()
{
  return 2;
}

uint64_t sub_1009F1DF0(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D9028);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9028);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      CFStringRef v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    long long v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      float v11 = v21;
    }
    else {
      float v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    long long v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    float v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      float v14 = __p[0];
    }
    if (v15 >= 0) {
      float v16 = __p;
    }
    else {
      float v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1009F301C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_1009F337C(uint64_t a1)
{
  sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name = 'VO2MaxInputHistoryUuidIndex'");
}

void sub_1009F3824(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F38A8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxInputHistory");
  }
  return result;
}

void sub_1009F3940(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F3958(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxInputHistory ORDER BY rowid DESC LIMIT 1");
  }
  return 109;
}

void sub_1009F3A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_101A7735C((uint64_t)&__p, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F3A8C(uint64_t *a1, void *a2, uint64_t a3)
{
  if (sub_100082064(a1 + 9))
  {
    if (*a2) {
      sub_10014D518(a1[10], (uint64_t)"SELECT * FROM VO2MaxInputHistory WHERE id >= ? ORDER BY id ASC");
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D8BA0);
    }
    size_t v8 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Non-existent query record, returning all records.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D8BA0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLVO2MaxInputCache::queryVO2MaxInputSince(const VO2MaxInput, std::vector<VO2MaxInput> &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, a3);
    return 100;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D8BA0);
    }
    long long v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "History not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D8BA0);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxInputCache::queryVO2MaxInputSince(const VO2MaxInput, std::vector<VO2MaxInput> &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return 109;
  }
}

void sub_1009F40C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F410C(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  if (sub_100082064(a1 + 72))
  {
    a3[1] = *a3;
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxInputHistory WHERE uuid = ?");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D8BA0);
  }
  long long v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxInputHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D8BA0);
    }
    *(_WORD *)uuid_string_t out = 0;
    size_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxInputCache::queryBySessionId(unsigned char *, std::vector<VO2MaxInput> &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return 109;
}

void sub_1009F44D0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1009F4514(uint64_t a1, const unsigned __int8 *a2)
{
  if (sub_100082064(a1 + 72))
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) from VO2MaxInputHistory WHERE uuid = ?");
  }
  return 0xFFFFFFFFLL;
}

void sub_1009F4638(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F467C(uint64_t a1, const unsigned __int8 *a2)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_10002B640(*(void *)(a1 + 80));
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxInputHistory WHERE uuid = ?");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022D8BC0);
  }
  int v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Unable to save fetched input data from CloudKit. Device is locked and we are unable to open the database", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022D8BC0);
    }
    *(_WORD *)uuid_string_t out = 0;
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVO2MaxInputCache::saveFetchedSession(unsigned char *, NSData *, const std::vector<VO2MaxInput> &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 0;
}

void sub_1009F50B8(_Unwind_Exception *exception_object)
{
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  if (!v2)
  {
LABEL_4:
    if (!v1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (!v1) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  goto LABEL_6;
}

void *sub_1009F51C8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxInputHistory");
}

void *sub_1009F51D8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxInputHistory");
}

uint64_t sub_1009F51E8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A773A0(v2);
    __break(1u);
  }
  long long v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = v13;
    }
    else {
      uint64_t v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    long long v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = v13;
    }
    else {
      size_t v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1009F56B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 - 201) < 0) {
    operator delete(*(void **)(v4 - 224));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F573C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1009F77A8(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D9028);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)long long v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D9028);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)int buf = 134349056;
      *(void *)long long v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9028);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1009F5EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1009F5EF0(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  __n128 result = (__n128)a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_OWORD *)(a2 + 89) = *(long long *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

id *sub_1009F5F1C(uint64_t a1, long long *a2, char a3)
{
  v32[0] = (id)os_transaction_create();
  v32[1] = 0;
  if (*(double *)(a1 + 256) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v32);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  double v42 = -1.79769313e308;
  unint64_t v43 = 0xFFEFFFFFFFFFFFFFLL;
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v41);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9028);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9028);
        }
        LOWORD(v33) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 4);
    double v8 = v42;
    double v9 = v7 - v42;
    if (v7 - v42 < 0.0) {
      double v9 = -(v7 - v42);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9028);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 4);
        *(_DWORD *)int buf = 134349312;
        double v38 = v42;
        __int16 v39 = 2050;
        uint64_t v40 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9028);
        }
        uint64_t v26 = *((void *)a2 + 4);
        int v33 = 134349312;
        double v34 = v42;
        __int16 v35 = 2050;
        uint64_t v36 = v26;
        __int16 v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 4);
      double v8 = v42;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9028);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 4);
          *(_DWORD *)int buf = 134217984;
          double v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022D9028);
          }
          double v28 = *((double *)a2 + 4);
          int v33 = 134217984;
          double v34 = v28;
          long long v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022D9028);
        double v17 = v31;
      }
      double v18 = v16 - v17;
      CFStringRef v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134217984;
        double v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9028);
        }
        int v33 = 134217984;
        double v34 = v18;
        long long v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v41, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 224) = v20;
  long long v22 = a2[3];
  long long v23 = a2[4];
  long long v24 = a2[5];
  *(_OWORD *)(a1 + 313) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 272) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v32);
}

void sub_1009F6748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F6774(uint64_t a1)
{
  return sub_1009F573C(a1 - 72);
}

void sub_1009F677C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1009F67AC(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1009F67DC(id a1)
{
  qword_102419378 = (uint64_t)os_log_create("com.apple.locationd.Position", "Spring");
}

uint64_t sub_1009F680C(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A77510(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = v15;
    }
    else {
      double v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1009F6C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F6D24(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A77680(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1009F7098(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A777F0(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1009F73C4(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A77960(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1009F76E8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1009F7718(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_1009F77A8(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1009F7828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009F7844(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1009F7874(uint64_t a1, int a2)
{
  uint64_t v3 = sub_100538CA8(a1, a2);
  *(void *)uint64_t v3 = off_1022D9078;
  *(void *)(v3 + 200) = off_1022D90E0;
  sub_100E16F9C(v3 + 200, *(unsigned __int8 *)(v3 + 8), 0);
  *(void *)a1 = off_1022D9078;
  *(void *)(a1 + 200) = off_1022D90E0;
  *(unsigned char *)(a1 + 274) = 0;
  *(void *)(a1 + 280) = 0;
  double v4 = sub_100B5C30C(a1 + 288);
  sub_100EFC3E0(a1 + 1112, a1 + 288, v4);
  return a1;
}

void sub_1009F7920(_Unwind_Exception *a1)
{
  double v4 = v3;
  *double v4 = off_1022E7AD8;
  sub_100E16FDC(v2);
  sub_1005395A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F7970(void *a1)
{
  *a1 = off_1022D9078;
  uint64_t v2 = a1 + 25;
  a1[25] = off_1022D90E0;
  sub_100E17364((uint64_t)(a1 + 25));
  sub_100E17034(v2);
  sub_100E1709C(v2);
  a1[36] = off_1022E7AD8;
  sub_100E16FDC(v2);

  return sub_1005395A0((uint64_t)a1);
}

uint64_t sub_1009F7A28(uint64_t a1)
{
  return sub_1009F7970((void *)(a1 - 200));
}

void sub_1009F7A30(void *a1)
{
  sub_1009F7970(a1);

  operator delete();
}

void sub_1009F7A68(uint64_t a1)
{
  sub_1009F7970((void *)(a1 - 200));

  operator delete();
}

uint64_t sub_1009F7AA4(uint64_t a1)
{
  sub_100EFC3E4(a1 + 1112);
  sub_100B5C310(a1 + 288);
  sub_100E17398(a1 + 200);
  sub_100E171B4(a1 + 200);
  sub_100E172D8(a1 + 200);
  uint64_t v3 = 2;
  uint64_t result = sub_10053A1D0(a1, &v3);
  *(unsigned char *)(a1 + 274) = 0;
  *(void *)(a1 + 280) = 0;
  return result;
}

void *sub_1009F7B1C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_100E17364(a1 + 200);
  sub_100E17034(v1);

  return sub_100E1709C(v1);
}

void sub_1009F7B60(uint64_t a1, int a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022D9148);
  }
  double v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109120;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Application state changed, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022D9148);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::applicationStateChanged(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(a1 + 274) = a2 ^ 1;
}

void sub_1009F7D18(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (unint64_t)(*(double *)a2 * 1000000.0);
  float v5 = *(float *)(a2 + 16) * 0.017453;
  float32x2_t v26 = vmul_f32(*(float32x2_t *)(a2 + 8), (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  float v27 = v5;
  uint64_t v6 = a1 + 1112;
  sub_100EFD190(a1 + 1112, &v26, v4);
  sub_100B5C97C(a1 + 288, &v26, v4);
  *(_OWORD *)long long v21 = 0uLL;
  double v20 = -1.0;
  sub_100B9BEAC((float32x4_t *)v21, v7);
  memset(&v21[4], 0, 36);
  *(_OWORD *)&v21[13] = xmmword_101D1F280;
  uint64_t v22 = 0x1FF00000000;
  int v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  double v20 = *(double *)a2;
  if (v21 != (_DWORD *)(a1 + 1124)) {
    *(_OWORD *)long long v21 = *(_OWORD *)(a1 + 1124);
  }
  sub_100EFCE18(v6);
  v21[4] = v8;
  unsigned char v21[5] = v9;
  v21[6] = v10;
  uint64_t v11 = *(void *)(a1 + 1168);
  *(void *)&v21[7] = *(void *)(v11 + 432);
  v21[9] = *(_DWORD *)(v11 + 440);
  WORD2(v22) = 511;
  *(_OWORD *)&v21[10] = xmmword_101D1F290;
  v21[14] = -1082130432;
  if (*(unsigned char *)(v11 + 416) && *(void *)(v11 + 408) && *(unsigned char *)(a1 + 1122)) {
    __int16 v12 = HIWORD(v22) & 0xFFEF | (16 * *(unsigned __int8 *)(a1 + 252)) | 0x100;
  }
  else {
    __int16 v12 = HIWORD(v22) & 0xFEEF | (16 * *(unsigned __int8 *)(a1 + 252)) & 0xFEFF;
  }
  HIWORD(v22) = v12;
  int v23 = 3;
  uint64_t v25 = 0;
  char v24 = *(unsigned char *)(a2 + 22);
  double v13 = *(double *)a2;
  double v14 = *(double *)(a1 + 280);
  if (v14 != 0.0)
  {
    double v15 = v13 - v14;
    if (v13 - v14 > 0.100000001)
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022D9148);
      }
      uint64_t v16 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134217984;
        double v31 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Large time gap, %lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022D9148);
        }
        int v28 = 134217984;
        double v29 = v15;
        double v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::feedGyroData(const CLGyro::Sample *)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if (*(unsigned char *)(a1 + 274))
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022D9148);
        }
        uint64_t v17 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Reset while backgrounded", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022D9148);
          }
          LOWORD(v28) = 0;
          CFStringRef v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::feedGyroData(const CLGyro::Sample *)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        sub_100EFC3E4(v6);
      }
    }
  }
  *(double *)(a1 + 280) = v13;
  sub_10053987C(a1, (uint64_t)&v20);
}

void sub_1009F8194(uint64_t a1, uint64_t a2)
{
}

float sub_1009F819C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a2;
  int v9 = v3;
  int v4 = *((_DWORD *)a3 + 2);
  uint64_t v6 = *a3;
  int v7 = v4;
  return sub_100B5CC6C(a1 + 288, &v8, (uint64_t)&v6);
}

float sub_1009F81E8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v8 = *a2;
  int v9 = v3;
  int v4 = *((_DWORD *)a3 + 2);
  uint64_t v6 = *a3;
  int v7 = v4;
  return sub_100B5CC6C(a1 + 88, &v8, (uint64_t)&v6);
}

uint64_t sub_1009F8234(float32x2_t *a1, uint64_t a2)
{
  uint64_t v3 = (unint64_t)(*(double *)a2 * 1000000.0);
  int v4 = *(_DWORD *)(a2 + 16);
  float32x2_t v6 = *(float32x2_t *)(a2 + 8);
  int v7 = v4;
  sub_100B5C608((uint64_t)&a1[36], &v6, v3);
  return sub_100EFD6D4(a1 + 139, (uint64_t)&v6, v3);
}

uint64_t sub_1009F829C(uint64_t a1, uint64_t a2)
{
  return sub_1009F8234((float32x2_t *)(a1 - 200), a2);
}

void sub_1009F82A4(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void *sub_1009F82D4(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_1009F83B4((uint64_t)a1, "VO2MaxAlertHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022D9178;
  a1[9] = off_1022D9230;
  sub_1009F8E90((uint64_t)a1);
  return a1;
}

void sub_1009F8388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1009F8864(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F83B4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *__int16 v12 = off_1022ADB08;
  *(void *)a1 = off_1022D9360;
  *(void *)(a1 + 72) = off_1022D9408;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022D9360;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_1022D9408;
  *(_DWORD *)(a1 + 240) = 12000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 248) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 256));
  *(void *)(a1 + 256) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1009F87C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_1000D80C4(v28);
  sub_1011F8AE0(v27);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1009F885C()
{
}

void *sub_1009F8864(void *a1)
{
  *a1 = off_1022D9360;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022D9408;
  a1[31] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 32);
  sub_1000D80C4(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1009F8928(uint64_t a1)
{
  return sub_1009F8864((void *)(a1 - 72));
}

void sub_1009F8930(void *a1)
{
  sub_1009F8864(a1);

  operator delete();
}

void sub_1009F8968(uint64_t a1)
{
  sub_1009F8864((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1009F89A4(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxAlertHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1009F8AF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F8B08(uint64_t a1, uint64_t a2)
{
  return sub_1009F89A4(a1 - 72, a2);
}

uint64_t sub_1009F8B10(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxAlertHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1009F8CA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F8CE8(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  int v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v8 = sqlite3_column_double(v7, 1);
  uint64_t result = 0;
  *(double *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_1009F8D68(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM VO2MaxAlertHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_1009F8E24(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F8E60(uint64_t a1)
{
  return sub_1009F8D68(a1 - 72);
}

uint64_t sub_1009F8E68(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1009F8E90(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1009F8F00(a1);
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "VO2MaxAlertHistory", (const char **)&off_1022D92C0, (const std::string::value_type **)&off_10241F920, 0);
  }
  return result;
}

uint64_t sub_1009F8F00(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxAlertHistory");
  if (result)
  {
    uint64_t v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxAlertHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_1009F93A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  sub_101A129A8((uint64_t)&a57);
  _Unwind_Resume(a1);
}

uint64_t sub_1009F944C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxAlertHistory");
  }
  return result;
}

void sub_1009F94FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F9514(uint64_t a1)
{
  return sub_1009F944C(a1 - 72);
}

uint64_t sub_1009F951C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM VO2MaxAlertHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1009F9618(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F9630(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE VO2MaxAlertHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_1009F96E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F96FC(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxAlertHistory (startTime) VALUES (?)");
  }
  return result;
}

void sub_1009F97B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F97C8()
{
  return 0;
}

uint64_t sub_1009F97D0(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxAlertHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_1009F986C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1009F9884(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D9448);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9448);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      double v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    int v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    double v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      double v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1009FAAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1009FAE10(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if (SHIBYTE(v16[0]) < 0)
  {
    int v10 = v15[1];
    operator delete(v15[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v15);
        int v4 = sub_100132EFC(v16, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          __int16 v5 = __p;
        }
        else {
          __int16 v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        char v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          int v9 = __p;
        }
        else {
          int v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v16[0]))
  {
    goto LABEL_3;
  }
  sub_101A77AD0(v3);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v15
  v16[0] = v11;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1009FB214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1009FB294(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1009FD118(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D9448);
  }
  __int16 v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D9448);
    }
    char v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)int buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9448);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1009FB9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1009FBA14(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

id *sub_1009FBA20(uint64_t a1, uint64_t a2, char a3)
{
  v29[0] = (id)os_transaction_create();
  v29[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v29);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v27);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9448);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9448);
        }
        LOWORD(v30) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v28;
    double v9 = v7 - v28;
    if (v7 - v28 < 0.0) {
      double v9 = -(v7 - v28);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9448);
      }
      int v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)int buf = 134349312;
        double v35 = v28;
        __int16 v36 = 2050;
        uint64_t v37 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9448);
        }
        uint64_t v21 = *(void *)(a2 + 8);
        int v30 = 134349312;
        double v31 = v28;
        __int16 v32 = 2050;
        uint64_t v33 = v21;
        int64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v28;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9448);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)int buf = 134217984;
          double v35 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022D9448);
          }
          double v23 = *(double *)(a2 + 8);
          int v30 = 134217984;
          double v31 = v23;
          char v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v26 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022D9448);
        double v17 = v26;
      }
      double v18 = v16 - v17;
      CFStringRef v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134217984;
        double v35 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9448);
        }
        int v30 = 134217984;
        double v31 = v18;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxAlert, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxAlert, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v27, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v29);
}

void sub_1009FC220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1009FC24C(uint64_t a1)
{
  return sub_1009FB294(a1 - 72);
}

uint64_t sub_1009FC254(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A77C40(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1009FC614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1009FC694(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A77DB0(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1009FCA08(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A77F20(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      __int16 v5 = __p;
    }
    else {
      __int16 v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1009FCD34(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A78090(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1009FD058(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1009FD088(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_1009FD118(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1009FD198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009FD1B4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

double sub_1009FD1E4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 260) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  double result = 1.0;
  *(_OWORD *)(a1 + 40) = xmmword_101D1C450;
  return result;
}

void *sub_1009FD24C(void *a1, uint64_t a2, uint64_t a3)
{
  double result = sub_1009FD278(a1, a2);
  a1[4] = a3;
  return result;
}

void *sub_1009FD278(void *a1, uint64_t a2)
{
  sub_1009FDB64((uint64_t)v4, a2);
  sub_1009FDBFC(v4, a1);
  sub_1006D1854(v4);
  return a1;
}

void sub_1009FD2EC(uint64_t a1, float *a2, float *a3, float *a4, double a5)
{
  sub_100B9CF08(a2);
  float v13 = sub_100B9BDB8(a2, v10, v11, v12);
  float v15 = v14;
  int v17 = v16;
  double v18 = atan2((float)((float)(v13 * *(float *)(a1 + 100)) - (float)(*(float *)(a1 + 96) * v15)), (float)((float)(*(float *)(a1 + 100) * v15) + (float)(v13 * *(float *)(a1 + 96))));
  sub_1009FD464(a1, a3, a5, v18);
  if (*(unsigned char *)(a1 + 296))
  {
    float v19 = a5 - *(double *)(a1 + 88);
    float v20 = v19 * 9.8067;
    sub_100B9BDB0((float *)(a1 + 264), (float *)v24);
    for (uint64_t i = 0; i != 36; i += 4)
      *(float *)((char *)v24 + i) = v20 * *(float *)((char *)v24 + i);
    v26[0] = v24[0];
    v26[1] = v24[1];
    int v27 = v25;
    float v22 = sub_1004E301C((uint64_t)v26, a4);
  }
  else
  {
    unsigned int v23 = 0;
    float v22 = 0.0;
  }
  if (*(unsigned char *)(a1 + 240) && fabs(*(double *)(a1 + 200)) <= 0.005)
  {
    if (!*(unsigned char *)(a1 + 260)) {
      sub_10020D700();
    }
    *(float *)(a1 + 248) = v22 + *(float *)(a1 + 248);
    *(float32x2_t *)(a1 + 252) = vadd_f32((float32x2_t)v23, *(float32x2_t *)(a1 + 252));
  }
  *(float *)(a1 + 96) = v13;
  *(float *)(a1 + 100) = v15;
  *(_DWORD *)(a1 + 104) = v17;
  *(double *)(a1 + 88) = a5;
}

double sub_1009FD464(uint64_t a1, float *a2, double result, double a4)
{
  double v4 = *(double *)(a1 + 88);
  if (v4 >= 0.0)
  {
    double v5 = *(double *)(a1 + 136);
    *(double *)(a1 + 128) = *(double *)(a1 + 128) + a4;
    *(double *)(a1 + 136) = v5 + a4 * a4;
    double v6 = result - v4 + *(double *)(a1 + 144);
    *(double *)(a1 + 144) = v6;
    float v7 = *(float *)(a1 + 156);
    *(float *)(a1 + 152) = *a2 + *(float *)(a1 + 152);
    *(float *)(a1 + 156) = a2[1] + v7;
    *(float *)(a1 + 160) = a2[2] + *(float *)(a1 + 160);
    *(float *)&double v6 = (float)((float)(a2[2] * a2[2]) + (float)(a2[1] * a2[1])) + (float)(*a2 * *a2);
    *(float32x2_t *)(a1 + 164) = vadd_f32(*(float32x2_t *)(a1 + 164), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v6, 0));
    *(float *)(a1 + 172) = *(float *)&v6 + *(float *)(a1 + 172);
    double result = *(double *)(a1 + 176) + 1.0;
    *(double *)(a1 + 176) = result;
  }
  return result;
}

void sub_1009FD500(uint64_t a1, float *a2, float *a3, double a4, uint64_t a5, float *a6)
{
  BOOL v11 = sub_1009FD708(a1, a2, a4);
  sub_1009FD2EC(a1, a2, a3, a6, a4);
  if (*(double *)(a1 + 48) >= a4)
  {
    char v12 = 0;
    if (!v11) {
      return;
    }
  }
  else
  {
    char v12 = sub_1009FD794(a1, a2, a4);
    if (!v11) {
      return;
    }
  }
  if (*(double *)(a1 + 48) < a4)
  {
    long double v13 = atan2((float)((float)(*(float *)(a1 + 96) * *(float *)(a1 + 112))- (float)(*(float *)(a1 + 108) * *(float *)(a1 + 100))), (float)((float)(*(float *)(a1 + 100) * *(float *)(a1 + 112))+ (float)(*(float *)(a1 + 96) * *(float *)(a1 + 108))));
    double v14 = sub_1009FD890((double *)a1);
    if (!*(unsigned char *)(a1 + 260)) {
      sub_10020D700();
    }
    float v15 = 0.0;
    for (uint64_t i = 248; i != 260; i += 4)
      float v15 = v15 + (float)(*(float *)(a1 + i) * *(float *)(a1 + i));
    double v17 = sqrtf(v15);
    double v18 = 0.0;
    if ((v12 & 1) == 0) {
      double v18 = v17 - *(double *)(a1 + 120);
    }
    *(long double *)&long long v23 = v13;
    *((double *)&v23 + 1) = v18;
    *(double *)&long long v24 = v14;
    *((void *)&v24 + 1) = 0x3FF0000000000000;
    *(double *)&long long v22 = a4;
    *((double *)&v22 + 1) = a4 - *(double *)(a1 + 80);
    if (*(void *)(a1 + 24))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      if (v19) {
        sub_1009FDAE0(a1, v19);
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 240);
    *(_OWORD *)(a1 + 184) = v22;
    *(_OWORD *)(a1 + 200) = v23;
    *(_OWORD *)(a1 + 216) = v24;
    *(void *)(a1 + 232) = 0;
    if (!v20) {
      *(unsigned char *)(a1 + 240) = 1;
    }
    uint64_t v21 = (float *)(a1 + 56);
    if (*(unsigned char *)(a1 + 72))
    {
      if (v21 != a2) {
        *(_OWORD *)uint64_t v21 = *(_OWORD *)a2;
      }
    }
    else
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 72) = 1;
    }
    *(void *)(a1 + 108) = *(void *)(a1 + 96);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 104);
    *(double *)(a1 + 120) = v17;
    *(double *)(a1 + 80) = a4;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(void *)(a1 + 176) = 0;
    *(double *)(a1 + 48) = *(double *)(a1 + 40) * ceil(a4 / *(double *)(a1 + 40) + 0.5);
  }
}

BOOL sub_1009FD708(uint64_t a1, float *a2, double a3)
{
  double v5 = *(double *)(a1 + 48);
  BOOL result = v5 < a3;
  if (!*(unsigned char *)(a1 + 260))
  {
    BOOL result = 0;
    *(void *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 256) = 0;
    *(unsigned char *)(a1 + 260) = 1;
  }
  if (v5 < a3 && !*(unsigned char *)(a1 + 72))
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 72) = 1;
    *(double *)(a1 + 80) = a3;
    sub_100B9CF08(a2);
    float v10 = sub_100B9BDB8(a2, v7, v8, v9);
    BOOL result = 0;
    *(float *)(a1 + 108) = v10;
    *(_DWORD *)(a1 + 112) = v11;
    *(_DWORD *)(a1 + 116) = v12;
  }
  return result;
}

uint64_t sub_1009FD794(uint64_t a1, _OWORD *a2, double a3)
{
  double v3 = *(double *)(a1 + 176);
  if (v3 <= 0.0 || *(double *)(a1 + 144) <= 0.0) {
    return 0;
  }
  uint64_t v4 = 0;
  float v5 = (float)((float)((float)(*(float *)(a1 + 160) * *(float *)(a1 + 160))
                     + (float)(*(float *)(a1 + 156) * *(float *)(a1 + 156)))
             + (float)(*(float *)(a1 + 152) * *(float *)(a1 + 152)))
     / v3;
  float v6 = v3;
  float v7 = (float)((float)(*(float *)(a1 + 164) - v5) / v6)
     + (float)((float)((float)(*(float *)(a1 + 168) - v5) / v6) + (float)((float)(*(float *)(a1 + 172) - v5) / v6));
  if (v7 != 0.0)
  {
    double v8 = v7;
    if (v8 <= 0.001)
    {
      float v9 = (_OWORD *)(a1 + 264);
      if (*(unsigned char *)(a1 + 296))
      {
        if (*(double *)(a1 + 280) >= a3 + -300.0 && *(double *)(a1 + 288) <= v8) {
          return 0;
        }
        *float v9 = *a2;
        *(double *)(a1 + 280) = a3;
        *(double *)(a1 + 288) = v8;
      }
      else
      {
        *float v9 = *a2;
        *(double *)(a1 + 280) = a3;
        *(double *)(a1 + 288) = v8;
        *(unsigned char *)(a1 + 296) = 1;
      }
      int v11 = *(unsigned __int8 *)(a1 + 260);
      *(void *)(a1 + 248) = 0;
      uint64_t v4 = 1;
      *(_DWORD *)(a1 + 256) = 0;
      if (!v11) {
        *(unsigned char *)(a1 + 260) = 1;
      }
    }
  }
  return v4;
}

double sub_1009FD890(double *a1)
{
  double v1 = a1[22];
  double v2 = -1.0;
  if (v1 < 3.0
    || (double v3 = a1[18], v3 <= 0.0)
    || (double v2 = a1[5] / (v3 / v1) * ((a1[17] - a1[16] * a1[16] / v1) / (v1 + -1.0)), v4 = v2, v2 < 0.00000305))
  {
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_1022D9488);
    }
    float v5 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134349312;
      double v9 = v2;
      __int16 v10 = 2050;
      uint64_t v11 = 0x3EC995D33B7BD711;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#VDR,computeDeltaCourseVar, deltaCourseVar,%{public}.6f,less than threshold,%{public}.6f,using threshold", buf, 0x16u);
    }
    double v4 = 0.00000305;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_1022D9488);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLVDREstimator2DoF::computeDeltaCourseVar() const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return v4;
}

uint64_t sub_1009FDAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1009FDB34(id a1)
{
  qword_102419508 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_1009FDB64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1009FDBFC(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    float v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1009FDE5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1009FDE68(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = sub_1009FE4F4(a1, "CLSensorRecorderDb", a2, a3, 6, 30.0);
  *(void *)uint64_t v6 = off_1022D94B8;
  *(void *)(v6 + 72) = off_1022D9568;
  *(_DWORD *)(v6 + 344) = a4;
  *(void *)(v6 + 352) = v6 + 352;
  *(void *)(v6 + 360) = v6 + 352;
  *(void *)(v6 + 368) = 0;
  *(void *)(v6 + 376) = 0;
  *(_DWORD *)(v6 + 384) = 0x20000;
  *(void *)(v6 + 392) = v6 + 352;
  *(_DWORD *)(v6 + 400) = 0;
  if (a4 > 2) {
    float v7 = "";
  }
  else {
    float v7 = (&off_1022D9990)[a4];
  }
  double v8 = (std::string *)sub_100134750(buf, v7);
  double v9 = std::string::insert(v8, 0, "SensorRecorder");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v34, "Data");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)(a1 + 424) = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 408) = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v36 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v13 = *(int *)(a1 + 344);
  if (v13 > 2) {
    double v14 = "";
  }
  else {
    double v14 = (&off_1022D9990)[v13];
  }
  float v15 = (std::string *)sub_100134750(buf, v14);
  int v16 = std::string::insert(v15, 0, "SensorRecorder");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  double v18 = std::string::append(&v34, "Meta");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(void *)(a1 + 448) = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 432) = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v36 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v20 = sub_1000D3E78();
  sub_10006B564(v20, &v34);
  uint64_t v21 = (int *)(a1 + 384);
  sub_10006EF84((uint64_t)v34.__r_.__value_.__l.__data_, "SensorRecorderCacheSizeBytes", (_DWORD *)(a1 + 384));
  if (v34.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v34.__r_.__value_.__l.__size_);
  }
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  long long v22 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
  {
    int v23 = *v21;
    LODWORD(v34.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(v34.__r_.__value_.__r.__words[0]) = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "SensorRecorderCacheSizeBytes, %d", (uint8_t *)&v34, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v34, 0x65CuLL);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
    int v29 = *v21;
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v29;
    int v30 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorRecorderDb::CLSensorRecorderDb(BOOL, const std::string, CLSensorRecorder_Types::DataType)", "%s\n", (const char *)v30);
    if (v30 != &v34) {
      free(v30);
    }
  }
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  long long v24 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = *(int *)(a1 + 344);
    double v26 = v25 > 2 ? "" : (&off_1022D9990)[v25];
    sub_100134750(&v34, v26);
    int v27 = (v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v34
        : (std::string *)v34.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "SensorRecorderType, %s", buf, 0xCu);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v34, 0x65CuLL);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
    uint64_t v31 = *(int *)(a1 + 344);
    if (v31 > 2) {
      __int16 v32 = "";
    }
    else {
      __int16 v32 = (&off_1022D9990)[v31];
    }
    sub_100134750(buf, v32);
    uint64_t v33 = (std::string *)_os_log_send_and_compose_impl();
    if (v36 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorRecorderDb::CLSensorRecorderDb(BOOL, const std::string, CLSensorRecorder_Types::DataType)", "%s\n", (const char *)v33);
    if (v33 != &v34) {
      free(v33);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_1009FE428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 + 455) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v18 + 431) < 0) {
    operator delete(*v20);
  }
  sub_100A03C84(v19);
  sub_1009FE9B0((void *)v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1009FE4F4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *long long v12 = &off_1022B2C68;
  *(void *)a1 = off_1022D9868;
  *(void *)(a1 + 72) = off_1022D9910;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022D9868;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_1022D9910;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 12000;
  *(void *)(a1 + 272) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 280));
  *(void *)(a1 + 280) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1009FE908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *int v27 = v30;
  sub_1003BE1F8(v31);
  uint64_t v33 = (std::__shared_weak_count *)v25[32];
  if (v33) {
    sub_1000DB0A0(v33);
  }
  sub_100A04A7C(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1009FE9A8()
{
}

void *sub_1009FE9B0(void *a1)
{
  *a1 = off_1022D9868;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022D9910;
  a1[34] = off_1022B2C20;
  sub_1003BE1F8(a1 + 35);
  uint64_t v3 = (std::__shared_weak_count *)a1[32];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_100A04A7C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1009FEA7C(uint64_t a1)
{
  *(void *)a1 = off_1022D94B8;
  *(void *)(a1 + 72) = off_1022D9568;
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  sub_100A03C84((uint64_t *)(a1 + 352));

  return sub_1009FE9B0((void *)a1);
}

void *sub_1009FEB18(uint64_t a1)
{
  return sub_1009FEA7C(a1 - 72);
}

void sub_1009FEB20(uint64_t a1)
{
  sub_1009FEA7C(a1);

  operator delete();
}

void sub_1009FEB58(uint64_t a1)
{
  sub_1009FEA7C(a1 - 72);

  operator delete();
}

void sub_1009FEB94(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 408);
  if (*(char *)(a1 + 431) < 0) {
    uint64_t v2 = *(char **)v2;
  }
  uint64_t v3 = (char *)(a1 + 432);
  if (*(char *)(a1 + 455) < 0) {
    uint64_t v3 = *(char **)v3;
  }
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    if (sub_100601900(*(void *)(a1 + 80), v2, (uint64_t)"2245.4.99")
      && (sub_100601900(*(void *)(a1 + 80), v2, (uint64_t)"") & 1) == 0)
    {
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_1022D9628);
      }
      uint64_t v4 = qword_102419118;
      if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Detected incompatible sensor table, purging Sensor Recorder data", buf, 2u);
      }
      uint64_t v5 = sub_10013D1A0(115, 0);
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_1022D9628);
        }
        double v9 = (char *)_os_log_send_and_compose_impl();
        uint64_t v5 = sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSensorRecorderDb::prepareSQLStatements()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      uint64_t v6 = sub_1009FEF24(v5, (uint64_t)v2, *(char **)(a1 + 80));
      sub_1009FEF24(v6, (uint64_t)v3, *(char **)(a1 + 80));
    }
    sub_1005F7B0C(*(void *)(a1 + 80), v2, (const char **)&off_1022D9648, 0, 0);
    sub_1005F7B0C(*(void *)(a1 + 80), v3, (const char **)&off_1022D96D8, (const std::string::value_type **)&off_10241F930, 0);
    sub_1009FF060(a1);
  }
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  float v7 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Device is locked and we are unable to open the database", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorRecorderDb::prepareSQLStatements()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

uint64_t sub_1009FEF24(uint64_t a1, uint64_t a2, char *a3)
{
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  uint64_t v5 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005F7C38(a3, (uint64_t)__p);
    if (v9 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2081;
    uint64_t v15 = a2;
    __int16 v16 = 2082;
    uint64_t v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Deleting Sensor Table\", \"table\":%{private, location:escape_only}s, \"database\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_100603138(a3, a2);
}

void sub_1009FF060(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  std::operator+<char>();
  uint64_t v2 = std::string::append(&v5, " WHERE dataId = 0");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v7 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v7 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  sub_10014D518(v1, (uint64_t)v4);
}

void sub_1009FF154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009FF19C()
{
}

void sub_1009FF404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_1009FF48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 112;
  uint64_t v5 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v5))
  {
    sub_1009FF57C((uint64_t *)(a1 + 352), a2);
    unint64_t v6 = *(void *)(a1 + 376) + *(unsigned int *)(a2 + 16);
    *(void *)(a1 + 376) = v6;
    if (v6 > *(int *)(a1 + 384)) {
      sub_1009FF5EC((uint64_t *)a1);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1009FF568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_1009FF57C(uint64_t *a1, uint64_t a2)
{
  BOOL result = operator new(0x38uLL);
  result[1] = *(_OWORD *)a2;
  *((_DWORD *)result + 8) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *((void *)result + 5) = *(void *)(a2 + 24);
  *((void *)result + 6) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a1;
  *(void *)BOOL result = *a1;
  *((void *)result + 1) = a1;
  *(void *)(v6 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t *sub_1009FF5EC(uint64_t *result)
{
  if (result[46])
  {
    uint64_t v1 = result;
    sub_1000E1294(&v15, (uint64_t)"CLSensorRecorderDb::storeToDb", 0);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
    uint64_t v2 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = v1[46];
      uint64_t v4 = v1[47];
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Flushing to memory. %zu, %zu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_1022D9628);
      }
      std::string::size_type v12 = v1[46];
      std::string::size_type v13 = v1[47];
      LODWORD(v16.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)v16.__r_.__value_.__r.__words + 4) = v12;
      WORD2(v16.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 6) = v13;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorRecorderDb::storeToDb(BOOL)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
    uint64_t v6 = +[NSMutableData dataWithCapacity:v1[47]];
    for (uint64_t i = v1[45]; (uint64_t *)i != v1 + 44; uint64_t i = *(void *)(i + 8))
      [(NSMutableData *)v6 appendBytes:*(void *)(i + 40) length:*(unsigned int *)(i + 32)];
    sub_10002B640(v1[10]);
    uint64_t v8 = v1[10];
    std::operator+<char>();
    char v9 = std::string::append(&v16, " (startTime, timestamp, dataId, offset, size, movement) VALUES (?, ?, ?, ?, ?, ?)");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)int buf = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0) {
      int v11 = buf;
    }
    else {
      int v11 = *(unsigned char **)buf;
    }
    sub_10014D518(v8, (uint64_t)v11);
  }
  return result;
}

void sub_100A000E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_1000E1098(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0025C(uint64_t a1, char *a2)
{
  uint64_t result = sub_10014C3C0((uint64_t)a2);
  if (result)
  {
    for (uint64_t i = 0; i != 6; ++i)
    {
      uint64_t v5 = off_1022D95A8[i];
      uint64_t result = sub_1005F93E4(a2, v5);
      if (result)
      {
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_1022D9628);
        }
        uint64_t v6 = qword_102419118;
        if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005F7C38(a2, (uint64_t)__p);
          int64_t v7 = __p;
          if (v9 < 0) {
            int64_t v7 = (void **)__p[0];
          }
          *(_DWORD *)int buf = 68289539;
          int v11 = 0;
          __int16 v12 = 2082;
          std::string::size_type v13 = "";
          __int16 v14 = 2081;
          uint64_t v15 = v5;
          __int16 v16 = 2082;
          uint64_t v17 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Deleting Sensor Table\", \"table\":%{private, location:escape_only}s, \"database\":%{public, location:escape_only}s}", buf, 0x26u);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t result = sub_100603138(a2, v5);
      }
    }
  }
  return result;
}

uint64_t sub_100A003F8(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  uint64_t v4 = sub_100082064(v3);
  if (v4) {
    sub_100A0025C(v4, *(char **)(a1 + 80));
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100A004A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A004B8(uint64_t *a1)
{
  uint64_t v2 = a1 + 14;
  (*(void (**)(uint64_t *))(a1[14] + 16))(a1 + 14);
  sub_1009FF5EC(a1);
  return (*(uint64_t (**)(uint64_t *))(*v2 + 24))(v2);
}

void sub_100A00550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A00564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v17 = a3;
  uint64_t v6 = a1 + 72;
  uint64_t v15 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v16 = 256;
  if (sub_100082064(v6))
  {
    uint64_t v7 = *(void *)(a1 + 80);
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v14, " WHERE id = ?");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v19 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v19 >= 0) {
      long long v10 = __p;
    }
    else {
      long long v10 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v10);
  }
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  int v11 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Database is inaccessible", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
    LOWORD(v14.__r_.__value_.__l.__data_) = 0;
    std::string::size_type v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMeta(uint64_t, CLSensorRecorderSensorMeta *)", "%s\n", v13);
    if (v13 != (char *)__p) {
      free(v13);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return 0;
}

void sub_100A0088C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

uint64_t sub_100A00904(uint64_t *a1, void **a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  [v6 setIdentifier:sqlite3_column_int64(v7, 0)];
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  [v6 setStartTime:sqlite3_column_double(v8, 1)];
  long long v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  [v6 setTimestamp:sqlite3_column_int64(v9, 2)];
  long long v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  [v6 setDataIdentifier:sqlite3_column_int64(v10, 3)];
  int v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  [v6 setOffset:sqlite3_column_int(v11, 4)];
  __int16 v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  [v6 setDataSize:sqlite3_column_int(v12, 5)];
  return 0;
}

void sub_100A00A00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  std::operator+<char>();
  uint64_t v2 = std::string::append(&v5, " WHERE id = ?");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v7 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v7 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  sub_10014D518(v1, (uint64_t)v4);
}

void sub_100A00BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A00BF8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a1 + 112;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v8 = a1 + 72;
  uint64_t v19 = a1 + 112;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  __int16 v20 = 256;
  if (sub_100082064(v8))
  {
    if (*a2 | a3)
    {
      if (*a2) {
        sub_100A00A00(a1);
      }
      id v18 = [objc_alloc((Class)CLSensorRecorderSensorMeta) initWithDataType:*(unsigned int *)(a1 + 344)];
      uint64_t v12 = *(void *)(a1 + 80);
      std::operator+<char>();
      std::string::size_type v13 = std::string::append(&v17, " WHERE id = ?");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v22 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)int buf = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v22 >= 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(uint8_t **)buf;
      }
      sub_10014D518(v12, (uint64_t)v15);
    }
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
    long long v10 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Invalid query, both data id and meta id are 0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419110 == -1)
    {
LABEL_23:
      LOWORD(v17.__r_.__value_.__l.__data_) = 0;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordData(CLSensorRecorderSensorData &, uint64_t) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      goto LABEL_17;
    }
LABEL_25:
    dispatch_once(&qword_102419110, &stru_1022D9628);
    goto LABEL_23;
  }
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  long long v9 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Database is inaccessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419110 == -1) {
      goto LABEL_23;
    }
    goto LABEL_25;
  }
LABEL_17:
  (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  return 0;
}

void sub_100A010E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

uint64_t sub_100A01168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v15 = a3;
  uint64_t v6 = a1 + 72;
  uint64_t v13 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v14 = 256;
  if (sub_100082064(v6))
  {
    uint64_t v7 = *(void *)(a1 + 80);
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v12, " WHERE id >= ? ORDER BY id ASC");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v17 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v17 >= 0) {
      long long v10 = __p;
    }
    else {
      long long v10 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v10);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return 0;
}

void sub_100A0148C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  sub_1019DB560((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100A0151C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v3 = *(void *)(a1 + 80);
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v7, " WHERE startTime >= ? ORDER BY id ASC LIMIT 1");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  sub_10014D518(v3, (uint64_t)v6);
}

void sub_100A019CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A01AB0(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = a1 + 112;
  uint64_t v6 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v6))
  {
    if (*(void *)(a1 + 368))
    {
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_1022D9628);
      }
      std::string v7 = qword_102419118;
      if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
      {
        double v8 = *(double *)(*(void *)(a1 + 360) + 16);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        uint64_t v10 = *(void *)(*(void *)(a1 + 360) + 16);
        *(_DWORD *)int buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v8 < a3;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(CFAbsoluteTime *)&buf[10] = Current;
        __int16 v18 = 2048;
        double v19 = a3;
        __int16 v20 = 2048;
        uint64_t v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Non-empty, endTime in memory, %d, current time, %f, endTime, %f, first entry startTime, %f, ", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_1022D9628);
        }
        CFAbsoluteTimeGetCurrent();
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)", "%s\n", v15);
        if (v15 != buf) {
          free(v15);
        }
      }
      if (*(double *)(*(void *)(a1 + 360) + 16) < a3)
      {
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_1022D9628);
        }
        int64_t v11 = qword_102419118;
        if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Data requested is in memory.  Writing incremental data out to disk.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419110 != -1) {
            dispatch_once(&qword_102419110, &stru_1022D9628);
          }
          __int16 v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
        }
        sub_1009FF5EC((uint64_t *)a1);
      }
    }
    sub_100A0151C(a1, (uint64_t)[objc_alloc((Class)CLSensorRecorderSensorMeta) initWithDataType:*(unsigned int *)(a1 + 344)], (uint64_t)[objc_alloc((Class)CLSensorRecorderSensorMeta) initWithDataType:*(unsigned int *)(a1 + 344)]);
  }
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  std::string v12 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Data request failed because db is not accessible.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return 0;
}

void sub_100A0218C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

uint64_t sub_100A0223C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v14 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v15 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16) != 0.0 && sub_100082064(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 80);
    std::operator+<char>();
    std::string v7 = std::string::append(&v11, " WHERE startTime < ? ORDER BY dataId DESC LIMIT 1");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v13 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    sub_10014D518(v6, (uint64_t)v9);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return 0;
}

void sub_100A025FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  sub_1019DB560((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0272C(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_100A02764()
{
  return 0;
}

uint64_t sub_100A0276C()
{
  return 2;
}

uint64_t sub_100A02778(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        std::string v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A783B0(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100A02ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100A02B44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100A0503C(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022D9950);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)int64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022D9950);
    }
    std::string v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)int buf = 134349056;
      *(void *)int64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9950);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSensorRecorderDataPacket>::setDatabaseAccessible() [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100A03368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A0339C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v3;
  uint64_t v5 = *((void *)a3 + 3);
  uint64_t v4 = *((void *)a3 + 4);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 32);
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

id *sub_100A033D4(uint64_t a1, long long *a2, char a3)
{
  v33[0] = (id)os_transaction_create();
  v33[1] = 0;
  if (*(double *)(a1 + 224) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v33);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  v31[3] = 0.0;
  __int16 v32 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 104))(a1, v31);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9950);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9950);
        }
        LOWORD(v34) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_46;
    }
    double v7 = *(double *)a2;
    double v8 = v31[0];
    double v9 = *(double *)a2 - v31[0];
    if (v9 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D9950);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = *(double *)a2;
        *(_DWORD *)int buf = 134349312;
        double v39 = v31[0];
        __int16 v40 = 2050;
        double v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9950);
        }
        double v25 = *(double *)a2;
        int v34 = 134349312;
        double v35 = v31[0];
        __int16 v36 = 2050;
        double v37 = v25;
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)a2;
      double v8 = v31[0];
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9950);
        }
        std::string v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)a2;
          *(_DWORD *)int buf = 134217984;
          double v39 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022D9950);
          }
          double v27 = *(double *)a2;
          int v34 = 134217984;
          double v35 = v27;
          uint64_t v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v30 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022D9950);
        double v17 = v30;
      }
      double v18 = v16 - v17;
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134217984;
        double v39 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022D9950);
        }
        int v34 = 134217984;
        double v35 = v18;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, double *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v31, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  *(_DWORD *)(a1 + 240) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 224) = v20;
  uint64_t v22 = *((void *)a2 + 3);
  uint64_t v21 = *((void *)a2 + 4);
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  int v23 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = v22;
  *(void *)(a1 + 256) = v21;
  if (v23) {
    sub_1000DB0A0(v23);
  }
LABEL_46:
  if (v32) {
    sub_1000DB0A0(v32);
  }
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v33);
}

void sub_100A03C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a9) {
    sub_1000DB0A0(a9);
  }
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A03C4C(uint64_t a1)
{
  return sub_100A02B44(a1 - 72);
}

void sub_100A03C54(id a1)
{
  qword_102419118 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_100A03C84(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        int v6 = (std::__shared_weak_count *)v3[6];
        if (v6) {
          sub_1000DB0A0(v6);
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_100A03CFC(void *a1, uint64_t *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v19);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    if (HIBYTE(v20)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A78524(v4);
    if (v17) {
      sub_1000DB0A0(v17);
    }
    uint64_t v14 = v18;
    uint64_t v18 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    sub_101A129A8((uint64_t)v19);
    _Unwind_Resume(v13);
  }
  std::string v12 = v19[1];
  operator delete(v19[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_100A04DC8(a2);
    sub_10010F274((uint64_t)v19);
    int v6 = sub_100132EFC(&v20, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100A04088(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A78698(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100A043FC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101A7880C(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100A04728(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    double v11 = (_Unwind_Exception *)sub_101A78980(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100A04A4C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A04A7C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    long long v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x66];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 32);
        if (v10)
        {
          sub_1000DB0A0(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      long long v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 51;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 102;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_100A04BD8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void **sub_100A04C68(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666) {
      sub_1001D7FD4();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    v20[4] = result;
    uint64_t v15 = (char *)sub_1002E5328((uint64_t)result, v14);
    uint64_t v16 = &v15[40 * v11];
    v20[0] = v15;
    v20[1] = v16;
    void v20[3] = &v15[40 * v17];
    int v18 = *((_DWORD *)a2 + 4);
    *(_OWORD *)uint64_t v16 = *a2;
    *((_DWORD *)v16 + 4) = v18;
    *((void *)v16 + 3) = *((void *)a2 + 3);
    uint64_t v19 = *((void *)a2 + 4);
    *((void *)v16 + 4) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    v20[2] = v16 + 40;
    sub_100A04E14(a1, v20);
    uint64_t v10 = a1[1];
    uint64_t result = sub_100A04FB4(v20);
  }
  else
  {
    long long v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    *(void *)(v7 + 24) = *((void *)a2 + 3);
    uint64_t v9 = *((void *)a2 + 4);
    *(void *)(v7 + 32) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return result;
}

void sub_100A04DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100A04FB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_100A04DC8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_100A04E14(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100A04E8C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A04E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 40;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 40);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 - 24);
      *(_OWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 - 16);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *((void *)&v15 + 1) = v8;
      v8 -= 40;
      v7 -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100A04F38((uint64_t)v12);
  return v10;
}

uint64_t sub_100A04F38(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100A04F70(a1);
  }
  return a1;
}

void sub_100A04F70(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    long long v3 = *(std::__shared_weak_count **)(v1 + 32);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 += 40;
  }
}

void **sub_100A04FB4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100A04FE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 40;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_1000DB0A0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 40;
    }
  }
}

void sub_100A0503C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100A050BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A050D8(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

BOOL sub_100A05108(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    double v14 = 0.0;
    double v25 = 2.22044605e-16;
    double v114 = 2.22044605e-16;
    double v12 = 0.0;
    double v8 = 0.0;
    double v5 = 0.0;
    double v24 = 2.22044605e-16;
    double v26 = 0.0;
  }
  else
  {
    double v5 = 0.0;
    unint64_t v6 = -1;
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    uint64_t v10 = *a1;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    do
    {
      double v15 = *(float *)(v10 + 16);
      double v16 = v15 - v5;
      double v17 = (double)(v6 + 2);
      double v5 = v5 + (v15 - v5) / v17;
      double v7 = v7 + v16 * (v15 - v5);
      double v18 = *(double *)(v10 + 24);
      double v19 = *(double *)(v10 + 32);
      double v20 = v18 - v8;
      double v8 = v8 + (v18 - v8) / v17;
      double v9 = v9 + v20 * (v18 - v8);
      double v21 = v19 - v14;
      double v14 = v14 + (v19 - v14) / v17;
      double v13 = v13 + v21 * (v19 - v14);
      double v22 = *(double *)(v10 + 40);
      double v23 = v22 - v12;
      double v12 = v12 + (v22 - v12) / v17;
      double v11 = v11 + v23 * (v22 - v12);
      v10 += 72;
      ++v6;
    }
    while (v10 != v4);
    if (v6)
    {
      double v114 = sqrt(v7 / (double)v6) + 2.22044605e-16;
      double v24 = sqrt(v9 / (double)v6) + 2.22044605e-16;
      double v25 = sqrt(v13 / (double)v6) + 2.22044605e-16;
      double v26 = v11 / (double)v6;
    }
    else
    {
      double v26 = 0.0;
      double v25 = 2.22044605e-16;
      double v114 = 2.22044605e-16;
      double v24 = 2.22044605e-16;
    }
  }
  sub_100644360(v119, 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3));
  uint64_t v112 = a2;
  uint64_t v27 = *a1;
  uint64_t v28 = a1[1];
  if (*a1 != v28)
  {
    uint64_t v29 = 0;
    double v30 = sqrt(v26) + 2.22044605e-16;
    do
    {
      uint64_t v31 = v119[0] + 24 * v29;
      double v32 = (*(float *)(v27 + 16) - v5) / v114;
      int v34 = (double **)(v31 + 8);
      uint64_t v33 = *(double **)(v31 + 8);
      __int16 v36 = (void *)(v31 + 16);
      unint64_t v35 = *(void *)(v31 + 16);
      if ((unint64_t)v33 >= v35)
      {
        double v38 = *(double **)v31;
        uint64_t v39 = ((uint64_t)v33 - *(void *)v31) >> 3;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v41 = v35 - (void)v38;
        if (v41 >> 2 > v40) {
          unint64_t v40 = v41 >> 2;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          unint64_t v43 = (char *)sub_1000DA54C((uint64_t)v36, v42);
          uint64_t v33 = *v34;
          double v38 = *(double **)v31;
        }
        else
        {
          unint64_t v43 = 0;
        }
        CFStringRef v44 = (double *)&v43[8 * v39];
        *CFStringRef v44 = v32;
        double v37 = v44 + 1;
        while (v33 != v38)
        {
          uint64_t v45 = *((void *)v33-- - 1);
          *((void *)v44-- - 1) = v45;
        }
        *(void *)uint64_t v31 = v44;
        *int v34 = v37;
        *__int16 v36 = &v43[8 * v42];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *uint64_t v33 = v32;
        double v37 = v33 + 1;
      }
      *int v34 = v37;
      uint64_t v46 = v119[0] + 24 * v29;
      double v47 = (*(double *)(v27 + 24) - v8) / v24;
      CFStringRef v49 = (double **)(v46 + 8);
      CFStringRef v48 = *(double **)(v46 + 8);
      CFStringRef v51 = (void *)(v46 + 16);
      unint64_t v50 = *(void *)(v46 + 16);
      if ((unint64_t)v48 >= v50)
      {
        CFStringRef v53 = *(double **)v46;
        uint64_t v54 = ((uint64_t)v48 - *(void *)v46) >> 3;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v56 = v50 - (void)v53;
        if (v56 >> 2 > v55) {
          unint64_t v55 = v56 >> 2;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          CFStringRef v58 = (char *)sub_1000DA54C((uint64_t)v51, v57);
          CFStringRef v48 = *v49;
          CFStringRef v53 = *(double **)v46;
        }
        else
        {
          CFStringRef v58 = 0;
        }
        CFStringRef v59 = (double *)&v58[8 * v54];
        *CFStringRef v59 = v47;
        CFStringRef v52 = v59 + 1;
        while (v48 != v53)
        {
          uint64_t v60 = *((void *)v48-- - 1);
          *((void *)v59-- - 1) = v60;
        }
        *(void *)uint64_t v46 = v59;
        *CFStringRef v49 = v52;
        *CFStringRef v51 = &v58[8 * v57];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *CFStringRef v48 = v47;
        CFStringRef v52 = v48 + 1;
      }
      *CFStringRef v49 = v52;
      uint64_t v61 = v119[0] + 24 * v29;
      double v62 = (*(double *)(v27 + 32) - v14) / v25;
      __int16 v64 = (double **)(v61 + 8);
      double v63 = *(double **)(v61 + 8);
      int v66 = (void *)(v61 + 16);
      unint64_t v65 = *(void *)(v61 + 16);
      if ((unint64_t)v63 >= v65)
      {
        __int16 v68 = *(double **)v61;
        uint64_t v69 = ((uint64_t)v63 - *(void *)v61) >> 3;
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v71 = v65 - (void)v68;
        if (v71 >> 2 > v70) {
          unint64_t v70 = v71 >> 2;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v70;
        }
        if (v72)
        {
          int v73 = (char *)sub_1000DA54C((uint64_t)v66, v72);
          double v63 = *v64;
          __int16 v68 = *(double **)v61;
        }
        else
        {
          int v73 = 0;
        }
        __int16 v74 = (double *)&v73[8 * v69];
        *__int16 v74 = v62;
        __int16 v67 = v74 + 1;
        while (v63 != v68)
        {
          uint64_t v75 = *((void *)v63-- - 1);
          *((void *)v74-- - 1) = v75;
        }
        *(void *)uint64_t v61 = v74;
        *__int16 v64 = v67;
        *int v66 = &v73[8 * v72];
        if (v68) {
          operator delete(v68);
        }
      }
      else
      {
        *double v63 = v62;
        __int16 v67 = v63 + 1;
      }
      *__int16 v64 = v67;
      uint64_t v76 = v119[0] + 24 * v29;
      double v77 = (*(double *)(v27 + 40) - v12) / v30;
      int v79 = (double **)(v76 + 8);
      __int16 v78 = *(double **)(v76 + 8);
      int v81 = (void *)(v76 + 16);
      unint64_t v80 = *(void *)(v76 + 16);
      if ((unint64_t)v78 >= v80)
      {
        int v83 = *(double **)v76;
        uint64_t v84 = ((uint64_t)v78 - *(void *)v76) >> 3;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v86 = v80 - (void)v83;
        if (v86 >> 2 > v85) {
          unint64_t v85 = v86 >> 2;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87)
        {
          long long v88 = (char *)sub_1000DA54C((uint64_t)v81, v87);
          __int16 v78 = *v79;
          int v83 = *(double **)v76;
        }
        else
        {
          long long v88 = 0;
        }
        __int16 v89 = (double *)&v88[8 * v84];
        double *v89 = v77;
        __int16 v82 = v89 + 1;
        while (v78 != v83)
        {
          uint64_t v90 = *((void *)v78-- - 1);
          *((void *)v89-- - 1) = v90;
        }
        *(void *)uint64_t v76 = v89;
        void *v79 = v82;
        *int v81 = &v88[8 * v87];
        if (v83) {
          operator delete(v83);
        }
      }
      else
      {
        *__int16 v78 = v77;
        __int16 v82 = v78 + 1;
      }
      void *v79 = v82;
      ++v29;
      v27 += 72;
    }
    while (v27 != v28);
  }
  sub_100644360(&v117, 4uLL);
  uint64_t v91 = v117;
  uint64_t v115 = v118;
  if (v117 != v118)
  {
    int v92 = 0;
    uint64_t v93 = v119[0];
    unint64_t v113 = (0xAAAAAAAAAAAAAAABLL * ((v119[1] - v119[0]) >> 3) - 1) >> 2;
    uint64_t v94 = *(void *)v119[0];
    do
    {
      ++v92;
      if (*(void *)(v93 + 8) != v94)
      {
        unint64_t v95 = 0;
        int v96 = (void *)(v91 + 16);
        __int16 v97 = *(void **)(v91 + 8);
        do
        {
          uint64_t v98 = *(void *)(v93 + 24 * (v92 * v113));
          if ((unint64_t)v97 >= *v96)
          {
            uint64_t v100 = *(void **)v91;
            uint64_t v101 = ((uint64_t)v97 - *(void *)v91) >> 3;
            unint64_t v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v103 = *v96 - (void)v100;
            if (v103 >> 2 > v102) {
              unint64_t v102 = v103 >> 2;
            }
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v104 = v102;
            }
            if (v104)
            {
              __int16 v105 = (char *)sub_1000DA54C(v91 + 16, v104);
              uint64_t v100 = *(void **)v91;
              __int16 v97 = *(void **)(v91 + 8);
            }
            else
            {
              __int16 v105 = 0;
            }
            int v106 = &v105[8 * v101];
            *(void *)int v106 = *(void *)(v98 + 8 * v95);
            __int16 v99 = v106 + 8;
            while (v97 != v100)
            {
              uint64_t v107 = *--v97;
              *((void *)v106 - 1) = v107;
              v106 -= 8;
            }
            *(void *)uint64_t v91 = v106;
            *(void *)(v91 + 8) = v99;
            *(void *)(v91 + 16) = &v105[8 * v104];
            if (v100) {
              operator delete(v100);
            }
          }
          else
          {
            *__int16 v97 = *(void *)(v98 + 8 * v95);
            __int16 v99 = v97 + 1;
          }
          *(void *)(v91 + 8) = v99;
          ++v95;
          uint64_t v93 = v119[0];
          uint64_t v94 = *(void *)v119[0];
          __int16 v97 = v99;
        }
        while (v95 < (uint64_t)(*(void *)(v119[0] + 8) - *(void *)v119[0]) >> 3);
      }
      v91 += 24;
    }
    while (v91 != v115);
  }
  memset(v116, 0, sizeof(v116));
  BOOL v108 = sub_1001DE598((uint64_t)buf, (uint64_t)&v117, (uint64_t)v119, 4u, v116, v112);
  if (!v108)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D99A8);
    }
    __int16 v109 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "VO2Max,Clustering failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D99A8);
      }
      __int16 v111 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVO2MaxModel::deriveClusters(const std::vector<VO2MaxModelInput> &, std::vector<uint32_t> &)", "%s\n", v111);
      if (v111 != (char *)buf) {
        free(v111);
      }
    }
  }
  *(void *)int buf = v116;
  sub_1001DCABC((void ***)buf);
  *(void *)int buf = &v117;
  sub_1001DCABC((void ***)buf);
  *(void *)int buf = v119;
  sub_1001DCABC((void ***)buf);
  return v108;
}

void sub_100A05960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a16;
  sub_1001DCABC(&a25);
  a25 = (void **)&a19;
  sub_1001DCABC(&a25);
  a25 = (void **)&a22;
  sub_1001DCABC(&a25);
  _Unwind_Resume(a1);
}

void sub_100A059E0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 != v1)
  {
    do
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D99A8);
      }
      long long v3 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(v2 + 8);
        uint64_t v5 = *(void *)(v2 + 40);
        uint64_t v6 = *(void *)(v2 + 48);
        uint64_t v7 = *(void *)(v2 + 56);
        uint64_t v8 = *(void *)(v2 + 64);
        uint64_t v9 = *(void *)(v2 + 72);
        uint64_t v10 = *(void *)(v2 + 80);
        uint64_t v11 = *(void *)(v2 + 88);
        uint64_t v12 = *(void *)(v2 + 96);
        uint64_t v14 = *(void *)(v2 + 104);
        uint64_t v13 = *(void *)(v2 + 112);
        uint64_t v16 = *(void *)(v2 + 128);
        uint64_t v15 = *(void *)(v2 + 136);
        uint64_t v17 = *(void *)(v2 + 152);
        uint64_t v18 = *(void *)(v2 + 160);
        uint64_t v19 = *(void *)(v2 + 168);
        uint64_t v20 = *(void *)(v2 + 120);
        int v21 = *(_DWORD *)(v2 + 176);
        *(_DWORD *)int buf = 134222336;
        uint64_t v24 = v4;
        __int16 v25 = 2048;
        uint64_t v26 = v5;
        __int16 v27 = 2048;
        uint64_t v28 = v6;
        __int16 v29 = 2048;
        uint64_t v30 = v7;
        __int16 v31 = 2048;
        uint64_t v32 = v8;
        __int16 v33 = 2048;
        uint64_t v34 = v9;
        __int16 v35 = 2048;
        uint64_t v36 = v10;
        __int16 v37 = 2048;
        uint64_t v38 = v11;
        __int16 v39 = 2048;
        uint64_t v40 = v12;
        __int16 v41 = 2048;
        uint64_t v42 = v14;
        __int16 v43 = 2048;
        uint64_t v44 = v13;
        __int16 v45 = 2048;
        uint64_t v46 = v16;
        __int16 v47 = 2048;
        uint64_t v48 = v15;
        __int16 v49 = 2048;
        uint64_t v50 = v17;
        __int16 v51 = 2048;
        uint64_t v52 = v18;
        __int16 v53 = 2048;
        uint64_t v54 = v19;
        __int16 v55 = 2048;
        uint64_t v56 = v20;
        __int16 v57 = 1024;
        int v58 = v21;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AlgoName,AdaptiveOutdoorPedestrianModel,ts,%.9f,duration,%.9f,size,%lld,hr min.,%f,hr max.,%f,hrMean,%f,hrConfMean,%f,hrCadenceMean,%f,vo2Mean,%f,speedMean,%f,gradeMean,%f,hrVariance,%f,hrConfVariance,%f,vo2Variance,%f,speedVariance,%f,gradeVariance,%f,cadenceMean,%f,vo2MaxModelSource,%d", buf, 0xB2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D99A8);
        }
        double v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxModel::logClusters(std::vector<VO2MaxSummary> &)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      v2 += 184;
    }
    while (v2 != v1);
  }
}

uint64_t sub_100A05D30(uint64_t result, void *a2, int a3)
{
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

void sub_100A05D40(float *a1, uint64_t *a2, long long **a3, uint64_t a4, uint64_t a5, float a6, double a7, double a8)
{
  sub_100A062B8((uint64_t)a1, a5, a2, a6);
  std::string __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if (*(void *)(a5 + 48) == *(void *)(a5 + 40)) {
    uint64_t v15 = 4294967287;
  }
  else {
    uint64_t v15 = sub_100A06B6C(v14, a3, (char **)(a5 + 40), &__p, a8);
  }
  *(_DWORD *)(a5 + 28) = v15;
  if (*(_DWORD *)(a5 + 24)) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    *(void *)a5 = 0xBFF0000000000000;
    goto LABEL_16;
  }
  double v46 = 0.0;
  if (!sub_100A06EC4(v15, (double **)&__p, &v46))
  {
    int v18 = -7;
    goto LABEL_13;
  }
  double v17 = v46;
  *(double *)(a5 + 64) = v46;
  if (a7 == 0.0)
  {
    int v18 = -8;
LABEL_13:
    int v19 = *(_DWORD *)(a5 + 24);
    if (!v19) {
      int v19 = v18;
    }
    *(_DWORD *)(a5 + 24) = v19;
    *(_DWORD *)(a5 + 28) = v18;
    goto LABEL_16;
  }
  int v20 = *(_DWORD *)(a4 + 4);
  double v21 = 0.5;
  if (v20 == 2) {
    double v21 = 0.0;
  }
  if (v20 == 1) {
    double v21 = 1.0;
  }
  double v22 = (float)((float)(*(float *)(a4 + 20) * -0.0007) + 0.1935)
      + v21 * -0.0277999993
      + (float)((float)(*(float *)(a4 + 12) * -0.0015) / (float)(*(float *)(a4 + 8) * *(float *)(a4 + 8)))
      + a7 * 0.00520000001
      + v17 * 0.00540000014;
  double v23 = v22 * a1[1];
  *(double *)(a5 + 8) = v23;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D99A8);
  }
  uint64_t v24 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    double v25 = *(float *)(a4 + 20);
    int v26 = *(unsigned __int8 *)(a4 + 4);
    double v27 = *(float *)(a4 + 8);
    double v28 = *(float *)(a4 + 12);
    uint64_t v29 = *(void *)(a5 + 8);
    *(_DWORD *)int buf = 134285569;
    double v69 = v25;
    __int16 v70 = 1025;
    int v71 = v26;
    __int16 v72 = 2049;
    double v73 = v27;
    __int16 v74 = 2049;
    double v75 = v28;
    __int16 v76 = 2049;
    double v77 = a7;
    __int16 v78 = 2049;
    double v79 = v17;
    __int16 v80 = 2049;
    uint64_t v81 = v29;
    __int16 v82 = 2049;
    double v83 = v22 * 0.959999979 + 0.00659999996;
    __int16 v84 = 2049;
    double v85 = v22 * 0.330000013 + -0.023;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "VO2Max,AdaptiveOutdoorPedestrianModel,ComputePriors,age,%{private}f,biologicalSex,%{private}u,height,%{private}f,weight,%{private}f,maxMets,%{private}f,efficiency,%{private}f,priorVO2Max,%{private}f,modelPriorCoefficient_a,%{private}f,modelPriorCoefficient_b,%{private}f", buf, 0x58u);
  }
  uint64_t v30 = sub_10013D1A0(115, 2);
  if (v30)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D99A8);
    }
    double v40 = *(float *)(a4 + 20);
    int v41 = *(unsigned __int8 *)(a4 + 4);
    double v42 = *(float *)(a4 + 8);
    double v43 = *(float *)(a4 + 12);
    uint64_t v44 = *(void *)(a5 + 8);
    int v50 = 134285569;
    double v51 = v40;
    __int16 v52 = 1025;
    int v53 = v41;
    __int16 v54 = 2049;
    double v55 = v42;
    __int16 v56 = 2049;
    double v57 = v43;
    __int16 v58 = 2049;
    double v59 = a7;
    __int16 v60 = 2049;
    double v61 = v17;
    __int16 v62 = 2049;
    uint64_t v63 = v44;
    __int16 v64 = 2049;
    double v65 = v22 * 0.959999979 + 0.00659999996;
    __int16 v66 = 2049;
    double v67 = v22 * 0.330000013 + -0.023;
    __int16 v45 = (char *)_os_log_send_and_compose_impl();
    uint64_t v30 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::estimateVO2Max(const std::vector<VO2MaxModelInput> &, const std::vector<VO2MaxSummary> &, float, const CLBodyMetrics &, double, CLVO2MaxModel::Result &, CFAbsoluteTime) const", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  if (!*(_DWORD *)(a5 + 24))
  {
    *(_DWORD *)int buf = 0;
    sub_100A07584(a1, (uint64_t *)(a5 + 40), (int *)buf, v22, v23, 1.79769313e308);
    *(double *)(a5 + 16) = v31;
    if (v31 == -1.0) {
      int v32 = -6;
    }
    else {
      int v32 = 0;
    }
    *(_DWORD *)(a5 + 24) = v32;
  }
  if (__p != v48)
  {
    double v33 = 0.0;
    double v34 = 0.0;
    __int16 v35 = (double *)__p;
    do
    {
      double v33 = v33 + v35[9];
      double v34 = v34 + v35[12] / 3.5;
      v35 += 23;
    }
    while (v35 != (double *)v48);
    double v36 = (double)(0xD37A6F4DE9BD37A7 * ((v48 - (unsigned char *)__p) >> 3));
    *(double *)(a5 + 72) = v33 / v36;
    *(double *)(a5 + 80) = v34 / v36;
  }
  *(_DWORD *)int buf = 0;
  double v37 = sub_100A0714C(v22, a8, v30, (double **)a3);
  sub_100A07584(a1, (uint64_t *)&__p, (int *)buf, v22, v23, v37);
  *(double *)a5 = v38;
  if (v38 == -1.0)
  {
    int v39 = -6;
  }
  else
  {
    int v39 = 0;
    *(_DWORD *)(a5 + 32) = *(_DWORD *)buf;
  }
  *(_DWORD *)(a5 + 28) = v39;
LABEL_16:
  if (__p)
  {
    uint64_t v48 = __p;
    operator delete(__p);
  }
}

void sub_100A0628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A062B8(uint64_t a1, uint64_t a2, uint64_t *a3, float a4)
{
  if (a4 > 20.0 || 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3) <= 0x31)
  {
    *(_DWORD *)(a2 + 24) = -1;
    return;
  }
  long long v124 = 0;
  long long v125 = 0;
  uint64_t v126 = 0;
  if (sub_100A05108(a3, (uint64_t)&v124))
  {
    sub_100A07ED4(v123, 4uLL);
    sub_100A07ED4(v122, 4uLL);
    sub_100A07ED4(v121, 4uLL);
    sub_100A07ED4(v120, 4uLL);
    sub_100A07ED4(v119, 4uLL);
    sub_100A07ED4(v118, 4uLL);
    uint64_t v7 = v124;
    uint64_t v8 = v125;
    if (v124 != v125)
    {
      unsigned int v9 = 0;
      uint64_t v10 = *a3;
      unint64_t v11 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3);
      uint64_t v12 = (char *)v123[0];
      uint64_t v13 = (char *)v122[0];
      int v14 = (char *)v121[0];
      uint64_t v15 = (char *)v120[0];
      BOOL v16 = (char *)v119[0];
      double v17 = (char *)v118[0];
      do
      {
        uint64_t v18 = *v7;
        if (v18 >= 4 && v11 <= v9)
        {
          sub_101A78AF4();
          abort_report_np();
          __break(1u);
        }
        uint64_t v20 = 3 * v18;
        double v21 = (double *)&v12[8 * v20];
        uint64_t v22 = v10 + 72 * v9;
        double v23 = *(float *)(v22 + 16);
        double v24 = v21[1];
        double v25 = v21[2];
        double v26 = v23 - v24;
        uint64_t v27 = *(void *)v21 + 1;
        *(void *)double v21 = v27;
        double v28 = v24 + (v23 - v24) / (double)(unint64_t)v27;
        v21[1] = v28;
        _OWORD v21[2] = v25 + v26 * (v23 - v28);
        uint64_t v29 = (double *)&v13[8 * v20];
        double v30 = *(float *)(v22 + 20);
        double v31 = v29[1];
        double v32 = v29[2];
        double v33 = v30 - v31;
        uint64_t v34 = *(void *)v29 + 1;
        *(void *)uint64_t v29 = v34;
        double v35 = v31 + (v30 - v31) / (double)(unint64_t)v34;
        v29[1] = v35;
        id v29[2] = v32 + v33 * (v30 - v35);
        double v36 = (double *)&v14[8 * v20];
        double v37 = *(double *)(v22 + 24);
        double v38 = v36[1];
        double v39 = v36[2];
        double v40 = v37 - v38;
        uint64_t v41 = *(void *)v36 + 1;
        *(void *)double v36 = v41;
        double v42 = v38 + (v37 - v38) / (double)(unint64_t)v41;
        v36[1] = v42;
        void v36[2] = v39 + v40 * (v37 - v42);
        double v43 = (double *)&v15[8 * v20];
        double v44 = *(double *)(v22 + 32);
        double v45 = v43[1];
        double v46 = v43[2];
        double v47 = v44 - v45;
        uint64_t v48 = *(void *)v43 + 1;
        *(void *)double v43 = v48;
        double v49 = v45 + (v44 - v45) / (double)(unint64_t)v48;
        v43[1] = v49;
        v43[2] = v46 + v47 * (v44 - v49);
        int v50 = (double *)&v16[8 * v20];
        double v51 = *(double *)(v22 + 48);
        double v52 = v50[1];
        double v53 = v50[2];
        double v54 = v51 - v52;
        uint64_t v55 = *(void *)v50 + 1;
        *(void *)int v50 = v55;
        double v56 = v52 + (v51 - v52) / (double)(unint64_t)v55;
        v50[1] = v56;
        v50[2] = v53 + v54 * (v51 - v56);
        double v57 = (double *)&v17[8 * v20];
        double v58 = *(double *)(v22 + 56);
        double v59 = v57[1];
        double v60 = v57[2];
        double v61 = v58 - v59;
        uint64_t v62 = *(void *)v57 + 1;
        double v63 = v59 + (v58 - v59) / (double)(unint64_t)v62;
        *(void *)double v57 = v62;
        v57[1] = v63;
        v57[2] = v60 + v61 * (v58 - v63);
        ++v9;
        ++v7;
      }
      while (v7 != v8);
    }
    unint64_t v64 = 0;
    uint64_t v65 = 0;
    double v109 = *(double *)(a3[1] - 72) - *(double *)*a3;
    uint64_t v110 = *(void *)(a3[1] - 72);
    float v66 = *(float *)a1;
    float v67 = *(float *)(a1 + 4);
    std::string __p = 0;
    __int16 v116 = 0;
    uint64_t v117 = 0;
    double v107 = v67;
    double v108 = v66;
    do
    {
      unint64_t v68 = *((void *)v123[0] + 3 * v65);
      if (v68)
      {
        long long v127 = 0uLL;
        double v69 = *((double *)v123[0] + 3 * v65 + 1);
        double v70 = *((double *)v118[0] + 3 * v65 + 1);
        double v71 = 1.0;
        if (v69 > 0.0 && v70 > 0.0)
        {
          double v72 = vabdd_f64(v69 / (v70 * 60.0), round(v69 / (v70 * 60.0)));
          double v73 = vabdd_f64(0.5, v72);
          if (v73 >= v72) {
            double v71 = v72;
          }
          else {
            double v71 = v73;
          }
        }
        double v74 = 0.0;
        double v75 = 0.0;
        if (v68 >= 2) {
          double v75 = *((double *)v123[0] + 3 * v65 + 2) / (double)(v68 - 1);
        }
        __int16 v76 = (char *)v119[0] + 24 * v65;
        if (*v76 >= 2uLL) {
          double v74 = *((double *)v119[0] + 3 * v65 + 2) / (double)(unint64_t)(*v76 - 1);
        }
        double v77 = (char *)v122[0] + 24 * v65;
        double v78 = 0.0;
        double v79 = 0.0;
        if (*v77 >= 2uLL) {
          double v79 = *((double *)v122[0] + 3 * v65 + 2) / (double)(unint64_t)(*v77 - 1);
        }
        double v111 = v75;
        double v112 = v74;
        double v113 = v71;
        uint64_t v114 = *((void *)v118[0] + 3 * v65 + 1);
        __int16 v80 = (char *)v121[0] + 24 * v65;
        if (*v80 >= 2uLL) {
          double v78 = *((double *)v121[0] + 3 * v65 + 2) / (double)(unint64_t)(*v80 - 1);
        }
        uint64_t v81 = (char *)v120[0] + 24 * v65;
        double v82 = 0.0;
        if (*v81 >= 2uLL) {
          double v82 = *((double *)v120[0] + 3 * v65 + 2) / (double)(unint64_t)(*v81 - 1);
        }
        uint64_t v83 = v76[1];
        uint64_t v84 = v77[1];
        uint64_t v85 = v80[1];
        uint64_t v86 = v81[1];
        int v87 = *(_DWORD *)(a1 + 8);
        if (v64 >= (unint64_t)v117)
        {
          unint64_t v88 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v64 - (void)__p) >> 3);
          unint64_t v89 = v88 + 1;
          if (v88 + 1 > 0x1642C8590B21642) {
            sub_1001D7FD4();
          }
          if (0xA6F4DE9BD37A6F4ELL * ((v117 - (unsigned char *)__p) >> 3) > v89) {
            unint64_t v89 = 0xA6F4DE9BD37A6F4ELL * ((v117 - (unsigned char *)__p) >> 3);
          }
          if (0xD37A6F4DE9BD37A7 * ((v117 - (unsigned char *)__p) >> 3) >= 0xB21642C8590B21) {
            unint64_t v90 = 0x1642C8590B21642;
          }
          else {
            unint64_t v90 = v89;
          }
          if (v90) {
            uint64_t v91 = (char *)sub_10050F820((uint64_t)&v117, v90);
          }
          else {
            uint64_t v91 = 0;
          }
          int v92 = &v91[184 * v88];
          *(void *)int v92 = 0;
          *((void *)v92 + 1) = v110;
          *((void *)v92 + 3) = 0;
          *((void *)v92 + 4) = 0;
          *((void *)v92 + 2) = 0;
          *((double *)v92 + 5) = v109;
          *((void *)v92 + 6) = v68;
          *((double *)v92 + 7) = v108;
          *((double *)v92 + 8) = v107;
          *((double *)v92 + 9) = v69;
          *((void *)v92 + 10) = v83;
          *((double *)v92 + 11) = v113;
          *((void *)v92 + 12) = v84;
          *((void *)v92 + 13) = v85;
          *((void *)v92 + 14) = v86;
          *((void *)v92 + 15) = v114;
          *((double *)v92 + 16) = v111;
          *((double *)v92 + 17) = v112;
          *((void *)v92 + 18) = 0;
          *((double *)v92 + 19) = v79;
          *((double *)v92 + 20) = v78;
          *((double *)v92 + 21) = v82;
          *((_DWORD *)v92 + 44) = 1;
          *((_DWORD *)v92 + 45) = v87;
          uint64_t v94 = (char *)__p;
          uint64_t v93 = v116;
          unint64_t v95 = v92;
          if (v116 != __p)
          {
            do
            {
              long long v96 = *(_OWORD *)(v93 - 184);
              long long v97 = *(_OWORD *)(v93 - 168);
              long long v98 = *(_OWORD *)(v93 - 152);
              *(_OWORD *)(v95 - 136) = *(_OWORD *)(v93 - 136);
              *(_OWORD *)(v95 - 152) = v98;
              *(_OWORD *)(v95 - 168) = v97;
              *(_OWORD *)(v95 - 184) = v96;
              long long v99 = *(_OWORD *)(v93 - 120);
              long long v100 = *(_OWORD *)(v93 - 104);
              long long v101 = *(_OWORD *)(v93 - 88);
              *(_OWORD *)(v95 - 72) = *(_OWORD *)(v93 - 72);
              *(_OWORD *)(v95 - 88) = v101;
              *(_OWORD *)(v95 - 104) = v100;
              *(_OWORD *)(v95 - 120) = v99;
              long long v102 = *(_OWORD *)(v93 - 56);
              long long v103 = *(_OWORD *)(v93 - 40);
              long long v104 = *(_OWORD *)(v93 - 24);
              *((void *)v95 - 1) = *((void *)v93 - 1);
              *(_OWORD *)(v95 - 24) = v104;
              *(_OWORD *)(v95 - 40) = v103;
              *(_OWORD *)(v95 - 56) = v102;
              v95 -= 184;
              v93 -= 184;
            }
            while (v93 != v94);
            uint64_t v93 = v94;
          }
          unint64_t v64 = (unint64_t)(v92 + 184);
          std::string __p = v95;
          __int16 v116 = v92 + 184;
          uint64_t v117 = &v91[184 * v90];
          if (v93) {
            operator delete(v93);
          }
        }
        else
        {
          *(void *)unint64_t v64 = 0;
          *(void *)(v64 + 8) = v110;
          *(void *)(v64 + 16) = 0;
          *(_OWORD *)(v64 + 24) = v127;
          *(double *)(v64 + 40) = v109;
          *(void *)(v64 + 48) = v68;
          *(double *)(v64 + 56) = v108;
          *(double *)(v64 + 64) = v107;
          *(double *)(v64 + 72) = v69;
          *(void *)(v64 + 80) = v83;
          *(double *)(v64 + 88) = v71;
          *(void *)(v64 + 96) = v84;
          *(void *)(v64 + 104) = v85;
          *(void *)(v64 + 112) = v86;
          *(double *)(v64 + 120) = v70;
          *(double *)(v64 + 128) = v75;
          *(double *)(v64 + 136) = v74;
          *(void *)(v64 + 144) = 0;
          *(double *)(v64 + 152) = v79;
          *(double *)(v64 + 160) = v78;
          *(double *)(v64 + 168) = v82;
          *(_DWORD *)(v64 + 176) = 1;
          *(_DWORD *)(v64 + 180) = v87;
          v64 += 184;
        }
        __int16 v116 = (char *)v64;
      }
      ++v65;
    }
    while (v65 != 4);
    __int16 v105 = (char *)__p;
    unint64_t v106 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v64 - (void)__p) >> 3);
    if (v106 >= 4)
    {
      if ((void **)(a2 + 40) != &__p) {
        sub_1000D90D8((char *)(a2 + 40), (char *)__p, v64, v106);
      }
      *(_DWORD *)(a2 + 24) = 0;
      sub_100A059E0((uint64_t *)(a2 + 40));
      __int16 v105 = (char *)__p;
      if (!__p) {
        goto LABEL_50;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 24) = -9;
      if (!v105)
      {
LABEL_50:
        if (v118[0])
        {
          v118[1] = v118[0];
          operator delete(v118[0]);
        }
        if (v119[0])
        {
          v119[1] = v119[0];
          operator delete(v119[0]);
        }
        if (v120[0])
        {
          v120[1] = v120[0];
          operator delete(v120[0]);
        }
        if (v121[0])
        {
          v121[1] = v121[0];
          operator delete(v121[0]);
        }
        if (v122[0])
        {
          v122[1] = v122[0];
          operator delete(v122[0]);
        }
        if (v123[0])
        {
          v123[1] = v123[0];
          operator delete(v123[0]);
        }
        goto LABEL_64;
      }
    }
    __int16 v116 = v105;
    operator delete(v105);
    goto LABEL_50;
  }
  *(_DWORD *)(a2 + 24) = -5;
LABEL_64:
  if (v124)
  {
    long long v125 = v124;
    operator delete(v124);
  }
}

void sub_100A06A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a38) {
    operator delete(a38);
  }
  uint64_t v41 = *(void **)(v39 - 224);
  if (v41)
  {
    *(void *)(v39 - 216) = v41;
    operator delete(v41);
  }
  double v42 = *(void **)(v39 - 200);
  if (v42)
  {
    *(void *)(v39 - 192) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A06B6C(int a1, long long **a2, char **a3, void **a4, double a5)
{
  memset(dst, 0, sizeof(dst));
  if (a3[1] != *a3) {
    uuid_copy(dst, (const unsigned __int8 *)*a3 + 24);
  }
  *(void *)uu1 = 0;
  uint64_t v55 = 0;
  unsigned int v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    unsigned int v11 = 0;
    do
    {
      if (uuid_compare((const unsigned __int8 *)v9 + 24, dst))
      {
        int v12 = *((_DWORD *)v9 + 44);
        if (v12 == 1 || v12 == -1)
        {
          if (uuid_compare(uu1, (const unsigned __int8 *)v9 + 24))
          {
            uuid_copy(uu1, (const unsigned __int8 *)v9 + 24);
            ++v11;
          }
          if (v11 >= 0xB && a5 - *((double *)v9 + 1) > 2419200.0) {
            break;
          }
          int v14 = (char *)a4[1];
          uint64_t v15 = (char *)a4[2];
          if (v14 >= v15)
          {
            unint64_t v26 = 0xD37A6F4DE9BD37A7 * ((v14 - (unsigned char *)*a4) >> 3);
            unint64_t v27 = v26 + 1;
            if (v26 + 1 > 0x1642C8590B21642) {
              sub_1001D7FD4();
            }
            unint64_t v28 = 0xD37A6F4DE9BD37A7 * ((v15 - (unsigned char *)*a4) >> 3);
            if (2 * v28 > v27) {
              unint64_t v27 = 2 * v28;
            }
            if (v28 >= 0xB21642C8590B21) {
              unint64_t v29 = 0x1642C8590B21642;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29) {
              double v30 = (char *)sub_10050F820((uint64_t)(a4 + 2), v29);
            }
            else {
              double v30 = 0;
            }
            double v31 = &v30[184 * v26];
            long long v32 = *v9;
            long long v33 = v9[1];
            long long v34 = v9[3];
            *((_OWORD *)v31 + 2) = v9[2];
            *((_OWORD *)v31 + 3) = v34;
            *(_OWORD *)double v31 = v32;
            *((_OWORD *)v31 + 1) = v33;
            long long v35 = v9[4];
            long long v36 = v9[5];
            long long v37 = v9[7];
            *((_OWORD *)v31 + 6) = v9[6];
            *((_OWORD *)v31 + 7) = v37;
            *((_OWORD *)v31 + 4) = v35;
            *((_OWORD *)v31 + 5) = v36;
            long long v38 = v9[8];
            long long v39 = v9[9];
            long long v40 = v9[10];
            *((void *)v31 + 22) = *((void *)v9 + 22);
            *((_OWORD *)v31 + 9) = v39;
            *((_OWORD *)v31 + 10) = v40;
            *((_OWORD *)v31 + 8) = v38;
            double v42 = (char *)*a4;
            uint64_t v41 = (char *)a4[1];
            double v43 = v31;
            if (v41 != *a4)
            {
              do
              {
                long long v44 = *(_OWORD *)(v41 - 184);
                long long v45 = *(_OWORD *)(v41 - 168);
                long long v46 = *(_OWORD *)(v41 - 152);
                *(_OWORD *)(v43 - 136) = *(_OWORD *)(v41 - 136);
                *(_OWORD *)(v43 - 152) = v46;
                *(_OWORD *)(v43 - 168) = v45;
                *(_OWORD *)(v43 - 184) = v44;
                long long v47 = *(_OWORD *)(v41 - 120);
                long long v48 = *(_OWORD *)(v41 - 104);
                long long v49 = *(_OWORD *)(v41 - 88);
                *(_OWORD *)(v43 - 72) = *(_OWORD *)(v41 - 72);
                *(_OWORD *)(v43 - 88) = v49;
                *(_OWORD *)(v43 - 104) = v48;
                *(_OWORD *)(v43 - 120) = v47;
                long long v50 = *(_OWORD *)(v41 - 56);
                long long v51 = *(_OWORD *)(v41 - 40);
                long long v52 = *(_OWORD *)(v41 - 24);
                *((void *)v43 - 1) = *((void *)v41 - 1);
                *(_OWORD *)(v43 - 24) = v52;
                *(_OWORD *)(v43 - 40) = v51;
                *(_OWORD *)(v43 - 56) = v50;
                v43 -= 184;
                v41 -= 184;
              }
              while (v41 != v42);
              uint64_t v41 = (char *)*a4;
            }
            double v25 = v31 + 184;
            *a4 = v43;
            a4[1] = v31 + 184;
            a4[2] = &v30[184 * v29];
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            long long v16 = *v9;
            long long v17 = v9[1];
            long long v18 = v9[3];
            *((_OWORD *)v14 + 2) = v9[2];
            *((_OWORD *)v14 + 3) = v18;
            *(_OWORD *)int v14 = v16;
            *((_OWORD *)v14 + 1) = v17;
            long long v19 = v9[4];
            long long v20 = v9[5];
            long long v21 = v9[7];
            *((_OWORD *)v14 + 6) = v9[6];
            *((_OWORD *)v14 + 7) = v21;
            *((_OWORD *)v14 + 4) = v19;
            *((_OWORD *)v14 + 5) = v20;
            long long v22 = v9[8];
            long long v23 = v9[9];
            long long v24 = v9[10];
            *((void *)v14 + 22) = *((void *)v9 + 22);
            *((_OWORD *)v14 + 9) = v23;
            *((_OWORD *)v14 + 10) = v24;
            *((_OWORD *)v14 + 8) = v22;
            double v25 = v14 + 184;
          }
          a4[1] = v25;
        }
      }
      unsigned int v9 = (long long *)((char *)v9 + 184);
    }
    while (v9 != v10);
  }
  sub_100538668((uint64_t)a4, (uint64_t)a4[1], *a3, a3[1], 0xD37A6F4DE9BD37A7 * ((a3[1] - *a3) >> 3));
  uint64_t result = 4294967290;
  if (a2[1] != *a2)
  {
    if (0xD37A6F4DE9BD37A7 * (((unsigned char *)a4[1] - (unsigned char *)*a4) >> 3) >= 3) {
      return 0;
    }
    else {
      return 4294967290;
    }
  }
  return result;
}

BOOL sub_100A06EC4(uint64_t a1, double **a2, double *a3)
{
  uint64_t v4 = *a2;
  long long v3 = a2[1];
  uint64_t v5 = qword_102418FF0;
  if (*a2 == v3)
  {
    double v7 = 0.0;
    double v6 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    double v7 = 0.0;
    do
    {
      double v8 = v4[8];
      double v9 = v4[9];
      double v10 = v4[7];
      double v11 = v4[12];
      if (v5 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D99A8);
      }
      double v12 = (v9 - v10) / (v8 - v10);
      uint64_t v13 = qword_102418FF8;
      double v14 = v11 / 3.5;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 68289539;
        int v24 = 0;
        __int16 v25 = 2082;
        unint64_t v26 = "";
        __int16 v27 = 2049;
        double v28 = v12;
        __int16 v29 = 2049;
        double v30 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,ComputeEfficiency\", \"fhr\":\"%{private}f\", \"mets\":\"%{private}f\"}", buf, 0x26u);
        uint64_t v5 = qword_102418FF0;
      }
      else
      {
        uint64_t v5 = -1;
      }
      if (v14 >= 0.0 && v14 < 20.0)
      {
        double v16 = v14 / v12;
        if (v14 / v12 > 20.0) {
          double v16 = 20.0;
        }
        double v6 = v6 + v16;
        double v7 = v7 + 1.0;
      }
      v4 += 23;
    }
    while (v4 != v3);
  }
  double v17 = v6 / v7;
  if (v7 <= 0.0) {
    double v17 = 0.0;
  }
  *a3 = v17;
  if (v5 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D99A8);
  }
  long long v18 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    long long v19 = "false";
    double v20 = *a3;
    *(_DWORD *)int buf = 68289539;
    if (v7 > 0.0) {
      long long v19 = "true";
    }
    int v24 = 0;
    __int16 v25 = 2082;
    unint64_t v26 = "";
    __int16 v27 = 2081;
    double v28 = *(double *)&v19;
    __int16 v29 = 2049;
    double v30 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,ComputeEfficiency\", \"canCalculateEfficiency\":%{private, location:escape_only}s, \"efficiency\":\"%{private}f\"}", buf, 0x26u);
  }
  return v7 > 0.0;
}

double sub_100A0714C(double a1, double a2, uint64_t a3, double **a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 == v5) {
    return 1.79769313e308;
  }
  double v7 = 0;
  double v8 = 0;
  double v9 = 0;
  double v10 = a1 * 0.959999979 + 0.00659999996;
  double v11 = a1 * 0.330000013 + -0.023;
  double v12 = 0.0;
  do
  {
    float v13 = v4[7];
    float v14 = v4[8];
    double v15 = v4[9];
    float v16 = v15;
    float v17 = (v14 - v16) / (v14 - v13);
    double v18 = v4[12] / v15;
    double v19 = v18 - (v10 + v11 * log((float)(1.0 - v17)));
    double v20 = (v4[1] - a2 + 18144000.0) / 36288000.0 + 0.5;
    if (v8 >= v7)
    {
      uint64_t v21 = ((char *)v8 - (char *)v9) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        sub_1001D7FD4();
      }
      if (v7 - v9 > v22) {
        unint64_t v22 = v7 - v9;
      }
      if ((unint64_t)((char *)v7 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23)
      {
        if (v23 >> 60) {
          sub_1001D7FA0();
        }
        int v24 = (char *)operator new(16 * v23);
      }
      else
      {
        int v24 = 0;
      }
      __int16 v25 = (double *)&v24[16 * v21];
      *__int16 v25 = v19;
      v25[1] = v20;
      if (v8 == v9)
      {
        __int16 v27 = v8;
        double v9 = (double *)&v24[16 * v21];
      }
      else
      {
        unint64_t v26 = (double *)&v24[16 * v21];
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v8 - 1);
          v26 -= 2;
          v8 -= 2;
        }
        while (v8 != v9);
        __int16 v27 = v9;
        double v9 = v26;
      }
      double v7 = (double *)&v24[16 * v23];
      double v8 = v25 + 2;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *double v8 = v19;
      v8[1] = v20;
      v8 += 2;
    }
    double v12 = v12 + v20;
    v4 += 23;
  }
  while (v4 != v5);
  if (v9 == v8)
  {
    double v33 = 1.79769313e308;
  }
  else
  {
    unint64_t v28 = ((char *)v8 - (char *)v9) >> 4;
    sub_100A07F70((unint64_t)v9, v8, 126 - 2 * __clz(v28), 1);
    double v29 = v12 - v9[1];
    uint64_t v30 = 0;
    if (v29 > v12 * 0.5)
    {
      double v31 = v9 + 3;
      do
      {
        LODWORD(v30) = v30 + 1;
        double v32 = *v31;
        v31 += 2;
        double v29 = v29 - v32;
      }
      while (v29 > v12 * 0.5);
      uint64_t v30 = v30;
    }
    double v33 = v9[2 * v30];
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D99A8);
    }
    long long v34 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134218240;
      unint64_t v38 = v28;
      __int16 v39 = 2048;
      double v40 = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "AlgoName,AdaptiveOutdoorPedestrianModel,numHistoricalResiduals,%ld,median,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D99A8);
      }
      long long v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::computeWeightedMedianOfResiduals(const std::vector<VO2MaxSummary> &, double, CFAbsoluteTime) const", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
  operator delete(v9);
  return v33;
}

void sub_100A07560(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A07584(float *a1, uint64_t *a2, int *a3, double a4, double a5, double a6)
{
  *a3 = 0;
  *(void *)uu1 = 0;
  uint64_t v81 = 0;
  double v9 = a5 * 0.2 + -6.4;
  double v10 = 0.0;
  if (v9 < 0.0) {
    double v9 = 0.0;
  }
  if (v9 <= 1.0) {
    double v11 = v9;
  }
  else {
    double v11 = 1.0;
  }
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  if (*a2 != v13)
  {
    int v14 = 0;
    double v79 = a4 * 0.959999979 + 0.00659999996;
    double v77 = 1.0 - v11;
    double v78 = a4 * 0.330000013 + -0.023;
    double v76 = v11;
    double v15 = ((1.0 - v11) * 2.5 + v11 * 4.0) * 3.5;
    double v16 = 0.0;
    double v17 = 0.0;
    while (1)
    {
      double v18 = *(double *)(v12 + 72);
      double v19 = 0.0;
      if (v18 > 0.0) {
        double v19 = *(double *)(v12 + 96) / v18;
      }
      float v20 = *(double *)(v12 + 56);
      float v21 = *(double *)(v12 + 64);
      float v22 = v18;
      float v23 = (v21 - v22) / (v21 - v20);
      long double v24 = (float)(1.0 - v23);
      double v25 = v19 - (v79 + v78 * log(v24));
      if (a6 == 1.79769313e308) {
        break;
      }
      double v26 = 1.0;
      double v27 = v76;
      if (v25 - a6 >= -0.02)
      {
        BOOL v29 = v25 - a6 > 0.02;
        goto LABEL_15;
      }
      double v28 = 0.0;
      BOOL v29 = 1;
LABEL_28:
      if (v24 >= 0.3) {
        double v39 = v26;
      }
      else {
        double v39 = 0.0;
      }
      double v40 = (v77 * v39 + v24 * v27) * v28;
      if ((*(_DWORD *)(v12 + 180) == 3 || *(void *)(v12 + 48) > 0x31uLL) && *(double *)(v12 + 96) > v15) {
        double v43 = v40;
      }
      else {
        double v43 = 0.0;
      }
      if (v43 > 0.0)
      {
        ++v14;
        if (uuid_compare(uu1, (const unsigned __int8 *)(v12 + 24)))
        {
          uuid_copy(uu1, (const unsigned __int8 *)(v12 + 24));
          ++*a3;
        }
      }
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022D99A8);
      }
      long long v44 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v45 = *(void *)(v12 + 8);
        uint64_t v46 = *(void *)(v12 + 48);
        uint64_t v47 = *(void *)(v12 + 56);
        uint64_t v48 = *(void *)(v12 + 64);
        uint64_t v49 = *(void *)(v12 + 72);
        uint64_t v50 = *(void *)(v12 + 96);
        uint64_t v51 = *(void *)(v12 + 80);
        uint64_t v52 = *(void *)(v12 + 112);
        int v53 = *(_DWORD *)(v12 + 180);
        *(_DWORD *)int buf = 134221056;
        unint64_t v103 = v45;
        __int16 v104 = 2048;
        *(void *)__int16 v105 = v46;
        *(_WORD *)&v105[8] = 2048;
        *(void *)unint64_t v106 = v47;
        *(_WORD *)&std::string::value_type v106[8] = 2048;
        *(void *)double v107 = v48;
        *(_WORD *)&v107[8] = 2048;
        *(void *)double v108 = v49;
        *(_WORD *)&v108[8] = 2048;
        *(void *)double v109 = v50;
        *(_WORD *)&v109[8] = 2048;
        *(void *)uint64_t v110 = v51;
        *(_WORD *)&std::string::value_type v110[8] = 2048;
        uint64_t v111 = v52;
        __int16 v112 = 2048;
        long double v113 = v24;
        __int16 v114 = 2048;
        double v115 = v25;
        __int16 v116 = 1024;
        BOOL v117 = v29;
        __int16 v118 = 2048;
        double v119 = v43;
        __int16 v120 = 1024;
        int v121 = v53;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "VO2Max,AdaptiveOutdoorPedestrianModel,Longitudinal Estimate,ts,%.9f,size,%lld,hrMin,%f,hrMax,%f,hrMean,%f,vo2Mean,%f,hrConfidenceMean,%f,gradeMean,%f,oneMinusFHR,%f,residual,%f,failHistResidCheck,%d,confidence,%f,sessionType,%d", buf, 0x7Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022D99A8);
        }
        unint64_t v54 = *(void *)(v12 + 8);
        uint64_t v55 = *(void *)(v12 + 48);
        uint64_t v56 = *(void *)(v12 + 56);
        uint64_t v57 = *(void *)(v12 + 64);
        uint64_t v58 = *(void *)(v12 + 72);
        uint64_t v59 = *(void *)(v12 + 96);
        uint64_t v60 = *(void *)(v12 + 80);
        uint64_t v61 = *(void *)(v12 + 112);
        int v62 = *(_DWORD *)(v12 + 180);
        int v82 = 134221056;
        unint64_t v83 = v54;
        __int16 v84 = 2048;
        *(void *)uint64_t v85 = v55;
        *(_WORD *)&v85[8] = 2048;
        *(void *)uint64_t v86 = v56;
        *(_WORD *)&v86[8] = 2048;
        *(void *)int v87 = v57;
        *(_WORD *)&v87[8] = 2048;
        *(void *)unint64_t v88 = v58;
        *(_WORD *)&v88[8] = 2048;
        *(void *)unint64_t v89 = v59;
        *(_WORD *)&v89[8] = 2048;
        *(void *)unint64_t v90 = v60;
        *(_WORD *)&v90[8] = 2048;
        uint64_t v91 = v61;
        __int16 v92 = 2048;
        long double v93 = v24;
        __int16 v94 = 2048;
        double v95 = v25;
        __int16 v96 = 1024;
        BOOL v97 = v29;
        __int16 v98 = 2048;
        double v99 = v43;
        __int16 v100 = 1024;
        int v101 = v62;
        double v63 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::computeLongitudinalEstimate(const std::vector<VO2MaxSummary> &, double, double, double, uint32_t &)::(anonymous class)::operator()(const VO2MaxSummary &) const", "%s\n", v63);
        if (v63 != (char *)buf) {
          free(v63);
        }
      }
      double v16 = v16 + v43 * v25;
      double v17 = v17 + v43;
      v12 += 184;
      if (v12 == v13)
      {
        double v10 = v16 / (v17 + 2.22044605e-16);
        goto LABEL_55;
      }
    }
    BOOL v29 = 0;
    double v26 = 1.0;
    double v27 = v76;
LABEL_15:
    double v28 = 0.0;
    if (v25 >= -0.07 && v25 <= 0.1 && !v29)
    {
      uint64_t v30 = 0;
      double v31 = (double *)qword_101D563E0;
      do
      {
        if (*v31 >= *(double *)(v12 + 80)) {
          break;
        }
        ++v30;
        v31 += 2;
      }
      while (v30 != 7);
      uint64_t v32 = 0;
      double v33 = *(double *)&qword_101D563E0[2 * v30 + 1];
      long long v34 = (double *)qword_101D56450;
      do
      {
        if (*v34 >= (double)*(unint64_t *)(v12 + 48)) {
          break;
        }
        ++v32;
        v34 += 2;
      }
      while (v32 != 9);
      uint64_t v35 = 0;
      double v36 = v33 * *(double *)&qword_101D56450[2 * v32 + 1];
      double v37 = fabs(*(double *)(v12 + 112));
      unint64_t v38 = (double *)qword_101D564E0;
      do
      {
        if (*v38 >= v37) {
          break;
        }
        ++v35;
        v38 += 2;
      }
      while (v35 != 5);
      BOOL v29 = 0;
      double v28 = v36 * *(double *)&qword_101D564E0[2 * v35 + 1];
    }
    goto LABEL_28;
  }
  int v14 = 0;
LABEL_55:
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D99A8);
  }
  unint64_t v64 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v65 = 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3);
    int v66 = *a3;
    double v67 = *a1;
    double v68 = a1[1];
    *(_DWORD *)int buf = 134219776;
    unint64_t v103 = v65;
    __int16 v104 = 1024;
    *(_DWORD *)__int16 v105 = v14;
    *(_WORD *)&v105[4] = 1024;
    *(_DWORD *)&v105[6] = v66;
    *(_WORD *)unint64_t v106 = 2048;
    *(double *)&v106[2] = a6;
    *(_WORD *)double v107 = 2048;
    *(double *)&v107[2] = v67;
    *(_WORD *)double v108 = 2048;
    *(double *)&v108[2] = v68;
    *(_WORD *)double v109 = 2048;
    *(double *)&v109[2] = v10;
    *(_WORD *)uint64_t v110 = 2048;
    *(void *)&v110[2] = 0x3FB999999999999ALL;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "VO2Max,AdaptiveOutdoorPedestrianModel,Longitudinal Estimate,numClusters,%lu,numClustersContr,%u,numWorkoutsContr,%u,medianResidual,%f,hrMin,%f,hrMax,%f,meanResidual,%f,clusterResidualBoundsMax,%f", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D99A8);
    }
    unint64_t v69 = 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3);
    int v70 = *a3;
    double v71 = *a1;
    double v72 = a1[1];
    int v82 = 134219776;
    unint64_t v83 = v69;
    __int16 v84 = 1024;
    *(_DWORD *)uint64_t v85 = v14;
    *(_WORD *)&v85[4] = 1024;
    *(_DWORD *)&v85[6] = v70;
    *(_WORD *)uint64_t v86 = 2048;
    *(double *)&v86[2] = a6;
    *(_WORD *)int v87 = 2048;
    *(double *)&v87[2] = v71;
    *(_WORD *)unint64_t v88 = 2048;
    *(double *)&v88[2] = v72;
    *(_WORD *)unint64_t v89 = 2048;
    *(double *)&v89[2] = v10;
    *(_WORD *)unint64_t v90 = 2048;
    *(void *)&v90[2] = 0x3FB999999999999ALL;
    double v73 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLVO2MaxModel::AdaptiveOutdoorPedestrianModel::computeLongitudinalEstimate(const std::vector<VO2MaxSummary> &, double, double, double, uint32_t &) const", "%s\n", v73);
    if (v73 != (char *)buf) {
      free(v73);
    }
  }
}

double sub_100A07E38(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    int v7 = *(_DWORD *)(a4 + 104);
    do
    {
      double v8 = *(double *)v5 - a1;
      if (v7 != 3 && v8 <= 120.0) {
        *(_DWORD *)(v5 + 64) = 0;
      }
      if (a5 == 17 && v8 >= 2700.0) {
        *(_DWORD *)(v5 + 64) = 0;
      }
      v5 += 72;
    }
    while (v5 != v6);
  }
  double result = 0.06;
  *(_OWORD *)(a4 + 120) = xmmword_101D563D0;
  return result;
}

void sub_100A07EA4(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_100A07ED4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000DA584(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_100A07F54(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A07F70(unint64_t a1, double *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                double v35 = *(a2 - 2);
                long long v34 = a2 - 2;
                if (v35 < *(double *)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *(_OWORD *)v34;
                  *(_OWORD *)long long v34 = v87;
                }
                break;
              case 3uLL:
                sub_100A086AC((double *)v10, (double *)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                sub_100A0897C((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), (unint64_t *)a2 - 2);
                break;
              case 5uLL:
                double v36 = (long long *)(v10 + 16);
                double v37 = (long long *)(v10 + 32);
                unint64_t v38 = (long long *)(v10 + 48);
                sub_100A0897C((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), (unint64_t *)(v10 + 48));
                double v40 = *(a2 - 2);
                double v39 = a2 - 2;
                if (v40 < *(double *)(v10 + 48))
                {
                  long long v41 = *v38;
                  *unint64_t v38 = *(_OWORD *)v39;
                  *(_OWORD *)double v39 = v41;
                  if (*(double *)v38 < *(double *)v37)
                  {
                    long long v42 = *v37;
                    *double v37 = *v38;
                    *unint64_t v38 = v42;
                    if (*(double *)v37 < *(double *)v36)
                    {
                      long long v43 = *v36;
                      *double v36 = *v37;
                      *double v37 = v43;
                      if (*(double *)(v10 + 16) < *(double *)v10)
                      {
                        long long v88 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v36;
                        *double v36 = v88;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            long long v44 = (double *)(v10 + 16);
            BOOL v46 = (double *)v10 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                unint64_t v48 = v10;
                do
                {
                  uint64_t v49 = v44;
                  double v50 = *(double *)(v48 + 16);
                  if (v50 < *(double *)v48)
                  {
                    uint64_t v51 = *(void *)(v48 + 24);
                    uint64_t v52 = v47;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v52 + 16) = *(_OWORD *)(v10 + v52);
                      if (!v52) {
                        break;
                      }
                      double v53 = *(double *)(v10 + v52 - 16);
                      v52 -= 16;
                      if (v50 >= v53)
                      {
                        uint64_t v54 = v10 + v52 + 16;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v54 = v10;
LABEL_81:
                    *(double *)uint64_t v54 = v50;
                    *(void *)(v54 + 8) = v51;
                  }
                  long long v44 = v49 + 2;
                  v47 += 16;
                  unint64_t v48 = (unint64_t)v49;
                }
                while (v49 + 2 != a2);
              }
            }
            else if (!v46)
            {
              do
              {
                unint64_t v79 = (unint64_t)v44;
                double v80 = *(double *)(a1 + 16);
                if (v80 < *(double *)a1)
                {
                  uint64_t v81 = *(void *)(a1 + 24);
                  int v82 = v44;
                  do
                  {
                    *(_OWORD *)int v82 = *((_OWORD *)v82 - 1);
                    double v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (v80 < v83);
                  *int v82 = v80;
                  *((void *)v82 + 1) = v81;
                }
                v44 += 2;
                a1 = v79;
              }
              while ((double *)(v79 + 16) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((double *)v10 != a2)
            {
              int64_t v55 = (v12 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  uint64_t v59 = (double *)(v10 + 16 * v58);
                  if (2 * v57 + 2 < (uint64_t)v12 && *v59 < v59[2])
                  {
                    v59 += 2;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  uint64_t v60 = (double *)(v10 + 16 * v57);
                  double v61 = *v60;
                  if (*v59 >= *v60)
                  {
                    uint64_t v62 = *((void *)v60 + 1);
                    do
                    {
                      double v63 = v60;
                      uint64_t v60 = v59;
                      *(_OWORD *)double v63 = *(_OWORD *)v59;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v64 = 2 * v58;
                      uint64_t v58 = (2 * v58) | 1;
                      uint64_t v59 = (double *)(v10 + 16 * v58);
                      uint64_t v65 = v64 + 2;
                      if (v65 < (uint64_t)v12 && *v59 < v59[2])
                      {
                        v59 += 2;
                        uint64_t v58 = v65;
                      }
                    }
                    while (*v59 >= v61);
                    *uint64_t v60 = v61;
                    *((void *)v60 + 1) = v62;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v89 = *(_OWORD *)v10;
                double v68 = (double *)v10;
                do
                {
                  unint64_t v69 = v68;
                  v68 += 2 * v67 + 2;
                  uint64_t v70 = 2 * v67;
                  uint64_t v67 = (2 * v67) | 1;
                  uint64_t v71 = v70 + 2;
                  if (v71 < v66 && *v68 < v68[2])
                  {
                    v68 += 2;
                    uint64_t v67 = v71;
                  }
                  *(_OWORD *)unint64_t v69 = *(_OWORD *)v68;
                }
                while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if (v68 == a2)
                {
                  *(_OWORD *)double v68 = v89;
                }
                else
                {
                  *(_OWORD *)double v68 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v72 = (uint64_t)v68 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    double v74 = (double *)(v10 + 16 * v73);
                    double v75 = *v68;
                    if (*v74 < *v68)
                    {
                      uint64_t v76 = *((void *)v68 + 1);
                      do
                      {
                        double v77 = v68;
                        double v68 = v74;
                        *(_OWORD *)double v77 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        double v74 = (double *)(v10 + 16 * v73);
                      }
                      while (*v74 < v75);
                      *double v68 = v75;
                      *((void *)v68 + 1) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          int v14 = (double *)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            sub_100A086AC((double *)a1, (double *)(a1 + 16 * (v12 >> 1)), a2 - 2);
            sub_100A086AC((double *)(a1 + 16), v14 - 2, a2 - 4);
            sub_100A086AC((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v13), a2 - 6);
            sub_100A086AC(v14 - 2, v14, (double *)(a1 + 16 + 16 * v13));
            long long v84 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)int v14 = v84;
          }
          else
          {
            sub_100A086AC((double *)(a1 + 16 * (v12 >> 1)), (double *)a1, a2 - 2);
          }
          --a3;
          double v15 = *(double *)a1;
          if ((a4 & 1) != 0 || *(double *)(a1 - 16) < v15) {
            break;
          }
          if (v15 >= *(a2 - 2))
          {
            unint64_t v28 = a1 + 16;
            do
            {
              unint64_t v10 = v28;
              if (v28 >= (unint64_t)a2) {
                break;
              }
              v28 += 16;
            }
            while (v15 >= *(double *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              double v27 = *(double *)(v10 + 16);
              v10 += 16;
            }
            while (v15 >= v27);
          }
          BOOL v29 = a2;
          if (v10 < (unint64_t)a2)
          {
            BOOL v29 = a2;
            do
            {
              double v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v15 < v30);
          }
          uint64_t v31 = *(void *)(a1 + 8);
          while (v10 < (unint64_t)v29)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v29;
            *(_OWORD *)BOOL v29 = v86;
            do
            {
              double v32 = *(double *)(v10 + 16);
              v10 += 16;
            }
            while (v15 >= v32);
            do
            {
              double v33 = *(v29 - 2);
              v29 -= 2;
            }
            while (v15 < v33);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(double *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v31;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 8);
        do
        {
          double v18 = *(double *)(a1 + v16 + 16);
          v16 += 16;
        }
        while (v18 < v15);
        unint64_t v19 = a1 + v16;
        float v20 = a2;
        if (v16 == 16)
        {
          float v20 = a2;
          do
          {
            if (v19 >= (unint64_t)v20) {
              break;
            }
            double v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v15);
        }
        else
        {
          do
          {
            double v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v15);
        }
        unint64_t v10 = a1 + v16;
        if (v19 < (unint64_t)v20)
        {
          float v23 = v20;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v23;
            *(_OWORD *)float v23 = v85;
            do
            {
              double v24 = *(double *)(v10 + 16);
              v10 += 16;
            }
            while (v24 < v15);
            do
            {
              double v25 = *(v23 - 2);
              v23 -= 2;
            }
            while (v25 >= v15);
          }
          while (v10 < (unint64_t)v23);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(double *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v17;
        if (v19 >= (unint64_t)v20) {
          break;
        }
LABEL_30:
        sub_100A07F70(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v26 = sub_100A08750(a1, v10 - 16);
      if (sub_100A08750(v10, (uint64_t)a2)) {
        break;
      }
      if (!v26) {
        goto LABEL_30;
      }
    }
    a2 = (double *)(v10 - 16);
    if (!v26) {
      continue;
    }
    break;
  }
}

double *sub_100A086AC(double *result, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        long long v7 = *(_OWORD *)result;
        *(_OWORD *)double result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *(_OWORD *)result;
      *(_OWORD *)double result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *(_OWORD *)result;
      *(_OWORD *)double result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_100A08750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        _OWORD *v6 = v7;
      }
      return result;
    case 3:
      sub_100A086AC((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_100A0897C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1;
    case 5:
      uint64_t v17 = (long long *)(a1 + 16);
      double v18 = (long long *)(a1 + 32);
      unint64_t v19 = (long long *)(a1 + 48);
      sub_100A0897C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a1 + 48));
      double v21 = *(double *)(a2 - 16);
      float v20 = (long long *)(a2 - 16);
      if (v21 < *(double *)(a1 + 48))
      {
        long long v22 = *v19;
        *unint64_t v19 = *v20;
        *float v20 = v22;
        if (*(double *)v19 < *(double *)v18)
        {
          long long v23 = *v18;
          *double v18 = *v19;
          *unint64_t v19 = v23;
          if (*(double *)v18 < *(double *)v17)
          {
            long long v24 = *v17;
            *uint64_t v17 = *v18;
            *double v18 = v24;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      long long v8 = (double *)(a1 + 32);
      sub_100A086AC((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        double v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(double *)uint64_t v16 = v12;
      *(void *)(v16 + 8) = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    long long v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 sub_100A0897C(double *a1, double *a2, double *a3, unint64_t *a4)
{
  sub_100A086AC(a1, a2, a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < *a1)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void sub_100A08A1C()
{
}

void sub_100A08A60()
{
}

uint64_t sub_100A08A84()
{
  if (qword_10247F8B0 != -1) {
    dispatch_once(&qword_10247F8B0, &stru_1022D99C8);
  }
  return qword_10248A7E8;
}

void sub_100A08ACC(uint64_t a1)
{
}

void sub_100A08B9C(_Unwind_Exception *a1)
{
  double v3 = (std::__shared_weak_count *)v1[11];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1009D1DE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A08BD4(double *a1)
{
  if (sub_100A0A5A4())
  {
    CFStringRef v30 = @"name";
    CFStringRef v31 = @"gyro";
    CFStringRef v28 = @"IOPropertyMatch";
    BOOL v29 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1]);
    CFProperty = (void *)IORegistryEntryCreateCFProperty(MatchingService, @"gyro-interrupt-calibration", kCFAllocatorDefault, 0);
    IOObjectRelease(MatchingService);
    if (CFProperty)
    {
      CFTypeID v4 = CFGetTypeID(CFProperty);
      if (v4 == CFDataGetTypeID())
      {
        long long v5 = [CFProperty bytes];
        id v6 = [CFProperty length];
        if ((unint64_t)v6 > 7)
        {
          if (*v5)
          {
            unsigned int v12 = (unsigned __int16)v5[2];
            unsigned int v13 = (unsigned __int16)v5[4];
            if (qword_1024190B0 != -1) {
              dispatch_once(&qword_1024190B0, &stru_1022D9A80);
            }
            uint64_t v14 = off_1024190B8;
            if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int buf = 67240448;
              *(_DWORD *)BOOL v26 = v12;
              *(_WORD *)&v26[4] = 1026;
              *(_DWORD *)&v26[6] = v13;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "gyro-interrupt-calibration,dt,%{public}u,rate,%{public}u", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_1022D9A80);
              }
              long long v22 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v22);
              if (v22 != (char *)buf) {
                free(v22);
              }
            }
            sub_100103240();
            int v15 = sub_1000B5AD4();
            if (!v13 || v15 == 74 || v15 == 75)
            {
              if (v12 >= 0x5DC) {
                unsigned int v13 = 200;
              }
              else {
                unsigned int v13 = 800;
              }
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_1022D9A80);
              }
              uint64_t v16 = off_1024190B8;
              if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 67240192;
                *(_DWORD *)BOOL v26 = v13;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Manually set gyro-interrupt-calibration to %{public}u", buf, 8u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190B0 != -1) {
                  dispatch_once(&qword_1024190B0, &stru_1022D9A80);
                }
                long long v24 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v24);
                if (v24 != (char *)buf) {
                  free(v24);
                }
              }
            }
            *a1 = (double)v12 * 0.000001 * (double)v13;
            if (qword_1024190B0 != -1) {
              dispatch_once(&qword_1024190B0, &stru_1022D9A80);
            }
            uint64_t v17 = off_1024190B8;
            if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
            {
              double v18 = *a1;
              *(_DWORD *)int buf = 67240704;
              *(_DWORD *)BOOL v26 = v13;
              *(_WORD *)&v26[4] = 1026;
              *(_DWORD *)&v26[6] = v12;
              LOWORD(v27[0]) = 2050;
              *(double *)((char *)v27 + 2) = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "dt at rate %{public}u Hz = %{public}u us, scaleFactor = %{public}f", buf, 0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_1022D9A80);
              }
              long long v23 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v23);
              if (v23 != (char *)buf) {
                free(v23);
              }
            }
            uint64_t v9 = 1;
            goto LABEL_19;
          }
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_1022D9A80);
          }
          unint64_t v19 = off_1024190B8;
          if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 67240448;
            *(_DWORD *)BOOL v26 = 0;
            *(_WORD *)&v26[4] = 1026;
            *(_DWORD *)&v26[6] = 1;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "gyro-interrupt-calibration version (%{public}u) less than expected version (%{public}u)", buf, 0xEu);
          }
          uint64_t v9 = 0;
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_19;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190B0 == -1) {
            goto LABEL_50;
          }
        }
        else
        {
          id v7 = v6;
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_1022D9A80);
          }
          long long v8 = off_1024190B8;
          if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 134349312;
            *(void *)BOOL v26 = v7;
            *(_WORD *)&v26[8] = 1026;
            v27[0] = 8;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "gyro-interrupt-calibration length %{public}lu less than expected length %{public}u", buf, 0x12u);
          }
          uint64_t v9 = 0;
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_19;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190B0 == -1)
          {
LABEL_50:
            float v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v20);
            if (v20 != (char *)buf) {
              free(v20);
            }
            uint64_t v9 = 0;
LABEL_19:
            CFRelease(CFProperty);
            return v9;
          }
        }
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
        goto LABEL_50;
      }
    }
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    uint64_t v10 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Cannot get gyro-interrupt-calibration property", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
      }
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    uint64_t v9 = 0;
    if (CFProperty) {
      goto LABEL_19;
    }
  }
  else
  {
    *a1 = 1.0;
    return 1;
  }
  return v9;
}

void *sub_100A09564(uint64_t a1)
{
  *(void *)a1 = &off_1022D99F8;
  *(void *)(a1 + 64) = 0;
  sub_100A095D0(a1, *(_DWORD *)(a1 + 32));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4((void *)a1);
}

BOOL sub_100A095D0(uint64_t a1, int a2)
{
  BOOL v4 = sub_100A09754(a1);
  if (v4)
  {
    double v6 = *(double *)(a1 + 64);
    double v5 = *(double *)(a1 + 72);
    if (v6 == 0.0 || (v5 != 0.0 ? (BOOL v7 = v5 < v6) : (BOOL v7 = 0), v7)) {
      double v6 = *(double *)(a1 + 72);
    }
    (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), @"GyroProperties", &off_102397518);
    double v9 = 0.0;
    if (v6 != 1.79769313e308) {
      double v9 = v6;
    }
    sub_100A29D64(*(void *)(a1 + 80), v9);
    if ((a2 & 0x80000000) == 0)
    {
      (*(void (**)(void, const __CFString *, NSNumber *))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), @"GyroExtLevelTriggerSync", +[NSNumber numberWithInt:a2 != 0]);
      *(_DWORD *)(a1 + 32) = a2;
    }
    uint64_t v11 = 0x3F8EB851EB851EB8;
    sub_100A09B60(a1, (double *)&v11);
  }
  return v4;
}

void sub_100A0971C(uint64_t a1)
{
  sub_100A09564(a1);

  operator delete();
}

BOOL sub_100A09754(uint64_t a1)
{
  if (!*(void *)(a1 + 80) && (sub_10074157C() & 2) != 0)
  {
    uint64_t v2 = (uint64_t *)sub_100A26784();
    uint64_t v13 = 0x90000FF00;
    char v14 = 0;
    sub_101A46D60(v2, (uint64_t)&v13, (uint64_t *)buf);
    long long v3 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    BOOL v4 = *(std::__shared_weak_count **)(a1 + 88);
    *(_OWORD *)(a1 + 80) = v3;
    if (v4)
    {
      sub_1000DB0A0(v4);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    id v5 = [&off_1023974F0 mutableCopy];
    unsigned int v12 = 0;
    uint64_t v6 = sub_1000D3E78();
    sub_10006B564(v6, buf);
    int v7 = sub_1004D0870(*(uint64_t *)buf, "IMULocationID", &v12);
    if (v12) {
      int v8 = 1;
    }
    else {
      int v8 = v7;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v8)
    {
      [v5 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v12)] forKey:@"LocationID"];
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022D9A60);
      }
      double v9 = qword_1024190C8;
      if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting Gyro matching properties with IMULocationID %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022D9A60);
        }
        int v15 = 67109120;
        unsigned int v16 = v12;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGyro::openHidDevice()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    sub_100A29EB0(*(void *)(a1 + 80), v5);
    sub_100A2932C(*(uint64_t **)(a1 + 80), (uint64_t)sub_100A09A40, a1);
  }
  return *(void *)(a1 + 80) != 0;
}

void sub_100A09A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t sub_100A09A40(uint64_t a1)
{
  uint64_t result = IOHIDEventGetType();
  if (result == 20)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v3 = v3;
    v9[0] = *(float *)&v3;
    IOHIDEventGetFloatValue();
    *(float *)&double v4 = v4;
    v9[1] = *(float *)&v4;
    IOHIDEventGetFloatValue();
    *(float *)&double v5 = v5;
    unsigned char v9[2] = *(float *)&v5;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v8 = sub_1000D3D90(TimeStamp);
    unsigned int IntegerValue = IOHIDEventGetIntegerValue();
    return sub_100A0A7DC(a1, v9, &v8, IntegerValue);
  }
  return result;
}

double sub_100A09AFC(uint64_t a1, double *a2)
{
  if ((sub_1000A16E8() & 1) != 0 || (sub_1000A16E8() & 2) != 0)
  {
    double result = *(double *)(a1 + 40);
    return result * *a2;
  }
  double result = *a2;
  if (*a2 <= 0.01 && result > 0.0)
  {
    a2 = (double *)(a1 + 40);
    return result * *a2;
  }
  return result;
}

BOOL sub_100A09B60(uint64_t a1, double *a2)
{
  BOOL v4 = sub_100A09754(a1);
  if (v4)
  {
    uint64_t v5 = sub_100A29E04(*(void *)(a1 + 80), *a2);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    uint64_t v6 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 134349056;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting gyro batch interval to: %{public}ld us", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGyro::setGyroBatchInterval(const CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v4;
}

BOOL sub_100A09D30(uint64_t a1, int a2)
{
  BOOL v4 = sub_100A09754(a1);
  if (v4)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    uint64_t v5 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67240192;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting gyro low noise mode: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGyro::setLowNoiseMode(BOOL)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v6 = &kCFBooleanTrue;
    if (!a2) {
      uint64_t v6 = &kCFBooleanFalse;
    }
    (*(void (**)(void, const __CFString *, const CFBooleanRef))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), @"GyroForcePWMMode", *v6);
  }
  return v4;
}

uint64_t sub_100A09F44(uint64_t a1, float *a2)
{
  uint64_t result = sub_100A09754();
  if (result)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void, const __CFString *))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), @"AppleVoltageDictionary");
    id v6 = [v5 objectForKeyedSubscript:@"GYRO_TEMP"];
    [v6 floatValue];
    *a2 = v7 / 100.0;

    return v6 != 0;
  }
  return result;
}

double sub_100A09FDC(uint64_t a1, int a2, double *a3)
{
  if (a2 == 1)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    char v14 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      double v15 = *a3;
      *(_DWORD *)int buf = 134349056;
      double v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Setting gyro temperature update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
      }
      double v20 = *a3;
      *(_DWORD *)BOOL v29 = 134349056;
      *(double *)&v29[4] = v20;
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    double v16 = *a3;
    if (*a3 < 1.0 && v16 != 0.0) {
      double v16 = 1.0;
    }
    *(double *)(a1 + 72) = v16;
    sub_100A095D0(a1, *(_DWORD *)(a1 + 32));
    return *(double *)(a1 + 72);
  }
  else if (a2)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    double v18 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67240192;
      LODWORD(v23) = a2;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Unrecognized gyro notification %{public}d", buf, 8u);
    }
    double v6 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
      }
      *(_DWORD *)BOOL v29 = 67240192;
      *(_DWORD *)&v29[4] = a2;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
      goto LABEL_41;
    }
  }
  else
  {
    *(double *)(a1 + 64) = *a3;
    sub_100A095D0(a1, *(_DWORD *)(a1 + 32));
    double v6 = sub_100A09AFC(a1, (double *)(a1 + 64));
    if (*(unsigned char *)(a1 + 96))
    {
      *(void *)BOOL v29 = off_1022E6878;
      *(void *)&v29[8] = CFAbsoluteTimeGetCurrent();
      float v7 = v6;
      *(float *)&v29[20] = v7;
      uint64_t v8 = sub_101282D9C();
      sub_10128431C(v8, (uint64_t)v29);
      sub_10170140C(buf);
      sub_101726D38((uint64_t)buf);
      v28 |= 1u;
      uint64_t v26 = *(void *)&v29[8];
      uint64_t v9 = v27;
      *(unsigned char *)(v27 + 12) |= 1u;
      *(float *)(v9 + 8) = v7;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022D9AA0);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)buf);
      }
      sub_101706914((PB::Base *)buf);
    }
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    int v10 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      double v11 = *a3;
      *(_DWORD *)int buf = 134349312;
      double v23 = v11;
      __int16 v24 = 2050;
      double v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Set gyro data update interval to %{public}f,dt,%{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
      }
      double v12 = *a3;
      *(_DWORD *)BOOL v29 = 134349312;
      *(double *)&v29[4] = v12;
      *(_WORD *)&v29[12] = 2050;
      *(double *)&v29[14] = v6;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
LABEL_41:
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v6;
}

void sub_100A0A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100A0A5A4()
{
  if (qword_10247F8C0 != -1) {
    dispatch_once(&qword_10247F8C0, &stru_1022D9A28);
  }
  sub_10006ACBC(v4, "UseGyroInterruptCalForDtScale", (unsigned __int8 *)&byte_10247F8B8, 0);
  int v0 = v4[1];
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022D9A80);
  }
  uint64_t v1 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109632;
    int v12 = byte_10247F8B8;
    __int16 v13 = 1024;
    int v14 = v4[0];
    __int16 v15 = 1024;
    int v16 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "UseInterruptCal,platformDefault,%u,overrideSet,%u,final,%u", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    int v5 = 67109632;
    int v6 = byte_10247F8B8;
    __int16 v7 = 1024;
    int v8 = v4[0];
    __int16 v9 = 1024;
    int v10 = v0;
    double v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLGyro::useInterruptCalibrationForScaleFactor()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v0 != 0;
}

uint64_t sub_100A0A7DC(uint64_t a1, float *a2, double *a3, unsigned int a4)
{
  double v8 = *(double *)(a1 + 72);
  double v9 = *a3;
  if (v8 > 0.0 && v9 > v8 + *(double *)(a1 + 48))
  {
    double v50 = *a3;
    int v10 = sub_100A09F44(a1, (float *)&v51);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022D9AC0);
    }
    double v11 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446466;
      double v68 = COERCE_DOUBLE("CLGyro");
      __int16 v69 = 1026;
      LODWORD(v70) = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Type,%{public}s,ret=%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022D9AC0);
      }
      *(_DWORD *)int64_t v55 = 136446466;
      *(void *)&v55[4] = "CLGyro";
      *(_WORD *)&v55[12] = 1026;
      *(_DWORD *)&v55[14] = v10;
      unint64_t v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    if (v10)
    {
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022D9AC0);
      }
      int v12 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        double v68 = COERCE_DOUBLE("GyroTemperature");
        __int16 v69 = 2050;
        double v70 = *(float *)&v51;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Type,%{public}s,temperature,%{public}f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_1022D9AC0);
        }
        *(_DWORD *)int64_t v55 = 136446466;
        *(void *)&v55[4] = "GyroTemperature";
        *(_WORD *)&v55[12] = 2050;
        *(double *)&v55[14] = *(float *)&v51;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v49);
        if (v49 != (char *)buf) {
          free(v49);
        }
      }
      if (*(unsigned char *)(a1 + 96))
      {
        *(void *)int64_t v55 = off_1022E67C8;
        *(void *)&v55[8] = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)&v55[20] = v51;
        uint64_t v13 = sub_101282D9C();
        sub_10128431C(v13, (uint64_t)v55);
        sub_10170140C(buf);
        sub_101726B88((uint64_t)buf);
        v88 |= 1u;
        uint64_t v85 = *(void *)&v55[8];
        uint64_t v14 = v87;
        int v15 = v51;
        *(unsigned char *)(v87 + 16) |= 2u;
        *(_DWORD *)(v14 + 12) = v15;
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_1022D9AA0);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)buf);
        }
        sub_101706914((PB::Base *)buf);
      }
      sub_1000E7BA0(a1, 1, (uint64_t)&v50, 16);
    }
    *(double *)(a1 + 48) = *a3;
    double v9 = *a3;
  }
  double v50 = v9;
  uint64_t v51 = *(void *)a2;
  int v52 = *((_DWORD *)a2 + 2);
  __int16 v53 = HIWORD(a4);
  BOOL v54 = (~a4 & 0x300) == 0;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022D9A80);
  }
  int v16 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
  {
    float v17 = *a2;
    float v18 = a2[1];
    float v19 = a2[2];
    double v20 = *a3;
    double v21 = sub_1000D3E50();
    *(_DWORD *)int buf = 134220032;
    double v68 = v17;
    __int16 v69 = 2048;
    double v70 = v18;
    __int16 v71 = 2048;
    double v72 = v19;
    __int16 v73 = 2048;
    double v74 = v20;
    __int16 v75 = 1024;
    unsigned int v76 = a4;
    __int16 v77 = 1024;
    unsigned int v78 = HIWORD(a4) % 3u;
    __int16 v79 = 1024;
    int v80 = (a4 >> 8) & 1;
    __int16 v81 = 1024;
    int v82 = (a4 >> 9) & 1;
    __int16 v83 = 2048;
    double v84 = v21;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CLGyro] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d,now,%f", buf, 0x4Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    float v40 = *a2;
    float v39 = a2[1];
    float v41 = a2[2];
    double v42 = *a3;
    double v43 = sub_1000D3E50();
    *(_DWORD *)int64_t v55 = 134220032;
    *(double *)&v55[4] = v40;
    *(_WORD *)&v55[12] = 2048;
    *(double *)&v55[14] = v39;
    *(_WORD *)&v55[22] = 2048;
    double v56 = v41;
    *(_WORD *)int64_t v57 = 2048;
    *(double *)&v57[2] = v42;
    *(_WORD *)&v57[10] = 1024;
    unsigned int v58 = a4;
    __int16 v59 = 1024;
    unsigned int v60 = HIWORD(a4) % 3u;
    __int16 v61 = 1024;
    int v62 = (a4 >> 8) & 1;
    __int16 v63 = 1024;
    int v64 = (a4 >> 9) & 1;
    __int16 v65 = 2048;
    double v66 = v43;
    long long v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  if (*a3 < *(double *)(a1 + 56))
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022D9A80);
    }
    long long v22 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
    {
      double v23 = *(double *)(a1 + 56);
      double v24 = *a3;
      *(_DWORD *)int buf = 134218240;
      double v68 = v23;
      __int16 v69 = 2048;
      double v70 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Gyro time rollback, last timestamp, %f, current timestamp, %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022D9A80);
      }
      uint64_t v45 = *(void *)(a1 + 56);
      double v46 = *a3;
      *(_DWORD *)int64_t v55 = 134218240;
      *(void *)&v55[4] = v45;
      *(_WORD *)&v55[12] = 2048;
      *(double *)&v55[14] = v46;
      uint64_t v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
  }
  if (*(unsigned char *)(a1 + 96))
  {
    *(void *)int64_t v55 = off_1022E6718;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v26 = *a3;
    *(CFAbsoluteTime *)&v55[8] = Current;
    uint64_t v27 = *(void *)a2;
    double v56 = v26;
    *(void *)int64_t v57 = v27;
    *(float *)&v57[8] = a2[2];
    unsigned int v58 = a4;
    LOBYTE(v59) = BYTE2(a4) - 3 * ((43691 * HIWORD(a4)) >> 17);
    HIBYTE(v59) = BYTE1(a4) & 1;
    LOBYTE(v60) = (a4 & 0x200) != 0;
    uint64_t v28 = sub_101282D9C();
    sub_10128431C(v28, (uint64_t)v55);
    sub_10170140C(buf);
    sub_101726A68((uint64_t)buf);
    v88 |= 1u;
    uint64_t v85 = *(void *)&v55[8];
    uint64_t v29 = v86;
    double v30 = *a3;
    *(_WORD *)(v86 + 44) |= 1u;
    *(double *)(v29 + 8) = v30;
    uint64_t v31 = v86;
    *(float *)&double v30 = *a2;
    *(_WORD *)(v86 + 44) |= 0x10u;
    *(_DWORD *)(v31 + 28) = LODWORD(v30);
    uint64_t v32 = v86;
    *(float *)&double v30 = a2[1];
    *(_WORD *)(v86 + 44) |= 0x20u;
    *(_DWORD *)(v32 + 32) = LODWORD(v30);
    uint64_t v33 = v86;
    *(float *)&double v30 = a2[2];
    *(_WORD *)(v86 + 44) |= 0x40u;
    *(_DWORD *)(v33 + 36) = LODWORD(v30);
    uint64_t v34 = v86;
    *(_WORD *)(v86 + 44) |= 8u;
    *(_DWORD *)(v34 + 24) = a4;
    uint64_t v35 = v86;
    *(_WORD *)(v86 + 44) |= 4u;
    *(_DWORD *)(v35 + 20) = HIWORD(a4) % 3u;
    uint64_t v36 = v86;
    *(_WORD *)(v86 + 44) |= 0x80u;
    *(unsigned char *)(v36 + 40) = BYTE1(a4) & 1;
    uint64_t v37 = v86;
    *(_WORD *)(v86 + 44) |= 0x100u;
    *(unsigned char *)(v37 + 41) = (a4 & 0x200) != 0;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022D9AA0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  uint64_t result = sub_1000E7BA0(a1, 0, (uint64_t)&v50, 24);
  *(double *)(a1 + 56) = *a3;
  return result;
}

void sub_100A0B244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100A0B274(id a1)
{
  unsigned int v1 = sub_1000B5AD4() - 1;
  if (v1 > 0xF0) {
    char v2 = 0;
  }
  else {
    char v2 = byte_101D56540[v1];
  }
  byte_10247F8B8 = v2;
}

void sub_100A0B2B4(id a1)
{
  qword_1024190C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void sub_100A0B2E4(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100A0B318(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

BOOL sub_100A0B348(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  double v3 = (uint64_t *)a1[1];
  if (v3 != a1)
  {
    while (1)
    {
      sub_100134750(__p, "");
      BOOL v7 = sub_100A0B818((uint64_t)(v3 + 2), a2, a3, (uint64_t)__p);
      BOOL v8 = v7;
      if (SHIBYTE(v25) < 0)
      {
        operator delete(*(void **)__p);
        if (!v8) {
          goto LABEL_19;
        }
      }
      else if (!v7)
      {
        goto LABEL_19;
      }
      uint64_t v9 = v3[35];
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
      int v10 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v11 = a2;
        }
        else {
          uint64_t v11 = *(void *)a2;
        }
        uint64_t v12 = *(void *)a3;
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v12 = a3;
        }
        uint64_t v13 = v3 + 5;
        if (*((char *)v3 + 63) < 0) {
          uint64_t v13 = (void *)*v13;
        }
        *(_DWORD *)std::string __p = 136446979;
        *(void *)&__p[4] = v11;
        __int16 v23 = 2081;
        uint64_t v24 = v12;
        __int16 v25 = 2081;
        double v26 = v13;
        __int16 v27 = 2050;
        uint64_t v28 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "remove %{public}s/%{private}s from %{private}s, remaining fences, %{public}lu", __p, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
        }
        float v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::removeFenceFromCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const std::string &, const std::string &)", "%s\n", v19);
        if (v19 != __p) {
          free(v19);
        }
      }
      if (!v9)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
        }
        uint64_t v14 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          int v15 = v3 + 5;
          if (*((char *)v3 + 63) < 0) {
            int v15 = (void *)*v15;
          }
          uint64_t v16 = a1[2] - 1;
          *(_DWORD *)std::string __p = 136380931;
          *(void *)&__p[4] = v15;
          __int16 v23 = 2050;
          uint64_t v24 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Fence: kill combinedFence, %{private}s, remaining fences, %{public}lu", __p, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
          }
          double v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::removeFenceFromCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const std::string &, const std::string &)", "%s\n", v20);
          if (v20 != __p) {
            free(v20);
          }
        }
        uint64_t v17 = *v3;
        float v18 = (uint64_t *)v3[1];
        *(void *)(v17 + 8) = v18;
        *(void *)v3[1] = v17;
        --a1[2];
        sub_100A0D1F4((uint64_t)(v3 + 2));
        operator delete(v3);
        double v3 = v18;
        goto LABEL_20;
      }
LABEL_19:
      double v3 = (uint64_t *)v3[1];
LABEL_20:
      if (v3 == a1) {
        return v8;
      }
    }
  }
  return 0;
}

void sub_100A0B7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100A0B818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 296) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)a2;
    uint64_t v30 = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(v27, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__int16 v27 = *(_OWORD *)a3;
    uint64_t v28 = *(void *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v26 = *(void *)(a4 + 16);
  }
  sub_100110A5C((char *)v31, (uint64_t)__dst, (uint64_t)v27, (uint64_t)__p);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v7 = sub_100A0D828((uint64_t **)(a1 + 248), (unsigned __int8 *)v31);
  uint64_t v8 = v7;
  uint64_t v9 = *(void **)(a1 + 248);
  if (v9 == (void *)(a1 + 256))
  {
    LOBYTE(v11) = 0;
    char v10 = 0;
    if (!v7) {
      goto LABEL_38;
    }
    goto LABEL_29;
  }
  char v10 = 0;
  int v11 = 0;
  do
  {
    double v12 = *(double *)(a1 + 296);
    if (v12 <= sub_100044A78((uint64_t)(v9 + 4))) {
      *(double *)(a1 + 296) = sub_100044A78((uint64_t)(v9 + 4));
    }
    BOOL v13 = *((unsigned char *)v9 + 220) != 0;
    char v14 = *((unsigned char *)v9 + 192);
    int v15 = (void *)v9[1];
    if (v15)
    {
      do
      {
        uint64_t v16 = v15;
        int v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        uint64_t v16 = (void *)v9[2];
        BOOL v17 = *v16 == (void)v9;
        uint64_t v9 = v16;
      }
      while (!v17);
    }
    v10 |= v13;
    v11 |= (v14 & 0x20) >> 5;
    uint64_t v9 = v16;
  }
  while (v16 != (void *)(a1 + 256));
  if (v8)
  {
LABEL_29:
    *(void *)(a1 + 280) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(a1 + 288) = 0x7FEFFFFFFFFFFFFFLL;
    if (*(void *)(a1 + 264))
    {
      uint64_t v18 = *(void *)(a1 + 248);
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)(v18 + 56));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(v18 + 104);
      *(void *)(a1 + 104) = *(void *)(v18 + 136);
      *(_DWORD *)(a1 + 184) = sub_100C8D5B4(v18 + 32);
      *(unsigned char *)(a1 + 188) = *(unsigned char *)(v18 + 220);
      *(unsigned char *)(a1 + 308) = (*(unsigned char *)(v18 + 192) & 0x20) != 0;
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
      float v19 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        double v20 = (void *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0) {
          double v20 = (void *)*v20;
        }
        *(_DWORD *)int buf = 136380675;
        uint64_t v45 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fence: fence, %{private}s, became empty", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
        }
        __int16 v23 = (void *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0) {
          __int16 v23 = (void *)*v23;
        }
        int v42 = 136380675;
        double v43 = v23;
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceManager_Type::CombinedFence::removeFence(const std::string &, const std::string &, const std::string &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
  }
LABEL_38:
  uint64_t v21 = *(void *)(a1 + 296);
  *(void *)(a1 + 88) = v21;
  *(void *)(a1 + 96) = v21;
  *(unsigned char *)(a1 + 188) = v10 & 1;
  *(unsigned char *)(a1 + 308) = v11 & 1;
  if (v40)
  {
    float v41 = v40;
    operator delete(v40);
  }

  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  return v8 != 0;
}

void sub_100A0BC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
}

uint64_t sub_100A0BCCC(uint64_t *a1, uint64_t a2, char a3)
{
  int v6 = (uint64_t *)a1[1];
  if (v6 == a1) {
    goto LABEL_80;
  }
  while (1)
  {
    double v7 = sub_100A0CA7C((uint64_t)(v6 + 2), *(double *)(a2 + 72), *(double *)(a2 + 80));
    double v8 = *(double *)(a2 + 96);
    BOOL v10 = v8 > 400.0 || *(unsigned char *)(a2 + 188) != 0 || *(_DWORD *)(a2 + 180) == 2;
    if (!v10
      && *(void *)(a2 + 232) == *(void *)(a2 + 224)
      && (*(unsigned char *)(a2 + 160) & 0x20) == 0
      && *((double *)v6 + 14) <= 400.0
      && !*((unsigned char *)v6 + 204)
      && *((_DWORD *)v6 + 49) != 2
      && v6[31] == v6[30]
      && (v6[22] & 0x20) == 0
      && !*((unsigned char *)v6 + 324)
      && v7 <= 35.0)
    {
      int v11 = *((_DWORD *)v6 + 50);
      if (v11 == sub_100C8D5B4(a2))
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
        }
        unint64_t v48 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 23) >= 0) {
            size_t v49 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            size_t v49 = *(void *)(a2 + 8);
          }
          sub_1001110E4((uint64_t)&v60, v49 + 1);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v50 = &v60;
          }
          else {
            double v50 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if (v49)
          {
            if (*(char *)(a2 + 23) >= 0) {
              uint64_t v51 = (const void *)a2;
            }
            else {
              uint64_t v51 = *(const void **)a2;
            }
            int v52 = v50;
            memmove(v50, v51, v49);
            double v50 = v52;
          }
          *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 47;
          int v53 = *(char *)(a2 + 47);
          if (v53 >= 0) {
            BOOL v54 = (const std::string::value_type *)(a2 + 24);
          }
          else {
            BOOL v54 = *(const std::string::value_type **)(a2 + 24);
          }
          if (v53 >= 0) {
            std::string::size_type v55 = *(unsigned __int8 *)(a2 + 47);
          }
          else {
            std::string::size_type v55 = *(void *)(a2 + 32);
          }
          double v56 = std::string::append(&v60, v54, v55);
          long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v60.__r_.__value_.__l.__data_) = 134283779;
          *(double *)((char *)v60.__r_.__value_.__r.__words + 4) = v7;
          WORD2(v60.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "FenceCal: combine fine fence, distance, %{private}.1lf, %{private}s", (uint8_t *)&v60, 0x16u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v60, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
          }
          sub_100918454((const void **)a2, &buf);
          double v46 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          goto LABEL_180;
        }
        goto LABEL_79;
      }
      double v8 = *(double *)(a2 + 96);
    }
    if (v8 >= 7000.0 && *((double *)v6 + 14) >= 7000.0 && v7 <= 35.0) {
      break;
    }
    if (v7 > 35.0) {
      goto LABEL_47;
    }
    double v12 = *((double *)v6 + 14);
    if (v8 >= 7000.0 != v12 >= 7000.0) {
      goto LABEL_47;
    }
    BOOL v13 = v8 <= 400.0 && *(unsigned char *)(a2 + 188) == 0;
    int v14 = *(_DWORD *)(a2 + 180);
    BOOL v15 = !v13 || v14 == 2;
    char v16 = v15;
    BOOL v17 = !v15 && *(void *)(a2 + 232) == *(void *)(a2 + 224) && (*(unsigned char *)(a2 + 160) & 0x20) == 0;
    if (v12 > 400.0 || *((unsigned char *)v6 + 204) || *((_DWORD *)v6 + 49) == 2 || v6[31] != v6[30])
    {
      if (v17) {
        goto LABEL_47;
      }
    }
    else if ((v17 ^ ((v6[22] & 0x20) == 0)))
    {
      goto LABEL_47;
    }
    int v18 = (v16 & 1) == 0 && *(void *)(a2 + 232) == *(void *)(a2 + 224) && (*(unsigned char *)(a2 + 160) & 0x20) == 0;
    if (*((unsigned __int8 *)v6 + 324) == v18 && v14 == *((_DWORD *)v6 + 49))
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
      char v36 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a2 + 23) >= 0) {
          size_t v37 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v37 = *(void *)(a2 + 8);
        }
        char v38 = &v60;
        sub_1001110E4((uint64_t)&v60, v37 + 1);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        if (v37)
        {
          if (*(char *)(a2 + 23) >= 0) {
            id v39 = (const void *)a2;
          }
          else {
            id v39 = *(const void **)a2;
          }
          memmove(v38, v39, v37);
        }
        *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 47;
        int v40 = *(char *)(a2 + 47);
        if (v40 >= 0) {
          float v41 = (const std::string::value_type *)(a2 + 24);
        }
        else {
          float v41 = *(const std::string::value_type **)(a2 + 24);
        }
        if (v40 >= 0) {
          std::string::size_type v42 = *(unsigned __int8 *)(a2 + 47);
        }
        else {
          std::string::size_type v42 = *(void *)(a2 + 32);
        }
        double v43 = std::string::append(&v60, v41, v42);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        uint64_t v45 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v45 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        LODWORD(v60.__r_.__value_.__l.__data_) = 134283779;
        *(double *)((char *)v60.__r_.__value_.__r.__words + 4) = v7;
        WORD2(v60.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v45;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "FenceCal: combine non-fine non-large fence, distance, %{private}.1lf, %{private}s", (uint8_t *)&v60, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v60, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
        }
        sub_100918454((const void **)a2, &buf);
        double v46 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
LABEL_180:
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", (const char *)v46);
        if (v46 != &v60) {
          free(v46);
        }
        goto LABEL_79;
      }
      goto LABEL_79;
    }
LABEL_47:
    int v6 = (uint64_t *)v6[1];
    if (v6 == a1) {
      goto LABEL_80;
    }
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
  }
  float v19 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0) {
      size_t v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v20 = *(void *)(a2 + 8);
    }
    uint64_t v21 = &v60;
    sub_1001110E4((uint64_t)&v60, v20 + 1);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      if (*(char *)(a2 + 23) >= 0) {
        long long v22 = (const void *)a2;
      }
      else {
        long long v22 = *(const void **)a2;
      }
      memmove(v21, v22, v20);
    }
    *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 47;
    int v23 = *(char *)(a2 + 47);
    if (v23 >= 0) {
      uint64_t v24 = (const std::string::value_type *)(a2 + 24);
    }
    else {
      uint64_t v24 = *(const std::string::value_type **)(a2 + 24);
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      std::string::size_type v25 = *(void *)(a2 + 32);
    }
    uint64_t v26 = std::string::append(&v60, v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    uint64_t v28 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v60.__r_.__value_.__l.__data_) = 134283779;
    *(double *)((char *)v60.__r_.__value_.__r.__words + 4) = v7;
    WORD2(v60.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "FenceCal: combine large fences, distance, %{private}.1lf, %{private}s", (uint8_t *)&v60, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v60, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
    }
    sub_100918454((const void **)a2, &buf);
    double v46 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_180;
  }
LABEL_79:
  if (v6 == a1)
  {
LABEL_80:
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
    }
    uint64_t v29 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      sub_100C8C864(a2);
      uint64_t v30 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v60
          : (std::string *)v60.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "FenceCal: creating a new combined fence for, %{private}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v60, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
      sub_100C8C864(a2);
      uint64_t v47 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", (const char *)v47);
      if (v47 != &v60) {
        free(v47);
      }
    }
    sub_100A0D0E4((uint64_t)&v60);
    int v6 = sub_100A0D370((uint64_t)a1, 0, 0, (uint64_t)&v60);
    uint64_t v31 = *a1;
    *(void *)(v31 + 8) = v6;
    uint64_t *v6 = v31;
    *a1 = (uint64_t)v6;
    v6[1] = (uint64_t)a1;
    ++a1[2];
    sub_100A0D1F4((uint64_t)&v60);
  }
  if (v6 != a1)
  {
    sub_100A0CD9C((uint64_t)(v6 + 2), a2);
    *((unsigned char *)v6 + 288) |= a3;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
    }
    char v32 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      sub_100C8C864((uint64_t)(v6 + 2));
      uint64_t v33 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v60
          : (std::string *)v60.__r_.__value_.__r.__words[0];
      int v34 = *((unsigned __int8 *)v6 + 288);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "FenceCal: adding to, %{private}s, isExit, %{private}d", (uint8_t *)&buf, 0x12u);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v60, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
      sub_100C8C864((uint64_t)(v6 + 2));
      __int16 v59 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)", "%s\n", (const char *)v59);
      if (v59 != &v60) {
        free(v59);
      }
    }
  }
  return 1;
}

void sub_100A0CA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100A0CA7C(uint64_t a1, double a2, double a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247F8F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247F8F0))
  {
    sub_101171D90((uint64_t)dbl_10247F8C8);
    __cxa_guard_release(&qword_10247F8F0);
  }
  if (*(void *)(a1 + 264))
  {
    uint64_t v6 = *(void *)(a1 + 248);
    double v7 = *(double *)(v6 + 104);
    double v8 = *(double *)(v6 + 112);
    return sub_1000F1648(dbl_10247F8C8, a2, a3, v7, v8, 0.0);
  }
  else
  {
    double v10 = sub_1000F1648(dbl_10247F8C8, a2, a3, *(double *)(a1 + 72), *(double *)(a1 + 80), 0.0);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
    }
    int v11 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100C8C864(a1);
      double v12 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136380931;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v16 = 2049;
      double v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Fence: why is this used?, %{private}s, %{private}lf", buf, 0x16u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
      sub_100C8C864(a1);
      if (v18 >= 0) {
        BOOL v13 = buf;
      }
      else {
        BOOL v13 = *(unsigned char **)buf;
      }
      int v19 = 136380931;
      size_t v20 = v13;
      __int16 v21 = 2049;
      double v22 = v10;
      int v14 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLFenceManager_Type::CombinedFence::distanceTo(double, double) const", "%s\n", v14);
      if (v14 != (char *)__p) {
        free(v14);
      }
    }
    return v10;
  }
}

void sub_100A0CD7C(_Unwind_Exception *a1)
{
}

void sub_100A0CD9C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 184) == -1) {
    sub_101A78CBC();
  }
  sub_100A0D884((uint64_t **)(a1 + 248), (unsigned __int8 *)a2, (long long *)a2);
  double v4 = *(double *)(a2 + 80);
  double v5 = v4 + 360.0;
  if (v4 >= 0.0) {
    double v5 = *(double *)(a2 + 80);
  }
  double v6 = v5 + *(double *)(a1 + 288);
  *(double *)(a1 + 280) = *(double *)(a2 + 72) + *(double *)(a1 + 280);
  *(double *)(a1 + 288) = v6;
  double v7 = *(double *)(a1 + 296);
  if (v7 <= sub_100044A78(a2)) {
    *(double *)(a1 + 296) = sub_100044A78(a2);
  }
  if (*(void *)(a1 + 264) == 1)
  {
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 184) = sub_100C8D5B4(a2);
    *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + 188);
    int v8 = (*(unsigned __int8 *)(a2 + 160) >> 5) & 1;
LABEL_12:
    *(unsigned char *)(a1 + 308) = v8;
    goto LABEL_13;
  }
  if (*(unsigned char *)(a2 + 188)) {
    *(unsigned char *)(a1 + 188) = 1;
  }
  if ((*(unsigned char *)(a2 + 160) & 0x20) != 0)
  {
    LOBYTE(v8) = 1;
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v9 = *(void *)(a1 + 296);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v9;
  double v10 = *(double *)(a2 + 112);
  if (v10 > *(double *)(a1 + 112)) {
    *(double *)(a1 + 112) = v10;
  }
}

uint64_t sub_100A0CEC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 != a1)
  {
    while (1)
    {
      unint64_t v2 = *(void *)(v1 + 280);
      if (!v2) {
        break;
      }
      double v3 = *(double *)(v1 + 304) / (double)v2;
      *(double *)(v1 + 88) = *(double *)(v1 + 296) / (double)v2;
      *(double *)(v1 + 96) = v3;
      uint64_t v4 = *(void *)(v1 + 312);
      *(void *)(v1 + 104) = v4;
      *(void *)(v1 + 112) = v4;
      if (v3 > 180.0) {
        *(double *)(v1 + 96) = v3 + -360.0;
      }
      uint64_t v1 = *(void *)(v1 + 8);
      if (v1 == a1) {
        return 1;
      }
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
    }
    double v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "FenceCal: No fences", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLCombinedFencesList::finalizeCombinedFencesList(std::list<CLFenceManager_Type::CombinedFence> &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return 1;
}

void sub_100A0D0B4(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_100A0D0E4(uint64_t a1)
{
  sub_100134750(v7, "CombinedFence");
  sub_100134750(v5, "");
  sub_100134750(__p, "");
  sub_100C8C3CC((char *)a1, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 304) = -1;
  *(unsigned char *)(a1 + 308) = 0;
  return a1;
}

void sub_100A0D1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A0D1F4(uint64_t a1)
{
  sub_100A0D280(a1 + 248, *(void **)(a1 + 256));
  unint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100A0D280(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100A0D280(a1, *a2);
    sub_100A0D280(a1, a2[1]);
    sub_100A0D2DC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100A0D2DC(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    double v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *sub_100A0D370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = operator new(0x148uLL);
  *double v7 = a2;
  v7[1] = a3;
  sub_100A0D3D0((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_100A0D3BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0D3D0(uint64_t a1, uint64_t a2)
{
  char v4 = sub_10048AEC0((char *)a1, (long long *)a2);
  sub_100A0D450((uint64_t *)v4 + 31, a2 + 248);
  long long v5 = *(_OWORD *)(a2 + 272);
  long long v6 = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 301) = *(void *)(a2 + 301);
  *(_OWORD *)(a1 + 272) = v5;
  *(_OWORD *)(a1 + 288) = v6;
  return a1;
}

void sub_100A0D420(_Unwind_Exception *a1)
{
  double v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(void *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_101A729EC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100A0D450(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100A0D4A8(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_100A0D490(_Unwind_Exception *a1)
{
  sub_100A0D280(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100A0D4A8(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = sub_100A0D534(v5, v6, v4 + 32, (long long *)v4 + 2);
      double v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          char v8 = v7;
          double v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100A0D534(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, long long *a4)
{
  long long v6 = sub_100A0D5CC(a1, a2, &v12, &v11, a3);
  double v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    char v8 = (uint64_t **)v6;
    sub_100A0D764((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, (uint64_t)v12, v8, v10[0]);
    double v7 = v10[0];
    v10[0] = 0;
    sub_100A0D7D0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned __int8 *sub_100A0D5CC(void *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  BOOL v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 != a2 && !sub_10001A540(a5, (unsigned __int8 *)a2 + 32))
  {
    if (!sub_10001A540((unsigned __int8 *)a2 + 32, a5))
    {
      *a3 = (unsigned __int8 *)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 *)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      int v14 = (unsigned __int8 *)a2[1];
      do
      {
        BOOL v15 = v14;
        int v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      char v18 = (unsigned __int8 *)a2;
      do
      {
        BOOL v15 = (unsigned __int8 *)*((void *)v18 + 2);
        BOOL v17 = *(void *)v15 == (void)v18;
        char v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10001A540(a5, v15 + 32)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
    return (unsigned __int8 *)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    double v12 = (unsigned __int8 *)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
      return (unsigned __int8 *)a2;
    }
  }
  uint64_t v11 = (unsigned __int8 *)*a2;
  if (*a2)
  {
    do
    {
      double v12 = v11;
      uint64_t v11 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    while (v11);
  }
  else
  {
    __int16 v16 = a2;
    do
    {
      double v12 = (unsigned __int8 *)v16[2];
      BOOL v17 = *(void *)v12 == (void)v16;
      __int16 v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_10001A540(v12 + 32, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (unsigned __int8 *)sub_1009206EC((uint64_t)a1, a3, a5);
}

char *sub_100A0D764@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x118uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_10048AEC0(v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100A0D7B8(_Unwind_Exception *a1)
{
  sub_100A0D7D0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100A0D7D0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100A0D2DC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_100A0D828(uint64_t **a1, unsigned __int8 *a2)
{
  double v3 = (uint64_t *)sub_10001A4C4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  char v4 = v3;
  sub_1000F0A30(a1, v3);
  sub_100A0D2DC((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_100A0D884(uint64_t **a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)sub_1009206EC((uint64_t)a1, &v10, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    double v7 = v5;
    sub_100A0D764((uint64_t)a1, a3, (uint64_t)v9);
    sub_1000EDF90(a1, v10, v7, v9[0]);
    long long v6 = v9[0];
    v9[0] = 0;
    sub_100A0D7D0((uint64_t)v9, 0);
  }
  return v6;
}

id sub_100A0DDD0(uint64_t a1, double a2, double a3, double a4, double a5)
{
  id v8 = 0;
  if (!a1 || a1 == 100)
  {
    id v9 = 0;
  }
  else
  {
    id v9 = 0;
    if (a1 != 600)
    {
      id v12 = objc_alloc((Class)NSMeasurement);
      uint64_t v13 = +[NSUnitLength meters];
      double v14 = fmax(a3, 0.0);
      if (a3 <= 0.0) {
        a4 = a5;
      }
      id v8 = [v12 initWithDoubleValue:v13 unit:v14];
      id v9 = [objc_alloc((Class)NSMeasurement) initWithDoubleValue:+[NSUnitPressure kilopascals](NSUnitPressure, "kilopascals") unit:a4];
    }
  }
  id v15 = [objc_alloc((Class)NSMeasurement) initWithDoubleValue:+[NSUnitPressure kilopascals](NSUnitPressure, "kilopascals") unit:a5];
  id v16 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a2];
  id v17 = [objc_alloc((Class)CMWaterSubmersionMeasurement) initWithDepth:v8 andPressure:v9 andSurfacePressure:v15 andState:a1 andDate:v16];
  if (v8) {

  }
  if (v9) {
  return v17;
  }
}

id sub_100A0DFC8(double a1, double a2, double a3)
{
  id v5 = [objc_alloc((Class)NSMeasurement) initWithDoubleValue:+[NSUnitTemperature celsius](NSUnitTemperature, "celsius") unit:a2];
  id v6 = [objc_alloc((Class)NSMeasurement) initWithDoubleValue:+[NSUnitTemperature celsius](NSUnitTemperature, "celsius") unit:a3];
  id v7 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a1];
  id v8 = [objc_alloc((Class)CMWaterTemperature) initWithTemperature:v5 andTemperatureUncertainty:v6 andDate:v7];

  return v8;
}

uint64_t sub_100A0E0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_1022D9B10;
  *(void *)(a1 + 24) = off_1022D9B60;
  *(void *)(a1 + 40) = 0;
  char v4 = (id *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 48) = [[CLWaterSubmersionClientLocal alloc] initWithWaterSubmersionClient:a1];
  id v5 = [objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLBarometerCalibration"];
  *(void *)(a1 + 40) = v5;
  [v5 registerDelegate:*(void *)(a1 + 48) inSilo:[*(id *)(a1 + 16) silo]];
  [*v4 setDelegateEntityName:"CLWaterSubmersionClient"];
  return a1;
}

void sub_100A0E198(_Unwind_Exception *a1)
{
  sub_100426880(v1);
  _Unwind_Resume(a1);
}

void *sub_100A0E1B0(uint64_t a1)
{
  *(void *)a1 = off_1022D9B10;
  *(void *)(a1 + 24) = off_1022D9B60;

  [*(id *)(a1 + 48) setValid:0];

  return sub_100426880((void *)a1);
}

void *sub_100A0E244(uint64_t a1)
{
  return sub_100A0E1B0(a1 - 24);
}

void sub_100A0E24C(uint64_t a1)
{
  sub_100A0E1B0(a1);

  operator delete();
}

void sub_100A0E284(uint64_t a1)
{
  sub_100A0E1B0(a1 - 24);

  operator delete();
}

id sub_100A0E2C0(uint64_t a1)
{
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1022D9BD0);
  }
  unint64_t v2 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134349312;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    __int16 v7 = 1026;
    int v8 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "submersion client connection,timestamp,%{public}f,connecting,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022D9BD0);
    }
    CFAbsoluteTimeGetCurrent();
    char v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWaterSubmersionClient::enable()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 40) registerClient:*(void *)(a1 + 48) forNotification:3];
}

id sub_100A0E4A4(uint64_t a1)
{
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1022D9BD0);
  }
  unint64_t v2 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134349312;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    __int16 v7 = 1026;
    int v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "submersion client connection,timestamp,%{public}f,connecting,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022D9BD0);
    }
    CFAbsoluteTimeGetCurrent();
    char v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWaterSubmersionClient::disable()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 40) unregisterClient:*(void *)(a1 + 48) forNotification:3];
}

void sub_100A0E680(uint64_t a1, CLConnectionMessage **a2)
{
  LOBYTE(__p[0]) = 0;
  sub_10006ACBC((unsigned __int8 *)v22, "AllowWaterSubmersionSimulation", (unsigned __int8 *)__p, 0);
  int v4 = BYTE1(v22[0]);
  LOBYTE(__p[0]) = 0;
  sub_10006ACBC((unsigned __int8 *)v22, "AllowWaterSubmersionOverride", (unsigned __int8 *)__p, 0);
  int v5 = BYTE1(v22[0]);
  char v6 = sub_1007432FC();
  if (!(v5 | v4) && (v6 & 1) == 0)
  {
    v22[0] = +[NSError errorWithDomain:CMErrorDomain code:109 userInfo:0];
    sub_100A0EEE8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", &v24);
    CLConnection::sendMessage();
    __int16 v7 = v25;
    if (!v25) {
      return;
    }
LABEL_36:
    sub_1000DB0A0(v7);
    return;
  }
  sub_100134750(v22, "com.apple.developer.submerged-depth-and-pressure");
  if (CLConnection::isEntitled())
  {
    int v8 = 0;
  }
  else
  {
    sub_100134750(__p, "com.apple.developer.submerged-shallow-depth-and-pressure");
    int v8 = CLConnection::isEntitled() ^ 1;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v23 < 0)
  {
    operator delete(v22[0]);
    if (v8)
    {
LABEL_11:
      v22[0] = +[NSError errorWithDomain:CMErrorDomain code:110 userInfo:0];
      sub_100A0EEE8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", &v18);
      CLConnection::sendMessage();
      __int16 v7 = v19;
      if (!v19) {
        return;
      }
      goto LABEL_36;
    }
  }
  else if (v8)
  {
    goto LABEL_11;
  }
  if (!sub_100A0EA80(a1))
  {
    v22[0] = +[NSError errorWithDomain:CMErrorDomain code:105 userInfo:0];
    sub_100A0EEE8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", &v16);
    CLConnection::sendMessage();
    __int16 v7 = v17;
    if (!v17) {
      return;
    }
    goto LABEL_36;
  }
  sub_100134750(v22, "com.apple.developer.submerged-depth-and-pressure");
  int isEntitled = CLConnection::isEntitled();
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (isEntitled) {
    [*(id *)(a1 + 48) setDeepEnabled:1];
  }
  if (!*a2) {
    goto LABEL_35;
  }
  uint64_t v10 = (void *)CLConnectionMessage::name(*a2);
  int v11 = *((char *)v10 + 23);
  if (v11 < 0)
  {
    if (v10[1] != 63)
    {
LABEL_28:
      if (!*a2) {
        goto LABEL_35;
      }
      id v12 = (void *)CLConnectionMessage::name(*a2);
      int v13 = *((char *)v12 + 23);
      if (v13 < 0)
      {
        if (v12[1] != 68) {
          goto LABEL_35;
        }
        id v12 = (void *)*v12;
      }
      else if (v13 != 68)
      {
        goto LABEL_35;
      }
      if (!memcmp(v12, "WaterSubmersion/kCLConnectionMessageWaterSubmersionCompletionHandler", 0x44uLL))
      {
        [*(id *)(a1 + 40) acknowledgeNotification:3];
        return;
      }
LABEL_35:
      v22[0] = +[NSError errorWithDomain:CMErrorDomain code:108 userInfo:0];
      sub_100A0EEE8("WaterSubmersion/kCLConnectionMessageWaterSubmersionErrorOccurred", &v14);
      CLConnection::sendMessage();
      __int16 v7 = v15;
      if (!v15) {
        return;
      }
      goto LABEL_36;
    }
    uint64_t v10 = (void *)*v10;
  }
  else if (v11 != 63)
  {
    goto LABEL_28;
  }
  if (memcmp(v10, "WaterSubmersion/kCLConnectionMessageWaterSubmersionSubscription", 0x3FuLL)) {
    goto LABEL_28;
  }
  if ([[objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", @"kCLConnectionMessageSubscribeKey") isEqualToNumber:&__kCFBooleanTrue])sub_100A0E2C0(a1); {
  else
  }
    sub_100A0E4A4(a1);
}

void sub_100A0EA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100A0EA80(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 32))
  {
    sub_100134750(__p, "com.apple.locationd.activity");
    int isEntitled = CLConnection::isEntitled();
    int v3 = isEntitled;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if (v3)
      {
LABEL_7:
        *(_DWORD *)(a1 + 32) = 1;
        return *(_DWORD *)(a1 + 32) == 1;
      }
    }
    else if (isEntitled)
    {
      goto LABEL_7;
    }
    CLConnection::getAuditToken(v9, *(CLConnection **)(a1 + 8));
    if (TCCAccessCheckAuditToken()) {
      goto LABEL_7;
    }
    *(_DWORD *)(a1 + 32) = 2;
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022D9BD0);
    }
    int v5 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      char v6 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %s did not pass entitlement/tcc checks.", buf, 0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_1022D9BD0);
      }
      CLConnection::getName((uint64_t *)buf, *(CLConnection **)(a1 + 8));
      if (v11 >= 0) {
        __int16 v7 = buf;
      }
      else {
        __int16 v7 = *(unsigned char **)buf;
      }
      int v12 = 136315138;
      int v13 = v7;
      int v8 = (char *)_os_log_send_and_compose_impl();
      if (v11 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWaterSubmersionClient::isAuthorizedForMotionActivity()", "%s\n", v8);
      if (v8 != (char *)__p) {
        free(v8);
      }
    }
  }
  return *(_DWORD *)(a1 + 32) == 1;
}

void sub_100A0ED20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A0ED44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_100A0EF4C("WaterSubmersion/kCLConnectionMessageWaterSubmersionEventUpdate", &v2);
  CLConnection::sendMessage();
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A0EDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A0EDB8(uint64_t a1, uint64_t a2)
{
}

void sub_100A0EDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_100A0EFB0("WaterSubmersion/kCLConnectionMessageWaterSubmersionMeasurementUpdate", &v2);
  CLConnection::sendMessage();
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A0EE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A0EE34(uint64_t a1, uint64_t a2)
{
}

void sub_100A0EE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_100A0F014("WaterSubmersion/kCLConnectionMessageWaterSubmersionTemperatureUpdate", &v2);
  CLConnection::sendMessage();
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A0EE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A0EEB0(uint64_t a1, uint64_t a2)
{
}

void sub_100A0EEB8(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_100A0EEE8@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100A0EF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100A0EF4C@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100A0EF9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100A0EFB0@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100A0F000(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100A0F014@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100A0F064(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_100A0F078(void *a1)
{
  if (*a1 == a1[1]) {
    return 0.0;
  }
  else {
    return *(double *)(*a1 + 16);
  }
}

double sub_100A0F094(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0.0;
  }
  else {
    return *(double *)(v1 - 64);
  }
}

uint64_t sub_100A0F0B0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 8) = v5;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 24) = v7;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  sub_100A0F198(a1);
  return a1;
}

void sub_100A0F160(_Unwind_Exception *a1)
{
  uint64_t v7 = v4;
  sub_1000F5BB0(v7, *v6);
  id v9 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 128) = v9;
    operator delete(v9);
  }
  sub_101A78E40(v3, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A0F198(uint64_t a1)
{
  sub_10044FD20(v3, "NumberOfDaysToRetainCyclingPowerHistoryInDB", &dword_101D566A0, 0);
  *(_DWORD *)(a1 + 40) = 86400 * v4;
  *(void *)(a1 + 176) = 0;
  uint64_t result = sub_10044FD20(v3, "MaximumTimeToSaveInDBS", &dword_101D566A4, 0);
  *(_DWORD *)(a1 + 216) = v4;
  return result;
}

uint64_t sub_100A0F218(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v12 = a2;
  sub_100A12D7C(&v12, &v8);
  sub_100A12ED4(&v8, &v10);
  sub_100A13144(&v12, &v4);
  sub_100A1329C(&v4, &v6);
  sub_100A0F0B0(a1, &v10, &v6);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_100A0F198(a1);
  return a1;
}

void sub_100A0F2D0(_Unwind_Exception *a1)
{
  sub_100A0F334(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A0F334(uint64_t a1)
{
  sub_1000F5BB0(a1 + 192, *(void **)(a1 + 200));
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_100A0F38C(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = xmmword_101D56670;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 40) = _Q0;
  unint64_t v11 = 0xBFF0000000000000;
  *(void *)(a3 + 56) = 0xBFF0000000000000;
  double v12 = *(double *)a2;
  *(void *)(a3 + 8) = *(void *)a2;
  if (*(double *)(a2 + 504) > 0.0)
  {
    unint64_t v13 = *(void *)(a2 + 544);
    *(void *)(a3 + 40) = v13;
    unint64_t v11 = v13;
  }
  float v14 = 0.0;
  if (*(double *)(a2 + 704) > 0.0)
  {
    float v14 = *(double *)(a2 + 728);
    *(float *)(a3 + 24) = v14;
  }
  float v15 = *(double *)(a2 + 1040);
  *(float *)(a3 + 32) = v15;
  double v16 = *(double *)(a2 + 1024);
  if (vabdd_f64(v16, v12) >= 5.0)
  {
    double v18 = -1.0;
    if (v16 > 0.0)
    {
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      int v19 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a2 + 1024);
        *(_DWORD *)std::string buf = 134218240;
        double v36 = v12;
        __int16 v37 = 2048;
        uint64_t v38 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cadence timestamp is too old, entryTime, %f, cadenceTime, %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        int v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLCyclingFTPInput CLCyclingFTPDataStore::createDbEntryFromCalorieInputs(const CLNatalieModelInput::Data &)", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
    }
  }
  else
  {
    float v17 = *(double *)(a2 + 1016);
    *(float *)(a3 + 28) = v17;
    double v18 = v17;
  }
  if (vabdd_f64(*(double *)(a2 + 1192), v12) >= 5.0)
  {
    double v23 = -1.0;
    double v24 = 0.0;
  }
  else
  {
    float v21 = *(double *)(a2 + 1200);
    float v22 = *(double *)(a2 + 1208);
    *(float *)(a3 + 16) = v21;
    *(float *)(a3 + 20) = v22;
    double v23 = v21;
    double v24 = v22;
  }
  if (v15 >= 0.0) {
    ++*a1;
  }
  if (v23 > 0.39) {
    ++a1[1];
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
  }
  std::string::size_type v25 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)(a2 + 504);
    uint64_t v27 = *(void *)(a2 + 704);
    uint64_t v28 = *(void *)(a2 + 1024);
    uint64_t v29 = *(void *)(a2 + 1048);
    uint64_t v30 = *(void *)(a2 + 1192);
    int v31 = *a1;
    int v32 = a1[1];
    *(_DWORD *)std::string buf = 134221312;
    double v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v26;
    __int16 v39 = 2048;
    unint64_t v40 = v11;
    __int16 v41 = 2048;
    uint64_t v42 = v27;
    __int16 v43 = 2048;
    double v44 = v14;
    __int16 v45 = 2048;
    uint64_t v46 = v28;
    __int16 v47 = 2048;
    double v48 = v18;
    __int16 v49 = 2048;
    uint64_t v50 = v29;
    __int16 v51 = 2048;
    double v52 = v15;
    __int16 v53 = 2048;
    uint64_t v54 = v30;
    __int16 v55 = 2048;
    double v56 = v23;
    __int16 v57 = 2048;
    double v58 = v24;
    __int16 v59 = 1024;
    int v60 = v31;
    __int16 v61 = 1024;
    int v62 = v32;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "new FTP input,startTime,%f,odometerTime,%f,rawSpeed,%f,elevationTime,%f,vspeed,%f,cadenceTime,%f,cadence,%f,powerTime,%f,power,%f,hrTime,%f,hr,%f,hrConfidence,%f,numSamplesWithPower,%d,numSamplesWithPowerAndHR,%d", buf, 0x86u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPInput CLCyclingFTPDataStore::createDbEntryFromCalorieInputs(const CLNatalieModelInput::Data &)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
}

void sub_100A0F90C(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  if ((a2 & 0x8000000000000000) == 0)
  {
    int v3 = *(void **)(a1 + 200);
    if (!v3) {
      goto LABEL_12;
    }
    uint64_t v4 = (void *)(a1 + 200);
    do
    {
      uint64_t v5 = v3[4];
      BOOL v6 = v5 < a2;
      if (v5 >= a2) {
        uint64_t v7 = v3;
      }
      else {
        uint64_t v7 = v3 + 1;
      }
      if (!v6) {
        uint64_t v4 = v3;
      }
      int v3 = (void *)*v7;
    }
    while (*v7);
    if (v4 == (void *)(a1 + 200) || v4[4] > a2)
    {
LABEL_12:
      uint64_t v8 = (uint64_t **)(a1 + 192);
      sub_100611BF4((uint64_t **)(a1 + 192), &v26, &v26);
      id v9 = sub_100A135A0(v25, (uint64_t)v8);
      uint64_t v10 = sub_100A0FE14((uint64_t)v9, v25);
      sub_1000F5BB0((uint64_t)v25, (void *)v25[1]);
      uint64_t v11 = a1 + 144;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 40))(v40);
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a1 + 144), out);
      if (v42)
      {
        if (v41 != v10)
        {
          sub_100A0FF18(v41, (uint64_t **)buf);
          double v12 = *(void **)buf;
          unint64_t v13 = *(void **)&buf[8];
          if (*(void *)buf != *(void *)&buf[8])
          {
            do
            {
              *(void *)uint64_t v27 = *v12;
              sub_100611BF4(v8, (uint64_t *)v27, (uint64_t *)v27);
              ++v12;
            }
            while (v12 != v13);
            double v12 = *(void **)buf;
          }
          if (v12)
          {
            *(void *)&uint8_t buf[8] = v12;
            operator delete(v12);
          }
          uint64_t v14 = *(void *)(a1 + 8);
          float v15 = sub_100A135A0(v24, (uint64_t)v8);
          uint64_t v16 = sub_100A0FE14((uint64_t)v15, v24);
          LOBYTE(v14) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 56))(v14, v11, v16);
          sub_1000F5BB0((uint64_t)v24, (void *)v24[1]);
          if ((v14 & 1) == 0)
          {
            if (qword_1024192F0 != -1) {
              dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
            }
            float v17 = qword_1024192F8;
            if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = out;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Could not update the power meter id code in the db. sessionid, %s", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024192F0 != -1) {
                dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
              }
              *(_DWORD *)uint64_t v27 = 136315138;
              *(void *)&v27[4] = out;
              double v18 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::updatePowerMeterId(int64_t)", "%s\n", v18);
LABEL_37:
              if (v18 != buf) {
                free(v18);
              }
            }
          }
        }
      }
      else
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        int v19 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = *(void *)(a1 + 160);
          uint64_t v21 = *(void *)(a1 + 176);
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = out;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v20;
          __int16 v35 = 2048;
          uint64_t v36 = v26;
          __int16 v37 = 2048;
          uint64_t v38 = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "There is a new power meter id but there is no information about the current session in the db. sessionid, %s, startTime, %f, power meter id, %lld, workout type, %ld", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          uint64_t v22 = *(void *)(a1 + 160);
          uint64_t v23 = *(void *)(a1 + 176);
          *(_DWORD *)uint64_t v27 = 136315906;
          *(void *)&v27[4] = out;
          __int16 v28 = 2048;
          uint64_t v29 = v22;
          __int16 v30 = 2048;
          uint64_t v31 = v26;
          __int16 v32 = 2048;
          uint64_t v33 = v23;
          double v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::updatePowerMeterId(int64_t)", "%s\n", v18);
          goto LABEL_37;
        }
      }
    }
  }
}

void sub_100A0FDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
}

uint64_t sub_100A0FE14(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  int v3 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = v3[4];
    if (v5 < 62) {
      goto LABEL_14;
    }
    v5 %= 0x3EuLL;
    BOOL v6 = (void *)*v2;
    if (!*v2) {
      goto LABEL_14;
    }
    uint64_t v7 = v2;
    do
    {
      uint64_t v8 = v6[4];
      BOOL v9 = v8 < v5;
      if (v8 >= v5) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = v6 + 1;
      }
      if (!v9) {
        uint64_t v7 = v6;
      }
      BOOL v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 == v2 || v5 < v7[4]) {
LABEL_14:
    }
      uint64_t v4 = (uint64_t)(exp2((double)v5) + (double)v4);
    uint64_t v11 = (void *)v3[1];
    if (v11)
    {
      do
      {
        double v12 = v11;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        double v12 = (void *)v3[2];
        BOOL v13 = *v12 == (void)v3;
        int v3 = v12;
      }
      while (!v13);
    }
    int v3 = v12;
  }
  while (v12 != v2);
  return v4;
}

void sub_100A0FF18(uint64_t a1@<X1>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 <= 0x3FFFFFFFFFFFFFFFLL)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 61;
    do
    {
      uint64_t v5 = v4;
      long double v6 = ldexp(1.0, v4);
      uint64_t v7 = v3 - (uint64_t)v6;
      if (v3 >= (uint64_t)v6)
      {
        BOOL v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = *a2;
          uint64_t v12 = v9 - *a2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            uint64_t v16 = (char *)sub_1000DA54C((uint64_t)(a2 + 2), v15);
            uint64_t v11 = *a2;
            BOOL v9 = a2[1];
          }
          else
          {
            uint64_t v16 = 0;
          }
          float v17 = (uint64_t *)&v16[8 * v12];
          *float v17 = v5;
          uint64_t v10 = v17 + 1;
          while (v9 != v11)
          {
            uint64_t v18 = *--v9;
            *--float v17 = v18;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (uint64_t *)&v16[8 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *BOOL v9 = v5;
          uint64_t v10 = v9 + 1;
        }
        a2[1] = v10;
        uint64_t v3 = v7;
      }
      uint64_t v4 = v5 - 1;
    }
    while (v5);
  }
}

void sub_100A10048(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A10068(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    while (1)
    {
      uint64_t v7 = *a3;
      uint64_t v8 = a3[1];
      long long v9 = *(_OWORD *)(v6 + 16);
      v65[0] = *(_OWORD *)v6;
      v65[1] = v9;
      long long v10 = *(_OWORD *)(v6 + 80);
      long long v12 = *(_OWORD *)(v6 + 32);
      long long v11 = *(_OWORD *)(v6 + 48);
      v65[4] = *(_OWORD *)(v6 + 64);
      v65[5] = v10;
      v65[2] = v12;
      v65[3] = v11;
      if (v7 == v8) {
        goto LABEL_22;
      }
      while (uuid_compare((const unsigned __int8 *)v7, (const unsigned __int8 *)v65 + 8))
      {
        v7 += 88;
        if (v7 == v8)
        {
          uint64_t v7 = v8;
          break;
        }
      }
      if (v7 == a3[1])
      {
LABEL_22:
        double v64 = 0.0;
        long long v62 = 0u;
        long long v63 = 0u;
        *(_OWORD *)&dst[16] = *(_OWORD *)(v6 + 24);
        *(void *)&long long v61 = *(void *)(v6 + 40);
        uint64_t v21 = operator new(0x30uLL);
        v21[1] = 0;
        _OWORD v21[2] = 0;
        *uint64_t v21 = off_1022D9E20;
        v21[4] = 0;
        unsigned char v21[5] = 0;
        v21[3] = 0;
        *(void *)&long long v62 = v21 + 3;
        *((void *)&v62 + 1) = v21;
        double v22 = *(double *)(v6 + 56);
        *((void *)&v61 + 1) = *(void *)(v6 + 48);
        if (v22 == -1.0)
        {
          double v23 = *(float *)(a1 + 76);
          double v24 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
          double v25 = v24 + -44.0;
          if (!*(unsigned char *)(a1 + 96)) {
            double v25 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
          }
          if (v25 > v23) {
            double v23 = v25;
          }
          if (v23 >= v24) {
            double v23 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
          }
          *((double *)&v63 + 1) = v23;
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          uint64_t v26 = qword_1024192F8;
          if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "No recorded HRMax, computing from body metrics", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024192F0 != -1) {
              dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
            }
            uint64_t v27 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v27);
            if (v27 != (char *)buf) {
              free(v27);
            }
          }
        }
        else
        {
          *((double *)&v63 + 1) = v22;
        }
        double v28 = *(double *)(v6 + 64);
        if (v28 == -1.0) {
          double v28 = *(float *)(a1 + 72);
        }
        *(double *)&long long v63 = v28;
        uuid_copy(dst, (const unsigned __int8 *)(v6 + 8));
        double v64 = *(float *)(v6 + 72);
        unint64_t v29 = a3[1];
        if (v29 >= a3[2])
        {
          uint64_t v34 = sub_100A137B4(a3, (long long *)dst);
        }
        else
        {
          long long v30 = *(_OWORD *)dst;
          long long v31 = v61;
          *(_OWORD *)(v29 + 16) = *(_OWORD *)&dst[16];
          *(_OWORD *)(v29 + 32) = v31;
          *(_OWORD *)unint64_t v29 = v30;
          *(void *)(v29 + 48) = v62;
          uint64_t v32 = *((void *)&v62 + 1);
          *(void *)(v29 + 56) = *((void *)&v62 + 1);
          if (v32) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
          }
          long long v33 = v63;
          *(double *)(v29 + 80) = v64;
          *(_OWORD *)(v29 + 64) = v33;
          uint64_t v34 = v29 + 88;
        }
        a3[1] = v34;
        if (*((void *)&v62 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v62 + 1));
        }
        goto LABEL_66;
      }
      double v13 = *(double *)(v6 + 24);
      double v14 = *(double *)(v7 + 24);
      if (v13 >= *(double *)(v7 + 16)) {
        double v13 = *(double *)(v7 + 16);
      }
      *(double *)(v7 + 16) = v13;
      double v15 = *(double *)(v6 + 32);
      if (v14 >= v15) {
        double v15 = v14;
      }
      *(double *)(v7 + 24) = v15;
      *(void *)(v7 + 40) = *(void *)(v6 + 48);
      if (*(void *)(v7 + 32) != *(void *)(v6 + 40))
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        uint64_t v16 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v17 = *(void *)(v7 + 32);
          uint64_t v18 = *(void *)(v6 + 40);
          *(_DWORD *)std::string buf = 134218240;
          uint64_t v57 = v17;
          __int16 v58 = 2048;
          uint64_t v59 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "found two workout ids with different workout types when aggregating sessions,%lu,%lu", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          uint64_t v50 = *(void *)(v7 + 32);
          uint64_t v51 = *(void *)(v6 + 40);
          *(_DWORD *)uuid_t dst = 134218240;
          *(void *)&dst[4] = v50;
          *(_WORD *)&dst[12] = 2048;
          *(void *)&dst[14] = v51;
          double v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v52);
          if (v52 != (char *)buf) {
            free(v52);
          }
        }
      }
      double v19 = *(double *)(v7 + 72);
      double v20 = *(double *)(v6 + 56);
      if (v19 != -1.0) {
        break;
      }
      if (v20 != -1.0) {
        goto LABEL_49;
      }
      double v39 = *(float *)(a1 + 76);
      double v40 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      double v41 = v40 + -44.0;
      if (!*(unsigned char *)(a1 + 96)) {
        double v41 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      }
      if (v41 > v39) {
        double v39 = v41;
      }
      if (v39 >= v40) {
        double v39 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      }
      *(double *)(v7 + 72) = v39;
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      char v42 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v43 = *(void *)(v7 + 72);
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v57 = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "No recorded HRMax, computed from body metrics, %f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        uint64_t v44 = *(void *)(v7 + 72);
        *(_DWORD *)uuid_t dst = 134217984;
        *(void *)&dst[4] = v44;
        __int16 v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
      }
LABEL_50:
      double v35 = *(double *)(v7 + 64);
      double v36 = *(double *)(v6 + 64);
      if (v35 == -1.0)
      {
        if (v36 == -1.0)
        {
          *(double *)(v7 + 64) = *(float *)(a1 + 72);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          uint64_t v46 = qword_1024192F8;
          if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v47 = *(void *)(v7 + 64);
            *(_DWORD *)std::string buf = 134217984;
            uint64_t v57 = v47;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "No recorded HRMin, computing from body metrics, %f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024192F0 != -1) {
              dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
            }
            uint64_t v48 = *(void *)(v7 + 64);
            *(_DWORD *)uuid_t dst = 134217984;
            *(void *)&dst[4] = v48;
            __int16 v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v49);
            if (v49 != (char *)buf) {
              free(v49);
            }
          }
          goto LABEL_57;
        }
      }
      else
      {
        if (v36 == -1.0) {
          goto LABEL_57;
        }
        if (v36 >= v35) {
          double v36 = *(double *)(v7 + 64);
        }
      }
      *(double *)(v7 + 64) = v36;
LABEL_57:
      if (*(float *)(v6 + 72) > 0.0)
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        __int16 v37 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v57 = v7;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Two sessions with the same UUID, %s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          *(_DWORD *)uuid_t dst = 136315138;
          *(void *)&dst[4] = v7;
          __int16 v53 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::aggregateSessionDbRows(const std::vector<CLCyclingSessionSummaryDbRow> &) const", "%s\n", v53);
          if (v53 != (char *)buf) {
            free(v53);
          }
        }
        double v38 = *(double *)(v7 + 80);
        if (v38 <= *(float *)(v6 + 72)) {
          double v38 = *(float *)(v6 + 72);
        }
        *(double *)(v7 + 80) = v38;
      }
LABEL_66:
      v6 += 96;
      if (v6 == v5) {
        goto LABEL_100;
      }
    }
    if (v20 == -1.0) {
      goto LABEL_50;
    }
    if (v19 >= v20) {
      double v20 = *(double *)(v7 + 72);
    }
LABEL_49:
    *(double *)(v7 + 72) = v20;
    goto LABEL_50;
  }
LABEL_100:
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v54 = *a3;
    uint64_t v55 = a3[1];
    if (*a3 != v55)
    {
      do
      {
        *(void *)(v54 + 40) = -2;
        v54 += 88;
      }
      while (v54 != v55);
    }
  }
}