uint64_t sub_10147A3B4(uint64_t a1)
{
  int v2;
  char v3;
  NSObject *v4;
  NSObject *v5;
  char *v7;
  uint8_t buf[1640];

  v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 1816) + 16))(*(void *)(a1 + 1816));
  v3 = v2;
  if (v2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Actor sending lockout NILR", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_16:
        v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::modifyNilrHandlingFlags()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return sub_100180260(a1 + 1784, v3);
      }
LABEL_18:
      dispatch_once(&qword_1024193E0, &stru_102327D18);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Actor sending disable NILR lockout", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
  return sub_100180260(a1 + 1784, v3);
}

void sub_10147A64C(uint64_t a1)
{
  uint64_t v2 = 0;
  v3 = "UnknownAction";
  uint64_t v4 = a1 + 1816;
  char v5 = 1;
  while (1)
  {
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8 * v2);
    if (!v7)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v6) {
          v9 = "AML";
        }
        else {
          v9 = (char *)v3;
        }
        sub_100134750(__p, v9);
        v10 = __p;
        if (v19 < 0) {
          v10 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor,checkLocationRegistration,pointer was null for %{public}s", buf, 0xCu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v6) {
          v11 = "AML";
        }
        else {
          v11 = "EED2";
        }
        sub_100134750(buf, v11);
        v12 = buf;
        if (v15 < 0) {
          v12 = *(unsigned char **)buf;
        }
        int v16 = 136446210;
        v17 = v12;
        v13 = (char *)_os_log_send_and_compose_impl();
        if (v15 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::checkLocationRegistration()", "%s\n", v13);
        if (v13 != (char *)__p) {
          free(v13);
        }
      }
      goto LABEL_16;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7)) {
      break;
    }
LABEL_16:
    char v5 = 0;
    v3 = "EED2";
    uint64_t v2 = 1;
    if ((v6 & 1) == 0) {
      goto LABEL_32;
    }
  }
  if (!sub_100D33CD4(a1 + 44))
  {
LABEL_32:
    sub_10147F1F8(a1);
    return;
  }
  if (sub_100D33CD4(a1 + 44)) {
    sub_10147F898(a1);
  }
}

void sub_10147A928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  v10 = "UnknownAction";
  uint64_t v11 = a1 + 1816;
  char v12 = 1;
  do
  {
    char v13 = v12;
    uint64_t v14 = *(void *)(v11 + 8 * v9);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 40))(v14, a2, a3, a4, a5);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      char v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v13) {
          int v16 = "AML";
        }
        else {
          int v16 = (char *)v10;
        }
        sub_100134750(__p, v16);
        v17 = __p;
        if (v26 < 0) {
          v17 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Actor,handleEmergencyCallStatusChange,pointer was null for %{public}s", buf, 0xCu);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v13) {
          v18 = "AML";
        }
        else {
          v18 = "EED2";
        }
        sub_100134750(buf, v18);
        char v19 = buf;
        if (v22 < 0) {
          char v19 = *(unsigned char **)buf;
        }
        int v23 = 136446210;
        v24 = v19;
        v20 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleEmergencyCallStatusChange(NSString *, CLEmergencyController::EmergencyTriggerType, CLEmergencyController::CallStatus, BOOL)", "%s\n", v20);
        if (v20 != (char *)__p) {
          free(v20);
        }
      }
    }
    char v12 = 0;
    v10 = "EED2";
    uint64_t v9 = 1;
  }
  while ((v13 & 1) != 0);
}

void sub_10147ABEC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  char v29 = 0;
  uint64_t v6 = a1 + 1816;
  do
  {
    while (1)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v6 + 8 * v5);
      if (!v8) {
        break;
      }
      if (!(*(unsigned int (**)(uint64_t, int *, uint64_t))(*(void *)v8 + 48))(v8, a2, a3))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v9 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          v10 = "UnknownAction";
          if (v7 == 1) {
            v10 = "EED2";
          }
          if (v7) {
            uint64_t v11 = (char *)v10;
          }
          else {
            uint64_t v11 = "AML";
          }
          sub_100134750(__p, v11);
          if (v35 >= 0) {
            char v12 = __p;
          }
          else {
            char v12 = (void **)__p[0];
          }
          int v13 = *a2;
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = v12;
          __int16 v31 = 1026;
          int v32 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Actor,handleEmergencySettingsChange,%{public}s settings did not change due to CB update for inst %{public}d", buf, 0x12u);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          if (v7) {
            uint64_t v14 = "EED2";
          }
          else {
            uint64_t v14 = "AML";
          }
          sub_100134750(buf, v14);
          char v15 = (char *)_os_log_send_and_compose_impl();
          if (v33 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v15);
LABEL_66:
          if (v15 != (char *)__p) {
            free(v15);
          }
          goto LABEL_40;
        }
        goto LABEL_40;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      v20 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        v21 = "UnknownAction";
        if (v7 == 1) {
          v21 = "EED2";
        }
        if (v7) {
          char v22 = (char *)v21;
        }
        else {
          char v22 = "AML";
        }
        sub_100134750(__p, v22);
        if (v35 >= 0) {
          int v23 = __p;
        }
        else {
          int v23 = (void **)__p[0];
        }
        int v24 = *a2;
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = v23;
        __int16 v31 = 1026;
        int v32 = v24;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Actor,handleEmergencySettingsChange,%{public}s settings changed due to CB update for inst %{public}d", buf, 0x12u);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v7) {
          char v26 = "EED2";
        }
        else {
          char v26 = "AML";
        }
        sub_100134750(buf, v26);
        v27 = (char *)_os_log_send_and_compose_impl();
        if (v33 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v27);
        if (v27 != (char *)__p) {
          free(v27);
        }
      }
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 24))(*(void *)(v6 + 8 * v7));
      uint64_t v5 = 1;
      char v29 = 1;
      if (v7) {
        goto LABEL_78;
      }
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    int v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      v17 = "UnknownAction";
      if (v7 == 1) {
        v17 = "EED2";
      }
      if (v7) {
        v18 = (char *)v17;
      }
      else {
        v18 = "AML";
      }
      sub_100134750(__p, v18);
      if (v35 >= 0) {
        char v19 = __p;
      }
      else {
        char v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#Actor,handleEmergencySettingsChange,pointer was null for %{public}s", buf, 0xCu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      if (v7) {
        v25 = "EED2";
      }
      else {
        v25 = "AML";
      }
      sub_100134750(buf, v25);
      char v15 = (char *)_os_log_send_and_compose_impl();
      if (v33 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v15);
      goto LABEL_66;
    }
LABEL_40:
    uint64_t v5 = 1;
  }
  while (!v7);
  if ((v29 & 1) == 0) {
    return;
  }
LABEL_78:
  sub_10147A3B4(a1);
  sub_10147A64C(a1);
}

uint64_t *sub_10147B28C(uint64_t a1, int a2, int a3)
{
  v11[0] = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 1026;
    int v16 = a2;
    __int16 v17 = 1026;
    int v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor handleInHomeCountryStatus\", \"inst\":%{public}d, \"inHomeCountry\":%{public}hhd}", buf, 0x1Eu);
  }
  uint64_t v7 = (void *)(a1 + 1728);
  if (!sub_10011853C(v7, v11))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11[0];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor handleInHomeCountryStatus called with unexpected inst instance %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      v11[1] = 67109120;
      v11[2] = v11[0];
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleInHomeCountryStatus(const SimInstance, const BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  *(void *)buf = v11;
  result = sub_100117344((uint64_t)v7, v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  *((unsigned char *)result + 28) = a3;
  return result;
}

void sub_10147B524(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v24 = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    __int16 v30 = 2082;
    __int16 v31 = "";
    __int16 v32 = 1026;
    signed int v33 = a2;
    __int16 v34 = 1026;
    int v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor handleSatRegStatusChange\", \"inst\":%{public}d, \"isSatSystem\":%{public}hhd}", buf, 0x1Eu);
  }
  uint64_t v6 = a1 + 1728;
  if (!sub_10011853C((void *)(a1 + 1728), (int *)&v24))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Actor handleSatRegStatusChange called with unexpected inst instance %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      *(_DWORD *)v25 = 67109120;
      *(_DWORD *)&v25[4] = v24;
      char v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleSatRegStatusChange(const SimInstance, const BOOL)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  *(void *)buf = &v24;
  if (((*((unsigned char *)sub_100117344(v6, (int *)&v24, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 29) != 0) ^ a3))
  {
    *(void *)buf = &v24;
    uint64_t v8 = sub_100117344(v6, (int *)&v24, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    uint64_t v9 = 0;
    *((unsigned char *)v8 + 29) = a3;
    v10 = "UnknownAction";
    char v11 = 1;
    do
    {
      char v12 = v11;
      uint64_t v13 = *(void *)(a1 + 1816 + 8 * v9);
      if (v13)
      {
        (*(void (**)(uint64_t, void))(*(void *)v13 + 136))(v13, v24);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v14 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          if (v12) {
            __int16 v15 = "AML";
          }
          else {
            __int16 v15 = (char *)v10;
          }
          sub_100134750(buf, v15);
          int v16 = buf;
          if (v33 < 0) {
            int v16 = *(uint8_t **)buf;
          }
          *(_DWORD *)v25 = 136446210;
          *(void *)&v25[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Actor,handleEmergencyCallStatusChange,pointer was null for %{public}s", v25, 0xCu);
          if (SHIBYTE(v33) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          if (v12) {
            __int16 v17 = "AML";
          }
          else {
            __int16 v17 = "EED2";
          }
          sub_100134750(v25, v17);
          int v18 = v25;
          if (v26 < 0) {
            int v18 = *(unsigned char **)v25;
          }
          int v27 = 136446210;
          v28 = v18;
          char v19 = (char *)_os_log_send_and_compose_impl();
          if (v26 < 0) {
            operator delete(*(void **)v25);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleSatRegStatusChange(const SimInstance, const BOOL)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
      char v11 = 0;
      v10 = "EED2";
      uint64_t v9 = 1;
    }
    while ((v12 & 1) != 0);
    sub_10147A3B4(a1);
    sub_10147A64C(a1);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Actor SAT value unchanged %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      *(_DWORD *)v25 = 67240192;
      *(_DWORD *)&v25[4] = a3;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handleSatRegStatusChange(const SimInstance, const BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

double sub_10147BB7C(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 41) = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 41);
    *(_DWORD *)buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    char v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor handleLocationServicesStatusChange\", \"fLocationServicesEnabled\":%{public}hhd}", buf, 0x18u);
  }
  if (!*(unsigned char *)(a1 + 41))
  {
    if (sub_100D33D08(a1 + 44))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Actor clearing cached location due to LS off", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_20;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handleLocationServicesStatusChange(const BOOL)", "%s\n");
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor LS unexpectedly turned off during an emergency, still clearing cached location", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_20;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleLocationServicesStatusChange(const BOOL)", "%s\n");
    }
    if (v7 != buf) {
      free(v7);
    }
LABEL_20:
    sub_100F40DB8(a1 + 64);
    *(void *)&double result = sub_100F40DB8(a1 + 864).n128_u64[0];
  }
  return result;
}

void sub_10147BED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 0;
  char v12 = "UnknownAction";
  uint64_t v13 = a1 + 1816;
  char v14 = 1;
  do
  {
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8 * v11);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 56))(v16, a2, a3, a4, a5, a6);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      __int16 v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v15) {
          int v18 = "AML";
        }
        else {
          int v18 = (char *)v12;
        }
        sub_100134750(__p, v18);
        char v19 = __p;
        if (v28 < 0) {
          char v19 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Actor,handleSmsNotification,pointer was null for %{public}s", buf, 0xCu);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v15) {
          v20 = "AML";
        }
        else {
          v20 = "EED2";
        }
        sub_100134750(buf, v20);
        v21 = buf;
        if (v24 < 0) {
          v21 = *(unsigned char **)buf;
        }
        int v25 = 136446210;
        char v26 = v21;
        char v22 = (char *)_os_log_send_and_compose_impl();
        if (v24 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleSmsNotification(SimInstance, BOOL, uint32_t, int32_t, int32_t)", "%s\n", v22);
        if (v22 != (char *)__p) {
          free(v22);
        }
      }
    }
    char v14 = 0;
    char v12 = "EED2";
    uint64_t v11 = 1;
  }
  while ((v15 & 1) != 0);
}

void sub_10147C1A4(uint64_t a1, int a2, const std::string *a3, const std::string *a4)
{
  int v13 = a2;
  uint64_t v6 = a1 + 1728;
  if (!sub_10011853C((void *)(a1 + 1728), &v13))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Actor handleSimStatusChange called with unexpected instance %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v14 = 67109120;
      int v15 = v13;
      char v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleSimStatusChange(SimInstance, const std::string &, const std::string &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  *(void *)buf = &v13;
  uint64_t v8 = sub_100117344(v6, &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Actor updating IMSI and IMEI %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    int v14 = 67240192;
    int v15 = v13;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handleSimStatusChange(SimInstance, const std::string &, const std::string &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v10 = (uint64_t)(v8 + 3);
  sub_1014785D8(v10, a3);
  sub_1014787A0(v10, a4);
}

void sub_10147C510(std::string *a1, int a2, int a3, int a4)
{
  v17[0] = a2;
  uint64_t v7 = (uint64_t)&a1[72];
  if (!sub_10011853C(a1[72].__r_.__value_.__r.__words, v17))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v17[0];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor handleSubscriberMccAndMncNotification called with unexpected inst %d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      v17[1] = 67109120;
      v17[2] = v17[0];
      uint64_t v16 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleSubscriberMccAndMncNotification(SimInstance, int32_t, int32_t)", "%s\n", (const char *)v16);
      if (v16 != &buf) {
        free(v16);
      }
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  uint64_t v9 = sub_100117344(v7, v17, (uint64_t)&unk_101D0B290, &buf);
  *((_DWORD *)v9 + 14) = a3;
  *((_DWORD *)v9 + 15) = a4;
  sub_1014785D8((uint64_t)(v9 + 3), (const std::string *)(v9 + 8));
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *((_DWORD *)v9 + 14);
    int v12 = *((_DWORD *)v9 + 15);
    buf.__r_.__value_.__r.__words[0] = 68289795;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v17[0];
    __int16 v19 = 1025;
    int v20 = v11;
    __int16 v21 = 1025;
    int v22 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor sim MCC and MNC updated\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d}", (uint8_t *)&buf, 0x24u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  int v13 = sub_100981438((uint64_t)&a1[69].__r_.__value_.__l.__size_, v17, (uint64_t)&unk_101D0B290, &buf);
  id v14 = sub_10147C89C((uint64_t)(v13 + 3), *((unsigned int *)v9 + 14));
  if (v14)
  {
    sub_100134750(&buf, (char *)[v14 UTF8String]);
    std::string::operator=((std::string *)(v9 + 20), &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    int v15 = (const std::string *)sub_100981438((uint64_t)&a1[69].__r_.__value_.__l.__size_, v17, (uint64_t)&unk_101D0B290, &buf);
    std::string::operator=((std::string *)(v9 + 20), v15 + 1);
  }
  sub_10147CCF8(a1, a1 + 71);
}

void sub_10147C878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10147C89C(uint64_t a1, uint64_t a2)
{
  if ((a2 - 1000) <= 0xFFFFFC18)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,invalid MCC", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_38;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,phone number is empty", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_38;
  }
  [+[NSNumber numberWithInt:a2] stringValue];
  uint64_t v5 = TUISOCountryCodeForMCC();
  if (!v5)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,country code is not valid", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_38;
  }
  id result = sub_10147D04C((uint64_t *)a1, v5);
  if (result) {
    return result;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to format number based on country code", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_36:
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static NSString *CLEmergencyActor::getE164FormattedPhoneNumber(const std::string &, int32_t)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
LABEL_38:
    dispatch_once(&qword_1024193E0, &stru_102327D18);
    goto LABEL_36;
  }
  return 0;
}

void sub_10147CCF8(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 71, a2);
  LODWORD(v17.__r_.__value_.__l.__data_) = 0;
  __p[0] = &v17;
  uint64_t v4 = sub_100117344((uint64_t)&a1[72], (int *)&v17, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
  id v5 = sub_10147C89C((uint64_t)a2, *((unsigned int *)v4 + 14));
  memset(&v17, 0, sizeof(v17));
  if (v5) {
    std::string::assign(&v17, (const std::string::value_type *)[v5 UTF8String]);
  }
  else {
    std::string::operator=(&v17, a2);
  }
  uint64_t v6 = 0;
  uint64_t v7 = "UnknownAction";
  char v8 = 1;
  do
  {
    char v9 = v8;
    std::string::size_type v10 = a1[75].__r_.__value_.__r.__words[v6 + 2];
    if (v10)
    {
      (*(void (**)(std::string::size_type, std::string *))(*(void *)v10 + 80))(v10, &v17);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v12 = (v9 & 1) != 0 ? "AML" : (char *)v7;
        sub_100134750(__p, v12);
        int v13 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Actor,handleCompanionNumberChange,pointer was null for %{public}s", buf, 0xCu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v9) {
          id v14 = "AML";
        }
        else {
          id v14 = "EED2";
        }
        sub_100134750(buf, v14);
        int v15 = buf;
        if (v19 < 0) {
          int v15 = *(unsigned char **)buf;
        }
        int v20 = 136446210;
        __int16 v21 = v15;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        if (v19 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleCompanionNumberChange(const std::string &)", "%s\n", v16);
        if (v16 != (char *)__p) {
          free(v16);
        }
      }
    }
    char v8 = 0;
    uint64_t v7 = "EED2";
    uint64_t v6 = 1;
  }
  while ((v9 & 1) != 0);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_10147D018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10147D04C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a2 || !a1[1])
    {
LABEL_13:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,input missing", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_34:
        std::string::size_type v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static NSString *CLEmergencyActor::getE164FormattedPhoneNumber(const std::string &, NSString *)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return 0;
      }
LABEL_36:
      dispatch_once(&qword_1024193E0, &stru_102327D18);
      goto LABEL_34;
    }
    uint64_t v2 = (uint64_t *)*a1;
  }
  else if (!a2 || !*((unsigned char *)a1 + 23))
  {
    goto LABEL_13;
  }
  +[NSString stringWithUTF8String:v2];
  uint64_t v3 = CFPhoneNumberCreate();
  if (!v3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    char v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to create CFPhoneNumber", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_34;
    }
    goto LABEL_36;
  }
  uint64_t v4 = (const void *)v3;
  String = (void *)CFPhoneNumberCreateString();
  CFRelease(v4);
  if (!String)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    char v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#Actor,getE164FormattedPhoneNumber,failed to create formated phone number", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_34;
    }
    goto LABEL_36;
  }

  return String;
}

void sub_10147D430(uint64_t a1, unsigned int a2, const std::string *a3)
{
  unsigned int v26 = a2;
  uint64_t v5 = a1 + 1728;
  if (!sub_10011853C((void *)(a1 + 1728), (int *)&v26))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v26;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Actor handlePhoneNumberChange called with unexpected instance %d", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      *(_DWORD *)int v27 = 67109120;
      *(_DWORD *)&v27[4] = v26;
      int v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handlePhoneNumberChange(SimInstance, const std::string)", "%s\n", (const char *)v25);
      if (v25 != buf) {
        free(v25);
      }
    }
  }
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  uint64_t v7 = (std::string *)sub_100981438(a1 + 1664, (int *)&v26, (uint64_t)&unk_101D0B290, buf);
  std::string::operator=(v7 + 1, a3);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  char v8 = sub_100117344(v5, (int *)&v26, (uint64_t)&unk_101D0B290, buf);
  id v9 = sub_10147C89C((uint64_t)a3, *((unsigned int *)v8 + 14));
  if (v9)
  {
    sub_100134750(buf, (char *)[v9 UTF8String]);
    std::string::operator=((std::string *)(v8 + 20), buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::operator=((std::string *)(v8 + 20), a3);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  std::string::size_type v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = v8 + 20;
    if (*((char *)v8 + 183) < 0) {
      int v11 = (void *)*v11;
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109379;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v26;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Actor phone number changed %d, phone number, %{private}s", (uint8_t *)buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    char v23 = v8 + 20;
    if (*((char *)v8 + 183) < 0) {
      char v23 = (void *)*v23;
    }
    *(_DWORD *)int v27 = 67109379;
    *(_DWORD *)&v27[4] = v26;
    *(_WORD *)&v27[8] = 2081;
    *(void *)&v27[10] = v23;
    char v24 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handlePhoneNumberChange(SimInstance, const std::string)", "%s\n", (const char *)v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  uint64_t v12 = 0;
  int v13 = "UnknownAction";
  char v14 = 1;
  do
  {
    char v15 = v14;
    uint64_t v16 = *(void *)(a1 + 1816 + 8 * v12);
    if (v16)
    {
      (*(void (**)(uint64_t, void))(*(void *)v16 + 72))(v16, v26);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      std::string v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v18 = (v15 & 1) != 0 ? "AML" : (char *)v13;
        sub_100134750(buf, v18);
        char v19 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? buf
            : (std::string *)buf[0].__r_.__value_.__r.__words[0];
        *(_DWORD *)int v27 = 136446210;
        *(void *)&v27[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Actor,handlePhoneNumberChange,pointer was null for %{public}s", v27, 0xCu);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v15) {
          int v20 = "AML";
        }
        else {
          int v20 = "EED2";
        }
        sub_100134750(v27, v20);
        __int16 v21 = v27;
        if (v28 < 0) {
          __int16 v21 = *(unsigned char **)v27;
        }
        int v29 = 136446210;
        __int16 v30 = v21;
        int v22 = (std::string *)_os_log_send_and_compose_impl();
        if (v28 < 0) {
          operator delete(*(void **)v27);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handlePhoneNumberChange(SimInstance, const std::string)", "%s\n", (const char *)v22);
        if (v22 != buf) {
          free(v22);
        }
      }
    }
    char v14 = 0;
    int v13 = "EED2";
    uint64_t v12 = 1;
  }
  while ((v15 & 1) != 0);
}

void sub_10147DA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10147DA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = "UnknownAction";
  uint64_t v5 = a1 + 1816;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 88))(v8, a2);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      id v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v7) {
          std::string::size_type v10 = "AML";
        }
        else {
          std::string::size_type v10 = (char *)v4;
        }
        sub_100134750(__p, v10);
        int v11 = __p;
        if (v20 < 0) {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleBatteryStatusChange,pointer was null for %{public}s", buf, 0xCu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v7) {
          uint64_t v12 = "AML";
        }
        else {
          uint64_t v12 = "EED2";
        }
        sub_100134750(buf, v12);
        int v13 = buf;
        if (v16 < 0) {
          int v13 = *(unsigned char **)buf;
        }
        int v17 = 136446210;
        int v18 = v13;
        char v14 = (char *)_os_log_send_and_compose_impl();
        if (v16 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleBatteryStatusChange(const Battery &)", "%s\n", v14);
        if (v14 != (char *)__p) {
          free(v14);
        }
      }
    }
    char v6 = 0;
    uint64_t v4 = "EED2";
    uint64_t v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_10147DD38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = "UnknownAction";
  uint64_t v5 = a1 + 1816;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 96))(v8, a2);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      id v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v7) {
          std::string::size_type v10 = "AML";
        }
        else {
          std::string::size_type v10 = (char *)v4;
        }
        sub_100134750(__p, v10);
        int v11 = __p;
        if (v20 < 0) {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleReachability,pointer was null for %{public}s", buf, 0xCu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v7) {
          uint64_t v12 = "AML";
        }
        else {
          uint64_t v12 = "EED2";
        }
        sub_100134750(buf, v12);
        int v13 = buf;
        if (v16 < 0) {
          int v13 = *(unsigned char **)buf;
        }
        int v17 = 136446210;
        int v18 = v13;
        char v14 = (char *)_os_log_send_and_compose_impl();
        if (v16 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleReachability(const CLDaemonStatus_Type::Reachability)", "%s\n", v14);
        if (v14 != (char *)__p) {
          free(v14);
        }
      }
    }
    char v6 = 0;
    uint64_t v4 = "EED2";
    uint64_t v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_10147DFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = "UnknownAction";
  uint64_t v5 = a1 + 1816;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = *(void *)(v5 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 104))(v8, a2);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      id v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v7) {
          std::string::size_type v10 = "AML";
        }
        else {
          std::string::size_type v10 = (char *)v4;
        }
        sub_100134750(__p, v10);
        int v11 = __p;
        if (v20 < 0) {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleVlqmForActiveCall,pointer was null for %{public}s", buf, 0xCu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v7) {
          uint64_t v12 = "AML";
        }
        else {
          uint64_t v12 = "EED2";
        }
        sub_100134750(buf, v12);
        int v13 = buf;
        if (v16 < 0) {
          int v13 = *(unsigned char **)buf;
        }
        int v17 = 136446210;
        int v18 = v13;
        char v14 = (char *)_os_log_send_and_compose_impl();
        if (v16 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleVlqmForActiveCall(std::unordered_map<SimInstance, int32_t> &)", "%s\n", v14);
        if (v14 != (char *)__p) {
          free(v14);
        }
      }
    }
    char v6 = 0;
    uint64_t v4 = "EED2";
    uint64_t v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_10147E290(uint64_t a1, char a2)
{
  byte_10248D718 = a2;
}

void sub_10147E29C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 1816;
  uint64_t v5 = "UnknownAction";
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = *(void *)(v4 + 8 * v3);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 120))(v8, a2);
    }
    else if (_os_feature_enabled_impl())
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      id v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (v7) {
          std::string::size_type v10 = "AML";
        }
        else {
          std::string::size_type v10 = (char *)v5;
        }
        sub_100134750(__p, v10);
        int v11 = __p;
        if (v20 < 0) {
          int v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Actor,handleStewieSupportChange,pointer was null for %{public}s", buf, 0xCu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v7) {
          uint64_t v12 = "AML";
        }
        else {
          uint64_t v12 = "EED2";
        }
        sub_100134750(buf, v12);
        int v13 = buf;
        if (v16 < 0) {
          int v13 = *(unsigned char **)buf;
        }
        int v17 = 136446210;
        int v18 = v13;
        char v14 = (char *)_os_log_send_and_compose_impl();
        if (v16 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleStewieSupportChange(const BOOL)", "%s\n", v14);
        if (v14 != (char *)__p) {
          free(v14);
        }
      }
    }
    char v6 = 0;
    uint64_t v5 = "EED2";
    uint64_t v3 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_10147E564(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  unsigned int v27 = a2;
  uint64_t v4 = a1 + 1728;
  if (!sub_10011853C((void *)(a1 + 1728), (int *)&v27))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Actor handleImsRegStatusChange called with unexpected inst instance %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      *(_DWORD *)char v28 = 67240192;
      *(_DWORD *)&v28[4] = v27;
      int v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  *(void *)std::string buf = &v27;
  if (*a3 == *((unsigned char *)sub_100117344(v4, (int *)&v27, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 30))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    char v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Actor sms over ims reg value unchanged %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v8 = *a3;
      *(_DWORD *)char v28 = 67240192;
      *(_DWORD *)&v28[4] = v8;
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    *(void *)std::string buf = &v27;
    uint64_t v10 = 0;
    int v11 = "UnknownAction";
    uint64_t v12 = a1 + 1816;
    *((unsigned char *)sub_100117344(v4, (int *)&v27, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 30) = *a3;
    char v13 = 1;
    do
    {
      char v14 = v13;
      if (*(void *)(v12 + 8 * v10))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        char v15 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = *a3;
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Actor with sms over ims reg value %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          int v20 = *a3;
          *(_DWORD *)char v28 = 67240192;
          *(_DWORD *)&v28[4] = v20;
          __int16 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        (*(void (**)(void, void))(**(void **)(v12 + 8 * v10) + 128))(*(void *)(v12 + 8 * v10), v27);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        int v17 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          if (v14) {
            int v18 = "AML";
          }
          else {
            int v18 = (char *)v11;
          }
          sub_100134750(buf, v18);
          char v19 = buf;
          if (v33 < 0) {
            char v19 = *(uint8_t **)buf;
          }
          *(_DWORD *)char v28 = 136446210;
          *(void *)&v28[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Actor,handleImsRegStatusChange,pointer was null for %{public}s", v28, 0xCu);
          if (v33 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          if (v14) {
            int v22 = "AML";
          }
          else {
            int v22 = "EED2";
          }
          sub_100134750(v28, v22);
          char v23 = v28;
          if (v29 < 0) {
            char v23 = *(unsigned char **)v28;
          }
          int v30 = 136446210;
          __int16 v31 = v23;
          char v24 = (char *)_os_log_send_and_compose_impl();
          if (v29 < 0) {
            operator delete(*(void **)v28);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleImsRegStatusChange(SimInstance, const CLCTImsRegStatus &)", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
      }
      char v13 = 0;
      int v11 = "EED2";
      uint64_t v10 = 1;
    }
    while ((v14 & 1) != 0);
    sub_10147A3B4(a1);
    sub_10147A64C(a1);
  }
}

void sub_10147EC7C(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102327D38);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyActor::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102327D38);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      char v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyActor::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101480080((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10147EE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10147EE58(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102327D38);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v12 = 1;
    id v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyActor::onWifiLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102327D38);
    }
    uint64_t v10 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::string buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      int v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyActor::onWifiLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_1014820D8(v6, v7, v8, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10147F008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10147F028(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102327D38);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v12 = 1;
    id v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyActor::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102327D38);
    }
    uint64_t v10 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::string buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      int v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyActor::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_1014822E4(v6, v7, v8, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10147F1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10147F1F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(void *)(a1 + 16))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v2 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor unregistering for location notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
      [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:4];
      [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:33];
    }
    if (*(void *)(a1 + 24))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v3 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Actor unregistering for WiFi location notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      [*(id *)(*(void *)(a1 + 24) + 16) unregister:*(void *)(*(void *)(a1 + 24) + 8) forNotification:0];
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Actor unregistering - WiFi client NULL", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    if (*(void *)(a1 + 32))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Actor unregistering for Cell location notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        id v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      [*(id *)(*(void *)(a1 + 32) + 16) unregister:*(void *)(*(void *)(a1 + 32) + 8) forNotification:0];
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      BOOL v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Actor unregistering - Cell client NULL", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        char v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::unregisterForLocation()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    *(unsigned char *)(a1 + 40) = 0;
  }
}

void sub_10147F898(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (!*(unsigned char *)(a1 + 40))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v2 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Actor registering for location notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        id v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::registerForLocation()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:4 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:33 registrationInfo:0];
      if (*(void *)(a1 + 24))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v3 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Actor registering for WiFi location notification", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::registerForLocation()", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
        [*(id *)(*(void *)(a1 + 24) + 16) register:*(void *)(*(void *)(a1 + 24) + 8) forNotification:0 registrationInfo:0];
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        BOOL v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Actor registering - WiFi client NULL", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          char v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::registerForLocation()", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
      }
      if (*(void *)(a1 + 32))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v7 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Actor registering for Cell location notification", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          char v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::registerForLocation()", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
        [*(id *)(*(void *)(a1 + 32) + 16) register:*(void *)(*(void *)(a1 + 32) + 8) forNotification:0 registrationInfo:0];
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Actor registering - Cell client NULL", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::registerForLocation()", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      *(unsigned char *)(a1 + 40) = 1;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Actor attempted to register for location notification without a client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::registerForLocation()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_101480080(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7 = *a3;
  if (!*a3) {
    goto LABEL_4;
  }
  if (v7 == 4) {
    return;
  }
  if (v7 != 33)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    char v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning #Actor received unexpected notification %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      __int16 v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v31);
      if (v31 != buf) {
        free(v31);
      }
    }
  }
  else
  {
LABEL_4:
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Actor received new fix", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
    *(_DWORD *)std::string buf = 0xFFFF;
    *(void *)&unsigned char buf[12] = 0;
    *(void *)&uint8_t buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&std::string buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    long long v33 = 0uLL;
    *(void *)&buf[88] = 0xBFF0000000000000;
    *(void *)((char *)&v34 + 4) = 0xBFF0000000000000;
    LODWORD(v34) = 0;
    HIDWORD(v34) = 0x7FFFFFFF;
    memset(v35, 0, 25);
    sub_1000DBC34(v36);
    long long v14 = *(_OWORD *)(a4 + 112);
    long long v33 = *(_OWORD *)(a4 + 96);
    long long v34 = v14;
    *(_OWORD *)int v35 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v35[12] = *(_OWORD *)(a4 + 140);
    long long v15 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&buf[48] = v15;
    long long v16 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&buf[80] = v16;
    long long v17 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)std::string buf = *(_OWORD *)a4;
    *(_OWORD *)&buf[16] = v17;
    memcpy(v18, (const void *)(a4 + 160), 0x201uLL);
    uint64_t v19 = *(void *)(a4 + 680);
    int v20 = *(std::__shared_weak_count **)(a4 + 688);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v36[65] = v19;
    __int16 v21 = v37;
    v37 = v20;
    if (v21) {
      sub_1000DB0A0(v21);
    }
    long long v22 = *(_OWORD *)(a4 + 776);
    long long v42 = *(_OWORD *)(a4 + 760);
    v43[0] = v22;
    *(void *)((char *)v43 + 13) = *(void *)(a4 + 789);
    long long v23 = *(_OWORD *)(a4 + 712);
    long long v38 = *(_OWORD *)(a4 + 696);
    long long v39 = v23;
    if (*a3) {
      char v24 = &unk_102487CA8;
    }
    else {
      char v24 = &unk_102487C90;
    }
    long long v25 = *(_OWORD *)(a4 + 744);
    if (*a3) {
      unsigned int v26 = (uint64_t *)&unk_102487CD8;
    }
    else {
      unsigned int v26 = (uint64_t *)&unk_102487CC0;
    }
    if (*a3) {
      uint64_t v27 = a1 + 864;
    }
    else {
      uint64_t v27 = a1 + 64;
    }
    long long v40 = *(_OWORD *)(a4 + 728);
    long long v41 = v25;
    sub_101480504(a1, (uint64_t)v24, v26, (uint64_t)buf, v27, a3);
    if (v37) {
      sub_1000DB0A0(v37);
    }
  }
}

void sub_1014804E4(_Unwind_Exception *a1)
{
  if (STACK[0x2D0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2D0]);
  }
  _Unwind_Resume(a1);
}

void sub_101480504(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  *(_OWORD *)v116 = *(_OWORD *)a4;
  *(_OWORD *)&v116[12] = *(_OWORD *)(a4 + 12);
  int8x16_t v96 = *(int8x16_t *)(a4 + 28);
  long long v12 = *(_OWORD *)(a4 + 92);
  long long v13 = *(_OWORD *)(a4 + 124);
  long long v155 = *(_OWORD *)(a4 + 108);
  long long v156 = v13;
  long long v157 = *(_OWORD *)(a4 + 140);
  long long v14 = *(_OWORD *)(a4 + 60);
  long long v151 = *(_OWORD *)(a4 + 44);
  long long v152 = v14;
  long long v15 = *(_OWORD *)(a4 + 76);
  long long v154 = v12;
  long long v153 = v15;
  memcpy(v158, (const void *)(a4 + 160), sizeof(v158));
  int v16 = *(_DWORD *)(a4 + 472);
  float v17 = *(float *)(a4 + 476);
  long long v113 = *(_OWORD *)(a4 + 640);
  long long v114 = *(_OWORD *)(a4 + 656);
  char v115 = *(unsigned char *)(a4 + 672);
  long long v109 = *(_OWORD *)(a4 + 576);
  long long v110 = *(_OWORD *)(a4 + 592);
  long long v111 = *(_OWORD *)(a4 + 608);
  long long v112 = *(_OWORD *)(a4 + 624);
  long long v105 = *(_OWORD *)(a4 + 512);
  long long v106 = *(_OWORD *)(a4 + 528);
  long long v107 = *(_OWORD *)(a4 + 544);
  long long v108 = *(_OWORD *)(a4 + 560);
  long long v103 = *(_OWORD *)(a4 + 480);
  long long v104 = *(_OWORD *)(a4 + 496);
  uint64_t v18 = *(void *)(a4 + 680);
  uint64_t v19 = *(std::__shared_weak_count **)(a4 + 688);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v95 = v19;
  long long v101 = *(_OWORD *)(a4 + 760);
  *(_OWORD *)v102 = *(_OWORD *)(a4 + 776);
  *(void *)&v102[13] = *(void *)(a4 + 789);
  long long v97 = *(_OWORD *)(a4 + 696);
  long long v98 = *(_OWORD *)(a4 + 712);
  long long v99 = *(_OWORD *)(a4 + 728);
  long long v100 = *(_OWORD *)(a4 + 744);
  BOOL v20 = sub_1014810EC((uint64_t *)a2, a4);
  if (v20)
  {
    if (*a6 != 33 || sub_101481848(v20, (uint64_t *)a2, a4))
    {
      uint64_t v21 = sub_1014810EC(a3, a5);
      if (v21) {
        uint64_t v21 = sub_101481F4C();
      }
      BOOL v22 = sub_101481848(v21, (uint64_t *)a2, a4);
      if (v22)
      {
        int v23 = v16;
      }
      else
      {
        float v17 = 0.0;
        int v23 = -1;
      }
      if (v22) {
        unint64_t v24 = -1;
      }
      else {
        unint64_t v24 = 0;
      }
      *(_OWORD *)a5 = *(_OWORD *)v116;
      *(_OWORD *)(a5 + 12) = *(_OWORD *)&v116[12];
      *(int8x16_t *)(a5 + 28) = vbslq_s8((int8x16_t)vdupq_n_s64(v24), v96, (int8x16_t)xmmword_101D1C570);
      long long v25 = v153;
      *(_OWORD *)(a5 + 92) = v154;
      long long v26 = v156;
      *(_OWORD *)(a5 + 108) = v155;
      *(_OWORD *)(a5 + 124) = v26;
      *(_OWORD *)(a5 + 140) = v157;
      long long v27 = v152;
      *(_OWORD *)(a5 + 44) = v151;
      *(_OWORD *)(a5 + 60) = v27;
      *(_OWORD *)(a5 + 76) = v25;
      memcpy((void *)(a5 + 160), v158, 0x138uLL);
      *(_DWORD *)(a5 + 472) = v23;
      *(float *)(a5 + 476) = v17;
      *(_OWORD *)(a5 + 640) = v113;
      *(_OWORD *)(a5 + 656) = v114;
      *(unsigned char *)(a5 + 672) = v115;
      *(_OWORD *)(a5 + 576) = v109;
      *(_OWORD *)(a5 + 592) = v110;
      *(_OWORD *)(a5 + 608) = v111;
      *(_OWORD *)(a5 + 624) = v112;
      *(_OWORD *)(a5 + 512) = v105;
      *(_OWORD *)(a5 + 528) = v106;
      *(_OWORD *)(a5 + 544) = v107;
      *(_OWORD *)(a5 + 560) = v108;
      *(_OWORD *)(a5 + 480) = v103;
      *(_OWORD *)(a5 + 496) = v104;
      if (v95) {
        atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)(a5 + 680) = v18;
      char v28 = *(std::__shared_weak_count **)(a5 + 688);
      *(void *)(a5 + 688) = v95;
      if (v28) {
        sub_1000DB0A0(v28);
      }
      *(_OWORD *)(a5 + 760) = v101;
      *(_OWORD *)(a5 + 776) = *(_OWORD *)v102;
      *(void *)(a5 + 789) = *(void *)&v102[13];
      *(_OWORD *)(a5 + 696) = v97;
      *(_OWORD *)(a5 + 712) = v98;
      *(_OWORD *)(a5 + 728) = v99;
      *(_OWORD *)(a5 + 744) = v100;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v30 = a2;
        }
        else {
          uint64_t v30 = *(void *)a2;
        }
        uint64_t v31 = *(void *)(a5 + 4);
        uint64_t v32 = *(void *)(a5 + 12);
        uint64_t v33 = *(void *)(a5 + 20);
        uint64_t v34 = *(void *)(a5 + 28);
        uint64_t v35 = *(void *)(a5 + 36);
        uint64_t v36 = *(void *)(a5 + 44);
        uint64_t v37 = *(void *)(a5 + 60);
        int v38 = *(_DWORD *)(a5 + 96);
        *(_DWORD *)std::string buf = 136317187;
        *(void *)&uint8_t buf[4] = v30;
        __int16 v135 = 2049;
        uint64_t v136 = v31;
        __int16 v137 = 2049;
        uint64_t v138 = v32;
        __int16 v139 = 2050;
        uint64_t v140 = v33;
        __int16 v141 = 2049;
        uint64_t v142 = v34;
        __int16 v143 = 2050;
        uint64_t v144 = v35;
        __int16 v145 = 2049;
        uint64_t v146 = v36;
        __int16 v147 = 2049;
        uint64_t v148 = v37;
        __int16 v149 = 1026;
        int v150 = v38;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Actor cached %s fix,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,alt,%{private}.7f,vacc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", buf, 0x58u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v85 = a2;
        }
        else {
          uint64_t v85 = *(void *)a2;
        }
        uint64_t v86 = *(void *)(a5 + 4);
        uint64_t v87 = *(void *)(a5 + 12);
        uint64_t v88 = *(void *)(a5 + 20);
        uint64_t v89 = *(void *)(a5 + 28);
        uint64_t v90 = *(void *)(a5 + 36);
        uint64_t v91 = *(void *)(a5 + 44);
        uint64_t v92 = *(void *)(a5 + 60);
        int v93 = *(_DWORD *)(a5 + 96);
        *(_DWORD *)v117 = 136317187;
        *(void *)&v117[4] = v85;
        __int16 v118 = 2049;
        uint64_t v119 = v86;
        __int16 v120 = 2049;
        uint64_t v121 = v87;
        __int16 v122 = 2050;
        uint64_t v123 = v88;
        __int16 v124 = 2049;
        uint64_t v125 = v89;
        __int16 v126 = 2050;
        uint64_t v127 = v90;
        __int16 v128 = 2049;
        uint64_t v129 = v91;
        __int16 v130 = 2049;
        uint64_t v131 = v92;
        __int16 v132 = 1026;
        int v133 = v93;
        v94 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v94);
        if (v94 != buf) {
          free(v94);
        }
      }
      uint64_t v39 = 0;
      uint64_t v40 = a1 + 1816;
      long long v41 = "UnknownAction";
      char v42 = 1;
      do
      {
        char v43 = v42;
        uint64_t v44 = *(void *)(v40 + 8 * v39);
        if (v44)
        {
          (*(void (**)(uint64_t))(*(void *)v44 + 64))(v44);
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102327D18);
          }
          v45 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            if (v43) {
              v46 = "AML";
            }
            else {
              v46 = (char *)v41;
            }
            sub_100134750(buf, v46);
            v47 = buf;
            if (v137 < 0) {
              v47 = *(unsigned char **)buf;
            }
            *(_DWORD *)v117 = 136446210;
            *(void *)&v117[4] = v47;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "#Actor,updateCachedLocation,pointer was null for %{public}s", v117, 0xCu);
            if (SHIBYTE(v137) < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102327D18);
            }
            if (v43) {
              v48 = "AML";
            }
            else {
              v48 = "EED2";
            }
            sub_100134750(v117, v48);
            v49 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v120) < 0) {
              operator delete(*(void **)v117);
            }
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v49);
            if (v49 != buf) {
              free(v49);
            }
          }
        }
        char v42 = 0;
        long long v41 = "EED2";
        uint64_t v39 = 1;
      }
      while ((v43 & 1) != 0);
      goto LABEL_59;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    v58 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v59 = a2;
      }
      else {
        uint64_t v59 = *(void *)a2;
      }
      uint64_t v60 = *(void *)(a4 + 4);
      uint64_t v61 = *(void *)(a4 + 12);
      uint64_t v62 = *(void *)(a4 + 20);
      uint64_t v63 = *(void *)(a4 + 28);
      uint64_t v64 = *(void *)(a4 + 36);
      uint64_t v65 = *(void *)(a4 + 44);
      uint64_t v66 = *(void *)(a4 + 60);
      int v67 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)std::string buf = 136317187;
      *(void *)&uint8_t buf[4] = v59;
      __int16 v135 = 2049;
      uint64_t v136 = v60;
      __int16 v137 = 2049;
      uint64_t v138 = v61;
      __int16 v139 = 2050;
      uint64_t v140 = v62;
      __int16 v141 = 2049;
      uint64_t v142 = v63;
      __int16 v143 = 2050;
      uint64_t v144 = v64;
      __int16 v145 = 2049;
      uint64_t v146 = v65;
      __int16 v147 = 2049;
      uint64_t v148 = v66;
      __int16 v149 = 1026;
      int v150 = v67;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#Actor rejected %s location fix as altitude is not usable,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,alt,%{private}.7f,vacc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", buf, 0x58u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v68 = a2;
      }
      else {
        uint64_t v68 = *(void *)a2;
      }
      uint64_t v69 = *(void *)(a4 + 4);
      uint64_t v70 = *(void *)(a4 + 12);
      uint64_t v71 = *(void *)(a4 + 20);
      uint64_t v72 = *(void *)(a4 + 28);
      uint64_t v73 = *(void *)(a4 + 36);
      uint64_t v74 = *(void *)(a4 + 44);
      uint64_t v75 = *(void *)(a4 + 60);
      int v76 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)v117 = 136317187;
      *(void *)&v117[4] = v68;
      __int16 v118 = 2049;
      uint64_t v119 = v69;
      __int16 v120 = 2049;
      uint64_t v121 = v70;
      __int16 v122 = 2050;
      uint64_t v123 = v71;
      __int16 v124 = 2049;
      uint64_t v125 = v72;
      __int16 v126 = 2050;
      uint64_t v127 = v73;
      __int16 v128 = 2049;
      uint64_t v129 = v74;
      __int16 v130 = 2049;
      uint64_t v131 = v75;
      __int16 v132 = 1026;
      int v133 = v76;
      v77 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v77);
LABEL_82:
      if (v77 != buf) {
        free(v77);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    v50 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v51 = a2;
      }
      else {
        uint64_t v51 = *(void *)a2;
      }
      uint64_t v52 = *(void *)(a4 + 4);
      uint64_t v53 = *(void *)(a4 + 12);
      uint64_t v54 = *(void *)(a4 + 20);
      uint64_t v55 = *(void *)(a4 + 44);
      uint64_t v56 = *(void *)(a4 + 60);
      int v57 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)std::string buf = 136316675;
      *(void *)&uint8_t buf[4] = v51;
      __int16 v135 = 2049;
      uint64_t v136 = v52;
      __int16 v137 = 2049;
      uint64_t v138 = v53;
      __int16 v139 = 2050;
      uint64_t v140 = v54;
      __int16 v141 = 2049;
      uint64_t v142 = v55;
      __int16 v143 = 2049;
      uint64_t v144 = v56;
      __int16 v145 = 1026;
      LODWORD(v146) = v57;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#Actor rejected %s location fix as unusable,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f,speed,%{private}.1f,course,%{private}.1f,type,%{public}d", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v78 = a2;
      }
      else {
        uint64_t v78 = *(void *)a2;
      }
      uint64_t v79 = *(void *)(a4 + 4);
      uint64_t v80 = *(void *)(a4 + 12);
      uint64_t v81 = *(void *)(a4 + 20);
      uint64_t v82 = *(void *)(a4 + 44);
      uint64_t v83 = *(void *)(a4 + 60);
      int v84 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)v117 = 136316675;
      *(void *)&v117[4] = v78;
      __int16 v118 = 2049;
      uint64_t v119 = v79;
      __int16 v120 = 2049;
      uint64_t v121 = v80;
      __int16 v122 = 2050;
      uint64_t v123 = v81;
      __int16 v124 = 2049;
      uint64_t v125 = v82;
      __int16 v126 = 2049;
      uint64_t v127 = v83;
      __int16 v128 = 1026;
      LODWORD(v129) = v84;
      v77 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::updateCachedLocation(const std::string &, const std::string &, const GNSS::DaemonLocation &, GNSS::DaemonLocation &, const CLLocationProvider_Type::Notification &)", "%s\n", v77);
      goto LABEL_82;
    }
  }
LABEL_59:
  if (v95) {
    sub_1000DB0A0(v95);
  }
}

void sub_1014810B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1014810EC(uint64_t *a1, uint64_t a2)
{
  if ((sub_1000E6DB4(a2) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        id v9 = a1;
      }
      else {
        id v9 = (uint64_t *)*a1;
      }
      double v10 = *(double *)(a2 + 4);
      uint64_t v11 = *(void *)(a2 + 12);
      *(_DWORD *)std::string buf = 136315651;
      long long v25 = v9;
      __int16 v26 = 2049;
      double v27 = v10;
      __int16 v28 = 2049;
      uint64_t v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to invalid lat,%{private}.7f,lon,%{private}.7f", buf, 0x20u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_56:
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLEmergencyActor::isLocationUsable(const std::string &, const GNSS::DaemonLocation &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
LABEL_63:
    dispatch_once(&qword_1024193E0, &stru_102327D18);
    goto LABEL_56;
  }
  double v4 = sub_100121610(a2, a2 + 160);
  if (fabs(v4) > 20.0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        BOOL v6 = a1;
      }
      else {
        BOOL v6 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315394;
      long long v25 = v6;
      __int16 v26 = 2050;
      double v27 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to age,%{public}.3f", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_56;
      }
      goto LABEL_63;
    }
    return result;
  }
  double v12 = *(double *)(a2 + 20);
  if (v12 > 165.0 || v12 <= 0.0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    int v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        float v17 = a1;
      }
      else {
        float v17 = (uint64_t *)*a1;
      }
      double v18 = *(double *)(a2 + 20);
      *(_DWORD *)std::string buf = 136315394;
      long long v25 = v17;
      __int16 v26 = 2050;
      double v27 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to horizontal accuracy,%{public}.2f", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_56;
    }
    goto LABEL_63;
  }
  int v13 = *(_DWORD *)(a2 + 128);
  if (v13 == 50 || v13 == 75)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    long long v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        long long v15 = a1;
      }
      else {
        long long v15 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136315138;
      long long v25 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Actor %s fix is usable", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLEmergencyActor::isLocationUsable(const std::string &, const GNSS::DaemonLocation &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v19 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v20 = a1;
    }
    else {
      BOOL v20 = (uint64_t *)*a1;
    }
    int v21 = *(_DWORD *)(a2 + 128);
    *(_DWORD *)std::string buf = 136315394;
    long long v25 = v20;
    __int16 v26 = 1026;
    LODWORD(v27) = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Actor %s fix is unusable due to low integrity,%{public}d", buf, 0x12u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_56;
    }
    goto LABEL_63;
  }
  return result;
}

BOOL sub_101481848(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v5 = *(double *)(a3 + 36);
  if (v5 > 0.0 && v5 <= 30.0)
  {
    double v11 = *(double *)(a3 + 28);
    if (v11 < -450.0 || v11 > 8850.0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      long long v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a2 + 23) >= 0) {
          long long v15 = a2;
        }
        else {
          long long v15 = (uint64_t *)*a2;
        }
        double v16 = *(double *)(a3 + 28);
        *(_DWORD *)std::string buf = 136315394;
        __int16 v26 = v15;
        __int16 v27 = 2050;
        double v28 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Actor %s received altitude is not valid,%{public}.2f", buf, 0x16u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_61:
        unint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyActor::isAltitudeUsable(const std::string &, const GNSS::DaemonLocation &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
        return 0;
      }
    }
    else if ((*(_DWORD *)(a3 + 472) + 1) > 1)
    {
      double v17 = sub_100121610(a3, a3 + 160);
      if (fabs(v17) <= 20.0)
      {
        int v20 = *(_DWORD *)(a3 + 128);
        BOOL result = 1;
        if (v20 == 50 || v20 == 75) {
          return result;
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        int v21 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)a2 + 23) >= 0) {
            BOOL v22 = a2;
          }
          else {
            BOOL v22 = (uint64_t *)*a2;
          }
          int v23 = *(_DWORD *)(a3 + 128);
          *(_DWORD *)std::string buf = 136315394;
          __int16 v26 = v22;
          __int16 v27 = 1026;
          LODWORD(v28) = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#Actor %s altitude is unusable due to low integrity,%{public}d", buf, 0x12u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_61;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        double v18 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)a2 + 23) >= 0) {
            uint64_t v19 = a2;
          }
          else {
            uint64_t v19 = (uint64_t *)*a2;
          }
          *(_DWORD *)std::string buf = 136315394;
          __int16 v26 = v19;
          __int16 v27 = 2050;
          double v28 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Actor %s altitude is unusable due to age,%{public}.3f", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_61;
        }
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      double v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a2 + 23) >= 0) {
          int v13 = a2;
        }
        else {
          int v13 = (uint64_t *)*a2;
        }
        *(_DWORD *)std::string buf = 136315138;
        __int16 v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#Actor %s altitude undulation model is not valid", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_61;
      }
    }
LABEL_64:
    dispatch_once(&qword_1024193E0, &stru_102327D18);
    goto LABEL_61;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  int v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    double v9 = *(double *)(a3 + 36);
    *(_DWORD *)std::string buf = 136315394;
    __int16 v26 = v8;
    __int16 v27 = 2050;
    double v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Actor %s received altitude accuracy is not valid,%{public}.2f", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_61;
    }
    goto LABEL_64;
  }
  return result;
}

uint64_t sub_101481F4C()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  v0 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "#Actor new fix is preferred over cached by default", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyActor::isCachedLocationBetter(const GNSS::DaemonLocation &)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_1014820D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  double v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a4 + 4);
    uint64_t v7 = *(void *)(a4 + 12);
    uint64_t v8 = *(void *)(a4 + 20);
    int v9 = *(_DWORD *)(a4 + 84);
    *(_DWORD *)std::string buf = 134284289;
    uint64_t v12 = v6;
    __int16 v13 = 2049;
    uint64_t v14 = v7;
    __int16 v15 = 2049;
    uint64_t v16 = v8;
    __int16 v17 = 1025;
    int v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Actor, WiFi location notification received lat,%{private}.7f,lon,%{private}.7f,hacc,%{private}.7f,conf,%{private}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::onWifiLocationProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_1014822E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  double v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a4 + 4);
    uint64_t v7 = *(void *)(a4 + 12);
    uint64_t v8 = *(void *)(a4 + 20);
    *(_DWORD *)std::string buf = 134284033;
    uint64_t v11 = v6;
    __int16 v12 = 2049;
    uint64_t v13 = v7;
    __int16 v14 = 2049;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Actor, Cell location notification received lat,%{private}.7f,lon,%{private}.7f,hacc,%{private}.7f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyActor::onCellLocationProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

uint64_t sub_1014824D0(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  *(void *)a1 = off_102327C68;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  sub_100ABCDB0(a1 + 32, a5);
  *(void *)(a1 + 64) = *a6;
  uint64_t v11 = a6[1];
  *(void *)(a1 + 72) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100ABCECC(a1 + 80, a7);
  *(_DWORD *)(a1 + 112) = 255;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  sub_10084CBBC(a1 + 192);
  *(void *)(a1 + 1432) = 0;
  *(_DWORD *)(a1 + 1440) = 0;
  sub_1000C7F88(&__p);
  if (sub_1000D2988((uint64_t)__p, "ActorSessionForNonActiveEmergencies", (BOOL *)(a1 + 160)))
  {
    int v12 = *(unsigned __int8 *)(a1 + 160);
    if (v27) {
      sub_1000DB0A0(v27);
    }
    if (v12)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(int *)(a1 + 16);
        uint64_t v15 = v14 > 2 ? "UnknownAction" : (&off_102327EC8)[v14];
        sub_100134750(&__p, v15);
        uint64_t v16 = v28 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning #%{public}s allowing session for non-active emergencies", buf, 0xCu);
        if (v28 < 0) {
          operator delete(__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v18 = *(int *)(a1 + 16);
        if (v18 > 2) {
          uint64_t v19 = "UnknownAction";
        }
        else {
          uint64_t v19 = (&off_102327EC8)[v18];
        }
        sub_100134750(buf, v19);
        if (v23 >= 0) {
          int v20 = buf;
        }
        else {
          int v20 = *(unsigned char **)buf;
        }
        int v24 = 136446210;
        long long v25 = v20;
        int v21 = (char *)_os_log_send_and_compose_impl();
        if (v23 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAction::CLEmergencyAction(id<CLIntersiloUniverse>, Action, id<CLClientManagerPublicProtocol>, NetworkAndSimInfoCallback, std::shared_ptr<CLEmergencyAWD>, LocationCallback)", "%s\n", v21);
        if (v21 != (char *)&__p) {
          free(v21);
        }
      }
    }
  }
  else if (v27)
  {
    sub_1000DB0A0(v27);
  }
  return a1;
}

void sub_101482828(_Unwind_Exception *a1)
{
  sub_10083788C(v4);
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*(void **)(v1 + 136));
  }
  sub_100ABCF64(v3);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 72);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_100ABCE48(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10148289C(uint64_t a1)
{
  *(void *)a1 = off_102327C68;

  *(void *)(a1 + 24) = 0;
  if (*(char *)(a1 + 1391) < 0) {
    operator delete(*(void **)(a1 + 1368));
  }
  if (*(char *)(a1 + 1367) < 0) {
    operator delete(*(void **)(a1 + 1344));
  }
  if (*(char *)(a1 + 1199) < 0) {
    operator delete(*(void **)(a1 + 1176));
  }
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*(void **)(a1 + 1152));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  sub_100ABCF64((void *)(a1 + 80));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_100ABCE48((void *)(a1 + 32));
  return a1;
}

std::string *sub_101482960(uint64_t a1, const std::string *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(int *)(a1 + 16);
    uint64_t v6 = v5 > 2 ? "UnknownAction" : (&off_102327EC8)[v5];
    sub_100134750(__p, v6);
    uint64_t v7 = v24 >= 0 ? __p : (void **)__p[0];
    uint64_t v8 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? (uint64_t)a2
       : a2->__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136446467;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v16 = 2081;
    uint64_t v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#%{public}s companion phone number changed to %{private}s", buf, 0x16u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v10 = *(int *)(a1 + 16);
    if (v10 > 2) {
      uint64_t v11 = "UnknownAction";
    }
    else {
      uint64_t v11 = (&off_102327EC8)[v10];
    }
    sub_100134750(buf, v11);
    if (v18 >= 0) {
      int v12 = buf;
    }
    else {
      int v12 = *(unsigned char **)buf;
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v19 = 136446467;
    int v20 = v12;
    __int16 v21 = 2081;
    BOOL v22 = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyAction::handleCompanionNumberChange(const std::string &)", "%s\n", v14);
    if (v14 != (char *)__p) {
      free(v14);
    }
  }
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

void sub_101482C04(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 184) == a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(int *)(a1 + 16);
      if (v5 > 2) {
        uint64_t v6 = "UnknownAction";
      }
      else {
        uint64_t v6 = (&off_102327EC8)[v5];
      }
      sub_100134750(__p, v6);
      uint64_t v10 = (void **)__p[0];
      uint64_t v11 = "disabled";
      if (v33 >= 0) {
        uint64_t v10 = __p;
      }
      if (a2) {
        uint64_t v11 = "enabled";
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v25 = 2082;
      __int16 v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#%{public}s session assertion is already %{public}s,ignoring", buf, 0x16u);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v12 = *(int *)(a1 + 16);
      if (v12 > 2) {
        uint64_t v13 = "UnknownAction";
      }
      else {
        uint64_t v13 = (&off_102327EC8)[v12];
      }
      sub_100134750(buf, v13);
      char v18 = *(unsigned char **)buf;
      int v19 = "disabled";
      if (v27 >= 0) {
        char v18 = buf;
      }
      if (a2) {
        int v19 = "enabled";
      }
      int v28 = 136446466;
      uint64_t v29 = v18;
      __int16 v30 = 2082;
      uint64_t v31 = v19;
      int v20 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAction::assertSession(BOOL)", "%s\n", v20);
      if (v20 != (char *)__p) {
        free(v20);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(int *)(a1 + 16);
      if (v8 > 2) {
        int v9 = "UnknownAction";
      }
      else {
        int v9 = (&off_102327EC8)[v8];
      }
      sub_100134750(__p, v9);
      uint64_t v14 = (void **)__p[0];
      uint64_t v15 = "disabled";
      if (v33 >= 0) {
        uint64_t v14 = __p;
      }
      if (a2) {
        uint64_t v15 = "enabled";
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v25 = 2082;
      __int16 v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#%{public}s session assertion %{public}s", buf, 0x16u);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v16 = *(int *)(a1 + 16);
      if (v16 > 2) {
        uint64_t v17 = "UnknownAction";
      }
      else {
        uint64_t v17 = (&off_102327EC8)[v16];
      }
      sub_100134750(buf, v17);
      __int16 v21 = *(unsigned char **)buf;
      BOOL v22 = "disabled";
      if (v27 >= 0) {
        __int16 v21 = buf;
      }
      if (a2) {
        BOOL v22 = "enabled";
      }
      int v28 = 136446466;
      uint64_t v29 = v21;
      __int16 v30 = 2082;
      uint64_t v31 = v22;
      char v23 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAction::assertSession(BOOL)", "%s\n", v23);
      if (v23 != (char *)__p) {
        free(v23);
      }
    }
    *(unsigned char *)(a1 + 184) = a2;
    [*(id *)(a1 + 24) markClientEmergencyEnablementTransition:a2];
  }
}

uint64_t sub_1014830F4(uint64_t a1)
{
  sub_10192C5D4(a1 + 192);
  *(_DWORD *)(a1 + 384) = sub_1006D40B0((unsigned int *)(a1 + 112));
  *(unsigned char *)(a1 + 1132) = sub_100D33CF4(a1 + 112);
  *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a1 + 132);
  *(void *)(a1 + 200) = *(void *)(a1 + 168);
  *(unsigned char *)(a1 + 344) = 1;
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 144);

  return v2(a1);
}

BOOL sub_101483184(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  BOOL result = sub_100D33CD4(a1 + 112);
  if (!result)
  {
    *(_DWORD *)(a1 + 132) = 0;
    return result;
  }
  BOOL result = sub_100D33CB4(v2);
  if (result)
  {
    int v4 = 1;
  }
  else
  {
    BOOL result = sub_100D33CC4(v2);
    if (!result)
    {
      int v4 = *(_DWORD *)(a1 + 132);
      goto LABEL_9;
    }
    int v4 = 2;
  }
  *(_DWORD *)(a1 + 132) = v4;
LABEL_9:
  *(_DWORD *)(a1 + 1128) = v4;
  return result;
}

double sub_1014831F0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 232) = sub_1000E6DB4(a2);
  if (sub_1000E6DB4(a2))
  {
    if (*(double *)(a1 + 208) == -1.0)
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 208) = Current;
      *(CFAbsoluteTime *)(a1 + 264) = Current - *(double *)(a1 + 200);
    }
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 4);
    if (sub_10147944C(a2))
    {
      double result = *(double *)(a2 + 28) + *(float *)(a2 + 476);
      *(double *)(a1 + 240) = result;
    }
  }
  return result;
}

uint64_t sub_101483278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  BOOL v4 = v3 != 0;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  return sub_10192C880(a1 + 192, v4, v5 != 0);
}

uint64_t sub_1014832B8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 152))(a1, *a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, a3);
  unsigned int v8 = *a2;
  if (v6 >= result) {
    unsigned int v8 = a3;
  }
  *a2 = v8;
  return result;
}

void sub_101483350(uint64_t a1)
{
  if (*(double *)(a1 + 1432) != 0.0)
  {
    *(_DWORD *)(a1 + 1272) = (sub_10016C458() - *(double *)(a1 + 1432));
    *(void *)(a1 + 1432) = 0;
  }
  sub_10192B6A8(a1 + 192);
  sub_1018703DC(*(void *)(a1 + 64), a1 + 192);

  sub_10192C5D4(a1 + 192);
}

void sub_1014833C0(uint64_t a1, int a2, int a3)
{
  unsigned int v4 = a3 - 2;
  if ((a2 - 2) >= 4)
  {
    if (v4 <= 3) {
      *(double *)(a1 + 1432) = sub_10016C458();
    }
  }
  else if (v4 >= 4 && *(double *)(a1 + 1432) != 0.0)
  {
    *(_DWORD *)(a1 + 1272) = (sub_10016C458() - *(double *)(a1 + 1432));
    *(void *)(a1 + 1432) = 0;
  }
}

void sub_101483430(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101483460(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101483490(uint64_t a1)
{
  sub_1014834CC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1014834CC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_101483510((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_101483510(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

uint64_t *sub_101483598(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = (char *)operator new(0xC0uLL);
  v24[0] = v13;
  v24[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v13 + 7) = *(void *)(a3 + 40);
  *((_OWORD *)v13 + 4) = *(_OWORD *)(a3 + 48);
  *((void *)v13 + 10) = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(v13 + 88) = *(_OWORD *)(a3 + 72);
  *((void *)v13 + 13) = *(void *)(a3 + 88);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *((_OWORD *)v13 + 7) = *(_OWORD *)(a3 + 96);
  *((void *)v13 + 16) = *(void *)(a3 + 112);
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *((void *)v13 + 19) = *(void *)(a3 + 136);
  *(_OWORD *)(v13 + 136) = *(_OWORD *)(a3 + 120);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  long long v14 = *(_OWORD *)(a3 + 144);
  *((void *)v13 + 22) = *(void *)(a3 + 160);
  *((_OWORD *)v13 + 10) = v14;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  *((_DWORD *)v13 + 46) = *(_DWORD *)(a3 + 168);
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = v7 < 3 || (v7 & (v7 - 1)) != 0;
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  __int16 v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v22 >= v7) {
          v22 %= v7;
        }
      }
      else
      {
        v22 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_101483884((uint64_t)v24, 0);
  return i;
}

void sub_10148386C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101483884((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_101483884(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_101483510((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_1014838DC@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  unsigned int v4 = operator new(0x328uLL);
  uint64_t result = sub_101483938(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101483924(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101483938(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102327D68;
  sub_10186E1F8(a1 + 3, *a2);
  return a1;
}

void sub_101483984(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101483998(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102327D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014839B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102327D68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101483A0C(uint64_t a1)
{
  return sub_10186E2FC(a1 + 24);
}

void sub_101483A1C()
{
}

void *sub_101483A30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102327DB8;
  result[1] = v3;
  return result;
}

uint64_t sub_101483A78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102327DB8;
  a2[1] = v2;
  return result;
}

uint64_t *sub_101483AA4(uint64_t a1, int *a2)
{
  int v4 = *a2;
  uint64_t v2 = *(void *)(a1 + 8) + 1728;
  uint64_t v5 = &v4;
  return sub_100117344(v2, &v4, (uint64_t)&unk_101D0B290, &v5) + 3;
}

uint64_t sub_101483AF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101483B34()
{
}

void sub_101483B44()
{
}

void *sub_101483B58(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102327E48;
  result[1] = v3;
  return result;
}

uint64_t sub_101483BA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102327E48;
  a2[1] = v2;
  return result;
}

double sub_101483BCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(v3 + 144);
  long long v7 = *(_OWORD *)(v3 + 96);
  long long v6 = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v6;
  long long v9 = *(_OWORD *)(v3 + 176);
  long long v8 = *(_OWORD *)(v3 + 192);
  long long v10 = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(v3 + 204);
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v10;
  memcpy((void *)(a2 + 160), (const void *)(v3 + 224), 0x201uLL);
  *(void *)(a2 + 680) = *(void *)(v3 + 744);
  unint64_t v11 = *(std::__shared_weak_count **)(v3 + 752);
  *(void *)(a2 + 688) = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = *(_OWORD *)(v3 + 760);
  long long v13 = *(_OWORD *)(v3 + 792);
  *(_OWORD *)(a2 + 712) = *(_OWORD *)(v3 + 776);
  *(_OWORD *)(a2 + 728) = v13;
  *(_OWORD *)(a2 + 696) = v12;
  long long v14 = *(_OWORD *)(v3 + 808);
  long long v15 = *(_OWORD *)(v3 + 824);
  long long v16 = *(_OWORD *)(v3 + 840);
  *(void *)(a2 + 789) = *(void *)(v3 + 853);
  *(_OWORD *)(a2 + 760) = v15;
  *(_OWORD *)(a2 + 776) = v16;
  *(_OWORD *)(a2 + 744) = v14;
  if (sub_1014810EC(qword_102487CC0, v3 + 64))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    BOOL v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Actor,LocationCallback,returning cached fix", buf, 2u);
    }
    uint64_t v18 = sub_10013D1A0(115, 2);
    if (v18)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v39 = (char *)_os_log_send_and_compose_impl();
      uint64_t v18 = sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    BOOL v19 = sub_101481848(v18, qword_102487CC0, v3 + 64);
    if (!v19 && sub_101481848(v19, qword_102487CD8, v3 + 864))
    {
      long long v20 = *(_OWORD *)(v3 + 892);
      *(_OWORD *)(a2 + 28) = v20;
      *(_DWORD *)(a2 + 472) = *(_DWORD *)(v3 + 1336);
      LODWORD(v20) = *(_DWORD *)(v3 + 1340);
      *(_DWORD *)(a2 + 476) = v20;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    __int16 v21 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning #Actor,LocationCallback,cached fix is not usable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
    sub_100F40DB8(v3 + 64);
    long long v22 = *(_OWORD *)(v3 + 880);
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 864);
    *(_OWORD *)(a2 + 16) = v22;
    long long v23 = *(_OWORD *)(v3 + 896);
    long long v24 = *(_OWORD *)(v3 + 912);
    long long v25 = *(_OWORD *)(v3 + 944);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 928);
    *(_OWORD *)(a2 + 80) = v25;
    *(_OWORD *)(a2 + 32) = v23;
    *(_OWORD *)(a2 + 48) = v24;
    long long v26 = *(_OWORD *)(v3 + 960);
    long long v27 = *(_OWORD *)(v3 + 976);
    long long v28 = *(_OWORD *)(v3 + 992);
    *(_OWORD *)(a2 + 140) = *(_OWORD *)(v3 + 1004);
    *(_OWORD *)(a2 + 112) = v27;
    *(_OWORD *)(a2 + 128) = v28;
    *(_OWORD *)(a2 + 96) = v26;
    memcpy((void *)(a2 + 160), (const void *)(v3 + 1024), 0x201uLL);
    uint64_t v29 = *(void *)(v3 + 1544);
    uint64_t v30 = *(void *)(v3 + 1552);
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a2 + 680) = v29;
    *(void *)(a2 + 688) = v30;
    if (v11) {
      sub_1000DB0A0(v11);
    }
    long long v31 = *(_OWORD *)(v3 + 1560);
    long long v32 = *(_OWORD *)(v3 + 1592);
    *(_OWORD *)(a2 + 712) = *(_OWORD *)(v3 + 1576);
    *(_OWORD *)(a2 + 728) = v32;
    *(_OWORD *)(a2 + 696) = v31;
    long long v33 = *(_OWORD *)(v3 + 1608);
    long long v34 = *(_OWORD *)(v3 + 1624);
    long long v35 = *(_OWORD *)(v3 + 1640);
    *(void *)(a2 + 789) = *(void *)(v3 + 1653);
    *(_OWORD *)(a2 + 760) = v34;
    *(_OWORD *)(a2 + 776) = v35;
    *(_OWORD *)(a2 + 744) = v33;
    if (sub_1014810EC(qword_102487CD8, v3 + 864))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      uint64_t v36 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Actor,LocationCallback,returning cached prefiltered fix", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        uint64_t v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      int v38 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#Warning #Actor,LocationCallback,cached prefiltered fix is not usable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        long long v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEmergencyActor::CLEmergencyActor(id<CLIntersiloUniverse>, CLEmergencyController::SendNilrLockoutCallback)::(anonymous class)::operator()() const", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
      sub_100F40DB8(v3 + 864);
      *(void *)&long long v20 = sub_100F40DB8(a2).n128_u64[0];
    }
  }
  return *(double *)&v20;
}

void sub_1014842A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014842D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101484318()
{
}

void sub_101484324()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0C048;
      v0[3] = unk_101E0C058;
      v0[4] = xmmword_101E0C068;
      v0[0] = xmmword_101E0C028;
      v0[1] = unk_101E0C038;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101484404(_Unwind_Exception *a1)
{
}

uint64_t sub_10148441C()
{
  sub_100134750(qword_102487C90, "new");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487C90, (void *)&_mh_execute_header);
  sub_100134750(qword_102487CA8, "newPreFiltered");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487CA8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487CC0, "cached");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487CC0, (void *)&_mh_execute_header);
  sub_100134750(qword_102487CD8, "cachedPreFiltered");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487CD8, (void *)&_mh_execute_header);
}

void sub_101484630(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_101484754(id a1)
{
  qword_102419498 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackingAvoidance");
}

void *sub_101484784(void *result, uint64_t a2)
{
  void *result = off_102327F10;
  result[1] = a2;
  return result;
}

uint64_t sub_1014847A4(uint64_t a1, BOOL *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_1000D2988(v5, "RealtimeHarvesting", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101484800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101484818(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "RealtimeSubmissionTimeOut", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_101484874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10148488C(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MinRealtimeHarvestDuration", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_1014848E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101484900(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "RealtimeBudgetBytes", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_10148495C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101484974(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "RealtimeBudgetInterval", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_1014849D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1014849E8(uint64_t a1, _DWORD *a2)
{
  id v3 = [[+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration") defaultForKey:@"CLRealtimeBudgetBytesDefault" defaultValue:0];
  id v4 = v3;
  if (v3) {
    *a2 = [v3 intValue];
  }
  return v4 != 0;
}

void sub_101484A40(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  id v8 = [[objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
  [v8 setHandler:a5];
  [v8 setNextFireTime:a2 interval:a3];
  operator new();
}

void sub_101484B00()
{
}

void sub_101484B24(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101484B8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101AB4404(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101484BA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_101484BD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_101484CC8(id a1)
{
  qword_102487CF0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLLocationMulticlientStreamerSilo"];
}

void sub_101484D40(id a1)
{
  if (sub_1007414F8())
  {
    sub_100103240();
    if (sub_10015F708()) {
      byte_102487D00 = 1;
    }
  }
}

void sub_101484F84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  operator delete();
}

id sub_101484FC0(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1023280C0);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    long long v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient Stop timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return [*(id *)(a1 + 32) stopLocation];
}

id sub_1014850A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onLocationNotification:a2 withData:a3];
}

void sub_101485AD4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023280C0);
    }
    id v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      unint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to post multiclient stream event\", \"err\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023280C0);
      }
    }
    id v4 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      unint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to post multiclient stream event", "{\"msg%{public}.0s\":\"#Multiclient failed to post multiclient stream event\", \"err\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023280C0);
    }
    long long v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v7 = [[*(id *)(a1 + 32) activeStreamingClients] count];
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      unint64_t v11 = "";
      __int16 v12 = 1026;
      LODWORD(v13) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient posted a location to interested peers\", \"numClients\":%{public}u}", (uint8_t *)&v8, 0x18u);
    }
  }
}

uint64_t sub_101485F58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1023280C0);
  }
  unsigned int v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289282;
    v10[1] = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2082;
    id v14 = [[objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLLocationSTreamingMessageRapportDeviceIDKey") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient received interest in streaming from a nearby client\", \"requester\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x1Cu);
  }
  id v8 = +[NSMutableDictionary dictionary];
  sub_100103240();
  [v8 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10016CCBC())] forKeyedSubscript:@"kCLLocationStreamingMessageRapportIsPhoneKey"];
  sub_100103240();
  [v8 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1001B7C64())] forKeyedSubscript:@"kCLLocationStreamingMessageRapportIsPadKey"];
  sub_100103240();
  [v8 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10015F708())] forKeyedSubscript:@"kCLLocationStreamingMessageRapportHasGPSKey"];
  [v8 setObject:[objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "rapportDiscoveryLink"), "localDevice"), "effectiveIdentifier")] forKeyedSubscript:@"kCLLocationSTreamingMessageRapportDeviceIDKey"];
  [v8 setObject:&__kCFBooleanTrue forKeyedSubscript:@"kCLLocationStreamingMessageRapportIsAtLeast16_4"];
  return (*(uint64_t (**)(uint64_t, id, void, void))(a4 + 16))(a4, v8, 0, 0);
}

uint64_t sub_10148616C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1023280C0);
  }
  id v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289283;
    int v25 = 0;
    __int16 v26 = 2082;
    long long v27 = "";
    __int16 v28 = 2113;
    id v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient received streaming action request from a client\", \"msg\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  id v9 = [a3 objectForKeyedSubscript:RPOptionSenderID];
  id v10 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageInFitnessSessionKey"];
  id v11 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageActivityTypeAirborneKey"];
  id v12 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageEmergencyEnablementKey"];
  if ([a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageRapportLocationStreamingActionKey"])
  {
    BOOL v13 = v9 == 0;
  }
  else
  {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    unsigned int v14 = [[objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLLocationStreamingMessageRapportLocationStreamingActionKey") intValue];
    if (v14 == 1)
    {
      [objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients") removeObject:v9];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023280C0);
      }
      BOOL v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = [v9 UTF8String];
        *(_DWORD *)std::string buf = 68289282;
        int v25 = 0;
        __int16 v26 = 2082;
        long long v27 = "";
        __int16 v28 = 2082;
        id v29 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient stopping location streaming to remote client\", \"effectiveID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "count")) {
        [*(id *)(a1 + 32) toggleLocationUpdates:0 inFitnessSession:[v10 BOOLValue] inAirborneSession:[v11 BOOLValue] emergencyEnablementAssertionActive:[v12 BOOLValue]];
      }
      CFStringRef v20 = @"kCLLocationStreamingMessageRapportLocationStreamingActionKey";
      __int16 v21 = &off_102395078;
      (*(void (**)(uint64_t, NSDictionary *, void, void))(a4 + 16))(a4, +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1], 0, 0);
    }
    else if (!v14)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023280C0);
      }
      long long v15 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [v9 UTF8String];
        *(_DWORD *)std::string buf = 68289282;
        int v25 = 0;
        __int16 v26 = 2082;
        long long v27 = "";
        __int16 v28 = 2082;
        id v29 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient (re)starting location streaming to remote client\", \"effectiveID\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      [*(id *)(a1 + 32) toggleLocationUpdates:1 inFitnessSession:[v10 BOOLValue] inAirborneSession:[v11 BOOLValue] emergencyEnablementAssertionActive:[v12 BOOLValue]];
      [objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients") addObject:v9];
      CFStringRef v22 = @"kCLLocationStreamingMessageRapportLocationStreamingActionKey";
      long long v23 = &off_102395060;
      (*(void (**)(uint64_t, NSDictionary *, void, void))(a4 + 16))(a4, +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1], 0, 0);
      sub_1008859E8(*(void *)(*(void *)(a1 + 32) + 16));
    }
  }
  return (*(uint64_t (**)(uint64_t, void, void, void))(a4 + 16))(a4, 0, 0, 0);
}

void sub_1014866F0(uint64_t a1, void *a2)
{
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients"), "containsObject:", objc_msgSend(a2, "effectiveIdentifier")))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023280C0);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      id v11 = "";
      __int16 v12 = 2082;
      id v13 = [[objc_msgSend(a2, "effectiveIdentifier") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient stopping location streaming to remote client\", \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)&v8, 0x1Cu);
    }
    [objc_msgSend(*(id *)(a1 + 32), "activeStreamingClients") removeObject:[a2 effectiveIdentifier]];
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1023280C0);
  }
  __int16 v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v6 = [[objc_msgSend(a2, "effectiveIdentifier") UTF8String];
    id v7 = [[[a2 name] UTF8String];
    int v8 = 68289539;
    int v9 = 0;
    __int16 v10 = 2082;
    id v11 = "";
    __int16 v12 = 2082;
    id v13 = v6;
    __int16 v14 = 2081;
    id v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient CLLocationStreamer can no longer see a device\", \"effectiveID\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s}", (uint8_t *)&v8, 0x26u);
  }
}

void sub_1014868E8(id a1, RPCompanionLinkDevice *a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1023280C0);
  }
  id v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289539;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    __int16 v7 = 2082;
    id v8 = [[-[RPCompanionLinkDevice effectiveIdentifier](a2, "effectiveIdentifier") UTF8String];
    __int16 v9 = 2081;
    id v10 = [[-[RPCompanionLinkDevice name](a2, "name") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient CLLocationStreamer spotted a device\", \"effectiveID\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s}", (uint8_t *)v4, 0x26u);
  }
}

void sub_1014869FC(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023280C0);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      __int16 v14 = a2;
      id v4 = "{\"msg%{public}.0s\":\"#Multiclient failed to activate advertisement server\", \"error\":%{public, location:escape_only}@}";
      __int16 v5 = v3;
      os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
      uint32_t v7 = 28;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, (uint8_t *)&v9, v7);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023280C0);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      int v9 = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      id v4 = "{\"msg%{public}.0s\":\"#Multiclient ready to listen for incoming streaming requests\"}";
      __int16 v5 = v8;
      os_log_type_t v6 = OS_LOG_TYPE_INFO;
      uint32_t v7 = 18;
      goto LABEL_10;
    }
  }
}

void sub_101486B68(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023280C0);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023280C0);
      }
    }
    id v4 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to activate streaming link", "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023280C0);
    }
    __int16 v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient location streaming outbound client ready to go when needed\"}", (uint8_t *)&v6, 0x12u);
    }
  }
}

void sub_101487040(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101487070()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0C55C;
      v0[3] = unk_101E0C56C;
      v0[4] = xmmword_101E0C57C;
      v0[0] = xmmword_101E0C53C;
      v0[1] = unk_101E0C54C;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101487150(_Unwind_Exception *a1)
{
}

void *sub_101487168(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = 0;
  v4[0] = off_102328110;
  v4[1] = a1;
  v4[3] = v4;
  sub_101487230(a2, (uint64_t)v4);
  sub_1006ADD54(v4);
  return a1;
}

void sub_101487208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006ADD54((uint64_t *)va);
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1006A7A4C((uint64_t)v2, v4);
  }
  _Unwind_Resume(a1);
}

void *sub_101487230(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 192))(*a1);
  sub_1006ADA50((uint64_t)v5, a2);
  sub_1006AD9DC((void *)(v3 + 144), (uint64_t)v5);
  return sub_1006ADD54(v5);
}

void sub_1014872D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006ADD54((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014872F0(uint64_t result)
{
  if (!*(void *)(result + 8))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023280E0);
    }
    uint64_t v1 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Bringing up cycling state detector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023280E0);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSecondaryClassifiers::onCyclingDetectorActivate()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    operator new();
  }
  return result;
}

void sub_1014874DC(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023280E0);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tear down cycling state detector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023280E0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSecondaryClassifiers::onCyclingDetectorDeactivate()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    uint64_t v3 = *v1;
    *uint64_t v1 = 0;
    if (v3) {
      sub_1006A7A4C((uint64_t)v1, v3);
    }
  }
}

void sub_10148768C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1014876C0()
{
}

void *sub_1014876D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102328110;
  result[1] = v3;
  return result;
}

uint64_t sub_10148771C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102328110;
  a2[1] = v2;
  return result;
}

uint64_t sub_101487748(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*a2) {
    sub_1014872F0(v2);
  }
  else {
    sub_1014874DC(v2);
  }
  return 1;
}

uint64_t sub_101487778(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014877B8()
{
}

void sub_1014877C4()
{
}

void sub_101487820()
{
}

void sub_101487844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_102328190;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x40D5180000000000;
  __int16 v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  sub_100F42980((uint64_t)v9, (uint64_t)&unk_10248D808);
  sub_101576408(a1 + 80, a3, v9);
  sub_1002F8A04(v9);
  *(void *)(a1 + 248) = a1 + 256;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 232) = off_102301728;
  *(void *)(a1 + 240) = v6;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)buf, "CleanupInterval", v5);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  [objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLNetworkLocationProvider") addResponseListener:a1 + 232];
  sub_1007E0344();
}

void sub_101487EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  void *v28 = v29;
  sub_10014F400(v27, *v31);
  sub_1015766A0(v26);
  uint64_t v33 = v25[9];
  v25[9] = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = v25[8];
  v25[8] = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = v25[7];
  v25[7] = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = v25[6];
  v25[6] = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *v30;
  *uint64_t v30 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  _Unwind_Resume(a1);
}

void sub_101488048(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328218);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328218);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101277318(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101488214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101488234(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328218);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328218);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101275684(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101488400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101488420(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328218);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328218);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10127D8F8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1014885EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148860C(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328218);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328218);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012763F0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1014887D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014887F8(uint64_t a1)
{
}

uint64_t sub_101488804(uint64_t a1)
{
  *(void *)a1 = off_102328190;
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLNetworkLocationProvider"), "removeResponseListener:", a1 + 232];
  [*(id *)(a1 + 24) invalidate];

  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(void **)(a1 + 272);
  if (v2)
  {

    *(void *)(a1 + 272) = 0;
  }
  *(void *)(a1 + 232) = off_102301728;
  sub_10014F400(a1 + 248, *(char **)(a1 + 256));
  sub_1015766A0(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void sub_1014889B0(uint64_t a1)
{
  sub_101488804(a1);

  operator delete();
}

BOOL sub_1014889E8(uint64_t a1)
{
  return [[[objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLDataProtectionManager"] syncgetDataAvailability] != 1;
}

void sub_101488A1C(uint64_t a1)
{
}

uint64_t sub_101488A24()
{
  sub_100103240();

  return sub_10010145C();
}

BOOL sub_101488A4C()
{
  sub_100103240();

  return sub_100106424();
}

id sub_101488A74(void *a1)
{
  uint64_t v2 = (CLTileDownloadSchedulingClient *)a1[34];
  if (!v2)
  {
    uint64_t v3 = [CLTileDownloadSchedulingClient alloc];
    uint64_t v4 = a1[1];
    if (v4) {
      uint64_t v5 = v4 + 120;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v2 = [(CLTileDownloadSchedulingClient *)v3 initWithUniverse:a1[2] andDelegate:v5];
    a1[34] = v2;
  }

  return (id)[(CLTileDownloadSchedulingClient *)v2 scheduleTileDownloadIfNecessary];
}

id sub_101488AD0(uint64_t a1)
{
  id v1 = [objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLClientManager"];
  if (byte_102487D27 >= 0) {
    uint64_t v2 = &qword_102487D10;
  }
  else {
    uint64_t v2 = (uint64_t *)qword_102487D10;
  }
  uint64_t v3 = +[NSString stringWithUTF8String:v2];

  return [v1 resetNotificationConsumedForIdentifier:v3];
}

void sub_101488B40(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101488B70(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101488BA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0C674;
      v0[3] = unk_101E0C684;
      v0[4] = xmmword_101E0C694;
      v0[0] = xmmword_101E0C654;
      v0[1] = unk_101E0C664;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101488C80(_Unwind_Exception *a1)
{
}

void sub_101488C98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101488D18()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_101488DA8(_Unwind_Exception *a1)
{
}

uint64_t sub_101488DC0()
{
  sub_100134750(&qword_102487D10, "WifiTilesManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487D10, (void *)&_mh_execute_header);
}

void sub_101489190(uint64_t a1, void *a2)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v4 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,onVisitNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::onVisitNotification(CLVisit *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a2)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v5 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2113;
      __int16 v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cltrm,received visit\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_10148E650(a1, a2);
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v6 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#cltrm,onVisitNotification,visit is nil.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      __int16 v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunController::onVisitNotification(CLVisit *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_101489500(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 31) = 0;
  *(_DWORD *)(a1 + 47) = 0;
  *(void *)(a1 + 56) = off_102328268;
  *(void *)(a1 + 64) = a1;
  *(void *)(a1 + 72) = off_1023282A0;
  *(void *)(a1 + 80) = a1;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 161) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 184) = a2;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  sub_101171D90(a1 + 280);
  *(void *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 412) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 420) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v3 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TrackRun,constructing CLTrackRunController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    LOWORD(v23) = 0;
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (*(void *)(a1 + 184))
  {
    int v4 = sub_10148A9E4();
    *(unsigned char *)(a1 + 34) = v4;
    if (v4)
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v5 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TrackRun,TrackRun engine enabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 == -1)
        {
LABEL_70:
          LOWORD(v23) = 0;
          CFStringRef v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
          goto LABEL_20;
        }
LABEL_72:
        dispatch_once(&qword_102418FB0, &stru_102328308);
        goto LABEL_70;
      }
    }
    else
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v6 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TrackRun,TrackRun engine disabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 == -1) {
          goto LABEL_70;
        }
        goto LABEL_72;
      }
    }
LABEL_20:
    sub_1000C7F88(buf);
    uint64_t v7 = *(void *)buf;
    int v8 = sub_10143E610();
    LOBYTE(v23) = 0;
    if (sub_1000D2988(v7, "EnableTrackRunRecorder", (BOOL *)&v23)) {
      BOOL v9 = (_BYTE)v23 != 0;
    }
    else {
      BOOL v9 = v8;
    }
    if (v26) {
      sub_1000DB0A0(v26);
    }
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v10 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "TrackRun,EnableTrackRunRecorder,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v23 = 67240192;
      BOOL v24 = v9;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (v9) {
      operator new();
    }
    if (*(unsigned char *)(a1 + 34)) {
      operator new();
    }
    sub_10148AC78(a1);
    if (*(unsigned char *)(a1 + 34) != 0)
    {
      sub_1000C7F88(buf);
      LOBYTE(v23) = 0;
      char v11 = sub_1000D2988(*(uint64_t *)buf, "EnableTrackRunTrackDataQuery", (BOOL *)&v23);
      if ((_BYTE)v23) {
        char v12 = 0;
      }
      else {
        char v12 = v11;
      }
      if (v26) {
        sub_1000DB0A0(v26);
      }
      if (v12) {
        sub_100E92BC0();
      }
    }
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    __int16 v13 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "TrackRun,Creating fTRCGeoMapRunningTrackDataManager", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      LOWORD(v23) = 0;
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    operator new();
  }
  sub_101AB6DA8();
  abort_report_np();
  __break(1u);
  dispatch_once(&qword_102418FB0, &stru_102328308);
  __int16 v14 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
  {
    int v15 = *(unsigned __int8 *)(a1 + 176);
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "TrackRun,DisableTrackRunHints,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v19 = *(unsigned __int8 *)(a1 + 176);
    int v23 = 67240192;
    BOOL v24 = v19;
    CFStringRef v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunController::CLTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  return a1;
}

void sub_10148A6E0(_Unwind_Exception *a1)
{
  uint64_t v6 = v1[34];
  v1[34] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v1[33];
  v1[33] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[32];
  v1[32] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[31];
  v1[31] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v1[30];
  v1[30] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v1[29];
  v1[29] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v1[28];
  v1[28] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v1[27];
  v1[27] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_101495D54(v3, 0);
  std::mutex::~mutex(v2);
  uint64_t v14 = v1[13];
  v1[13] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *v4;
  *int v4 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  __int16 v16 = (std::__shared_weak_count *)v1[1];
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10148A9E4()
{
  sub_1000C7F88(buf);
  uint64_t v0 = *(void *)buf;
  int v1 = sub_100740F54();
  LOBYTE(v6[0]) = 0;
  if (sub_1000D2988(v0, "EnableTrackRunEngine", (BOOL *)v6)) {
    BOOL v2 = LOBYTE(v6[0]) != 0;
  }
  else {
    BOOL v2 = v1;
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v3 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TrackRun,IsTrackRunEngineEnabledIfInstantiated,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    v6[0] = 67240192;
    v6[1] = v2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTrackRunController::IsTrackRunEngineEnabledIfInstantiated()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_101490138() & v2;
}

void sub_10148ABE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10148AC04(uint64_t a1)
{
  sub_100168850(v5);
  sub_10016BC44((uint64_t)v4);
  sub_1014958A0(v2, v4, (uint64_t)v5);
  sub_10148D174(a1, (uint64_t)v5, 0);
  return sub_1001687EC(v5);
}

void sub_10148AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_10148AC78(uint64_t a1)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  sub_1000C7F88(buf);
  int v2 = sub_10006EF84(*(uint64_t *)buf, "CLTRSimulatedLapCount", (_DWORD *)&v42 + 1);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v2)
  {
    *(_DWORD *)(a1 + 408) = HIDWORD(v42);
    *(unsigned char *)(a1 + 412) = 1;
  }
  sub_1000C7F88(buf);
  int v3 = sub_10006EF84(*(uint64_t *)buf, "CLTRSimulatedLaneEstimate", &v42);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v3)
  {
    *(_DWORD *)(a1 + 416) = v42;
    *(unsigned char *)(a1 + 420) = 1;
  }
  sub_1000C7F88(buf);
  int v4 = sub_10006EF84(*(uint64_t *)buf, "CLTRSimulatedEstimatedLaneConfidence", (_DWORD *)&v41 + 1);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v4)
  {
    int v5 = HIDWORD(v41);
    if ((HIDWORD(v41) - 1) >= 3) {
      int v5 = 0;
    }
    *(_DWORD *)(a1 + 424) = v5;
  }
  sub_1000C7F88(buf);
  int v6 = sub_10006EF84(*(uint64_t *)buf, "CLTRSimulatedTrackProximity", &v41);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v6)
  {
    int v7 = v41;
    if ((v41 - 1) >= 4) {
      int v7 = 0;
    }
    *(_DWORD *)(a1 + 428) = v7;
  }
  memset(&__p, 0, sizeof(__p));
  sub_1000C7F88(&v43);
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = 0;
  sub_1005B66DC((uint64_t)v43, "CLTRSimulatedTrackCoordinateAndRadius", &__dst, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
  __p.__r_.__value_.__r.__words[2] = *(void *)v57;
  v57[7] = 0;
  buf[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v44) {
    sub_1000DB0A0(v44);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    char v43 = 0;
    uint64_t v44 = 0;
    *(void *)v45 = 0;
    sub_1004BAC98(&__p, 0x2Cu, (uint64_t *)&v43);
    if ((char *)v44 - (char *)v43 == 72)
    {
      *(double *)(a1 + 328) = std::stod(v43, 0);
      *(unsigned char *)(a1 + 336) = 1;
      *(double *)(a1 + 344) = std::stod(v43 + 1, 0);
      *(unsigned char *)(a1 + 352) = 1;
      *(double *)(a1 + 360) = std::stod(v43 + 2, 0);
      *(unsigned char *)(a1 + 368) = 1;
      if (!*(unsigned char *)(a1 + 336)
        || !*(unsigned char *)(a1 + 352)
        || !sub_1000EF68C(*(double *)(a1 + 328), *(double *)(a1 + 344))
        || !*(unsigned char *)(a1 + 368)
        || *(double *)(a1 + 360) < 0.0)
      {
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        uint64_t v9 = qword_102418FB8;
        if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "TrackRun,Warning,CLTRSimulatedTrackCoordinateAndRadius could not be used,simulated\t\t\t\t\t\t\t  coordinates or radius invalid.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FB0 != -1) {
            dispatch_once(&qword_102418FB0, &stru_102328308);
          }
          __int16 v38 = 0;
          uint64_t v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v36);
          if (v36 != (char *)buf) {
            free(v36);
          }
        }
        if (*(unsigned char *)(a1 + 336)) {
          *(unsigned char *)(a1 + 336) = 0;
        }
        if (*(unsigned char *)(a1 + 352)) {
          *(unsigned char *)(a1 + 352) = 0;
        }
        if (*(unsigned char *)(a1 + 368)) {
          *(unsigned char *)(a1 + 368) = 0;
        }
      }
    }
    else
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v10 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "TrackRun,Warning,CLTRSimulatedTrackCoordinateAndRadius could not be parsed,did not have three parts", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        __int16 v38 = 0;
        uint64_t v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
    }
    *(void *)std::string buf = &v43;
    sub_1000A7B4C((void ***)buf);
  }
  std::string::erase(&__p, 0, 0xFFFFFFFFFFFFFFFFLL);
  sub_1000C7F88(&v43);
  uint64_t v11 = v43;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&v37, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v37 = __p;
  }
  sub_1005B66DC((uint64_t)v11, "CLTRSimulatedUserPosition", &v37, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
  __p.__r_.__value_.__r.__words[2] = *(void *)v57;
  v57[7] = 0;
  buf[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v44) {
    sub_1000DB0A0(v44);
  }
  std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
  }
  if (v12)
  {
    char v43 = 0;
    uint64_t v44 = 0;
    *(void *)v45 = 0;
    sub_1004BAC98(&__p, 0x2Cu, (uint64_t *)&v43);
    if ((char *)v44 - (char *)v43 == 48)
    {
      *(double *)(a1 + 376) = std::stod(v43, 0);
      *(unsigned char *)(a1 + 384) = 1;
      *(double *)(a1 + 392) = std::stod(v43 + 1, 0);
      *(unsigned char *)(a1 + 400) = 1;
    }
    else
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v13 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "TrackRun,Warning,CLTRSimulatedUserPosition could not be parsed,did not have two parts", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        __int16 v38 = 0;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
    }
    *(void *)std::string buf = &v43;
    sub_1000A7B4C((void ***)buf);
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v14 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 412)) {
      int v15 = *(_DWORD *)(a1 + 408);
    }
    else {
      int v15 = -1;
    }
    if (*(unsigned char *)(a1 + 420)) {
      int v16 = *(_DWORD *)(a1 + 416);
    }
    else {
      int v16 = -1;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (*(unsigned char *)(a1 + 336)) {
      uint64_t v18 = *(void *)(a1 + 328);
    }
    if (*(unsigned char *)(a1 + 352)) {
      uint64_t v17 = *(void *)(a1 + 344);
    }
    if (*(unsigned char *)(a1 + 368)) {
      double v19 = *(double *)(a1 + 360);
    }
    else {
      double v19 = -1.0;
    }
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    if (*(unsigned char *)(a1 + 384)) {
      uint64_t v21 = *(void *)(a1 + 376);
    }
    int v22 = *(_DWORD *)(a1 + 424);
    int v23 = *(_DWORD *)(a1 + 428);
    if (*(unsigned char *)(a1 + 400)) {
      uint64_t v20 = *(void *)(a1 + 392);
    }
    *(_DWORD *)std::string buf = 67176705;
    *(_DWORD *)&uint8_t buf[4] = v15;
    *(_WORD *)&uint8_t buf[8] = 1025;
    *(_DWORD *)&buf[10] = v16;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)int v57 = v22;
    *(_WORD *)&v57[4] = 1025;
    *(_DWORD *)&v57[6] = v23;
    __int16 v58 = 2049;
    uint64_t v59 = v18;
    __int16 v60 = 2049;
    uint64_t v61 = v17;
    __int16 v62 = 2049;
    double v63 = v19;
    __int16 v64 = 2049;
    uint64_t v65 = v21;
    __int16 v66 = 2049;
    uint64_t v67 = v20;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "TrackRun,Simulated,LapCount,%{private}d,LaneEstimate,%{private}d,EstimatedLaneConfidence,%{public}d,TrackProximity,%{private}d,TrackLatitude,%{private}.7lf,TrackLongitude,%{private}.7lf,TrackRadius,%{private}.1lf,DeviceLatitude,%{private}.7lf,DeviceLongitude,%{private}.7lf", buf, 0x4Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    if (*(unsigned char *)(a1 + 412)) {
      int v24 = *(_DWORD *)(a1 + 408);
    }
    else {
      int v24 = -1;
    }
    if (*(unsigned char *)(a1 + 420)) {
      int v25 = *(_DWORD *)(a1 + 416);
    }
    else {
      int v25 = -1;
    }
    if (*(unsigned char *)(a1 + 336)) {
      uint64_t v26 = *(void *)(a1 + 328);
    }
    else {
      uint64_t v26 = 0;
    }
    if (*(unsigned char *)(a1 + 352)) {
      uint64_t v27 = *(void *)(a1 + 344);
    }
    else {
      uint64_t v27 = 0;
    }
    if (*(unsigned char *)(a1 + 368)) {
      unint64_t v28 = *(void *)(a1 + 360);
    }
    else {
      unint64_t v28 = 0xBFF0000000000000;
    }
    if (*(unsigned char *)(a1 + 384)) {
      uint64_t v29 = *(void *)(a1 + 376);
    }
    else {
      uint64_t v29 = 0;
    }
    int v30 = *(_DWORD *)(a1 + 424);
    int v31 = *(_DWORD *)(a1 + 428);
    if (*(unsigned char *)(a1 + 400)) {
      uint64_t v32 = *(void *)(a1 + 392);
    }
    else {
      uint64_t v32 = 0;
    }
    LODWORD(v43) = 67176705;
    HIDWORD(v43) = v24;
    LOWORD(v44) = 1025;
    *(_DWORD *)((char *)&v44 + 2) = v25;
    HIWORD(v44) = 1026;
    *(_DWORD *)v45 = v30;
    *(_WORD *)&v45[4] = 1025;
    *(_DWORD *)&v45[6] = v31;
    __int16 v46 = 2049;
    uint64_t v47 = v26;
    __int16 v48 = 2049;
    uint64_t v49 = v27;
    __int16 v50 = 2049;
    unint64_t v51 = v28;
    __int16 v52 = 2049;
    uint64_t v53 = v29;
    __int16 v54 = 2049;
    uint64_t v55 = v32;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ReadEngineOverrideDaemonSettings()", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10148B728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char *a46,uint64_t a47)
{
  a46 = &a36;
  sub_1000A7B4C((void ***)&a46);
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10148B7F8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleGnssRhythmicModeOfOperationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleGnssRhythmicModeOfOperationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101492E84(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148B9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148B9D4(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101493090(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148BBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148BBC0(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1014934C4(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148BD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148BDAC(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101493ABC(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148BF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148BF98(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101494068(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148C164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148C184(int a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101494430(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148C350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148C370(int a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101494B84(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148C53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148C55C(int a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 184), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::HandleWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::HandleWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1014950C8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10148C728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148C748(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_101AB7088();
  }
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v13 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      __int16 v14 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning TrackRun,could not handle exiting %{private}s", buf, 0xCu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      if (v22 >= 0) {
        uint64_t v19 = buf;
      }
      else {
        uint64_t v19 = *(unsigned char **)buf;
      }
      int v23 = 136380675;
      int v24 = v19;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v20);
      if (v20 != (char *)__p) {
        free(v20);
      }
    }
    sub_10148F890(a1);
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v5 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      int v6 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TrackRun,entering %{private}s", buf, 0xCu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      if (v22 >= 0) {
        int v15 = buf;
      }
      else {
        int v15 = *(unsigned char **)buf;
      }
      int v23 = 136380675;
      int v24 = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
    *(void *)(a1 + 96) = a2;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2))
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v7 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
        uint64_t v8 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136380675;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TrackRun,successfully entered %{private}s", buf, 0xCu);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
        if (v22 >= 0) {
          uint64_t v9 = buf;
        }
        else {
          uint64_t v9 = *(unsigned char **)buf;
        }
        int v23 = 136380675;
        int v24 = v9;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v10);
        if (v10 != (char *)__p) {
          free(v10);
        }
      }
    }
    else
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      char v11 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr))(**(void **)(a1 + 96) + 16))(__p);
        std::string::size_type v12 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136380675;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning TrackRun,could not handle entering %{private}s", buf, 0xCu);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 96) + 16))(buf);
        if (v22 >= 0) {
          uint64_t v17 = buf;
        }
        else {
          uint64_t v17 = *(unsigned char **)buf;
        }
        int v23 = 136380675;
        int v24 = v17;
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::ChangeState(TrackRunControllerState *const)", "%s\n", v18);
        if (v18 != (char *)__p) {
          free(v18);
        }
      }
      sub_10148F890(a1);
    }
  }
}

uint64_t sub_10148CFCC()
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v0 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "TrackRun,SendToTrackRunEngine", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SendToTrackRunEngine(const SerializedClpLogEntry &)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return trackrun::TrackRunSupervisor::RaiseEventsFrom();
}

void sub_10148D174(uint64_t a1, uint64_t a2, char a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  if (wireless_diagnostics::google::protobuf::MessageLite::SerializeToString())
  {
    if (*(unsigned char *)(a1 + 34) && *(void *)(a1 + 104) && (a3 & 1) == 0) {
      sub_10148CFCC();
    }
    if (*(void *)(a1 + 40))
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v5 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TrackRun,Record message", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SendMessage(const CLP::LogEntry::LogEntry &, BOOL)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      sub_100168EAC(*(void *)(a1 + 40), (uint64_t)__p);
    }
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v6 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "TrackRun,Could not serialize protobuf message", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunController::SendMessage(const CLP::LogEntry::LogEntry &, BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10148D4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10148D4C4()
{
  return 1;
}

void *sub_10148D4CC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "TrackRunControllerDisabledState");
}

uint64_t sub_10148D4DC(uint64_t a1)
{
  sub_10148D56C(*(void *)(a1 + 8));
  sub_10148D654(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 104))
  {
    int v3 = (std::mutex *)(v2 + 112);
    std::mutex::lock((std::mutex *)(v2 + 112));
    cnframework::Supervisor::Pause(*(cnframework::Supervisor **)(*(void *)(a1 + 8) + 104));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(*(void *)(a1 + 8) + 104));
    std::mutex::unlock(v3);
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v4 = *(void *)(v2 + 40);
  if (v4) {
    sub_101212CAC(v4);
  }
  return 1;
}

void sub_10148D558(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10148D56C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 216);
    if (v2) {
      [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:41];
    }
  }
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v3 = *(void *)(a1 + 224);
    if (v3) {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:1];
    }
  }
  *(unsigned char *)(a1 + 25) = 0;
  sub_101490354(a1);
  sub_101490508(a1);
  sub_1014906BC(a1);
  sub_10148F130(a1);
  sub_101490870((unsigned char *)a1);
  if (*(unsigned char *)(a1 + 30))
  {
    uint64_t v4 = *(void *)(a1 + 256);
    if (v4) {
      [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:0];
    }
    *(unsigned char *)(a1 + 30) = 0;
  }
  if (*(unsigned char *)(a1 + 31))
  {
    uint64_t v5 = *(void *)(a1 + 264);
    if (v5) {
      [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:0];
    }
    *(unsigned char *)(a1 + 31) = 0;
  }
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v6 = *(void *)(a1 + 272);
    if (v6) {
      [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:0];
    }
    *(unsigned char *)(a1 + 33) = 0;
  }
}

void sub_10148D654(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = sub_100D530F0();
    sub_100134750(__p, "CLTrackRunController");
    id v5 = [objc_msgSend(*(id *)(a1 + 184), "silo") queue];
    *(void *)std::string buf = off_102328358;
    uint64_t v9 = a1;
    uint64_t v10 = buf;
    sub_100D53438(v2, (uint64_t)__p, (uint64_t *)&v5, (uint64_t)buf);
    sub_10065ABCC(buf);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 32) = 1;
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v3 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TrackRun,registerForTrackRunEnablementNotifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      LOWORD(__p[0]) = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForTrackRunEnablementNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10148D868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10148D89C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "TrackRunControllerEnabledState");
}

uint64_t sub_10148D8AC(uint64_t a1)
{
  *(double *)(a1 + 16) = sub_10016C458();
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 40))
  {
    sub_10120EFA4(*(void *)(v2 + 40));
    sub_10148AC04(*(void *)(a1 + 8));
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (*(void *)(v2 + 104))
  {
    uint64_t v3 = (std::mutex *)(v2 + 112);
    std::mutex::lock((std::mutex *)(v2 + 112));
    cnframework::Supervisor::Start(*(cnframework::Supervisor **)(*(void *)(a1 + 8) + 104));
    std::mutex::unlock(v3);
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!*(void *)(v2 + 192)) {
    operator new();
  }
  sub_10148D654(v2);
  sub_10148DC7C(*(void **)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v4 + 25))
  {
    uint64_t v5 = *(void *)(v4 + 224);
    uint64_t v6 = *(void *)(a1 + 8);
    if (v5)
    {
      [*(id *)(v5 + 16) register:*(void *)(v5 + 8) forNotification:1 registrationInfo:0];
      uint64_t v6 = *(void *)(a1 + 8);
    }
    *(unsigned char *)(v4 + 25) = 1;
    uint64_t v4 = v6;
  }
  if (!*(unsigned char *)(v4 + 26))
  {
    uint64_t v7 = *(void *)(v4 + 232);
    uint64_t v8 = v4;
    if (v7)
    {
      [*(id *)(v7 + 16) register:*(void *)(v7 + 8) forNotification:2 registrationInfo:0];
      uint64_t v8 = *(void *)(a1 + 8);
    }
    *(unsigned char *)(v4 + 26) = 1;
    uint64_t v4 = v8;
  }
  if (!*(unsigned char *)(v4 + 27))
  {
    uint64_t v9 = *(void *)(v4 + 240);
    uint64_t v10 = v4;
    if (v9)
    {
      [*(id *)(v9 + 16) register:*(void *)(v9 + 8) forNotification:0 registrationInfo:0];
      uint64_t v10 = *(void *)(a1 + 8);
    }
    *(unsigned char *)(v4 + 27) = 1;
    uint64_t v4 = v10;
  }
  if (!*(unsigned char *)(v4 + 28))
  {
    uint64_t v11 = *(void *)(v4 + 248);
    uint64_t v12 = v4;
    if (v11)
    {
      [*(id *)(v11 + 16) register:*(void *)(v11 + 8) forNotification:2 registrationInfo:0];
      uint64_t v12 = *(void *)(a1 + 8);
    }
    *(unsigned char *)(v4 + 28) = 1;
    uint64_t v4 = v12;
  }
  sub_10148DE3C(v4);
  sub_10148E224(*(unsigned char **)(a1 + 8));
  uint64_t v13 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v13 + 30))
  {
    uint64_t v14 = *(void *)(v13 + 256);
    if (v14)
    {
      [*(id *)(v14 + 16) register:*(void *)(v14 + 8) forNotification:0 registrationInfo:0];
      *(unsigned char *)(v13 + 30) = 1;
      uint64_t v13 = *(void *)(a1 + 8);
    }
  }
  if (!*(unsigned char *)(v13 + 31))
  {
    uint64_t v15 = *(void *)(v13 + 264);
    if (v15)
    {
      [*(id *)(v15 + 16) register:*(void *)(v15 + 8) forNotification:0 registrationInfo:0];
      *(unsigned char *)(v13 + 31) = 1;
      uint64_t v13 = *(void *)(a1 + 8);
    }
  }
  if (!*(unsigned char *)(v13 + 33))
  {
    uint64_t v16 = *(void *)(v13 + 272);
    if (v16)
    {
      [*(id *)(v16 + 16) register:*(void *)(v16 + 8) forNotification:0 registrationInfo:0];
      *(unsigned char *)(v13 + 33) = 1;
    }
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v17 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "TrackRun,done registering for notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTrackRunController::TrackRunControllerEnabledState::HandleStateEntry()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return 1;
}

void sub_10148DC40()
{
}

void *sub_10148DC7C(void *result)
{
  if (!*((unsigned char *)result + 24))
  {
    int v1 = result;
    if (result[27])
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v2 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,GnssRhythmicModeOfOperationNotifications,registered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        uint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForGnssRhythmicModeOfOperationNotifications()", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
      uint64_t result = [*(id *)(v1[27] + 16) register:*(void *)(v1[27] + 8) forNotification:41 registrationInfo:0];
      *((unsigned char *)v1 + 24) = 1;
    }
  }
  return result;
}

void sub_10148DE3C(uint64_t a1)
{
  if (!*(void *)(a1 + 200))
  {
    [*(id *)(a1 + 184) vendor] proxyForService:@"CLRoutineMonitor"];
    uint64_t v2 = [[CLTrackRunControllerRoutineAdapter alloc] initWithTrackRunController:a1];
    *(void *)(a1 + 208) = v2;
    uint64_t v3 = *(void **)(a1 + 200);
    if (v3)
    {
      [v3 registerDelegate:v2 inSilo:[*(id *)(a1 + 184) silo]];
      [*(id *)(a1 + 200) setDelegateEntityName:"CLTrackRunController"];
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v4 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,registered for routine monitor. Start monitoring for visits.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        __int16 v12 = 0;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForRoutineMonitor()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      [*(id *)(a1 + 200) startLeechingVisitsForClient:*(void *)(a1 + 208)];
      id v5 = objc_alloc((Class)RTStoredVisitFetchOptions);
      id v6 = [v5 initWithAscending:0 confidence:[NSNumber numberWithDouble:RTVisitConfidenceHigh] dateInterval:0 labelVisit:1 limit:&off_102395090];
      uint64_t v7 = *(void **)(a1 + 200);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10148E3F4;
      v11[3] = &unk_1022C1658;
      v11[4] = a1;
      [v7 fetchStoredVisitsWithOptions:v6 withReply:v11];
    }
    else
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v8 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#cltrm,error CLRoutineMonitor is not supported.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        __int16 v12 = 0;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForRoutineMonitor()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

void sub_10148E224(unsigned char *a1)
{
  if (!a1[29])
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v2 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TrackRun,registering for session tracker app foregrounded notifications.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::RegisterForSessionTrackerAppForegroundedNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_101495664, @"NanolifestyleSessionTrackerAppForegroundedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    a1[29] = 1;
  }
}

void sub_10148E3F4(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v4 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      id v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#cltrm,error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
    }
    id v5 = qword_102418FB8;
    if (os_signpost_enabled((os_log_t)qword_102418FB8))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      id v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#cltrm,error fetching visits", "{\"msg%{public}.0s\":\"#cltrm,error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [objc_alloc((Class)CLVisit) initWithVisit:[a2 firstObject]];
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v8 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2113;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cltrm,fetched most recent visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    sub_10148E650(v6, v7);
  }
}

void sub_10148E650(uint64_t a1, void *a2)
{
  if ([a2 hasArrivalDate] && (objc_msgSend(a2, "hasDepartureDate") & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    id v7 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134283779;
      id v15 = [[objc_msgSend(a2, "_placeInference") userType];
      __int16 v16 = 2081;
      id v17 = [[[objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#cltrm,visit,currently in,userType,%{private}lu,preferredName,%{private}s", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 == -1) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if ([a2 hasArrivalDate] && objc_msgSend(a2, "hasDepartureDate"))
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v4 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134283779;
      id v15 = [objc_msgSend(a2, "_placeInference") userType];
      __int16 v16 = 2081;
      id v17 = [[[objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,visit,departed,userType,%{private}lu,preferredName,%{private}s", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 == -1)
    {
LABEL_29:
      int v10 = 134283779;
      id v11 = [objc_msgSend(a2, "_placeInference") userType];
      __int16 v12 = 2081;
      id v13 = [[[objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName") UTF8String];
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::processVisit(CLVisit *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
LABEL_26:
      sub_100168850(buf);
      sub_10016BC44((uint64_t)&v10);
      sub_10148EDC0(v8, (uint64_t *)&v10, a2, (uint64_t)buf);
      sub_10148D174(a1, (uint64_t)buf, 0);
      sub_1001687EC(buf);
      return;
    }
LABEL_31:
    dispatch_once(&qword_102418FB0, &stru_102328308);
    goto LABEL_29;
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  id v5 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134283779;
    id v15 = [objc_msgSend(a2, "_placeInference") userType];
    __int16 v16 = 2081;
    id v17 = [[[a2 _placeInference] preferredName] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#cltrm,visit,invalid arrival and deparature dates,cannot serialize,userType,%{private}lu,preferredName,%{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v10 = 134283779;
    id v11 = [objc_msgSend(a2, "_placeInference") userType];
    __int16 v12 = 2081;
    id v13 = [[[objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName") UTF8String];
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunController::processVisit(CLVisit *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_10148EC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_10148EC24(uint64_t a1)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onSessionTrackerAppLaunchNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::onSessionTrackerAppForegroundedNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(double *)(a1 + 432) = sub_10016C458();
}

void sub_10148EDC0(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v6 = *(void *)(a4 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 492) |= 1u;
  uint64_t v7 = *(void *)(v6 + 264);
  if (!v7) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a4);
  *(_DWORD *)(v7 + 68) |= 1u;
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    operator new();
  }
  if ((sub_101457C60(a2, v8) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v9 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#cltrm,Warning,Failed to convert CLVisit receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeCLVisit(const CLUtils::Timestamp &, const CLVisit *, CLP::LogEntry::LogEntry &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  sub_101462648(a3, v7);
}

void sub_10148F02C()
{
}

double sub_10148F088(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v2 = *(void *)(a2 + 32);
  if (!v2) {
    operator new();
  }
  int v3 = *(_DWORD *)(v2 + 44);
  *(int8x16_t *)(v2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  double result = *(double *)a1;
  *(_DWORD *)(v2 + 44) = v3 | 7;
  *(double *)(v2 + 24) = result;
  return result;
}

void sub_10148F10C()
{
}

void sub_10148F130(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2) {

  }
  *(void *)(a1 + 200) = 0;
  int v3 = *(void **)(a1 + 208);
  if (v3) {

  }
  *(void *)(a1 + 208) = 0;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v4 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltrm,deregistered for routine monitor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForRoutineMonitor()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_10148F2DC(uint64_t a1)
{
  sub_10148C748(a1, a1 + 56);
  sub_10148F698(a1);
  sub_10148F890(a1);
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TrackRun,destructing CLTrackRunController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunController::~CLTrackRunController()", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t v3 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_101495D54((uint64_t *)(a1 + 192), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  uint64_t v11 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  id v13 = *(std::__shared_weak_count **)(a1 + 8);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_10148F68C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10148F698(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = sub_100D530F0();
    sub_100134750(__p, "CLTrackRunController");
    sub_100D537B8(v2, (unsigned __int8 **)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v3 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TrackRun,deregisterForTrackRunEnablementNotifications", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForTrackRunEnablementNotifications()", "%s\n", v4);
      if (v4 != (char *)__p) {
        free(v4);
      }
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
}

void sub_10148F86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10148F890(uint64_t a1)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,resetting CLTrackRunController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    *(_WORD *)uint64_t v10 = 0;
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::Reset()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_10148D56C(a1);
  sub_10148D654(a1);
  *(void *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)(a1 + 96) = a1 + 56;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v3 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 96) + 16))(buf);
    uint64_t v4 = v15 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)uint64_t v10 = 136380675;
    *(void *)&v10[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TrackRun,entering %{private}s", v10, 0xCu);
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 96) + 16))(v10);
    if (v11 >= 0) {
      uint64_t v7 = v10;
    }
    else {
      uint64_t v7 = *(unsigned char **)v10;
    }
    int v12 = 136380675;
    id v13 = v7;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    if (v11 < 0) {
      operator delete(*(void **)v10);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::Reset()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(void *)(a1 + 104))
  {
    std::mutex::lock((std::mutex *)(a1 + 112));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(a1 + 104));
    std::mutex::unlock((std::mutex *)(a1 + 112));
  }
  if (*(void *)(a1 + 192))
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v5 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TrackRun,Resetting fTRCGeoMapRunningTrackDataManager", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      *(_WORD *)uint64_t v10 = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::Reset()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_10076135C(*(void *)(a1 + 192));
  }
}

void sub_10148FD88(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10148FDA4(uint64_t result)
{
  if (result)
  {
    sub_10148F2DC(result);
    operator delete();
  }
  return result;
}

void sub_10148FDE4(void *a1@<X8>)
{
  if (sub_101490138())
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v2 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TrackRun,feature enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLTrackRunController::CLTrackRunControllerPointer CLTrackRunController::CreateTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    operator new();
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v3 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TrackRun,feature disabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLTrackRunController::CLTrackRunControllerPointer CLTrackRunController::CreateTrackRunController(id<CLIntersiloUniverse>)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *a1 = 0;
  a1[1] = nullsub_1528;
}

void sub_10149010C()
{
}

uint64_t sub_101490138()
{
  sub_1000C7F88(buf);
  uint64_t v0 = *(void *)buf;
  LODWORD(v1) = sub_100740F54();
  LOBYTE(v5[0]) = 0;
  if (sub_1000D2988(v0, "IsTrackRunEnabledIfInstantiated", (BOOL *)v5)) {
    uint64_t v1 = LOBYTE(v5[0]) != 0;
  }
  else {
    uint64_t v1 = v1;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,IsTrackRunEnabledIfInstantiated,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    v5[0] = 67240192;
    v5[1] = v1;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTrackRunController::IsTrackRunEnabledIfInstantiated()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

void sub_101490334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_101490354(uint64_t a1)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from motion state mediator notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForMotionStateMediatorNotifications()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*(unsigned char *)(a1 + 26))
  {
    uint64_t v3 = *(void *)(a1 + 232);
    if (v3) {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:2];
    }
    *(unsigned char *)(a1 + 26) = 0;
  }
}

void sub_101490508(uint64_t a1)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from motion state observer notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForMotionStateObserverNotifications()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*(unsigned char *)(a1 + 27))
  {
    uint64_t v3 = *(void *)(a1 + 240);
    if (v3) {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:0];
    }
    *(unsigned char *)(a1 + 27) = 0;
  }
}

void sub_1014906BC(uint64_t a1)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from natalimetry notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForNatalimetryNotifications()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v3 = *(void *)(a1 + 248);
    if (v3) {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:2];
    }
    *(unsigned char *)(a1 + 28) = 0;
  }
}

void sub_101490870(unsigned char *a1)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TrackRun,deregister from session tracker app foregrounded notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::DeregisterForSessionTrackerAppForegroundedNotifications()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (a1[29])
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"NanolifestyleSessionTrackerAppForegroundedNotification", 0);
    a1[29] = 0;
  }
}

void sub_101490A28(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 96) + 16))(&__s1);
  sub_100134750(__p, "TrackRunControllerDisabledState");
  unsigned __int8 v2 = v22;
  if ((v22 & 0x80u) == 0) {
    size_t v3 = v22;
  }
  else {
    size_t v3 = __n;
  }
  unint64_t v4 = v19;
  int v5 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != v4)
  {
    BOOL v15 = 0;
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if ((v19 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((char)v22 < 0)
  {
    BOOL v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    uint64_t v7 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v6;
      char v6 = (void **)((char *)v6 + 1);
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  BOOL v15 = 1;
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    operator delete(__s1);
    if (v15) {
      return;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v22 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (v15) {
    return;
  }
LABEL_29:
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  __int16 v16 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TrackRun,received external disable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    LOWORD(__p[0]) = 0;
    id v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::DisableTrackRun()", "%s\n", v17);
    if (v17 != (char *)&__s1) {
      free(v17);
    }
  }
  sub_10148C748(a1, a1 + 56);
}

void sub_101490CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101490CEC(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 96) + 16))(&__s1);
  sub_100134750(__p, "TrackRunControllerEnabledState");
  unsigned __int8 v2 = v22;
  if ((v22 & 0x80u) == 0) {
    size_t v3 = v22;
  }
  else {
    size_t v3 = __n;
  }
  unint64_t v4 = v19;
  int v5 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != v4)
  {
    BOOL v15 = 0;
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if ((v19 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((char)v22 < 0)
  {
    BOOL v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    uint64_t v7 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v6;
      char v6 = (void **)((char *)v6 + 1);
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  BOOL v15 = 1;
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    operator delete(__s1);
    if (v15) {
      return;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v22 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (v15) {
    return;
  }
LABEL_29:
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  __int16 v16 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TrackRun,received external enable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    LOWORD(__p[0]) = 0;
    id v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::EnableTrackRun()", "%s\n", v17);
    if (v17 != (char *)&__s1) {
      free(v17);
    }
  }
  sub_10148C748(a1, a1 + 72);
}

void sub_101490F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101490FB0(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    double v2 = sub_10016C458();
    sub_1000C7F88(buf);
    v7[0] = 0.0;
    if (sub_1000A699C(*(uint64_t *)&buf[0], "CLTRRecordingFileAgeThresholdSeconds", v7)) {
      double v3 = v7[0];
    }
    else {
      double v3 = 21600.0;
    }
    if (*((void *)&buf[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
    }
    double v4 = v2 - *(double *)(a1 + 16);
    if (v4 > v3)
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v5 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TrackRun,closing recording file,second since last,%.0lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        LODWORD(v7[0]) = 134217984;
        *(double *)((char *)v7 + 4) = v4;
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::NotifyGnssTurnedOff()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      sub_101212CAC(*(void *)(a1 + 40));
      *(double *)(a1 + 16) = v2;
      sub_10120EFA4(*(void *)(a1 + 40));
      sub_10148AC04(a1);
    }
  }
}

void sub_1014911F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101491210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 384) && *(unsigned char *)(a1 + 400))
  {
    *(void *)(a2 + 4) = *(void *)(a1 + 376);
    *(void *)(a2 + 12) = *(void *)(a1 + 392);
  }
  if (*(unsigned char *)(a1 + 336) && *(unsigned char *)(a1 + 352) && *(unsigned char *)(a1 + 368))
  {
    unsigned int v6 = *(_DWORD *)(a2 + 96) - 1;
    if (v6 > 0xA || ((0x509u >> v6) & 1) == 0)
    {
      int v7 = 0;
LABEL_10:
      *(_DWORD *)(a1 + 428) = v7;
      goto LABEL_11;
    }
    unsigned int v18 = 0x508u >> (*(unsigned char *)(a2 + 96) - 1);
    double v19 = sub_1000F1648((double *)(a1 + 280), *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 328), *(double *)(a1 + 344), 0.0);
    if (v18)
    {
      if (*(unsigned char *)(a1 + 368))
      {
        double v20 = *(double *)(a1 + 360);
        goto LABEL_54;
      }
    }
    else if (*(unsigned char *)(a1 + 368))
    {
      double v20 = *(double *)(a1 + 360);
      if (v19 <= v20)
      {
        int v7 = 4;
        goto LABEL_10;
      }
LABEL_54:
      if (v19 <= v20 + v20)
      {
        int v7 = 3;
      }
      else if (v19 <= v20 * 3.0)
      {
        int v7 = 2;
      }
      else
      {
        int v7 = 1;
      }
      goto LABEL_10;
    }
    sub_10020D700();
  }
LABEL_11:
  if (*(unsigned char *)(a1 + 412)) {
    int v8 = *(_DWORD *)(a1 + 408);
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a3 + 168) = v8;
  if (*(unsigned char *)(a1 + 420))
  {
    *(_DWORD *)(a3 + 248) = *(_DWORD *)(a1 + 416);
    int v9 = (_DWORD *)(a3 + 248);
    int v10 = *(_DWORD *)(a1 + 416);
  }
  else
  {
    int v10 = -1;
    *(_DWORD *)(a3 + 248) = -1;
    int v9 = (_DWORD *)(a3 + 248);
  }
  *(_DWORD *)(a3 + 264) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 424);
  if (v11 >= 4) {
    unsigned int v11 = 0;
  }
  *(_DWORD *)(a3 + 272) = v11;
  int v12 = *(_DWORD *)(a1 + 428);
  if ((v12 - 1) >= 4) {
    int v12 = 0;
  }
  *(_DWORD *)(a3 + 276) = v12;
  if (!*(unsigned char *)(a1 + 34) || !*(void *)(a1 + 104) || *(void *)(a1 + 96) == a1 + 56) {
    return 0;
  }
  sub_101495C40((uint64_t)v34);
  std::mutex::lock((std::mutex *)(a1 + 112));
  int TrackRunSolution = trackrun::TrackRunSupervisor::GetTrackRunSolution(*(trackrun::TrackRunSupervisor **)(a1 + 104), (trackrun::TrackRunSolutionEvent *)v34);
  if (TrackRunSolution)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    BOOL v14 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = TrackRunSolution;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "TrackRun,could not retrieve latest TrackRun solution,retval,%d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v69 = 67109120;
      int v70 = TrackRunSolution;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTrackRunController::GetLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v30);
      if (v30 != (char *)&buf) {
        free(v30);
      }
    }
    int v15 = 0;
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    __int16 v16 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 67174657;
      DWORD1(buf) = v38;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TrackRun,obtained latest TrackRun solution with track proximity %{private}d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v69 = 67174657;
      int v70 = v38;
      int v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTrackRunController::GetLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v31);
      if (v31 != (char *)&buf) {
        free(v31);
      }
    }
    int v17 = v38;
    if ((v38 - 1) >= 4) {
      int v17 = 0;
    }
    *(_DWORD *)(a3 + 276) = v17;
    if (v52)
    {
      *(_DWORD *)(a3 + 268) = v40;
      *(void *)(a3 + 280) = v39;
      *(void *)(a3 + 256) = v51;
      if (v48) {
        *(_DWORD *)(a3 + 264) = v47;
      }
      if (v50) {
        _DWORD *v9 = v49;
      }
      if (v44) {
        *(void *)(a2 + 60) = v43;
      }
      if (v42)
      {
        *(_OWORD *)(a2 + 4) = v41;
        int v15 = 1;
      }
      else
      {
        int v15 = 0;
      }
      if (v46) {
        *(void *)(a2 + 20) = v45;
      }
      if (v67
        && (sub_1007630D4(*(void *)(a1 + 192), 1),
            sub_100761770(*(void *)(a1 + 192), (double *)(a2 + 4), a1, 1),
            v67)
        && *(unsigned char *)(a1 + 49))
      {
        int v21 = *(_DWORD *)(a1 + 52);
        *(_DWORD *)(a1 + 52) = v21 + 1;
        if (v21 >= 1)
        {
          if (qword_102418FB0 != -1) {
            dispatch_once(&qword_102418FB0, &stru_102328308);
          }
          unsigned __int8 v22 = qword_102418FB8;
          if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
          {
            int v23 = *(_DWORD *)(a1 + 52);
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLTR,consective epochs requesting full track geometry during a trackrun supported workout,count,%d", (uint8_t *)&buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102418FB0 != -1) {
              dispatch_once(&qword_102418FB0, &stru_102328308);
            }
            int v32 = *(_DWORD *)(a1 + 52);
            int v69 = 67109120;
            int v70 = v32;
            uint64_t v33 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTrackRunController::GetLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v33);
            if (v33 != (char *)&buf) {
              free(v33);
            }
          }
          if (*(_DWORD *)(a1 + 52) == 4) {
            sub_10187A1C8([objc_msgSend(*(id *)(a1 + 184), "silo") queue], @"trackrun", @"need_full_track_geometry", 0);
          }
        }
      }
      else
      {
        *(_DWORD *)(a1 + 52) = 0;
      }
    }
    else
    {
      int v15 = 0;
    }
    if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
    {
      if (v57 && v53)
      {
        double v24 = *(double *)(a3 + 8);
        double v25 = v55;
        if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v24 >= 0.0) {
          *(double *)(a1 + 320) = *(double *)(a1 + 320) + v55 - v24;
        }
        uint64_t v26 = v56;
        *(double *)(a3 + 8) = v25;
        *(void *)(a3 + 16) = v26;
        if (v54) {
          *(unsigned char *)(a3 + 288) = 1;
        }
      }
      if (*(double *)a3 > 0.0) {
        *(double *)a3 = *(double *)a3 + *(double *)(a1 + 320);
      }
    }
    if (v66)
    {
      *(_DWORD *)(a3 + 168) = v64;
      uint64_t v27 = v60;
      uint64_t v28 = v61;
      *(double *)(a3 + 176) = v59 + (double)v58;
      *(void *)(a3 + 184) = v27;
      *(void *)(a3 + 192) = v28;
      *(_OWORD *)(a3 + 200) = v62;
      *(_OWORD *)(a3 + 216) = v63;
      *(_OWORD *)(a3 + 232) = v65;
    }
    long long v72 = 0u;
    long long v73 = 0u;
    long long buf = 0u;
    sub_101495CF4((uint64_t)&buf);
    long long v35 = buf;
    long long v36 = v72;
    long long v37 = v73;
    char v68 = 0;
  }
  std::mutex::unlock((std::mutex *)(a1 + 112));
  trackrun::TrackRunSolutionEvent::~TrackRunSolutionEvent((trackrun::TrackRunSolutionEvent *)v34);
  BOOL result = v15 != 0;
  if (TrackRunSolution) {
    return 0;
  }
  return result;
}

void sub_101491A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::mutex::unlock(v12);
  trackrun::TrackRunSolutionEvent::~TrackRunSolutionEvent((trackrun::TrackRunSolutionEvent *)&a12);
  _Unwind_Resume(a1);
}

void sub_101491A78(uint64_t a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 2);
  if (v3 < 1)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    unsigned int v6 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      int v7 = *((_DWORD *)a2 + 2);
      *(_DWORD *)long long buf = 67174657;
      int v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "TrackRun,Supplied hint lane number is invalid,%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v8 = *((_DWORD *)a2 + 2);
      LODWORD(v12[0]) = 67174657;
      HIDWORD(v12[0]) = v8;
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunController::SetTrackRunHint(const CLTrackRunHint &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 416) = v3;
    *(unsigned char *)(a1 + 420) = 1;
    if (*(unsigned char *)(a1 + 34) || *(void *)(a1 + 40))
    {
      sub_100168850(buf);
      sub_10016BC44((uint64_t)v12);
      sub_101491CB4(v5, v12, *a2, a2[1], (uint64_t)buf);
      sub_10148D174(a1, (uint64_t)buf, 0);
      sub_1001687EC(buf);
    }
  }
}

void sub_101491C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_101491CB4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v6 = *(void *)(a5 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 492) |= 0x80u;
  uint64_t v7 = *(void *)(v6 + 320);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 20) |= 1u;
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v8 + 36) |= 1u;
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    operator new();
  }
  if (!sub_1014611E4(a2, v9))
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v10 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert track run hint receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeTrackRunHint(const CLUtils::Timestamp &, const CLTrackRunHint, CLP::LogEntry::LogEntry &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  sub_1014633A0((uint64_t)v12, v8);
}

void sub_101491F58()
{
}

void sub_101491FC8(uint64_t a1, void *a2, _OWORD *a3, double *a4, int a5, int a6)
{
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
    double v13 = COERCE_DOUBLE(sub_1007613DC(v9));
    if (v14) {
      double v15 = v13;
    }
    else {
      double v15 = NAN;
    }
    double v16 = sub_10016C458() - *a4;
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    double v17 = v16 * 1000.0;
    unsigned int v18 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349824;
      id v22 = [a2 count];
      __int16 v23 = 2050;
      double v24 = v15;
      __int16 v25 = 2050;
      double v26 = v17;
      __int16 v27 = 1026;
      int v28 = a5;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "TrackRun,serializing track data count,%{public}lu,after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms,isWideAreaQuery,%{public}d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      [a2 count];
      double v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleRunningTrackDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &, const BOOL, const BOOL)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    if (a5 && a6) {
      sub_1007630B4(*(void *)(a1 + 192), a3);
    }
  }
  if (*(unsigned char *)(a1 + 34) || *(void *)(a1 + 40))
  {
    uint64_t v19 = sub_100168850(buf);
    sub_1014922A4(v19, a2, (uint64_t)buf, a5);
    sub_10148D174(a1, (uint64_t)buf, 0);
    sub_1001687EC(buf);
  }
}

void sub_101492288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_1014922A4(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v7 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,SerializeRunningTrackData", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    LOWORD(v14[0]) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeRunningTrackData(const NSMutableArray *, CLP::LogEntry::LogEntry &, const BOOL) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v8 = *(void *)(a3 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x20000000u;
  uint64_t v9 = *(void *)(v8 + 240);
  if (!v9) {
    operator new();
  }
  sub_10016BC44((uint64_t)v14);
  sub_10148F088((uint64_t)v14, a3);
  *(_DWORD *)(v9 + 48) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(v14, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "TrackRun,Failed to convert track data receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunController::SerializeRunningTrackData(const NSMutableArray *, CLP::LogEntry::LogEntry &, const BOOL) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  sub_101463638(a2, v9, a4);
}

void sub_10149264C()
{
}

void sub_1014926A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 192);
  if (v4)
  {
    if ((*(_DWORD *)(a2 + 96) - 6) >= 3)
    {
      uint64_t v5 = sub_1014928F8(a1);
      sub_1007630D4(v4, v5);
      sub_100761770(*(void *)(a1 + 192), (double *)(a2 + 4), a1, 0);
    }
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v6 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TrackRun,could not query track data manager as it has not been created", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      LOWORD(v9[0]) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SendUnfilteredLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (*(unsigned char *)(a1 + 34) || *(void *)(a1 + 40))
  {
    sub_100168850(buf);
    int v10 = -1;
    sub_10016BC44((uint64_t)v9);
    sub_101492B9C(v7, v9, &v10, a2, (uint64_t)buf);
    sub_10148D174(a1, (uint64_t)buf, 0);
    sub_1001687EC(buf);
  }
}

void sub_1014928D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014928F8(uint64_t a1)
{
  double v2 = sub_10016C458();
  sub_1000C7F88(buf);
  *(void *)char v14 = 0;
  if (sub_1000A699C(*(uint64_t *)buf, "TimeSinceStaForegroundingThresholdSeconds", v14)) {
    double v3 = *(double *)v14;
  }
  else {
    double v3 = 600.0;
  }
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  double v4 = v2 - *(double *)(a1 + 432);
  if ((v4 > v3 || *(unsigned char *)(a1 + 50)) && (!*(unsigned char *)(a1 + 49) || *(unsigned char *)(a1 + 48))) {
    return 0;
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v6 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 49);
    int v8 = *(unsigned __int8 *)(a1 + 50);
    int v9 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)long long buf = 134349824;
    *(double *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v7;
    __int16 v22 = 1026;
    int v23 = v8;
    __int16 v24 = 1026;
    int v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#cltm,Tile loading from network allowed,secondsSinceLastSessionTrackerAppForegrounding,%{public}.1lf,currentlyInATrackRunSupportedWorkoutType,%{public}d,currentlyInAWorkout,%{public}d,gnssInRhythmicMode,%{public}d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v10 = *(unsigned __int8 *)(a1 + 49);
    int v11 = *(unsigned __int8 *)(a1 + 50);
    int v12 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)char v14 = 134349824;
    *(double *)&uint64_t v14[4] = v4;
    __int16 v15 = 1026;
    int v16 = v10;
    __int16 v17 = 1026;
    int v18 = v11;
    __int16 v19 = 1026;
    int v20 = v12;
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTrackRunController::IsTileLoadingFromNetworkCurrentlyAllowed() const", "%s\n", v13);
    if (v13 != buf) {
      free(v13);
    }
  }
  return 1;
}

void sub_101492B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_101492B9C(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 8u;
  uint64_t v9 = *(void *)(v8 + 32);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 100) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,failed to convert location notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeLocationNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  int v12 = *a3;
  *(_DWORD *)(v9 + 100) |= 2u;
  *(_DWORD *)(v9 + 32) = v12;
  sub_10145EEE0(a4, v9);
}

void sub_101492E28()
{
}

void sub_101492E84(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 41)
  {
    int v5 = *(void *)(a4 + 1464) & 1;
    int v6 = *(unsigned __int8 *)(a4 + 1472);
    *(unsigned char *)(a1 + 48) = sub_101811C3C(v6, v5);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v7 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
    {
      int v8 = *(unsigned __int8 *)(a1 + 48);
      *(_DWORD *)long long buf = 67240704;
      int v11 = v5;
      __int16 v12 = 1026;
      int v13 = v6;
      __int16 v14 = 1026;
      int v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TrackRun,HandleGnssRhythmicModeOfOperationNotification,has1HzClients,%{public}d,hasRhythmicClients,%{public}d,gnssInRhythmicMode,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleGnssRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_101493090(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  int v9 = a2;
  if (*a3 == 1)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 34) || *(void *)(result + 40))
    {
      sub_10016BC44((uint64_t)v8);
      uint64_t v6 = sub_100168850(v7);
      sub_10149312C(v6, v8, &v9, a4, (uint64_t)v7);
      sub_10148D174(v5, (uint64_t)v7, 0);
      return sub_1001687EC(v7);
    }
  }
  return result;
}

void sub_101493118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10149312C(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x10u;
  uint64_t v9 = *(void *)(v8 + 40);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert motion state notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeMotionStateNotification(const CLUtils::Timestamp &, const int &, const CLMotionState_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *(_DWORD *)(v9 + 32) |= 1u;
    uint64_t v12 = *(void *)(v9 + 8);
    if (!v12) {
      operator new();
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
  }
  int v13 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v13 | 6;
  uint64_t v14 = *(void *)(v9 + 16);
  if (!v14) {
    operator new();
  }
  sub_100163CA8(a4, v14, 0);
}

void sub_101493448()
{
}

uint64_t sub_1014934C4(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  v19[0] = a2;
  if (*a3 == 2)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 34) || *(void *)(result + 40))
    {
      sub_100168850(v18);
      sub_10016BC44((uint64_t)buf);
      sub_101493794(v6, (uint64_t *)buf, v19, a4, (uint64_t)v18);
      sub_10148D174(v5, (uint64_t)v18, 0);
      if (!sub_10010145C()) {
        return sub_1001687EC(v18);
      }
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      int v7 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a4 + 112);
        uint64_t v9 = *(void *)(a4 + 16);
        *(_DWORD *)long long buf = 134218240;
        uint64_t v24 = v8;
        __int16 v25 = 2048;
        uint64_t v26 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TrackRun,received motion state mediator notification,type,%ld,event,%ld", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        uint64_t v15 = *(void *)(a4 + 112);
        uint64_t v16 = *(void *)(a4 + 16);
        v19[1] = 134218240;
        uint64_t v20 = v15;
        __int16 v21 = 2048;
        uint64_t v22 = v16;
        __int16 v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      uint64_t v10 = *(void *)(a4 + 16);
      if (v10 == 13)
      {
        char v11 = 1;
      }
      else
      {
        if (v10 != 15) {
          goto LABEL_15;
        }
        char v11 = 0;
      }
      *(unsigned char *)(v5 + 50) = v11;
LABEL_15:
      char v12 = 0;
      unint64_t v13 = *(void *)(a4 + 112);
      if (v13 > 0x15 || ((1 << v13) & 0x328000) == 0) {
        goto LABEL_21;
      }
      uint64_t v14 = *(void *)(a4 + 16);
      if (v14 == 13)
      {
        char v12 = 1;
        goto LABEL_21;
      }
      if (v14 == 15)
      {
        char v12 = 0;
LABEL_21:
        *(unsigned char *)(v5 + 49) = v12;
      }
      return sub_1001687EC(v18);
    }
  }
  return result;
}

void sub_101493770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_101493794(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x80000000;
  uint64_t v9 = *(void *)(v8 + 256);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    char v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert motion state mediator notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeMotionStateMediatorNotification(const CLUtils::Timestamp &, const int &, const CLMotionStateMediator_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  sub_101465F54(a4, v13);
}

void sub_101493A4C()
{
}

uint64_t sub_101493ABC(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  v13[0] = a2;
  if (!*a3)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 34) || *(void *)(result + 40))
    {
      sub_100168850(v12);
      sub_10016BC44((uint64_t)buf);
      sub_101493D40(v6, (uint64_t *)buf, v13, a4, (uint64_t)v12);
      sub_10148D174(v5, (uint64_t)v12, 0);
      if ((sub_10010145C() & 1) == 0)
      {
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_102328308);
        }
        int v7 = qword_102418FB8;
        if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_INFO))
        {
          uint64_t v8 = *(unsigned int *)(a4 + 8);
          *(_DWORD *)long long buf = 134349056;
          uint64_t v16 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TrackRun,received motion state observer notification,type,%{public}ld", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FB0 != -1) {
            dispatch_once(&qword_102418FB0, &stru_102328308);
          }
          uint64_t v10 = *(unsigned int *)(a4 + 8);
          v13[1] = 134349056;
          uint64_t v14 = v10;
          char v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
        int v9 = *(_DWORD *)(a4 + 8);
        if (v9 > 7)
        {
          if (v9 != 90603 && v9 != 8) {
            goto LABEL_18;
          }
        }
        else
        {
          if (!v9)
          {
            *(unsigned char *)(v5 + 50) = 0;
LABEL_18:
            *(unsigned char *)(v5 + 49) = 0;
            return sub_1001687EC(v12);
          }
          if (v9 != 4) {
            goto LABEL_18;
          }
        }
        *(_WORD *)(v5 + 49) = 257;
      }
      return sub_1001687EC(v12);
    }
  }
  return result;
}

void sub_101493D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_101493D40(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x20u;
  uint64_t v9 = *(void *)(v8 + 48);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    char v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert motion state observer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeMotionStateObserverNotification(const CLUtils::Timestamp &, const int &, const CLMotionStateObserver_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  sub_101467134(a4, v13);
}

void sub_101493FF8()
{
}

uint64_t sub_101494068(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  int v9 = a2;
  if (*a3 == 2)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 34) || *(void *)(result + 40))
    {
      sub_100168850(v8);
      sub_10016BC44((uint64_t)v7);
      sub_101494108(v6, v7, &v9, a4, (uint64_t)v8);
      sub_10148D174(v5, (uint64_t)v8, 0);
      return sub_1001687EC(v8);
    }
  }
  return result;
}

void sub_1014940F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_101494108(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x40u;
  uint64_t v9 = *(void *)(v8 + 56);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    char v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Warning,Failed to convert natalimetry notification receipt time to protobuf.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeNatalimetryNotification(const CLUtils::Timestamp &, const int &, const CLNatalimetryNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  sub_1014587E8(a4, v13);
}

void sub_1014943C0()
{
}

void sub_101494430(uint64_t a1, int a2, _DWORD *a3, int *a4)
{
  int v13 = a2;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  int v7 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,received signal environment notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    LOWORD(v12[0]) = 0;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (!*a3 && (*(unsigned char *)(a1 + 34) || *(void *)(a1 + 40)))
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v8 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TrackRun,serializing signal environment notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      LOWORD(v12[0]) = 0;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100168850(buf);
    sub_10016BC44((uint64_t)v12);
    sub_101494774(v9, v12, &v13, a4, (uint64_t)buf);
    sub_10148D174(a1, (uint64_t)buf, 0);
    sub_1001687EC(buf);
  }
}

void sub_101494754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_101494774(uint64_t a1, uint64_t *a2, int *a3, int *a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x800u;
  uint64_t v9 = *(void *)(v8 + 96);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    char v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert signal environment notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeSignalEnvironmentNotification(const CLUtils::Timestamp &, const int &, const CLSignalEnvironmentProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  int v12 = *a3;
  *(_DWORD *)(v9 + 32) |= 8u;
  *(_DWORD *)(v9 + 24) = v12;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  int v13 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TrackRun,converting signal environment notification to protobuf", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeSignalEnvironmentNotification(const CLUtils::Timestamp &, const int &, const CLSignalEnvironmentProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_101460178(a4, (_DWORD *)v9);
}

void sub_101494B28()
{
}

void sub_101494B84(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v11 = a2;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  int v7 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,received step count notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    LOWORD(v10[0]) = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!*a3 && (*(unsigned char *)(a1 + 34) || *(void *)(a1 + 40)))
  {
    sub_100168850(buf);
    sub_10016BC44((uint64_t)v10);
    sub_101494DA0(v8, v10, &v11, a4, (uint64_t)buf);
    sub_10148D174(a1, (uint64_t)buf, 0);
    sub_1001687EC(buf);
  }
}

void sub_101494D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

BOOL sub_101494DA0(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x8000u;
  uint64_t v9 = *(void *)(v8 + 128);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert step count notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeStepCountNotification(const CLUtils::Timestamp &, const int &, const CLStepCountNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  return sub_1014604BC(a4, v13);
}

void sub_101495058()
{
}

void sub_1014950C8(uint64_t a1, int a2, _DWORD *a3, int *a4)
{
  int v11 = a2;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  int v7 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TrackRun,received watch orientation settings notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    LOWORD(v10[0]) = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::HandleWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!*a3 && (*(unsigned char *)(a1 + 34) || *(void *)(a1 + 40)))
  {
    sub_100168850(buf);
    sub_10016BC44((uint64_t)v10);
    sub_1014952E4(v8, v10, &v11, a4, (uint64_t)buf);
    sub_10148D174(a1, (uint64_t)buf, 0);
    sub_1001687EC(buf);
  }
}

void sub_1014952C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_1014952E4(uint64_t a1, uint64_t *a2, _DWORD *a3, int *a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x40000000u;
  uint64_t v9 = *(void *)(v8 + 248);
  if (!v9) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 40) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    int v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert watch orientation settings notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeWatchOrientationSettingsNotification(const CLUtils::Timestamp &, const int &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 40);
  *(_DWORD *)(v9 + 32) = *a3;
  *(_DWORD *)(v9 + 40) = v12 | 6;
  uint64_t v13 = *(_DWORD **)(v9 + 16);
  if (!v13) {
    operator new();
  }
  sub_101462A80(a4, v13);
  *(_DWORD *)(v9 + 40) |= 8u;
  uint64_t v14 = *(void *)(v9 + 24);
  if (!v14) {
    operator new();
  }
  sub_101461D1C(a4, v14);
}

void sub_1014955E0()
{
}

void sub_101495664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 184), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328328);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTrackRunController::onSessionTrackerAppForegroundedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328328);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTrackRunController::onSessionTrackerAppForegroundedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 184) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_101495D4C;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_101495880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014958A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v4 = *(void *)(a3 + 40);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 492) |= 0x10u;
  uint64_t v5 = *(void *)(v4 + 296);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 28) |= 2u;
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    operator new();
  }
  sub_10148F088((uint64_t)a2, a3);
  *(_DWORD *)(v6 + 52) |= 1u;
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    operator new();
  }
  if (!sub_101460F00(a2, v7))
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    uint64_t v8 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TrackRun,Warning,Failed to convert platform info receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunController::SerializeCLPlatformInfo(const CLUtils::Timestamp &, CLP::LogEntry::LogEntry &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  char v9 = sub_10015F708();
  sub_10146803C(v6, v9);
}

void sub_101495B44()
{
}

void sub_101495BB4()
{
}

void sub_101495BC8()
{
}

void sub_101495BDC(id a1)
{
  qword_102418FB8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_101495C0C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101495C40(uint64_t a1)
{
  double v2 = (_OWORD *)(a1 + 8);
  sub_101495CF4(a1 + 8);
  *(_DWORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 370) = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  sub_101495CF4((uint64_t)&v5);
  long long v3 = v6;
  *double v2 = v5;
  v2[1] = v3;
  v2[2] = v7;
  *(unsigned char *)(a1 + 370) = 0;
  return a1;
}

void sub_101495CE0(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101495CF4(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 8), 0, 0.0);
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 32), 0, 0.0);
  return a1;
}

void sub_101495D4C(uint64_t a1)
{
}

uint64_t sub_101495D54(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1007613D8(result);
    operator delete();
  }
  return result;
}

void sub_101495DA8()
{
}

void *sub_101495DBC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102328358;
  result[1] = v3;
  return result;
}

uint64_t sub_101495E04(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102328358;
  a2[1] = v2;
  return result;
}

void sub_101495E30(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  uint64_t v4 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TrackRun,TrackRunEnablementNotification,is_enabled,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLTrackRunController::RegisterForTrackRunEnablementNotifications()::(anonymous class)::operator()(const BOOL) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (v2) {
    sub_101490CEC(v3);
  }
  else {
    sub_101490A28(v3);
  }
}

uint64_t sub_101495FF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101496034()
{
}

BOOL sub_101496040()
{
  uint64_t v1 = qword_102418FB8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_101496060()
{
  int v2 = *(NSObject **)(v0 + 4024);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_101496090()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0C708;
      v0[3] = unk_101E0C718;
      v0[4] = xmmword_101E0C728;
      v0[0] = xmmword_101E0C6E8;
      v0[1] = unk_101E0C6F8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101496170(_Unwind_Exception *a1)
{
}

uint64_t sub_10149732C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v18 = v17 + 1;
          if (v17 == -1 || v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0) {
            goto LABEL_49;
          }
          v14 += 7;
          BOOL v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_51:
        uint64_t v35 = 40;
        goto LABEL_60;
      case 2u:
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v36 = 16;
        goto LABEL_65;
      case 3u:
        *(unsigned char *)(a1 + 48) |= 1u;
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v36 = 8;
LABEL_65:
        *(void *)(a1 + v36) = v22;
        continue;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 48) |= 4u;
        while (2)
        {
          uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v16 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v10 = v25++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_55:
        uint64_t v35 = 44;
        goto LABEL_60;
      case 5u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 48) |= 2u;
        break;
      case 6u:
        Data = (void *)PBReaderReadData();

        *(void *)(a1 + 32) = Data;
        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
      v16 |= (unint64_t)(v33 & 0x7F) << v29;
      if ((v33 & 0x80) == 0) {
        goto LABEL_57;
      }
      v29 += 7;
      BOOL v10 = v30++ >= 9;
      if (v10)
      {
        LODWORD(v16) = 0;
        goto LABEL_59;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_57:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v16) = 0;
    }
LABEL_59:
    uint64_t v35 = 24;
LABEL_60:
    *(_DWORD *)(a1 + v35) = v16;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_101498118(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101498148()
{
  if (qword_10248D720) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D720 + 8))(qword_10248D720);
  }
  if (qword_10248D728) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D728 + 8))(qword_10248D728);
  }
  if (qword_10248D730) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D730 + 8))(qword_10248D730);
  }
  if (qword_10248D738) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D738 + 8))(qword_10248D738);
  }
  if (qword_10248D740) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D740 + 8))(qword_10248D740);
  }
  if (qword_10248D748) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D748 + 8))(qword_10248D748);
  }
  if (qword_10248D750) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D750 + 8))(qword_10248D750);
  }
  if (qword_10248D758) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D758 + 8))(qword_10248D758);
  }
  if (qword_10248D760) {
    (*(void (**)(uint64_t))(*(void *)qword_10248D760 + 8))(qword_10248D760);
  }
  uint64_t result = qword_10248D768;
  if (qword_10248D768)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248D768 + 8);
    return v1();
  }
  return result;
}

void sub_101498350(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102487D28 & 1) == 0)
  {
    byte_102487D28 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenGnssAssistanceFile.pb.cc", a4);
    operator new();
  }
}

double sub_1014987A4(uint64_t a1)
{
  *(void *)a1 = off_102328948;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1014987E0(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_10248D720;
  if (!qword_10248D720)
  {
    double result = ((uint64_t (*)(void))sub_101498350)();
    uint64_t v2 = qword_10248D720;
  }
  v1[1] = v2;
  uint64_t v3 = qword_10248D730;
  if (qword_10248D730)
  {
    v1[2] = qword_10248D730;
  }
  else
  {
    double result = ((uint64_t (*)(void))sub_101498350)();
    uint64_t v3 = qword_10248D730;
    v1[2] = qword_10248D730;
    if (!v3)
    {
      double result = sub_101498350(result);
      uint64_t v3 = qword_10248D730;
    }
  }
  v1[3] = v3;
  uint64_t v4 = qword_10248D728;
  if (!qword_10248D728)
  {
    double result = sub_101498350(result);
    uint64_t v4 = qword_10248D728;
  }
  v1[7] = v4;
  return result;
}

void sub_101498860(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 20);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 20))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      if (v5 >= 5) {
        sub_101AB73E4();
      }
      a1[5] |= 1u;
      a1[2] = v5;
      int v4 = *(_DWORD *)(a2 + 20);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v6;
    }
  }
}

void sub_101498918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101498930(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102328510;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_101498950(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102328510;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1014989A4()
{
}

uint64_t sub_1014989F0(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_101498A04(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int v5 = a1 + 3;
  while (1)
  {
    while (1)
    {
      int v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_16;
      }
      unsigned int v16 = 0;
      uint64_t v11 = (char *)*((void *)this + 1);
      if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
        if (!result) {
          return result;
        }
        unsigned int v12 = v16;
      }
      else
      {
        unsigned int v12 = *v11;
        *((void *)this + 1) = v11 + 1;
      }
      if (v12 <= 4)
      {
        a1[5] |= 1u;
        a1[2] = v12;
      }
      uint64_t v13 = (unsigned char *)*((void *)this + 1);
      unint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v13 < v9 && *v13 == 16)
      {
        BOOL v10 = v13 + 1;
        *((void *)this + 1) = v10;
LABEL_26:
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          char v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          *unsigned int v5 = *v10;
          char v14 = (unsigned __int8 *)(v10 + 1);
          *((void *)this + 1) = v14;
        }
        a1[5] |= 2u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        BOOL v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_26;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_101498BB8(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(_DWORD *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t sub_101498C24(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 20);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 20))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_17;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 20) & 2) == 0) {
        goto LABEL_17;
      }
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if (v6 >= 0x80) {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else {
      int v7 = 2;
    }
    uint64_t v4 = (v7 + v4);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_17:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_101498CC4(_DWORD *a1, void *lpsrc)
{
  sub_101498860(a1, (uint64_t)lpsrc);
}

uint64_t sub_101498D4C()
{
  return 1;
}

void *sub_101498D54@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SvId");
}

float sub_101498D64(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 20))
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      float result = *(float *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(float *)(a1 + 12) = result;
    }
  }
  return result;
}

void sub_101498E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101498E28(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102328588;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_101498E48(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102328588;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_101498E9C()
{
}

uint64_t sub_101498EE8(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_101498EFC(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = a1 + 2;
  do
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_16;
        }
        BOOL v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          uint64_t v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          *int v5 = *v10;
          uint64_t v11 = v10 + 1;
          *((void *)this + 1) = v11;
        }
        a1[5] |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 21)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 5) {
        goto LABEL_16;
      }
LABEL_24:
      unsigned int v13 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0) {
        return 0;
      }
      a1[3] = v13;
      a1[5] |= 2u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_101499088(uint64_t result, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    float v7 = *(float *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  }
  return result;
}

uint64_t sub_1014990F4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 20);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 20))
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        unsigned int v4 = 2;
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 5;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

float sub_101499160(uint64_t a1, void *lpsrc)
{
  return sub_101498D64(a1, (uint64_t)lpsrc);
}

uint64_t sub_1014991E8()
{
  return 1;
}

void *sub_1014991F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.GpsTime");
}

float sub_101499200(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248D730 + 8);
      }
      float result = sub_101498D64(v6, v7);
      int v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_16;
      }
    }
    else if ((*(unsigned char *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(float *)(a1 + 16) = result;
    int v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_8;
    }
LABEL_16:
    float result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0) {
      return result;
    }
LABEL_8:
    float result = *(float *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 24) = result;
  }
  return result;
}

void sub_101499348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101499360(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102328600;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248D730 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1014993F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_101499360(a1);

  operator delete();
}

void sub_101499428()
{
}

uint64_t sub_101499478(uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1014994AC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        *(_DWORD *)(a1 + 32) |= 1u;
        int v8 = *(unsigned int **)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v21 = 0;
        unint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21))return 0; {
        }
          }
        else
        {
          unsigned int v21 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v21);
        if (!sub_101498EFC(v8, this, v13) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        uint64_t v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 21) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
        goto LABEL_31;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_19;
        }
LABEL_31:
        unsigned int v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 16) = v21;
        *(_DWORD *)(a1 + 32) |= 2u;
        unint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 29) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_35:
        unsigned int v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 20) = v21;
        *(_DWORD *)(a1 + 32) |= 4u;
        char v19 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 != 37) {
          continue;
        }
        *((void *)this + 1) = v19 + 1;
LABEL_39:
        unsigned int v21 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v21))
        {
          *(_DWORD *)(a1 + 24) = v21;
          *(_DWORD *)(a1 + 32) |= 8u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_35;
        }
        goto LABEL_19;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_19;
        }
        goto LABEL_39;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1014997B8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D730 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(float *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_11:
  float v8 = *(float *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, v8, a3);
}

uint64_t sub_101499870(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248D730 + 8);
      }
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014990F4(v6, a2);
      int v9 = (int)v7;
      if (v7 >= 0x80) {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
      }
      else {
        int v10 = 1;
      }
      unsigned int v4 = v9 + v10 + 1;
      int v3 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 5;
    }
    if ((v3 & 4) != 0) {
      v4 += 5;
    }
    if ((v3 & 8) != 0) {
      uint64_t result = v4 + 5;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

float sub_101499914(uint64_t a1, void *lpsrc)
{
  return sub_101499200(a1, (uint64_t)lpsrc);
}

uint64_t sub_10149999C()
{
  return 1;
}

void *sub_1014999A4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SatellitePolynomialClock");
}

float sub_1014999B4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 20))
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 >= 7) {
        sub_101AB7410();
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      float result = *(float *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(float *)(a1 + 12) = result;
    }
  }
  return result;
}

void sub_101499A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_101499A84(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102328678;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_101499AA4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102328678;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_101499AF8()
{
}

uint64_t sub_101499B44(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_101499B58(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_15;
        }
        unsigned int v12 = 0;
        unsigned int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
          if (!result) {
            return result;
          }
          unsigned int v9 = v12;
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 <= 6)
        {
          a1[5] |= 1u;
          a1[2] = v9;
        }
        int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 21)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 5) {
        goto LABEL_15;
      }
LABEL_25:
      unsigned int v13 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0) {
        return 0;
      }
      a1[3] = v13;
      a1[5] |= 2u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_101499CE8(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    float v7 = *(float *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  }
  return result;
}

uint64_t sub_101499D54(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 20);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 20))
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        unsigned int v4 = 2;
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 5;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

float sub_101499DCC(uint64_t a1, void *lpsrc)
{
  return sub_1014999B4(a1, (uint64_t)lpsrc);
}

uint64_t sub_101499E54()
{
  return 1;
}

void *sub_101499E5C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SatelliteGroupDelay");
}

float sub_101499E6C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 44);
      uint64_t v8 = *(int *)(a1 + 40);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), v7 + 1);
          int v7 = *(_DWORD *)(a1 + 44);
        }
        *(_DWORD *)(a1 + 44) = v7 + 1;
        operator new();
      }
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = v8 + 1;
      float result = sub_1014999B4(*(void *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 40));
  }
  LOBYTE(v10) = *(unsigned char *)(a2 + 72);
  if (!(_BYTE)v10) {
    return result;
  }
  if (*(unsigned char *)(a2 + 72))
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    int v11 = *(_DWORD **)(a1 + 8);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = *(void *)(a2 + 8);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248D740 + 8);
    }
    sub_101498860(v11, v12);
    int v10 = *(_DWORD *)(a2 + 72);
    if ((v10 & 2) == 0)
    {
LABEL_14:
      if ((v10 & 4) == 0) {
        goto LABEL_15;
      }
LABEL_29:
      *(_DWORD *)(a1 + 72) |= 4u;
      uint64_t v15 = *(void *)(a1 + 24);
      if (!v15) {
        operator new();
      }
      uint64_t v16 = *(void *)(a2 + 24);
      if (!v16) {
        uint64_t v16 = *(void *)(qword_10248D740 + 24);
      }
      float result = sub_101499200(v15, v16);
      int v10 = *(_DWORD *)(a2 + 72);
      if ((v10 & 0x10) == 0)
      {
LABEL_16:
        if ((v10 & 0x20) == 0) {
          return result;
        }
        goto LABEL_17;
      }
      goto LABEL_34;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) == 0)
  {
    goto LABEL_14;
  }
  *(_DWORD *)(a1 + 72) |= 2u;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    operator new();
  }
  uint64_t v14 = *(void *)(a2 + 16);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_10248D740 + 16);
  }
  float result = sub_101499200(v13, v14);
  int v10 = *(_DWORD *)(a2 + 72);
  if ((v10 & 4) != 0) {
    goto LABEL_29;
  }
LABEL_15:
  if ((v10 & 0x10) == 0) {
    goto LABEL_16;
  }
LABEL_34:
  *(_DWORD *)(a1 + 72) |= 0x10u;
  uint64_t v17 = *(void *)(a1 + 56);
  if (!v17) {
    operator new();
  }
  uint64_t v18 = *(void *)(a2 + 56);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_10248D740 + 56);
  }
  float result = sub_101498D64(v17, v18);
  if ((*(_DWORD *)(a2 + 72) & 0x20) != 0)
  {
LABEL_17:
    float result = *(float *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(float *)(a1 + 64) = result;
  }
  return result;
}

void sub_10149A1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10149A1DC(uint64_t *a1)
{
  *a1 = (uint64_t)off_1023286F0;
  uint64_t v2 = a1 + 4;
  sub_10149A240(a1);
  sub_10016B2E8(v2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void *sub_10149A240(void *result)
{
  if ((void *)qword_10248D740 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    float result = (void *)v1[7];
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  return result;
}

void sub_10149A33C(uint64_t *a1)
{
  sub_10149A1DC(a1);

  operator delete();
}

void sub_10149A374()
{
}

uint64_t sub_10149A3D4(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 72);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(a1 + 72);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        sub_101499478(v4);
        int v2 = *(_DWORD *)(a1 + 72);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        sub_101499478(v5);
        int v2 = *(_DWORD *)(a1 + 72);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 56);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 20)) {
          *(void *)(v6 + 8) = 0;
        }
        *(_DWORD *)(v6 + 20) = 0;
      }
    }
    *(_DWORD *)(a1 + 64) = 0;
  }
  uint64_t result = sub_10026DEDC(a1 + 32);
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_10149A470(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 < *((void *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_24;
        }
        *(_DWORD *)(a1 + 72) |= 1u;
        uint64_t v9 = *(_DWORD **)(a1 + 8);
        if (!v9) {
          operator new();
        }
        unsigned int v59 = 0;
        int v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0; {
        }
          }
        else
        {
          unsigned int v59 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v11 = *((_DWORD *)this + 14);
        int v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12) {
          return 0;
        }
        int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_101498A04(v9, this, v14) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        int v15 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)this + 14) = v17;
        }
        uint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 18) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
        goto LABEL_36;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_24;
        }
LABEL_36:
        *(_DWORD *)(a1 + 72) |= 2u;
        uint64_t v19 = *(void *)(a1 + 16);
        if (!v19) {
          operator new();
        }
        unsigned int v59 = 0;
        __int16 v20 = (char *)*((void *)this + 1);
        if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0; {
        }
          }
        else
        {
          unsigned int v59 = *v20;
          *((void *)this + 1) = v20 + 1;
        }
        int v21 = *((_DWORD *)this + 14);
        int v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0;
        }
        int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1014994AC(v19, this, v24) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        int v25 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v25, 1);
        int v26 = v25 - 1;
        if (v26 < 0 == v16) {
          *((_DWORD *)this + 14) = v26;
        }
        unint64_t v27 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 != 26) {
          continue;
        }
        *((void *)this + 1) = v27 + 1;
LABEL_50:
        *(_DWORD *)(a1 + 72) |= 4u;
        uint64_t v28 = *(void *)(a1 + 24);
        if (!v28) {
          operator new();
        }
        unsigned int v59 = 0;
        char v29 = (char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0; {
        }
          }
        else
        {
          unsigned int v59 = *v29;
          *((void *)this + 1) = v29 + 1;
        }
        int v30 = *((_DWORD *)this + 14);
        int v31 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v30 + 1;
        if (v30 >= v31) {
          return 0;
        }
        int v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1014994AC(v28, this, v33) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
        int v34 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v34, 1);
        int v35 = v34 - 1;
        if (v35 < 0 == v16) {
          *((_DWORD *)this + 14) = v35;
        }
        uint64_t v36 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v36 >= *((void *)this + 2) || *v36 != 34) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v36 + 1;
LABEL_64:
          int v37 = *(_DWORD *)(a1 + 44);
          uint64_t v38 = *(int *)(a1 + 40);
          if ((int)v38 >= v37)
          {
            if (v37 == *(_DWORD *)(a1 + 48))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v37 + 1);
              int v37 = *(_DWORD *)(a1 + 44);
            }
            *(_DWORD *)(a1 + 44) = v37 + 1;
            operator new();
          }
          uint64_t v39 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = v38 + 1;
          unsigned __int8 v40 = *(_DWORD **)(v39 + 8 * v38);
          unsigned int v59 = 0;
          long long v41 = (char *)*((void *)this + 1);
          if ((unint64_t)v41 >= *((void *)this + 2) || *v41 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0; {
          }
            }
          else
          {
            unsigned int v59 = *v41;
            *((void *)this + 1) = v41 + 1;
          }
          int v42 = *((_DWORD *)this + 14);
          int v43 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v42 + 1;
          if (v42 >= v43) {
            return 0;
          }
          int v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
          if (!sub_101499B58(v40, this, v45) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v44);
          int v46 = *((_DWORD *)this + 14);
          BOOL v16 = __OFSUB__(v46, 1);
          int v47 = v46 - 1;
          if (v47 < 0 == v16) {
            *((_DWORD *)this + 14) = v47;
          }
          uint64_t v36 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v36 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v48 = *v36;
        }
        while (v48 == 34);
        if (v48 != 42) {
          continue;
        }
        *((void *)this + 1) = v36 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 72) |= 0x10u;
        unsigned __int8 v49 = *(unsigned int **)(a1 + 56);
        if (!v49) {
          operator new();
        }
        unsigned int v59 = 0;
        char v50 = (char *)*((void *)this + 1);
        if ((unint64_t)v50 >= *((void *)this + 2) || *v50 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0; {
        }
          }
        else
        {
          unsigned int v59 = *v50;
          *((void *)this + 1) = v50 + 1;
        }
        int v51 = *((_DWORD *)this + 14);
        int v52 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v51 + 1;
        if (v51 >= v52) {
          return 0;
        }
        int v53 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_101498EFC(v49, this, v54) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v53);
        int v55 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v55, 1);
        int v56 = v55 - 1;
        if (v56 < 0 == v16) {
          *((_DWORD *)this + 14) = v56;
        }
        char v57 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v57 >= *((void *)this + 2) || *v57 != 53) {
          continue;
        }
        *((void *)this + 1) = v57 + 1;
LABEL_96:
        unsigned int v59 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v59) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 64) = v59;
        *(_DWORD *)(a1 + 72) |= 0x20u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_50;
        }
        goto LABEL_24;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_64;
        }
        goto LABEL_24;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_82;
        }
        goto LABEL_24;
      case 6u:
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_24;
        }
        goto LABEL_96;
      default:
        int v8 = TagFallback & 7;
LABEL_24:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10149AB94(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D740 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248D740 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 4) != 0)
  {
LABEL_11:
    uint64_t v9 = *(void *)(v5 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248D740 + 24);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  }
LABEL_14:
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v10 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 32) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 40));
  }
  int v11 = *(_DWORD *)(v5 + 72);
  if ((v11 & 0x10) == 0)
  {
    if ((v11 & 0x20) == 0) {
      return result;
    }
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)(v5 + 56);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248D740 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v12, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x20) != 0)
  {
LABEL_23:
    float v13 = *(float *)(v5 + 64);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, v13, a3);
  }
  return result;
}

uint64_t sub_10149ACD8(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 72);
  if (*(unsigned char *)(a1 + 72))
  {
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_10248D740 + 8);
      }
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101498C24(v5, a2);
      int v7 = (int)v6;
      if (v6 >= 0x80) {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      }
      else {
        int v8 = 1;
      }
      int v4 = v7 + v8 + 1;
      int v3 = *(_DWORD *)(a1 + 72);
      if ((v3 & 2) == 0)
      {
LABEL_17:
        if ((v3 & 4) != 0)
        {
          uint64_t v13 = *(void *)(a1 + 24);
          if (!v13) {
            uint64_t v13 = *(void *)(qword_10248D740 + 24);
          }
          unsigned int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101499870(v13, a2);
          int v15 = (int)v14;
          if (v14 >= 0x80) {
            int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
          }
          else {
            int v16 = 1;
          }
          v4 += v15 + v16 + 1;
          int v3 = *(_DWORD *)(a1 + 72);
          if ((v3 & 0x10) == 0) {
            goto LABEL_32;
          }
        }
        else if ((v3 & 0x10) == 0)
        {
LABEL_32:
          if ((v3 & 0x20) != 0) {
            int v3 = v4 + 5;
          }
          else {
            int v3 = v4;
          }
          goto LABEL_35;
        }
        uint64_t v17 = *(void *)(a1 + 56);
        if (!v17) {
          uint64_t v17 = *(void *)(qword_10248D740 + 56);
        }
        uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014990F4(v17, a2);
        int v19 = (int)v18;
        if (v18 >= 0x80) {
          int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
        }
        else {
          int v20 = 1;
        }
        v4 += v19 + v20 + 1;
        int v3 = *(_DWORD *)(a1 + 72);
        goto LABEL_32;
      }
    }
    else
    {
      int v4 = 0;
      if ((v3 & 2) == 0) {
        goto LABEL_17;
      }
    }
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248D740 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101499870(v9, a2);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    v4 += v11 + v12 + 1;
    int v3 = *(_DWORD *)(a1 + 72);
    goto LABEL_17;
  }
LABEL_35:
  int v21 = *(_DWORD *)(a1 + 40);
  uint64_t v22 = (v21 + v3);
  if (v21 >= 1)
  {
    uint64_t v23 = 0;
    do
    {
      unsigned int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_101499D54(*(void *)(*(void *)(a1 + 32) + 8 * v23), a2);
      int v25 = (int)v24;
      if (v24 >= 0x80) {
        int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
      }
      else {
        int v26 = 1;
      }
      uint64_t v22 = (v25 + v22 + v26);
      ++v23;
    }
    while (v23 < *(int *)(a1 + 40));
  }
  *(_DWORD *)(a1 + 68) = v22;
  return v22;
}

float sub_10149AEA0(uint64_t a1, void *lpsrc)
{
  return sub_101499E6C(a1, (uint64_t)lpsrc);
}

uint64_t sub_10149AF28()
{
  return 1;
}

void *sub_10149AF30@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SatelliteClockData");
}

float sub_10149AF40(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248D748 + 8);
      }
      float result = sub_101498D64(v6, v7);
      int v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 5) {
        sub_101AB743C();
      }
      *(_DWORD *)(a1 + 32) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
      int v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      float result = *(float *)(a2 + 20);
      *(_DWORD *)(a1 + 32) |= 4u;
      *(float *)(a1 + 20) = result;
      int v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 8) != 0)
    {
      float result = *(float *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 8u;
      *(float *)(a1 + 24) = result;
    }
  }
  return result;
}

void sub_10149B084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10149B09C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102328768;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248D748 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10149B12C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10149B09C(a1);

  operator delete();
}

void sub_10149B164()
{
}

uint64_t sub_10149B1B4(uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10149B1E8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        *(_DWORD *)(a1 + 32) |= 1u;
        unsigned int v8 = *(unsigned int **)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v24 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24))return 0; {
        }
          }
        else
        {
          unsigned int v24 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
        if (!sub_101498EFC(v8, this, v15) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        int v19 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v19 >= v10 || *v19 != 16) {
          continue;
        }
        int v11 = v19 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_31;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_31:
        unsigned int v24 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!result) {
            return result;
          }
          unsigned int v20 = v24;
        }
        else
        {
          unsigned int v20 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v20 <= 4)
        {
          *(_DWORD *)(a1 + 32) |= 2u;
          *(_DWORD *)(a1 + 16) = v20;
        }
        uint64_t v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 != 29) {
          continue;
        }
        *((void *)this + 1) = v22 + 1;
LABEL_41:
        unsigned int v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v24) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 20) = v24;
        *(_DWORD *)(a1 + 32) |= 4u;
        uint64_t v23 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 != 37) {
          continue;
        }
        *((void *)this + 1) = v23 + 1;
LABEL_45:
        unsigned int v24 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v24))
        {
          *(_DWORD *)(a1 + 24) = v24;
          *(_DWORD *)(a1 + 32) |= 8u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_41;
        }
        goto LABEL_19;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_19;
        }
        goto LABEL_45;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10149B51C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D748 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_11:
  float v8 = *(float *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, v8, a3);
}

uint64_t sub_10149B5D4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248D748 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014990F4(v6, a2);
    int v8 = (int)v7;
    if (v7 >= 0x80) {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    }
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_18;
    }
  }
  unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v10 & 0x80000000) != 0)
  {
    int v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    int v11 = 2;
  }
  v4 += v11;
LABEL_18:
  unsigned int v12 = v4 + 5;
  if ((v3 & 4) == 0) {
    unsigned int v12 = v4;
  }
  if ((v3 & 8) != 0) {
    uint64_t result = v12 + 5;
  }
  else {
    uint64_t result = v12;
  }
LABEL_23:
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

float sub_10149B6A4(uint64_t a1, void *lpsrc)
{
  return sub_10149AF40(a1, (uint64_t)lpsrc);
}

uint64_t sub_10149B72C()
{
  return 1;
}

void *sub_10149B734@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.GnssToGpsTimeOffset");
}

float sub_10149B744(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 48);
  if (!(_BYTE)v5) {
    return result;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    *(_DWORD *)(a1 + 48) |= 1u;
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      operator new();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D750 + 8);
    }
    float result = sub_101498D64(v6, v7);
    int v5 = *(_DWORD *)(a2 + 48);
  }
  if ((v5 & 2) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    if ((v8 + 1) >= 7) {
      sub_101AB7494();
    }
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 16) = v8;
    int v5 = *(_DWORD *)(a2 + 48);
  }
  if ((v5 & 4) != 0)
  {
    float result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(float *)(a1 + 20) = result;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_15:
      if ((v5 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_15;
  }
  float result = *(float *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 8u;
  *(float *)(a1 + 24) = result;
  int v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_25:
    int v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v10;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x40) == 0)
    {
LABEL_18:
      if ((v5 & 0x80) == 0) {
        return result;
      }
      goto LABEL_19;
    }
    goto LABEL_26;
  }
LABEL_23:
  int v9 = *(_DWORD *)(a2 + 28);
  if ((v9 + 1) >= 7) {
    sub_101AB7468();
  }
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v9;
  int v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_17:
  if ((v5 & 0x40) == 0) {
    goto LABEL_18;
  }
LABEL_26:
  float result = *(float *)(a2 + 36);
  *(_DWORD *)(a1 + 48) |= 0x40u;
  *(float *)(a1 + 36) = result;
  if ((*(_DWORD *)(a2 + 48) & 0x80) != 0)
  {
LABEL_19:
    float result = *(float *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x80u;
    *(float *)(a1 + 40) = result;
  }
  return result;
}

void sub_10149B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10149B93C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023287E0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248D750 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10149B9CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10149B93C(a1);

  operator delete();
}

void sub_10149BA04()
{
}

uint64_t sub_10149BA6C(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    if (*(unsigned char *)(result + 48))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(result + 16) = -1;
    *(void *)(result + 20) = 0;
    *(void *)(result + 28) = 0xFFFFFFFFLL;
    *(void *)(result + 36) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10149BAB4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        int v9 = *(unsigned int **)(a1 + 8);
        if (!v9) {
          operator new();
        }
        unsigned int v34 = 0;
        int v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34))return 0; {
        }
          }
        else
        {
          unsigned int v34 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v17 = *((_DWORD *)this + 14);
        int v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 >= v18) {
          return 0;
        }
        int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
        if (!sub_101498EFC(v9, this, v20) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
        int v21 = *((_DWORD *)this + 14);
        BOOL v22 = __OFSUB__(v21, 1);
        int v23 = v21 - 1;
        if (v23 < 0 == v22) {
          *((_DWORD *)this + 14) = v23;
        }
        unsigned int v24 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v24 >= v11 || *v24 != 16) {
          continue;
        }
        unsigned int v12 = v24 + 1;
        *((void *)this + 1) = v12;
        goto LABEL_40;
      case 2u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        unsigned int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_40:
        unsigned int v34 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!result) {
            return result;
          }
          unsigned int v25 = v34;
        }
        else
        {
          unsigned int v25 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (v25 + 1 <= 6)
        {
          *(_DWORD *)(a1 + 48) |= 2u;
          *(_DWORD *)(a1 + 16) = v25;
        }
        unint64_t v27 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 != 29) {
          continue;
        }
        *((void *)this + 1) = v27 + 1;
LABEL_50:
        unsigned int v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 20) = v34;
        *(_DWORD *)(a1 + 48) |= 4u;
        uint64_t v28 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v28 >= *((void *)this + 2) || *v28 != 37) {
          continue;
        }
        *((void *)this + 1) = v28 + 1;
LABEL_54:
        unsigned int v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 24) = v34;
        *(_DWORD *)(a1 + 48) |= 8u;
        char v29 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v29 >= v13 || *v29 != 40) {
          continue;
        }
        int v14 = v29 + 1;
        *((void *)this + 1) = v14;
LABEL_58:
        unsigned int v34 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!result) {
            return result;
          }
          unsigned int v30 = v34;
        }
        else
        {
          unsigned int v30 = *v14;
          *((void *)this + 1) = v14 + 1;
        }
        if (v30 + 1 <= 6)
        {
          *(_DWORD *)(a1 + 48) |= 0x10u;
          *(_DWORD *)(a1 + 28) = v30;
        }
        int v31 = (unsigned char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v31 >= v15 || *v31 != 48) {
          continue;
        }
        int v16 = v31 + 1;
        *((void *)this + 1) = v16;
LABEL_68:
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          int v32 = (unsigned char *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }
        else
        {
          *int v5 = *v16;
          int v32 = v16 + 1;
          *((void *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 48) |= 0x20u;
        if ((unint64_t)v32 >= v15 || *v32 != 61) {
          continue;
        }
        *((void *)this + 1) = v32 + 1;
LABEL_76:
        unsigned int v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 36) = v34;
        *(_DWORD *)(a1 + 48) |= 0x40u;
        unsigned int v33 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v33 >= *((void *)this + 2) || *v33 != 69) {
          continue;
        }
        *((void *)this + 1) = v33 + 1;
LABEL_80:
        unsigned int v34 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v34))
        {
          *(_DWORD *)(a1 + 40) = v34;
          *(_DWORD *)(a1 + 48) |= 0x80u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_50;
        }
        goto LABEL_28;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_54;
        }
        goto LABEL_28;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_58;
      case 6u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_68;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_76;
        }
        goto LABEL_28;
      case 8u:
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_28;
        }
        goto LABEL_80;
      default:
        int v8 = TagFallback & 7;
LABEL_28:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10149BFAC(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D750 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(float *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 28), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(float *)(v5 + 36), a3);
    if ((*(_DWORD *)(v5 + 48) & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 32), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return result;
  }
LABEL_19:
  float v8 = *(float *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, v8, a3);
}

uint64_t sub_10149C0D4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_40;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248D750 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014990F4(v6, a2);
    int v8 = (int)v7;
    if (v7 >= 0x80) {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    }
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  int v4 = 0;
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
LABEL_12:
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v10 & 0x80000000) != 0)
    {
      int v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v11 = 2;
    }
    v4 += v11;
  }
LABEL_18:
  int v12 = v4 + 5;
  if ((v3 & 4) == 0) {
    int v12 = v4;
  }
  if ((v3 & 8) != 0) {
    int v13 = v12 + 5;
  }
  else {
    int v13 = v12;
  }
  if ((v3 & 0x10) != 0)
  {
    int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 11;
    }
    else if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v15 = 2;
    }
    v13 += v15;
  }
  if ((v3 & 0x20) != 0)
  {
    int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v17 = 2;
    }
    v13 += v17;
  }
  unsigned int v18 = v13 + 5;
  if ((v3 & 0x40) == 0) {
    unsigned int v18 = v13;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t result = v18 + 5;
  }
  else {
    uint64_t result = v18;
  }
LABEL_40:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

float sub_10149C218(uint64_t a1, void *lpsrc)
{
  return sub_10149B744(a1, (uint64_t)lpsrc);
}

uint64_t sub_10149C2A0()
{
  return 1;
}

void *sub_10149C2A8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.SpaceWeatherStatus");
}

void sub_10149C2B8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    sub_100221DFC(a1 + 24, *(_DWORD *)(a1 + 32) + v4);
    memcpy((void *)(*(void *)(a1 + 24) + 4 * *(int *)(a1 + 32)), *(const void **)(a2 + 24), 4 * *(int *)(a2 + 32));
    *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 32);
  }
  int v5 = *(_DWORD *)(a2 + 48);
  if (v5)
  {
    sub_100221DFC(a1 + 40, *(_DWORD *)(a1 + 48) + v5);
    memcpy((void *)(*(void *)(a1 + 40) + 4 * *(int *)(a1 + 48)), *(const void **)(a2 + 40), 4 * *(int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  }
  LOBYTE(v6) = *(unsigned char *)(a2 + 64);
  if (!(_BYTE)v6) {
    return;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    if (v7 >= 3) {
      sub_101AB74C0();
    }
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_DWORD *)(a1 + 8) = v7;
    int v6 = *(_DWORD *)(a2 + 64);
  }
  if ((v6 & 2) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_13;
    }
LABEL_18:
    int v10 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 4u;
    *(_DWORD *)(a1 + 16) = v10;
    int v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 8) == 0)
    {
LABEL_14:
      if ((v6 & 0x40) == 0) {
        return;
      }
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  int v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 12) = v9;
  int v6 = *(_DWORD *)(a2 + 64);
  if ((v6 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_13:
  if ((v6 & 8) == 0) {
    goto LABEL_14;
  }
LABEL_19:
  int v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 20) = v11;
  if ((*(_DWORD *)(a2 + 64) & 0x40) != 0)
  {
LABEL_15:
    int v8 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) |= 0x40u;
    *(_DWORD *)(a1 + 56) = v8;
  }
}

void sub_10149C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10149C474(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102328858;
  if (*((void *)this + 5)) {
    operator delete[]();
  }
  if (*((void *)this + 3)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10149C500(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10149C474(a1);

  operator delete();
}

void sub_10149C538()
{
}

uint64_t sub_10149C594(uint64_t result)
{
  if (*(unsigned char *)(result + 64))
  {
    *(_DWORD *)(result + 56) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_10149C5B4(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 40;
  uint64_t v6 = a1 + 24;
  int v44 = (unsigned int *)(a1 + 12);
  unsigned int v45 = (unsigned int *)(a1 + 16);
  unsigned int v7 = (unsigned int *)(a1 + 20);
LABEL_2:
  while (2)
  {
    int v8 = (char *)*((void *)this + 1);
    if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        v46[0] = 0;
        int v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v46);
          if (!result) {
            return result;
          }
          unsigned int v12 = v46[0];
        }
        else
        {
          unsigned int v12 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v12 <= 2)
        {
          *(_DWORD *)(a1 + 64) |= 1u;
          *(_DWORD *)(a1 + 8) = v12;
        }
        unsigned int v18 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v18 < v13 && *v18 == 16)
        {
          int v14 = v18 + 1;
          *((void *)this + 1) = v14;
          goto LABEL_40;
        }
        continue;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
LABEL_40:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!result) {
            return result;
          }
          int v19 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          *int v44 = *v14;
          int v19 = v14 + 1;
          *((void *)this + 1) = v19;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        if ((unint64_t)v19 >= v13 || *v19 != 24) {
          continue;
        }
        int v15 = v19 + 1;
        *((void *)this + 1) = v15;
LABEL_48:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!result) {
            return result;
          }
          unsigned int v20 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v45 = *v15;
          unsigned int v20 = v15 + 1;
          *((void *)this + 1) = v20;
        }
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v20 >= v13 || *v20 != 32) {
          continue;
        }
        int v16 = v20 + 1;
        *((void *)this + 1) = v16;
LABEL_56:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          int v21 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          *unsigned int v7 = *v16;
          int v21 = v16 + 1;
          *((void *)this + 1) = v21;
        }
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v21 < v13 && *v21 == 45) {
          goto LABEL_63;
        }
        continue;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v15 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_48;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_56;
      case 5u:
        int v10 = TagFallback & 7;
        if (v10 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v6);
          if (!result) {
            return result;
          }
          goto LABEL_80;
        }
        if (v10 != 5) {
          goto LABEL_26;
        }
        while (2)
        {
          v46[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v46) & 1) == 0) {
            return 0;
          }
          unsigned int v22 = v46[0];
          int v23 = *(_DWORD *)(a1 + 32);
          if (v23 == *(_DWORD *)(a1 + 36))
          {
            sub_100221DFC(v6, v23 + 1);
            int v23 = *(_DWORD *)(a1 + 32);
          }
          uint64_t v24 = *(void *)(a1 + 24);
          int v25 = v23 + 1;
          *(_DWORD *)(a1 + 32) = v23 + 1;
          *(_DWORD *)(v24 + 4 * v23) = v22;
          uint64_t v26 = *((void *)this + 1);
          int v27 = *((_DWORD *)this + 4) - v26;
          if (v27 >= 1)
          {
            signed int v28 = v27 / 5u;
            int v29 = v28 >= *(_DWORD *)(a1 + 36) - v25 ? *(_DWORD *)(a1 + 36) - v25 : v28;
            if (v29 >= 1)
            {
              int v30 = 0;
              while (*(unsigned char *)v26 == 45)
              {
                int v31 = *(_DWORD *)(v26 + 1);
                if (v25 >= *(_DWORD *)(a1 + 36))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v46);
                  int v25 = *(_DWORD *)(a1 + 32);
                  uint64_t v24 = *(void *)(a1 + 24);
                }
                *(_DWORD *)(a1 + 32) = v25 + 1;
                *(_DWORD *)(v24 + 4 * v25) = v31;
                ++v30;
                v26 += 5;
                ++v25;
                if (v29 == v30)
                {
                  int v30 = v29;
                  break;
                }
              }
              if (v30) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v30);
              }
            }
          }
LABEL_80:
          int v21 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v21 < *((void *)this + 2))
          {
            int v32 = *v21;
            if (v32 == 45)
            {
LABEL_63:
              *((void *)this + 1) = v21 + 1;
              continue;
            }
            if (v32 == 53) {
              goto LABEL_83;
            }
          }
          goto LABEL_2;
        }
      case 6u:
        int v10 = TagFallback & 7;
        if (v10 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v5);
          if (!result) {
            return result;
          }
          goto LABEL_100;
        }
        if (v10 != 5)
        {
LABEL_26:
          if (v10 == 4) {
            return 1;
          }
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
          continue;
          }
        }
        while (1)
        {
          v46[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v46) & 1) == 0) {
            return 0;
          }
          unsigned int v33 = v46[0];
          int v34 = *(_DWORD *)(a1 + 48);
          if (v34 == *(_DWORD *)(a1 + 52))
          {
            sub_100221DFC(v5, v34 + 1);
            int v34 = *(_DWORD *)(a1 + 48);
          }
          uint64_t v35 = *(void *)(a1 + 40);
          int v36 = v34 + 1;
          *(_DWORD *)(a1 + 48) = v34 + 1;
          *(_DWORD *)(v35 + 4 * v34) = v33;
          uint64_t v37 = *((void *)this + 1);
          int v38 = *((_DWORD *)this + 4) - v37;
          if (v38 >= 1)
          {
            signed int v39 = v38 / 5u;
            int v40 = v39 >= *(_DWORD *)(a1 + 52) - v36 ? *(_DWORD *)(a1 + 52) - v36 : v39;
            if (v40 >= 1)
            {
              int v41 = 0;
              while (*(unsigned char *)v37 == 53)
              {
                int v42 = *(_DWORD *)(v37 + 1);
                if (v36 >= *(_DWORD *)(a1 + 52))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v46);
                  int v36 = *(_DWORD *)(a1 + 48);
                  uint64_t v35 = *(void *)(a1 + 40);
                }
                *(_DWORD *)(a1 + 48) = v36 + 1;
                *(_DWORD *)(v35 + 4 * v36) = v42;
                ++v41;
                v37 += 5;
                ++v36;
                if (v40 == v41)
                {
                  int v41 = v40;
                  break;
                }
              }
              if (v41) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v41);
              }
            }
          }
LABEL_100:
          int v21 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v21 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v43 = *v21;
          if (v43 != 53) {
            break;
          }
LABEL_83:
          *((void *)this + 1) = v21 + 1;
        }
        if (v43 != 61) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_104:
        v46[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v46))
        {
          *(_DWORD *)(a1 + 56) = v46[0];
          *(_DWORD *)(a1 + 64) |= 0x40u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 7u:
        int v10 = TagFallback & 7;
        if (v10 != 5) {
          goto LABEL_26;
        }
        goto LABEL_104;
      default:
        int v10 = TagFallback & 7;
        goto LABEL_26;
    }
  }
}

void sub_10149CBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10149CC0C(uint64_t result, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 64);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 16), a2, a4);
  if ((*(_DWORD *)(v5 + 64) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 20), a2, a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(float *)(*(void *)(v5 + 24) + 4 * v7++), a3);
    while (v7 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 48) >= 1)
  {
    uint64_t v8 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(float *)(*(void *)(v5 + 40) + 4 * v8++), a3);
    while (v8 < *(int *)(v5 + 48));
  }
  if ((*(unsigned char *)(v5 + 64) & 0x40) != 0)
  {
    float v9 = *(float *)(v5 + 56);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, v9, a3);
  }
  return result;
}

uint64_t sub_10149CD44(_DWORD *a1, unsigned int a2)
{
  int v3 = *((unsigned __int8 *)a1 + 64);
  if (*((unsigned char *)a1 + 64))
  {
    if (v3)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[2];
      if ((v5 & 0x80000000) != 0)
      {
        int v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_16;
        }
      }
      else if (v5 >= 0x80)
      {
        int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        int v3 = a1[16];
        if ((v3 & 2) == 0) {
          goto LABEL_16;
        }
      }
      else
      {
        int v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      int v4 = 0;
      if ((v3 & 2) == 0) {
        goto LABEL_16;
      }
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[3];
    if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = a1[16];
    }
    else
    {
      int v7 = 2;
    }
    v4 += v7;
LABEL_16:
    if ((v3 & 4) != 0)
    {
      uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
      if (v8 >= 0x80)
      {
        int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
        int v3 = a1[16];
      }
      else
      {
        int v9 = 2;
      }
      v4 += v9;
      if ((v3 & 8) == 0) {
        goto LABEL_27;
      }
    }
    else if ((v3 & 8) == 0)
    {
LABEL_27:
      if ((v3 & 0x40) != 0) {
        int v3 = v4 + 5;
      }
      else {
        int v3 = v4;
      }
      goto LABEL_30;
    }
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      int v3 = a1[16];
    }
    else
    {
      int v11 = 2;
    }
    v4 += v11;
    goto LABEL_27;
  }
LABEL_30:
  uint64_t result = (5 * (a1[12] + a1[8]) + v3);
  a1[15] = result;
  return result;
}

void sub_10149CE54(uint64_t a1, void *lpsrc)
{
  sub_10149C2B8(a1, (uint64_t)lpsrc);
}

uint64_t sub_10149CEDC()
{
  return 1;
}

void *sub_10149CEE4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.IonosphereVTECModel");
}

float sub_10149CEF4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 16) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 28);
      uint64_t v8 = *(int *)(a1 + 24);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v7 + 1);
          int v7 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v7 + 1;
        operator new();
      }
      uint64_t v9 = *(void *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v8 + 1;
      sub_10149C2B8(*(void *)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 24));
  }
  LOBYTE(v10) = *(unsigned char *)(a2 + 52);
  if ((_BYTE)v10)
  {
    if (*(unsigned char *)(a2 + 52))
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      uint64_t v11 = *(void *)(a1 + 8);
      if (!v11) {
        operator new();
      }
      uint64_t v12 = *(void *)(a2 + 8);
      if (!v12) {
        uint64_t v12 = *(void *)(qword_10248D760 + 8);
      }
      float result = sub_101498D64(v11, v12);
      int v10 = *(_DWORD *)(a2 + 52);
    }
    if ((v10 & 4) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 4u;
      uint64_t v13 = *(void *)(a1 + 40);
      if (!v13) {
        operator new();
      }
      uint64_t v14 = *(void *)(a2 + 40);
      if (!v14) {
        uint64_t v14 = *(void *)(qword_10248D760 + 40);
      }
      return sub_10149B744(v13, v14);
    }
  }
  return result;
}

void sub_10149D160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10149D178(uint64_t *a1)
{
  *a1 = (uint64_t)off_1023288D0;
  uint64_t v2 = a1 + 2;
  sub_10149D1DC(a1);
  sub_10016B2E8(v2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void *sub_10149D1DC(void *result)
{
  if ((void *)qword_10248D760 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    float result = (void *)v1[5];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_10149D280(uint64_t *a1)
{
  sub_10149D178(a1);

  operator delete();
}

void sub_10149D2B8()
{
}

uint64_t sub_10149D30C(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 52);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 52))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(a1 + 52);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      if (v4) {
        sub_10149BA6C(v4);
      }
    }
  }
  uint64_t result = sub_10026DEDC(a1 + 16);
  *(_DWORD *)(a1 + 52) = 0;
  return result;
}

uint64_t sub_10149D370(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  while (1)
  {
    while (1)
    {
LABEL_2:
      uint64_t v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      unsigned int v8 = TagFallback >> 3;
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_21;
      }
      *(_DWORD *)(a1 + 52) |= 1u;
      int v10 = *(unsigned int **)(a1 + 8);
      if (!v10) {
        operator new();
      }
      unsigned int v41 = 0;
      uint64_t v11 = (char *)*((void *)this + 1);
      if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v41))return 0; {
      }
        }
      else
      {
        unsigned int v41 = *v11;
        *((void *)this + 1) = v11 + 1;
      }
      int v12 = *((_DWORD *)this + 14);
      int v13 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v12 + 1;
      if (v12 >= v13) {
        return 0;
      }
      int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41);
      if (!sub_101498EFC(v10, this, v15) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
      int v16 = *((_DWORD *)this + 14);
      BOOL v17 = __OFSUB__(v16, 1);
      int v18 = v16 - 1;
      if (v18 < 0 == v17) {
        *((_DWORD *)this + 14) = v18;
      }
      int v19 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v19 < *((void *)this + 2) && *v19 == 18)
      {
        while (1)
        {
          *((void *)this + 1) = v19 + 1;
LABEL_33:
          int v20 = *(_DWORD *)(a1 + 28);
          uint64_t v21 = *(int *)(a1 + 24);
          if ((int)v21 >= v20)
          {
            if (v20 == *(_DWORD *)(a1 + 32))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v20 + 1);
              int v20 = *(_DWORD *)(a1 + 28);
            }
            *(_DWORD *)(a1 + 28) = v20 + 1;
            operator new();
          }
          uint64_t v22 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v21 + 1;
          uint64_t v23 = *(void *)(v22 + 8 * v21);
          unsigned int v42 = 0;
          uint64_t v24 = (char *)*((void *)this + 1);
          if ((unint64_t)v24 >= *((void *)this + 2) || *v24 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v42))return 0; {
          }
            }
          else
          {
            unsigned int v42 = *v24;
            *((void *)this + 1) = v24 + 1;
          }
          int v25 = *((_DWORD *)this + 14);
          int v26 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v25 + 1;
          if (v25 >= v26) {
            return 0;
          }
          int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
          if (!sub_10149C5B4(v23, this, v28) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
          int v29 = *((_DWORD *)this + 14);
          BOOL v17 = __OFSUB__(v29, 1);
          int v30 = v29 - 1;
          if (v30 < 0 == v17) {
            *((_DWORD *)this + 14) = v30;
          }
          int v19 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v19 >= *((void *)this + 2)) {
            break;
          }
          int v31 = *v19;
          if (v31 != 18)
          {
            if (v31 == 26)
            {
              *((void *)this + 1) = v19 + 1;
LABEL_51:
              *(_DWORD *)(a1 + 52) |= 4u;
              uint64_t v32 = *(void *)(a1 + 40);
              if (!v32) {
                operator new();
              }
              unsigned int v43 = 0;
              unsigned int v33 = (char *)*((void *)this + 1);
              if ((unint64_t)v33 >= *((void *)this + 2) || *v33 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0; {
              }
                }
              else
              {
                unsigned int v43 = *v33;
                *((void *)this + 1) = v33 + 1;
              }
              int v34 = *((_DWORD *)this + 14);
              int v35 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v34 + 1;
              if (v34 >= v35) {
                return 0;
              }
              int v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
              if (!sub_10149BAB4(v32, this, v37) || !*((unsigned char *)this + 36)) {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
              int v38 = *((_DWORD *)this + 14);
              BOOL v17 = __OFSUB__(v38, 1);
              int v39 = v38 - 1;
              if (v39 < 0 == v17) {
                *((_DWORD *)this + 14) = v39;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
            }
            goto LABEL_2;
          }
        }
      }
    }
    if (v8 == 2)
    {
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_21;
      }
      goto LABEL_33;
    }
    if (v8 == 3)
    {
      int v9 = TagFallback & 7;
      if (v9 == 2) {
        goto LABEL_51;
      }
    }
    else
    {
      int v9 = TagFallback & 7;
    }
LABEL_21:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10149D80C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 52))
  {
    uint64_t v6 = *(void *)(result + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248D760 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  if ((*(unsigned char *)(v5 + 52) & 4) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 40);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248D760 + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  }
  return result;
}

uint64_t sub_10149D8D8(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 52))
  {
    int v3 = 0;
    goto LABEL_18;
  }
  if ((*(unsigned char *)(a1 + 52) & 1) == 0)
  {
    int v3 = 0;
    if ((*(unsigned char *)(a1 + 52) & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248D760 + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014990F4(v4, a2);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  }
  else {
    int v7 = 1;
  }
  int v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 52) & 4) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 40);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248D760 + 40);
    }
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10149C0D4(v8, a2);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    }
    else {
      int v11 = 1;
    }
    v3 += v10 + v11 + 1;
  }
LABEL_18:
  int v12 = *(_DWORD *)(a1 + 24);
  uint64_t v13 = (v12 + v3);
  if (v12 >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      unsigned int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10149CD44(*(_DWORD **)(*(void *)(a1 + 16)+ 8 * v14), a2);
      int v16 = (int)v15;
      if (v15 >= 0x80) {
        int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      }
      else {
        int v17 = 1;
      }
      uint64_t v13 = (v16 + v13 + v17);
      ++v14;
    }
    while (v14 < *(int *)(a1 + 24));
  }
  *(_DWORD *)(a1 + 48) = v13;
  return v13;
}

float sub_10149DA00(uint64_t a1, void *lpsrc)
{
  return sub_10149CEF4(a1, (uint64_t)lpsrc);
}

uint64_t sub_10149DA88()
{
  return 1;
}

void *sub_10149DA90@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.IonosphereCorrections");
}

float sub_10149DAA0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 24) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 36);
      uint64_t v7 = *(int *)(a1 + 32);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v7 + 1;
      sub_101499E6C(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 32));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), *(_DWORD *)(a2 + 56) + *(_DWORD *)(a1 + 56));
  if (*(int *)(a2 + 56) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a2 + 48) + 8 * v10);
      int v12 = *(_DWORD *)(a1 + 60);
      uint64_t v13 = *(int *)(a1 + 56);
      if ((int)v13 >= v12)
      {
        if (v12 == *(_DWORD *)(a1 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48), v12 + 1);
          int v12 = *(_DWORD *)(a1 + 60);
        }
        *(_DWORD *)(a1 + 60) = v12 + 1;
        operator new();
      }
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)(a1 + 56) = v13 + 1;
      float result = sub_10149AF40(*(void *)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *(int *)(a2 + 56));
  }
  LOBYTE(v15) = *(unsigned char *)(a2 + 76);
  if ((_BYTE)v15)
  {
    if (*(unsigned char *)(a2 + 76))
    {
      *(_DWORD *)(a1 + 76) |= 1u;
      uint64_t v16 = *(void *)(a1 + 8);
      if (!v16) {
        operator new();
      }
      uint64_t v17 = *(void *)(a2 + 8);
      if (!v17) {
        uint64_t v17 = *(void *)(qword_10248D768 + 8);
      }
      float result = sub_101498D64(v16, v17);
      int v15 = *(_DWORD *)(a2 + 76);
    }
    if ((v15 & 2) != 0)
    {
      *(_DWORD *)(a1 + 76) |= 2u;
      uint64_t v18 = *(void *)(a1 + 16);
      if (!v18) {
        operator new();
      }
      uint64_t v19 = *(void *)(a2 + 16);
      if (!v19) {
        uint64_t v19 = *(void *)(qword_10248D768 + 16);
      }
      return sub_10149CEF4(v18, v19);
    }
  }
  return result;
}

void sub_10149DDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10149DDF4(uint64_t *a1)
{
  *a1 = (uint64_t)off_102328948;
  int v2 = a1 + 6;
  sub_10149DE64(a1);
  sub_10016B2E8(v2);
  sub_10016B2E8(a1 + 3);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void *sub_10149DE64(void *result)
{
  if ((void *)qword_10248D768 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    float result = (void *)v1[2];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_10149DF08(uint64_t *a1)
{
  sub_10149DDF4(a1);

  operator delete();
}

uint64_t sub_10149DF40(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248D768;
  if (!qword_10248D768)
  {
    sub_101498350(0, a2, a3, a4);
    return qword_10248D768;
  }
  return result;
}

void sub_10149DF70()
{
}

uint64_t sub_10149DFD4(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 76);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 76))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(a1 + 76);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4) {
        sub_10149D30C(v4);
      }
    }
  }
  sub_10026DEDC(a1 + 24);
  uint64_t result = sub_10026DEDC(a1 + 48);
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t sub_10149E040(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  int v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48);
  while (1)
  {
LABEL_2:
    uint64_t v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 < *((void *)this + 2) && (*v7 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_20;
        }
        *(_DWORD *)(a1 + 76) |= 1u;
        uint64_t v10 = *(unsigned int **)(a1 + 8);
        if (!v10) {
          operator new();
        }
        unsigned int v54 = 0;
        uint64_t v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0; {
        }
          }
        else
        {
          unsigned int v54 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_101498EFC(v10, this, v15) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        uint64_t v19 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 != 18) {
          continue;
        }
        *((void *)this + 1) = v19 + 1;
        goto LABEL_32;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_20;
        }
LABEL_32:
        *(_DWORD *)(a1 + 76) |= 2u;
        uint64_t v20 = *(void *)(a1 + 16);
        if (!v20) {
          operator new();
        }
        unsigned int v54 = 0;
        uint64_t v21 = (char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0; {
        }
          }
        else
        {
          unsigned int v54 = *v21;
          *((void *)this + 1) = v21 + 1;
        }
        int v22 = *((_DWORD *)this + 14);
        int v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23) {
          return 0;
        }
        int v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_10149D370(v20, this, v25) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        int v26 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v26, 1);
        int v27 = v26 - 1;
        if (v27 < 0 == v17) {
          *((_DWORD *)this + 14) = v27;
        }
        unsigned int v28 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v28 < *((void *)this + 2) && *v28 == 26)
        {
          do
          {
            *((void *)this + 1) = v28 + 1;
LABEL_46:
            int v29 = *(_DWORD *)(a1 + 36);
            uint64_t v30 = *(int *)(a1 + 32);
            if ((int)v30 >= v29)
            {
              if (v29 == *(_DWORD *)(a1 + 40))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v29 + 1);
                int v29 = *(_DWORD *)(a1 + 36);
              }
              *(_DWORD *)(a1 + 36) = v29 + 1;
              operator new();
            }
            uint64_t v31 = *(void *)(a1 + 24);
            *(_DWORD *)(a1 + 32) = v30 + 1;
            uint64_t v32 = *(void *)(v31 + 8 * v30);
            unsigned int v54 = 0;
            unsigned int v33 = (char *)*((void *)this + 1);
            if ((unint64_t)v33 >= *((void *)this + 2) || *v33 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0; {
            }
              }
            else
            {
              unsigned int v54 = *v33;
              *((void *)this + 1) = v33 + 1;
            }
            int v34 = *((_DWORD *)this + 14);
            int v35 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v34 + 1;
            if (v34 >= v35) {
              return 0;
            }
            int v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
            if (!sub_10149A470(v32, this, v37) || !*((unsigned char *)this + 36)) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
            int v38 = *((_DWORD *)this + 14);
            BOOL v17 = __OFSUB__(v38, 1);
            int v39 = v38 - 1;
            if (v39 < 0 == v17) {
              *((_DWORD *)this + 14) = v39;
            }
            unsigned int v28 = (unsigned char *)*((void *)this + 1);
            if ((unint64_t)v28 >= *((void *)this + 2)) {
              goto LABEL_2;
            }
            int v40 = *v28;
          }
          while (v40 == 26);
          if (v40 == 34)
          {
            do
            {
              *((void *)this + 1) = v28 + 1;
LABEL_64:
              int v41 = *(_DWORD *)(a1 + 60);
              uint64_t v42 = *(int *)(a1 + 56);
              if ((int)v42 >= v41)
              {
                if (v41 == *(_DWORD *)(a1 + 64))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v41 + 1);
                  int v41 = *(_DWORD *)(a1 + 60);
                }
                *(_DWORD *)(a1 + 60) = v41 + 1;
                operator new();
              }
              uint64_t v43 = *(void *)(a1 + 48);
              *(_DWORD *)(a1 + 56) = v42 + 1;
              uint64_t v44 = *(void *)(v43 + 8 * v42);
              unsigned int v54 = 0;
              unsigned int v45 = (char *)*((void *)this + 1);
              if ((unint64_t)v45 >= *((void *)this + 2) || *v45 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0; {
              }
                }
              else
              {
                unsigned int v54 = *v45;
                *((void *)this + 1) = v45 + 1;
              }
              int v46 = *((_DWORD *)this + 14);
              int v47 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v46 + 1;
              if (v46 >= v47) {
                return 0;
              }
              int v48 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
              if (!sub_10149B1E8(v44, this, v49) || !*((unsigned char *)this + 36)) {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v48);
              int v50 = *((_DWORD *)this + 14);
              BOOL v17 = __OFSUB__(v50, 1);
              int v51 = v50 - 1;
              if (v51 < 0 == v17) {
                *((_DWORD *)this + 14) = v51;
              }
              unsigned int v28 = (unsigned char *)*((void *)this + 1);
              int v52 = (unsigned char *)*((void *)this + 2);
            }
            while (v28 < v52 && *v28 == 34);
            if (v28 == v52 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
        }
        break;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_46;
        }
        goto LABEL_20;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_20;
        }
        goto LABEL_64;
      default:
        int v9 = TagFallback & 7;
LABEL_20:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10149E660(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 76);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248D768 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 76);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248D768 + 16);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v9 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    uint64_t v10 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 48) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 56));
  }
  return result;
}

uint64_t sub_10149E744(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 76))
  {
    int v3 = 0;
    goto LABEL_18;
  }
  if ((*(unsigned char *)(a1 + 76) & 1) == 0)
  {
    int v3 = 0;
    if ((*(unsigned char *)(a1 + 76) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248D768 + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1014990F4(v4, a2);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  }
  else {
    int v7 = 1;
  }
  int v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 76) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248D768 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10149D8D8(v8, a2);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    }
    else {
      int v11 = 1;
    }
    v3 += v10 + v11 + 1;
  }
LABEL_18:
  int v12 = *(_DWORD *)(a1 + 32);
  int v13 = v12 + v3;
  if (v12 >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      unsigned int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10149ACD8(*(void *)(*(void *)(a1 + 24) + 8 * v14), a2);
      int v16 = (int)v15;
      if (v15 >= 0x80) {
        int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      }
      else {
        int v17 = 1;
      }
      v13 += v16 + v17;
      ++v14;
    }
    while (v14 < *(int *)(a1 + 32));
  }
  int v18 = *(_DWORD *)(a1 + 56);
  uint64_t v19 = (v18 + v13);
  if (v18 >= 1)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10149B5D4(*(void *)(*(void *)(a1 + 48) + 8 * v20), a2);
      int v22 = (int)v21;
      if (v21 >= 0x80) {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
      }
      else {
        int v23 = 1;
      }
      uint64_t v19 = (v22 + v19 + v23);
      ++v20;
    }
    while (v20 < *(int *)(a1 + 56));
  }
  *(_DWORD *)(a1 + 72) = v19;
  return v19;
}

float sub_10149E8C0(uint64_t a1, void *lpsrc)
{
  return sub_10149DAA0(a1, (uint64_t)lpsrc);
}

uint64_t sub_10149E948()
{
  return 1;
}

void *sub_10149E950@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RavenGnssAssistanceFile.AssistanceFileContents");
}

double sub_10149E964(double **a1, double **a2, double *a3, double a4)
{
  double v4 = a4 + -2592000.0;
  uint64_t v5 = *a1;
  int v6 = a1[1];
  if (*a1 == v6)
  {
    BOOL v12 = 0;
    int v7 = 0;
    double v13 = -INFINITY;
  }
  else
  {
    int v7 = 0;
    double v8 = 0.0;
    do
    {
      if (*v5 >= v4 + -0.0001 && *v5 < a4)
      {
        double v10 = v5[2];
        if (v10 > 0.0)
        {
          ++v7;
          double v8 = v8 + v10;
        }
      }
      v5 += 3;
    }
    while (v5 != v6);
    double v11 = v8 / (double)v7;
    BOOL v12 = v7 >= 1;
    if (v7 >= 1) {
      double v13 = v11;
    }
    else {
      double v13 = -INFINITY;
    }
  }
  uint64_t v14 = *a2;
  unsigned int v15 = a2[1];
  if (*a2 == v15)
  {
    double v17 = 0.0;
    if (v12)
    {
LABEL_25:
      double v19 = v17 / (double)v7;
      goto LABEL_28;
    }
  }
  else
  {
    double v16 = v4 + -0.0001;
    double v17 = 0.0;
    do
    {
      if (*v14 >= v16 && *v14 < a4) {
        double v17 = v17 + v14[2];
      }
      v14 += 3;
    }
    while (v14 != v15);
    if (v12) {
      goto LABEL_25;
    }
  }
  double v19 = -INFINITY;
LABEL_28:
  double v20 = *a3;
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102328AC0);
  }
  uint64_t v21 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134284033;
    double v25 = v20;
    __int16 v26 = 2049;
    double v27 = v13;
    __int16 v28 = 2049;
    double v29 = v19;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessAdjustment::Features,allBoutsBoutDurationSecCv,%{private}.2f,dailySteps30daysMean,%{private}.2f,dailyFlights30daysMean,%{private}.2f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102328AC0);
    }
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Features CLMobility::SteadinessAdjustment::extractFeatures(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const SteadinessModelContinuousWalking_Generated::Features &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  return v20;
}

void sub_10149EC38(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

double sub_10149EC68(void *a1, uint64_t *a2)
{
  int v2 = sub_10156C66C(a1, a2);
  *int v2 = off_102328AF0;
  v2[12] = 0;
  v2[13] = 0;
  v2[11] = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *(_OWORD *)((char *)v2 + 68) = 0u;
  return result;
}

uint64_t sub_10149ECB8(uint64_t a1)
{
  *(void *)(a1 + 112) = 0x7FEFFFFFFFFFFFFFLL;
  return 1;
}

uint64_t sub_10149ECC8(uint64_t a1, long long *a2, double a3)
{
  *(double *)(a1 + 112) = a3;
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 68) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  return 1;
}

uint64_t sub_10149ECF0()
{
  return 1;
}

uint64_t sub_10149ECF8(uint64_t a1)
{
  uint64_t v2 = sub_1011E124C();
  *(double *)(a1 + 104) = sub_1011E2DD8(v2) / 3.5;
  return 1;
}

void sub_10149EEF8(void *a1)
{
  sub_10149EF60(a1);

  operator delete();
}

void sub_10149EF30(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void *sub_10149EF60(void *a1)
{
  *a1 = off_102328AF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  *a1 = off_1022FA060;
  long long v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

uint64_t sub_10149F054()
{
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children || (CFArrayRef v1 = Children, !CFArrayGetCount(Children)))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102328B70);
    }
    int v6 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Event has no children", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419090 == -1) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  CFArrayGetValueAtIndex(v1, 0);
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  if (IOHIDEventGetIntegerValue() != 65301 || IntegerValue != 2)
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102328B70);
    }
    int v7 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Event has no timestamp", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419090 == -1)
    {
LABEL_24:
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "uint64_t sensorTimeFromHidChildEvent(IOHIDEventRef)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
LABEL_23:
    dispatch_once(&qword_102419090, &stru_102328B70);
    goto LABEL_24;
  }
  uint64_t DataValue = IOHIDEventGetDataValue();
  uint64_t v4 = IOHIDEventGetIntegerValue();
  if (!DataValue) {
    sub_101AB74EC();
  }
  if (v4 != 8) {
    sub_101AB7670();
  }
  return *(void *)DataValue;
}

CFArrayRef sub_10149F340(uint64_t a1, unsigned char *a2)
{
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  CFArrayRef v4 = Children;
  *a2 = 0;
  if (Children)
  {
    if (!CFArrayGetCount(Children)) {
      return 0;
    }
    *a2 = 1;
    if (CFArrayGetCount(v4) < 1) {
      return 0;
    }
    CFIndex v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v4, v5);
      uint64_t IntegerValue = IOHIDEventGetIntegerValue();
      uint64_t v7 = IOHIDEventGetIntegerValue();
      uint64_t v8 = IOHIDEventGetIntegerValue();
      uint64_t v9 = v8;
      if (v7 == 65301 && IntegerValue == 4 && v8 == 8) {
        break;
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102328B90);
      }
      double v10 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134284033;
        uint64_t v17 = v7;
        __int16 v18 = 2049;
        uint64_t v19 = IntegerValue;
        __int16 v20 = 2049;
        uint64_t v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] Invalid child event for BTC timestamp: usage page 0x%{private}lx usage 0x%{private}lx length %{private}zu", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102328B90);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "uint64_t btcTimeFromHidChildEvent(IOHIDEventRef, BOOL &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      if (++v5 >= CFArrayGetCount(v4)) {
        return 0;
      }
    }
    CFArrayRef v4 = *(const __CFArray **)IOHIDEventGetDataValue();
    double v12 = sub_10016C458();
    if (!v4)
    {
      if (v12 - *(double *)&qword_102487D30 > 1.0)
      {
        qword_102487D30 = *(void *)&v12;
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102328B90);
        }
        double v13 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Invalid child BTC timestamp", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_102328B90);
          }
          unsigned int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "uint64_t btcTimeFromHidChildEvent(IOHIDEventRef, BOOL &)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      return 0;
    }
  }
  return v4;
}

BOOL sub_10149F740(void *a1, IOHIDServiceClientRef service, CFStringRef key)
{
  CFTypeRef v5 = IOHIDServiceClientCopyProperty(service, key);
  if (v5)
  {
    int v6 = v5;
    CFTypeID TypeID = CFNumberGetTypeID();
    BOOL v8 = TypeID == CFGetTypeID(v6);
    BOOL v9 = v8;
    if (v8)
    {
      CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, a1);
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102328BB0);
      }
      double v11 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        CFStringRef v16 = key;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102328BB0);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL getIntFromHIDService(int *, IOHIDServiceClientRef, CFStringRef)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    CFRelease(v6);
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102328BB0);
    }
    double v10 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      CFStringRef v16 = key;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102328BB0);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL getIntFromHIDService(int *, IOHIDServiceClientRef, CFStringRef)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 0;
  }
  return v9;
}

uint64_t sub_10149FA98(uint64_t a1, IOHIDServiceClientRef service, CFStringRef key)
{
  CFDataRef v5 = (const __CFData *)IOHIDServiceClientCopyProperty(service, key);
  if (v5)
  {
    CFDataRef v6 = v5;
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      BytePtr = (UInt8 *)CFDataGetBytePtr(v6);
      CFIndex Length = CFDataGetLength(v6);
      size_t v10 = 0;
      if (Length)
      {
        while (BytePtr[v10])
        {
          if (Length == ++v10)
          {
            size_t v10 = Length;
            break;
          }
        }
      }
      sub_1002E9328(buf, BytePtr, v10);
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *(_OWORD *)buf;
      *(void *)(a1 + 16) = v19;
    }
    else
    {
      CFTypeID v13 = CFStringGetTypeID();
      if (v13 != CFGetTypeID(v6))
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102328BB0);
        }
        uint64_t v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = key;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102328BB0);
          }
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL getStringFromHIDService(std::string &, IOHIDServiceClientRef, CFStringRef)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        uint64_t v12 = 0;
        goto LABEL_25;
      }
      std::string::assign((std::string *)a1, (const std::string::value_type *)[(__CFData *)v6 UTF8String]);
    }
    uint64_t v12 = 1;
LABEL_25:
    CFRelease(v6);
    return v12;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102328BB0);
  }
  double v11 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = key;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102328BB0);
    }
    CFStringRef v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL getStringFromHIDService(std::string &, IOHIDServiceClientRef, CFStringRef)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return 0;
}

NSObject *sub_10149FE70(void *a1, IOHIDServiceClientRef service, __CFString *key, id a4)
{
  CFDataRef v5 = key;
  CFTypeRef v7 = IOHIDServiceClientCopyProperty(service, key);
  if (v7)
  {
    BOOL v8 = (void *)v7;
    CFTypeID TypeID = CFDataGetTypeID();
    BOOL v10 = TypeID == CFGetTypeID(v8);
    double v11 = v10;
    if (v10)
    {
      if ([v8 length] == a4)
      {
        memcpy(a1, [v8 bytes], (size_t)a4);
LABEL_16:
        CFRelease(v8);
        return v11;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102328BB0);
      }
      uint64_t v17 = qword_102418FD8;
      p_cache = (void **)"[data length] == expected_length";
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 68290051;
        *(_DWORD *)int v24 = 0;
        *(_WORD *)&v24[4] = 2082;
        *(void *)&v24[6] = "";
        __int16 v25 = 2082;
        __int16 v26 = (__CFString *)[(__CFString *)v5 UTF8String];
        __int16 v27 = 2050;
        id v28 = [v8 length];
        __int16 v29 = 2082;
        uint64_t v30 = "assert";
        __int16 v31 = 2081;
        uint64_t v32 = "[data length] == expected_length";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102328BB0);
        }
      }
      __int16 v18 = qword_102418FD8;
      if (os_signpost_enabled((os_log_t)qword_102418FD8))
      {
        uint64_t v19 = (__CFString *)[(__CFString *)v5 UTF8String];
        id v20 = [v8 length];
        *(_DWORD *)long long buf = 68290051;
        *(_DWORD *)int v24 = 0;
        *(_WORD *)&v24[4] = 2082;
        *(void *)&v24[6] = "";
        __int16 v25 = 2082;
        __int16 v26 = v19;
        __int16 v27 = 2050;
        id v28 = v20;
        __int16 v29 = 2082;
        uint64_t v30 = "assert";
        __int16 v31 = 2081;
        uint64_t v32 = "[data length] == expected_length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected length!", "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102328BB0);
        }
      }
      double v11 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        CFDataRef v5 = (__CFString *)[(__CFString *)v5 UTF8String];
        id v21 = [v8 length];
        *(_DWORD *)long long buf = 68290051;
        *(_DWORD *)int v24 = 0;
        *(_WORD *)&v24[4] = 2082;
        *(void *)&v24[6] = "";
        __int16 v25 = 2082;
        __int16 v26 = v5;
        __int16 v27 = 2050;
        id v28 = v21;
        __int16 v29 = 2082;
        uint64_t v30 = "assert";
        __int16 v31 = 2081;
        uint64_t v32 = "[data length] == expected_length";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      }
      abort_report_np();
    }
    else
    {
      p_cache = CLAvengerScannerClientController.cache;
      if (qword_102418FD0 == -1)
      {
LABEL_13:
        uint64_t v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)int v24 = v5;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid type for key %{public}@!", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (p_cache[506] != (void *)-1) {
            dispatch_once(&qword_102418FD0, &stru_102328BB0);
          }
          int v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL getBytesFromHIDService(void *, IOHIDServiceClientRef, CFStringRef, size_t)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
        goto LABEL_16;
      }
    }
    dispatch_once(&qword_102418FD0, &stru_102328BB0);
    goto LABEL_13;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102328BB0);
  }
  uint64_t v12 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)int v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102328BB0);
    }
    CFStringRef v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL getBytesFromHIDService(void *, IOHIDServiceClientRef, CFStringRef, size_t)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return 0;
}

void sub_1014A0458(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_1014A0488(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_1014A04B8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

Class sub_1014A0E68()
{
  if (qword_102487D40 != -1) {
    dispatch_once(&qword_102487D40, &stru_102328BD0);
  }
  Class result = objc_getClass("CRVehicleAccessoryManager");
  qword_102487D38 = (uint64_t)result;
  off_102478F18 = sub_1014A0ECC;
  return result;
}

uint64_t sub_1014A0ECC()
{
  return qword_102487D38;
}

void sub_1014A0ED8(id a1)
{
  qword_102487D48 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
}

void sub_1014A0F04(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1014A0FE4(id a1)
{
  qword_1024881A0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLGeoMapTilesPreloaderServiceSilo"];
}

void sub_1014A1474()
{
}

void sub_1014A1498(unsigned __int8 *a1)
{
  sub_1000C7F88(buf);
  unsigned __int8 v2 = *a1;
  v62[0] = 0;
  int v3 = sub_1000D2988(*(uint64_t *)buf, "EnableCLGMTPS", v62);
  unsigned __int8 v4 = v62[0];
  if (!v3) {
    unsigned __int8 v4 = v2;
  }
  *a1 = v4;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  unsigned __int8 v5 = a1[33];
  v62[0] = 0;
  int v6 = sub_1000D2988(*(uint64_t *)buf, "CLGMTPSClearPersistentStore", v62);
  unsigned __int8 v7 = v62[0];
  if (!v6) {
    unsigned __int8 v7 = v5;
  }
  a1[33] = v7;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  unsigned __int8 v8 = a1[32];
  v62[0] = 0;
  int v9 = sub_1000D2988(*(uint64_t *)buf, "CLGMTPSUseMotionStateStationaryAsXPCCriteria", v62);
  unsigned __int8 v10 = v62[0];
  if (!v9) {
    unsigned __int8 v10 = v8;
  }
  a1[32] = v10;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  unsigned __int8 v11 = a1[64];
  v62[0] = 0;
  int v12 = sub_1000D2988(*(uint64_t *)buf, "CLGMTPSAddFakeNPLOIData", v62);
  unsigned __int8 v13 = v62[0];
  if (!v12) {
    unsigned __int8 v13 = v11;
  }
  a1[64] = v13;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(v62);
  memset(&__p, 0, sizeof(__p));
  sub_1005B66DC(*(uint64_t *)v62, "CLGMTPSMinimumBatteryLevel", &__p, (uint64_t)buf);
  *(_OWORD *)unsigned int v59 = *(_OWORD *)buf;
  uint64_t v60 = *(void *)&buf[16];
  buf[23] = 0;
  buf[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)&v62[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v62[8]);
  }
  int v14 = SHIBYTE(v60);
  if (SHIBYTE(v60) < 0)
  {
    if (!v59[1]) {
      goto LABEL_27;
    }
    unsigned int v15 = v59[0];
  }
  else
  {
    if (!HIBYTE(v60)) {
      goto LABEL_27;
    }
    unsigned int v15 = (const char *)v59;
  }
  *((_DWORD *)a1 + 1) = atoi(v15);
LABEL_27:
  memset(&v57, 0, sizeof(v57));
  sub_1000C7F88(v62);
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = 0;
  sub_1005B66DC(*(uint64_t *)v62, "CLGMTPSPreCacheGeoTilesForCoordinate", &__dst, (uint64_t)buf);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string v57 = *(std::string *)buf;
  buf[23] = 0;
  buf[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*(void *)&v62[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v62[8]);
  }
  std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(buf, 0, 24);
    sub_1014BAF88((uint64_t)a1, &v57, 0x2Cu, (uint64_t *)buf);
    uint64_t v17 = *(void *)buf;
    if (*(void *)&buf[8] - *(void *)buf == 72)
    {
      __int16 v18 = *(const char **)buf;
      if (*(char *)(*(void *)buf + 23) < 0) {
        __int16 v18 = **(const char ***)buf;
      }
      *((double *)a1 + 1) = atof(v18);
      uint64_t v19 = (const char *)(v17 + 24);
      if (*(char *)(v17 + 47) < 0) {
        uint64_t v19 = *(const char **)v19;
      }
      *((double *)a1 + 2) = atof(v19);
      id v20 = (const char *)(v17 + 48);
      if (*(char *)(v17 + 71) < 0) {
        id v20 = *(const char **)v20;
      }
      *((double *)a1 + 3) = atof(v20);
    }
    *(void *)long long v62 = buf;
    sub_1000A7B4C((void ***)v62);
  }
  memset(&v55, 0, sizeof(v55));
  sub_1000C7F88(v62);
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = 0;
  sub_1005B66DC(*(uint64_t *)v62, "CLGMTPSAddRegionConfig", &v54, (uint64_t)buf);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  std::string v55 = *(std::string *)buf;
  buf[23] = 0;
  buf[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (*(void *)&v62[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v62[8]);
  }
  std::string::size_type v21 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v21 = v55.__r_.__value_.__l.__size_;
  }
  if (v21)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      int v23 = &v55;
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v23 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "CLGMTPS,addRegionConfig,regionConfigStr,%{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v52 = &v55;
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v52 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long v62 = 136446210;
      *(void *)&v62[4] = v52;
      int v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeoMapTilesPreloaderSettings::readDaemonSettings()", "%s\n", v53);
      if (v53 != buf) {
        free(v53);
      }
    }
    memset(v62, 0, 24);
    sub_1014BAF88((uint64_t)a1, &v55, 0x2Cu, (uint64_t *)v62);
    *(_DWORD *)long long buf = 16777472;
    uint8_t buf[4] = 1;
    *(_DWORD *)&buf[5] = 0;
    *(_OWORD *)&buf[28] = xmmword_101D2C9F0;
    *(_OWORD *)&buf[44] = xmmword_101D2CA00;
    *(_DWORD *)&buf[60] = 400;
    *(void *)&long long v24 = -1;
    *((void *)&v24 + 1) = -1;
    long long v74 = v24;
    long long v75 = v24;
    long long v76 = v24;
    long long v77 = v24;
    long long v78 = v24;
    *(_DWORD *)uint64_t v79 = -1;
    *(_OWORD *)&v79[4] = xmmword_101D2CA10;
    *(_OWORD *)&unsigned char buf[12] = xmmword_101D2CA20;
    if (sub_10016CCBC()) {
      *(_DWORD *)&uint8_t buf[16] = 4233600;
    }
    DWORD2(v74) = 125000;
    DWORD1(v75) = 125000;
    LODWORD(v76) = 125000;
    HIDWORD(v76) = 15000;
    DWORD2(v77) = 25000;
    DWORD1(v78) = -1;
    *(_DWORD *)uint64_t v79 = -1;
    if (*(void *)&v62[8] != *(void *)v62 && sub_10075A288((uint64_t)buf, v62))
    {
      uint64_t v61 = *(long long **)v62;
      __int16 v25 = sub_1014BB1B4((uint64_t **)a1 + 5, *(const void ***)v62, (uint64_t)&unk_101D0B290, &v61);
      long long v26 = v76;
      *(_OWORD *)(v25 + 21) = v77;
      long long v27 = *(_OWORD *)v79;
      *(_OWORD *)(v25 + 23) = v78;
      *(_OWORD *)(v25 + 25) = v27;
      int v28 = *(_DWORD *)&v79[16];
      long long v29 = *(_OWORD *)&buf[32];
      *(_OWORD *)(v25 + 13) = *(_OWORD *)&buf[48];
      long long v30 = v75;
      *(_OWORD *)(v25 + 15) = v74;
      *(_OWORD *)(v25 + 17) = v30;
      *(_OWORD *)(v25 + 19) = v26;
      long long v31 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v25 + 7) = *(_OWORD *)buf;
      *((_DWORD *)v25 + 54) = v28;
      *(_OWORD *)(v25 + 9) = v31;
      *(_OWORD *)(v25 + 11) = v29;
    }
    *(void *)long long buf = v62;
    sub_1000A7B4C((void ***)buf);
  }
  sub_100103240();
  if (sub_10010145C())
  {
    int v32 = 0;
  }
  else
  {
    sub_1000C7F88(buf);
    v62[0] = 0;
    int v33 = sub_1000D2988(*(uint64_t *)buf, "UseMapsBuildingTileStyleBasic", v62) ^ 1;
    if (v62[0]) {
      int v32 = v33;
    }
    else {
      int v32 = 1;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  *((_DWORD *)a1 + 17) = v32;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  int v34 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
  {
    int v35 = *a1;
    uint64_t v36 = *((void *)a1 + 1);
    uint64_t v37 = *((void *)a1 + 2);
    uint64_t v38 = *((void *)a1 + 3);
    int v39 = a1[33];
    uint64_t v40 = *((void *)a1 + 7);
    int v41 = *((_DWORD *)a1 + 1);
    int v42 = *((_DWORD *)a1 + 17);
    *(_DWORD *)long long buf = 67241985;
    *(_DWORD *)&uint8_t buf[4] = v35;
    *(_WORD *)&uint8_t buf[8] = 2049;
    *(void *)&buf[10] = v36;
    *(_WORD *)&unsigned char buf[18] = 2049;
    *(void *)&buf[20] = v37;
    *(_WORD *)&buf[28] = 2050;
    *(void *)&buf[30] = v38;
    *(_WORD *)&buf[38] = 1026;
    *(_DWORD *)&buf[40] = v39;
    *(_WORD *)&buf[44] = 1026;
    *(_DWORD *)&buf[46] = v40;
    *(_WORD *)&buf[50] = 1026;
    *(_DWORD *)&buf[52] = v41;
    *(_WORD *)&buf[56] = 1026;
    *(_DWORD *)&buf[58] = v42;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "CLGMTPS,readDaemonSettings,enabled,%{public}d,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,clearPersistentStore,%{public}d,additionalConfigs,%{public}d,batteryLevel,%{public}d,mapsBuildingTileStyleToUse,%{public}d", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v43 = *a1;
    uint64_t v44 = *((void *)a1 + 1);
    uint64_t v45 = *((void *)a1 + 2);
    uint64_t v46 = *((void *)a1 + 3);
    int v47 = a1[33];
    uint64_t v48 = *((void *)a1 + 7);
    int v49 = *((_DWORD *)a1 + 1);
    int v50 = *((_DWORD *)a1 + 17);
    *(_DWORD *)long long v62 = 67241985;
    *(_DWORD *)&v62[4] = v43;
    *(_WORD *)&v62[8] = 2049;
    *(void *)&v62[10] = v44;
    *(_WORD *)&v62[18] = 2049;
    *(void *)&v62[20] = v45;
    __int16 v63 = 2050;
    uint64_t v64 = v46;
    __int16 v65 = 1026;
    int v66 = v47;
    __int16 v67 = 1026;
    int v68 = v48;
    __int16 v69 = 1026;
    int v70 = v49;
    __int16 v71 = 1026;
    int v72 = v50;
    int v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeoMapTilesPreloaderSettings::readDaemonSettings()", "%s\n", v51);
    if (v51 != buf) {
      free(v51);
    }
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v14 & 0x80000000) == 0) {
      return;
    }
LABEL_85:
    operator delete(v59[0]);
    return;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if (v14 < 0) {
    goto LABEL_85;
  }
}

void sub_1014A1DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (v59 < 0) {
    operator delete(a44);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014A4524(_Unwind_Exception *a1)
{
}

void sub_1014A460C(uint64_t a1)
{
  CFArrayRef v1 = (uint64_t **)(a1 + 8);
  *(_DWORD *)long long buf = 4;
  if (sub_100178BF0(a1 + 8, (int *)buf))
  {
    *(_DWORD *)long long buf = 4;
    sub_1014BBB18(v1, (int *)buf);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    unsigned __int8 v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGMTPS,tourist coarse location erased", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      unsigned __int8 v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRoutineManagerInfo::eraseTouristLOIs()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  *(_DWORD *)long long buf = 6;
  if (sub_100178BF0((uint64_t)v1, (int *)buf))
  {
    *(_DWORD *)long long buf = 6;
    sub_1014BBB18(v1, (int *)buf);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v3 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGMTPS,tourist signalEnv coarse location erased", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      unsigned __int8 v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRoutineManagerInfo::eraseTouristLOIs()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

BOOL sub_1014A4918(double *a1)
{
  return !sub_1000EF668(*a1, a1[1]) && sub_1000EF68C(*a1, a1[1]);
}

BOOL sub_1014A495C(uint64_t a1)
{
  if (*(double *)(a1 + 108) >= 0.0)
  {
    double v3 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 108));
    if (v3 <= 43200.0) {
      return 1;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    unsigned __int8 v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349056;
      double v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLGMTPS,user location is too old,dT,%{public}.1lf", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_18:
        unsigned __int8 v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::isUserLocationGood() const", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return 0;
      }
LABEL_21:
      dispatch_once(&qword_102419430, &stru_102328DC8);
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    CFArrayRef v1 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLGMTPS,user location not available", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_18;
      }
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t sub_1014A4C10(uint64_t **a1, uint64_t a2)
{
  __int16 v25 = a1;
  unsigned __int8 v4 = a1 + 12;
  ((void (*)(uint64_t **))(*a1)[2])(a1);
  __int16 v26 = 256;
  *(_DWORD *)long long buf = 3;
  if (sub_100178BF0((uint64_t)v4, (int *)buf))
  {
    int v24 = 3;
    unsigned __int8 v5 = sub_1014BBB94(a2, &v24);
    uint64_t v7 = (uint64_t)a1[12];
    if ((uint64_t **)v7 != a1 + 13)
    {
      unsigned __int8 v8 = v5;
      int v9 = v6;
      do
      {
        if (*(_DWORD *)(v7 + 32) == 3)
        {
          if (v8 == v9)
          {
LABEL_17:
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102328DC8);
            }
            int v14 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              int v15 = *(_DWORD *)(v7 + 32);
              CFStringRef v16 = a1[14];
              *(_DWORD *)long long buf = 67240448;
              int v32 = v15;
              __int16 v33 = 2050;
              int v34 = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLGMTPS,element erased for type,%{public}d,size,%{public}ld", buf, 0x12u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102328DC8);
              }
              int v20 = *(_DWORD *)(v7 + 32);
              std::string::size_type v21 = a1[14];
              int v27 = 67240448;
              int v28 = v20;
              __int16 v29 = 2050;
              long long v30 = v21;
              int v22 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLPersistentStoreData::clearStaleNPLOIDataInPersistentStoreObject(CoarseCoordinateMultiMap &)", "%s\n", v22);
              if (v22 != (char *)buf) {
                free(v22);
              }
            }
            uint64_t v17 = sub_1014BC630(v4, v7);
          }
          else
          {
            unsigned __int8 v10 = v8;
            while (*((_DWORD *)v10 + 8) != 3
                 || sub_1000EF668(*(double *)(v7 + 64), *(double *)(v7 + 72))
                 || sub_1000EF668(*((double *)v10 + 8), *((double *)v10 + 9))
                 || !sub_1004BABDC(*(double *)(v7 + 64), *(double *)(v7 + 72), *((double *)v10 + 8), *((double *)v10 + 9), 0.0000001))
            {
              unsigned __int8 v11 = (uint64_t *)v10[1];
              if (v11)
              {
                do
                {
                  int v12 = v11;
                  unsigned __int8 v11 = (uint64_t *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  int v12 = (uint64_t *)v10[2];
                  BOOL v13 = *v12 == (void)v10;
                  unsigned __int8 v10 = v12;
                }
                while (!v13);
              }
              unsigned __int8 v10 = v12;
              if (v12 == v9) {
                goto LABEL_17;
              }
            }
            uint64_t v19 = *(uint64_t **)(v7 + 8);
            if (v19)
            {
              do
              {
                uint64_t v17 = v19;
                uint64_t v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                uint64_t v17 = *(uint64_t **)(v7 + 16);
                BOOL v13 = *v17 == v7;
                uint64_t v7 = (uint64_t)v17;
              }
              while (!v13);
            }
          }
        }
        else
        {
          __int16 v18 = *(uint64_t **)(v7 + 8);
          if (v18)
          {
            do
            {
              uint64_t v17 = v18;
              __int16 v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v17 = *(uint64_t **)(v7 + 16);
              BOOL v13 = *v17 == v7;
              uint64_t v7 = (uint64_t)v17;
            }
            while (!v13);
          }
        }
        uint64_t v7 = (uint64_t)v17;
      }
      while (v17 != (uint64_t *)(a1 + 13));
    }
  }
  return ((uint64_t (*)(uint64_t **))(*a1)[3])(a1);
}

void sub_1014A4FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1014A4FEC@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 6) {
    unsigned __int8 v2 = "Unknown";
  }
  else {
    unsigned __int8 v2 = off_102328EF0[a1];
  }
  return sub_100134750(a2, v2);
}

uint64_t *sub_1014A5018(uint64_t a1, unsigned int a2, double *a3, int a4)
{
  unsigned int v6 = a2;
  unsigned int v37 = a2;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unsigned __int8 v8 = *(uint64_t **)(a1 + 96);
  int v9 = (uint64_t *)(a1 + 104);
  if (v8 == (uint64_t *)(a1 + 104))
  {
LABEL_14:
    if (a4)
    {
      int v43 = v44;
      v44[0] = 0;
      v46[0] = 0;
      v46[1] = 0;
      v44[1] = 0;
      uint64_t v45 = v46;
      long long v13 = *((_OWORD *)a3 + 1);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)a3;
      long long v41 = v13;
      long long v42 = *((_OWORD *)a3 + 2);
      sub_1014BB688((uint64_t)buf, &v37, (long long *)v40);
      int v14 = sub_1014BC67C((uint64_t **)(a1 + 96), (uint64_t)buf);
      sub_1000F5BB0((uint64_t)v52, v52[1]);
      sub_1000F5BB0((uint64_t)v51, v51[1]);
      if (v9 == v14)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        __int16 v18 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = *(void *)(a1 + 112);
          *(_DWORD *)long long buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = v37;
          __int16 v48 = 2050;
          uint64_t v49 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to inserted for type,%{public}d,size,%{public}ld", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          uint64_t v33 = *(void *)(a1 + 112);
          int v38 = 67240448;
          LODWORD(v39[0]) = v37;
          WORD2(v39[0]) = 2050;
          *(void *)((char *)v39 + 6) = v33;
          int v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
        uint64_t v17 = 0;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        int v15 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          uint64_t v16 = *(void *)(a1 + 112);
          *(_DWORD *)long long buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = v37;
          __int16 v48 = 2050;
          uint64_t v49 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLGMTPS,new element inserted for type,%{public}d,size,%{public}ld", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          uint64_t v31 = *(void *)(a1 + 112);
          int v38 = 67240448;
          LODWORD(v39[0]) = v37;
          WORD2(v39[0]) = 2050;
          *(void *)((char *)v39 + 6) = v31;
          int v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v32);
          if (v32 != (char *)buf) {
            free(v32);
          }
        }
        uint64_t v17 = v14 + 5;
      }
      sub_1000F5BB0((uint64_t)&v45, v46[0]);
      sub_1000F5BB0((uint64_t)&v43, v44[0]);
    }
    else
    {
      uint64_t v17 = 0;
    }
    goto LABEL_64;
  }
  while (1)
  {
    if (*((_DWORD *)v8 + 8) != v6) {
      goto LABEL_8;
    }
    if (v6 <= 5 && ((1 << v6) & 0x27) != 0)
    {
LABEL_22:
      uint64_t v17 = v8 + 5;
      goto LABEL_64;
    }
    if (sub_1000EF668(*((double *)v8 + 8), *((double *)v8 + 9))) {
      break;
    }
    if (sub_1004BABDC(a3[3], a3[4], *((double *)v8 + 8), *((double *)v8 + 9), 0.0000001)) {
      goto LABEL_22;
    }
    unsigned int v6 = v37;
    if ((v37 & 0xFFFFFFFD) == 4)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v22 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        int v23 = v37 - 4 > 2 ? "Unknown" : off_102328ED8[v37 - 4];
        sub_100134750(buf, v23);
        int v27 = v50 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)uint64_t v40 = 136446210;
        *(void *)&v40[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "CLGMTPS,using recycled tourist entry as location data did not match,%{public}s", v40, 0xCu);
        if (v50 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        sub_1014A4FEC(v37, v40);
        if ((SBYTE7(v41) & 0x80u) == 0) {
          int v35 = v40;
        }
        else {
          int v35 = *(uint8_t **)v40;
        }
        int v38 = 136446210;
        v39[0] = v35;
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        if (SBYTE7(v41) < 0) {
          operator delete(*(void **)v40);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v26);
LABEL_81:
        if (v26 != (char *)buf) {
          free(v26);
        }
        goto LABEL_63;
      }
      goto LABEL_63;
    }
LABEL_8:
    unsigned __int8 v10 = (uint64_t *)v8[1];
    if (v10)
    {
      do
      {
        unsigned __int8 v11 = v10;
        unsigned __int8 v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        unsigned __int8 v11 = (uint64_t *)v8[2];
        BOOL v12 = *v11 == (void)v8;
        unsigned __int8 v8 = v11;
      }
      while (!v12);
    }
    unsigned __int8 v8 = v11;
    if (v11 == v9) {
      goto LABEL_14;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  int v20 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v21 = v37 > 6 ? "Unknown" : off_102328EF0[v37];
    sub_100134750(buf, v21);
    int v24 = v50 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)uint64_t v40 = 136446210;
    *(void *)&v40[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLGMTPS,null island in stored section data for type,%{public}s", v40, 0xCu);
    if (v50 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    sub_1014A4FEC(v37, v40);
    if ((SBYTE7(v41) & 0x80u) == 0) {
      __int16 v25 = v40;
    }
    else {
      __int16 v25 = *(uint8_t **)v40;
    }
    int v38 = 136446210;
    v39[0] = v25;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v41) < 0) {
      operator delete(*(void **)v40);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "CLPersistentStoreLOITypeData *CLPersistentStoreData::getProcessedDataStoreForType(const CLMapMatcherOperatingPolicy::MatcherLocationOfInterestType, const CLCoarseLocationData &, const BOOL)", "%s\n", v26);
    goto LABEL_81;
  }
LABEL_63:
  uint64_t v17 = v8 + 5;
  sub_1014B998C((uint64_t)(v8 + 5));
  long long v28 = *(_OWORD *)a3;
  long long v29 = *((_OWORD *)a3 + 2);
  *(_OWORD *)(v8 + 7) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(v8 + 9) = v29;
  *(_OWORD *)(v8 + 5) = v28;
LABEL_64:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v17;
}

void sub_1014A58F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1014A595C(uint64_t a1, double *a2)
{
  BOOL result = sub_1014A495C(a1);
  if (result)
  {
    if (*(_DWORD *)(a1 + 200) == 2 || !sub_1014BB374((double *)a1, a2))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      unsigned __int8 v5 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        BOOL v6 = *(_DWORD *)(a1 + 200) == 2;
        *(_DWORD *)long long buf = 67240192;
        BOOL v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLGMTPS,user location is far from LOI or is tourist,%{public}d", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::isUserLocal(const CLCoarseLocationData &) const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1014A5B54(void *a1, uint64_t a2, int a3, int a4)
{
  long long v30 = a1;
  (*(void (**)(void *))(*a1 + 16))(a1);
  __int16 v32 = 256;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  unsigned __int8 v8 = (void *)a1[12];
  double v9 = 86400.0;
  if (v8 == a1 + 13)
  {
LABEL_37:
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    __int16 v26 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)uint64_t v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "CLGMTPS,getTimeToNextRefresh,dT,%{public}.1lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v33 = 134349056;
      *(double *)int v34 = v9;
      long long v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLPersistentStoreData::getTimeToNextRefresh(const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, const BOOL, const BOOL)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    goto LABEL_42;
  }
  double v10 = -1.0;
  do
  {
    int v11 = *((_DWORD *)v8 + 8);
    if (a4)
    {
      if (v11 != 6) {
        goto LABEL_23;
      }
    }
    else if (v11 == 6)
    {
      goto LABEL_23;
    }
    unsigned int v12 = v11 & 0xFFFFFFFD;
    if (a3)
    {
      if (v12 != 4) {
        goto LABEL_23;
      }
    }
    else if (v12 == 4)
    {
      goto LABEL_23;
    }
    double v13 = dbl_101E0CBC0[(v11 - 5) < 2];
    int v14 = *(_DWORD *)(a2 + 12 * v11 + 64);
    if (v14 >= 1)
    {
      double v15 = sub_1014BB798((uint64_t)(v8 + 5), v8 + 11, &Current, (int)((double)v14 / v13 + 0.5) * (int)((double)v14 / v13 + 0.5));
      if (v15 > v10) {
        double v10 = v15;
      }
      int v11 = *((_DWORD *)v8 + 8);
    }
    int v16 = *(_DWORD *)(a2 + 12 * v11 + 68);
    if (v16 >= 1)
    {
      double v17 = sub_1014BB798((uint64_t)(v8 + 5), v8 + 14, &Current, (int)((double)v16 / v13 + 0.5) * (int)((double)v16 / v13 + 0.5));
      if (v17 > v10) {
        double v10 = v17;
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    __int16 v18 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *((_DWORD *)v8 + 8);
      *(_DWORD *)long long buf = 67240448;
      LODWORD(v36[0]) = v19;
      WORD2(v36[0]) = 2050;
      *(double *)((char *)v36 + 6) = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLGMTPS,getTimeToNextRefresh,type,%{public}d,dT,%{public}.1lf", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v23 = *((_DWORD *)v8 + 8);
      int v33 = 67240448;
      LODWORD(v34[0]) = v23;
      WORD2(v34[0]) = 2050;
      *(double *)((char *)v34 + 6) = v10;
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLPersistentStoreData::getTimeToNextRefresh(const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, const BOOL, const BOOL)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
LABEL_23:
    int v20 = (void *)v8[1];
    if (v20)
    {
      do
      {
        std::string::size_type v21 = v20;
        int v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        std::string::size_type v21 = (void *)v8[2];
        BOOL v22 = *v21 == (void)v8;
        unsigned __int8 v8 = v21;
      }
      while (!v22);
    }
    unsigned __int8 v8 = v21;
  }
  while (v21 != a1 + 13);
  if (v10 < 0.0) {
    goto LABEL_37;
  }
  double v25 = (double)*(int *)(a2 + 16) - v10;
  if (v25 < 0.0)
  {
    double v9 = 7200.0;
    goto LABEL_37;
  }
  double v9 = v25 + 301.0;
LABEL_42:
  if (HIBYTE(v32))
  {
    if ((_BYTE)v32) {
      pthread_mutex_unlock(v31);
    }
    else {
      (*(void (**)(void *))(*v30 + 24))(v30);
    }
  }
  return (int)v9;
}

void sub_1014A6068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014A6470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1014A64A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1014A6548;
  v10[3] = &unk_1022C9610;
  char v11 = *(unsigned char *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  v10[4] = a3;
  uint64_t v10[5] = v8;
  v10[6] = a2;
  v10[7] = v7;
  return [v6 async:v10];
}

id sub_1014A6548(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    if (v2 == 2)
    {
      char v3 = 0;
      uint64_t v4 = 2;
    }
    else if (v2 == 1)
    {
      char v3 = 0;
      uint64_t v4 = 1;
    }
    else
    {
      char v3 = 0;
      uint64_t v4 = 7;
    }
  }
  else
  {
    uint64_t v4 = 0;
    char v3 = 1;
  }
  if (!*(void *)(a1 + 32))
  {
    char v11 = *(void **)(a1 + 48);
    if (v11)
    {
      if ([v11 count])
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        unsigned int v12 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          unsigned int v13 = [*(id *)(a1 + 48) count];
          uint64_t v14 = *(void *)(a1 + 56);
          int v15 = *(unsigned __int8 *)(a1 + 64);
          *(_DWORD *)long long buf = 67240704;
          unsigned int v34 = v13;
          __int16 v35 = 1026;
          *(_DWORD *)uint64_t v36 = v14;
          *(_WORD *)&v36[4] = 1026;
          *(_DWORD *)&v36[6] = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLGMTPS,received routineManagerCallBack,count,%{public}d,for type,%{public}d,isSecondTry,%{public}d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          [*(id *)(a1 + 48) count];
          uint64_t v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        [*(id *)(a1 + 40) logRTLocationOfInterest:*(void *)(a1 + 48) type:@"loisReceived"];
        id v16 = [*(id *)(a1 + 48) sortedArrayUsingSelector:"recentCompare:"];
        [*(id *)(a1 + 40) logRTLocationOfInterest:v16 type:@"loisSorted"];
        id v17 = [v16 lastObject];
        if (v17)
        {
          id v18 = v17;
          if ([v17 type] == *(id *)(a1 + 56)) {
            return [*(id *)(a1 + 40) computeCoarseLocationAndStore:v18];
          }
        }
        return [*(id *)(a1 + 40) fetchCoarseLocationForNextLOI:v4];
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      long long v28 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        uint64_t v29 = *(void *)(a1 + 56);
        int v30 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)long long buf = 67240448;
        unsigned int v34 = v29;
        __int16 v35 = 1026;
        *(_DWORD *)uint64_t v36 = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "CLGMTPS,received zero entries in return when fetching LOIs for type,%{public}d,isSecondTry,%{public}d,requesting next", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return [*(id *)(a1 + 40) fetchCoarseLocationForNextLOI:v4];
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v23 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n");
LABEL_37:
      if (v23 != buf) {
        free(v23);
      }
      return [*(id *)(a1 + 40) fetchCoarseLocationForNextLOI:v4];
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v20 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 56);
      int v22 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)long long buf = 67240448;
      unsigned int v34 = v21;
      __int16 v35 = 1026;
      *(_DWORD *)uint64_t v36 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLGMTPS,received nil in return when fetching LOIs for type,%{public}d,isSecondTry,%{public}d,requesting next", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return [*(id *)(a1 + 40) fetchCoarseLocationForNextLOI:v4];
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_36:
      int v23 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n");
      goto LABEL_37;
    }
LABEL_62:
    dispatch_once(&qword_102419430, &stru_102328DC8);
    goto LABEL_36;
  }
  char v5 = v3 ^ 1;
  if (*(unsigned char *)(a1 + 64)) {
    char v5 = 1;
  }
  if ((v5 & 1) != 0 || (uint64_t v6 = *(void *)(a1 + 40) + 368, *(_DWORD *)buf = 0, sub_100178BF0(v6, (int *)buf)))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)long long buf = 67240707;
      unsigned int v34 = v8;
      __int16 v35 = 2113;
      *(void *)uint64_t v36 = v9;
      *(_WORD *)&v36[8] = 1026;
      int v37 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGMTPS,received error when fetching LOIs for type,%{public}d,error,%{private}@,isSecondTry,%{public}d,requesting next", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return [*(id *)(a1 + 40) fetchCoarseLocationForNextLOI:v4];
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_36;
    }
    goto LABEL_62;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  int v24 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 32);
    int v27 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)long long buf = 67240707;
    unsigned int v34 = v25;
    __int16 v35 = 2113;
    *(void *)uint64_t v36 = v26;
    *(_WORD *)&v36[8] = 1026;
    int v37 = v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLGMTPS,received error when fetching LOIs for type,%{public}d,error,%{private}@,isSecondTry,%{public}d,trying again for home LOI", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    __int16 v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchLOIForType:isSecondTry:]_block_invoke", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  return [*(id *)(a1 + 40) fetchLOIForType:0 isSecondTry:1];
}

BOOL sub_1014A70D8(uint64_t a1)
{
  if (*(double *)(a1 + 248) < 0.0) {
    return 1;
  }
  *(_DWORD *)long long buf = 3;
  BOOL v3 = sub_100178BF0(a1 + 8, (int *)buf) == 0;
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 248);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  double v6 = dbl_101E0CBD0[v3];
  double v7 = vabdd_f64(Current, v5);
  uint64_t v8 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 248);
    *(_DWORD *)long long buf = 134349568;
    uint64_t v12 = v9;
    __int16 v13 = 2050;
    double v14 = v7;
    __int16 v15 = 2050;
    double v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLGMTPS,shouldQueryNPLOI,fNPLOIQueryTime,%{public}.1lf,dT,%{public}.1lf,threshold,%{public}.1lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::shouldQueryNPLOI() const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return v7 > v6;
}

id sub_1014A7318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1014A7414;
  v8[3] = &unk_102328C60;
  uint64_t v8[4] = a3;
  v8[5] = a2;
  v8[6] = *(void *)(a1 + 32);
  long long v16 = *(_OWORD *)(a1 + 152);
  long long v17 = *(_OWORD *)(a1 + 168);
  long long v18 = *(_OWORD *)(a1 + 184);
  int v19 = *(_DWORD *)(a1 + 200);
  long long v12 = *(_OWORD *)(a1 + 88);
  long long v13 = *(_OWORD *)(a1 + 104);
  long long v14 = *(_OWORD *)(a1 + 120);
  long long v15 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 40);
  long long v10 = *(_OWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 72);
  return [v6 async:v8];
}

void sub_1014A7414(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(v1 + 32);
      *(_DWORD *)long long buf = 138477827;
      *(void *)long long v99 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLGMTPS,NPLOI,received error when fetching,%{private}@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v75 = *(void *)(v1 + 32);
    int v87 = 138477827;
    *(void *)uint64_t v88 = v75;
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 40);
    if (v4)
    {
      uint64_t v78 = v1;
      if (![v4 count])
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        __int16 v63 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "CLGMTPS,NPLOI,received zero entries in return when fetching", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          LOWORD(v87) = 0;
          long long v76 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v76);
          if (v76 != (char *)buf) {
            free(v76);
          }
        }
        uint64_t v64 = *(unsigned char **)(v1 + 48);
        if (v64[144])
        {
          long long v65 = *(_OWORD *)(v1 + 168);
          long long v66 = *(_OWORD *)(v1 + 200);
          v85[8] = *(_OWORD *)(v1 + 184);
          v85[9] = v66;
          int v86 = *(_DWORD *)(v1 + 216);
          long long v67 = *(_OWORD *)(v1 + 104);
          long long v68 = *(_OWORD *)(v1 + 136);
          v85[4] = *(_OWORD *)(v1 + 120);
          v85[5] = v68;
          v85[6] = *(_OWORD *)(v1 + 152);
          v85[7] = v65;
          long long v69 = *(_OWORD *)(v1 + 72);
          v85[0] = *(_OWORD *)(v1 + 56);
          v85[1] = v69;
          v85[2] = *(_OWORD *)(v1 + 88);
          v85[3] = v67;
          [v64 addFakeNPLOIDataForTesting:v85];
        }
        return;
      }
      double v5 = (uint64_t **)(*(void *)(v1 + 48) + 368);
      *(_DWORD *)long long buf = 3;
      sub_1014BBB18(v5, (int *)buf);
      long long v81 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      id obj = *(id *)(v1 + 40);
      id v6 = [obj countByEnumeratingWithState:&v81 objects:v97 count:16];
      if (!v6) {
        return;
      }
      id v7 = v6;
      uint64_t v8 = 0;
      uint64_t v9 = v1 + 56;
      uint64_t v10 = *(void *)v82;
      long long v11 = &qword_102419000;
LABEL_12:
      uint64_t v12 = 0;
      while (1)
      {
        if (*(void *)v82 != v10) {
          objc_enumerationMutation(obj);
        }
        long long v13 = *(void **)(*((void *)&v81 + 1) + 8 * v12);
        [v13 confidence];
        if (v14 >= 0.99)
        {
          uint64_t v17 = v10;
          uint64_t v18 = *(void *)(v1 + 48) + 368;
          *(_DWORD *)long long buf = 3;
          unint64_t v19 = sub_100178BF0(v18, (int *)buf);
          if (v19 >= 0xA)
          {
            unint64_t v70 = v19;
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102328DC8);
            }
            __int16 v71 = v11[135];
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              unsigned int v72 = [*(id *)(v1 + 40) count];
              *(_DWORD *)long long buf = 134349568;
              *(void *)long long v99 = v70;
              *(_WORD *)&v99[8] = 2050;
              uint64_t v100 = 10;
              LOWORD(v101) = 1026;
              *(_DWORD *)((char *)&v101 + 2) = v72;
              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "CLGMTPS,NPLOI,currentSize,%{public}ld,is more than max allowed,%{public}ld,newTotalCount,%{public}d", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102328DC8);
              }
              unsigned int v73 = [*(id *)(v78 + 40) count];
              int v87 = 134349568;
              *(void *)uint64_t v88 = v70;
              *(_WORD *)&v88[8] = 2050;
              uint64_t v89 = 10;
              LOWORD(v90) = 1026;
              *(_DWORD *)((char *)&v90 + 2) = v73;
              long long v74 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v74);
              if (v74 != (char *)buf) {
                goto LABEL_70;
              }
            }
            return;
          }
          int v20 = *(void **)(v1 + 48);
          [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
          double v22 = v21;
          [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude"]
          double v24 = v23;
          [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "altitude");
          double v26 = v25;
          [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "horizontalUncertainty");
          double v28 = v27;
          [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "verticalUncertainty");
          double v30 = v29;
          id v31 = [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "referenceFrame");
          long long v32 = *(_OWORD *)(v9 + 144);
          v79[8] = *(_OWORD *)(v9 + 128);
          v79[9] = v32;
          int v80 = *(_DWORD *)(v9 + 160);
          long long v33 = *(_OWORD *)(v9 + 80);
          v79[4] = *(_OWORD *)(v9 + 64);
          v79[5] = v33;
          long long v34 = *(_OWORD *)(v9 + 112);
          v79[6] = *(_OWORD *)(v9 + 96);
          v79[7] = v34;
          long long v35 = *(_OWORD *)(v9 + 16);
          v79[0] = *(_OWORD *)v9;
          v79[1] = v35;
          long long v36 = *(_OWORD *)(v9 + 48);
          v79[2] = *(_OWORD *)(v9 + 32);
          v79[3] = v36;
          [v20 computeCoarseLocationAndStoreForType:3 latitude:v31 longitude:v79 altitude:v8 horizontalAccuracy:v22 verticalAccuracy:v24 referenceFrame:v26 config:v28 nploiIndex:v30];
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          int v37 = v11[135];
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v38 = [*(id *)(v1 + 40) count];
            unsigned int v39 = [v13 modeOfTransportation];
            unsigned int v40 = [v13 locationOfInterest].type;
            [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
            uint64_t v42 = v41;
            [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude"]
            uint64_t v44 = v43;
            [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "horizontalUncertainty");
            uint64_t v46 = v45;
            [v13 confidence];
            *(_DWORD *)long long buf = 67241729;
            *(_DWORD *)long long v99 = v38;
            *(_WORD *)&v99[4] = 1026;
            *(_DWORD *)&v99[6] = v39;
            uint64_t v1 = v78;
            LOWORD(v100) = 1026;
            *(_DWORD *)((char *)&v100 + 2) = v40;
            long long v11 = &qword_102419000;
            HIWORD(v100) = 2049;
            uint64_t v101 = v42;
            __int16 v102 = 2049;
            uint64_t v103 = v44;
            __int16 v104 = 2050;
            uint64_t v105 = v46;
            __int16 v106 = 2050;
            uint64_t v107 = v47;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLGMTPS,NPLOI,callback,total,%{public}d,transportMode,%{public}d,type,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,confidence,%{public}.1lf", buf, 0x3Cu);
          }
          uint64_t v10 = v17;
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102328DC8);
            }
            unsigned int v50 = [*(id *)(v1 + 40) count];
            unsigned int v51 = [v13 modeOfTransportation];
            unsigned int v52 = [[[v13 locationOfInterest] type];
            [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "latitude");
            uint64_t v54 = v53;
            [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "longitude");
            uint64_t v56 = v55;
            [objc_msgSend(objc_msgSend(objc_msgSend(v13, "locationOfInterest"), "location"), "horizontalUncertainty");
            uint64_t v58 = v57;
            [v13 confidence];
            int v87 = 67241729;
            *(_DWORD *)uint64_t v88 = v50;
            *(_WORD *)&v88[4] = 1026;
            *(_DWORD *)&v88[6] = v51;
            LOWORD(v89) = 1026;
            *(_DWORD *)((char *)&v89 + 2) = v52;
            HIWORD(v89) = 2049;
            uint64_t v90 = v54;
            __int16 v91 = 2049;
            uint64_t v92 = v56;
            __int16 v93 = 2050;
            uint64_t v94 = v58;
            __int16 v95 = 2050;
            uint64_t v96 = v59;
            uint64_t v60 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v60);
            if (v60 != (char *)buf) {
              free(v60);
            }
            long long v11 = &qword_102419000;
            uint64_t v10 = v17;
            uint64_t v1 = v78;
          }
          uint64_t v8 = (v8 + 1);
        }
        else
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          long long v15 = v11[135];
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            [v13 confidence];
            *(_DWORD *)long long buf = 134349056;
            *(void *)long long v99 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLGMTPS,low NPLOI confidence,%{public}.2lf,skipped", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102328DC8);
            }
            [v13 confidence];
            int v87 = 134349056;
            *(void *)uint64_t v88 = v48;
            uint64_t v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v49);
            if (v49 != (char *)buf) {
              free(v49);
            }
          }
          uint64_t v1 = v78;
        }
        if (v7 == (id)++v12)
        {
          id v61 = [obj countByEnumeratingWithState:&v81 objects:v97 count:16];
          id v7 = v61;
          if (v61) {
            goto LABEL_12;
          }
          return;
        }
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    long long v62 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "CLGMTPS,NPLOI,received nil in return when fetching", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    LOWORD(v87) = 0;
  }
  long long v74 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchNPLOI]_block_invoke", "%s\n", v74);
  if (v74 != (char *)buf) {
LABEL_70:
  }
    free(v74);
}

double sub_1014A801C(uint64_t a1)
{
  if (sub_1000E6DB4(a1 + 32) && *(double *)(a1 + 108) >= 0.0) {
    return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 108));
  }
  else {
    return -1.0;
  }
}

void sub_1014A838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_1014A87C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014A8864(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)long long buf = 136446466;
      long long v11 = v9;
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLGMTPS,TrackRun,Failed to remove subscription for,%{public}s,%{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      id v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService removeTrackRunSubscriptionForType:nploiIndex:]_block_invoke", "%s\n");
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    double v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      id v6 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        id v6 = (void *)*v6;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLGMTPS,TrackRun,Successfully removed subscription for,%{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      id v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService removeTrackRunSubscriptionForType:nploiIndex:]_block_invoke", "%s\n");
LABEL_24:
      if (v7 != buf) {
        free(v7);
      }
    }
  }
}

void sub_1014A9080(uint64_t a1, void *a2)
{
  uint64_t v4 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) != 3) {
    sub_1014BBB18((uint64_t **)(*(void *)(a1 + 32) + 368), v4);
  }
  double v5 = (double *)(*(void *)(a1 + 32) + 224);
  double v6 = *(double *)(a1 + 40);
  double v7 = *(double *)(a1 + 48);
  [objc_msgSend(a2, "latLng") lat];
  double v9 = v8;
  [objc_msgSend(a2, "latLng") lng];
  long double v11 = sub_1000F1648(v5, v6, v7, v9, v10, 0.0);
  [objc_msgSend(a2, "latLng") lat];
  uint64_t v13 = v12;
  [objc_msgSend(a2, "latLng") lng];
  uint64_t v15 = v14;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = (uint64_t **)(*(void *)(a1 + 32) + 368);
  *(_DWORD *)long long buf = *(_DWORD *)(a1 + 56);
  *(void *)int v86 = v13;
  *(void *)&v86[8] = v15;
  *(long double *)&v86[16] = v11;
  *(void *)&v86[24] = v17;
  uint64_t v87 = v18;
  *(CFAbsoluteTime *)uint64_t v88 = Current;
  sub_1014BC140(v19, (int *)buf);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  int v20 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
  {
    int v21 = *(_DWORD *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v22 = *(void *)(a1 + 48);
    [objc_msgSend(a2, "latLng") lat];
    uint64_t v25 = v24;
    [objc_msgSend(a2, "latLng") lng];
    uint64_t v27 = v26;
    uint64_t v28 = sub_100178BF0(*(void *)(a1 + 32) + 368, v4);
    uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 384);
    *(_DWORD *)long long buf = 67241985;
    *(_DWORD *)&uint8_t buf[4] = v21;
    *(_WORD *)int v86 = 2049;
    *(void *)&v86[2] = v23;
    *(_WORD *)&v86[10] = 2049;
    *(void *)&v86[12] = v22;
    *(_WORD *)&v86[20] = 2049;
    *(void *)&v86[22] = v25;
    *(_WORD *)&v86[30] = 2049;
    uint64_t v87 = v27;
    *(_WORD *)uint64_t v88 = 2050;
    *(long double *)&v88[2] = v11;
    __int16 v89 = 2050;
    uint64_t v90 = v28;
    __int16 v91 = 2050;
    uint64_t v92 = v29;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "CLGMTPS,stored coarse location for type,%{public}d,orig,%{private}.7lf,%{private}.7lf,coarse,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,sizeForType,%{public}ld,totalSize,%{public}ld", buf, 0x4Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v53 = *(_DWORD *)(a1 + 56);
    uint64_t v55 = *(void *)(a1 + 40);
    uint64_t v54 = *(void *)(a1 + 48);
    [objc_msgSend(a2, "latLng") lat];
    uint64_t v57 = v56;
    [objc_msgSend(a2, "latLng") lng];
    uint64_t v59 = v58;
    uint64_t v60 = sub_100178BF0(*(void *)(a1 + 32) + 368, v4);
    uint64_t v61 = *(void *)(*(void *)(a1 + 32) + 384);
    int v69 = 67241985;
    BOOL v70 = v53;
    __int16 v71 = 2049;
    uint64_t v72 = v55;
    __int16 v73 = 2049;
    uint64_t v74 = v54;
    __int16 v75 = 2049;
    uint64_t v76 = v57;
    __int16 v77 = 2049;
    uint64_t v78 = v59;
    __int16 v79 = 2050;
    long double v80 = v11;
    __int16 v81 = 2050;
    uint64_t v82 = v60;
    __int16 v83 = 2050;
    uint64_t v84 = v61;
    long long v62 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v62);
    if (v62 != (char *)buf) {
      free(v62);
    }
  }
  if (sub_1014A9A5C(a1 + 60) && !*v4)
  {
    double v30 = (uint64_t **)(*(void *)(a1 + 32) + 368);
    *(_DWORD *)long long buf = 5;
    sub_1014BBB18(v30, (int *)buf);
    id v31 = (uint64_t **)(*(void *)(a1 + 32) + 368);
    *(_DWORD *)long long buf = 5;
    *(void *)int v86 = v13;
    *(void *)&v86[8] = v15;
    *(long double *)&v86[16] = v11;
    *(void *)&v86[24] = v17;
    uint64_t v87 = v18;
    *(CFAbsoluteTime *)uint64_t v88 = Current;
    sub_1014BC140(v31, (int *)buf);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    long long v32 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "CLGMTPS,stored coarse location for SE", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      LOWORD(v69) = 0;
      long long v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v66);
      if (v66 != (char *)buf) {
        free(v66);
      }
    }
  }
  if (sub_1014A9AA4(a1 + 60) && *v4 == 4)
  {
    long long v33 = (uint64_t **)(*(void *)(a1 + 32) + 368);
    *(_DWORD *)long long buf = 6;
    sub_1014BBB18(v33, (int *)buf);
    long long v34 = (uint64_t **)(*(void *)(a1 + 32) + 368);
    *(_DWORD *)long long buf = 6;
    *(void *)int v86 = v13;
    *(void *)&v86[8] = v15;
    *(long double *)&v86[16] = v11;
    *(void *)&v86[24] = v17;
    uint64_t v87 = v18;
    *(CFAbsoluteTime *)uint64_t v88 = Current;
    sub_1014BC140(v34, (int *)buf);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    long long v35 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "CLGMTPS,stored coarse location for Tourist SE", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      LOWORD(v69) = 0;
      long long v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v65);
      if (v65 != (char *)buf) {
        free(v65);
      }
    }
  }
  if (sub_1008A3618()) {
    BOOL v36 = *(unsigned char *)(*(void *)(a1 + 32) + 168) != 0;
  }
  else {
    BOOL v36 = 0;
  }
  sub_1000C7F88(buf);
  LOBYTE(v69) = 0;
  if (sub_1000D2988(*(uint64_t *)buf, "EnableTrackRunPrecaching", (BOOL *)&v69)) {
    BOOL v37 = (_BYTE)v69 != 0;
  }
  else {
    BOOL v37 = v36;
  }
  if (*(void *)v86) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v86);
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  unsigned int v38 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 168);
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v37;
    *(_WORD *)int v86 = 1026;
    *(_DWORD *)&v86[2] = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRun,EnableTrackRunPrecaching,%{public}d,fIsTrackPrecachingEnabled,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v63 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 168);
    int v69 = 67240448;
    BOOL v70 = v37;
    __int16 v71 = 1026;
    LODWORD(v72) = v63;
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:]_block_invoke", "%s\n", v64);
    if (v64 != (char *)buf) {
      free(v64);
    }
  }
  if (v37)
  {
    unsigned int v40 = *(void **)(a1 + 32);
    uint64_t v41 = *(unsigned int *)(a1 + 56);
    [objc_msgSend(a2, "latLng") lat];
    double v43 = v42;
    [objc_msgSend(a2, "latLng") lng];
    double v45 = v44;
    long long v46 = *(_OWORD *)(a1 + 204);
    v67[8] = *(_OWORD *)(a1 + 188);
    v67[9] = v46;
    int v68 = *(_DWORD *)(a1 + 220);
    long long v47 = *(_OWORD *)(a1 + 140);
    v67[4] = *(_OWORD *)(a1 + 124);
    v67[5] = v47;
    long long v48 = *(_OWORD *)(a1 + 172);
    v67[6] = *(_OWORD *)(a1 + 156);
    v67[7] = v48;
    long long v49 = *(_OWORD *)(a1 + 76);
    v67[0] = *(_OWORD *)(a1 + 60);
    v67[1] = v49;
    long long v50 = *(_OWORD *)(a1 + 108);
    v67[2] = *(_OWORD *)(a1 + 92);
    v67[3] = v50;
    [v40 addGeoMapDataSubscriptionForType:v41 latitude:v67 longitude:*(unsigned int *)(a1 + 224) config:v43 nploiIndex:v45];
  }
  if (*v4 <= 2) {
    [*(id *)(a1 + 32) fetchCoarseLocationForNextLOI:];
  }
  uint64_t v51 = *(void *)(a1 + 32);
  if (*(void *)(v51 + 688))
  {
    [(id)v51 setNewCriteria:*(unsigned int *)(v51 + 348)];
    uint64_t v51 = *(void *)(a1 + 32);
  }
  unsigned int v52 = *(id **)(v51 + 800);
  if (v52) {
    sub_100DEE0B0(v52);
  }
}

void sub_1014A9A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  if (a44) {
    sub_1000DB0A0(a44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014A9A5C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 5)) {
    return *(unsigned __int8 *)(a1 + 6) != 0;
  }
  if (*(unsigned char *)(a1 + 6)) {
    return 1;
  }
  sub_100103240();
  return sub_1000B5AD4() == 115;
}

uint64_t sub_1014A9AA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 7)) {
    return *(unsigned __int8 *)(a1 + 8) != 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 1;
  }
  sub_100103240();
  return sub_1000B5AD4() == 115;
}

void sub_1014AA2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014AA368(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    double v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      double v9 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        double v9 = (void *)*v9;
      }
      *(_DWORD *)long long buf = 136446466;
      long double v11 = v9;
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLGMTPS,TrackRun,Subscription failed for,%{public}s,%{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      double v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService addGeoMapDataSubscriptionForType:latitude:longitude:config:nploiIndex:]_block_invoke", "%s\n");
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    double v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        double v6 = (void *)*v6;
      }
      *(_DWORD *)long long buf = 136446210;
      long double v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRun,Subscription successfully added for,%{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      double v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService addGeoMapDataSubscriptionForType:latitude:longitude:config:nploiIndex:]_block_invoke", "%s\n");
LABEL_24:
      if (v7 != buf) {
        free(v7);
      }
    }
  }
}

void sub_1014AAADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_1014AC9D8(_Unwind_Exception *a1)
{
}

void sub_1014ACA90(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a3;
  double v6 = &qword_102419000;
  double v7 = &qword_102419000;
  if (a3)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    double v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349571;
      *(void *)&uint8_t buf[4] = [v3 code];
      __int16 v115 = 2114;
      *(void *)v116 = [v3 domain];
      *(_WORD *)&v116[8] = 2113;
      *(void *)&v116[10] = [v3 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#Warning,CLMM,CLGMTPS,preloadTiles reported error,%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      *(_DWORD *)std::string __p = 134349571;
      *(void *)&__p[4] = [v3 code];
      __int16 v84 = 2114;
      *(void *)uint64_t v85 = [v3 domain];
      *(_WORD *)&v85[8] = 2113;
      *(void *)&_OWORD v85[10] = [v3 localizedDescription];
      int v63 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v63);
      if (v63 != buf) {
        free(v63);
      }
    }
  }
  double v10 = (int *)(a1 + 72);
  int v9 = *(_DWORD *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 32) + 616;
  int v12 = *(unsigned __int8 *)(a1 + 84);
  BOOL v13 = a2 > 0 && v3 == 0;
  uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 648);
  if (v13) {
    ++v14;
  }
  *(void *)(*(void *)(a1 + 32) + 64_Block_object_dispose(&STACK[0x310], 8) = v14;
  BOOL v13 = v12 == 0;
  uint64_t v15 = 48;
  if (v13) {
    uint64_t v15 = 40;
  }
  *(void *)(v11 + v15) += a2;
  uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 672);
  if ((v9 & 0xFFFFFFFD) == 4) {
    ++v16;
  }
  *(void *)(*(void *)(a1 + 32) + 672) = v16;
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 680);
  if (v9 == 3) {
    ++v17;
  }
  *(void *)(*(void *)(a1 + 32) + 680) = v17;
  uint64_t v18 = (uint64_t **)(*(void *)(a1 + 32) + 728);
  for (i = *(uint64_t **)(*(void *)(a1 + 32) + 736); i; i = (uint64_t *)*i)
  {
    int v20 = *((_DWORD *)i + 8);
    if (v9 >= v20)
    {
      if (v20 >= v9) {
        goto LABEL_24;
      }
      ++i;
    }
  }
  *(void *)long long buf = a1 + 72;
  sub_1000FEE0C(v18, (int *)(a1 + 72), (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = 0;
LABEL_24:
  double v21 = (sub_10016C458() - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (a2 > 0)
  {
    uint64_t v22 = (uint64_t **)(*(void *)(a1 + 32) + 728);
    *(void *)long long buf = a1 + 72;
    uint64_t v23 = sub_1000FEE0C(v22, (int *)(a1 + 72), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    *((double *)v23 + 5) = v21 + *((double *)v23 + 5);
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  uint64_t v24 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = *v10;
    if (v25 > 6) {
      uint64_t v26 = "Unknown";
    }
    else {
      uint64_t v26 = off_102328EF0[v25];
    }
    sub_100134750(__p, v26);
    __int16 v75 = v3;
    int v78 = a2;
    if (v85[9] >= 0) {
      uint64_t v27 = __p;
    }
    else {
      uint64_t v27 = *(unsigned char **)__p;
    }
    int v28 = *(_DWORD *)(a1 + 76);
    double Current = CFAbsoluteTimeGetCurrent();
    double v30 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v31 = *(unsigned __int8 *)(a1 + 84);
    uint64_t v32 = *(void *)(*(void *)(a1 + 56) + 8);
    int v34 = *(_DWORD *)(v32 + 56);
    int v33 = *(_DWORD *)(v32 + 60);
    int v35 = *(_DWORD *)(v32 + 52);
    uint64_t v37 = *(void *)(v32 + 64);
    uint64_t v36 = *(void *)(v32 + 72);
    uint64_t v38 = *(void *)(a1 + 32);
    uint64_t v64 = *(void *)(v38 + 648);
    uint64_t v65 = *(void *)(v38 + 656);
    uint64_t v67 = v36;
    uint64_t v69 = *(void *)(v38 + 664);
    uint64_t v71 = *(void *)(v38 + 672);
    uint64_t v73 = *(void *)(v38 + 680);
    v80[0] = (void *)(a1 + 72);
    int v39 = sub_1000FEE0C((uint64_t **)(v38 + 728), (int *)(a1 + 72), (uint64_t)&unk_101D0B290, (_DWORD **)v80)[5];
    *(_DWORD *)long long buf = 136450563;
    *(void *)&uint8_t buf[4] = v27;
    __int16 v115 = 1026;
    *(_DWORD *)v116 = v28;
    *(_WORD *)&v116[4] = 2050;
    *(void *)&v116[6] = vabdd_f64(Current, v30);
    *(_WORD *)&v116[14] = 1026;
    *(_DWORD *)&v116[16] = v78;
    __int16 v117 = 1026;
    BOOL v118 = v75 != 0;
    __int16 v119 = 1026;
    int v120 = v31;
    __int16 v121 = 1026;
    int v122 = v33;
    __int16 v123 = 1026;
    int v124 = v35;
    __int16 v125 = 1026;
    int v126 = v34;
    __int16 v127 = 2049;
    uint64_t v128 = v37;
    __int16 v129 = 2049;
    uint64_t v130 = v67;
    __int16 v131 = 2050;
    uint64_t v132 = v64;
    __int16 v133 = 2050;
    uint64_t v134 = v65;
    __int16 v135 = 2050;
    uint64_t v136 = v69;
    __int16 v137 = 2050;
    uint64_t v138 = v71;
    __int16 v139 = 2050;
    uint64_t v140 = v73;
    __int16 v141 = 2050;
    double v142 = v21;
    __int16 v143 = 2050;
    uint64_t v144 = v39;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "CLGMTPS,preloadTiles returned,type,%{public}s,section,%{public}d,after,%{public}.1lf,s,tileCount,%{public}d,error,%{public}d,building,%{public}d,spiral,%{public}d,rowcol,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,successfulCount,%{public}ld,totalRoad,%{public}ld,totalBuilding,%{public}ld,totalTouristSections,%{public}ld,totalNPLOISections,%{public}ld,timeTakenToDownloadMS,%{public}.3lf,actualDownloadInMS,%{public}.3lf", buf, 0x9Au);
    if ((v85[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    double v7 = &qword_102419000;
    double v6 = &qword_102419000;
    uint64_t v3 = v75;
    a2 = v78;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    sub_1014A4FEC(*(_DWORD *)(a1 + 72), v80);
    int v79 = a2;
    if (v81 >= 0) {
      long long v50 = v80;
    }
    else {
      long long v50 = (void **)v80[0];
    }
    int v51 = *(_DWORD *)(a1 + 76);
    double v52 = CFAbsoluteTimeGetCurrent();
    double v53 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v54 = *(unsigned __int8 *)(a1 + 84);
    uint64_t v55 = *(void *)(*(void *)(a1 + 56) + 8);
    int v57 = *(_DWORD *)(v55 + 56);
    int v56 = *(_DWORD *)(v55 + 60);
    int v58 = *(_DWORD *)(v55 + 52);
    uint64_t v59 = *(void *)(v55 + 64);
    uint64_t v72 = *(void *)(v55 + 72);
    uint64_t v60 = *(void *)(a1 + 32);
    uint64_t v66 = *(void *)(v60 + 648);
    uint64_t v68 = v59;
    uint64_t v70 = *(void *)(v60 + 656);
    uint64_t v74 = *(void *)(v60 + 664);
    uint64_t v76 = *(void *)(v60 + 672);
    uint64_t v77 = *(void *)(v60 + 680);
    uint64_t v82 = (_DWORD *)(a1 + 72);
    uint64_t v61 = sub_1000FEE0C((uint64_t **)(v60 + 728), v10, (uint64_t)&unk_101D0B290, &v82)[5];
    *(_DWORD *)std::string __p = 136450563;
    *(void *)&__p[4] = v50;
    __int16 v84 = 1026;
    *(_DWORD *)uint64_t v85 = v51;
    *(_WORD *)&v85[4] = 2050;
    *(void *)&v85[6] = vabdd_f64(v52, v53);
    *(_WORD *)&v85[14] = 1026;
    *(_DWORD *)&v85[16] = v79;
    __int16 v86 = 1026;
    BOOL v87 = v3 != 0;
    __int16 v88 = 1026;
    int v89 = v54;
    __int16 v90 = 1026;
    int v91 = v56;
    __int16 v92 = 1026;
    int v93 = v58;
    __int16 v94 = 1026;
    int v95 = v57;
    __int16 v96 = 2049;
    uint64_t v97 = v68;
    __int16 v98 = 2049;
    uint64_t v99 = v72;
    __int16 v100 = 2050;
    uint64_t v101 = v66;
    __int16 v102 = 2050;
    uint64_t v103 = v70;
    __int16 v104 = 2050;
    uint64_t v105 = v74;
    __int16 v106 = 2050;
    uint64_t v107 = v76;
    __int16 v108 = 2050;
    uint64_t v109 = v77;
    __int16 v110 = 2050;
    double v111 = v21;
    __int16 v112 = 2050;
    long long v113 = v61;
    long long v62 = (char *)_os_log_send_and_compose_impl();
    if (v81 < 0) {
      operator delete(v80[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v62);
    double v7 = &qword_102419000;
    double v6 = &qword_102419000;
    if (v62 != buf) {
      free(v62);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 212) = 0;
  unsigned int v40 = *(void **)(a1 + 32);
  uint64_t v41 = (_xpc_activity_s *)v40[86];
  if (v41)
  {
    int v42 = *(_DWORD *)(a1 + 76);
    if (v42 != *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      int v43 = *(_DWORD *)(a1 + 80);
      if (v43 != 1 && (!v42 || v42 % v43))
      {
        [v40 downloadTilesOnXPCFire];
        return;
      }
    }
    if (*v10 != 4)
    {
      [v40 storeDataInPersistentStore];
      uint64_t v41 = *(_xpc_activity_s **)(*(void *)(a1 + 32) + 688);
    }
    if (xpc_activity_set_state(v41, 5))
    {
      double v44 = *(_DWORD **)(a1 + 32);
      if (v44[88] != v44[87]) {
        [v44 setNewCriteria:];
      }
      return;
    }
    if (v6[134] != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    long long v47 = v7[135];
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(*(void *)(a1 + 32) + 688));
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = state;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "CLGMTPS,failed to mark activity as Done,XPC error,currentState,%{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v6[134] != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      xpc_activity_state_t v49 = xpc_activity_get_state(*(xpc_activity_t *)(*(void *)(a1 + 32) + 688));
      *(_DWORD *)std::string __p = 134349056;
      *(void *)&__p[4] = v49;
      long long v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v46);
      if (v46 != buf) {
LABEL_64:
      }
        free(v46);
    }
  }
  else
  {
    if (v6[134] != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    double v45 = v7[135];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "CLGMTPS,failed to mark activity as Done,activity does not exist", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v6[134] != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      *(_WORD *)std::string __p = 0;
      long long v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:]_block_invoke", "%s\n", v46);
      if (v46 != buf) {
        goto LABEL_64;
      }
    }
  }
}

void sub_1014AD5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1014AD998(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, double a7)
{
  BOOL result = sub_1014B9AF0(a1, a2, 1);
  if (result)
  {
    if (a5) {
      BOOL v13 = result + 9;
    }
    else {
      BOOL v13 = result + 6;
    }
    sub_1014BAABC((uint64_t)result, (uint64_t)v13, a6);
    int v14 = sub_1014BAD38((uint64_t)v13, a3, a4);
    uint64_t v15 = &v14;
    BOOL result = sub_1000FEE0C(v13, &v14, (uint64_t)&unk_101D0B290, &v15);
    *((double *)result + 5) = a7;
  }
  return result;
}

id sub_1014ADBA0(uint64_t a1, int a2)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  uint64_t v4 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)long long buf = 67241217;
    int v39 = v5;
    __int16 v40 = 1026;
    int v41 = a2;
    __int16 v42 = 2049;
    uint64_t v43 = v6;
    __int16 v44 = 2049;
    uint64_t v45 = v7;
    __int16 v46 = 1026;
    int v47 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGMTPS,preloadWithSECheck,section,%{public}d,sigEnv,%{public}d,LL,%{private}.8lf,%{private}.8lf,loiType,%{public}d", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v20 = *(_DWORD *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 64);
    uint64_t v22 = *(void *)(a1 + 72);
    int v23 = *(_DWORD *)(a1 + 104);
    int v28 = 67241217;
    int v29 = v20;
    __int16 v30 = 1026;
    int v31 = a2;
    __int16 v32 = 2049;
    uint64_t v33 = v21;
    __int16 v34 = 2049;
    uint64_t v35 = v22;
    __int16 v36 = 1026;
    int v37 = v23;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService preloadTilesAPICallForSectionWithSECheck:sectionDownloadRadius:maxSectionIndex:building:matcherLOIType:config:completionHandler:]_block_invoke", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if ((a2 - 3) > 1) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  long long v9 = *(_OWORD *)(a1 + 64);
  v27[0] = *(_OWORD *)(a1 + 48);
  v27[1] = v9;
  v27[2] = *(_OWORD *)(a1 + 80);
  double v10 = *(double *)(a1 + 96);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 276);
  uint64_t v13 = *(unsigned int *)(a1 + 104);
  uint64_t v12 = *(unsigned int *)(a1 + 108);
  long long v14 = *(_OWORD *)(a1 + 128);
  v25[0] = *(_OWORD *)(a1 + 112);
  v25[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 192);
  v25[4] = *(_OWORD *)(a1 + 176);
  v25[5] = v15;
  long long v16 = *(_OWORD *)(a1 + 160);
  v25[2] = *(_OWORD *)(a1 + 144);
  v25[3] = v16;
  int v26 = *(_DWORD *)(a1 + 272);
  long long v17 = *(_OWORD *)(a1 + 256);
  v25[8] = *(_OWORD *)(a1 + 240);
  v25[9] = v17;
  long long v18 = *(_OWORD *)(a1 + 224);
  v25[6] = *(_OWORD *)(a1 + 208);
  v25[7] = v18;
  return [*(id *)(a1 + 32) preloadTilesAPICallForSection:v27 sectionDownloadRadius:v12 maxSectionIndex:v11 building:v13 matcherLOIType:v25 config:*(void *)(a1 + 40) completionHandler:v10];
}

void sub_1014AE5C0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (uint64_t *)v1[9];
  [v1 universe];

  sub_1014AE620(v2);
}

void sub_1014AE620(uint64_t *a1)
{
  uint64_t v13 = a1;
  (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  __int16 v15 = 256;
  sub_1014B9724((uint64_t)a1);
  uint64_t v2 = a1[11];
  if (v2)
  {
    if (sub_1004D5EE4(v2))
    {
      (*(void (**)(uint64_t))(*(void *)a1[11] + 936))(a1[11]);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      uint64_t v3 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        BOOL v4 = sub_1004D5EE4(a1[11]);
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGMTPS,pull,persistent store refreshed,empty,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        BOOL v10 = sub_1004D5EE4(a1[11]);
        int v17 = 67240192;
        BOOL v18 = v10;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPersistentStoreData::readPersistentStoreData(id<CLIntersiloUniverse>, const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, double &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    sub_1000E9354(v12);
    if (sub_100012960(a1[11], "CLGeoMapTilesPreloaderService", v12))
    {
      if (!sub_1004D5EE4((uint64_t)v12)) {
        sub_1004CFF34((uint64_t)v12);
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v5 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLGMTPS,pull,no data in persistent store in top level nvp", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_32:
        LOWORD(v17) = 0;
        long long v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPersistentStoreData::readPersistentStoreData(id<CLIntersiloUniverse>, const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, double &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
LABEL_35:
        sub_10013F3C4(v12);
        goto LABEL_36;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v8 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLGMTPS,pull,no data in persistent store", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_32;
      }
    }
    dispatch_once(&qword_102419430, &stru_102328DC8);
    goto LABEL_32;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  uint64_t v6 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLGMTPS,invalid persistent store pointer", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    LOWORD(v17) = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLPersistentStoreData::readPersistentStoreData(id<CLIntersiloUniverse>, const CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig &, double &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
LABEL_36:
  if (HIBYTE(v15))
  {
    if ((_BYTE)v15) {
      pthread_mutex_unlock(v14);
    }
    else {
      (*(void (**)(uint64_t *))(*v13 + 24))(v13);
    }
  }
}

void sub_1014B05F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  a23 = &a39;
  sub_1000A7B4C((void ***)&a23);
  sub_10013F3C4(&a42);
  sub_1019DB560((uint64_t)&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B0A10(uint64_t *a1, double a2)
{
  double v46 = a2;
  __int16 v44 = a1;
  (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  __int16 v45 = 256;
  sub_1014B9724((uint64_t)a1);
  if (a1[11])
  {
    sub_1000E9354(v43);
    uint64_t v3 = (uint64_t *)a1[12];
    if (v3 != a1 + 13)
    {
      while (1)
      {
        if (!(*((_DWORD *)v3 + 32) + *((_DWORD *)v3 + 26))) {
          goto LABEL_28;
        }
        uint64_t v4 = *((int *)v3 + 8);
        int v5 = "Unknown";
        if (v4 <= 6) {
          int v5 = off_102328EF0[v4];
        }
        sub_100134750(__p, v5);
        unsigned int v6 = *((_DWORD *)v3 + 8);
        BOOL v7 = v6 > 5;
        int v8 = (1 << v6) & 0x27;
        BOOL v9 = v7 || v8 == 0;
        if (v9) {
          goto LABEL_15;
        }
        sub_1000E9354(&v49);
        sub_1014BA6A0("RoadTiles", v3 + 11, (uint64_t)&v49);
        sub_1014BA6A0("BuildingTiles", v3 + 14, (uint64_t)&v49);
        BOOL v10 = v42 >= 0 ? (const char *)__p : (const char *)__p[0];
        if (sub_1004D3878((uint64_t)v43, v10, (uint64_t)&v49)) {
          break;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        uint64_t v12 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          if (v42 >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = (void **)__p[0];
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to set data for type,%{public}s", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          if (v42 >= 0) {
            long long v16 = __p;
          }
          else {
            long long v16 = (void **)__p[0];
          }
          int v47 = 136446210;
          long long v48 = v16;
          int v17 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", (const char *)v17);
          if (v17 != buf) {
            free(v17);
          }
        }
        sub_10013F3C4(&v49);
        int v11 = 0;
LABEL_25:
        if (SHIBYTE(v42) < 0) {
          operator delete(__p[0]);
        }
        if (!v11) {
          goto LABEL_106;
        }
LABEL_28:
        long long v14 = (uint64_t *)v3[1];
        if (v14)
        {
          do
          {
            __int16 v15 = v14;
            long long v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            __int16 v15 = (uint64_t *)v3[2];
            BOOL v9 = *v15 == (void)v3;
            uint64_t v3 = v15;
          }
          while (!v9);
        }
        uint64_t v3 = v15;
        if (v15 == a1 + 13) {
          goto LABEL_42;
        }
      }
      sub_10013F3C4(&v49);
LABEL_15:
      int v11 = 1;
      goto LABEL_25;
    }
LABEL_42:
    BOOL v18 = (uint64_t *)a1[15];
    if (v18 == a1 + 16)
    {
LABEL_92:
      sub_100134750(__p, "NPLOI");
      if (v42 >= 0) {
        uint64_t v35 = __p;
      }
      else {
        uint64_t v35 = (void **)__p[0];
      }
      if (sub_10016332C((uint64_t)v43, (const char *)v35, &v46))
      {
        sub_1004D3878(a1[11], "CLGeoMapTilesPreloaderService", (uint64_t)v43);
        (*(void (**)(uint64_t))(*(void *)a1[11] + 944))(a1[11]);
        sub_1004CEFA0(a1[11]);
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        __int16 v36 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          int v37 = __p;
          if (v42 < 0) {
            int v37 = (void **)__p[0];
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to set data for type,%{public}s", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          int v39 = __p;
          if (v42 < 0) {
            int v39 = (void **)__p[0];
          }
          int v49 = 136446210;
          long long v50 = v39;
          __int16 v40 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", (const char *)v40);
          if (v40 != buf) {
            free(v40);
          }
        }
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      while (1)
      {
        if (*((_DWORD *)v18 + 32) + *((_DWORD *)v18 + 26))
        {
          uint64_t v19 = *((int *)v18 + 8);
          int v20 = "Unknown";
          if (v19 <= 6) {
            int v20 = off_102328EF0[v19];
          }
          sub_100134750(buf, v20);
          if (byte_10248819F >= 0) {
            uint64_t v21 = (const std::string::value_type *)&qword_102488188;
          }
          else {
            uint64_t v21 = (const std::string::value_type *)qword_102488188;
          }
          if (byte_10248819F >= 0) {
            std::string::size_type v22 = byte_10248819F;
          }
          else {
            std::string::size_type v22 = unk_102488190;
          }
          int v23 = std::string::append(buf, v21, v22);
          long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          int64_t v42 = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf[0].__r_.__value_.__l.__data_);
          }
          sub_1000E9354(&v49);
          sub_1014BA6A0("RoadTiles", v18 + 11, (uint64_t)&v49);
          sub_1014BA6A0("BuildingTiles", v18 + 14, (uint64_t)&v49);
          if (v42 >= 0) {
            uint64_t v25 = __p;
          }
          else {
            uint64_t v25 = (void **)__p[0];
          }
          BOOL v26 = sub_1004D3878((uint64_t)v43, (const char *)v25, (uint64_t)&v49);
          if (!v26)
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102328DC8);
            }
            uint64_t v27 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
            {
              if (v42 >= 0) {
                int v28 = __p;
              }
              else {
                int v28 = (void **)__p[0];
              }
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "CLGMTPS,unable to set actualDownload data for type,%{public}s", (uint8_t *)buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102328DC8);
              }
              if (v42 >= 0) {
                int v31 = __p;
              }
              else {
                int v31 = (void **)__p[0];
              }
              int v47 = 136446210;
              long long v48 = v31;
              __int16 v32 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", (const char *)v32);
              if (v32 != buf) {
                free(v32);
              }
            }
          }
          sub_10013F3C4(&v49);
          if (SHIBYTE(v42) < 0) {
            operator delete(__p[0]);
          }
          if (!v26) {
            break;
          }
        }
        int v29 = (uint64_t *)v18[1];
        if (v29)
        {
          do
          {
            __int16 v30 = v29;
            int v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            __int16 v30 = (uint64_t *)v18[2];
            BOOL v9 = *v30 == (void)v18;
            BOOL v18 = v30;
          }
          while (!v9);
        }
        BOOL v18 = v30;
        if (v30 == a1 + 16) {
          goto LABEL_92;
        }
      }
    }
LABEL_106:
    sub_10013F3C4(v43);
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v33 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CLGMTPS,invalid persistent store pointer", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      LOWORD(__p[0]) = 0;
      __int16 v34 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPersistentStoreData::writePersistentStoreData(id<CLIntersiloUniverse>, const double)", "%s\n", (const char *)v34);
      if (v34 != buf) {
        free(v34);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
}

void sub_1014B13AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a20);
  sub_1019DB560((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1014B1794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2) {
    sub_1004CEFA0(v2);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  uint64_t v3 = (void *)(a1 + 104);
  sub_1014BB564((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  void *v3 = 0;
  v3[1] = 0;
}

uint64_t sub_1014B19AC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 96);
  uint64_t v2 = (void *)(a1 + 104);
  if (v1 == (void *)(a1 + 104)) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t v4 = (void *)v1[1];
    int v5 = v1;
    if (v4)
    {
      do
      {
        unsigned int v6 = v4;
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        unsigned int v6 = (void *)v5[2];
        BOOL v7 = *v6 == (void)v5;
        int v5 = v6;
      }
      while (!v7);
    }
    uint64_t result = (result + *((_DWORD *)v1 + 32) + *((_DWORD *)v1 + 26));
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_1014B1BF4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 96);
  uint64_t v3 = (void *)(a1 + 104);
  if (v2 == (void *)(a1 + 104)) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    if (*((_DWORD *)v2 + 8) == a2) {
      uint64_t result = (result + *((_DWORD *)v2 + 32) + *((_DWORD *)v2 + 26));
    }
    int v5 = (void *)v2[1];
    if (v5)
    {
      do
      {
        unsigned int v6 = v5;
        int v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        unsigned int v6 = (void *)v2[2];
        BOOL v7 = *v6 == (void)v2;
        uint64_t v2 = v6;
      }
      while (!v7);
    }
    uint64_t v2 = v6;
  }
  while (v6 != v3);
  return result;
}

void sub_1014B1EA4(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_100089AE0((char *)v7, (long long *)a3);
  uint64_t v21 = *(void *)(a3 + 184);
  [a4 onClientManagerNotification:v6 data:v7];
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1014B1F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1014B26F4(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6 = *a2;
  __int16 v7 = *a3;
  sub_1000E23EC(v8, (uint64_t)(a3 + 4));
  uint64_t v12 = *((void *)a3 + 13);
  memset(v13, 0, 24);
  sub_1000DA6E8(v13, *((void *)a3 + 14), *((void *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 3));
  v13[3] = *((void *)a3 + 17);
  [a4 onWifiServiceNotification:v6 data:&v7];
  char v14 = (void **)v13;
  sub_1000D7F78(&v14);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1014B27BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_1014B3250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1014B3440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1014B36B4(uint64_t a1, unsigned int *a2, long long *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return [a4 onDaemonStatusNotification:v4 data:&v6];
}

void sub_1014B490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B4B78(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_1004CE794(v8);
  uint64_t v9 = *(void *)(a3 + 16);
  [a4 onMobileAssetNotification:v6 data:v8];
  return sub_10013F3C4(v8);
}

void sub_1014B4BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1014B52AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1014B5860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1014B5884(uint64_t a1, _xpc_activity_s *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (xpc_activity_get_state(a2))
  {
    *(void *)(*(void *)(a1 + 32) + 68_Block_object_dispose(&STACK[0x310], 8) = a2;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = v6[78];
    if (!v7)
    {
      [v6 pullDataFromPersistentStore];
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = v6[78];
    }
    v6[78] = v7 + 1;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    char v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      double v10 = Current - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      double v11 = *(double *)(v9 + 616);
      double v12 = 0.0;
      int v52 = *(unsigned __int8 *)(v9 + 193);
      int v51 = *(unsigned __int8 *)(v9 + 192);
      int v50 = *(_DWORD *)(v9 + 216);
      uint64_t v49 = *(void *)(v9 + 200);
      int v47 = *(_DWORD *)(v9 + 352);
      int v48 = *(unsigned __int8 *)(v9 + 212);
      if (v11 >= 0.0)
      {
        double v12 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(v9 + 616));
        uint64_t v9 = *(void *)(a1 + 32);
      }
      uint64_t v43 = *(void *)(v9 + 624);
      uint64_t v44 = *(void *)(v9 + 632);
      uint64_t v45 = *(void *)(v9 + 640);
      uint64_t v46 = *(void *)(v9 + 648);
      unsigned int v42 = [(id)v9 getPersistentStoreDataCount];
      unsigned int v13 = [*(id *)(a1 + 32) getPersistentStoreDataCountForType:0];
      unsigned int v14 = [*(id *)(a1 + 32) getPersistentStoreDataCountForType:1];
      unsigned int v15 = [*(id *)(a1 + 32) getPersistentStoreDataCountForType:2];
      unsigned int v16 = [*(id *)(a1 + 32) getPersistentStoreDataCountForType:4];
      unsigned int v17 = [*(id *)(a1 + 32) getPersistentStoreDataCountForType:5];
      unsigned int v18 = [*(id *)(a1 + 32) getPersistentStoreDataCountForType:6];
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(v19 + 656);
      uint64_t v20 = *(void *)(v19 + 664);
      LODWORD(v19) = *(_DWORD *)(v19 + 560) == 2;
      *(_DWORD *)long long buf = 134354944;
      *(double *)int v54 = v10;
      *(_WORD *)&v54[8] = 1026;
      *(_DWORD *)uint64_t v55 = v52;
      *(_WORD *)&v55[4] = 1026;
      *(_DWORD *)int v56 = v51;
      *(_WORD *)&v56[4] = 1026;
      *(_DWORD *)int v57 = v50;
      *(_WORD *)&v57[4] = 2050;
      uint64_t v58 = v49;
      *(_WORD *)uint64_t v59 = 1026;
      *(_DWORD *)&v59[2] = v48;
      *(_WORD *)uint64_t v60 = 1026;
      *(_DWORD *)&v60[2] = v47;
      __int16 v61 = 1026;
      int v62 = state;
      __int16 v63 = 2050;
      double v64 = v11;
      __int16 v65 = 2050;
      double v66 = v12;
      __int16 v67 = 2050;
      uint64_t v68 = v43;
      __int16 v69 = 2050;
      uint64_t v70 = v44;
      __int16 v71 = 2050;
      uint64_t v72 = v45;
      __int16 v73 = 2050;
      uint64_t v74 = v46;
      __int16 v75 = 1026;
      unsigned int v76 = v42;
      __int16 v77 = 1026;
      unsigned int v78 = v13;
      __int16 v79 = 1026;
      unsigned int v80 = v14;
      __int16 v81 = 1026;
      unsigned int v82 = v15;
      __int16 v83 = 1026;
      unsigned int v84 = v16;
      __int16 v85 = 1026;
      unsigned int v86 = v17;
      __int16 v87 = 1026;
      unsigned int v88 = v18;
      __int16 v89 = 2050;
      uint64_t v90 = v21;
      __int16 v91 = 2050;
      uint64_t v92 = v20;
      __int16 v93 = 1026;
      int v94 = v19;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLGMTPS,XPC callback,%{public}.1lf,charging,%{public}d,wifi,%{public}d,lsSTate,%{public}d,battery,%{public}.1lf,reqInProgress,%{public}d,interval,%{public}d,activityState,%{public}d,startTime,%{public}.1lf,dT,%{public}.1lf,callBack,%{public}ld,intervalChng,%{public}ld,dwnldReq,%{public}ld,success,%{public}ld,store,%{public}d,home,%{public}d,work,%{public}d,school,%{public}d,tourist,%{public}d,signEnv,%{public}d,touristSignEnv,%{public}d,road,%{public}ld,bldg,%{public}ld,touristMode,%{public}d", buf, 0xBAu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      uint64_t v38 = *(double **)(a1 + 32);
      if (v38[77] >= 0.0)
      {
        vabdd_f64(CFAbsoluteTimeGetCurrent(), v38[77]);
        uint64_t v38 = *(double **)(a1 + 32);
      }
      [v38 getPersistentStoreDataCount];
      [*(id *)(a1 + 32) getPersistentStoreDataCountForType:0];
      [*(id *)(a1 + 32) getPersistentStoreDataCountForType:1];
      [*(id *)(a1 + 32) getPersistentStoreDataCountForType:2];
      [*(id *)(a1 + 32) getPersistentStoreDataCountForType:4];
      [*(id *)(a1 + 32) getPersistentStoreDataCountForType:5];
      [*(id *)(a1 + 32) getPersistentStoreDataCountForType:6];
      int v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService setUpRepeatingActivityToDownloadTiles]_block_invoke", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = Current;
    if (state == 2) {
      [*(id *)(a1 + 32) downloadTilesOnXPCFire];
    }
  }
  else
  {
    xpc_object_t v22 = xpc_activity_copy_criteria(a2);
    if (!v22) {
      xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
    }
    xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, *(int *)(*(void *)(a1 + 32) + 336));
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_NETWORK_UPLOAD_SIZE, *(int *)(*(void *)(a1 + 32) + 340));
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_EXPECTED_DURATION, *(int *)(*(void *)(a1 + 32) + 344));
    if (*(unsigned char *)(*(void *)(a1 + 32) + 112) && sub_10016CCBC())
    {
      xpc_dictionary_set_string(v22, XPC_ACTIVITY_DESIRED_MOTION_STATE, XPC_ACTIVITY_MOTION_STATE_STATIONARY);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v23 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "CLGMTPS,XPC activity,Added stationary criteria", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService setUpRepeatingActivityToDownloadTiles]_block_invoke", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 32) + 357)) {
      xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_DISK_INTENSIVE, 1);
    }
    xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
    unsigned int v25 = [*(id *)(a1 + 32) shouldUseAggressiveSettings];
    BOOL v26 = &OBJC_IVAR___CLGeoMapTilesPreloaderService_fMinimumBatterylevel;
    xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_ALLOW_BATTERY, v25);
    if (v25) {
      BOOL v26 = &OBJC_IVAR___CLGeoMapTilesPreloaderService_fMinimumBatteryLevelAggressiveMode;
    }
    uint64_t v27 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
    if (!v25) {
      uint64_t v27 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
    }
    xpc_dictionary_set_string(v22, XPC_ACTIVITY_PRIORITY, *v27);
    xpc_dictionary_set_BOOL(v22, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, v25 != 1);
    int v28 = (const char *)[(id)off_1024790A0() cStringUsingEncoding:4];
    xpc_dictionary_set_int64(v24, v28, *(int *)(*(void *)(a1 + 32) + *v26));
    xpc_dictionary_set_value(v22, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA, v24);
    *(unsigned char *)(*(void *)(a1 + 32) + 356) = v25;
    *(_DWORD *)(*(void *)(a1 + 32) + 352) = *(_DWORD *)(*(void *)(a1 + 32) + 348);
    xpc_dictionary_set_int64(v22, XPC_ACTIVITY_INTERVAL, *(int *)(*(void *)(a1 + 32) + 352));
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v29 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = *(void *)(a1 + 32);
      int v31 = *(_DWORD *)(v30 + 352);
      int v32 = *(_DWORD *)(v30 + 328);
      int v33 = *(_DWORD *)(v30 + 336);
      int v34 = *(_DWORD *)(v30 + 340);
      int v35 = *(_DWORD *)(v30 + 344);
      int v36 = *(unsigned __int8 *)(v30 + 357);
      int v37 = *(unsigned __int8 *)(v30 + 112);
      LODWORD(v30) = *(unsigned __int8 *)(v30 + 356);
      *(_DWORD *)long long buf = 67241984;
      *(_DWORD *)int v54 = v31;
      *(_WORD *)&v54[4] = 1026;
      *(_DWORD *)&v54[6] = v32;
      *(_WORD *)uint64_t v55 = 1026;
      *(_DWORD *)&v55[2] = v33;
      *(_WORD *)int v56 = 1026;
      *(_DWORD *)&v56[2] = v34;
      *(_WORD *)int v57 = 1026;
      *(_DWORD *)&v57[2] = v35;
      LOWORD(v5_Block_object_dispose(&STACK[0x310], 8) = 1026;
      *(_DWORD *)((char *)&v58 + 2) = v36;
      HIWORD(v5_Block_object_dispose(&STACK[0x310], 8) = 1026;
      *(_DWORD *)uint64_t v59 = v37;
      *(_WORD *)&v59[4] = 1026;
      *(_DWORD *)uint64_t v60 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "CLGMTPS,Setting repeating xpcActivity with interval,%{public}d,minimumBatterylevel,%{public}d,downloadSz,%{public}d,uploadSz,%{public}d,downloadTime,%{public}d,diskIntensive,%{public}d,stationary,%{public}d,aggressive,%{public}d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      __int16 v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService setUpRepeatingActivityToDownloadTiles]_block_invoke", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
    xpc_activity_set_criteria(a2, v22);
    *(void *)(*(void *)(a1 + 32) + 68_Block_object_dispose(&STACK[0x310], 8) = a2;
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = Current;
    xpc_release(v22);
    xpc_release(v24);
  }
}

void sub_1014B701C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014B785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B7BC0(uint64_t a1, int a2, int a3, double a4)
{
  int v13 = a2;
  uint64_t v4 = *(uint64_t **)(a1 + 128);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = (uint64_t **)(a1 + 120);
  while (1)
  {
    int v7 = *((_DWORD *)v4 + 8);
    if (v7 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
  if (v7 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  unsigned int v14 = &v13;
  if (a3)
  {
    uint64_t v9 = sub_1014BC7A8(v6, &v13, (uint64_t)&unk_101D0B290, &v14);
    uint64_t v10 = (uint64_t)(v9 + 5);
    double v11 = v9 + 14;
  }
  else
  {
    double v12 = sub_1014BC7A8(v6, &v13, (uint64_t)&unk_101D0B290, &v14);
    uint64_t v10 = (uint64_t)(v12 + 5);
    double v11 = v12 + 11;
  }
  return sub_1014BB708(a4, v10, v11);
}

void sub_1014B8054(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  uint64_t v6 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67174657;
    LODWORD(v43) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLGMTPS,touristMode callback,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    LODWORD(v31) = 67174657;
    DWORD1(v31) = a3;
    unsigned int v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService onLocationNotification:data:]_block_invoke", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  if (!a3) {
    return;
  }
  [*(id *)(a1 + 32) registerForMotionStateMediatorNotification];
  int v7 = *(void **)(a1 + 32);
  if (!v7)
  {
    int v41 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    goto LABEL_25;
  }
  [v7 getConfigFromMobileAssets];
  if (!BYTE3(v31))
  {
LABEL_25:
    uint64_t v8 = *(void *)(a1 + 32);
    goto LABEL_26;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if ((v38 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(v8 + 376);
    if (!v9) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 + 376;
    do
    {
      int v11 = *(_DWORD *)(v9 + 32);
      BOOL v12 = v11 < 4;
      if (v11 >= 4) {
        int v13 = (uint64_t *)v9;
      }
      else {
        int v13 = (uint64_t *)(v9 + 8);
      }
      if (!v12) {
        uint64_t v10 = v9;
      }
      uint64_t v9 = *v13;
    }
    while (*v13);
    if (v10 == v8 + 376) {
      goto LABEL_23;
    }
    if (*(int *)(v10 + 32) > 4) {
      goto LABEL_23;
    }
    BOOL v14 = sub_100829690(v10 + 40);
    uint64_t v8 = *(void *)(a1 + 32);
    if (!v14) {
      goto LABEL_23;
    }
    double v15 = sub_1000F1648((double *)(v8 + 224), *(double *)(v10 + 64), *(double *)(v10 + 72), *(double *)(a2 + 4), *(double *)(a2 + 12), 0.0);
    if (v15 >= (double)(int)v38 * 0.5)
    {
      uint64_t v8 = *(void *)(a1 + 32);
LABEL_23:
      double v16 = *(double *)(a2 + 4);
      double v17 = *(double *)(a2 + 12);
      double v18 = *(double *)(a2 + 28);
      double v19 = *(double *)(a2 + 20);
      double v20 = *(double *)(a2 + 36);
      uint64_t v21 = *(unsigned int *)(a2 + 132);
      v27[8] = v39;
      v27[9] = v40;
      int v28 = v41;
      v27[4] = v35;
      v27[5] = v36;
      v27[6] = v37;
      v27[7] = v38;
      v27[0] = v31;
      v27[1] = v32;
      v27[2] = v33;
      _OWORD v27[3] = v34;
      [(id)v8 computeCoarseLocationAndStoreForType:4 latitude:v21 longitude:v27 altitude:0xFFFFFFFFLL horizontalAccuracy:v16 verticalAccuracy:v17 referenceFrame:v18 config:v19 nploiIndex:v20];
      return;
    }
    double v23 = v15;
    *(CFAbsoluteTime *)(v10 + 80) = CFAbsoluteTimeGetCurrent();
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    xpc_object_t v24 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134283521;
      double v43 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLGMTPS,close to last location,%{private}.1lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v29 = 134283521;
      double v30 = v23;
LABEL_47:
      BOOL v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService onLocationNotification:data:]_block_invoke", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      return;
    }
    return;
  }
LABEL_26:
  sub_1014A460C(v8 + 360);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  xpc_object_t v22 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67174657;
    LODWORD(v43) = v38;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLGMTPS,touristMode not allowed,radius,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v29 = 67174657;
    LODWORD(v30) = v38;
    goto LABEL_47;
  }
}

id sub_1014B8924(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onDataProtectionNotification:*a2 data:*a3];
}

void sub_1014B8D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014B8DB8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    int v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134284035;
      *(void *)BOOL v14 = [a4 code];
      *(_WORD *)&v14[8] = 2113;
      id v15 = [a4 domain];
      __int16 v16 = 2113;
      id v17 = [a4 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLGMTPS,Workout query returned error,%{private}ld,domain,%{private}@,description,%{private}@", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      [a4 code];
      [a4 domain];
      [a4 localizedDescription];
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGeoMapTilesPreloaderService fetchWorkoutCount:]_block_invoke", "%s\n");
LABEL_23:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 32) + 760);
    *(_DWORD *)(*(void *)(a1 + 32) + 760) = [a3 count];
    if (!v8)
    {
      BOOL v12 = *(_DWORD **)(a1 + 32);
      if ((int)v12[190] >= 1 && v12[140] == 2) {
        [v12 setNewCriteria:v12[87]];
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v9 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a1 + 40);
      int v11 = *(_DWORD *)(*(void *)(a1 + 32) + 760);
      *(_DWORD *)long long buf = 67240705;
      *(_DWORD *)BOOL v14 = v10;
      *(_WORD *)&uint64_t v14[4] = 1025;
      *(_DWORD *)&v14[6] = v11;
      LOWORD(v15) = 1025;
      *(_DWORD *)((char *)&v15 + 2) = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLGMTPS,Workout query successful,workouts in past,%{public}d,days,count,%{private}d,prevCount,%{private}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGeoMapTilesPreloaderService fetchWorkoutCount:]_block_invoke", "%s\n");
      goto LABEL_23;
    }
  }
}

void sub_1014B964C(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *v2);
  _Unwind_Resume(a1);
}

void *sub_1014B9664(void *a1)
{
  uint64_t v2 = sub_100513074(a1, "CLGeoMapTilesPreloaderService", 1, 1);
  sub_101171D90(v2 + 16);
  sub_100134750(__p, "CLGMTPSPersistentDataOSTransaction");
  sub_100DEE064(a1 + 7, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  a1[13] = 0;
  a1[11] = 0;
  a1[12] = a1 + 13;
  a1[17] = 0;
  a1[16] = 0;
  a1[14] = 0;
  a1[15] = a1 + 16;
  return a1;
}

void sub_1014B96F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10051310C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1014B9724(uint64_t result)
{
  if (!*(void *)(result + 88)) {
    operator new();
  }
  return result;
}

void sub_1014B9960(_Unwind_Exception *exception_object)
{
}

void sub_1014B998C(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  int v11 = 0;
  uint64_t v12 = 0;
  int v10 = &v11;
  uint64_t v2 = (void *)(a1 + 56);
  uint64_t v3 = (void *)(a1 + 48);
  sub_1000F5BB0(a1 + 48, *(void **)(a1 + 56));
  uint64_t v4 = v11;
  *(v2 - 1) = &v11;
  *uint64_t v2 = v4;
  uint64_t v5 = v12;
  v2[1] = v12;
  if (v5)
  {
    _DWORD v4[2] = v2;
    int v10 = &v11;
    int v11 = 0;
    uint64_t v12 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    void *v3 = v2;
  }
  sub_1000F5BB0((uint64_t)&v10, v4);
  int v11 = 0;
  uint64_t v12 = 0;
  int v10 = &v11;
  int v7 = *(void **)(a1 + 80);
  uint64_t v6 = (void *)(a1 + 80);
  sub_1000F5BB0((uint64_t)(v6 - 1), v7);
  int v8 = v11;
  *(v6 - 1) = v10;
  *uint64_t v6 = v8;
  uint64_t v9 = v12;
  v6[1] = v12;
  if (v9)
  {
    v8[2] = v6;
    int v10 = &v11;
    int v11 = 0;
    uint64_t v12 = 0;
    int v8 = 0;
  }
  else
  {
    *(v6 - 1) = v6;
  }
  sub_1000F5BB0((uint64_t)&v10, v8);
}

uint64_t sub_1014B9A78(uint64_t a1)
{
  return a1;
}

uint64_t sub_1014B9AB4(uint64_t a1)
{
  return a1;
}

uint64_t **sub_1014B9AF0(uint64_t a1, int a2, int a3)
{
  int v24 = a2;
  uint64_t v5 = (uint64_t **)(a1 + 120);
  uint64_t v6 = *(uint64_t **)(a1 + 128);
  if (v6)
  {
    int v7 = *(uint64_t **)(a1 + 128);
    do
    {
      int v8 = *((_DWORD *)v7 + 8);
      if (v8 <= a2)
      {
        if (v8 >= a2) {
          goto LABEL_14;
        }
        ++v7;
      }
      int v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  if (a3)
  {
    long long v17 = 0u;
    *(void *)&long long v11 = 0;
    *((void *)&v11 + 1) = 0xBFF0000000000000;
    uint64_t v12 = v13;
    v13[0] = 0;
    v15[0] = 0;
    v15[1] = 0;
    v13[1] = 0;
    BOOL v14 = v15;
    LODWORD(v16) = a2;
    long long v18 = 0u;
    long long v19 = v11;
    double v20 = v21;
    v21[0] = 0;
    v23[0] = 0;
    v23[1] = 0;
    v21[1] = 0;
    xpc_object_t v22 = v23;
    sub_1014BC898((uint64_t **)(a1 + 120), (int *)&v16, (uint64_t)&v16);
    sub_1000F5BB0((uint64_t)&v22, v23[0]);
    sub_1000F5BB0((uint64_t)&v20, v21[0]);
    sub_1000F5BB0((uint64_t)&v14, v15[0]);
    sub_1000F5BB0((uint64_t)&v12, v13[0]);
    uint64_t v6 = *(uint64_t **)(a1 + 128);
  }
LABEL_14:
  while (v6)
  {
    int v9 = *((_DWORD *)v6 + 8);
    if (v9 <= a2)
    {
      if (v9 >= a2)
      {
        __int16 v16 = &v24;
        return sub_1014BC7A8(v5, &v24, (uint64_t)&unk_101D0B290, &v16) + 5;
      }
      ++v6;
    }
    uint64_t v6 = (uint64_t *)*v6;
  }
  return 0;
}

void sub_1014B9C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t sub_1014B9C7C(const char *a1, uint64_t a2)
{
  sub_1000E9354(v8);
  if (sub_100012960(a2, a1, v8))
  {
    if (!sub_1004D5EE4((uint64_t)v8)) {
      sub_1004CFF34((uint64_t)v8);
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136446210;
      *(void *)&buf[1] = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLGMTPS,%{public}s,no section data available for this key", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_16:
        v9[0] = 136446210;
        *(void *)&v9[1] = a1;
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void readTileSectionStatusData(const char *, const CLNameValuePair &, std::map<int, double> &)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return sub_10013F3C4(v8);
      }
LABEL_20:
      dispatch_once(&qword_102419430, &stru_102328DC8);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    uint64_t v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136446210;
      *(void *)&buf[1] = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLGMTPS,key does not exist,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  return sub_10013F3C4(v8);
}

void sub_1014BA648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)&a17;
  sub_1000A7B4C(&a29);
  sub_10013F3C4(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BA6A0(const char *a1, void *a2, uint64_t a3)
{
  sub_1000E9354(v20);
  int v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      std::to_string(&v29, *((_DWORD *)v6 + 8));
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v8 = &v29;
      }
      else {
        int v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if (!sub_10016332C((uint64_t)v20, (const char *)v8, v6 + 5))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        int v9 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          int v10 = *((_DWORD *)v6 + 8);
          *(_DWORD *)long long buf = 136446466;
          BOOL v26 = a1;
          __int16 v27 = 1026;
          int v28 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLGMTPS,%{public}s,failed to set sectionStatus for section,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          int v14 = *((_DWORD *)v6 + 8);
          int v21 = 136446466;
          xpc_object_t v22 = a1;
          __int16 v23 = 1026;
          int v24 = v14;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void storeTileSectionStatusData(const char *, const std::map<int, double> &, CLNameValuePair &)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      long long v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          uint64_t v6 = v12;
        }
        while (!v13);
      }
      uint64_t v6 = v12;
    }
    while (v12 != v5);
  }
  if (!sub_1004D3878(a3, a1, (uint64_t)v20))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    __int16 v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136446210;
      BOOL v26 = a1;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLGMTPS,failed to set sectiondata for tile type,%{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      LODWORD(v29.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)a1;
      long long v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void storeTileSectionStatusData(const char *, const std::map<int, double> &, CLNameValuePair &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  return sub_10013F3C4(v20);
}

void sub_1014BAA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1014BAABC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (uint64_t *)(a2 + 8);
  uint64_t v6 = *(uint64_t **)a2;
  double Current = CFAbsoluteTimeGetCurrent();
  if (v6 != v5)
  {
    double v8 = Current;
    do
    {
      if (vabdd_f64(*((double *)v6 + 5), v8) <= (double)a3)
      {
        BOOL v13 = (uint64_t *)v6[1];
        if (v13)
        {
          do
          {
            uint64_t v12 = v13;
            BOOL v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v12 = (uint64_t *)v6[2];
            BOOL v14 = *v12 == (void)v6;
            uint64_t v6 = v12;
          }
          while (!v14);
        }
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        int v9 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *(void *)(a2 + 16);
          int v11 = *((_DWORD *)v6 + 8);
          *(_DWORD *)long long buf = 134349312;
          uint64_t v17 = v10;
          __int16 v18 = 1026;
          int v19 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLGMTPS,tileInfo erased,size,%{public}ld,key,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102328DC8);
          }
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPersistentStoreLOITypeData::eraseAllDataNotInThisTimeIntervalFromCurrentTime(std::map<int, double> &, const int)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        uint64_t v12 = sub_1000F0A30((uint64_t **)a2, v6);
        operator delete(v6);
      }
      uint64_t v6 = v12;
    }
    while (v12 != v5);
  }
}

uint64_t sub_1014BAD38(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    if ((int)a3 <= 2 * a2) {
      uint64_t v6 = (2 * a2);
    }
    else {
      uint64_t v6 = a3;
    }
    int v7 = &qword_102419000;
    double v8 = &qword_102419000;
    int v9 = &qword_102419430;
    do
    {
      while (1)
      {
        int v10 = *((_DWORD *)v4 + 8);
        if ((int)v3 >= v10) {
          break;
        }
LABEL_9:
        uint64_t v4 = (uint64_t *)*v4;
        if (!v4) {
          return v3;
        }
      }
      if (v10 < (int)v3)
      {
        ++v4;
        goto LABEL_9;
      }
      if (v3 == v6) {
        return v6;
      }
      int v11 = v9;
      if (v7[134] != -1) {
        dispatch_once(v9, &stru_102328DC8);
      }
      uint64_t v3 = (v3 + 1);
      uint64_t v12 = v8;
      BOOL v13 = v8[135];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67240192;
        int v17 = v3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLGMTPS,iterated to getUniqueKey,key,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(v11, &stru_102328DC8);
        }
        BOOL v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "int getUniqueKeyForStorage(const std::map<int, double> &, const int, int)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v4 = *(uint64_t **)(a1 + 8);
      int v9 = v11;
      int v7 = &qword_102419000;
      double v8 = v12;
    }
    while (v4);
  }
  return v3;
}

uint64_t sub_1014BAF88(uint64_t a1, const std::string *a2, unsigned __int8 a3, uint64_t *a4)
{
  sub_1004BAEC8(v14, a2, 24);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t v6 = sub_10044F5DC(v14, (uint64_t)__p, a3);
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v7 = a4[1];
    if (v7 >= a4[2])
    {
      uint64_t v9 = sub_1016FD368(a4, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        sub_1000DC48C((unsigned char *)a4[1], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v13;
        *(_OWORD *)unint64_t v7 = v8;
      }
      uint64_t v9 = v7 + 24;
      a4[1] = v7 + 24;
    }
    a4[1] = v9;
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v14
  v14[2] = v10;
  if (v15 < 0) {
    operator delete(v14[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1014BB184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  *(void *)(v15 + _Block_object_dispose(&STACK[0x310], 8) = v16;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_1014BB1B4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1014BB24C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *sub_1014BB24C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0xE0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_1014BB2D0(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1014BB2B4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1014BB2D0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  sub_100197E58((uint64_t)(__dst + 3));
  return __dst;
}

void sub_1014BB328(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014BB344(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

BOOL sub_1014BB374(double *a1, double *a2)
{
  BOOL result = sub_1014A495C((uint64_t)a1);
  if (result)
  {
    double v5 = sub_1000F1648(a1 + 26, *a2, a2[1], *(double *)((char *)a1 + 36), *(double *)((char *)a1 + 44), 0.0);
    if (v5 > 320000.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      uint64_t v6 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134349056;
        double v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLGMTPS,user location distance from LOI,%{public}.1lf", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102328DC8);
        }
        unint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::isCoarseLOINearUserLocation(const CLCoarseLocationData &) const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1014BB564(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1014BB564(a1, *a2);
    sub_1014BB564(a1, a2[1]);
    sub_1000F5BB0((uint64_t)(a2 + 14), (void *)a2[15]);
    sub_1000F5BB0((uint64_t)(a2 + 11), (void *)a2[12]);
    operator delete(a2);
  }
}

uint64_t sub_1014BB5D0()
{
  if (qword_1024881B8 != -1) {
    dispatch_once(&qword_1024881B8, &stru_102328DE8);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_1024881C0, "_DASCTSMinBatteryLevelKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1024881B0 = result;
  }
  else
  {
    uint64_t result = qword_1024881B0;
  }
  off_1024790A0 = sub_1014BB650;
  return result;
}

uint64_t sub_1014BB650()
{
  return qword_1024881B0;
}

void sub_1014BB65C(id a1)
{
  qword_1024881C0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DuetActivityScheduler.framework/DuetActivityScheduler", 2);
}

uint64_t sub_1014BB688(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(_DWORD *)a1 = *a2;
  long long v5 = *a3;
  long long v6 = a3[1];
  *(_OWORD *)(a1 + 40) = a3[2];
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v5;
  sub_1014BC0E8((uint64_t *)(a1 + 56), (uint64_t)(a3 + 3));
  sub_1014BC0E8((uint64_t *)(a1 + 80), (uint64_t)a3 + 72);
  return a1;
}

void sub_1014BB6F0(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v2, *(void **)(v1 + 64));
  _Unwind_Resume(a1);
}

uint64_t sub_1014BB708(double a1, uint64_t a2, void *a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  long long v8 = (double *)*a3;
  unint64_t v7 = (double *)(a3 + 1);
  long long v6 = v8;
  if (v8 == v7) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    if (vabdd_f64(v6[5], Current) > a1) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    int v10 = (double *)*((void *)v6 + 1);
    if (v10)
    {
      do
      {
        int v11 = v10;
        int v10 = *(double **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        int v11 = (double *)*((void *)v6 + 2);
        BOOL v12 = *(void *)v11 == (void)v6;
        long long v6 = v11;
      }
      while (!v12);
    }
    long long v6 = v11;
  }
  while (v11 != v7);
  return result;
}

double sub_1014BB798(uint64_t a1, void *a2, double *a3, int a4)
{
  uint64_t v4 = (double *)(a2 + 1);
  long long v5 = (double *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    double v8 = -1.0;
    while (*((_DWORD *)v5 + 8) < a4)
    {
      double v9 = vabdd_f64(*a3, v5[5]);
      if (v9 > v8) {
        double v8 = v9;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v10 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *((_DWORD *)v5 + 8);
        *(_DWORD *)long long buf = 67240704;
        int v20 = v11;
        __int16 v21 = 2050;
        double v22 = v9;
        __int16 v23 = 2050;
        double v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLGMTPS,getAgeOfOldestTileInfo,road,section,%{public}d,deltaT,%{public}.1lf,dT,%{public}.1lf", buf, 0x1Cu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_18;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        goto LABEL_28;
      }
LABEL_26:
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLPersistentStoreLOITypeData::getAgeOfOldestTileInfo(const std::map<int, double> &, const CFAbsoluteTime &, const int) const", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
LABEL_18:
      BOOL v14 = (double *)*((void *)v5 + 1);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          BOOL v14 = *(double **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (double *)*((void *)v5 + 2);
          BOOL v16 = *(void *)v15 == (void)v5;
          long long v5 = v15;
        }
        while (!v16);
      }
      long long v5 = v15;
      if (v15 == v4) {
        return v8;
      }
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    BOOL v12 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *((_DWORD *)v5 + 8);
      *(_DWORD *)long long buf = 67240448;
      int v20 = v13;
      __int16 v21 = 2050;
      double v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLGMTPS,getAgeOfOldestTileInfo,skipped,section,%{public}d,dT,%{public}.1lf", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_26;
    }
LABEL_28:
    dispatch_once(&qword_102419430, &stru_102328DC8);
    goto LABEL_26;
  }
  return -1.0;
}

uint64_t sub_1014BBB18(uint64_t **a1, int *a2)
{
  long long v3 = sub_1014BBB94((uint64_t)a1, a2);
  if (v3 == v4) {
    return 0;
  }
  long long v5 = v3;
  long long v6 = v4;
  uint64_t v7 = 0;
  do
  {
    double v8 = sub_1000F0A30(a1, v5);
    operator delete(v5);
    ++v7;
    long long v5 = v8;
  }
  while (v8 != v6);
  return v7;
}

uint64_t *sub_1014BBB94(uint64_t a1, int *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  long long v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *a2;
  while (1)
  {
    int v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5) {
      break;
    }
    uint64_t v2 = v3;
LABEL_7:
    long long v3 = (uint64_t *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  uint64_t v7 = (uint64_t *)*v3;
  uint64_t result = v3;
  if (*v3)
  {
    uint64_t result = v3;
    do
    {
      int v8 = *((_DWORD *)v7 + 8);
      BOOL v9 = v8 < v4;
      if (v8 >= v4) {
        int v10 = (uint64_t **)v7;
      }
      else {
        int v10 = (uint64_t **)(v7 + 1);
      }
      if (!v9) {
        uint64_t result = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32)) {
        BOOL v12 = (uint64_t *)(v11 + 8);
      }
      else {
        BOOL v12 = (uint64_t *)v11;
      }
      uint64_t v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

void *sub_1014BBC2C@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x38uLL);
  uint64_t result = sub_1014BBC88(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1014BBC74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1014BBC88(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102328E18;
  sub_1014BBD78((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1014BBCE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1014BBCF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102328E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014BBD18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102328E18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1014BBD6C(uint64_t a1)
{
  return sub_100DEE0E0(a1 + 24);
}

void sub_1014BBD78(int a1, uint64_t a2, char *__s)
{
  sub_100134750(__p, __s);
  sub_100DEE064(a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1014BBDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014BBDE4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1014BB564(a2 + 120, *(void **)(a2 + 128));
    sub_1014BB564(a2 + 96, *(void **)(a2 + 104));
    uint64_t v3 = *(void *)(a2 + 88);
    *(void *)(a2 + 8_Block_object_dispose(&STACK[0x310], 8) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    sub_100DEE0E0(a2 + 56);
    sub_10051310C(a2);
    operator delete();
  }
}

uint64_t sub_1014BBE84(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_1014BBEDC((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1014BBEC4(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1014BBEDC(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    char v5 = (uint64_t **)result;
    long long v6 = (void *)result + 1;
    do
    {
      uint64_t result = sub_1014BBF64(v5, v6, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1014BBF64(uint64_t **a1, void *a2, uint64_t a3)
{
  long long v6 = operator new(0x58uLL);
  long long v7 = *(_OWORD *)(a3 + 16);
  v6[2] = *(_OWORD *)a3;
  v6[3] = v7;
  _DWORD v6[4] = *(_OWORD *)(a3 + 32);
  *((void *)v6 + 10) = *(void *)(a3 + 48);
  int v8 = (uint64_t **)sub_1014BC000(a1, a2, &v10, (_DWORD *)v6 + 8);
  sub_1000EDF90(a1, v10, v8, (uint64_t *)v6);
  return v6;
}

void sub_1014BBFEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1014BC000(void *a1, void *a2, void *a3, _DWORD *a4)
{
  char v4 = a1 + 1;
  if (a1 + 1 != a2 && *((_DWORD *)a2 + 8) < *a4)
  {
    while (1)
    {
      uint64_t v5 = *v4;
      a2 = v4;
      if (!*v4) {
        break;
      }
      while (1)
      {
        char v4 = (void *)v5;
        if (*(_DWORD *)(v5 + 32) >= *a4) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
        if (!v5) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    *a3 = v4;
    return a2;
  }
  long long v6 = (void *)*a2;
  if ((void *)*a1 == a2)
  {
    int v8 = a2;
  }
  else
  {
    if (v6)
    {
      long long v7 = (void *)*a2;
      do
      {
        int v8 = v7;
        long long v7 = (void *)v7[1];
      }
      while (v7);
    }
    else
    {
      BOOL v9 = a2;
      do
      {
        int v8 = (void *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        BOOL v9 = v8;
      }
      while (v10);
    }
    if (*a4 < *((_DWORD *)v8 + 8))
    {
      while (1)
      {
        uint64_t v11 = *v4;
        a2 = v4;
        if (!*v4) {
          goto LABEL_20;
        }
        while (1)
        {
          char v4 = (void *)v11;
          if (*a4 < *(_DWORD *)(v11 + 32)) {
            break;
          }
          uint64_t v11 = *(void *)(v11 + 8);
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v6)
  {
    *a3 = v8;
    return v8 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t *sub_1014BC0E8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CF398(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1014BC128(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1014BC140(uint64_t **a1, int *a2)
{
  char v4 = (char *)operator new(0x58uLL);
  int v5 = *a2;
  *((_DWORD *)v4 + _Block_object_dispose(&STACK[0x310], 8) = *a2;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 2);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 6);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 10);
  long long v6 = a1 + 1;
  long long v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        long long v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 8)) {
          break;
        }
        long long v7 = (uint64_t *)*v7;
        int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      long long v7 = (uint64_t *)v7[1];
    }
    while (v7);
    int v8 = v6 + 1;
  }
  else
  {
    int v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

void sub_1014BC1EC()
{
}

void *sub_1014BC200(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102328E68;
  result[1] = v3;
  return result;
}

uint64_t sub_1014BC248(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102328E68;
  a2[1] = v2;
  return result;
}

void sub_1014BC274(uint64_t a1, char *a2)
{
  char v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*a2) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *(unsigned char *)(v4 + 168) == 0;
  }
  if (!v5)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    long long v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRun,precaching went from enabled to disabled, remove all subscriptions.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102328DC8);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGeoMapTilesPreloaderService::registerForTrackRunEnablementNotifications::(anonymous class)::operator()(const BOOL) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    for (uint64_t i = 0; i != 5; ++i)
    {
      uint64_t v8 = dword_101E0CD10[i];
      if (v8 == 3)
      {
        uint64_t v9 = 0;
        do
        {
          [*(id *)(a1 + 8) removeTrackRunSubscriptionForType:3 nploiIndex:v9];
          uint64_t v9 = (v9 + 1);
        }
        while (v9 != 10);
      }
      else
      {
        [*(id *)(a1 + 8) removeTrackRunSubscriptionForType:v8 nploiIndex:0xFFFFFFFFLL];
      }
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  *(unsigned char *)(v4 + 16_Block_object_dispose(&STACK[0x310], 8) = v3;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102328DC8);
  }
  BOOL v10 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 168);
    *(_DWORD *)long long buf = 67109120;
    int v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLGMTPS,TrackRunEnablementNotification,fIsTrackPrecachingEnabled,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102328DC8);
    }
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGeoMapTilesPreloaderService::registerForTrackRunEnablementNotifications::(anonymous class)::operator()(const BOOL) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

uint64_t sub_1014BC5E4(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102328EC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1014BC624()
{
  return &off_102328EC8;
}

uint64_t *sub_1014BC630(uint64_t **a1, uint64_t a2)
{
  char v3 = sub_1000F0A30(a1, (uint64_t *)a2);
  sub_1000F5BB0(a2 + 112, *(void **)(a2 + 120));
  sub_1000F5BB0(a2 + 88, *(void **)(a2 + 96));
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_1014BC67C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x88uLL);
  BOOL v5 = (_DWORD *)sub_1014BC714((uint64_t)(v4 + 4), a2);
  long long v6 = a1 + 1;
  long long v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        long long v6 = (uint64_t **)v7;
        if (*v5 >= *((_DWORD *)v7 + 8)) {
          break;
        }
        long long v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      long long v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t sub_1014BC714(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(result + 24) = v3;
  *(_OWORD *)(result + _Block_object_dispose(&STACK[0x310], 8) = v2;
  *(void *)(result + 56) = *(void *)(a2 + 56);
  uint64_t v4 = (void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(result + 64) = v5;
  uint64_t v6 = result + 64;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(result + 72) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 56) = v4;
    *uint64_t v4 = 0;
    *(void *)(a2 + 72) = 0;
  }
  else
  {
    *(void *)(result + 56) = v6;
  }
  *(void *)(result + 80) = *(void *)(a2 + 80);
  uint64_t v8 = (void *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(result + 8_Block_object_dispose(&STACK[0x310], 8) = v9;
  uint64_t v10 = result + 88;
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(result + 96) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a2 + 80) = v8;
    void *v8 = 0;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    *(void *)(result + 80) = v10;
  }
  return result;
}

uint64_t **sub_1014BC7A8(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x88uLL);
    *((_DWORD *)v11 + _Block_object_dispose(&STACK[0x310], 8) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((void *)v11 + 9) = 0;
    *((void *)v11 + 10) = 0xBFF0000000000000;
    *((void *)v11 + 12) = 0;
    *((void *)v11 + 11) = v11 + 96;
    *((void *)v11 + 16) = 0;
    *((void *)v11 + 15) = 0;
    *((void *)v11 + 13) = 0;
    *((void *)v11 + 14) = v11 + 120;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1014BC898(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x88uLL);
    sub_1014BC714((uint64_t)(v10 + 4), a3);
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_1014BC958()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0CC00;
      v0[3] = unk_101E0CC10;
      v0[4] = xmmword_101E0CC20;
      v0[0] = xmmword_101E0CBE0;
      v0[1] = unk_101E0CBF0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1014BCA38(_Unwind_Exception *a1)
{
}

uint64_t sub_1014BCA50()
{
  sub_100134750(&qword_102487D50, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487D50, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487D68, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487D68, (void *)&_mh_execute_header);
  sub_100134750(&qword_102487D80, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102487D80, (void *)&_mh_execute_header);
  sub_100134750(qword_102487D98, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487D98, (void *)&_mh_execute_header);
  sub_100134750(qword_102487DB0, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487DB0, (void *)&_mh_execute_header);
  sub_100134750(qword_102487DC8, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487DC8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487DE0, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487DE0, (void *)&_mh_execute_header);
  sub_100134750(qword_102487DF8, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487DF8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487E10, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487E10, (void *)&_mh_execute_header);
  sub_100134750(qword_102487E28, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487E28, (void *)&_mh_execute_header);
  sub_100134750(qword_102487E40, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487E40, (void *)&_mh_execute_header);
  sub_100134750(qword_102487E58, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487E58, (void *)&_mh_execute_header);
  sub_100134750(qword_102487E70, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487E70, (void *)&_mh_execute_header);
  sub_100134750(qword_102487E88, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487E88, (void *)&_mh_execute_header);
  sub_100134750(qword_102487EA0, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487EA0, (void *)&_mh_execute_header);
  sub_100134750(qword_102487EB8, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487EB8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487ED0, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487ED0, (void *)&_mh_execute_header);
  sub_100134750(qword_102487EE8, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487EE8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487F00, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487F00, (void *)&_mh_execute_header);
  sub_100134750(qword_102487F18, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487F18, (void *)&_mh_execute_header);
  sub_100134750(qword_102487F30, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487F30, (void *)&_mh_execute_header);
  sub_100134750(qword_102487F48, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487F48, (void *)&_mh_execute_header);
  sub_100134750(qword_102487F60, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487F60, (void *)&_mh_execute_header);
  sub_100134750(qword_102487F78, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487F78, (void *)&_mh_execute_header);
  sub_100134750(qword_102487F90, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487F90, (void *)&_mh_execute_header);
  sub_100134750(qword_102487FA8, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487FA8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487FC0, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487FC0, (void *)&_mh_execute_header);
  sub_100134750(qword_102487FD8, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487FD8, (void *)&_mh_execute_header);
  sub_100134750(qword_102487FF0, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102487FF0, (void *)&_mh_execute_header);
  sub_100134750(qword_102488008, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488008, (void *)&_mh_execute_header);
  sub_100134750(qword_102488020, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488020, (void *)&_mh_execute_header);
  sub_100134750(qword_102488038, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488038, (void *)&_mh_execute_header);
  sub_100134750(qword_102488050, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488050, (void *)&_mh_execute_header);
  sub_100134750(qword_102488068, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488068, (void *)&_mh_execute_header);
  sub_100134750(qword_102488080, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488080, (void *)&_mh_execute_header);
  sub_100134750(qword_102488098, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488098, (void *)&_mh_execute_header);
  sub_100134750(qword_1024880B0, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024880B0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024880C8, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024880C8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024880E0, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024880E0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024880F8, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024880F8, (void *)&_mh_execute_header);
  sub_100134750(qword_102488110, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488110, (void *)&_mh_execute_header);
  sub_100134750(qword_102488128, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488128, (void *)&_mh_execute_header);
  sub_100134750(qword_102488140, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488140, (void *)&_mh_execute_header);
  sub_100134750(qword_102488158, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488158, (void *)&_mh_execute_header);
  sub_100134750(qword_102488170, "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488170, (void *)&_mh_execute_header);
  sub_100134750(&qword_102488188, "-Downloaded");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102488188, (void *)&_mh_execute_header);
}

uint64_t sub_1014BD1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v18, a3);
  sub_10065AB34((uint64_t)v17, a4);
  sub_10065AC50((uint64_t)v16, a5);
  sub_100DD5888(a1, a2, @"Kappa", 1, 4, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16);
  sub_10065ACE8(v16);
  sub_10065ABCC(v17);
  sub_10065AAB0(v18);
  *(void *)a1 = off_102328F38;
  *(void *)(a1 + 136) = -1;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = 1065353216;
  *(void *)(a1 + 200) = 0;
  sub_1000E9354(a1 + 216);
  int v14 = 0;
  int v15 = &v14;
  int v9 = sub_1001163CC(a1 + 176, &v14, (uint64_t)&unk_101D0B290, &v15);
  *(void *)((char *)v9 + 20) = -1;
  *((unsigned char *)v9 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
  int v14 = 1;
  int v15 = &v14;
  int v10 = sub_1001163CC(a1 + 176, &v14, (uint64_t)&unk_101D0B290, &v15);
  *(void *)((char *)v10 + 20) = -1;
  *((unsigned char *)v10 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
  int v14 = 2;
  int v15 = &v14;
  uint64_t v11 = sub_1001163CC(a1 + 176, &v14, (uint64_t)&unk_101D0B290, &v15);
  *(void *)((char *)v11 + 20) = -1;
  *((unsigned char *)v11 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
  int v14 = 3;
  int v15 = &v14;
  BOOL v12 = sub_1001163CC(a1 + 176, &v14, (uint64_t)&unk_101D0B290, &v15);
  *(void *)((char *)v12 + 20) = -1;
  *((unsigned char *)v12 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
  return a1;
}

void sub_1014BD3CC(_Unwind_Exception *a1)
{
  sub_10013F3C4(v3);
  sub_1000D7D80(v2);
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v4);
  }
  sub_100DD5960(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BD450(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102328FD8);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)long long buf = 136446210;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    [*(id *)(a1 + 16) UTF8String];
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKappaConfigAsset::clearOutAssetData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000E9354(buf);
  sub_1004CE798(a1 + 216, (uint64_t)buf);
  return sub_10013F3C4(buf);
}

void sub_1014BD62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014BD648(uint64_t a1)
{
  return sub_100DD8718(a1, 6, a1 + 216);
}

void sub_1014BD654(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    std::string::assign((std::string *)(a1 + 152), "");
    if (sub_1014BD8A4(a1, *(unsigned int *)(a1 + 136), *(unsigned int *)(a1 + 140), *(unsigned __int8 *)(a1 + 144)))
    {
      uint64_t v2 = *(void (**)(uint64_t))(*(void *)a1 + 120);
      v2(a1);
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    id v3 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
    {
      id v4 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)long long buf = 136446210;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s,readAssetSpecialized,asset unavailable,ignoring", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102328FD8);
      }
      [*(id *)(a1 + 16) UTF8String];
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKappaConfigAsset::readAssetSpecialized()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_1014BD8A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sub_1000E9354(v48);
  sub_1000E9354(v47);
  memset(&__s1, 0, sizeof(__s1));
  if (!*(void *)(a1 + 128))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    int v19 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
    {
      id v20 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)long long buf = 136446210;
      id v58 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s,Kappa,asset unavailable,ignoring", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_77;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    id v21 = [*(id *)(a1 + 16) UTF8String];
    int v49 = 136446210;
    id v50 = v21;
    double v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v22);
    goto LABEL_34;
  }
  sub_1000E9354(buf);
  sub_1004CE798(a1 + 216, (uint64_t)buf);
  sub_10013F3C4(buf);
  BOOL v8 = sub_100DD6DC0(a1, @"general.plist", a1 + 216);
  if ((a3 & a2) == 0xFFFFFFFF) {
    goto LABEL_66;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102328FD8);
  }
  int v9 = &qword_102419000;
  int v10 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
  {
    id v11 = [*(id *)(a1 + 16) UTF8String];
    id v12 = [[[objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl") absoluteString] UTF8String];
    *(_DWORD *)long long buf = 136447235;
    id v58 = v11;
    __int16 v59 = 1026;
    *(_DWORD *)uint64_t v60 = a2;
    *(_WORD *)&v60[4] = 1026;
    *(_DWORD *)&unsigned char v60[6] = a3;
    __int16 v61 = 1026;
    int v62 = a4;
    __int16 v63 = 2081;
    id v64 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s,finding country for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d in %{private}s", buf, 0x28u);
    int v9 = &qword_102419000;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    id v39 = [*(id *)(a1 + 16) UTF8String];
    id v40 = [[[*(id *)(a1 + 128) getLocalFileUrl] absoluteString] UTF8String];
    int v49 = 136447235;
    id v50 = v39;
    __int16 v51 = 1026;
    *(_DWORD *)int v52 = a2;
    *(_WORD *)&v52[4] = 1026;
    *(_DWORD *)&v52[6] = a3;
    __int16 v53 = 1026;
    int v54 = a4;
    __int16 v55 = 2081;
    id v56 = v40;
    int v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
    int v9 = &qword_102419000;
  }
  if (sub_100DD6DC0(a1, @"country.plist", (uint64_t)v48))
  {
    if (sub_100DD7598(a1, (uint64_t)v48, a2, a3, a4, (uint64_t)v47))
    {
      if (sub_1004D1284((uint64_t)v47, "Name", &__s1))
      {
        uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v15 = *(unsigned __int8 *)(a1 + 175);
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(a1 + 160);
        }
        if (size == v15)
        {
          if (v16 >= 0) {
            int v17 = (unsigned __int8 *)(a1 + 152);
          }
          else {
            int v17 = *(unsigned __int8 **)(a1 + 152);
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
            {
              p_s1 = &__s1;
              while (p_s1->__r_.__value_.__s.__data_[0] == *v17)
              {
                p_s1 = (std::string *)((char *)p_s1 + 1);
                ++v17;
                if (!--v13) {
                  goto LABEL_70;
                }
              }
              goto LABEL_65;
            }
            goto LABEL_70;
          }
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v17, __s1.__r_.__value_.__l.__size_))
          {
LABEL_70:
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_102328FD8);
            }
            long long v35 = v9[193];
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              id v36 = [*(id *)(a1 + 16) UTF8String];
              long long v37 = &__s1;
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v37 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)long long buf = 136446466;
              id v58 = v36;
              __int16 v59 = 2082;
              *(void *)uint64_t v60 = v37;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s, already handled %{public}s", buf, 0x16u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_77;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_102328FD8);
            }
            id v42 = [*(id *)(a1 + 16) UTF8String];
            double v43 = &__s1;
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              double v43 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            }
            int v49 = 136446466;
            id v50 = v42;
            __int16 v51 = 2082;
            *(void *)int v52 = v43;
            double v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v22);
            goto LABEL_34;
          }
        }
LABEL_65:
        std::string::operator=((std::string *)(a1 + 152), &__s1);
        sub_1004CE9EC((void *)(a1 + 216), (uint64_t)v47, 1);
        goto LABEL_66;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102328FD8);
      }
      double v30 = v9[193];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        id v31 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)long long buf = 136446978;
        id v58 = v31;
        __int16 v59 = 1026;
        *(_DWORD *)uint64_t v60 = a2;
        *(_WORD *)&v60[4] = 1026;
        *(_DWORD *)&unsigned char v60[6] = a3;
        __int16 v61 = 1026;
        int v62 = a4;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#CLConfig,%{public}s, ignoring country without name for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x1Eu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_77;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102328FD8);
      }
      id v32 = [*(id *)(a1 + 16) UTF8String];
      int v49 = 136446978;
      id v50 = v32;
      __int16 v51 = 1026;
      *(_DWORD *)int v52 = a2;
      *(_WORD *)&v52[4] = 1026;
      *(_DWORD *)&v52[6] = a3;
      __int16 v53 = 1026;
      int v54 = a4;
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v22);
LABEL_34:
      if (v22 != (char *)buf) {
        free(v22);
      }
      goto LABEL_77;
    }
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    __int16 v27 = v9[193];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)long long buf = 136446978;
      id v58 = v28;
      __int16 v59 = 1026;
      *(_DWORD *)uint64_t v60 = a2;
      *(_WORD *)&v60[4] = 1026;
      *(_DWORD *)&unsigned char v60[6] = a3;
      __int16 v61 = 1026;
      int v62 = a4;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s, no country for mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102328FD8);
      }
      id v29 = [*(id *)(a1 + 16) UTF8String];
      int v49 = 136446978;
      id v50 = v29;
      __int16 v51 = 1026;
      *(_DWORD *)int v52 = a2;
      *(_WORD *)&v52[4] = 1026;
      *(_DWORD *)&v52[6] = a3;
      __int16 v53 = 1026;
      int v54 = a4;
      BOOL v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v26);
      goto LABEL_52;
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    __int16 v23 = v9[193];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)long long buf = 136446210;
      id v58 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s, failed to load country", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102328FD8);
      }
      id v25 = [*(id *)(a1 + 16) UTF8String];
      int v49 = 136446210;
      id v50 = v25;
      BOOL v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaConfigAsset::read(int32_t, int32_t, BOOL)", "%s\n", v26);
LABEL_52:
      if (v26 != (char *)buf) {
        free(v26);
      }
      if (v8) {
        goto LABEL_67;
      }
LABEL_77:
      uint64_t v34 = 0;
      goto LABEL_78;
    }
  }
LABEL_66:
  if (!v8) {
    goto LABEL_77;
  }
LABEL_67:
  sub_100134750(__p, (char *)[*(id *)(a1 + 16) UTF8String]);
  long long v33 = (void *)sub_1000E9358(a1 + 216);
  sub_1007E7320((long long *)__p, v33);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v34 = 1;
LABEL_78:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  sub_10013F3C4(v47);
  sub_10013F3C4(v48);
  return v34;
}

void sub_1014BE404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a23);
  sub_10013F3C4(&a25);
  _Unwind_Resume(a1);
}

void sub_1014BE4B8(uint64_t a1)
{
  sub_1014BE520(a1);

  operator delete();
}

void sub_1014BE4F0(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1014BE520(uint64_t a1)
{
  *(void *)a1 = off_102328F38;
  sub_10013F3C4(a1 + 216);
  sub_1000D7D80(a1 + 176);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }

  return sub_100DD5960(a1);
}

float sub_1014BE58C(float a1, float a2)
{
  return powf((float)(a1 / -44331.0) + 1.0, 5.2559) * a2;
}

float sub_1014BE5D0(float a1, float a2)
{
  return powf((float)(a1 / -44331.0) + 1.0, -5.2559) * a2;
}

void sub_1014BE614(float a1, float a2)
{
}

float sub_1014BE664(float a1, float a2)
{
  return (float)((float)(a2 / 44331.0) / 0.19026) * powf(1.0 - (float)(a1 / 44331.0), -6.2559);
}

BOOL sub_1014BE6B4(float a1, float a2, float a3)
{
  BOOL result = 0;
  BOOL v6 = a2 < -180.0 || a2 > 180.0 || a1 < -90.0 || a1 > 90.0;
  if (!v6 && a3 > 0.0) {
    return fabsf(a1) >= 0.0000001 || fabsf(a2) >= 0.0000001;
  }
  return result;
}

uint64_t sub_1014BE728(uint64_t a1, long long *a2, double a3, double a4, double a5, double a6)
{
  *(void *)a1 = &off_102329008;
  uint64_t v11 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)v11, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    *(void *)(v11 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  if (qword_1024881C8 != -1) {
    dispatch_once(&qword_1024881C8, &stru_102329018);
  }
  *(double *)(a1 + 32) = a3;
  *(double *)(a1 + 40) = a4;
  *(double *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = a5;
  *(double *)(a1 + 56) = a6;
  return a1;
}

void sub_1014BE7E8(id a1)
{
}

void sub_1014BE83C()
{
}

uint64_t sub_1014BE864(uint64_t a1)
{
  *(void *)a1 = &off_102329008;
  uint64_t v2 = *(void **)(a1 + 64);
  *(void *)(a1 + 72) = v2;
  if (v2) {
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1014BE8C8(uint64_t a1)
{
  sub_1014BE864(a1);

  operator delete();
}

void sub_1014BE900(uint64_t a1)
{
  double v30 = 0;
  id v31 = 0;
  uint64_t v32 = 0;
  uint64_t v2 = sub_10065AD6C();
  id v3 = (void *)(a1 + 8);
  if (!sub_100660FAC(v2, (char *)(a1 + 8), &v30))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102329048);
    }
    __int16 v27 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      id v28 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        id v28 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2081;
      *(void *)&buf[20] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLAvengerZoneMonitor: no zone information is found.\", \"fZoneName\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102329048);
      }
    }
    id v29 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      if (*(char *)(a1 + 31) < 0) {
        id v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2081;
      *(void *)&buf[20] = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLAvengerZoneMonitor: no zone information is found.", "{\"msg%{public}.0s\":\"CLAvengerZoneMonitor: no zone information is found.\", \"fZoneName\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    goto LABEL_41;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102329048);
  }
  id v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 31) < 0) {
      id v3 = (void *)*v3;
    }
    *(_DWORD *)long long buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2081;
    *(void *)&buf[20] = v3;
    *(_WORD *)&buf[28] = 2049;
    *(void *)&buf[30] = (v31 - v30) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLAvengerZoneMonitor: polygon information is found.\", \"fZoneName\":%{private, location:escape_only}s, \"zones\":%{private}lu}", buf, 0x26u);
  }
  uint64_t v5 = (sqlite3_int64 *)v30;
  BOOL v6 = v31;
  if (v30 != v31)
  {
    id v7 = (char **)(a1 + 64);
    do
    {
      *(void *)&buf[32] = *v5;
      uint64_t v8 = sub_10065AD6C();
      if (sub_100661F18(v8, v5, (double *)buf, (double *)&buf[16], (double *)&buf[8], (double *)&buf[24]))
      {
        unint64_t v9 = *(void *)(a1 + 72);
        unint64_t v10 = *(void *)(a1 + 80);
        if (v9 >= v10)
        {
          unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)*v7) >> 3);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0x666666666666666) {
            sub_1001D7FD4();
          }
          unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)*v7) >> 3);
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x333333333333333) {
            unint64_t v17 = 0x666666666666666;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17) {
            __int16 v18 = (char *)sub_1002E5328(a1 + 80, v17);
          }
          else {
            __int16 v18 = 0;
          }
          int v19 = &v18[40 * v14];
          long long v20 = *(_OWORD *)buf;
          long long v21 = *(_OWORD *)&buf[16];
          *((void *)v19 + 4) = *(void *)&buf[32];
          *(_OWORD *)int v19 = v20;
          *((_OWORD *)v19 + 1) = v21;
          __int16 v23 = *(char **)(a1 + 64);
          double v22 = *(char **)(a1 + 72);
          id v24 = v19;
          if (v22 != v23)
          {
            do
            {
              long long v25 = *(_OWORD *)(v22 - 40);
              long long v26 = *(_OWORD *)(v22 - 24);
              *((void *)v24 - 1) = *((void *)v22 - 1);
              *(_OWORD *)(v24 - 24) = v26;
              *(_OWORD *)(v24 - 40) = v25;
              v24 -= 40;
              v22 -= 40;
            }
            while (v22 != v23);
            double v22 = *v7;
          }
          uint64_t v13 = v19 + 40;
          *(void *)(a1 + 64) = v24;
          *(void *)(a1 + 72) = v19 + 40;
          *(void *)(a1 + 80) = &v18[40 * v17];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          long long v11 = *(_OWORD *)buf;
          long long v12 = *(_OWORD *)&buf[16];
          *(void *)(v9 + 32) = *(void *)&buf[32];
          *(_OWORD *)unint64_t v9 = v11;
          *(_OWORD *)(v9 + 16) = v12;
          uint64_t v13 = (char *)(v9 + 40);
        }
        *(void *)(a1 + 72) = v13;
      }
      ++v5;
    }
    while (v5 != (sqlite3_int64 *)v6);
LABEL_41:
    uint64_t v5 = (sqlite3_int64 *)v30;
  }
  if (v5)
  {
    id v31 = (char *)v5;
    operator delete(v5);
  }
}

void sub_1014BED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1014BED2C(uint64_t a1, double a2, double a3)
{
  BOOL v6 = *(double *)a1 < a2 && *(double *)(a1 + 8) > a2 && *(double *)(a1 + 16) < a3 && *(double *)(a1 + 24) > a3;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102329048);
  }
  id v7 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    double v10 = *(double *)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
    v14[0] = 68291075;
    v14[1] = 0;
    __int16 v15 = 2082;
    unint64_t v16 = "";
    __int16 v17 = 1025;
    int v18 = v8;
    __int16 v19 = 2049;
    double v20 = v10;
    __int16 v21 = 2049;
    uint64_t v22 = v11;
    __int16 v23 = 2049;
    uint64_t v24 = v12;
    __int16 v25 = 2049;
    uint64_t v26 = v9;
    __int16 v27 = 2049;
    double v28 = a2;
    __int16 v29 = 2049;
    double v30 = a3;
    __int16 v31 = 1025;
    BOOL v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isInside\", \"fZoneId\":%{private}d, \"minLat\":\"%{private}f\", \"maxLat\":\"%{private}f\", \"minLon\":\"%{private}f\", \"maxLon\":\"%{private}f\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"isInsize\":%{private}hhd}", (uint8_t *)v14, 0x5Au);
  }
  return v6;
}

void sub_1014BEEB0(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

float sub_1014BEEE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)a3 = sqlite3_column_int(v5, 0);
  BOOL v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_double(v6, 1);
  id v7 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 16) = sqlite3_column_double(v7, 2);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 24) = sqlite3_column_int(v8, 3);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 2_Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_int(v9, 4);
  double v10 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 32) = sqlite3_column_int(v10, 5);
  uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 36) = sqlite3_column_int(v11, 6);
  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 40) = sqlite3_column_double(v12, 7);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(unsigned char *)(a3 + 4_Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_int(v13, 8);
  unint64_t v14 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 112) = sqlite3_column_double(v14, 9);
  __int16 v15 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 120) = sqlite3_column_double(v15, 10);
  unint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 12_Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_double(v16, 11);
  __int16 v17 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 136) = sqlite3_column_double(v17, 12);
  int v18 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 16_Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_int(v18, 13);
  __int16 v19 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 172) = sqlite3_column_int(v19, 14);
  double v20 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 176) = sqlite3_column_int(v20, 15);
  __int16 v21 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 180) = sqlite3_column_int(v21, 16);
  uint64_t v22 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 184) = sqlite3_column_int(v22, 17);
  __int16 v23 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 18_Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_int(v23, 18);
  uint64_t v24 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 192) = sqlite3_column_int(v24, 19);
  __int16 v25 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 196) = sqlite3_column_int(v25, 20);
  uint64_t v26 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 200) = sqlite3_column_int(v26, 21);
  __int16 v27 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 204) = sqlite3_column_int(v27, 22);
  double v28 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v29 = sqlite3_column_double(v28, 23);
  *(float *)(a3 + 20_Block_object_dispose(&STACK[0x310], 8) = v29;
  double v30 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(unsigned char *)(a3 + 212) = sqlite3_column_int(v30, 24) != 0;
  __int16 v31 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v32 = sqlite3_column_double(v31, 25);
  *(float *)(a3 + 216) = v32;
  long long v33 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(unsigned char *)(a3 + 220) = sqlite3_column_int(v33, 26) != 0;
  uint64_t v34 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 52) = sqlite3_column_int(v34, 27);
  long long v35 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 56) = sqlite3_column_double(v35, 28);
  id v36 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 64) = sqlite3_column_double(v36, 29);
  long long v37 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 72) = sqlite3_column_double(v37, 30);
  long long v38 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 80) = sqlite3_column_double(v38, 31);
  id v39 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 8_Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_double(v39, 32);
  id v40 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 96) = sqlite3_column_double(v40, 33);
  int v41 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 104) = sqlite3_column_double(v41, 34);
  id v42 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v43 = sqlite3_column_double(v42, 35);
  *(float *)(a3 + 144) = v43;
  uint64_t v44 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v45 = sqlite3_column_double(v44, 36);
  *(float *)(a3 + 14_Block_object_dispose(&STACK[0x310], 8) = v45;
  uint64_t v46 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v47 = sqlite3_column_double(v46, 37);
  *(float *)(a3 + 152) = v47;
  int v48 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v49 = sqlite3_column_double(v48, 38);
  *(float *)(a3 + 156) = v49;
  id v50 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float v51 = sqlite3_column_double(v50, 39);
  *(float *)(a3 + 160) = v51;
  int v52 = (sqlite3_stmt *)sub_10014D19C(*a2);
  float result = sqlite3_column_double(v52, 40);
  *(float *)(a3 + 164) = result;
  return result;
}

uint64_t sub_1014BF268(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_1014BF3D4(a1, "MobilityBoutMetricsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_102329078;
  *(void *)(a1 + 72) = off_102329140;
  *(void *)(a1 + 52_Block_object_dispose(&STACK[0x310], 8) = off_102329190;
  sub_100F03BA0((void *)(a1 + 536), 0, 0);
  sub_100F03BA0((void *)(a1 + 552), 0, 0);
  sub_100F03BA0((void *)(a1 + 568), 0, 0);
  *(unsigned char *)(a1 + 584) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  *(void *)(a1 + 160) = [[CLMobilityBoutMetricsRecorderCloudKitDelegate alloc] initWithBoutMetricsRecorderDb:a1];
  return a1;
}

void sub_1014BF3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014BF3D4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = off_1022ADB08;
  *(void *)a1 = off_102329A70;
  *(void *)(a1 + 72) = off_102329B18;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102329A70;
  *(void *)(a1 + 72) = off_102329B18;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 276) = 0;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = 0u;
  int64x2_t v13 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)(a1 + 28_Block_object_dispose(&STACK[0x310], 8) = v13;
  *(int64x2_t *)(a1 + 304) = v13;
  *(int64x2_t *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1071225242;
  *(unsigned char *)(a1 + 436) = 0;
  *(_DWORD *)(a1 + 440) = 1116213084;
  *(unsigned char *)(a1 + 444) = 0;
  *(_DWORD *)(a1 + 44_Block_object_dispose(&STACK[0x310], 8) = 12000;
  *(void *)(a1 + 456) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 464));
  *(void *)(a1 + 464) = off_1022ADB08;
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v18 = a1 + 112;
  (*(void (**)(uint64_t))(v14 + 16))(a1 + 112);
  __int16 v19 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v17 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1014BF844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_1014C53DC(v28);
  sub_1011F8AE0(v27);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1014BF8DC()
{
}

void *sub_1014BF8E4(void *a1)
{
  *a1 = off_102329A70;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102329B18;
  a1[57] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 58);
  sub_1014C53DC(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1014BF9A4(void *a1)
{
  *a1 = off_102329078;
  a1[9] = off_102329140;
  a1[66] = off_102329190;
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0;
  }

  return sub_1014BF8E4(a1);
}

void *sub_1014BFA4C(uint64_t a1)
{
  return sub_1014BF9A4((void *)(a1 - 72));
}

void *sub_1014BFA54(uint64_t a1)
{
  return sub_1014BF9A4((void *)(a1 - 528));
}

void sub_1014BFA5C(void *a1)
{
  sub_1014BF9A4(a1);

  operator delete();
}

void sub_1014BFA94(uint64_t a1)
{
  sub_1014BF9A4((void *)(a1 - 72));

  operator delete();
}

void sub_1014BFAD0(uint64_t a1)
{
  sub_1014BF9A4((void *)(a1 - 528));

  operator delete();
}

void sub_1014BFB0C(void *a1, uint64_t a2)
{
  sub_1014BFCC8(a1, a2, 0);
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_102329240);
  }
  id v3 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(_DWORD *)long long buf = 134349056;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Wrote boutMetrics to db: startTime=%{public}.2f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102329240);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMobility::BoutMetricsRecorderDb::addBoutMetrics(const BoutMetrics &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_1014BFCC8(void *a1, uint64_t a2, uint64_t a3)
{
  char v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1014BFD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014BFDA8(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1014BFDB0(void *a1)
{
  id v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v17);
  if (SHIBYTE(v18[0]) < 0)
  {
    uint64_t v12 = v17[1];
    operator delete(v17[0]);
    if (v12) {
      goto LABEL_3;
    }
  }
  else if (HIBYTE(v18[0]))
  {
LABEL_3:
    if (sub_100082064(a1 + 9))
    {
      sub_10010F274((uint64_t)v17);
      uint64_t v4 = sub_100132EFC(v18, (uint64_t)"SELECT * FROM ", 14);
      (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
      if ((v15 & 0x80u) == 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        uint64_t v6 = v15;
      }
      else {
        uint64_t v6 = (uint64_t)__p[1];
      }
      uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
      sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? and boundaryType == ? ORDER BY rowid ASC", 80);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = a1[10];
      std::stringbuf::str();
      if ((v15 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      sub_10014D518(v8, (uint64_t)v9);
    }
    int v1 = 2;
    return v1 != 2;
  }
  sub_101AB77F4(v3);
  uint64_t v13 = v16;
  uint64_t v16 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  *(void **)((char *)v17
  v18[0] = v10;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return v1 != 2;
}

void sub_1014C0308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C0388(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

BOOL sub_1014C0418(uint64_t a1)
{
  return sub_1014BFDB0((void *)(a1 - 528));
}

uint64_t sub_1014C0420(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1014C04C8(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "MobilityBoutMetricsHistory", (const char **)&off_102329280, (const std::string::value_type **)&off_1024790A8, 0);
    *(void *)(a1 + 536) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MobilityBoutMetricsHistory WHERE startTime >= ? ORDER BY startTime ASC");
    *(void *)(a1 + 544) = v3;
    *(void *)(a1 + 552) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"\t\t\tINSERT INTO MobilityBoutMetricsHistory(\t\t\t\tstartTime, endTime, stepCount, workoutType, terminationReason, numGaitMetrics, invalidGradePercentage, deviceSide, \t\t\t\twalkingSpeed, doubleSupportPercentage, stepLength, asymmetryPercentage, \t\t\t\tsegmentsRejectedByIsSwingStanceCycle, segmentsRejectedByIsNotRunning, segmentsRejectedByIsFeasibleWalkingSpeed, segmentsRejectedByIsPendular, segmentsRejectedByIsSufficientVerticalTwist, segmentsRejectedByIsCadenceConcordant, \t\t\t\twalkingSpeedRejectionStatus, doubleSupportPercentageRejectionStatus, stepLengthRejectionStatus, asymmetryPercentageRejectionStatus, userHeight, isHeightSet, userWeight, isWeightSet, \t\t\t\tboundaryType, cycleTimeMean, stepLengthEntropy, stepLengthPoincareSD1, stepLengthPoincareSD2, cycleTimeEntropy, cycleTimePoincareSD1, cycleTimePoincareSD2, stepIndexOfHarmonicityAP, stepIndexOfHarmonicityML, stepIndexOfHarmonicityVT, swingIndexOfHarmonicityAP, swingIndexOfHarmonicityML, swingIndexOfHarmonicityVT  \t\t\t) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 560) = v4;
    uint64_t result = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"UPDATE MobilityBoutMetricsHistory SET \t\t\tstartTime = ?, endTime = ?, stepCount = ?, workoutType = ?, terminationReason = ?, numGaitMetrics = ?, invalidGradePercentage = ?, deviceSide = ?, \t\t\twalkingSpeed = ?, doubleSupportPercentage = ?, stepLength = ?, asymmetryPercentage = ?, \t\t\tsegmentsRejectedByIsSwingStanceCycle = ?, segmentsRejectedByIsNotRunning = ?, segmentsRejectedByIsFeasibleWalkingSpeed = ?, segmentsRejectedByIsPendular = ?, segmentsRejectedByIsSufficientVerticalTwist = ?, segmentsRejectedByIsCadenceConcordant = ?, \t\t\twalkingSpeedRejectionStatus = ?, doubleSupportPercentageRejectionStatus = ?, stepLengthRejectionStatus = ?, asymmetryPercentageRejectionStatus = ?, userHeight = ?, isHeightSet = ?, userWeight = ?, isWeightSet = ?, boundaryType = ?, cycleTimeMean = ?, stepLengthEntropy = ?, stepLengthPoincareSD1 = ?, stepLengthPoincareSD2 = ?, cycleTimeEntropy = ?, cycleTimePoincareSD1 = ?, cycleTimePoincareSD2 = ?, stepIndexOfHarmonicityAP = ?, stepIndexOfHarmonicityML = ?, stepIndexOfHarmonicityVT = ?, swingIndexOfHarmonicityAP = ?, swingIndexOfHarmonicityML = ?, swingIndexOfHarmonicityVT = ? \t\t\tWHERE rowid = ?");
    *(void *)(a1 + 56_Block_object_dispose(&STACK[0x310], 8) = result;
    *(void *)(a1 + 576) = v5;
    *(unsigned char *)(a1 + 584) = 1;
  }
  return result;
}

uint64_t sub_1014C04C8(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "MobilityBoutMetricsHistory");
  if (result)
  {
    uint64_t v3 = "asymmetryPercentageRejectionStatus";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "MobilityBoutMetricsHistory", (uint64_t)"asymmetryPercentageRejectionStatus", (uint64_t)&v3);
  }
  return result;
}

void sub_1014C09C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_1014C0A68(uint64_t a1, uint64_t a2)
{
  if (sub_100082064(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 584) || ((*(void (**)(uint64_t))(*(void *)a1 + 112))(a1), *(unsigned char *)(a1 + 584)))
    {
      sub_100082068((void *)(a1 + 552), &v51);
      if (v51)
      {
        int v4 = (sqlite3_stmt *)sub_10014D19C(v51);
        if (sub_100055D58(v4, 1, *(double *)(a2 + 8)))
        {
          __int16 v5 = (sqlite3_stmt *)sub_10014D19C(v51);
          if (sub_100055D58(v5, 2, *(double *)(a2 + 16)))
          {
            char v6 = (sqlite3_stmt *)sub_10014D19C(v51);
            if (sub_100055B20(v6, 3, *(_DWORD *)(a2 + 24)))
            {
              char v7 = (sqlite3_stmt *)sub_10014D19C(v51);
              if (sub_10014D1A4(v7, 4, *(_DWORD *)(a2 + 28)))
              {
                uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v51);
                if (sub_10014D1A4(v8, 5, *(_DWORD *)(a2 + 32)))
                {
                  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v51);
                  if (sub_100055B20(v9, 6, *(_DWORD *)(a2 + 36)))
                  {
                    uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v51);
                    if (sub_100055D58(v10, 7, *(double *)(a2 + 40)))
                    {
                      uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(v51);
                      if (sub_10014D1A4(v11, 8, *(unsigned __int8 *)(a2 + 48)))
                      {
                        uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v51);
                        if (sub_100055D58(v12, 9, *(double *)(a2 + 112)))
                        {
                          uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v51);
                          if (sub_100055D58(v13, 10, *(double *)(a2 + 120)))
                          {
                            uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(v51);
                            if (sub_100055D58(v14, 11, *(double *)(a2 + 128)))
                            {
                              unsigned __int8 v15 = (sqlite3_stmt *)sub_10014D19C(v51);
                              if (sub_100055D58(v15, 12, *(double *)(a2 + 136)))
                              {
                                uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v51);
                                if (sub_100055B20(v16, 13, *(_DWORD *)(a2 + 168)))
                                {
                                  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(v51);
                                  if (sub_100055B20(v17, 14, *(_DWORD *)(a2 + 172)))
                                  {
                                    uint64_t v18 = (sqlite3_stmt *)sub_10014D19C(v51);
                                    if (sub_100055B20(v18, 15, *(_DWORD *)(a2 + 176)))
                                    {
                                      char v19 = (sqlite3_stmt *)sub_10014D19C(v51);
                                      if (sub_100055B20(v19, 16, *(_DWORD *)(a2 + 180)))
                                      {
                                        double v20 = (sqlite3_stmt *)sub_10014D19C(v51);
                                        if (sub_100055B20(v20, 17, *(_DWORD *)(a2 + 184)))
                                        {
                                          __int16 v21 = (sqlite3_stmt *)sub_10014D19C(v51);
                                          if (sub_100055B20(v21, 18, *(_DWORD *)(a2 + 188)))
                                          {
                                            uint64_t v22 = (sqlite3_stmt *)sub_10014D19C(v51);
                                            if (sub_100055B20(v22, 19, *(_DWORD *)(a2 + 192)))
                                            {
                                              __int16 v23 = (sqlite3_stmt *)sub_10014D19C(v51);
                                              if (sub_100055B20(v23, 20, *(_DWORD *)(a2 + 196)))
                                              {
                                                uint64_t v24 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                if (sub_100055B20(v24, 21, *(_DWORD *)(a2 + 200)))
                                                {
                                                  __int16 v25 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                  if (sub_100055B20(v25, 22, *(_DWORD *)(a2 + 204)))
                                                  {
                                                    uint64_t v26 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                    if (sub_100055D58(v26, 23, *(float *)(a2 + 208)))
                                                    {
                                                      uint64_t v27 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                      if (sub_10014D1A4(v27, 24, *(unsigned __int8 *)(a2 + 212)))
                                                      {
                                                        double v28 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                        if (sub_100055D58(v28, 25, *(float *)(a2 + 216)))
                                                        {
                                                          uint64_t v29 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                          if (sub_10014D1A4(v29, 26, *(unsigned __int8 *)(a2 + 220)))
                                                          {
                                                            double v30 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                            if (sub_10014D1A4(v30, 27, *(_DWORD *)(a2 + 52)))
                                                            {
                                                              __int16 v31 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                              if (sub_100055D58(v31, 28, *(double *)(a2 + 56)))
                                                              {
                                                                float v32 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                if (sub_100055D58(v32, 29, *(double *)(a2 + 64)))
                                                                {
                                                                  long long v33 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                  if (sub_100055D58(v33, 30, *(double *)(a2 + 72)))
                                                                  {
                                                                    uint64_t v34 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                    if (sub_100055D58(v34, 31, *(double *)(a2 + 80)))
                                                                    {
                                                                      long long v35 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                      if (sub_100055D58(v35, 32, *(double *)(a2 + 88)))
                                                                      {
                                                                        id v36 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                        if (sub_100055D58(v36, 33, *(double *)(a2 + 96)))
                                                                        {
                                                                          long long v37 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                          if (sub_100055D58(v37, 34, *(double *)(a2 + 104)))
                                                                          {
                                                                            long long v38 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                            if (sub_100055D58(v38, 35, *(float *)(a2 + 144)))
                                                                            {
                                                                              id v39 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                              if (sub_100055D58(v39, 36, *(float *)(a2 + 148)))
                                                                              {
                                                                                id v40 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                                if (sub_100055D58(v40, 37, *(float *)(a2 + 152)))
                                                                                {
                                                                                  int v41 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                                  if (sub_100055D58(v41, 38, *(float *)(a2 + 156)))
                                                                                  {
                                                                                    id v42 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                                    if (sub_100055D58(v42, 39, *(float *)(a2 + 160)))
                                                                                    {
                                                                                      float v43 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                                      if (sub_100055D58(v43, 40, *(float *)(a2 + 164)))
                                                                                      {
                                                                                        uint64_t v44 = *(void *)(a1 + 80);
                                                                                        float v45 = (sqlite3_stmt *)sub_10014D19C(v51);
                                                                                        sub_10001FEB0(v44, v45);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_102329240);
        }
        uint64_t v46 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_FAULT, "BoutMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_102329240);
          }
          float v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMobility::BoutMetricsRecorderDb::insertRecordUL(const BoutMetrics &, BOOL)", "%s\n", v49);
          if (v49 != (char *)buf) {
            free(v49);
          }
        }
      }
      uint64_t v47 = v51;
      uint64_t v51 = 0;
      if (v47) {
        (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102329240);
      }
      int v48 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "Prepare SQL statements failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_102329240);
        }
        LOWORD(v51) = 0;
        id v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMobility::BoutMetricsRecorderDb::insertRecordUL(const BoutMetrics &, BOOL)", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
      }
    }
  }
}

void sub_1014C11AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C11F4(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102329260);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329260);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      double v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__int16 v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1014C2420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

char *sub_1014C2780@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[111] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 11), *((void *)result + 12));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 88);
  *(void *)(a2 + 16) = *((void *)result + 13);
  return result;
}

char *sub_1014C27AC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 2), *((void *)result + 3));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(void *)(a2 + 16) = *((void *)result + 4);
  return result;
}

uint64_t sub_1014C27D8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MobilityBoutMetricsHistory ORDER BY startTime ASC LIMIT 1");
  }
  return result;
}

void sub_1014C2878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C2894(uint64_t a1)
{
  return sub_1014C27D8(a1 - 528);
}

uint64_t sub_1014C289C(uint64_t a1)
{
  return sub_1005F93E8(*(void *)(a1 + 80));
}

uint64_t sub_1014C28A4(uint64_t a1)
{
  return sub_1005F93E8(*(void *)(a1 - 448));
}

BOOL sub_1014C28B0(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  if (!a3) {
    return 0;
  }
  id v6 = objc_alloc_init((Class)NSMutableArray);
  int v16 = 0;
  int v19 = 0;
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  long long v20 = xmmword_101D813B0;
  int64x2_t v21 = vdupq_n_s64(0xFFF0000000000000);
  int64x2_t v22 = v21;
  unint64_t v23 = 0xFFF0000000000000;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 1071225242;
  char v31 = 0;
  int v32 = 1116213084;
  char v33 = 0;
  int v7 = sub_1014C0388(a1, a2, (uint64_t)&v16);
  if (!v7)
  {
    do
    {
      uint64_t v15 = 0;
      size_t v8 = [[CLSerializableMobilityBoutMetrics alloc] initWithBoutMetrics:&v16];
      uint64_t v9 = +[NSKeyedArchiver archivedDataWithRootObject:v8 requiringSecureCoding:1 error:&v15];
      if (v15)
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_102329240);
        }
        uint64_t v10 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v37 = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize bout metrics: %@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_102329240);
          }
          int v34 = 138412290;
          uint64_t v35 = v15;
          uint64_t v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMobility::BoutMetricsRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      else
      {
        [v6 addObject:v9];
      }

      int v12 = sub_1014C0388(a1, a2, (uint64_t)&v16);
    }
    while (!v12);
    int v7 = v12;
  }
  uint64_t v14 = (NSArray *)[v6 count];
  if (v14) {
    uint64_t v14 = +[NSArray arrayWithArray:v6];
  }
  *a3 = v14;

  return v7 == 1;
}

BOOL sub_1014C2BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  id v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:a2 error:&v9];
  uint64_t v5 = v9;
  if (v9)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102329240);
    }
    id v6 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize bout metrics: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102329240);
      }
      int v10 = 138412290;
      uint64_t v11 = v9;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMobility::BoutMetricsRecorderDb::dataBlobToEntry(NSData *, BoutMetrics &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    [v4 getBoutMetrics:a3];
  }
  return v5 == 0;
}

uint64_t sub_1014C2DB8(void *a1, void *a2)
{
  id v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB7960(v4);
    sub_1001D7FD4();
  }
  int v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    id v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1014C32AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  sub_101A129A8((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C332C(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        id v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        int v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AB7ACC(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1014C3864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C38E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1014C5484(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102329260);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102329260);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329260);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1014C4064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1014C4098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = v5;
  long long v7 = *(_OWORD *)(a3 + 96);
  long long v8 = *(_OWORD *)(a3 + 112);
  long long v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x310], 8) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 112) = v8;
  __n128 result = *(__n128 *)(a3 + 160);
  long long v11 = *(_OWORD *)(a3 + 176);
  long long v12 = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(a2 + 205) = *(_OWORD *)(a3 + 205);
  *(_OWORD *)(a2 + 176) = v11;
  *(_OWORD *)(a2 + 192) = v12;
  *(__n128 *)(a2 + 160) = result;
  return result;
}

id *sub_1014C40DC(uint64_t a1, uint64_t a2, char a3)
{
  v55[0] = (id)os_transaction_create();
  v55[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v55);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v37 = 0;
  int v40 = 0;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  long long v41 = xmmword_101D813B0;
  int64x2_t v42 = vdupq_n_s64(0xFFF0000000000000);
  int64x2_t v43 = v42;
  unint64_t v44 = 0xFFF0000000000000;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  int v51 = 1071225242;
  char v52 = 0;
  int v53 = 1116213084;
  char v54 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104))(a1, &v37);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329260);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329260);
        }
        LOWORD(v56) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = *(double *)&v38;
    double v9 = v7 - *(double *)&v38;
    if (v7 - *(double *)&v38 < 0.0) {
      double v9 = -(v7 - *(double *)&v38);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329260);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 134349312;
        double v61 = *(double *)&v38;
        __int16 v62 = 2050;
        uint64_t v63 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329260);
        }
        uint64_t v31 = *(void *)(a2 + 8);
        int v56 = 134349312;
        double v57 = *(double *)&v38;
        __int16 v58 = 2050;
        uint64_t v59 = v31;
        int v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = *(double *)&v38;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329260);
        }
        long long v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)long long buf = 134217984;
          double v61 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102329260);
          }
          double v33 = *(double *)(a2 + 8);
          int v56 = 134217984;
          double v57 = v33;
          int v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v36 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102329260);
        double v17 = v36;
      }
      double v18 = v16 - v17;
      int v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v61 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329260);
        }
        int v56 = 134217984;
        double v57 = v18;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v37, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x310], 8) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 272) = v22;
  long long v24 = *(_OWORD *)(a2 + 96);
  long long v25 = *(_OWORD *)(a2 + 112);
  long long v26 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = v26;
  *(_OWORD *)(a1 + 320) = v24;
  *(_OWORD *)(a1 + 336) = v25;
  long long v27 = *(_OWORD *)(a2 + 160);
  long long v28 = *(_OWORD *)(a2 + 176);
  long long v29 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 429) = *(_OWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 400) = v28;
  *(_OWORD *)(a1 + 416) = v29;
  *(_OWORD *)(a1 + 384) = v27;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v55);
}

void sub_1014C4984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41)
{
}

uint64_t sub_1014C49B0(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB7C38(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  long long v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1014C4D24(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB7DA4(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1014C5050(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB7F10(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_1014C5374(uint64_t a1)
{
  return sub_1014C38E4(a1 - 72);
}

void sub_1014C537C(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_1014C53AC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1014C53DC(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 9;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 18;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_1014C5484(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1014C5504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014C5520(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void *sub_1014C5550(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_1014C5660((uint64_t)a1, "MaxMetsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_102329B88;
  a1[9] = off_102329C40;
  sub_100F03BA0(a1 + 42, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_1014C5634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C5660(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = off_1022ADB08;
  *(void *)a1 = off_102329DF0;
  *(void *)(a1 + 72) = off_102329E98;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102329DF0;
  *(void *)(a1 + 72) = off_102329E98;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1014C5A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1014C5B04()
{
}

void *sub_1014C5B0C(void *a1)
{
  *a1 = off_102329DF0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102329E98;
  a1[33] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1014C5BD0(uint64_t a1)
{
  return sub_1014C5B0C((void *)(a1 - 72));
}

void sub_1014C5BD8(void *a1)
{
  sub_1014C5B0C(a1);

  operator delete();
}

void sub_1014C5C10(uint64_t a1)
{
  sub_1014C5B0C((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1014C5C4C(uint64_t *a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) != 1.79769313e308 || !sub_100082064(a1 + 9)) {
    return -1;
  }
  sub_10002B640(a1[10]);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100082068(a1 + 42, &v13);
  unint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v13);
  if (sub_100055D58(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
  {
    uint64_t v6 = a1[10];
    uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v13);
    sub_10001FEB0(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    uint64_t v8 = -1;
  }
  sub_100028FB4(a1[10]);
  uint64_t v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_10003CC68(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v8;
}

void sub_1014C5D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C5DA4(uint64_t a1, uint64_t a2)
{
  return sub_1014C5C4C((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_1014C5DAC(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from MaxMetsHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1014C5F50(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C5F90(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v10 = sqlite3_column_double(v9, 3);
  uint64_t result = 0;
  *(double *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_1014C6038(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM MaxMetsHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_1014C60F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C6130(uint64_t a1)
{
  return sub_1014C6038(a1 - 72);
}

uint64_t sub_1014C6138(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1014C6160(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MaxMetsHistory WHERE endTime > ? and startTime <= ? ORDER BY startTime ASC");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102329CD0);
  }
  unint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MaxMetsHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102329CD0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLMaxMetsRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<MaxMets> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_1014C65D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C6618(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_1014C6684((uint64_t)a1);
    sub_1005F7B0C(a1[10], "MaxMetsHistory", (const char **)&off_102329CF0, (const std::string::value_type **)&off_1024790B8, 0);
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM MaxMetsHistory WHERE endTime < ?");
    a1[42] = result;
    a1[43] = v3;
  }
  return result;
}

uint64_t sub_1014C6684(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "MaxMetsHistory");
  if (result)
  {
    uint64_t v3 = "maxMets";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "MaxMetsHistory", (uint64_t)"maxMets", (uint64_t)&v3);
  }
  return result;
}

void sub_1014C6B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  sub_101A129A8((uint64_t)&a57);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C6BD0(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM MaxMetsHistory");
  }
  return result;
}

void sub_1014C6C80(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C6C98(uint64_t a1)
{
  return sub_1014C6BD0(a1 - 72);
}

uint64_t sub_1014C6CA0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM MaxMetsHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1014C6D9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C6DB4(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE MaxMetsHistory SET startTime = startTime + ?, endTime = endTime + ?");
  }
  return result;
}

void sub_1014C6E80(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C6E98(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO MaxMetsHistory (startTime, endTime, maxMets) VALUES (?, ?, ?)");
  }
  return result;
}

void sub_1014C6F7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C6F94()
{
  return 0;
}

uint64_t sub_1014C6F9C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MaxMetsHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_1014C7038(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014C7050(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102329ED8);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329ED8);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      long long v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        double v10 = __p;
      }
      else {
        double v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    unsigned __int8 v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      unsigned __int8 v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1014C827C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1014C85DC(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    double v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        int v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          __int16 v5 = __p;
        }
        else {
          __int16 v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        char v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AB807C(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1014C89E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C8A64(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1014CA918(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102329ED8);
  }
  __int16 v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102329ED8);
    }
    char v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329ED8);
      }
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1014C91B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1014C91EC(uint64_t a1, uint64_t a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329ED8);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329ED8);
        }
        LOWORD(v31) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v29;
    double v9 = v7 - v29;
    if (v7 - v29 < 0.0) {
      double v9 = -(v7 - v29);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102329ED8);
      }
      double v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 134349312;
        double v36 = v29;
        __int16 v37 = 2050;
        uint64_t v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329ED8);
        }
        uint64_t v22 = *(void *)(a2 + 8);
        int v31 = 134349312;
        double v32 = v29;
        __int16 v33 = 2050;
        uint64_t v34 = v22;
        std::string v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329ED8);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)long long buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102329ED8);
          }
          double v24 = *(double *)(a2 + 8);
          int v31 = 134217984;
          double v32 = v24;
          long long v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102329ED8);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      int v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102329ED8);
        }
        int v31 = 134217984;
        double v32 = v18;
        long long v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_1014C99EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C9A18(uint64_t a1)
{
  return sub_1014C8A64(a1 - 72);
}

void sub_1014C9A20(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1014C9A50(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB81EC(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1014C9E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1014C9E94(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB835C(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1014CA208(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB84CC(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      __int16 v5 = __p;
    }
    else {
      __int16 v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1014CA534(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB863C(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1014CA858(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1014CA888(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_1014CA918(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1014CA998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014CA9B4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

ALSLocationRequest *sub_1014CA9E4()
{
  uint64_t v0 = objc_alloc_init(ALSLocationRequest);
  [(ALSLocationRequest *)v0 setMeta:sub_1014CAA2C()];
  uint64_t v1 = v0;
  return v0;
}

ALSMeta *sub_1014CAA2C()
{
  uint64_t v0 = objc_alloc_init(ALSMeta);
  uint64_t v1 = sub_100103240();
  sub_10073B3D0(v1, (uint64_t)__p);
  int v2 = v15;
  uint64_t v3 = (void **)__p[0];
  NSStringEncoding v4 = +[NSString defaultCStringEncoding];
  if (v2 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = +[NSString stringWithCString:v5 encoding:v4];
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  sub_100103240();
  sub_10073ADA8((uint64_t)__p);
  int v7 = v15;
  uint64_t v8 = (void **)__p[0];
  NSStringEncoding v9 = +[NSString defaultCStringEncoding];
  if (v7 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = v8;
  }
  uint64_t v11 = +[NSString stringWithCString:v10 encoding:v9];
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  [(ALSMeta *)v0 setProductId:v6];
  [(ALSMeta *)v0 setSoftwareBuild:v11];
  uint64_t v12 = v0;
  return v0;
}

void sub_1014CAB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ALSNearbyRequest *sub_1014CAB58()
{
  uint64_t v0 = objc_alloc_init(ALSNearbyRequest);
  [(ALSNearbyRequest *)v0 setMeta:sub_1014CAA2C()];
  uint64_t v1 = v0;
  return v0;
}

void sub_1014CABA0(void *a1)
{
  uint64_t v3 = (void **)(a1 + 20);
  uint64_t v2 = a1[20];
  uint64_t v4 = (a1[21] - v2) >> 3;
  uint64_t v5 = (double **)(a1 + 23);
  if (v4 == (((a1[18] - a1[17]) << 28) - 0x100000000) >> 32)
  {
    uint64_t v6 = (double *)a1[23];
    if (v4 == (uint64_t)(a1[24] - (void)v6) >> 3) {
      return;
    }
  }
  else
  {
    uint64_t v6 = *v5;
  }
  a1[16] = 0;
  a1[21] = v2;
  a1[24] = v6;
  sub_101171D90((uint64_t)v51);
  uint64_t v7 = a1[17];
  if (a1[18] - v7 != 16)
  {
    uint64_t v8 = 0;
    do
    {
      unint64_t v9 = v8 + 1;
      double v10 = sub_1000F1648(v51, *(double *)(v7 + 16 * v8), *(double *)(v7 + 16 * v8 + 8), *(double *)(v7 + 16 * (v8 + 1)), *(double *)(v7 + 16 * (v8 + 1) + 8), 0.0);
      double v11 = v10;
      unsigned __int8 v13 = (double *)a1[21];
      unint64_t v12 = a1[22];
      if ((unint64_t)v13 >= v12)
      {
        char v15 = (double *)*v3;
        uint64_t v16 = ((char *)v13 - (unsigned char *)*v3) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          long long v20 = (char *)sub_1000DA54C((uint64_t)(a1 + 22), v19);
          char v15 = (double *)a1[20];
          unsigned __int8 v13 = (double *)a1[21];
        }
        else
        {
          long long v20 = 0;
        }
        long long v21 = (double *)&v20[8 * v16];
        double *v21 = v11;
        unsigned __int8 v14 = v21 + 1;
        while (v13 != v15)
        {
          uint64_t v22 = *((void *)v13-- - 1);
          *((void *)v21-- - 1) = v22;
        }
        a1[20] = v21;
        a1[21] = v14;
        a1[22] = &v20[8 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        double *v13 = v10;
        unsigned __int8 v14 = v13 + 1;
      }
      a1[21] = v14;
      *((double *)a1 + 16) = v11 + *((double *)a1 + 16);
      double v23 = sub_1011722DC(v51, *(double *)(a1[17] + 16 * v8), *(double *)(a1[17] + 16 * v8 + 8), *(double *)(a1[17] + 16 * v9), *(double *)(a1[17] + 16 * v9 + 8));
      if (v23 < 0.0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102329F18);
        }
        double v24 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = a1[17];
          long long v26 = (uint64_t *)(v25 + 16 * v8);
          uint64_t v28 = *v26;
          uint64_t v27 = v26[1];
          double v29 = (uint64_t *)(v25 + 16 * v9);
          uint64_t v31 = *v29;
          uint64_t v30 = v29[1];
          *(_DWORD *)long long buf = 134284289;
          uint64_t v61 = v28;
          __int16 v62 = 2049;
          uint64_t v63 = v27;
          __int16 v64 = 2049;
          uint64_t v65 = v31;
          __int16 v66 = 2049;
          uint64_t v67 = v30;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLMMLE,invalid heading for flowline coordinate,%{private}.7lf,%{private}.7lf,prev,%{private}.7lf,%{private}.7lf", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102329F18);
          }
          uint64_t v43 = a1[17];
          unint64_t v44 = (uint64_t *)(v43 + 16 * v8);
          uint64_t v46 = *v44;
          uint64_t v45 = v44[1];
          long long v47 = (uint64_t *)(v43 + 16 * v9);
          uint64_t v49 = *v47;
          uint64_t v48 = v47[1];
          int v52 = 134284289;
          uint64_t v53 = v46;
          __int16 v54 = 2049;
          uint64_t v55 = v45;
          __int16 v56 = 2049;
          uint64_t v57 = v49;
          __int16 v58 = 2049;
          uint64_t v59 = v48;
          long long v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLMapFlowLine::computeSegmentDistancesAndHeading()", "%s\n", v50);
          if (v50 != (char *)buf) {
            free(v50);
          }
        }
      }
      __int16 v33 = (double *)a1[24];
      unint64_t v32 = a1[25];
      if ((unint64_t)v33 >= v32)
      {
        uint64_t v35 = *v5;
        uint64_t v36 = v33 - *v5;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 2 > v37) {
          unint64_t v37 = v38 >> 2;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          int v40 = (char *)sub_1000DA54C((uint64_t)(a1 + 25), v39);
          uint64_t v35 = (double *)a1[23];
          __int16 v33 = (double *)a1[24];
        }
        else
        {
          int v40 = 0;
        }
        long long v41 = (double *)&v40[8 * v36];
        *long long v41 = v23;
        uint64_t v34 = v41 + 1;
        while (v33 != v35)
        {
          uint64_t v42 = *((void *)v33-- - 1);
          *((void *)v41-- - 1) = v42;
        }
        a1[23] = v41;
        a1[24] = v34;
        a1[25] = &v40[8 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *__int16 v33 = v23;
        uint64_t v34 = v33 + 1;
      }
      a1[24] = v34;
      uint64_t v7 = a1[17];
      ++v8;
    }
    while (((a1[18] - v7) >> 4) - 1 > v9);
  }
}

void sub_1014CB01C(uint64_t a1, uint64_t *a2, double a3, long double a4, double a5, long double a6)
{
  sub_10005B720(a4);
  double v12 = v11;
  sub_10005B720(a6);
  double v14 = v13;
  sub_1000C59A8(a2);
  v38[0] = 0;
  v38[1] = 0;
  unint64_t v37 = (uint64_t *)v38;
  unint64_t v17 = *(void **)(a1 + 40);
  uint64_t v15 = a1 + 40;
  uint64_t v16 = v17;
  if (v17 == (void *)(v15 + 8)) {
    goto LABEL_43;
  }
  do
  {
    if (!v16[5]) {
      goto LABEL_37;
    }
    *(void *)long long buf = v16 + 4;
    if (*((unsigned char *)sub_1014CB594(&v37, v16 + 4, (uint64_t)&unk_101D0B290, (void **)buf) + 40)) {
      goto LABEL_37;
    }
    unint64_t v19 = *(double **)(v16[5] + 136);
    uint64_t v18 = *(double **)(v16[5] + 144);
    BOOL v20 = (((char *)v18 - (char *)v19) & 0xFFFFFFFF0) == 0 || v19 == v18;
    if (v20) {
      goto LABEL_37;
    }
    while (1)
    {
      if (*v19 < a3 || *v19 > a5) {
        goto LABEL_25;
      }
      if (v14 <= v12) {
        break;
      }
      double v22 = v19[1];
      if (v22 >= v12 && v22 <= v14) {
        goto LABEL_27;
      }
LABEL_25:
      v19 += 2;
      if (v19 == v18) {
        goto LABEL_37;
      }
    }
    if (v14 >= v12) {
      goto LABEL_25;
    }
    double v24 = v19[1];
    if (v24 >= v14 && v24 <= v12) {
      goto LABEL_25;
    }
LABEL_27:
    long long v26 = sub_1014CB658(v15, v16 + 4);
    uint64_t v28 = v27;
    if (v26 != v27)
    {
      do
      {
        if (v26[4] == v16[4])
        {
          sub_1014CABA0((void *)v26[5]);
          sub_1014CB448(a2, (long long *)(v26 + 5));
        }
        double v29 = (void *)v26[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = v29;
            double v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (void *)v26[2];
            BOOL v20 = *v30 == (void)v26;
            long long v26 = v30;
          }
          while (!v20);
        }
        long long v26 = v30;
      }
      while (v30 != v28);
    }
    *(void *)long long buf = v16 + 4;
    *((unsigned char *)sub_1014CB594(&v37, v16 + 4, (uint64_t)&unk_101D0B290, (void **)buf) + 40) = 1;
LABEL_37:
    uint64_t v31 = (void *)v16[1];
    if (v31)
    {
      do
      {
        unint64_t v32 = v31;
        uint64_t v31 = (void *)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        unint64_t v32 = (void *)v16[2];
        BOOL v20 = *v32 == (void)v16;
        uint64_t v16 = v32;
      }
      while (!v20);
    }
    uint64_t v16 = v32;
  }
  while (v32 != (void *)(v15 + 8));
LABEL_43:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102329F18);
  }
  __int16 v33 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v34 = (a2[1] - *a2) >> 4;
    *(_DWORD *)long long buf = 134350081;
    *(void *)&uint8_t buf[4] = v34;
    __int16 v50 = 2049;
    double v51 = a3;
    __int16 v52 = 2049;
    double v53 = v12;
    __int16 v54 = 2049;
    double v55 = a5;
    __int16 v56 = 2049;
    double v57 = v14;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMMLE,FlowlineBuffer,found roads,size,%{public}ld,min,%{private}.7lf,%{private}.7lf,max,%{private}.7lf,%{private}.7lf", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102329F18);
    }
    uint64_t v35 = (a2[1] - *a2) >> 4;
    int v39 = 134350081;
    uint64_t v40 = v35;
    __int16 v41 = 2049;
    double v42 = a3;
    __int16 v43 = 2049;
    double v44 = v12;
    __int16 v45 = 2049;
    double v46 = a5;
    __int16 v47 = 2049;
    double v48 = v14;
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapFlowLineBuffer::findFlowLinesInThisBox(double, double, double, double, std::vector<CLMapFlowLinePtr> &) const", "%s\n", v36);
    if (v36 != buf) {
      free(v36);
    }
  }
  sub_1000F5BB0((uint64_t)&v37, v38[0]);
}

void sub_1014CB420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void **sub_1014CB448(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    double v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_1014CB6F0(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = sub_1000C5898(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1014CB550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

void sub_1014CB564(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t **sub_1014CB594(uint64_t **a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((unsigned char *)v11 + 40) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1014CB658(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v4 = *a2;
  while (1)
  {
    uint64_t v5 = v3[4];
    if (v4 >= v5) {
      break;
    }
    uint64_t v2 = v3;
LABEL_7:
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  uint64_t v7 = (void *)*v3;
  uint64_t result = v3;
  if (*v3)
  {
    uint64_t result = v3;
    do
    {
      uint64_t v8 = v7[4];
      BOOL v9 = v8 < v4;
      if (v8 >= v4) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      if (!v9) {
        uint64_t result = v7;
      }
      uint64_t v7 = (void *)*v10;
    }
    while (*v10);
  }
  unint64_t v11 = (void *)v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= v11[4]) {
        uint64_t v12 = v11 + 1;
      }
      else {
        uint64_t v12 = v11;
      }
      unint64_t v11 = (void *)*v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t sub_1014CB6F0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1014CB768((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1014CB768(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1014CB7FC((uint64_t)v12);
  return v10;
}

uint64_t sub_1014CB7FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

uint64_t sub_1014CB834()
{
  if (qword_1024881D0 != -1) {
    dispatch_once(&qword_1024881D0, &stru_102329F38);
  }
  return qword_10248D778;
}

void sub_1014CB878(id a1)
{
}

void sub_1014CB8E0()
{
}

void sub_1014CB908(uint64_t a1)
{
  sub_100A26928(a1);

  operator delete();
}

void sub_1014CB9F0(id a1)
{
  qword_1024881D8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMobileAssetManagerSilo"];
}

uint64_t sub_1014CBAB0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1014CC878;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024881E8 != -1) {
    dispatch_once(&qword_1024881E8, block);
  }
  return qword_10248D780;
}

void sub_1014CC69C()
{
}

void sub_1014CC758(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1014CC794(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_10232A168;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1014CC878()
{
}

void sub_1014CC8C4()
{
}

void sub_1014CC8E8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_1014CC9CC(a1, "CLMobileAssetManager", a2);
  void *v3 = off_102329FE8;
  v3[14] = a2;
  v4[0] = off_10232A2E0;
  v4[1] = v3;
  v4[3] = v4;
  sub_100DD0E8C((uint64_t)(v3 + 15), (uint64_t)a2, (uint64_t)v4);
}

void sub_1014CC9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10065AAB0((uint64_t *)va);
  sub_1014CCA78(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1014CC9CC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10232A190;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = 0;
  return a1;
}

void sub_1014CCA5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014CCA78(uint64_t a1)
{
  *(void *)a1 = off_10232A190;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1014CCAFC(void *a1)
{
  *a1 = off_102329FE8;
  sub_100DD0F44((uint64_t)(a1 + 15));

  return sub_1014CCA78((uint64_t)a1);
}

void sub_1014CCB50(void *a1)
{
  *a1 = off_102329FE8;
  sub_100DD0F44((uint64_t)(a1 + 15));
  sub_1014CCA78((uint64_t)a1);

  operator delete();
}

void sub_1014CCBB8(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A118);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        unint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          unint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        unint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10232A118);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        long long v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::removeClient(int) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1014CCE48(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1014CCEFC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1014CCF44(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1014CCF8C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1014CCFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102479188);
}

BOOL sub_1014CD000(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          double v23 = (uint64_t *)v17;
        }
        else {
          double v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)__int16 v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)long long buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        sub_1000E9354(buf);
        *(void *)((char *)v46 + 2) = -1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1014CF74C();
        }
        sub_10013F3C4(buf);
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)__int16 v41 = a1 + 64;
        char v29 = byte_102479189;
        int v38 = v16;
        *(void *)long long buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)long long buf = &v38;
        uint64_t v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)long long buf = &v38;
        __int16 v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232A118);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    long long v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v45 = 1026;
    v46[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232A118);
    }
    uint64_t v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v36 = (void *)*v36;
    }
    *(_DWORD *)__int16 v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    unint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_1014CD4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

BOOL sub_1014CD4D8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232A118);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A118);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1014CD75C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232A118);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232A118);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  uint64_t v30 = buf;
                }
                else {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1014CDB30(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  sub_1004CE798(a3, *(void *)(v8 + 64));
  *(void *)(a3 + 16) = *(void *)(v12 + 16);
  return 1;
}

uint64_t sub_1014CDBB8(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1014CEFF0(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1014CDC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014CDC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000E9354(v9);
  uint64_t v10 = -1;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v9, a3, a4, 0);
  return sub_10013F3C4(v9);
}

void sub_1014CDCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1014CDD08(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232A118);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1014CEFF0(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1014CEA2C();
  }
  os_activity_scope_leave(&state);
}

void sub_1014CE2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1014CE324(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232A118);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A118);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::listClients() [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232A118);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A118);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::listClients() [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10232A118);
            }
            uint64_t v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232A118);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::listClients() [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1014CE8D4(uint64_t a1)
{
  sub_1014CE9BC(a1);

  operator delete();
}

id sub_1014CE90C(uint64_t a1, int a2, void *a3)
{
  id result = sub_1014CF17C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1014CE95C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1014CE98C(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1014CE9BC(uint64_t a1)
{
  *(void *)a1 = off_10232A168;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *uint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1014CEA2C()
{
}

void sub_1014CEAE4()
{
}

void sub_1014CEB08(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1014CF17C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              double v48 = v19;
              sub_1014CEEF8(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              double v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232A118);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                double v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232A118);
                }
                __int16 v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                __int16 v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLMobileAssetManager_Type::Notification, CLMobileAssetManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMobileAssetManager_Type::Notification, NotificationData_T = CLMobileAssetManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1014CEEF8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1014CF17C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

void *sub_1014CEFF0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  id result = sub_1014CF04C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1014CF038(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1014CF04C(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10232A270;
  sub_1004CE794(a1 + 3);
  a1[5] = *(void *)(a2 + 16);
  return a1;
}

void sub_1014CF0A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1014CF0B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10232A270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1014CF0D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10232A270;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1014CF128(uint64_t a1)
{
  return sub_10013F3C4(a1 + 24);
}

uint64_t sub_1014CF134(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_10013F3C4(result);
    operator delete();
  }
  return result;
}

id sub_1014CF17C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1014CF1DC(a1);
}

id sub_1014CF1DC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232A2B0);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E0D04ALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMobileAssetManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232A2B0);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E0D04ALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10232A2B0);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1014CF59C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1014CF5D0()
{
}

void *sub_1014CF5E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10232A2E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1014CF62C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10232A2E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1014CF658(uint64_t a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  sub_1004CE794(v7);
  double v7[2] = *(void *)(a3 + 16);
  int v8 = v5;
  (*(void (**)(void, int *, void *, uint64_t, uint64_t, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), &v8, v7, 1, 0xFFFFFFFFLL, 0);
  return sub_10013F3C4(v7);
}

void sub_1014CF6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1014CF700(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014CF740()
{
}

void sub_1014CF74C()
{
}

void sub_1014CF804()
{
}

uint64_t sub_1014CF828(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_10013F3C4(result);
    operator delete();
  }
  return result;
}

void sub_1014CF920(id a1)
{
  qword_102488208 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTrackingAvoidanceServiceSilo"];
}

void sub_1014CF9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014CFA10(id a1)
{
  if (!objc_opt_class())
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    uint64_t v1 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#ut not supported on this platform because SPOwner.framework is not present", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLTrackingAvoidanceService isSupported]_block_invoke", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    byte_102488218 = 0;
  }
}

void sub_1014D013C()
{
}

void sub_1014D0684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014D1178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014D1198(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_100089AE0((char *)v7, (long long *)a3);
  uint64_t v21 = *(void *)(a3 + 184);
  [a4 onClientManagerNotification:v6 data:v7];
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1014D1264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1014D13BC(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onGnssNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1014D144C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1014D1740(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  long long v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  long long v7 = a3[3];
  v11[2] = a3[2];
  v11[3] = v7;
  long long v8 = a3[5];
  v11[4] = a3[4];
  void v11[5] = v8;
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return [a4 onMotionStateNotification:v4 data:v11];
}

id sub_1014D199C(uint64_t a1)
{
  id v2 = [[+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration") countryCode];
  uint64_t v3 = *(void **)(a1 + 32);

  return _[v3 onGeoCountryConfigurationChanged:v2];
}

void sub_1014D1DEC(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    long long v5 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
    {
      long long v6 = *(void **)(a1 + 32);
      int v21 = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      BOOL v24 = "";
      __int16 v25 = 2113;
      int v26 = v6;
      __int16 v27 = 2114;
      uint64_t v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
    }
    long long v7 = qword_102419498;
    if (os_signpost_enabled((os_log_t)qword_102419498))
    {
      long long v8 = *(void **)(a1 + 32);
      int v21 = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      BOOL v24 = "";
      __int16 v25 = 2113;
      int v26 = v8;
      __int16 v27 = 2114;
      uint64_t v28 = a3;
      long long v9 = "#ut #loi error fetching LOI";
      char v10 = "{\"msg%{public}.0s\":\"#ut #loi error fetching LOI\", \"visit\":%{private, location:escape_only}@, \"error\""
            ":%{public, location:escape_only}@}";
LABEL_9:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v9, v10, (uint8_t *)&v21, 0x26u);
    }
  }
  else if (a2)
  {
    if (objc_msgSend(objc_msgSend(a2, "location"), "referenceFrame") == 2)
    {
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
      id v12 = qword_102419498;
      if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        int v21 = 68289539;
        int v22 = 0;
        __int16 v23 = 2082;
        BOOL v24 = "";
        __int16 v25 = 2113;
        int v26 = a2;
        __int16 v27 = 2113;
        uint64_t v28 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #loi got China Shifted LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      }
    }
    else
    {
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
      int v19 = qword_102419498;
      if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        int v21 = 68289539;
        int v22 = 0;
        __int16 v23 = 2082;
        BOOL v24 = "";
        __int16 v25 = 2113;
        int v26 = a2;
        __int16 v27 = 2113;
        uint64_t v28 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #loi received LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      }
      [*(id *)(a1 + 48) ingestTAEventIfTAServiceRunning:[+[CLTrackingAvoidanceService convertRTLocationOfInterest:](CLTrackingAvoidanceService, "convertRTLocationOfInterest:", a2)];
    }
  }
  else
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    char v14 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_FAULT))
    {
      int v15 = *(void **)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      int v21 = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      BOOL v24 = "";
      __int16 v25 = 2113;
      int v26 = v15;
      __int16 v27 = 2113;
      uint64_t v28 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ut #loi received nil in return when fetching LOI\", \"visit\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x26u);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
    }
    long long v7 = qword_102419498;
    if (os_signpost_enabled((os_log_t)qword_102419498))
    {
      uint64_t v17 = *(void **)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 40);
      int v21 = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      BOOL v24 = "";
      __int16 v25 = 2113;
      int v26 = v17;
      __int16 v27 = 2113;
      uint64_t v28 = v18;
      long long v9 = "#ut #loi received nil in return when fetching LOI";
      char v10 = "{\"msg%{public}.0s\":\"#ut #loi received nil in return when fetching LOI\", \"visit\":%{private, location:es"
            "cape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}";
      goto LABEL_9;
    }
  }
}

id sub_1014D26E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1014D2784;
  v8[3] = &unk_10229FF28;
  uint64_t v8[4] = *(void *)(a1 + 32);
  v8[5] = a3;
  v8[6] = a2;
  return [v6 async:v8];
}

void sub_1014D2784(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  if (*(void *)(a1 + 40))
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v2 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138477827;
      *(void *)__int16 v25 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ut #loi received error when fetching LOIs in batch: %{private}@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    int v22 = 138477827;
    uint64_t v23 = v16;
    goto LABEL_45;
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    if ([v4 count])
    {
      long long v5 = *(void **)(*(void *)(a1 + 32) + 192);
      if (v5) {

      }
      *(void *)(*(void *)(a1 + 32) + 192) = objc_alloc_init((Class)NSDate);
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v6 = *(void **)(a1 + 48);
      id v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v18;
        do
        {
          char v10 = 0;
          do
          {
            if (*(void *)v18 != v9) {
              objc_enumerationMutation(v6);
            }
            __int16 v11 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v10);
            if (objc_msgSend(objc_msgSend(v11, "location"), "referenceFrame") == 2)
            {
              if (qword_102419490 != -1) {
                dispatch_once(&qword_102419490, &stru_10232A4C8);
              }
              id v12 = qword_102419498;
              if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 68289283;
                *(_DWORD *)__int16 v25 = 0;
                *(_WORD *)&v25[4] = 2082;
                *(void *)&v25[6] = "";
                __int16 v26 = 2113;
                __int16 v27 = v11;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #loi got China Shifted LOI\", \"loi\":%{private, location:escape_only}@}", buf, 0x1Cu);
              }
            }
            else
            {
              [*(id *)(a1 + 32) ingestTAEventIfTAServiceRunning:+[CLTrackingAvoidanceService convertRTLocationOfInterest:](CLTrackingAvoidanceService, "convertRTLocationOfInterest:", v11)];
            }
            char v10 = (char *)v10 + 1;
          }
          while (v8 != v10);
          id v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
        }
        while (v8);
      }
    }
    else
    {
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
      char v14 = qword_102419498;
      if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#ut #loi received zero entities in return when fetching LOIs in batch", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419490 != -1) {
          dispatch_once(&qword_102419490, &stru_10232A4C8);
        }
        LOWORD(v22) = 0;
        int v15 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTrackingAvoidanceService requestImportantLoisIfNeeded]_block_invoke", "%s\n");
        goto LABEL_46;
      }
    }
  }
  else
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    uint64_t v13 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ut #loi received nil in return when fetching LOIs in batch", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
      LOWORD(v22) = 0;
LABEL_45:
      int v15 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLTrackingAvoidanceService requestImportantLoisIfNeeded]_block_invoke", "%s\n");
LABEL_46:
      if (v15 != buf) {
        free(v15);
      }
    }
  }
}

id sub_1014D2EDC(uint64_t a1, unsigned int *a2, long long *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return [a4 onDaemonStatusNotification:v4 data:&v6];
}

void sub_1014D30C8(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6 = *a2;
  __int16 v7 = *a3;
  sub_1000E23EC(v8, (uint64_t)(a3 + 4));
  uint64_t v12 = *((void *)a3 + 13);
  memset(v13, 0, 24);
  sub_1000DA6E8(v13, *((void *)a3 + 14), *((void *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 3));
  v13[3] = *((void *)a3 + 17);
  [a4 onWifiServiceNotification:v6 data:&v7];
  char v14 = (void **)v13;
  sub_1000D7F78(&v14);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1014D3190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_1014D32E4(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  v7[0] = *(unsigned char *)a3;
  sub_100997A7C((uint64_t)&v8, a3 + 8);
  uint64_t v15 = *(void *)(a3 + 112);
  int v16 = *(_DWORD *)(a3 + 120);
  [a4 onBluetoothServiceNotification:v6 data:v7];
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
}

void sub_1014D3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1014D350C(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  id v2 = *(void **)(a1 + 32);

  return _[v2 onVehicleStateNotification];
}

id sub_1014D3A00(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onSignalEnvironmentNotification:*a2 data:*a3];
}

id sub_1014D3BDC(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onDataProtectionNotification:*a2 data:*a3];
}

void sub_1014D6EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419490 != -1) {
    dispatch_once(&qword_102419490, &stru_10232A4C8);
  }
  uint64_t v8 = qword_102419498;
  if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134284033;
    uint64_t v12 = a2;
    __int16 v13 = 2049;
    uint64_t v14 = a3;
    __int16 v15 = 2049;
    uint64_t v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ut received vehicle state notification - state %{private}lu; hints %{private}lu; operator state %{private}lu",
      buf,
      0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTrackingAvoidanceService onVehicleStateNotification]_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a2 != 2) {
    a2 = a2 == 1;
  }
  if (a4 != 2) {
    a4 = a4 == 1;
  }
  id v9 = [objc_alloc((Class)TAVehicleStateNotification) initWithVehicularState:a2 andVehicularHints:a3 andOperatorState:a4 date:[NSDate date]];
  [*(id *)(a1 + 32) ingestTAEventIfTAServiceRunning:v9];
}

void sub_1014D7B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [[[*(id *)(a1 + 32) universe] silo] queue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_1014D7BB0;
  void v7[3] = &unk_1022C6138;
  uint64_t v7[4] = a3;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  uint64_t v9 = a2;
  dispatch_async(v6, v7);
}

id sub_1014D7BB0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v2 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
    {
      id v3 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
      id v4 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      uint64_t buf = 68289539;
      __int16 v27 = 2082;
      uint64_t v28 = "";
      __int16 v29 = 2081;
      id v30 = v3;
      __int16 v31 = 2081;
      id v32 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
    }
    long long v5 = qword_102419498;
    if (os_signpost_enabled((os_log_t)qword_102419498))
    {
      id v6 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
      id v7 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      uint64_t buf = 68289539;
      __int16 v27 = 2082;
      uint64_t v28 = "";
      __int16 v29 = 2081;
      id v30 = v6;
      __int16 v31 = 2081;
      id v32 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut received error in notifying SPD", "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
    }
    id v8 = [@"Alert_" stringByAppendingString:+[CLTrackingAvoidanceService convertSPTrackingAvoidanceErrorToString:](CLTrackingAvoidanceService, "convertSPTrackingAvoidanceErrorToString:", objc_msgSend(*(id *)(a1 + 32), "code"))];
    uint64_t v9 = *(void *)(a1 + 48) + 224;
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100B7BCD4(v9, v8, Current);
    return [*(id *)(a1 + 48) notifyTAWithDeviceInformation:*(id *)(a1 + 40) latestAdvertisement type:0 state:2 date:[NSDate now]];
  }
  else
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v12 = *(void **)(a1 + 56);
    id result = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (result)
    {
      id v14 = result;
      uint64_t v15 = *(void *)v22;
      *(void *)&long long v13 = 68289283;
      long long v20 = v13;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v22 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = (uint64_t)[*(id *)(*((void *)&v21 + 1) + 8 * (void)v16) type:v20];
          switch(v17)
          {
            case 0:
              if (qword_102419490 != -1) {
                dispatch_once(&qword_102419490, &stru_10232A4C8);
              }
              long long v18 = qword_102419498;
              if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
              {
                id v19 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
                uint64_t buf = v20;
                __int16 v27 = 2082;
                uint64_t v28 = "";
                __int16 v29 = 2081;
                id v30 = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut SPD successfully handled UT alert\", \"address\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
              }
              [*(id *)(a1 + 48) handleNotificationMetrics:*(void *)(a1 + 40)];
              [*(id *)(a1 + 48) incrementNotifications];
              goto LABEL_22;
            case 1:
              [*(id *)(a1 + 48) handleNotificationMetrics:*(void *)(a1 + 40)];
LABEL_22:
              uint64_t v17 = 1;
              break;
            case 2:
              break;
            case 4:
              [*(id *)(a1 + 48) showEngineeringUIForOwnerUT:*(void *)(a1 + 40)];
              uint64_t v17 = 3;
              break;
            default:
              uint64_t v17 = 0;
              break;
          }
          [*(id *)(a1 + 48) notifyTAWithDeviceInformation:[*(id *)(a1 + 40) latestAdvertisement] type:2 date:[+[NSDate now](NSDate, "now")]];
          uint64_t v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        id result = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
        id v14 = result;
      }
      while (result);
    }
  }
  return result;
}

id sub_1014D8338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1014D83E0;
  v8[3] = &unk_10232A3D0;
  uint64_t v8[4] = a3;
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = a2;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  return [v6 async:v8];
}

uint64_t sub_1014D83E0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v2 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
    {
      id v3 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
      id v4 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v13 = 68289539;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2081;
      id v18 = v3;
      __int16 v19 = 2081;
      id v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut received error in resolving device type with SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x26u);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
    }
    long long v5 = qword_102419498;
    if (os_signpost_enabled((os_log_t)qword_102419498))
    {
      id v6 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
      id v7 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v13 = 68289539;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2081;
      id v18 = v6;
      __int16 v19 = 2081;
      id v20 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut received error in resolving device type with SPD", "{\"msg%{public}.0s\":\"#ut received error in resolving device type with SPD\", \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x26u);
    }
    id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  }
  else
  {
    unint64_t v9 = +[CLTrackingAvoidanceService convertSPDetectedDeviceTypeToTADeviceType:*(void *)(a1 + 64)];
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    uint64_t v10 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
      int v13 = 68289539;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2081;
      id v18 = v11;
      __int16 v19 = 2081;
      id v20 = [[+[TADeviceInformation deviceTypeToString:](TADeviceInformation, "deviceTypeToString:", v9) UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut SPD resolved device type\", \"address\":%{private, location:escape_only}s, \"type\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x26u);
    }
    [*(id *)(a1 + 48) notifyTAWithDeviceInformation:*(void *)(a1 + 40) type:v9 state:0 date:[NSDate now]];
    id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  }
  return v8();
}

void sub_1014D8CB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v4 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
      v10[0] = 68289539;
      v10[1] = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2081;
      id v14 = v5;
      __int16 v15 = 2081;
      id v16 = [[+[TADeviceInformation deviceTypeToString:](TADeviceInformation, "deviceTypeToString:", a2) UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#trackingAvoidanceService:requestingAdditionalInformation not submitting metrics due to metrics from known device\", \"address\":%{private, location:escape_only}s, \"type\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x26u);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    id v8 = *(void **)(a1 + 48);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100B788C8(v7 + 224, v6, v8, Current);
  }
}

void sub_1014D8E54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v4 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
      v10[0] = 68289539;
      v10[1] = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2081;
      id v14 = v5;
      __int16 v15 = 2081;
      id v16 = [[+[TADeviceInformation deviceTypeToString:](TADeviceInformation, "deviceTypeToString:", a2) UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#trackingAvoidanceService:requestingAdditionalInformation not submitting metrics due to metrics from known device\", \"address\":%{private, location:escape_only}s, \"type\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x26u);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100B792F0(v7 + 224, v6, v8, Current);
  }
}

void sub_1014D9954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014D9CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [[[*(id *)(a1 + 32) universe] silo] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1014D9DA4;
  block[3] = &unk_1022DD4D0;
  uint64_t v7 = *(void *)(a1 + 48);
  block[4] = a3;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  uint64_t v10 = a2;
  uint64_t v11 = v7;
  dispatch_async(v6, block);
}

void sub_1014D9DA4(uint64_t a1)
{
  id v30 = +[NSString stringWithString:](NSString, "stringWithString:", +[CLTrackingAvoidanceService convertSPUnauthorizedTrackingObservationActionToString:*(void *)(a1 + 64)]);
  if (!*(void *)(a1 + 32))
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    __int16 v13 = *(void **)(a1 + 56);
    id v14 = [v13 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (!v14) {
      return;
    }
    id v15 = v14;
    uint64_t v16 = *(void *)v32;
    while (1)
    {
      __int16 v17 = 0;
      do
      {
        if (*(void *)v32 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = [*(id *)(*((void *)&v31 + 1) + 8 * (void)v17) type];
        if (v18 == (id)4)
        {
          uint64_t v28 = *(void **)(a1 + 48);
          id v29 = [*(id *)(a1 + 40) latestAdvertisement];
          long long v24 = +[NSDate now];
          __int16 v25 = v28;
          id v26 = v29;
          uint64_t v27 = 3;
          goto LABEL_24;
        }
        if (v18 == (id)2)
        {
          long long v22 = *(void **)(a1 + 48);
          id v23 = [*(id *)(a1 + 40) latestAdvertisement];
          long long v24 = +[NSDate now];
          __int16 v25 = v22;
          id v26 = v23;
          uint64_t v27 = 2;
LABEL_24:
          [v25 notifyTAWithDeviceInformation:v26 type:v27 state:0 date:v24];
          goto LABEL_25;
        }
        if (!v18)
        {
          if (qword_102419490 != -1) {
            dispatch_once(&qword_102419490, &stru_10232A4C8);
          }
          __int16 v19 = qword_102419498;
          if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
          {
            id v20 = [(NSString *)v30 UTF8String];
            id v21 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
            uint64_t buf = 68289539;
            __int16 v37 = 2082;
            BOOL v38 = "";
            __int16 v39 = 2081;
            int v40 = v20;
            __int16 v41 = 2081;
            id v42 = v21;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut SPD successfully received ut observation action\", \"action\":%{private, location:escape_only}s, \"address\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
          }
        }
LABEL_25:
        __int16 v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v15 = [v13 countByEnumeratingWithState:&v31 objects:v35 count:16];
      if (!v15) {
        return;
      }
    }
  }
  if (qword_102419490 != -1) {
    dispatch_once(&qword_102419490, &stru_10232A4C8);
  }
  id v2 = qword_102419498;
  if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
  {
    id v3 = [(NSString *)v30 UTF8String];
    id v4 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
    uint64_t buf = 68289795;
    __int16 v37 = 2082;
    BOOL v38 = "";
    __int16 v39 = 2081;
    int v40 = v3;
    __int16 v41 = 2081;
    id v42 = v4;
    __int16 v43 = 2081;
    id v44 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"action\":%{private, location:escape_only}s, \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
  }
  id v6 = qword_102419498;
  if (os_signpost_enabled((os_log_t)qword_102419498))
  {
    uint64_t v7 = [(NSString *)v30 UTF8String];
    id v8 = [[[*(id *)(a1 + 40) address] hexString] UTF8String];
    id v9 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
    uint64_t buf = 68289795;
    __int16 v37 = 2082;
    BOOL v38 = "";
    __int16 v39 = 2081;
    int v40 = v7;
    __int16 v41 = 2081;
    id v42 = v8;
    __int16 v43 = 2081;
    id v44 = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut received error in notifying SPD", "{\"msg%{public}.0s\":\"#ut received error in notifying SPD\", \"action\":%{private, location:escape_only}s, \"address\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
  }
  uint64_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@_%@", v30, +[CLTrackingAvoidanceService convertSPTrackingAvoidanceErrorToString:](CLTrackingAvoidanceService, "convertSPTrackingAvoidanceErrorToString:", [*(id *)(a1 + 32) code]));
  uint64_t v11 = *(void *)(a1 + 48) + 224;
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100B7BCD4(v11, v10, Current);
}

id sub_1014DA514(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKey:*(void *)(a1 + 40)];
  if (result)
  {
    id v3 = result;
    dispatch_release((dispatch_object_t)[result fetchGroup]);
    id v4 = [objc_alloc((Class)TAAISFetchSuccess) initWithUUID:*(void *)(a1 + 40) withAISInfo:objc_msgSend(v3, "accessoryInfo") successType:0 date:[+[NSDate now](NSDate, "now")]];
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v5 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      v8[0] = 68289539;
      v8[1] = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2113;
      uint64_t v12 = v6;
      __int16 v13 = 1025;
      int v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut AIS fetch timeout fired\", \"uuid\":%{private, location:escape_only}@, \"success\":%{private}hhd}", (uint8_t *)v8, 0x22u);
    }
    [*(id *)(a1 + 32) ingestTAEventIfTAServiceRunning:v4];
    id v7 = v4;
    [*(id *)(*(void *)(a1 + 32) + 1168) removeObjectForKey:*(void *)(a1 + 40)];
    return [*(id *)(*(void *)(a1 + 32) + 40) cleanUpTAUnknownBeaconRecord:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_1014DF6BC(_Unwind_Exception *a1)
{
}

void sub_1014DF74C(uint64_t a1, void *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (sub_1004D1284(*(void *)(a1 + 48), (const char *)[a2 cStringUsingEncoding:1], &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    id v5 = +[NSString stringWithUTF8String:p_p];
  }
  else
  {
    if (![*(id *)(a1 + 40) objectForKeyedSubscript:a2]) {
      goto LABEL_9;
    }
    id v5 = (NSString *)[*(id *)(a1 + 40) objectForKeyedSubscript:a2];
  }
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:a2];
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1014DF810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014DF82C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(&STACK[0x310], 8) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1014DF848(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1014DFBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014E0BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

id sub_1014E0FA8(uint64_t a1)
{
  id v2 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1014E103C;
  v4[3] = &unk_10229FF28;
  int8x16_t v5 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  uint64_t v6 = *(void *)(a1 + 48);
  return [v2 async:v4];
}

id sub_1014E103C(uint64_t a1)
{
  if (qword_102419490 != -1) {
    dispatch_once(&qword_102419490, &stru_10232A4C8);
  }
  id v2 = qword_102419498;
  if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Updating Significant Locations from Auth Cache Notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    __int16 v9 = 0;
    int8x16_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTrackingAvoidanceService fetchStatusOfUTEnablementRequirementsForClient:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id v3 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1014E1234;
  v6[3] = &unk_10232A4A8;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v8 = v3;
  return [v3 getAuthorizationContextOfNonZonalClient:@"com.apple.locationd.bundle-/System/Library/LocationBundles/Routine.bundle" withReply:v6];
}

void sub_1014E1234(uint64_t a1, void *a2)
{
  [*(id *)(a1 + 32) didFetchSignficantLocationsStatus:objc_msgSend(a2, "isAuthorizedForServiceTypeMask:", 64) forClient:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 48);
}

id sub_1014E15BC(id *a1)
{
  id result = a1[4];
  if (result)
  {
    dispatch_release((dispatch_object_t)[result fetchGroup]);
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v3 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [a1[5] identifier];
      unsigned int v5 = [a1[4] allSuccess];
      id v6 = [[objc_msgSend(a1[4], "accessoryInfo") descriptionDictionary];
      v9[0] = 68289795;
      v9[1] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2113;
      id v13 = v4;
      __int16 v14 = 1025;
      unsigned int v15 = v5;
      __int16 v16 = 2113;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut #posh AIS fetch done\", \"uuid\":%{private, location:escape_only}@, \"success\":%{private}hhd, \"info\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x2Cu);
    }
    id v7 = [objc_alloc((Class)TAAISFetchSuccess) initWithUUID:[a1[5] identifier] withAISInfo:[a1[4] accessoryInfo] successType:[a1[4] allSuccess] date:[+[NSDate now](NSDate, "now")]];
    [a1[6] ingestTAEventIfTAServiceRunning:v7];
    id v8 = v7;
    [*((id *)a1[6] + 146) removeObjectForKey:[a1[5] identifier]];
    return [*((id *)a1[6] + 5) cleanUpTAUnknownBeaconRecord:[a1[5] identifier]];
  }
  return result;
}

id sub_1014E1A68(id *a1)
{
  id result = a1[4];
  if (result)
  {
    dispatch_release((dispatch_object_t)[result fetchGroup]);
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v3 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [a1[5] identifier];
      unsigned int v5 = [a1[4] allSuccess];
      id v6 = [objc_msgSend(a1[4], "accessoryInfo") descriptionDictionary];
      v9[0] = 68289795;
      v9[1] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2113;
      id v13 = v4;
      __int16 v14 = 1025;
      unsigned int v15 = v5;
      __int16 v16 = 2113;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ut AIS fetch done\", \"uuid\":%{private, location:escape_only}@, \"success\":%{private}hhd, \"info\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x2Cu);
    }
    id v7 = [objc_alloc((Class)TAAISFetchSuccess) initWithUUID:[a1[5] identifier] withAISInfo:[a1[4] accessoryInfo] successType:[a1[4] allSuccess] date:[+[NSDate now](NSDate, "now")]];
    [a1[6] ingestTAEventIfTAServiceRunning:v7];
    id v8 = v7;
    [*((id *)a1[6] + 146) removeObjectForKey:[a1[5] identifier]];
    return [*((id *)a1[6] + 5) cleanUpTAUnknownBeaconRecord:[a1[5] identifier]];
  }
  return result;
}

void sub_1014E3090(id a1)
{
  qword_102419498 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackingAvoidance");
}

void sub_1014E30C0(uint64_t a1, char a2)
{
  if ((a2 & 3) == 1)
  {
    id v3 = [@"tap-to-radar://new" mutableCopy];
    [v3 appendString:@"?Title=Offline%20Device%20Issues%20Detected"];
    [v3 appendString:@"&Classification=Other%20Bug"];
    [v3 appendString:@"&ComponentID=1074997&ComponentName=TrackingAvoidance&ComponentVersion=New%20Bugs"];
    [v3 appendString:@"&Reproducibility=I%20Didn't%20Try"];
    [v3 appendFormat:@"&Description=%@", [@"Please help us by answering the following questions to the best of your ability\n\nWhat activities have you engaged in in the past 30 minutes?\nWhat kind of device is this in relation to your Offline Device? (ME:Non-ME:Shared)" stringByAddingPercentEncodingWithAllowedCharacters:+[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")]];
    id v4 = +[NSURL URLWithString:v3];

    id v5 = +[LSApplicationWorkspace defaultWorkspace];
    [v5 openURL:v4 configuration:0 completionHandler:&stru_10232A4E8];
  }
}

void sub_1014E31B4(id a1, NSDictionary *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v3 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      id v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut ut detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
    }
    id v4 = qword_102419498;
    if (os_signpost_enabled((os_log_t)qword_102419498))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      id v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut ut detection failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#ut ut detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1014E3324(uint64_t a1, char a2)
{
  if ((a2 & 3) == 1)
  {
    id v3 = [@"tap-to-radar://new" mutableCopy];
    [v3 appendString:@"?Title=UT%20Staging%20Issues"];
    [v3 appendString:@"&Classification=Other%20Bug"];
    [v3 appendString:@"&ComponentID=1074997&ComponentName=TrackingAvoidance&ComponentVersion=New%20Bugs"];
    [v3 appendString:@"&Reproducibility=I%20Didn't%20Try"];
    [v3 appendFormat:@"&Description=%@", [@"Additional Information:" stringByAddingPercentEncodingWithAllowedCharacters:+[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")]];
    id v4 = +[NSURL URLWithString:v3];

    id v5 = +[LSApplicationWorkspace defaultWorkspace];
    [v5 openURL:v4 configuration:0 completionHandler:&stru_10232A508];
  }
}

void sub_1014E3418(id a1, NSDictionary *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_102419490 != -1) {
      dispatch_once(&qword_102419490, &stru_10232A4C8);
    }
    id v3 = qword_102419498;
    if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      id v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#ut ut staged detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419490 != -1) {
        dispatch_once(&qword_102419490, &stru_10232A4C8);
      }
    }
    id v4 = qword_102419498;
    if (os_signpost_enabled((os_log_t)qword_102419498))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      id v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ut ut staged detection failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#ut ut staged detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1014E3588()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0D220;
      v0[3] = unk_101E0D230;
      v0[4] = xmmword_101E0D240;
      v0[0] = xmmword_101E0D200;
      v0[1] = unk_101E0D210;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1014E3668(_Unwind_Exception *a1)
{
}

void sub_1014E3680()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1014E3700()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1014E3790(_Unwind_Exception *a1)
{
}

uint64_t sub_1014E37A8()
{
  sub_100134750(&stru_1024881F0, "TrackingAvoidanceService");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &stru_1024881F0, (void *)&_mh_execute_header);
}

uint64_t sub_1014E3808(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t a9)
{
  __int16 v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v31 = *a4;
  long long v32 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v29 = *a5;
  id v30 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v14 = (std::__shared_weak_count *)a6[1];
  uint64_t v27 = *a6;
  uint64_t v28 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v26[0] = xmmword_102488228;
  v26[1] = unk_102488238;
  v26[2] = xmmword_102488248;
  sub_100D6AEB4(a1, a2, 2, &v31, &v29, &v27, a9, a8, v26);
  if (v28) {
    sub_1000DB0A0(v28);
  }
  if (v30) {
    sub_1000DB0A0(v30);
  }
  if (v32) {
    sub_1000DB0A0(v32);
  }
  *(void *)a1 = off_10232A5C0;
  *(void *)(a1 + 352) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 360) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = *a7;
  uint64_t v16 = a7[1];
  *(void *)(a1 + 376) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 392) = 2000;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 44_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 40_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 424) = a1 + 432;
  *(void *)(a1 + 432) = 0;
  id v17 = (uint64_t *)(a1 + 448);
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352), a1 + 392) & 1) == 0) {
    *(_DWORD *)(a1 + 392) = 2000;
  }
  id v18 = sub_1014122A8();
  if (sub_1014127E0((uint64_t)v18)) {
    operator new();
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10232A6C0);
  }
  __int16 v19 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApHarvester got disabled by CLWifi1Settings!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10232A6C0);
    }
    __int16 v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSubHarvesterWifi::CLSubHarvesterWifi(id<CLIntersiloUniverse>, std::shared_ptr<CLWifiHarvestInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Configuration>, std::shared_ptr<CLHarvestSystemInterface::StatusMonitor>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLHarvestMonitorInterface::Gps>, CLHNetworkController *, CLHRequestStore *)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  uint64_t v20 = *v17;
  uint64_t *v17 = 0;
  if (v20) {
    sub_1014E5F9C(a1 + 448, v20);
  }
  *(void *)(a1 + 384) = [*(id *)(a1 + 72) classifyingStoreForHarvester:2];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10232A6E0);
  }
  id v21 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    double v23 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)uint64_t buf = 68289795;
    int v34 = 0;
    __int16 v35 = 2082;
    uint64_t v36 = "";
    __int16 v37 = 2050;
    uint64_t v38 = 2;
    __int16 v39 = 2049;
    uint64_t v40 = v22;
    __int16 v41 = 2049;
    double v42 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestPointCount\":%{private}lu, \"timeSinceLastUpload_s\":\"%{private}.09f\"}", buf, 0x30u);
  }
  sub_100D39C5C();
  return a1;
}

void sub_1014E3C90(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1014E5F9C((uint64_t)v2, v4);
  }
  sub_1000F5BB0(v1 + 424, *(void **)(v1 + 432));
  int v5 = *(std::__shared_weak_count **)(v1 + 376);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  int v6 = *(std::__shared_weak_count **)(v1 + 360);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1014E3D38(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t a9)
{
  return sub_1014E3808(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1014E3D44(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v11);
  uint64_t v4 = (_OWORD *)(a1 + 280);
  long long v5 = unk_102488238;
  *uint64_t v4 = xmmword_102488228;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = unk_102488241;
  if (sub_100012960(a2, "Wifi", v11)) {
    sub_1012B77D8((uint64_t)v4, (uint64_t)v11);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10232A6E0);
  }
  int v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B7520();
    if (v10 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)uint64_t buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = 2;
    __int16 v18 = 2081;
    __int16 v19 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v11);
}

void sub_1014E3ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014E3EEC(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102488260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102488260))
  {
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) & 2) != 0) {
      unsigned int v2 = ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) >> 3) & 1;
    }
    else {
      LOBYTE(v2) = 0;
    }
    byte_102488258 = v2;
    __cxa_guard_release(&qword_102488260);
  }
  return byte_102488258;
}

void sub_1014E3FBC(_Unwind_Exception *a1)
{
}

uint64_t sub_1014E3FD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 2);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 8);
  return 1;
}

uint64_t sub_1014E406C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 2);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32);

  return v6(v4, v5, 8);
}

void sub_1014E410C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = *(double *)(a4 + 76);
  double v7 = *(double *)(a1 + 408);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10232A6E0);
  }
  double v8 = v6 - v7;
  __int16 v9 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B77B0(a1 + 280);
    uint64_t v11 = v10;
    int v12 = *(_DWORD *)(a1 + 392);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    int v23 = 68290307;
    int v24 = 0;
    __int16 v25 = 2082;
    id v26 = "";
    __int16 v27 = 2050;
    uint64_t v28 = 2;
    __int16 v29 = 2049;
    double v30 = v8;
    __int16 v31 = 2049;
    uint64_t v32 = v11;
    __int16 v33 = 1025;
    int v34 = v12;
    __int16 v35 = 2049;
    uint64_t v36 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onGpsNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{private}.09f\", \"harvestInterval_s\":\"%{private}.09f\", \"maxHarvestPointCount\":%{private}d, \"curHarvestPointCount\":%{private}lu}", (uint8_t *)&v23, 0x40u);
  }
  sub_1012B77B0(a1 + 280);
  if (v8 >= v14
    && ((*(_DWORD *)(a1 + 392) & 0x80000000) != 0
     || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 392)))
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 232))(*(void *)(a1 + 56)))
    {
      uint64_t v15 = sub_1014E4474(a1);
      char v16 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352), v15, 1, 1);
      *(void *)(a1 + 40_Block_object_dispose(&STACK[0x310], 8) = *(void *)(a4 + 76);
      if ((v16 & 1) == 0)
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_10232A6E0);
        }
        uint64_t v17 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 68289539;
          int v24 = 0;
          __int16 v25 = 2082;
          id v26 = "";
          __int16 v27 = 2050;
          uint64_t v28 = 2;
          __int16 v29 = 2049;
          *(void *)&double v30 = (int)v15;
          __int16 v18 = "{\"msg%{public}.0s\":\"#warning: could not scan wifi\", \"subHarvester\":%{public, location:CLSubHarvest"
                "erIdentifier}lld, \"scanType\":%{private, location:CLWifiService_Type::ScanType}lld}";
          __int16 v19 = v17;
          os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
          uint32_t v21 = 38;
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, (uint8_t *)&v23, v21);
        }
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10232A6E0);
      }
      uint64_t v22 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v23 = 68289282;
        int v24 = 0;
        __int16 v25 = 2082;
        id v26 = "";
        __int16 v27 = 2050;
        uint64_t v28 = 2;
        __int16 v18 = "{\"msg%{public}.0s\":\"wifi not powered on; not scanning\", \"subHarvester\":%{public, location:CLSubHarve"
              "sterIdentifier}lld}";
        __int16 v19 = v22;
        os_log_type_t v20 = OS_LOG_TYPE_DEBUG;
        uint32_t v21 = 28;
        goto LABEL_18;
      }
    }
  }
}

uint64_t sub_1014E4474(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102488270, memory_order_acquire) & 1) == 0)
  {
    uint64_t v7 = a1;
    int v8 = __cxa_guard_acquire(&qword_102488270);
    a1 = v7;
    if (v8)
    {
      dword_102488268 = (*(uint64_t (**)(void))(**(void **)(v7 + 56) + 72))(*(void *)(v7 + 56));
      __cxa_guard_release(&qword_102488270);
      a1 = v7;
    }
  }
  uint64_t v1 = (char *)&unk_101E0D270;
  if ((dword_102488268 & 0x80000) != 0)
  {
    unsigned int v2 = 7;
  }
  else
  {
    uint64_t v1 = (char *)&unk_101E0D277;
    unsigned int v2 = 2;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 416);
  uint64_t v4 = v1[v3];
  *(_DWORD *)(a1 + 416) = ((int)v3 + 1) % v2;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10232A6E0);
  }
  uint64_t v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v9[0] = 68289539;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    uint64_t v13 = 2;
    __int16 v14 = 2049;
    uint64_t v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"next scan type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"nextScanType\":%{private, location:CLWifiService_Type::ScanType}lld}", (uint8_t *)v9, 0x26u);
  }
  return v4;
}

void sub_1014E4620(_Unwind_Exception *a1)
{
}

void sub_1014E4638(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 3)
  {
    uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 368) + 56))(*(void *)(a1 + 368));
    sub_1014E46B0(a1, v7, 3, a4);
  }
}

void sub_1014E46B0(uint64_t a1, _OWORD *a2, int a3, uint64_t a4)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 184))(*(void *)(a1 + 56)))
  {
    if (*(void *)(a1 + 448)
      && (*(unsigned int (**)(void))(**(void **)(a1 + 368) + 64))(*(void *)(a1 + 368)))
    {
      id v8 = sub_1014E4BB8(a1, a2);
      id v9 = [*(id *)(a1 + 384) classifyLoiTypeForLocation:v8];

      sub_10049CCBC(*(void *)(a1 + 448), (uint64_t)a2, a3, a4, (uint64_t)v9);
    }
    if (a3 == 3)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10232A6E0);
      }
      __int16 v10 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(void *)&double v11 = *(char *)(a4 + 1);
        *(_DWORD *)uint64_t buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)__int16 v29 = 2082;
        *(void *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2050;
        *(void *)&v29[12] = 2;
        __int16 v30 = 2049;
        double v31 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWifiNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"scanType\":%{private, location:CLWifiService_Type::ScanType}lld}", buf, 0x26u);
      }
      BOOL v12 = *(unsigned __int8 *)(a4 + 1) > 4u;
    }
    else
    {
      BOOL v12 = 1;
    }
    double v17 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    double v18 = *(double *)(a1 + 400);
    sub_1012B77B0(a1 + 280);
    double v19 = vabdd_f64(v17, v18);
    double v21 = v20 * 0.5;
    if (v19 <= v20 * 0.5 && v12)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10232A6E0);
      }
      uint64_t v23 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)__int16 v29 = 2082;
        *(void *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2050;
        *(void *)&v29[12] = 2;
        __int16 v30 = 2049;
        double v31 = v19;
        __int16 v32 = 2049;
        double v33 = v21;
        __int16 v14 = "{\"msg%{public}.0s\":\"scans are too frequent, ignoring scan\", \"subHarvester\":%{public, location:CLSubH"
              "arvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{private}.09f\", \"allowedWifiScansInterval_s\":\"%{private}.09f\"}";
        uint64_t v15 = v23;
        uint32_t v16 = 48;
        goto LABEL_24;
      }
    }
    else
    {
      if ((*(_DWORD *)(a1 + 392) & 0x80000000) != 0
        || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 392))
      {
        uint64_t v26 = 0;
        *(void *)uint64_t buf = 0;
        *(void *)__int16 v29 = 0;
        *(void *)&v29[8] = 0;
        (*(void (**)(void, uint8_t *, uint64_t *))(**(void **)(a1 + 56) + 240))(*(void *)(a1 + 56), buf, &v26);
        sub_1014E4DAC(a1, a2, buf, *(char *)(a4 + 1));
        *(_DWORD *)(a1 + 204) -= 1171354717 * ((*(void *)v29 - *(void *)buf) >> 3);
        __int16 v27 = buf;
        sub_1000D7F78((void ***)&v27);
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_10232A6E0);
        }
        int v24 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          int v25 = *(_DWORD *)(a1 + 392);
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)__int16 v29 = 2082;
          *(void *)&v29[2] = "";
          *(_WORD *)&v29[10] = 2050;
          *(void *)&v29[12] = 2;
          __int16 v30 = 1025;
          LODWORD(v31) = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"wifi scan exceeds max locations - ignoring\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}d}", buf, 0x22u);
        }
      }
      *(double *)(a1 + 400) = v17;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10232A6E0);
    }
    uint64_t v13 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v29 = 2082;
      *(void *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2050;
      *(void *)&v29[12] = 2;
      __int16 v14 = "{\"msg%{public}.0s\":\"not harvesting eligible - skipping\", \"subHarvester\":%{public, location:CLSubHarves"
            "terIdentifier}lld}";
      uint64_t v15 = v13;
      uint32_t v16 = 28;
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, v14, buf, v16);
    }
  }
}

void sub_1014E4B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

id sub_1014E4BB8(uint64_t a1, _OWORD *a2)
{
  id v4 = objc_alloc((Class)CLPLocation);
  long long v5 = a2[5];
  v39[4] = a2[4];
  v39[5] = v5;
  long long v6 = a2[3];
  v39[2] = a2[2];
  void v39[3] = v6;
  *(_OWORD *)&v40[12] = *(_OWORD *)((char *)a2 + 140);
  long long v7 = a2[8];
  long long v8 = a2[6];
  v39[7] = a2[7];
  *(_OWORD *)uint64_t v40 = v7;
  v39[6] = v8;
  long long v9 = a2[1];
  v39[0] = *a2;
  v39[1] = v9;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
  v37[0] = *(_OWORD *)v10;
  long long v12 = *(_OWORD *)(v10 + 16);
  long long v11 = *(_OWORD *)(v10 + 32);
  long long v13 = *(_OWORD *)(v10 + 64);
  v37[3] = *(_OWORD *)(v10 + 48);
  v37[4] = v13;
  v37[1] = v12;
  long long v14 = *(_OWORD *)(v10 + 80);
  long long v15 = *(_OWORD *)(v10 + 96);
  long long v16 = *(_OWORD *)(v10 + 112);
  uint64_t v38 = *(void *)(v10 + 128);
  v37[6] = v15;
  v37[7] = v16;
  v37[5] = v14;
  v37[2] = v11;
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
  v35[0] = *(_OWORD *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  long long v19 = *(_OWORD *)(v17 + 32);
  long long v20 = *(_OWORD *)(v17 + 64);
  v35[3] = *(_OWORD *)(v17 + 48);
  v35[4] = v20;
  v35[1] = v18;
  v35[2] = v19;
  long long v21 = *(_OWORD *)(v17 + 80);
  long long v22 = *(_OWORD *)(v17 + 96);
  long long v23 = *(_OWORD *)(v17 + 112);
  uint64_t v36 = *(void *)(v17 + 128);
  v35[6] = v22;
  v35[7] = v23;
  v35[5] = v21;
  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
  v33[0] = *(_OWORD *)v24;
  long long v25 = *(_OWORD *)(v24 + 64);
  long long v27 = *(_OWORD *)(v24 + 16);
  long long v26 = *(_OWORD *)(v24 + 32);
  v33[3] = *(_OWORD *)(v24 + 48);
  v33[4] = v25;
  v33[1] = v27;
  v33[2] = v26;
  long long v29 = *(_OWORD *)(v24 + 96);
  long long v28 = *(_OWORD *)(v24 + 112);
  long long v30 = *(_OWORD *)(v24 + 80);
  uint64_t v34 = *(void *)(v24 + 128);
  v33[6] = v29;
  v33[7] = v28;
  v33[5] = v30;
  uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
  return [v4 initWithDaemonLocation:v39 rawMotionActivity:v37 motionActivity:v35 dominantMotionActivity:v33 vehicleConnected:v31 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
}

void sub_1014E4DAC(uint64_t a1, _OWORD *a2, void *a3, int a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 48))(*(void *)(a1 + 352), __p);
  int v9 = *(_DWORD *)(a1 + 392);
  if (v9 < 0)
  {
    unint64_t v12 = -1;
    BOOL v11 = 1;
  }
  else
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    BOOL v11 = v9 - v10 == -1;
    if (v9 == v10) {
      goto LABEL_3;
    }
    unint64_t v12 = v9 - v10;
  }
  unint64_t v13 = 0;
  unsigned int v14 = 1;
  do
  {
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a3[1] - *a3) >> 3) <= v13) {
      break;
    }
    if (!sub_1014E5100(a1, a2, *a3 + 88 * v13, v8, a4))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10232A6E0);
      }
      long long v15 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        long long v22 = "";
        __int16 v23 = 2050;
        uint64_t v24 = 2;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Failed to harvest wifi point\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      }
    }
    unint64_t v13 = v14;
    char v16 = v12 > v14++ || v11;
  }
  while ((v16 & 1) != 0);
LABEL_3:
  sub_100D6B950(a1);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1014E4FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1014E4FF4(uint64_t a1)
{
  return [*(id *)(a1 + 384) count];
}

void sub_1014E4FFC(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  [*(id *)(a1 + 384) pruneSecondaryDataOlderThan:v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1)];
  sub_100D39C5C();
  uint64_t v3 = *(void *)(a1 + 448);
  if (v3)
  {
    sub_10049D090(v3);
  }
}

void sub_1014E50B0(uint64_t a1)
{
  [*(id *)(a1 + 72) clearDataForHarvester:2];
  uint64_t v2 = *(void *)(a1 + 448);
  if (v2)
  {
    sub_10049CEF4(v2);
  }
}

BOOL sub_1014E5100(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(_DWORD *)(a3 + 36) != 2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10232A6E0);
    }
    uint64_t v14 = qword_102419568;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    std::string::size_type v44 = *(void *)a3;
    sub_10006DE8C(&v50);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = &v50;
    }
    else {
      long long v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    int v16 = *(_DWORD *)(a3 + 36);
    *(_DWORD *)uint64_t buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = 2;
    __int16 v46 = 2081;
    __int16 v47 = v15;
    __int16 v48 = 1025;
    LODWORD(v49) = v16;
    uint64_t v17 = "{\"msg%{public}.0s\":\"not an infrastructure ap, not harvesting\", \"subHarvester\":%{public, location:CLSubHa"
          "rvesterIdentifier}lld, \"macAddress\":%{private, location:escape_only}s, \"mode\":%{private}d}";
    uint64_t v18 = v14;
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, v17, buf, 0x2Cu);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 352) + 40))(*(void *)(a1 + 352), *(unsigned int *)(a3 + 32)))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10232A6E0);
    }
    int v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      int v10 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 2;
      __int16 v46 = 1025;
      LODWORD(v47) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"bad wifi RSSI\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rssi\":%{private}d}", buf, 0x22u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10232A6E0);
      }
    }
    BOOL v11 = qword_102419568;
    BOOL result = os_signpost_enabled((os_log_t)qword_102419568);
    if (result)
    {
      int v13 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 2;
      __int16 v46 = 1025;
      LODWORD(v47) = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "bad wifi RSSI", "{\"msg%{public}.0s\":\"bad wifi RSSI\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rssi\":%{private}d}", buf, 0x22u);
      return 0;
    }
    return result;
  }
  if (sub_10137D058(a3))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10232A6E0);
    }
    long long v19 = qword_102419568;
    BOOL v20 = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v20)
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 2;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ignoring _nomap ssid\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      return 0;
    }
    return result;
  }
  *(void *)uint64_t buf = *(void *)a3;
  uint64_t v21 = sub_1000D8908((uint64_t)buf);
  uint64_t v43 = a1;
  std::string::size_type v44 = v21;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  __int16 v41 = sub_1014E5C40;
  double v42 = &unk_10232A688;
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
    || (unint64_t v22 = v41((uint64_t)v40, v21),
        v22 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24))))
  {
    __int16 v23 = (std::string *)objc_alloc_init((Class)CLPWifiAPLocation);
    id v24 = sub_1014E4BB8(a1, a2);
    unk_102496F20(v23, "setLocation:", v24);

    v50.__r_.__value_.__r.__words[0] = *(void *)a3;
    sub_10006DE8C((std::string *)buf);
    if (buf[23] >= 0) {
      long long v25 = buf;
    }
    else {
      long long v25 = *(unsigned char **)buf;
    }
    unk_102496F28(v23, "setMac:", +[NSString stringWithUTF8String:v25]);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    unk_102496F30(v23, "setChannel:", *(unsigned int *)(a3 + 40));
    if (*(char *)(a3 + 31) < 0)
    {
      sub_1000DC48C(buf, *(void **)(a3 + 8), *(void *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)uint64_t buf = *(_OWORD *)(a3 + 8);
      *(void *)&uint8_t buf[16] = *(void *)(a3 + 24);
    }
    uint64_t v31 = buf[23];
    if (buf[23] < 0) {
      uint64_t v31 = *(void *)&buf[8];
    }
    unk_102496F38(v23, "setHidden:", v31 == 0);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    unk_102496F40(v23, "setRssi:", *(unsigned int *)(a3 + 32));
    unk_102496F48(v23, "setScanTimestamp:", *(double *)(a3 + 56));
    uint64_t v32 = 1;
    switch(a5)
    {
      case -1:
      case 13:
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_10232A6E0);
        }
        double v33 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = a5;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#Warning skipping harvesting CLWifiService_Type::ScanType %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_10232A6E0);
          }
          LODWORD(v50.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v50.__r_.__value_.__r.__words[0]) = a5;
          uint64_t v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSubHarvesterWifi::harvestWifi(const CLDaemonLocation &, const CLWifiService_Type::AccessPoint &, const std::string &, CLWifiService_Type::ScanType)", "%s\n", v34);
          goto LABEL_63;
        }
        break;
      case 0:
        goto LABEL_77;
      case 1:
        uint64_t v32 = 2;
        goto LABEL_77;
      case 2:
        uint64_t v32 = 3;
        goto LABEL_77;
      case 3:
        uint64_t v32 = 4;
        goto LABEL_77;
      case 4:
        uint64_t v32 = 5;
        goto LABEL_77;
      case 5:
        uint64_t v32 = 6;
        goto LABEL_77;
      case 6:
        uint64_t v32 = 7;
        goto LABEL_77;
      case 7:
        uint64_t v32 = 8;
        goto LABEL_77;
      case 8:
        uint64_t v32 = 9;
        goto LABEL_77;
      case 9:
        uint64_t v32 = 10;
        goto LABEL_77;
      case 10:
        uint64_t v32 = 11;
        goto LABEL_77;
      case 11:
        uint64_t v32 = 12;
        goto LABEL_77;
      case 12:
        uint64_t v32 = 13;
LABEL_77:
        unk_102496F50(v23, "setScanType:", v32);
        break;
      default:
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_10232A6E0);
        }
        __int16 v35 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = a5;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "Unknown scan type for wifi harvesting: %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_10232A6E0);
          }
          LODWORD(v50.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v50.__r_.__value_.__r.__words[0]) = a5;
          uint64_t v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSubHarvesterWifi::harvestWifi(const CLDaemonLocation &, const CLWifiService_Type::AccessPoint &, const std::string &, CLWifiService_Type::ScanType)", "%s\n", v34);
LABEL_63:
          if (v34 != buf) {
            free(v34);
          }
        }
        break;
    }
    [*(id *)(a1 + 384) writeSecondaryObject:v23 collectedAt:v24 toField:3];
    ++*(_DWORD *)(a1 + 208);
    uint64_t v36 = (uint64_t **)(a1 + 424);
    *(void *)uint64_t buf = &v44;
    __int16 v37 = sub_10017C9B0((uint64_t **)(a1 + 424), &v44, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
    ++v37[5];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10232A6E0);
    }
    uint64_t v38 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(void *)uint64_t buf = &v44;
      uint64_t v39 = sub_10017C9B0(v36, &v44, (uint64_t)&unk_101D0B290, (uint64_t **)buf)[5];
      *(_DWORD *)uint64_t buf = 68289795;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 2;
      __int16 v46 = 2113;
      __int16 v47 = v23;
      __int16 v48 = 2049;
      uint64_t v49 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"wifiHarvest\":%{private, location:escape_only}@, \"measurementCount\":%{private}lu}", buf, 0x30u);
    }

    return 1;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10232A6E0);
  }
  uint64_t v26 = qword_102419568;
  BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    sub_10006DE8C(&v50);
    int v27 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
    std::string::size_type v28 = v50.__r_.__value_.__r.__words[0];
    int v29 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
    long long v30 = &v50;
    *(_DWORD *)uint64_t buf = 68289795;
    if (v27 < 0) {
      long long v30 = (std::string *)v28;
    }
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = 2;
    __int16 v46 = 2081;
    __int16 v47 = v30;
    __int16 v48 = 1025;
    LODWORD(v49) = v29;
    uint64_t v17 = "{\"msg%{public}.0s\":\"exceeds max locations - ignoring\", \"subHarvester\":%{public, location:CLSubHarvesterI"
          "dentifier}lld, \"macAddress\":%{private, location:escape_only}s, \"maxHarvestPointsPer\":%{private}d}";
    uint64_t v18 = v26;
    goto LABEL_17;
  }
  return result;
}

void sub_1014E5BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 73) < 0) {
    operator delete(*(void **)(v24 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014E5C40(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 432);
  if (!v3) {
    return 0;
  }
  id v4 = (void *)(v2 + 432);
  long long v5 = (void *)(v2 + 432);
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      long long v5 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v4 && v5[4] <= a2) {
    return v5[5];
  }
  else {
    return 0;
  }
}

void sub_1014E5C94(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)CLPCellWifiCollectionRequest);
  [v2 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
  id v3 = [*(id *)(a1 + 384) homeArchive];
  if ([v3 count])
  {
    [v3 overwritePrimaryObject:v2];
    id v4 = [[CLHUploadRequest alloc] initWithArchive:v3];
    -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", [objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint")]);
    [*(id *)(a1 + 80) submitRequest:v4];
  }
  id v5 = [*(id *)(a1 + 384) workArchive];
  if ([v5 count])
  {
    [v5 overwritePrimaryObject:v2];
    unint64_t v6 = [[CLHUploadRequest alloc] initWithArchive:v5];
    -[CLHUploadRequest setEndpoint:](v6, "setEndpoint:", [objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint")]);
    [*(id *)(a1 + 80) submitRequest:v6];
  }
  id v7 = [*(id *)(a1 + 384) mainArchive];
  if ([v7 count])
  {
    [v7 overwritePrimaryObject:v2];
    uint64_t v8 = [[CLHUploadRequest alloc] initWithArchive:v7];
    -[CLHUploadRequest setEndpoint:](v8, "setEndpoint:", [objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint")]);
    [*(id *)(a1 + 80) submitRequest:v8];
  }
  sub_1000F5BB0(a1 + 424, *(void **)(a1 + 432));
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 424) = a1 + 432;
}

uint64_t sub_1014E5E18(uint64_t a1)
{
  *(void *)a1 = off_10232A5C0;
  uint64_t v2 = *(void *)(a1 + 448);
  *(void *)(a1 + 44_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v2) {
    sub_1014E5F9C(a1 + 448, v2);
  }
  sub_1000F5BB0(a1 + 424, *(void **)(a1 + 432));
  id v3 = *(std::__shared_weak_count **)(a1 + 376);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 360);
  if (v4) {
    sub_1000DB0A0(v4);
  }

  return sub_1003C0998(a1);
}

void sub_1014E5EA0(uint64_t a1)
{
  *(void *)a1 = off_10232A5C0;
  uint64_t v2 = *(void *)(a1 + 448);
  *(void *)(a1 + 44_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v2) {
    sub_1014E5F9C(a1 + 448, v2);
  }
  sub_1000F5BB0(a1 + 424, *(void **)(a1 + 432));
  id v3 = *(std::__shared_weak_count **)(a1 + 376);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 360);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_1003C0998(a1);

  operator delete();
}

void sub_1014E5F3C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1014E5F6C(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_1014E5F9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(a2 + 24) = off_1023274E8;
    if (*(char *)(a2 + 111) < 0) {
      operator delete(*(void **)(a2 + 88));
    }
    if (*(char *)(a2 + 87) < 0) {
      operator delete(*(void **)(a2 + 64));
    }
    id v3 = *(std::__shared_weak_count **)(a2 + 16);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    operator delete();
  }
}

void sub_1014E6034()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1014E60EC(_Unwind_Exception *a1)
{
}

void sub_1014E6104()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1014E61AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1014E61C4()
{
  return sub_1012B748C((uint64_t)&xmmword_102488228, 1, 2, 2, 1, 30.0, 43200.0, 43200.0);
}

BOOL sub_1014E6204(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 128);
  if (!v4 || (int v5 = *(_DWORD *)(a2 + 128)) == 0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_10232A7E8);
    }
    int v10 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 128);
      int v12 = *(_DWORD *)(a2 + 128);
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)long long v19 = v11;
      *(_WORD *)&v19[4] = 1026;
      *(_DWORD *)&v19[6] = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Location equality comparison failed, unknown location type,%{public}d,%{public}d", buf, 0xEu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1)
    {
LABEL_27:
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL cllcf::LCFusionProviderLocation::checkLocationTypesAndTimestampsEquality(const LCFusionProviderLocation &) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0;
    }
LABEL_34:
    dispatch_once(&qword_102419510, &stru_10232A7E8);
    goto LABEL_27;
  }
  double v6 = *(double *)(a1 + 8);
  if (v6 > 0.0)
  {
    double v7 = *(double *)(a2 + 8);
    if (v7 > 0.0)
    {
      BOOL result = 0;
      if (v4 == v5 && vabdd_f64(v6, v7) < 2.22044605e-16)
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_10232A7E8);
        }
        int v9 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Location equality comparison, location types and timestamps are identical.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_10232A7E8);
          }
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL cllcf::LCFusionProviderLocation::checkLocationTypesAndTimestampsEquality(const LCFusionProviderLocation &) const", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
        (*(void (**)(uint64_t))(*(void *)a2 + 56))(a2);
        return 1;
      }
      return result;
    }
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_10232A7E8);
  }
  int v13 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a2 + 8);
    *(_DWORD *)uint64_t buf = 134349312;
    *(void *)long long v19 = v14;
    *(_WORD *)&v19[8] = 2050;
    uint64_t v20 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Location equality comparison failed, invalid location ios timestamp,%{public}.3f,%{public}.3f", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_27;
    }
    goto LABEL_34;
  }
  return result;
}

void sub_1014E6710(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

double sub_1014E671C(uint64_t a1)
{
  if (*(double *)(a1 + 16) <= 0.0)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_10232A7E8);
    }
    int v12 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,ProviderLoc,getAge called while MCT not set", buf, 2u);
    }
    double v11 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_10232A7E8);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval cllcf::LCFusionProviderLocation::getAge() const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_10232A7E8);
    }
    uint64_t v2 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 1;
      double v4 = sub_10016BA54(v3, buf);
      double v5 = *(double *)(a1 + 16);
      uint64_t v6 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 1;
      double v7 = sub_10016BA54(v6, buf);
      uint64_t v8 = sub_10016BA10();
      double v9 = sub_10018202C(v8);
      *(_DWORD *)uint64_t buf = 134218496;
      double v18 = v4 - v5;
      __int16 v19 = 2048;
      double v20 = v7;
      __int16 v21 = 2048;
      double v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ProviderLoc,getAge,age,%.3f,now_mct,%.3f,propagation_us,%.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_10232A7E8);
      }
      sub_1005B5034();
      sub_1005B5034();
      uint64_t v14 = sub_10016BA10();
      sub_10018202C(v14);
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval cllcf::LCFusionProviderLocation::getAge() const", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v10 = sub_10016BA10();
    *(_DWORD *)uint64_t buf = 1;
    return sub_10016BA54(v10, buf) - *(double *)(a1 + 16);
  }
  return v11;
}

void sub_1014E6AC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1014E6ACC(uint64_t a1)
{
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_10232A7E8);
  }
  uint64_t v2 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = *(void *)(a1 + 96);
    uint64_t v15 = *(void *)(a1 + 88);
    uint64_t v16 = *(void *)(a1 + 104);
    int v17 = *(_DWORD *)(a1 + 120);
    uint64_t v18 = *(void *)(a1 + 112);
    int v19 = *(unsigned __int8 *)(a1 + 124);
    uint64_t v10 = *(void *)(a1 + 8);
    double v11 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
    *(_DWORD *)uint64_t buf = 134352897;
    uint64_t v21 = v10;
    __int16 v22 = 2050;
    uint64_t v23 = v4;
    __int16 v24 = 1026;
    int v25 = v3;
    __int16 v26 = 2049;
    uint64_t v27 = v5;
    __int16 v28 = 2049;
    uint64_t v29 = v6;
    __int16 v30 = 2049;
    uint64_t v31 = v7;
    __int16 v32 = 2049;
    uint64_t v33 = v8;
    __int16 v34 = 2049;
    uint64_t v35 = v9;
    __int16 v36 = 2049;
    uint64_t v37 = v13;
    __int16 v38 = 2050;
    uint64_t v39 = v14;
    __int16 v40 = 2050;
    uint64_t v41 = v15;
    __int16 v42 = 2050;
    uint64_t v43 = v16;
    __int16 v44 = 1026;
    int v45 = v17;
    __int16 v46 = 2050;
    uint64_t v47 = v18;
    __int16 v48 = 1026;
    int v49 = v19;
    __int16 v50 = 2050;
    double v51 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ProviderLoc:Log,%{public}.3f,%{public}.3f,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d,%{public}.3f", buf, 0x96u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_10232A7E8);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void cllcf::LCFusionProviderLocation::debugPrint() const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1014E6EA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1014E6EB4(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = _Q0;
  *(_OWORD *)(a1 + 40) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 56) = xmmword_101D1C320;
  *(_DWORD *)(a1 + 72) = -1;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_OWORD *)(a1 + 96) = _Q0;
  *(void *)(a1 + 112) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 132) = _Q0;
  *(_DWORD *)(a1 + 140) = -1082130432;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  *(_DWORD *)(a1 + 160) = 0;
}

void sub_1014E6F30()
{
}

void *sub_1014E6F44(void *a1)
{
  *a1 = off_10232A780;
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_1014E6F90(void *a1)
{
  *a1 = off_10232A780;
  uint64_t v1 = (std::__shared_weak_count *)a1[19];
  if (v1) {
    sub_1000DB0A0(v1);
  }

  operator delete();
}

void sub_1014E6FFC(id a1)
{
  qword_102419518 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t sub_1014E702C(uint64_t a1)
{
  return a1;
}

double sub_1014E7058(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a4[1];
  *(void *)(a1 + 32) = *a4;
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a5[1];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = *a5;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 64) = xmmword_101E0D368;
  *(_OWORD *)(a1 + 80) = unk_101E0D378;
  *(_OWORD *)(a1 + 96) = xmmword_101E0D388;
  *(void *)&double result = 1092616192;
  *(_OWORD *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = *(long long *)((char *)&xmmword_101E0D388 + 12);
  return result;
}

void sub_1014E70E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = Current;
  *(_DWORD *)(a3 + 16) = -1;
  *(void *)(a3 + 24) = 0;
  double v7 = 0.0;
  if (*(int *)(a2 + 48) >= 30)
  {
    if (*(unsigned char *)(a1 + 121)
      && *(unsigned char *)(a1 + 122)
      && (float v9 = *(float *)(a1 + 76), v9 > 0.0)
      && (float v10 = *(float *)(a1 + 72), v10 > 0.0))
    {
      if (*(int *)(a2 + 40) < 1) {
        double v11 = 7.567717;
      }
      else {
        double v11 = *(double *)a2 / v9;
      }
      if (*(int *)(a2 + 44) <= 0) {
        double v13 = 1.8286;
      }
      else {
        double v13 = *(double *)(a2 + 8);
      }
      if (*(int *)(a2 + 52) <= 0) {
        double v14 = 498.0;
      }
      else {
        double v14 = *(double *)(a2 + 24);
      }
      if (*(int *)(a2 + 56) < 1) {
        double v15 = 0.369744;
      }
      else {
        double v15 = *(double *)(a2 + 32) / sqrt(v10 * 0.55 * 9.81);
      }
      sub_100134750(buf, "constant");
      double v16 = *(double *)sub_1014E763C((uint64_t)&unk_102488278, (const void **)buf);
      sub_100134750(&v37, "activeEnergyBurned");
      double v17 = *(double *)sub_1014E763C((uint64_t)&unk_102488278, (const void **)&v37);
      sub_100134750(v35, "meanMaxHRPerDay");
      double v26 = v17;
      double v27 = v16;
      double v28 = v15;
      double v18 = *(double *)sub_1014E763C((uint64_t)&unk_102488278, (const void **)v35);
      sub_100134750(v33, "meanRestingHRPerDay");
      double v19 = v14;
      double v20 = v13;
      double v21 = *(double *)sub_1014E763C((uint64_t)&unk_102488278, (const void **)v33);
      double v22 = *(double *)(a2 + 16);
      sub_100134750(v31, "mean6MWTDPerDay");
      double v23 = v11;
      double v24 = *(double *)sub_1014E763C((uint64_t)&unk_102488278, (const void **)v31);
      sub_100134750(__p, "meanWalkingSpeedPerDay");
      double v7 = v27
         + v26 * v23
         + v18 * v20
         + v21 * v22
         + v24 * v19
         + *(double *)sub_1014E763C((uint64_t)&unk_102488278, (const void **)__p) * v28;
      *(double *)(a3 + 24) = v7;
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      if (SBYTE3(v41) < 0) {
        operator delete(v37);
      }
      if (SBYTE3(v45) < 0) {
        operator delete(*(void **)buf);
      }
      sub_101A1F180(buf, "CardioChangeEstimatorThreshold", &qword_101E0D3A8, 0);
      unsigned int v8 = v7 > *(double *)v43;
    }
    else
    {
      unsigned int v8 = 2;
    }
  }
  else
  {
    unsigned int v8 = 3;
  }
  *(_DWORD *)(a3 + 16) = v8;
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_10232A808);
  }
  int v12 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67175169;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)uint64_t v43 = 2049;
    *(CFAbsoluteTime *)&v43[2] = Current;
    __int16 v44 = 2049;
    double v45 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Estimator,status,%{private}d,startTime,%{private}f,riskScore,%{private}f", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    LODWORD(v37) = 67175169;
    HIDWORD(v37) = v8;
    __int16 v38 = 2049;
    CFAbsoluteTime v39 = Current;
    __int16 v40 = 2049;
    double v41 = v7;
    int v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCardioChange::EstimateResult CLCardioChangeEstimator::makeEstimate(const CLCardioChange::InputSample &)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  if (v8 <= 1) {
    sub_100D34858(*(void *)a1, a3);
  }
}

void sub_1014E758C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014E763C(uint64_t a1, const void **a2)
{
  uint64_t v2 = *sub_1001070AC(a1, &v4, a2);
  if (!v2) {
    sub_10000EDDC("map::at:  key not found");
  }
  return v2 + 56;
}

void sub_1014E767C(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v3;
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_10232A808);
  }
  uint64_t v6 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 120);
    double v8 = *(float *)(a1 + 84);
    int v9 = *(_DWORD *)(a1 + 68);
    int v10 = *(unsigned __int8 *)(a1 + 121);
    double v11 = *(float *)(a1 + 72);
    int v12 = *(unsigned __int8 *)(a1 + 122);
    double v13 = *(float *)(a1 + 76);
    int v14 = *(unsigned __int8 *)(a1 + 112);
    *(_DWORD *)uint64_t buf = 67241985;
    int v17 = v7;
    __int16 v18 = 2049;
    double v19 = v8;
    __int16 v20 = 1025;
    int v21 = v9;
    __int16 v22 = 1026;
    int v23 = v10;
    __int16 v24 = 2049;
    double v25 = v11;
    __int16 v26 = 1026;
    int v27 = v12;
    __int16 v28 = 2049;
    double v29 = v13;
    __int16 v30 = 1025;
    int v31 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Estimator,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCardioChangeEstimator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_1014E7918(uint64_t a1, uint64_t **a2, double a3)
{
  std::string __p = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  LODWORD(v19) = 0;
  double v13 = &v19;
  uint64_t v6 = sub_1000FEE0C(a2, (int *)&v19, (uint64_t)&unk_101D0B290, (_DWORD **)&v13);
  sub_1014E7A88(a1, (uint64_t)&__p, *((double *)v6 + 5), a3);
  int v7 = (char *)__p;
  double v8 = v17;
  while (v7 != v8)
  {
    sub_100461D58(*(void *)(a1 + 16), (uint64_t)v7);
    v7 += 32;
  }
  double v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  int v12 = 1;
  double v19 = &v12;
  int v9 = sub_1000FEE0C(a2, &v12, (uint64_t)&unk_101D0B290, &v19);
  sub_1014E7E44(a1, (uint64_t)&v13, *((double *)v9 + 5), a3);
  int v10 = v13;
  double v11 = v14;
  if (v13 != v14)
  {
    do
    {
      sub_100461D58(*(void *)(a1 + 16), (uint64_t)v10);
      v10 += 4;
    }
    while (v10 != v11);
    int v10 = v13;
  }
  if (v10)
  {
    int v14 = v10;
    operator delete(v10);
  }
  if (__p)
  {
    int v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1014E7A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014E7A88(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (a3 == a4)
  {
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    double v8 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Up to date with processing data for VO2Max feature, startTime %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_10232A808);
      }
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = *(void **)&a3;
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCardioChangeEstimator::calculateVO2MaxFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  memset(__p, 0, 24);
  uint64_t v9 = (*(uint64_t (**)(void, void **, double, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), __p, a3, a4);
  if (v9 == 100)
  {
    sub_1014E8204(a3, a4, v9, (uint64_t *)__p, a2);
  }
  else
  {
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    int v10 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v15 = a3;
      __int16 v16 = 2050;
      double v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Estimator, failed to get VO2Max session records in time range, startTime: %{public}f, endTime: %{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_10232A808);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCardioChangeEstimator::calculateVO2MaxFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1014E7E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014E7E44(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (a3 == a4)
  {
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    double v8 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Up to date with processing data for HRRecovery feature, startTime %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_10232A808);
      }
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = *(void **)&a3;
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCardioChangeEstimator::calculateHRRecoveryFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  memset(__p, 0, 24);
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, void **, double, double))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), 0xFFFFFFFFLL, __p, a3, a4);
  if (v9 == 100)
  {
    sub_1014E85A0(a3, a4, v9, (uint64_t *)__p, a2);
  }
  else
  {
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    int v10 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v15 = a3;
      __int16 v16 = 2050;
      double v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Estimator, failed to get HRRecovery session records in time range, startTime: %{public}f, endTime: %{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_10232A808);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCardioChangeEstimator::calculateHRRecoveryFeatures(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1014E81DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014E8204(double a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  double v7 = a1;
  double v8 = a1 + 86400.0;
  uint64_t v10 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 == v9) {
    goto LABEL_49;
  }
LABEL_2:
  unsigned int v12 = 0;
  double v13 = v7;
  double v7 = v8;
  double v14 = 0.0;
  do
  {
    double v15 = *(double *)(v10 + 24);
    if (v15 < v13 || v15 >= v7)
    {
      double v17 = 0.0;
      if (v14 > 0.0) {
        double v17 = v14 / (double)v12;
      }
      double v19 = *(double **)(a5 + 8);
      unint64_t v18 = *(void *)(a5 + 16);
      if ((unint64_t)v19 >= v18)
      {
        int v21 = *(double **)a5;
        uint64_t v22 = ((uint64_t)v19 - *(void *)a5) >> 5;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59) {
          goto LABEL_70;
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 4 > v23) {
          unint64_t v23 = v24 >> 4;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          __int16 v26 = (char *)sub_1001D9EDC(a5 + 16, v25);
          int v21 = *(double **)a5;
          double v19 = *(double **)(a5 + 8);
        }
        else
        {
          __int16 v26 = 0;
        }
        int v27 = (double *)&v26[32 * v22];
        double *v27 = 0.0;
        v27[1] = v13;
        *((_DWORD *)v27 + 4) = 0;
        _OWORD v27[3] = v17;
        __int16 v28 = v27;
        if (v19 != v21)
        {
          do
          {
            long long v29 = *((_OWORD *)v19 - 1);
            *((_OWORD *)v28 - 2) = *((_OWORD *)v19 - 2);
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 4;
            v19 -= 4;
          }
          while (v19 != v21);
          int v21 = *(double **)a5;
        }
        __int16 v20 = (char *)(v27 + 4);
        *(void *)a5 = v28;
        *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v27 + 4;
        *(void *)(a5 + 16) = &v26[32 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *double v19 = 0.0;
        v19[1] = v13;
        *((_DWORD *)v19 + 4) = 0;
        __int16 v20 = (char *)(v19 + 4);
        v19[3] = v17;
      }
      *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v20;
      double v8 = v7 + 86400.0;
      uint64_t v9 = a4[1];
      double v13 = v7;
      if (v10 == v9) {
        goto LABEL_50;
      }
      goto LABEL_2;
    }
    double v14 = v14 + *(double *)(v10 + 136);
    ++v12;
    v10 += 144;
  }
  while (v10 != v9);
  if (v14 <= 0.0)
  {
    double v8 = v7;
    goto LABEL_50;
  }
  double v30 = v14 / (double)v12;
  char v32 = *(double **)(a5 + 8);
  unint64_t v31 = *(void *)(a5 + 16);
  if ((unint64_t)v32 < v31)
  {
    *char v32 = 0.0;
    v32[1] = v13;
    *((_DWORD *)v32 + 4) = 0;
    uint64_t v33 = (char *)(v32 + 4);
    v32[3] = v30;
    goto LABEL_48;
  }
  char v34 = *(double **)a5;
  uint64_t v35 = ((uint64_t)v32 - *(void *)a5) >> 5;
  unint64_t v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 59) {
LABEL_70:
  }
    sub_1001D7FD4();
  uint64_t v37 = v31 - (void)v34;
  if (v37 >> 4 > v36) {
    unint64_t v36 = v37 >> 4;
  }
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v38)
  {
    CFAbsoluteTime v39 = (char *)sub_1001D9EDC(a5 + 16, v38);
    char v34 = *(double **)a5;
    char v32 = *(double **)(a5 + 8);
  }
  else
  {
    CFAbsoluteTime v39 = 0;
  }
  __int16 v40 = (double *)&v39[32 * v35];
  *__int16 v40 = 0.0;
  v40[1] = v13;
  double v41 = &v39[32 * v38];
  *((_DWORD *)v40 + 4) = 0;
  v40[3] = v30;
  uint64_t v33 = (char *)(v40 + 4);
  if (v32 != v34)
  {
    do
    {
      long long v42 = *((_OWORD *)v32 - 1);
      *((_OWORD *)v40 - 2) = *((_OWORD *)v32 - 2);
      *((_OWORD *)v40 - 1) = v42;
      v40 -= 4;
      v32 -= 4;
    }
    while (v32 != v34);
    char v34 = *(double **)a5;
  }
  *(void *)a5 = v40;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v33;
  *(void *)(a5 + 16) = v41;
  if (v34) {
    operator delete(v34);
  }
LABEL_48:
  *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v33;
  double v8 = v7 + 86400.0;
LABEL_49:
  double v13 = v7;
LABEL_50:
  if (v8 <= a2)
  {
    uint64_t v43 = (void *)(a5 + 16);
    __int16 v44 = *(double **)(a5 + 8);
    do
    {
      double v45 = v13;
      double v13 = v8;
      if ((unint64_t)v44 >= *v43)
      {
        __int16 v46 = *(double **)a5;
        uint64_t v47 = ((uint64_t)v44 - *(void *)a5) >> 5;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59) {
          goto LABEL_70;
        }
        uint64_t v49 = *v43 - (void)v46;
        if (v49 >> 4 > v48) {
          unint64_t v48 = v49 >> 4;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          double v51 = (char *)sub_1001D9EDC(a5 + 16, v50);
          __int16 v46 = *(double **)a5;
          __int16 v44 = *(double **)(a5 + 8);
        }
        else
        {
          double v51 = 0;
        }
        __int16 v52 = &v51[32 * v47];
        *(void *)__int16 v52 = 0;
        *((double *)v52 + 1) = v45;
        *((_DWORD *)v52 + 4) = 0;
        *((void *)v52 + 3) = 0;
        int v53 = v52;
        if (v44 != v46)
        {
          do
          {
            long long v54 = *((_OWORD *)v44 - 1);
            *((_OWORD *)v53 - 2) = *((_OWORD *)v44 - 2);
            *((_OWORD *)v53 - 1) = v54;
            v53 -= 32;
            v44 -= 4;
          }
          while (v44 != v46);
          __int16 v46 = *(double **)a5;
        }
        __int16 v44 = (double *)(v52 + 32);
        *(void *)a5 = v53;
        *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v52 + 32;
        *(void *)(a5 + 16) = &v51[32 * v50];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *__int16 v44 = 0.0;
        v44[1] = v45;
        *((_DWORD *)v44 + 4) = 0;
        v44[3] = 0.0;
        v44 += 4;
      }
      *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v44;
      double v8 = v13 + 86400.0;
    }
    while (v13 + 86400.0 <= a2);
  }
}

void sub_1014E85A0(double a1, double a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  double v7 = a1;
  double v8 = a1 + 86400.0;
  uint64_t v10 = *a4;
  uint64_t v9 = a4[1];
  if (*a4 == v9) {
    goto LABEL_49;
  }
LABEL_2:
  unsigned int v12 = 0;
  double v13 = v7;
  double v7 = v8;
  double v14 = 0.0;
  do
  {
    double v15 = *(double *)(v10 + 8);
    if (v15 < v13 || v15 >= v7)
    {
      double v17 = 0.0;
      if (v14 > 0.0) {
        double v17 = v14 / (double)v12;
      }
      double v19 = *(double **)(a5 + 8);
      unint64_t v18 = *(void *)(a5 + 16);
      if ((unint64_t)v19 >= v18)
      {
        int v21 = *(double **)a5;
        uint64_t v22 = ((uint64_t)v19 - *(void *)a5) >> 5;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59) {
          goto LABEL_70;
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 4 > v23) {
          unint64_t v23 = v24 >> 4;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          __int16 v26 = (char *)sub_1001D9EDC(a5 + 16, v25);
          int v21 = *(double **)a5;
          double v19 = *(double **)(a5 + 8);
        }
        else
        {
          __int16 v26 = 0;
        }
        int v27 = (double *)&v26[32 * v22];
        double *v27 = 0.0;
        v27[1] = v13;
        *((_DWORD *)v27 + 4) = 1;
        _OWORD v27[3] = v17;
        __int16 v28 = v27;
        if (v19 != v21)
        {
          do
          {
            long long v29 = *((_OWORD *)v19 - 1);
            *((_OWORD *)v28 - 2) = *((_OWORD *)v19 - 2);
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 4;
            v19 -= 4;
          }
          while (v19 != v21);
          int v21 = *(double **)a5;
        }
        __int16 v20 = (char *)(v27 + 4);
        *(void *)a5 = v28;
        *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v27 + 4;
        *(void *)(a5 + 16) = &v26[32 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *double v19 = 0.0;
        v19[1] = v13;
        *((_DWORD *)v19 + 4) = 1;
        __int16 v20 = (char *)(v19 + 4);
        v19[3] = v17;
      }
      *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v20;
      double v8 = v7 + 86400.0;
      uint64_t v9 = a4[1];
      double v13 = v7;
      if (v10 == v9) {
        goto LABEL_50;
      }
      goto LABEL_2;
    }
    double v14 = v14 + *(double *)(v10 + 112);
    ++v12;
    v10 += 160;
  }
  while (v10 != v9);
  if (!v12)
  {
    double v8 = v7;
    goto LABEL_50;
  }
  double v30 = v14 / (double)v12;
  char v32 = *(double **)(a5 + 8);
  unint64_t v31 = *(void *)(a5 + 16);
  if ((unint64_t)v32 < v31)
  {
    *char v32 = 0.0;
    v32[1] = v13;
    *((_DWORD *)v32 + 4) = 1;
    v32[3] = v30;
    uint64_t v33 = (char *)(v32 + 4);
    goto LABEL_48;
  }
  char v34 = *(double **)a5;
  uint64_t v35 = ((uint64_t)v32 - *(void *)a5) >> 5;
  unint64_t v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 59) {
LABEL_70:
  }
    sub_1001D7FD4();
  uint64_t v37 = v31 - (void)v34;
  if (v37 >> 4 > v36) {
    unint64_t v36 = v37 >> 4;
  }
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v38)
  {
    CFAbsoluteTime v39 = (char *)sub_1001D9EDC(a5 + 16, v38);
    char v34 = *(double **)a5;
    char v32 = *(double **)(a5 + 8);
  }
  else
  {
    CFAbsoluteTime v39 = 0;
  }
  __int16 v40 = (double *)&v39[32 * v35];
  double v41 = &v39[32 * v38];
  *__int16 v40 = 0.0;
  v40[1] = v13;
  *((_DWORD *)v40 + 4) = 1;
  v40[3] = v30;
  uint64_t v33 = (char *)(v40 + 4);
  if (v32 != v34)
  {
    do
    {
      long long v42 = *((_OWORD *)v32 - 1);
      *((_OWORD *)v40 - 2) = *((_OWORD *)v32 - 2);
      *((_OWORD *)v40 - 1) = v42;
      v40 -= 4;
      v32 -= 4;
    }
    while (v32 != v34);
    char v34 = *(double **)a5;
  }
  *(void *)a5 = v40;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v33;
  *(void *)(a5 + 16) = v41;
  if (v34) {
    operator delete(v34);
  }
LABEL_48:
  *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v33;
  double v8 = v7 + 86400.0;
LABEL_49:
  double v13 = v7;
LABEL_50:
  if (v8 <= a2)
  {
    uint64_t v43 = (void *)(a5 + 16);
    __int16 v44 = *(double **)(a5 + 8);
    do
    {
      double v45 = v13;
      double v13 = v8;
      if ((unint64_t)v44 >= *v43)
      {
        __int16 v46 = *(double **)a5;
        uint64_t v47 = ((uint64_t)v44 - *(void *)a5) >> 5;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59) {
          goto LABEL_70;
        }
        uint64_t v49 = *v43 - (void)v46;
        if (v49 >> 4 > v48) {
          unint64_t v48 = v49 >> 4;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          double v51 = (char *)sub_1001D9EDC(a5 + 16, v50);
          __int16 v46 = *(double **)a5;
          __int16 v44 = *(double **)(a5 + 8);
        }
        else
        {
          double v51 = 0;
        }
        __int16 v52 = &v51[32 * v47];
        *(void *)__int16 v52 = 0;
        *((double *)v52 + 1) = v45;
        *((_DWORD *)v52 + 4) = 1;
        *((void *)v52 + 3) = 0;
        int v53 = v52;
        if (v44 != v46)
        {
          do
          {
            long long v54 = *((_OWORD *)v44 - 1);
            *((_OWORD *)v53 - 2) = *((_OWORD *)v44 - 2);
            *((_OWORD *)v53 - 1) = v54;
            v53 -= 32;
            v44 -= 4;
          }
          while (v44 != v46);
          __int16 v46 = *(double **)a5;
        }
        __int16 v44 = (double *)(v52 + 32);
        *(void *)a5 = v53;
        *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v52 + 32;
        *(void *)(a5 + 16) = &v51[32 * v50];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *__int16 v44 = 0.0;
        v44[1] = v45;
        *((_DWORD *)v44 + 4) = 1;
        v44[3] = 0.0;
        v44 += 4;
      }
      *(void *)(a5 + _Block_object_dispose(&STACK[0x310], 8) = v44;
      double v8 = v13 + 86400.0;
    }
    while (v13 + 86400.0 <= a2);
  }
}

BOOL sub_1014E8948(uint64_t a1, uint64_t a2)
{
  double v4 = 86400.0 * floor(CFAbsoluteTimeGetCurrent() / 86400.0) - 7776000.0;
  double v11 = 0;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  int v5 = sub_100461F68(*(void *)(a1 + 16), &v11);
  if (v5 == 100)
  {
    sub_1014E8A2C((uint64_t *)&v11, (uint64_t)v9);
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = v6;
    *(void *)(a2 + 64) = v10;
    long long v7 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v7;
    *(double *)a2 = v4;
  }
  if (v11)
  {
    unsigned int v12 = v11;
    operator delete(v11);
  }
  return v5 == 100;
}

void sub_1014E8A0C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 4_Block_object_dispose(&STACK[0x310], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014E8A2C(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    uint64_t v29 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
    do
    {
      switch(*(_DWORD *)(v3 + 16))
      {
        case 0xFFFFFFFF:
          if (qword_1024192B0 != -1) {
            dispatch_once(&qword_1024192B0, &stru_10232A808);
          }
          double v19 = qword_1024192B8;
          if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Aggregate feature type not set for record", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024192B0 != -1) {
              dispatch_once(&qword_1024192B0, &stru_10232A808);
            }
            __int16 v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLCardioChange::RiskModelFeatureInput CLCardioChangeEstimator::computeRiskModelInputFromDailyAggregates(std::vector<CLCardioChange::AggregateFeatureEntry> &)", "%s\n", v20);
            if (v20 != (char *)buf) {
              free(v20);
            }
          }
          break;
        case 0:
          double v21 = *(double *)(v3 + 24);
          if (v21 > 0.0)
          {
            double v11 = v21 + v11;
            *(double *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = v11;
            ++v5;
          }
          break;
        case 1:
          double v22 = *(double *)(v3 + 24);
          if (v22 > 0.0)
          {
            double v12 = v22 + v12;
            *(double *)(a2 + 16) = v12;
            ++v6;
          }
          break;
        case 2:
          double v23 = *(double *)(v3 + 24);
          if (v23 > 0.0)
          {
            double v13 = v23 + v13;
            *(double *)(a2 + 24) = v13;
            ++v7;
          }
          break;
        case 3:
          double v24 = *(double *)(v3 + 24);
          if (v24 > 0.0)
          {
            double v14 = v24 + v14;
            *(double *)(a2 + 32) = v14;
            ++v8;
          }
          break;
        case 4:
          double v25 = *(double *)(v3 + 24);
          if (v25 > 0.0)
          {
            double v15 = v25 + v15;
            *(double *)(a2 + 40) = v15;
            ++v10;
          }
          break;
        case 5:
          double v26 = *(double *)(v3 + 24);
          if (v26 > 0.0)
          {
            double v16 = v26 + v16;
            *(double *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = v16;
            ++v9;
          }
          break;
        case 6:
          double v27 = *(double *)(v3 + 24);
          if (v27 > 0.0)
          {
            double v17 = v27 + v17;
            *(double *)(a2 + 56) = v17;
            LODWORD(v29) = v29 + 1;
          }
          break;
        case 7:
          double v28 = *(double *)(v3 + 24);
          if (v28 > 0.0)
          {
            double v18 = v28 + v18;
            *(double *)(a2 + 64) = v18;
            ++HIDWORD(v29);
          }
          break;
        default:
          break;
      }
      v3 += 32;
    }
    while (v3 != v4);
    if (v5) {
      *(double *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = v11 / (double)v5;
    }
    if (v6) {
      *(double *)(a2 + 16) = v12 / (double)v6;
    }
    if (v7) {
      *(double *)(a2 + 24) = v13 / (double)v7;
    }
    if (v8) {
      *(double *)(a2 + 32) = v14 / (double)v8;
    }
    if (v10) {
      *(double *)(a2 + 40) = v15 / (double)v10;
    }
    if (v9) {
      *(double *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = v16 / (double)v9;
    }
    if (v29) {
      *(double *)(a2 + 56) = v17 / (double)v29;
    }
    if (HIDWORD(v29)) {
      *(double *)(a2 + 64) = v18 / (double)HIDWORD(v29);
    }
  }
}

uint64_t sub_1014E8E24(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  v12[0] = 0;
  double v4 = *(double *)(a2 + 8);
  v12[1] = *(void *)a2;
  if (v4 > 0.0)
  {
    int v13 = 8;
    double v14 = v4;
    double result = sub_100461D58(*(void *)(result + 16), (uint64_t)v12);
  }
  double v5 = *(double *)(a2 + 16);
  if (v5 > 0.0)
  {
    int v13 = 9;
    double v14 = v5;
    double result = sub_100461D58(*(void *)(v3 + 16), (uint64_t)v12);
  }
  double v6 = *(double *)(a2 + 24);
  if (v6 > 0.0)
  {
    int v13 = 10;
    double v14 = v6;
    double result = sub_100461D58(*(void *)(v3 + 16), (uint64_t)v12);
  }
  double v7 = *(double *)(a2 + 32);
  if (v7 > 0.0)
  {
    int v13 = 11;
    double v14 = v7;
    double result = sub_100461D58(*(void *)(v3 + 16), (uint64_t)v12);
  }
  double v8 = *(double *)(a2 + 40);
  if (v8 > 0.0)
  {
    int v13 = 12;
    double v14 = v8;
    double result = sub_100461D58(*(void *)(v3 + 16), (uint64_t)v12);
  }
  double v9 = *(double *)(a2 + 48);
  if (v9 > 0.0)
  {
    int v13 = 13;
    double v14 = v9;
    double result = sub_100461D58(*(void *)(v3 + 16), (uint64_t)v12);
  }
  double v10 = *(double *)(a2 + 56);
  if (v10 > 0.0)
  {
    int v13 = 14;
    double v14 = v10;
    double result = sub_100461D58(*(void *)(v3 + 16), (uint64_t)v12);
  }
  double v11 = *(double *)(a2 + 64);
  if (v11 > 0.0)
  {
    int v13 = 15;
    double v14 = v11;
    return sub_100461D58(*(void *)(v3 + 16), (uint64_t)v12);
  }
  return result;
}

void sub_1014E8F78(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = Current;
  *(_DWORD *)(a3 + 16) = -1;
  *(void *)(a3 + 24) = 0;
  if (!*(unsigned char *)(a1 + 120))
  {
    *(_DWORD *)(a3 + 16) = 4;
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    uint64_t v29 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(CFAbsoluteTime *)char v34 = Current;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Age not set, can't run risk model, startTime %f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      goto LABEL_52;
    }
LABEL_50:
    char v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCardioChange::EstimateResult CLCardioChangeEstimator::runRiskModel(CLCardioChange::RiskModelFeatureInput &)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
    return;
  }
  if (!*(_DWORD *)(a1 + 68))
  {
    *(_DWORD *)(a3 + 16) = 5;
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    double v30 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(CFAbsoluteTime *)char v34 = Current;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Sex not set, can't run risk model startTime %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192B0 == -1) {
        goto LABEL_50;
      }
      goto LABEL_52;
    }
    return;
  }
  sub_1014E9764(a1, (uint64_t)a2);
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_10232A808);
  }
  double v7 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v9 = *((void *)a2 + 2);
    uint64_t v10 = *((void *)a2 + 3);
    uint64_t v11 = *((void *)a2 + 4);
    uint64_t v12 = *((void *)a2 + 5);
    uint64_t v13 = *((void *)a2 + 6);
    uint64_t v14 = *((void *)a2 + 7);
    uint64_t v15 = *((void *)a2 + 8);
    *(_DWORD *)uint64_t buf = 134219776;
    *(void *)char v34 = v8;
    *(_WORD *)&unsigned char v34[8] = 2048;
    *(void *)&v34[10] = v9;
    __int16 v35 = 2048;
    uint64_t v36 = v10;
    __int16 v37 = 2048;
    uint64_t v38 = v11;
    __int16 v39 = 2048;
    uint64_t v40 = v12;
    __int16 v41 = 2048;
    uint64_t v42 = v13;
    __int16 v43 = 2048;
    uint64_t v44 = v14;
    __int16 v45 = 2048;
    uint64_t v46 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Inputs used in the risk model after imputation,sessionVo2maxDailyMean_Window0to90_Mean,%.2f, sessionHRRecovery_DailyMean_Window0to90_Mean,%.2f, heartRateDailyMax_Window0To90_Mean,%.2f, sixMinuteWalkDistanceDailyMean_Window0To90_Mean,%.2f,walkingHeartRateAverageDailyMean_Window0To90_Mean, %.2f,walkingSpeedNormLegLengthDailyMax_Window0to90_Mean,%.2f,stairAscentSpeedDailyMean_Window0to90_Mean,%.2f, stairDescentSpeedDailyMean_Window0to90_Mean,%.2f", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    unint64_t v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCardioChange::EstimateResult CLCardioChangeEstimator::runRiskModel(CLCardioChange::RiskModelFeatureInput &)", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
  }
  double v16 = a2[1];
  if (v16 <= 0.0
    || (double v17 = a2[2], v17 <= 0.0)
    || (double v18 = a2[3], v18 <= 0.0)
    || (double v19 = a2[4], v19 <= 0.0)
    || (double v20 = a2[7], v20 <= 0.0)
    || (double v21 = a2[8], v21 <= 0.0)
    || (double v22 = a2[5], v22 <= 0.0)
    || (double v23 = a2[6], v23 <= 0.0))
  {
    *(_DWORD *)(a3 + 16) = 2;
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_10232A808);
    }
    double v28 = qword_1024192B8;
    if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Could not run risk model due to insufficient input data", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  double v24 = 0.0;
  if (*(_DWORD *)(a1 + 68) == 1) {
    double v24 = 1.0;
  }
  double v25 = 1.0
      / (exp(-(v24 * -0.580510263
             + 2.56936377
             + *(float *)(a1 + 84) * 0.0375412183
             + v16 * -0.0434542339
             + v17 * -0.00687964534
             + v18 * -0.018156946
             + v19 * -0.00298962705
             + v20 * -1.63084493
             + v21 * -3.3056337
             + v22 * -0.0141687166
             + v23 * -1.90431624))
       + 1.0);
  *(double *)(a3 + 24) = v25;
  sub_101A1F180(buf, "CardioChangeRiskModelAlertThreshold", &qword_101E0D3B0, 0);
  BOOL v26 = v25 >= *(double *)&v34[4];
  *(_DWORD *)(a3 + 16) = v26;
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_10232A808);
  }
  double v27 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    *(double *)char v34 = v25;
    *(_WORD *)&unsigned char v34[8] = 1024;
    *(_DWORD *)&v34[10] = v26;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Risk model run successful, score, %f, status, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 == -1) {
      goto LABEL_50;
    }
LABEL_52:
    dispatch_once(&qword_1024192B0, &stru_10232A808);
    goto LABEL_50;
  }
}

double sub_1014E9764(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 8) == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    *(void *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  }
  if (*(double *)(a2 + 16) == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    *(void *)(a2 + 16) = 0;
  }
  if (*(double *)(a2 + 24) == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    *(void *)(a2 + 24) = 0;
  }
  if (*(double *)(a2 + 32) == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    *(void *)(a2 + 32) = 0;
  }
  if (*(double *)(a2 + 40) == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    *(void *)(a2 + 40) = 0;
  }
  if (*(double *)(a2 + 48) == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    *(void *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  }
  if (*(double *)(a2 + 56) == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    *(void *)(a2 + 56) = 0;
  }
  double result = *(double *)(a2 + 64);
  if (result == 0.0)
  {
    sub_10046233C(*(void *)(a1 + 16));
    double result = 0.0;
    *(void *)(a2 + 64) = 0;
  }
  return result;
}

void sub_1014E9930(id a1)
{
  qword_1024192B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

uint64_t sub_1014E9960(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  double v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_1014E99E0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1014E99C8(_Unwind_Exception *a1)
{
  sub_1000DB264(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1014E99E0(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_100645F1C(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_1014E9A64((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

double sub_1014E9A64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(v7, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)double v7 = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  double result = *(double *)(a2 + 24);
  *((double *)v6 + 7) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1014E9AF0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1014E9B0C()
{
  sub_100134750(v2, "constant");
  v2[3] = (const void *)0x401ED552E2FBE33BLL;
  sub_100134750(v3, "activeEnergyBurned");
  v3[3] = 0x3F8700CD855970B5;
  sub_100134750(v4, "meanMaxHRPerDay");
  v4[3] = 0xC0084A6FC58AB92CLL;
  sub_100134750(v5, "meanRestingHRPerDay");
  v5[3] = 0x3F9BABEAD4F5903ALL;
  sub_100134750(v6, "mean6MWTDPerDay");
  v6[3] = 0xBF69BB2788DB0575;
  sub_100134750(v7, "meanWalkingSpeedPerDay");
  void v7[3] = 0xC02AE4DD0D8CB07DLL;
  sub_1014E9960((uint64_t)&unk_102488278, v2, 6);
  for (uint64_t i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v7[i + 2]) < 0) {
      operator delete((void *)v7[i]);
    }
  }
  return __cxa_atexit((void (*)(void *))sub_1014E702C, &unk_102488278, (void *)&_mh_execute_header);
}

void sub_1014E9CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_1014E9D2C()
{
}

void sub_1014E9D34()
{
}

BOOL sub_1014E9D8C()
{
  sub_100103240();

  return sub_100106424();
}

uint64_t sub_1014E9DB4()
{
  sub_100103240();

  return sub_10010145C();
}

BOOL sub_1014E9DE0()
{
  id v0 = [[(objc_class *)off_1024792B0() sharedInstance] getActivePairedDevice];
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_10232A8C8);
  }
  uint64_t v1 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    BOOL v5 = v0 != 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "@GtsMgr, nrIsPairingActive, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10232A8C8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileSyncManagerExternal::isPairingActive() const", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v0 != 0;
}

id sub_1014E9FB8()
{
  id v0 = [[-[objc_class sharedInstance](off_1024792B0(), "sharedInstance") getActivePairedDevice] supportsCapability:[objc_alloc((Class)NSUUID) initWithUUIDString:@"58F7E0B5-513C-49C6-BE68-EACC9107342D"]];
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_10232A8C8);
  }
  uint64_t v1 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v5 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "GtsMgr, canDownload, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10232A8C8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileSyncManagerExternal::canWatchDownloadTiles() const", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v0;
}

double sub_1014EA1A8()
{
  id v0 = [[(objc_class *)off_1024792B0() sharedInstance] getActivePairedDevice];
  id v1 = [v0 valueForProperty:off_1024792B8()];
  if (v1)
  {
    [v1 timeIntervalSinceNow];
    return -v2;
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10232A8C8);
    }
    double v4 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsSync, inactive nil", buf, 2u);
    }
    double v3 = 1209600.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10232A8C8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLTileSyncManagerExternal::getWatchInactiveTime() const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v3;
}

BOOL sub_1014EA384()
{
  return sub_1001198CC() == 1;
}

Class sub_1014EA3A4()
{
  if (qword_102488298 != -1) {
    dispatch_once(&qword_102488298, &stru_10232A8A8);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_102488290 = (uint64_t)result;
  off_1024792B0 = sub_1014EA408;
  return result;
}

uint64_t sub_1014EA408()
{
  return qword_102488290;
}

void sub_1014EA414(id a1)
{
  qword_1024882A0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

void sub_1014EA440(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1014EA470()
{
  if (qword_102488298 != -1) {
    dispatch_once(&qword_102488298, &stru_10232A8A8);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1024882A0, "NRDevicePropertyLastInactiveDate");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1024882A8 = result;
  }
  else
  {
    uint64_t result = qword_1024882A8;
  }
  off_1024792B8 = sub_1014EA4F0;
  return result;
}

uint64_t sub_1014EA4F0()
{
  return qword_1024882A8;
}

void sub_1014EA738(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

BOOL sub_1014EA768()
{
  double v2 = *(NSObject **)(v0 + 1416);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

uint64_t sub_1014EA784(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v11 = (std::__shared_weak_count *)a4[1];
  uint64_t v22 = *a4;
  double v23 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a5[1];
  uint64_t v20 = *a5;
  double v21 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v18 = *a6;
  double v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v17[0] = xmmword_1024882B0;
  v17[1] = unk_1024882C0;
  v17[2] = xmmword_1024882D0;
  sub_100D6AEB4(a1, a2, 12, &v22, &v20, &v18, (uint64_t)a8, a7, v17);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v23) {
    sub_1000DB0A0(v23);
  }
  *(void *)a1 = off_10232A918;
  *(void *)(a1 + 352) = off_10232AA08;
  *(void *)(a1 + 360) = *a3;
  uint64_t v14 = a3[1];
  *(void *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 392) = -1;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 44_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = a1 + 472;
  *(void *)(a1 + 48_Block_object_dispose(&STACK[0x310], 8) = a1 + 496;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 52_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = a1 + 520;
  *(void *)(a1 + 376) = objc_opt_new();
  *(void *)(a1 + 384) = objc_opt_new();
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 16))(*(void *)(a1 + 360), a1 + 352);
  [a8 clearDataForHarvester:12];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10232AAD0);
  }
  uint64_t v15 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289282;
    __int16 v25 = 2082;
    BOOL v26 = "";
    __int16 v27 = 2050;
    uint64_t v28 = 12;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
  }
  return a1;
}

void sub_1014EAA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  if (a20) {
    sub_1000DB0A0(a20);
  }
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014EAA7C(uint64_t a1)
{
  sub_1006FE1A8(a1 + 104, *(void **)(a1 + 112));
  sub_1006FE1A8(a1 + 80, *(void **)(a1 + 88));
  sub_1006FE1A8(a1 + 56, *(void **)(a1 + 64));
  double v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1014EAAD8(uint64_t a1)
{
  *(void *)a1 = off_10232A918;
  *(void *)(a1 + 352) = off_10232AA08;

  (*(void (**)(void))(**(void **)(a1 + 360) + 24))(*(void *)(a1 + 360));
  sub_1006FE1A8(a1 + 512, *(void **)(a1 + 520));
  sub_1006FE1A8(a1 + 488, *(void **)(a1 + 496));
  sub_1006FE1A8(a1 + 464, *(void **)(a1 + 472));
  double v2 = *(void **)(a1 + 440);
  if (v2)
  {
    *(void *)(a1 + 44_Block_object_dispose(&STACK[0x310], 8) = v2;
    operator delete(v2);
  }
  double v3 = *(std::__shared_weak_count **)(a1 + 368);
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_1003C0998(a1);
}

uint64_t sub_1014EABC8(uint64_t a1)
{
  return sub_1014EAAD8(a1 - 352);
}

void sub_1014EABD0(uint64_t a1)
{
  sub_1014EAAD8(a1);

  operator delete();
}

void sub_1014EAC08(uint64_t a1)
{
  sub_1014EAAD8(a1 - 352);

  operator delete();
}

uint64_t sub_1014EAC48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024882E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024882E8))
  {
    byte_1024882E0 = (sub_10074157C() & 0x10) != 0;
    __cxa_guard_release(&qword_1024882E8);
  }
  return byte_1024882E0;
}

void sub_1014EACA8(_Unwind_Exception *a1)
{
}

uint64_t sub_1014EACC0(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v11);
  double v4 = (_OWORD *)(a1 + 280);
  long long v5 = unk_1024882C0;
  *double v4 = xmmword_1024882B0;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = unk_1024882C9;
  if (sub_100012960(a2, "Altimeter", v11)) {
    sub_1012B77D8((uint64_t)v4, (uint64_t)v11);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10232AAD0);
  }
  uint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B7520();
    if (v10 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)uint64_t buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = 12;
    __int16 v18 = 2081;
    double v19 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v11);
}

void sub_1014EAE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014EAE68(uint64_t a1)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  double v2 = *(void **)(a1 + 376);
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(v2);
        }
        double v7 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(*((void *)&v21 + 1) + 8 * i)];
        -[CLHUploadRequest setEndpoint:[objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "altimeterEndpoint")];
        [*(id *)(a1 + 80) submitRequest:v7];

        ++*(_DWORD *)(a1 + 420);
      }
      id v4 = [v2 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v4);
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v8 = *(void **)(a1 + 384);
  id v9 = [v8 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v18;
    do
    {
      for (j = 0; j != v10; j = (char *)j + 1)
      {
        if (*(void *)v18 != v11) {
          objc_enumerationMutation(v8);
        }
        int v13 = *(void **)(*((void *)&v17 + 1) + 8 * (void)j);
        __int16 v14 = *(void **)(a1 + 400);
        if (v13 != v14)
        {
          uint64_t v15 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", [v13 archive]);
          -[CLHUploadRequest setEndpoint:[objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "altimeterEndpoint")];
          [*(id *)(a1 + 80) submitRequest:v15];
        }
        sub_1014EB0E8(a1, v13, v13 == v14);
      }
      id v10 = [v8 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v10);
  }
  sub_1014EB18C((void *)a1);
  sub_1012EAC18(a1 + 408);
  [*(id *)(a1 + 376) removeAllObjects];
  [*(id *)(a1 + 384) removeAllObjects];
  *(_DWORD *)(a1 + 392) = -1;
  *(void *)(a1 + 400) = 0;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 360) + 64))(*(void *)(a1 + 360));
}

void sub_1014EB0E8(uint64_t a1, void *a2, unsigned int a3)
{
  if (a3) {
    ++*(_DWORD *)(a1 + 408);
  }
  else {
    ++*(_DWORD *)(a1 + 412);
  }
  uint64_t v5 = a1 + 408;
  sub_1012EAEE4(a1 + 408, (int)[a2 apHarvestCount], a3);
  [a2 score];
  sub_1012EB4D4(v5, a3, v6);
  int v7 = [[objc_msgSend(a2, "macsNotInALSDatabase") count];

  sub_1012EB1DC(v5, v7, a3);
}

void sub_1014EB18C(void *a1)
{
  uint64_t v97 = _NSConcreteStackBlock;
  uint64_t v98 = 3221225472;
  uint64_t v99 = sub_1014ECD78;
  __int16 v100 = &unk_1022A6368;
  uint64_t v101 = a1;
  AnalyticsSendEventLazy();
  uint64_t v92 = _NSConcreteStackBlock;
  uint64_t v93 = 3221225472;
  int v94 = sub_1014ECE10;
  int v95 = &unk_1022A6368;
  __int16 v96 = a1;
  AnalyticsSendEventLazy();
  __int16 v87 = _NSConcreteStackBlock;
  uint64_t v88 = 3221225472;
  __int16 v89 = sub_1014ECEA8;
  uint64_t v90 = &unk_1022A6368;
  __int16 v91 = a1;
  AnalyticsSendEventLazy();
  unsigned int v82 = _NSConcreteStackBlock;
  uint64_t v83 = 3221225472;
  unsigned int v84 = sub_1014ECF40;
  __int16 v85 = &unk_1022A6368;
  unsigned int v86 = a1;
  AnalyticsSendEventLazy();
  __int16 v77 = _NSConcreteStackBlock;
  uint64_t v78 = 3221225472;
  __int16 v79 = sub_1014ECFD8;
  unsigned int v80 = &unk_1022A6368;
  __int16 v81 = a1;
  AnalyticsSendEventLazy();
  uint64_t v72 = _NSConcreteStackBlock;
  uint64_t v73 = 3221225472;
  uint64_t v74 = sub_1014ED070;
  __int16 v75 = &unk_1022A6368;
  unsigned int v76 = a1;
  AnalyticsSendEventLazy();
  uint64_t v67 = _NSConcreteStackBlock;
  uint64_t v68 = 3221225472;
  __int16 v69 = sub_1014ED108;
  uint64_t v70 = &unk_1022A6368;
  __int16 v71 = a1;
  AnalyticsSendEventLazy();
  uint64_t v3 = a1[55];
  uint64_t v2 = a1[56];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      if (*(_DWORD *)(v3 + 4 * v4))
      {
        uint64_t v61 = _NSConcreteStackBlock;
        uint64_t v62 = 3221225472;
        uint64_t v63 = sub_1014ED1A0;
        __int16 v64 = &unk_1022AE8E0;
        uint64_t v65 = a1;
        unint64_t v66 = v4;
        AnalyticsSendEventLazy();
        uint64_t v3 = a1[55];
        uint64_t v2 = a1[56];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 2);
  }
  uint64_t v5 = (void *)a1[58];
  unint64_t v31 = a1;
  float v6 = a1 + 59;
  if (v5 != a1 + 59)
  {
    do
    {
      char v57 = *((unsigned char *)v5 + 32);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      __int16 v58 = 0;
      sub_10010F834(&v58, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
      char v7 = v57;
      long long v54 = 0;
      double v55 = 0;
      uint64_t v56 = 0;
      sub_10010F834(&v54, v58, (uint64_t)v59, (v59 - (unsigned char *)v58) >> 2);
      uint64_t v8 = v54;
      uint64_t v9 = (uint64_t)v55;
      if (v55 == v54)
      {
        uint64_t v8 = v55;
        if (!v55) {
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = ((unsigned char *)v55 - (unsigned char *)v54) >> 2;
        do
        {
          if (*((_DWORD *)v8 + v10))
          {
            __int16 v45 = _NSConcreteStackBlock;
            uint64_t v46 = 3321888768;
            uint64_t v47 = sub_1014ED254;
            unint64_t v48 = &unk_10232AA30;
            char v53 = v7;
            unint64_t v49 = v10;
            double v51 = 0;
            uint64_t v52 = 0;
            std::string __p = 0;
            sub_10010F834(&__p, v8, v9, v11);
            AnalyticsSendEventLazy();
            if (__p)
            {
              double v51 = __p;
              operator delete(__p);
            }
          }
          ++v10;
          uint64_t v8 = v54;
          uint64_t v9 = (uint64_t)v55;
          unint64_t v11 = ((unsigned char *)v55 - (unsigned char *)v54) >> 2;
        }
        while (v10 < v11);
        if (!v54) {
          goto LABEL_15;
        }
      }
      double v55 = v8;
      operator delete(v8);
LABEL_15:
      if (v58)
      {
        uint64_t v59 = v58;
        operator delete(v58);
      }
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v5[2];
          BOOL v14 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v14);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v6);
  }
  uint64_t v15 = (void *)v31[61];
  if (v15 != v31 + 62)
  {
    do
    {
      char v57 = *((unsigned char *)v15 + 32);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      __int16 v58 = 0;
      sub_10010F834(&v58, (const void *)v15[5], v15[6], (uint64_t)(v15[6] - v15[5]) >> 2);
      char v16 = v57;
      long long v54 = 0;
      double v55 = 0;
      uint64_t v56 = 0;
      sub_10010F834(&v54, v58, (uint64_t)v59, (v59 - (unsigned char *)v58) >> 2);
      long long v17 = v54;
      uint64_t v18 = (uint64_t)v55;
      if (v55 == v54)
      {
        long long v17 = v55;
        if (!v55) {
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v19 = 0;
        unint64_t v20 = ((unsigned char *)v55 - (unsigned char *)v54) >> 2;
        do
        {
          if (*((_DWORD *)v17 + v19))
          {
            uint64_t v36 = _NSConcreteStackBlock;
            uint64_t v37 = 3321888768;
            uint64_t v38 = sub_1014ED35C;
            __int16 v39 = &unk_10232AA30;
            char v44 = v16;
            unint64_t v40 = v19;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            __int16 v41 = 0;
            sub_10010F834(&v41, v17, v18, v20);
            AnalyticsSendEventLazy();
            if (v41)
            {
              uint64_t v42 = v41;
              operator delete(v41);
            }
          }
          ++v19;
          long long v17 = v54;
          uint64_t v18 = (uint64_t)v55;
          unint64_t v20 = ((unsigned char *)v55 - (unsigned char *)v54) >> 2;
        }
        while (v19 < v20);
        if (!v54) {
          goto LABEL_35;
        }
      }
      double v55 = v17;
      operator delete(v17);
LABEL_35:
      if (v58)
      {
        uint64_t v59 = v58;
        operator delete(v58);
      }
      long long v21 = (void *)v15[1];
      if (v21)
      {
        do
        {
          long long v22 = v21;
          long long v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          long long v22 = (void *)v15[2];
          BOOL v14 = *v22 == (void)v15;
          uint64_t v15 = v22;
        }
        while (!v14);
      }
      uint64_t v15 = v22;
    }
    while (v22 != v31 + 62);
  }
  long long v23 = (void *)v31[64];
  if (v23 != v31 + 65)
  {
    do
    {
      char v57 = *((unsigned char *)v23 + 32);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      __int16 v58 = 0;
      sub_10010F834(&v58, (const void *)v23[5], v23[6], (uint64_t)(v23[6] - v23[5]) >> 2);
      char v24 = v57;
      long long v54 = 0;
      double v55 = 0;
      uint64_t v56 = 0;
      sub_10010F834(&v54, v58, (uint64_t)v59, (v59 - (unsigned char *)v58) >> 2);
      __int16 v25 = v54;
      uint64_t v26 = (uint64_t)v55;
      if (v55 == v54)
      {
        __int16 v25 = v55;
        if (!v55) {
          goto LABEL_55;
        }
      }
      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = ((unsigned char *)v55 - (unsigned char *)v54) >> 2;
        do
        {
          if (*((_DWORD *)v25 + v27))
          {
            char v35 = v24;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            char v32 = 0;
            sub_10010F834(&v32, v25, v26, v28);
            AnalyticsSendEventLazy();
            if (v32)
            {
              uint64_t v33 = v32;
              operator delete(v32);
            }
          }
          ++v27;
          __int16 v25 = v54;
          uint64_t v26 = (uint64_t)v55;
          unint64_t v28 = ((unsigned char *)v55 - (unsigned char *)v54) >> 2;
        }
        while (v27 < v28);
        if (!v54) {
          goto LABEL_55;
        }
      }
      double v55 = v25;
      operator delete(v25);
LABEL_55:
      if (v58)
      {
        uint64_t v59 = v58;
        operator delete(v58);
      }
      uint64_t v29 = (void *)v23[1];
      if (v29)
      {
        do
        {
          double v30 = v29;
          uint64_t v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          double v30 = (void *)v23[2];
          BOOL v14 = *v30 == (void)v23;
          long long v23 = v30;
        }
        while (!v14);
      }
      long long v23 = v30;
    }
    while (v30 != v31 + 65);
  }
}

void sub_1014EB8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014EB954(uint64_t a1)
{
  return 1;
}

uint64_t sub_1014EB994(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 360) + 48))();
}

char *sub_1014EB9BC(uint64_t a1)
{
  uint64_t v2 = (char *)[*(id *)(a1 + 376) count];
  return &v2[(void)[*(id *)(a1 + 384) count]];
}

id sub_1014EB9F4(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  unint64_t v4 = *(void **)(a1 + 72);

  return _[v4 pruneSecondaryDataOlderThan:12 forHarvester:v3];
}

uint64_t sub_1014EBA8C(uint64_t a1)
{
  [*(id *)(a1 + 72) clearDataForHarvester:12];
  [*(id *)(a1 + 376) removeAllObjects];
  [*(id *)(a1 + 384) removeAllObjects];
  *(_DWORD *)(a1 + 392) = -1;
  *(void *)(a1 + 400) = 0;
  double v2 = *(uint64_t (**)(void))(**(void **)(a1 + 360) + 64);

  return v2();
}

void sub_1014EBB08(double a1, double a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4[7];
  float v5 = 0.0;
  if (a4[8] == v4
    || (unint64_t v6 = a4[10],
        char v7 = (void *)(v4 + 8 * (v6 >> 8)),
        uint64_t v8 = *v7 + 16 * v6,
        uint64_t v9 = *(void *)(v4 + (((a4[11] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*((unsigned char *)a4 + 88) + v6),
        v8 == v9))
  {
    float v12 = 3.4028e38;
  }
  else
  {
    float v12 = 3.4028e38;
    do
    {
      int v13 = *(double **)v8;
      double v14 = **(double **)v8;
      if (v14 >= a1 && v14 <= a2)
      {
        char v16 = *(std::__shared_weak_count **)(v8 + 8);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v17 = v13[1];
        if (v17 < 30.0) {
          goto LABEL_15;
        }
        float v18 = v17;
        if (v17 > v5) {
          float v5 = v17;
        }
        if (v17 >= v12) {
LABEL_15:
        }
          float v18 = v12;
        if (v16) {
          sub_1000DB0A0(v16);
        }
        float v12 = v18;
      }
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        uint64_t v19 = v7[1];
        ++v7;
        uint64_t v8 = v19;
      }
    }
    while (v8 != v9);
  }
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_10232AAF0);
  }
  unint64_t v20 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
  {
    double v21 = sub_100A178E0(v12);
    v22[0] = 68289795;
    v22[1] = 0;
    __int16 v23 = 2082;
    char v24 = "";
    __int16 v25 = 2049;
    double v26 = v5;
    __int16 v27 = 2049;
    double v28 = v12;
    __int16 v29 = 2049;
    double v30 = v21 - sub_100A178E0(v5);
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getMaximumAltitudeDelta\", \"highest pressure\":\"%{private}f\", \"lowest pressure\":\"%{private}f\", \"altitude delta\":\"%{private}f\"}", (uint8_t *)v22, 0x30u);
  }
  if (v5 > v12)
  {
    sub_100A178E0(v12);
    sub_100A178E0(v5);
  }
}

BOOL sub_1014EBD48(uint64_t a1)
{
  BOOL result = sub_10106EB1C((double *)a1);
  if (result) {
    return !sub_10106EB0C(a1) && *(_DWORD *)(a1 + 92) != -1;
  }
  return result;
}

void sub_1014EBD9C(uint64_t a1, int a2)
{
  sub_1014EC438(a1, __p);
  sub_1014EC36C(a1, &v62);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id obj = *(id *)(a1 + 384);
  id v3 = [obj countByEnumeratingWithState:&v58 objects:v70 count:16];
  if (v3)
  {
    uint64_t v4 = (uint64_t *)v63;
    float v5 = &qword_102419000;
    uint64_t v46 = *(void *)v59;
    do
    {
      uint64_t v6 = 0;
      id v47 = v3;
      do
      {
        if (*(void *)v59 != v46) {
          objc_enumerationMutation(obj);
        }
        char v7 = *(void **)(*((void *)&v58 + 1) + 8 * v6);
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        unint64_t v50 = v7;
        id v8 = [v7 macsNotInALSDatabase];
        id v9 = [v8 countByEnumeratingWithState:&v54 objects:v69 count:16];
        uint64_t v48 = v6;
        int v10 = 0;
        uint64_t v11 = 0;
        if (v9)
        {
          uint64_t v12 = *(void *)v55;
          do
          {
            int v13 = 0;
            id v49 = v9;
            do
            {
              if (*(void *)v55 != v12) {
                objc_enumerationMutation(v8);
              }
              id v14 = [*(id *)(*((void *)&v54 + 1) + 8 * (void)v13) unsignedLongLongValue];
              uint64_t v53 = nullsub_41(v14, v15);
              char v16 = sub_100529674((uint64_t)&v62, &v53);
              double v17 = v16;
              if (v4 == v16)
              {
                uint64_t v11 = (v11 + 1);
              }
              else
              {
                long long v18 = *(_OWORD *)(v16 + 11);
                v52[2] = *(_OWORD *)(v16 + 9);
                v52[3] = v18;
                long long v19 = *(_OWORD *)(v16 + 15);
                v52[4] = *(_OWORD *)(v16 + 13);
                v52[5] = v19;
                long long v20 = *(_OWORD *)(v16 + 7);
                v52[0] = *(_OWORD *)(v16 + 5);
                v52[1] = v20;
                if (sub_1014EBD48((uint64_t)v52))
                {
                  uint64_t v21 = *((unsigned int *)v17 + 33);
                  if (v21 < [v50 apHarvestCount]) {
                    [v50 setApHarvestCount:v21];
                  }
                }
                if (v5[60] != -1) {
                  dispatch_once(&qword_1024191E0, &stru_10232AAF0);
                }
                ++v10;
                long long v22 = qword_1024191E8;
                if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
                {
                  int v23 = v10;
                  uint64_t v24 = v12;
                  uint64_t v25 = v11;
                  id v26 = v8;
                  __int16 v27 = v4;
                  double v28 = v5;
                  uint64_t v29 = v17[10];
                  uint64_t v30 = *((int *)v17 + 33);
                  sub_100B39278(&v51);
                  unint64_t v31 = &v51;
                  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    unint64_t v31 = (std::string *)v51.__r_.__value_.__r.__words[0];
                  }
                  *(void *)std::string __p = 68289795;
                  *(_WORD *)&__p[8] = 2082;
                  *(void *)&__p[10] = "";
                  *(_WORD *)&__p[18] = 2049;
                  *(void *)&__p[20] = v29;
                  *(_WORD *)&__p[28] = 2049;
                  *(void *)&__p[30] = v30;
                  *(_WORD *)&__p[38] = 2081;
                  *(void *)&__p[40] = v31;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"updateAPs\", \"vertical accuracy\":\"%{private}f\", \"harvest count\":%{private}lu, \"MAC\":%{private, location:escape_only}s}", __p, 0x30u);
                  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v51.__r_.__value_.__l.__data_);
                  }
                  float v5 = v28;
                  uint64_t v4 = v27;
                  id v8 = v26;
                  uint64_t v11 = v25;
                  uint64_t v12 = v24;
                  int v10 = v23;
                  id v9 = v49;
                }
              }
              int v13 = (char *)v13 + 1;
            }
            while (v9 != v13);
            id v9 = [v8 countByEnumeratingWithState:&v54 objects:v69 count:16];
          }
          while (v9);
        }
        if (v5[60] != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        char v32 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v33 = [v50 apHarvestCount];
          *(void *)std::string __p = 68289795;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2049;
          *(void *)&__p[20] = v33;
          *(_WORD *)&__p[28] = 1025;
          *(_DWORD *)&__p[30] = v10;
          *(_WORD *)&__p[34] = 1025;
          *(_DWORD *)&__p[36] = v11;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Archive updated after ALS response\", \"apHarvestCount\":%{private}lu, \"updated APs\":%{private}u, \"APs still not in ALS database\":%{private}u}", __p, 0x28u);
        }
        if (a2)
        {
          [objc_msgSend(v50, "macsNotInALSDatabase") removeAllObjects];
        }
        else
        {
          id v34 = objc_alloc((Class)NSMutableSet);
          id v35 = [v34 initWithCapacity:v63[1]];
          uint64_t v36 = v62;
          if (v62 != v4)
          {
            do
            {
              long long v37 = *((_OWORD *)v36 + 6);
              long long v65 = *((_OWORD *)v36 + 5);
              long long v66 = v37;
              long long v67 = *((_OWORD *)v36 + 7);
              uint64_t v68 = v36[16];
              long long v38 = *((_OWORD *)v36 + 3);
              *(_OWORD *)std::string __p = *((_OWORD *)v36 + 2);
              *(_OWORD *)&__p[16] = v38;
              *(_OWORD *)&__p[32] = *((_OWORD *)v36 + 4);
              [v35 addObject:[NSNumber numberWithUnsignedLongLong:sub_1000D8908((uint64_t)__p)]];
              __int16 v39 = (uint64_t *)v36[1];
              if (v39)
              {
                do
                {
                  unint64_t v40 = v39;
                  __int16 v39 = (uint64_t *)*v39;
                }
                while (v39);
              }
              else
              {
                do
                {
                  unint64_t v40 = (uint64_t *)v36[2];
                  BOOL v41 = *v40 == (void)v36;
                  uint64_t v36 = v40;
                }
                while (!v41);
              }
              uint64_t v36 = v40;
            }
            while (v40 != v4);
          }
          [objc_msgSend(v50, "macsNotInALSDatabase") minusSet:v35];
        }
        uint64_t v6 = v48 + 1;
      }
      while ((id)(v48 + 1) != v47);
      id v3 = [obj countByEnumeratingWithState:&v58 objects:v70 count:16];
    }
    while (v3);
  }
  id v42 = [*(id *)(v43 + 384) count];
  if ((unint64_t)v42 > (*(unsigned int (**)(void))(**(void **)(v43 + 360) + 32))(*(void *)(v43 + 360))) {
    sub_1014EC670(v43);
  }
  sub_1000F5BB0((uint64_t)&v62, v63[0]);
}

void sub_1014EC2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,void *a55,uint64_t a56,void *__p,uint64_t a58)
{
}

void sub_1014EC36C(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  (*(void (**)(void))(**(void **)(a1 + 360) + 88))(*(void *)(a1 + 360));
  id v3 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    do
    {
      if (*((unsigned char *)v3 + 128) || *((double *)v3 + 13) == 0.0)
      {
        uint64_t v4 = sub_1000F0A30(a2, v3);
        operator delete(v3);
      }
      else
      {
        float v5 = (uint64_t *)v3[1];
        if (v5)
        {
          do
          {
            uint64_t v4 = v5;
            float v5 = (uint64_t *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v4 = (uint64_t *)v3[2];
            BOOL v6 = *v4 == (void)v3;
            id v3 = v4;
          }
          while (!v6);
        }
      }
      id v3 = v4;
    }
    while (v4 != (uint64_t *)(a2 + 1));
  }
}

void sub_1014EC438(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_alloc_init((Class)NSMutableSet);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  float v5 = *(void **)(a1 + 384);
  id v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v5);
        }
        [v4 unionSet:[*(id *)(*((void *)&v20 + 1) + 8 * i) macsNotInALSDatabase]];
      }
      id v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v6);
  }
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x4812000000;
  id v14 = sub_100177FD4;
  uint64_t v15 = sub_10017771C;
  char v16 = "";
  long long v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  sub_100288630(&__p, (unint64_t)[v4 count]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1014EEAD4;
  v10[3] = &unk_10232AA68;
  v10[4] = &v11;
  [v4 enumerateObjectsUsingBlock:v10];
  id v9 = v12;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1001DD364(a2, (const void *)v9[6], v9[7], (v9[7] - v9[6]) >> 3);
  _Block_object_dispose(&v11, 8);
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
}

void sub_1014EC640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1014EC670(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 360) + 32))(*(void *)(a1 + 360));
  int v3 = v2 + 1;
  if (v2 + 1 >= 0) {
    int v4 = v2 + 1;
  }
  else {
    int v4 = v2 + 2;
  }
  id v5 = [objc_alloc((Class)NSSortDescriptor) initWithKey:@"apHarvestCount" ascending:1];
  id v6 = *(void **)(a1 + 384);
  id v10 = v5;
  id v7 = [[[v6 sortedArrayUsingDescriptors:+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1)] subarrayWithRange:(uint64_t)v4 >> 1, v3 - (v4 >> 1)];
  v9[0] = [objc_alloc((Class)NSSortDescriptor) initWithKey:@"score" ascending:0];
  v9[1] = v5;
  id result = [[[v7 sortedArrayUsingDescriptors:+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v9, 2)] lastObject];
  *(void *)(a1 + 400) = result;
  return result;
}

void sub_1014EC7B8(uint64_t a1, void *a2, unsigned int *a3, void *a4, double a5, double a6)
{
  v55[0] = 0;
  v55[1] = 0;
  long long v54 = (uint64_t *)v55;
  uint64_t v7 = a4[13];
  id v8 = (uint64_t *)v55;
  if (a4[14] != v7)
  {
    unint64_t v9 = a4[16];
    id v10 = (void *)(v7 + 8 * (v9 >> 8));
    uint64_t v11 = *v10 + 16 * v9;
    uint64_t v12 = *(void *)(v7 + (((a4[17] + v9) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a4 + 136) + v9);
    id v8 = (uint64_t *)v55;
    if (v11 != v12)
    {
      do
      {
        uint64_t v15 = *(double **)v11;
        double v16 = **(double **)v11;
        if (v16 >= a5 && v16 <= a6)
        {
          long long v18 = *(std::__shared_weak_count **)(v11 + 8);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v19 = (uint64_t *)(v15 + 1);
          if (!sub_100B391DC()) {
            sub_100589490(&v54, v19, v19);
          }
          if (v18) {
            sub_1000DB0A0(v18);
          }
        }
        v11 += 16;
        if (v11 - *v10 == 4096)
        {
          uint64_t v20 = v10[1];
          ++v10;
          uint64_t v11 = v20;
        }
      }
      while (v11 != v12);
      id v8 = v54;
    }
  }
  std::string v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_1014ECD20((uint64_t)&v51, 0, v8, v55);
  sub_1014EC36C(a1, &v49);
  *a3 = -1;
  long long v21 = v49;
  if (v49 != (uint64_t *)v50)
  {
    long long v22 = &qword_102419000;
    long long v23 = &qword_102419000;
    do
    {
      long long v24 = *(_OWORD *)(v21 + 11);
      v48[2] = *(_OWORD *)(v21 + 9);
      v48[3] = v24;
      long long v25 = *(_OWORD *)(v21 + 15);
      v48[4] = *(_OWORD *)(v21 + 13);
      v48[5] = v25;
      long long v26 = *(_OWORD *)(v21 + 7);
      v48[0] = *(_OWORD *)(v21 + 5);
      v48[1] = v26;
      if (sub_1014EBD48((uint64_t)v48))
      {
        unsigned int v27 = *((_DWORD *)v21 + 33);
        if (v27 < *a3) {
          *a3 = v27;
        }
        if (v22[60] != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        double v28 = v23[61];
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_39;
        }
        uint64_t v29 = v21[10];
        uint64_t v30 = *((int *)v21 + 33);
        sub_100B39278(&__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(void *)uint64_t buf = 68289795;
        __int16 v57 = 2082;
        long long v58 = "";
        __int16 v59 = 2049;
        *(void *)long long v60 = v29;
        *(_WORD *)&v60[8] = 2049;
        *(void *)long long v61 = v30;
        *(_WORD *)&v61[8] = 2081;
        *(void *)uint64_t v62 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"prioritizeAPs valid for prioritizing\", \"vertical accuracy\":\"%{private}f\", \"harvest count\":%{private}lu, \"MAC\":%{private, location:escape_only}s}", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if (v22[60] != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        char v32 = v23[61];
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_39;
        }
        unsigned int v33 = v22;
        BOOL v34 = sub_10106EB0C((uint64_t)(v21 + 5));
        BOOL v35 = sub_10106EB1C((double *)v21 + 5);
        uint64_t v36 = v21[10];
        int v37 = *((_DWORD *)v21 + 33);
        sub_100B39278(&__p);
        long long v38 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(void *)uint64_t buf = 68290307;
        __int16 v57 = 2082;
        long long v58 = "";
        __int16 v59 = 1025;
        *(_DWORD *)long long v60 = v34;
        *(_WORD *)&v60[4] = 1025;
        *(_DWORD *)&unsigned char v60[6] = v35;
        *(_WORD *)long long v61 = 2049;
        *(void *)&v61[2] = v36;
        *(_WORD *)uint64_t v62 = 2049;
        *(void *)&v62[2] = v37 != -1;
        __int16 v63 = 2081;
        __int16 v64 = v38;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"prioritizeAPs not valid for prioritizing\", \"moving\":%{private}hhd, \"valid\":%{private}hhd, \"vertical accuracy\":\"%{private}f\", \"harvest count set\":%{private}lu, \"MAC\":%{private, location:escape_only}s}", buf, 0x3Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        long long v22 = v33;
      }
      long long v23 = &qword_102419000;
LABEL_39:
      sub_1006FF744(&v54, v21 + 4);
      __int16 v39 = (uint64_t *)v21[1];
      if (v39)
      {
        do
        {
          unint64_t v40 = v39;
          __int16 v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          unint64_t v40 = (uint64_t *)v21[2];
          BOOL v41 = *v40 == (void)v21;
          long long v21 = v40;
        }
        while (!v41);
      }
      long long v21 = v40;
    }
    while (v40 != (uint64_t *)v50);
  }
  id v42 = v54;
  if (v54 != (uint64_t *)v55)
  {
    do
    {
      *(void *)uint64_t buf = v42[4];
      [a2 addObject:[NSNumber numberWithUnsignedLongLong:sub_1000D8908((uint64_t)buf)]];
      uint64_t v43 = (uint64_t *)v42[1];
      if (v43)
      {
        do
        {
          char v44 = v43;
          uint64_t v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          char v44 = (uint64_t *)v42[2];
          BOOL v41 = *v44 == (void)v42;
          id v42 = v44;
        }
        while (!v41);
      }
      id v42 = v44;
    }
    while (v44 != (uint64_t *)v55);
  }
  sub_1000F5BB0((uint64_t)&v49, v50[0]);
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  sub_1000F5BB0((uint64_t)&v54, v55[0]);
}

void sub_1014ECCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000F5BB0(v38 - 216, *(void **)(v38 - 208));
  _Unwind_Resume(a1);
}

char *sub_1014ECD20(uint64_t a1, char *a2, void *a3, void *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    id v5 = a3;
    do
    {
      id v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          id v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          id v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      id v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_1014EF0D4(a1, a2, a3, a4, v4);
}

NSDictionary *sub_1014ECD78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[1] = @"traces";
  v4[0] = @"uploaded";
  v3[0] = @"status";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 412)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
}

NSDictionary *sub_1014ECE10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[1] = @"traces";
  v4[0] = @"discarded";
  v3[0] = @"status";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 408)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
}

NSDictionary *sub_1014ECEA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[1] = @"traces";
  v4[0] = @"uploaded";
  v3[0] = @"status";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 420)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
}

NSDictionary *sub_1014ECF40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[1] = @"traces";
  v4[0] = @"discarded";
  v3[0] = @"status";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 416)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
}

NSDictionary *sub_1014ECFD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[1] = @"requests";
  v4[0] = @"sent";
  v3[0] = @"status";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 424)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
}

NSDictionary *sub_1014ED070(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[1] = @"requests";
  v4[0] = @"disallowed";
  v3[0] = @"status";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 428)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
}

NSDictionary *sub_1014ED108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[1] = @"requests";
  v4[0] = @"unnecessary";
  v3[0] = @"status";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 432)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
}

NSDictionary *sub_1014ED1A0(uint64_t a1)
{
  v5[0] = @"apsBucketed";
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 40)];
  v5[1] = @"requests";
  v6[0] = v3;
  v6[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(v2 + 440) + 4 * *(void *)(a1 + 40))];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
}

NSDictionary *sub_1014ED254(uint64_t a1)
{
  CFStringRef v2 = @"uploaded";
  if (*(unsigned char *)(a1 + 64)) {
    CFStringRef v2 = @"discarded";
  }
  v5[0] = v2;
  v4[0] = @"status";
  v4[1] = @"apsBucketed";
  v5[1] = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 32)];
  void v4[2] = @"traces";
  void v5[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 32))];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];
}

void *sub_1014ED328(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  CFStringRef v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_10010F834(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
}

void sub_1014ED344(uint64_t a1)
{
  CFStringRef v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = v2;
    operator delete(v2);
  }
}

NSDictionary *sub_1014ED35C(uint64_t a1)
{
  CFStringRef v2 = @"uploaded";
  if (*(unsigned char *)(a1 + 64)) {
    CFStringRef v2 = @"discarded";
  }
  v5[0] = v2;
  v4[0] = @"status";
  v4[1] = @"apsBucketed";
  v5[1] = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 32)];
  void v4[2] = @"traces";
  void v5[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 32))];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];
}

NSDictionary *sub_1014ED430(uint64_t a1)
{
  CFStringRef v2 = @"uploaded";
  if (*(unsigned char *)(a1 + 64)) {
    CFStringRef v2 = @"discarded";
  }
  v5[0] = v2;
  v4[0] = @"status";
  v4[1] = @"heightsBucketed";
  v5[1] = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 32)];
  void v4[2] = @"traces";
  void v5[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 4 * *(void *)(a1 + 32))];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];
}

id sub_1014ED504(uint64_t a1, void *a2, void *a3)
{
  id v6 = [a2 fType];
  if (v6 == (id)4)
  {
    [a2 fStartTime];
    double v11 = v10;
    id v12 = [a2 fEndTime];
    sub_1014EBB08(v11, v13, (uint64_t)v12, a3);
    float v15 = v14;
    unsigned int v33 = 0;
    id v16 = objc_alloc_init((Class)NSMutableSet);
    [a2 fStartTime];
    double v18 = v17;
    [a2 fEndTime];
    sub_1014EC7B8(a1, v16, &v33, a3, v18, v19);
    if ([v16 count]) {
      (*(void (**)(void))(**(void **)(a1 + 360) + 56))(*(void *)(a1 + 360));
    }
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10232AAF0);
    }
    uint64_t v20 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
    {
      id v21 = [v16 count];
      *(_DWORD *)uint64_t buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v35 = 2082;
      *(void *)&v35[2] = "";
      __int16 v36 = 2049;
      id v37 = v21;
      __int16 v38 = 1025;
      unsigned int v39 = v33;
      __int16 v40 = 2049;
      double v41 = v15;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"setupArchiveForTrack\", \"count macs not in ALS db\":%{private}lu, \"apHarvestCount\":%{private}u, \"max delta altitude\":\"%{private}.1f\"}", buf, 0x2Cu);
    }
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 360) + 32))(*(void *)(a1 + 360));
    if ((unint64_t)[*(id *)(a1 + 384) count] <= (int)v22)
    {
      uint64_t v27 = v22 << 32;
      id v9 = [*(id *)(a1 + 72) archiveForHarvester:12, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"HVAC-ft-%lu", [*(id *)(a1 + 384) count]) withSuffix];
      double v28 = [CLHarvestFloorTransitionRequestArchive alloc];
      id v29 = [*(id *)(a1 + 384) count];
      *(float *)&double v30 = v15;
      [*(id *)(a1 + 384) addObject: -[CLHarvestFloorTransitionRequestArchive initWithArchive:index:score:apHarvestCount:macsNotInALSDatabase:](v28, "initWithArchive:index:score:apHarvestCount:macsNotInALSDatabase:", v9, v29, v33, v16, v30)];
      if ([*(id *)(a1 + 384) count] != (id)(((uint64_t)&_mh_execute_header + v27) >> 32))
      {
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        char v32 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)BOOL v35 = 2082;
          *(void *)&v35[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"New floor transition, maximum transitions not reached\"}", buf, 0x12u);
        }
        goto LABEL_18;
      }
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232AAF0);
      }
      unint64_t v31 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)BOOL v35 = 2082;
        *(void *)&v35[2] = "";
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"New floor transition, maximum transitions just reached; saving in extra slot\"}",
          buf,
          0x12u);
      }
    }
    else
    {
      signed int v23 = [*(id *)(a1 + 400) index];
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232AAF0);
      }
      long long v24 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)BOOL v35 = 2082;
        *(void *)&v35[2] = "";
        __int16 v36 = 1025;
        LODWORD(v37) = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"New floor transition, maximum number of floor transitions reached, replacing an existing floor transition\", \"index\":%{private}d}", buf, 0x18u);
      }
      id v9 = [*(id *)(a1 + 72) archiveForHarvester:12, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"HVAC-ft-%lu", v23) withSuffix];
      sub_1014EB0E8(a1, *(void **)(a1 + 400), 1u);
      [*(id *)(a1 + 400) setApHarvestCount:v33];
      *(float *)&double v25 = v15;
      [*(id *)(a1 + 400) setScore:v25];
      [*(id *)(a1 + 400) setMacsNotInALSDatabase:v16];
    }
    sub_1014EC670(a1);
LABEL_18:
    sub_1014EDA9C(a1);
    goto LABEL_19;
  }
  if (v6 != (id)3) {
    return 0;
  }
  id v7 = [*(id *)(a1 + 376) count];
  *(void *)uint64_t buf = (*(uint64_t (**)(void))(**(void **)(a1 + 360) + 32))(*(void *)(a1 + 360));
  *(void *)BOOL v35 = v8;
  if ((unint64_t)v7 >= sub_101069E4C((uint64_t)buf))
  {
    id v9 = 0;
    ++*(_DWORD *)(a1 + 416);
    return v9;
  }
  id v9 = [*(id *)(a1 + 72) archiveForHarvester:12, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"HVAC-%lu", [*(id *)(a1 + 376) count]) withSuffix];
  [*(id *)(a1 + 376) addObject:v9];
LABEL_19:
  [v9 eraseAllData];
  return v9;
}

void sub_1014EDA9C(uint64_t a1)
{
  sub_1014EC438(a1, &v12);
  if (v12 == v13)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10232AAF0);
    }
    uint64_t v4 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "No need to query ALS, no macs to query", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232AAF0);
      }
      LOWORD(v11) = 0;
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterAltimeter::queryALSIfNeeded()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    ++*(_DWORD *)(a1 + 432);
  }
  else
  {
    uint64_t v11 = 0;
    if ((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 360) + 72))(*(void *)(a1 + 360), &v11))
    {
      sub_100A700F8(&v10, 3);
      ++*(_DWORD *)(a1 + 424);
      sub_1012EAC98((void *)(a1 + 408), (unint64_t)(v13 - (unsigned char *)v12) >> 3);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232AAF0);
      }
      CFStringRef v2 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289283;
        int v15 = 0;
        __int16 v16 = 2082;
        double v17 = "";
        __int16 v18 = 2049;
        *(void *)double v19 = (v13 - (unsigned char *)v12) >> 3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Querying ALS\", \"query count\":%{private}lu}", buf, 0x1Cu);
      }
      uint64_t v3 = *(void *)(a1 + 360);
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      std::string __p = 0;
      sub_1001DD364(&__p, v12, (uint64_t)v13, (v13 - (unsigned char *)v12) >> 3);
      (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void))(*(void *)v3 + 80))(v3, &__p, 1, 1, v10);
      if (__p)
      {
        uint64_t v8 = __p;
        operator delete(__p);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 428);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232AAF0);
      }
      id v5 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289795;
        int v15 = 0;
        __int16 v16 = 2082;
        double v17 = "";
        __int16 v18 = 1025;
        *(_DWORD *)double v19 = v11 & 1;
        *(_WORD *)&v19[4] = 1025;
        *(_DWORD *)&v19[6] = (v11 >> 2) & 1;
        __int16 v20 = 1025;
        unsigned int v21 = (v11 >> 1) & 1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Not allowed to query ALS reason(s)\", \"location services\":%{private}hhd, \"OTA setting\":%{private}hhd, \"reachability\":%{private}hhd}", buf, 0x24u);
      }
    }
  }
  if (v12)
  {
    double v13 = v12;
    operator delete(v12);
  }
}

void sub_1014EDE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014EDED8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = sub_1014ED504(a1, a3, a4);
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10232AAF0);
    }
    uint64_t v9 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
    {
      [a3 fStartTime];
      uint64_t v11 = v10;
      [a3 fEndTime];
      uint64_t v13 = v12;
      [a3 fType];
      *(_DWORD *)uint64_t buf = 68289795;
      int v33 = 0;
      __int16 v34 = 2082;
      BOOL v35 = "";
      __int16 v36 = 2049;
      uint64_t v37 = v11;
      __int16 v38 = 2049;
      uint64_t v39 = v13;
      __int16 v40 = 2049;
      id v41 = [a3 fType];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"track\", \"start\":\"%{private}f\", \"stop\":\"%{private}f\", \"context\":%{private, location:CLBarometerCalibration_Types::Context}lld}", buf, 0x30u);
    }
    float v14 = objc_opt_new();
    [v14 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
    [v14 setCollectionType:1];
    BOOL v15 = [a3 fType] == (id)3;
    [a3 fStartTime];
    double v17 = v16;
    [a3 fStartTime];
    double v19 = v18;
    __int16 v20 = objc_opt_new();
    if (v20)
    {
      unsigned int v21 = v20;
      double v22 = v17 - floor(v19 / dbl_101E0D400[v15]) * dbl_101E0D400[v15];
      [v20 setTimestamp:CFAbsoluteTimeGetCurrent() - v22];
      [a3 fLocationHorizontalUncertainty];
      *(float *)&double v23 = v23;
      [v21 setHorizontalAccuracy:v23];
      [a3 fLocationCoordinates];
      [v21 setLatitude:];
      [a3 fLocationCoordinates];
      [v21 setLongitude:v24];
      [v14 setLocation:v21];

      double v25 = objc_opt_new();
      [v25 setType:[a3 fType]];
      [v14 setContext:v25];

      [a3 fStartTime];
      [a3 setFStartTime:v26 - v22];
      [a3 fEndTime];
      [a3 setFEndTime:v27 - v22];
      [a3 fStartTime];
      [v14 setStartTimestamp:];
      [a3 fEndTime];
      sub_1014EE36C(v22, (uint64_t)[v14 setStopTimestamp:v8], a4, a3);
      sub_1014EE4C8(v22, v28, v8, a4, a3);
      if ([a3 fType] == (id)4) {
        sub_1014EE6AC(v22, 4, v8, a4, a3);
      }
      [v8 overwritePrimaryObject:v14];

      v31[0] = 0;
      sub_10006ACBC(buf, "BarometerCalibrationSubmitOnTrack", v31, 0);
      if (buf[1]) {
        (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
      }
    }
    else
    {
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232AAF0);
      }
      id v29 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLP memory allocation error", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        *(_WORD *)unint64_t v31 = 0;
        double v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSubHarvesterAltimeter::onBarometerCalibrationData(const CLBarometerCalibration_Types::Notification, CLBarometerCalibrationTrack *, const CLBarometerCalibration_Types::CLBarometerCalibrationBuffers &)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
    }
  }
}

void sub_1014EE36C(double a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a4[7];
  if (a4[8] != v5)
  {
    unint64_t v6 = a4[10];
    id v7 = (void *)(v5 + 8 * (v6 >> 8));
    uint64_t v8 = *v7 + 16 * v6;
    uint64_t v9 = *(void *)(v5 + (((a4[11] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a4 + 88) + v6);
    while (v8 != v9)
    {
      double v13 = **(double **)v8 - a1;
      [a5 fStartTime];
      if (v13 >= v14)
      {
        [a5 fEndTime];
        if (v13 <= v15)
        {
          double v17 = *(double **)v8;
          double v16 = *(std::__shared_weak_count **)(v8 + 8);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          id v18 = (id)objc_opt_new();
          [v18 setTimestamp:v13];
          double v19 = v17[1];
          *(float *)&double v19 = v19;
          [v18 setPressure:v19];
          double v20 = v17[2];
          *(float *)&double v20 = v20;
          [v18 setTemperature:v20];
          [a3 writeSecondaryObject:v18 toField:7];
          if (v16) {
            sub_1000DB0A0(v16);
          }
        }
      }
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        uint64_t v21 = v7[1];
        ++v7;
        uint64_t v8 = v21;
      }
    }
  }
}

void sub_1014EE4B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014EE4C8(double a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a4[13];
  if (a4[14] != v5)
  {
    unint64_t v6 = a4[16];
    id v7 = (void *)(v5 + 8 * (v6 >> 8));
    uint64_t v8 = *v7 + 16 * v6;
    uint64_t v9 = *(void *)(v5 + (((a4[17] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a4 + 136) + v6);
    while (v8 != v9)
    {
      double v14 = **(double **)v8 - a1;
      [a5 fStartTime];
      if (v14 >= v15)
      {
        [a5 fEndTime];
        if (v14 <= v16)
        {
          id v18 = *(double **)v8;
          double v17 = *(std::__shared_weak_count **)(v8 + 8);
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          id v19 = (id)objc_opt_new();
          sub_10006DE8C(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          [v19 setMac:[NSString stringWithUTF8String:p_p]];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          [v19 setRssi:*((unsigned int *)v18 + 6)];
          [v19 setHidden:*((unsigned __int8 *)v18 + 20)];
          [v19 setChannel:*((unsigned int *)v18 + 4)];
          [v19 setTimestamp:v14];
          [a3 writeSecondaryObject:v19 toField:8];
          if (v17) {
            sub_1000DB0A0(v17);
          }
        }
      }
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        uint64_t v21 = v7[1];
        ++v7;
        uint64_t v8 = v21;
      }
    }
  }
}

void sub_1014EE678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    sub_1000DB0A0(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014EE6AC(double a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a4[1];
  if (a4[2] != v5)
  {
    unint64_t v6 = a4[4];
    id v7 = (void *)(v5 + 8 * (v6 >> 8));
    uint64_t v8 = *v7 + 16 * v6;
    uint64_t v9 = *(void *)(v5 + (((a4[5] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a4 + 40) + v6);
    while (v8 != v9)
    {
      double v13 = **(double **)v8;
      [a5 fStartTime];
      double v14 = v13 - a1;
      if (v14 >= v15)
      {
        [a5 fEndTime];
        if (v14 <= v16)
        {
          double v17 = *(double **)v8;
          id v18 = *(std::__shared_weak_count **)(v8 + 8);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          id v19 = (id)objc_opt_new();
          [v19 setTimestamp:v14];
          [v19 setLatitude:v17[1]];
          [v19 setLongitude:v17[2]];
          double v20 = v17[4];
          *(float *)&double v20 = v20;
          [v19 setHorizontalAccuracy:v20];
          double v21 = v17[3];
          *(float *)&double v21 = v21;
          [v19 setAltitude:v21];
          double v22 = v17[5];
          *(float *)&double v22 = v22;
          [v19 setVerticalAccuracy:v22];
          [v19 setProvider:*((unsigned int *)v17 + 25)];
          double v23 = v17[10];
          *(float *)&double v23 = v23;
          [v19 setSpeed:v23];
          double v24 = v17[11];
          *(float *)&double v24 = v24;
          [v19 setSpeedAccuracy:v24];
          id v25 = (id)objc_opt_new();
          double v26 = v25;
          double v27 = v17[15];
          BOOL v28 = v27 > 0.0 && v27 != 1.79769313e308;
          [v25 setIsCalibratedBarometricAlt:v28];
          [v26 setIsMapMatched:*((_DWORD *)v17 + 26) == 2];
          [v26 setMapMatchRoadType:*((unsigned int *)v17 + 38)];
          v17[18] = (double)vcvtad_u64_f64(v17[18] * 100.0) / 100.0;
          [v26 setOutdoorConfidence:];
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_10232AAF0);
          }
          id v29 = qword_1024191E8;
          if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
          {
            int v30 = *((_DWORD *)v17 + 38);
            uint64_t v31 = *((void *)v17 + 18);
            *(_DWORD *)uint64_t buf = 67174913;
            int v36 = v30;
            __int16 v37 = 2049;
            uint64_t v38 = v31;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "mapMatchRoadType,%{private}d,outdoorConfidence,%{private}.3lf", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191E0 != -1) {
              dispatch_once(&qword_1024191E0, &stru_10232AAF0);
            }
            int v33 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterAltimeter::processLocationSource(CLHRequestArchive *, const CLBarometerCalibration_Types::CLBarometerCalibrationBuffers &, CFAbsoluteTime, CLBarometerCalibrationTrack *)", "%s\n", v33);
            if (v33 != (char *)buf) {
              free(v33);
            }
          }
          [v19 setBaroCalibrationIndication:v26];
          [a3 writeSecondaryObject:v19 toField:9];
          if (v18) {
            sub_1000DB0A0(v18);
          }
        }
      }
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        uint64_t v32 = v7[1];
        ++v7;
        uint64_t v8 = v32;
      }
    }
  }
}

void sub_1014EEA98(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014EEACC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
}

void sub_1014EEAD4(uint64_t a1, void *a2)
{
  CFStringRef v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = [a2 unsignedLongLongValue];
  uint64_t v5 = nullsub_41(v3, v4);
  uint64_t v6 = v5;
  id v7 = (uint64_t *)v2[7];
  unint64_t v8 = v2[8];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = (uint64_t *)v2[6];
    uint64_t v11 = v7 - v10;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_1001D7FD4();
    }
    unint64_t v12 = v8 - (void)v10;
    unint64_t v13 = (uint64_t)(v8 - (void)v10) >> 2;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      double v15 = (char *)sub_1000DA54C((uint64_t)(v2 + 8), v14);
      uint64_t v10 = (uint64_t *)v2[6];
      id v7 = (uint64_t *)v2[7];
    }
    else
    {
      double v15 = 0;
    }
    double v16 = (uint64_t *)&v15[8 * v11];
    double v17 = &v15[8 * v14];
    *double v16 = v6;
    uint64_t v9 = v16 + 1;
    while (v7 != v10)
    {
      uint64_t v18 = *--v7;
      *--double v16 = v18;
    }
    v2[6] = v16;
    v2[7] = v9;
    v2[8] = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *id v7 = v5;
    uint64_t v9 = v7 + 1;
  }
  v2[7] = v9;
}

void sub_1014EEBC8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 392) = a2;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_10232AAF0);
  }
  id v3 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289283;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 1025;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ALS server request tag\", \"tag\":%{private}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_1014EECB4(uint64_t a1, int a2)
{
}

void sub_1014EECBC(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (*a3 != 3)
  {
    if (*a3 == 1)
    {
      int v7 = *(_DWORD *)(a1 + 392);
      int v8 = *a4;
      if (a4[1] >= 1) {
        sub_1014EBD9C(a1, v7 == v8);
      }
      if (v7 == v8)
      {
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        uint64_t v9 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_INFO))
        {
          BOOL v10 = *a3 != 3;
          int v11 = a4[1];
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)double v21 = 2082;
          *(void *)&v21[2] = "";
          __int16 v22 = 1025;
          BOOL v23 = v10;
          __int16 v24 = 1025;
          int v25 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received response to harvest ALS request.\", \"Success\":%{private}hhd, \"APs\":%{private}d}", buf, 0x1Eu);
        }
        *(_DWORD *)(a1 + 392) = -1;
      }
      else
      {
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        double v15 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_INFO))
        {
          BOOL v16 = *a3 != 3;
          int v17 = a4[1];
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)double v21 = 2082;
          *(void *)&v21[2] = "";
          __int16 v22 = 1025;
          BOOL v23 = v16;
          __int16 v24 = 1025;
          int v25 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received response to non-harvest ALS request\", \"Success\":%{private}hhd, \"APs\":%{private}d}", buf, 0x1Eu);
        }
      }
      sub_1014EC438(a1, buf);
      uint64_t v18 = *(void **)buf;
      id v19 = *(void **)v21;
      if (*(void *)buf)
      {
        *(void *)double v21 = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (v19 == v18)
      {
        (*(void (**)(void))(**(void **)(a1 + 360) + 64))(*(void *)(a1 + 360));
        *(_DWORD *)(a1 + 392) = -1;
      }
    }
    else
    {
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232AAF0);
      }
      unint64_t v12 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *a3;
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Got unknown notification %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232AAF0);
        }
        unint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterAltimeter::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
  }
}

void sub_1014EF06C(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
}

void sub_1014EF074(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_1014EF0A4(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

char *sub_1014EF0D4(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5)
{
  __int16 v5 = a2;
  if (a5 >= 1)
  {
    int v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      std::string __p = a3;
      sub_1002D4510((void **)&__p, a5);
      double v20 = *(char **)(a1 + 8);
      uint64_t v21 = v20 - v5;
      if (a5 > (v20 - v5) >> 3)
      {
        std::string __p = v7;
        sub_1002D4510((void **)&__p, v21 >> 3);
        sub_100E4BC1C(a1, __p, a4);
        if (v21 < 1) {
          return v5;
        }
        double v20 = *(char **)(a1 + 8);
      }
      __int16 v22 = &v5[8 * a5];
      BOOL v23 = &v20[-8 * a5];
      __int16 v24 = v20;
      if ((unint64_t)v23 < v12)
      {
        __int16 v24 = v20;
        do
        {
          uint64_t v25 = *(void *)v23;
          v23 += 8;
          *(void *)__int16 v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v24;
      if (v20 != v22) {
        memmove(&v20[-8 * ((v20 - v22) >> 3)], v5, v20 - v22);
      }
      sub_1014EF324(v7, __p, v5);
    }
    else
    {
      int v13 = *(unsigned char **)a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
      if (v14 >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v15 = (a2 - v13) >> 3;
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v36 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_1000DA54C(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      double v26 = &v18[8 * v15];
      std::string __p = v18;
      int v33 = v26;
      BOOL v35 = &v18[8 * v17];
      double v27 = &v26[8 * a5];
      do
      {
        *(void *)double v26 = v7[4];
        v26 += 8;
        BOOL v28 = (void *)v7[1];
        if (v28)
        {
          do
          {
            id v29 = v28;
            BOOL v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            id v29 = (void *)v7[2];
            BOOL v30 = *v29 == (void)v7;
            int v7 = v29;
          }
          while (!v30);
        }
        int v7 = v29;
      }
      while (v26 != v27);
      __int16 v34 = v27;
      __int16 v5 = sub_10112FEFC((void **)a1, (uint64_t)&__p, v5);
      if (v34 != v33) {
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1014EF2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1014EF324(void *result, void *a2, void *a3)
{
  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      id v3 = (void *)result[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          id v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)result[2];
          BOOL v5 = *v4 == (void)result;
          id result = v4;
        }
        while (!v5);
      }
      ++a3;
      id result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

uint64_t sub_1014EF37C()
{
  return sub_1012B748C((uint64_t)&xmmword_1024882B0, 1, 2, 2, 1, 0.0, 21600.0, 21600.0);
}

void sub_1014EF49C()
{
}

id sub_1014EF4C0(uint64_t a1, void *a2)
{
  return _[a2 onSurfaceCalibration:a1];
}

void sub_1014EF83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000DB0A0(v10);
  _Unwind_Resume(a1);
}

void sub_1014EF8AC(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_1014EF8DC(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10232AB40;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1014EFA64;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1014EFA78;
  void v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1014EFA3C(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1014EFA64(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1014EFA78(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1014EFA94(uint64_t a1)
{
  sub_1014EFD90(a1);

  operator delete();
}

id sub_1014EFACC(void *a1, int a2, void *__src, unint64_t a4)
{
  *(void *)&long long __dst = 0x7FEFFFFFFFFFFFFFLL;
  if (a4 >= 0x10) {
    size_t v8 = 16;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232AB80);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315906;
      unint64_t v29 = 0x8000000101E0D4B3 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v30 = 2048;
      uint64_t v31 = 16;
      __int16 v32 = 2048;
      unint64_t v33 = a4;
      __int16 v34 = 1024;
      int v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232AB80);
      }
      int v20 = 136315906;
      unint64_t v21 = 0x8000000101E0D4B3 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v22 = 2048;
      uint64_t v23 = 16;
      __int16 v24 = 2048;
      unint64_t v25 = a4;
      __int16 v26 = 1024;
      int v27 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::CMSurfaceCalibrationSample>::dispatchData(int, const void *, size_t) [T = CLWaterSubmersion_Types::CMSurfaceCalibrationSample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  int v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1014EFE0C;
  v16[3] = &unk_1022F1228;
  void v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v10;
  return [v13 async:v16];
}

uint64_t sub_1014EFD90(uint64_t a1)
{
  *(void *)a1 = off_10232AB40;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_1014EFE0C(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    id v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[8];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_1014EFE68(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1014EFE98(uint64_t a1)
{
  *(void *)a1 = off_10232ABB0;
  sub_100418660(a1 + 8);
  *(void *)(a1 + 32) = 0x4090000041900000;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, &v4);
  sub_1004D11B0(v4, "SemiStatVMThreshold", (float *)(a1 + 32));
  if (v5) {
    sub_1000DB0A0(v5);
  }
  return a1;
}

void sub_1014EFF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014EFF40(uint64_t a1, float a2)
{
  uint64_t result = sub_1014EFE98(a1);
  *(float *)(result + 36) = a2;
  return result;
}

uint64_t sub_1014EFF6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 48))();
}

void sub_1014EFF94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 3;
  float v6 = *(float *)(a2 + 296);
  if (*(unsigned char *)(a2 + 352) || v6 > 1.0)
  {
    int v7 = *(unsigned __int8 *)(a2 + 324);
    BOOL v8 = *(unsigned char *)(a2 + 324) == 0;
    sub_1001B01DC(a1 + 8, a2, (uint64_t)buf);
    float v9 = *(float *)&v36;
    float v10 = *(float *)v37;
    *(_DWORD *)(a3 + 32) = 0;
    float v11 = 0.0;
    if (v6 > *(float *)(a1 + 32))
    {
      sub_10068D230();
      float v11 = v12;
    }
    float v13 = flt_101E0D4F8[v8];
    if (*(unsigned char *)(a2 + 352))
    {
      int v14 = *(_DWORD *)(a1 + 36);
      *(float *)uint64_t buf = v9;
      int v33 = v14;
      *(float *)__int16 v34 = v13;
      *(float *)&v34[4] = v11;
      uint64_t v15 = 4;
      float v16 = v9;
      long long v17 = buf;
      do
      {
        if (v16 < *(float *)&buf[v15])
        {
          float v16 = *(float *)&buf[v15];
          long long v17 = &buf[v15];
        }
        v15 += 4;
      }
      while (v15 != 16);
      float v18 = *(float *)v17;
      *(_DWORD *)(a3 + 20) = *(_DWORD *)v17;
      *(float *)uint64_t buf = v10;
      int v33 = 1067869798;
      *(float *)__int16 v34 = v13;
      *(float *)&v34[4] = v11;
      uint64_t v19 = 4;
      float v20 = v10;
      unint64_t v21 = buf;
      do
      {
        if (v20 < *(float *)&buf[v19])
        {
          float v20 = *(float *)&buf[v19];
          unint64_t v21 = &buf[v19];
        }
        v19 += 4;
      }
      while (v19 != 16);
      float v22 = *(float *)v21;
    }
    else
    {
      if (v9 >= v13) {
        float v23 = v9;
      }
      else {
        float v23 = flt_101E0D4F8[v8];
      }
      if (v23 >= v11) {
        float v18 = v23;
      }
      else {
        float v18 = v11;
      }
      *(float *)(a3 + 20) = v18;
      if (v10 >= v13) {
        float v24 = v10;
      }
      else {
        float v24 = v13;
      }
      if (v24 >= v11) {
        float v22 = v24;
      }
      else {
        float v22 = v11;
      }
    }
    *(float *)(a3 + 2_Block_object_dispose(&STACK[0x310], 8) = v22;
    *(float *)(a3 + 12) = v22;
    if (v22 != v10 || v10 <= 2.1) {
      int v26 = 1;
    }
    else {
      int v26 = 12;
    }
    *(_DWORD *)(a3 + 36) = v26;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10232ABF0);
    }
    int v27 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void *)(a2 + 112);
      int v29 = *(_DWORD *)(a2 + 152);
      double v30 = *(float *)(a1 + 36);
      *(_DWORD *)uint64_t buf = 67111424;
      int v33 = v7;
      *(_WORD *)__int16 v34 = 2048;
      *(double *)&v34[2] = v11;
      __int16 v35 = 2048;
      double v36 = v9;
      *(_WORD *)__int16 v37 = 2048;
      *(double *)&v37[2] = v13;
      __int16 v38 = 2048;
      double v39 = v18;
      __int16 v40 = 2048;
      uint64_t v41 = v28;
      __int16 v42 = 2048;
      double v43 = v22;
      __int16 v44 = 2048;
      double v45 = v10;
      __int16 v46 = 1024;
      int v47 = v29;
      __int16 v48 = 2048;
      double v49 = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Semistationary, Standing, %d, metsFromIntensity, %.1f, userMetsFromSteps, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromSteps, %.1f, activityType, %d, floor, %f", buf, 0x5Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10232ABF0);
      }
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieSemiStatModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
}

void sub_1014F03BC()
{
}

void sub_1014F03D0(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1014F0400(uint64_t a1)
{
  *(void *)a1 = off_10232AC20;
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  *(_DWORD *)(a1 + 12) = 1067030938;
  v8[0] = -1;
  uint64_t v2 = sub_1000A6958();
  sub_10013E418(v2, @"NumActiveCalibrations", v8);
  if (v8[0] >= 1) {
    *(_DWORD *)(a1 + 12) = 1067869798;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10232AC70);
  }
  id v3 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v4 = *(float *)(a1 + 12);
    *(_DWORD *)uint64_t buf = 134217984;
    double v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedestrian, metsHrUpperBound, %.1f ", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10232AC70);
    }
    double v6 = *(float *)(a1 + 12);
    v8[1] = 134217984;
    double v9 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCaloriePedestrianModelInterface::CLCaloriePedestrianModelInterface()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return a1;
}

uint64_t sub_1014F0628(uint64_t a1, double *a2)
{
  double v2 = a2[70];
  if (v2 <= 0.0) {
    return 0;
  }
  double v3 = a2[57];
  if (v3 <= 0.0) {
    return 0;
  }
  double v4 = vabdd_f64(v2 / (v3 * 60.0), round(v2 / (v3 * 60.0)));
  double v5 = vabdd_f64(0.5, v4);
  if (v5 >= v4) {
    double v5 = v4;
  }
  double v6 = a2[71];
  if (v5 < 0.05 && v6 < 0.899999976) {
    return 1;
  }
  if (v5 >= 0.05 && (v5 <= 0.075 ? (BOOL v7 = v6 < 0.75) : (BOOL v7 = 0), v7)) {
    return 1;
  }
  else {
    return 0;
  }
}

void sub_1014F06BC(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1014F06EC(uint64_t a1)
{
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 256;
  *(_DWORD *)a1 = 8;
  double v2 = &_mh_execute_header;
  uint64_t v3 = 152;
  float64x2_t v11 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  do
  {
    int32x2_t v4 = vneg_s32((int32x2_t)v2);
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    float32x2_t v6 = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_s64(v5), v12), v11));
    float v13 = v6.f32[0];
    __float2 v7 = __sincosf_stret(v6.f32[1]);
    __float2 v8 = __sincosf_stret(v13);
    v14.val[1] = (float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v8.__sinval));
    v14.val[0] = (float32x2_t)__PAIR64__(LODWORD(v7.__cosval), LODWORD(v8.__cosval));
    double v9 = (float *)(a1 + v3);
    vst2_f32(v9, v14);
    double v2 = (const mach_header_64 *)vadd_s32((int32x2_t)v2, (int32x2_t)0x200000002);
    v3 += 16;
  }
  while (v3 != 2200);
  sub_1014F07E0(256, (int *)(a1 + 16));
  return a1;
}

uint64_t sub_1014F07E0(uint64_t result, int *a2)
{
  float v2 = sqrtf((float)(int)result);
  int v3 = 4;
  do
  {
    while ((int)result % v3)
    {
      int v4 = v3 + 2;
      if (v3 == 2) {
        int v4 = 3;
      }
      if (v3 == 4) {
        int v3 = 2;
      }
      else {
        int v3 = v4;
      }
      if (v2 < (float)v3) {
        int v3 = result;
      }
    }
    uint64_t result = ((int)result / v3);
    *a2 = v3;
    a2[1] = result;
    a2 += 2;
  }
  while ((int)result > 1);
  return result;
}

void sub_1014F083C(uint64_t a1, _DWORD *a2, unsigned __int16 *a3)
{
  int64x2_t v5 = (int *)(a1 + 8);
  bzero(&v13, 8 * *(int *)(a1 + 8));
  sub_1014F0920(&v13, a3, 0, 1, 1u, v5 + 2, (uint64_t)v5);
  *a2 = 0;
  unint64_t v6 = *v5;
  if ((int)v6 >= 4)
  {
    unint64_t v7 = v6 >> 1;
    float v8 = (float)(int)v6;
    double v9 = (float *)(a2 + 1);
    float v10 = (float32x2_t *)&v14;
    unint64_t v11 = v7 - 1;
    do
    {
      float32x2_t v12 = *v10++;
      *v9++ = sqrtf(vaddv_f32(vmul_f32(v12, v12)) / v8);
      --v11;
    }
    while (v11);
  }
}

void sub_1014F0920(float *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, uint64_t a7)
{
  double v9 = a1;
  int v10 = a6[1];
  uint64_t v11 = v10 * *a6;
  int v73 = *a6;
  if (v10 == 1)
  {
    int v12 = a4 * a5;
    uint64_t v13 = 8 * v11;
    uint64_t v14 = a1;
    do
    {
      *uint64_t v14 = *(float *)sub_1004182C4(a2, (int)a3);
      v14 += 2;
      LODWORD(a3) = a3 + v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    unint64_t v15 = 0;
    float v16 = a6 + 2;
    uint64_t v17 = *a6 * a4;
    int v18 = a4 * a5;
    uint64_t v19 = 8 * v11;
    do
    {
      sub_1014F0920(&v9[v15 / 4], a2, a3, v17, a5, v16, a7);
      a3 = (a3 + v18);
      v15 += 8 * v10;
    }
    while (v19 != v15);
  }
  if (v73 == 2)
  {
    long long v60 = (float *)(*(void *)(a7 + 136) + 4);
    uint64_t v61 = 2 * v10;
    do
    {
      uint64_t v62 = &v9[v61];
      float v63 = *(v60 - 1);
      float v64 = v9[v61];
      float v65 = v9[v61 + 1];
      float v66 = (float)(v64 * v63) - (float)(v65 * *v60);
      float v67 = (float)(v63 * v65) + (float)(v64 * *v60);
      float v68 = v9[1] - v67;
      *uint64_t v62 = *v9 - v66;
      v62[1] = v68;
      float v69 = v67 + v9[1];
      float *v9 = v66 + *v9;
      v9[1] = v69;
      v9 += 2;
      v60 += 2 * a4;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v20 = v10;
    if (v73 == 4)
    {
      uint64_t v21 = 2 * v10;
      float v22 = v9 + 1;
      float v23 = (float *)(*(void *)(a7 + 136) + 4);
      uint64_t v24 = 4 * v10;
      int v25 = *(_DWORD *)(a7 + 4);
      uint64_t v26 = 6 * v10;
      int v27 = v23;
      uint64_t v28 = v23;
      do
      {
        int v29 = &v22[v21];
        float v30 = *(v23 - 1);
        float v31 = v22[v21 - 1];
        float v32 = v22[2 * v10];
        float v33 = (float)(v31 * v30) - (float)(v32 * *v23);
        float v34 = (float)(v30 * v32) + (float)(v31 * *v23);
        __int16 v35 = &v22[v24];
        float v36 = *(v27 - 1);
        float v37 = v22[v24 - 1];
        float v38 = v22[4 * v10];
        float v39 = (float)(v37 * v36) - (float)(v38 * *v27);
        float v40 = (float)(v36 * v38) + (float)(v37 * *v27);
        uint64_t v41 = &v22[v26];
        float v42 = *(v28 - 1);
        float v43 = v22[v26 - 1];
        float v44 = v22[6 * v10];
        float v45 = (float)(v43 * v42) - (float)(v44 * *v28);
        float v46 = (float)(v42 * v44) + (float)(v43 * *v28);
        float v47 = *(v22 - 1);
        float v48 = v47 - v39;
        float v49 = *v22 - v40;
        float v50 = v39 + v47;
        float v51 = v40 + *v22;
        *(v22 - 1) = v50;
        *float v22 = v51;
        float v52 = v34 + v46;
        float v53 = v33 - v45;
        float v54 = v34 - v46;
        *(v35 - 1) = v50 - (float)(v33 + v45);
        *__int16 v35 = v51 - v52;
        float v55 = v52 + *v22;
        *(v22 - 1) = (float)(v33 + v45) + *(v22 - 1);
        *float v22 = v55;
        if (v25)
        {
          float v56 = v48 + v54;
          float v57 = v49 - v53;
          float v58 = v48 - v54;
          float v59 = v49 + v53;
        }
        else
        {
          float v58 = v48 + v54;
          float v59 = v49 - v53;
          float v56 = v48 - v54;
          float v57 = v49 + v53;
        }
        v22[2 * v10] = v59;
        v22[6 * v10] = v57;
        v22 += 2;
        v28 += 6 * a4;
        *(v29 - 1) = v58;
        v27 += 4 * a4;
        v23 += 2 * a4;
        *(v41 - 1) = v56;
        --v20;
      }
      while (v20);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232ACB0);
      }
      uint64_t v70 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v77 = v73;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, "Error in FFT,p,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232ACB0);
        }
        __int16 v71 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void kf_work(kiss_fft_cpx *, const CMQueue<scalar_32> &, int, const size_t, int, const int *, const kiss_fft_state *)", "%s\n", v71);
        if (v71 != (char *)buf) {
          free(v71);
        }
      }
    }
  }
}

void sub_1014F0D38(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1014F0D68(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  int v4 = *(_DWORD *)(a2 + 1);
  if (v4 < 0x8000)
  {
    if (v4 <= 127)
    {
      if ((v4 - 4) <= 0x3C && ((1 << (v4 - 4)) & 0x1000000010001101) != 0) {
        goto LABEL_48;
      }
      if (v4 < 3)
      {
        int v7 = 0;
        goto LABEL_55;
      }
      goto LABEL_101;
    }
    if (v4 > 4127)
    {
      if (v4 >= 12288)
      {
        if (v4 != 12288 && v4 != 0x4000) {
          goto LABEL_101;
        }
      }
      else if (v4 != 4128 && v4 != 0x2000)
      {
        goto LABEL_101;
      }
    }
    else if (v4 > 511)
    {
      if (v4 != 512 && v4 != 4096) {
        goto LABEL_101;
      }
    }
    else if (v4 != 128 && v4 != 256)
    {
      goto LABEL_101;
    }
    goto LABEL_54;
  }
  if (v4 < 528384)
  {
    if (v4 > 262271)
    {
      if (v4 >= 397312)
      {
        if (v4 != 397312 && v4 != 462848) {
          goto LABEL_101;
        }
        goto LABEL_54;
      }
      if (v4 == 262272) {
        goto LABEL_54;
      }
      int v8 = 327808;
    }
    else
    {
      if (v4 > 131199)
      {
        if (v4 != 131200 && v4 != 196608) {
          goto LABEL_101;
        }
        goto LABEL_54;
      }
      if (v4 == 0x8000) {
        goto LABEL_54;
      }
      int v8 = 65664;
    }
    if (v4 != v8) {
      goto LABEL_101;
    }
    goto LABEL_54;
  }
  if (v4 <= 786447)
  {
    if (v4 > 655423)
    {
      if (v4 == 655424) {
        goto LABEL_48;
      }
      int v5 = 720912;
    }
    else
    {
      if (v4 == 528384) {
        goto LABEL_54;
      }
      int v5 = 589888;
    }
LABEL_47:
    if (v4 == v5) {
      goto LABEL_48;
    }
LABEL_101:
    sub_101AB8DA8();
  }
  if (v4 <= 917515)
  {
    if (v4 != 786448)
    {
      int v5 = 851980;
      goto LABEL_47;
    }
LABEL_48:
    int v7 = 2;
    goto LABEL_55;
  }
  if (v4 != 0x200000 && v4 != 0x100000)
  {
    int v5 = 917516;
    goto LABEL_47;
  }
LABEL_54:
  int v7 = 1;
LABEL_55:
  int v9 = *(unsigned __int8 *)(a2 + 15);
  switch(*(unsigned char *)(a2 + 13))
  {
    case 1:
      int v10 = "Portrait";
      break;
    case 2:
      int v10 = "PortraitUpsideDown";
      break;
    case 3:
      int v10 = "LandscapeLeft";
      break;
    case 4:
      int v10 = "LandscapeRight";
      break;
    case 5:
      int v10 = "FaceUp";
      break;
    case 6:
      int v10 = "FaceDown";
      break;
    case 7:
      sub_101AB8DD4();
    default:
      int v10 = "Ambiguous";
      break;
  }
  switch(*(unsigned char *)(a2 + 14))
  {
    case 1:
      uint64_t v11 = "Portrait";
      break;
    case 2:
      uint64_t v11 = "PortraitUpsideDown";
      break;
    case 3:
      uint64_t v11 = "LandscapeLeft";
      break;
    case 4:
      uint64_t v11 = "LandscapeRight";
      break;
    case 5:
      uint64_t v11 = "FaceUp";
      break;
    case 6:
      uint64_t v11 = "FaceDown";
      break;
    case 7:
      sub_101AB8DD4();
    default:
      uint64_t v11 = "Ambiguous";
      break;
  }
  +[NSString stringWithFormat:@"%sTo%s", v10, v11];
  uint64_t v12 = (unsigned __int128)(*(uint64_t *)(a2 + 5) * (__int128)0x431BDE82D7B634DBLL) >> 64;
  if (qword_102419040 != -1) {
    dispatch_once(&qword_102419040, &stru_10232ACF8);
  }
  double v13 = Current * 1000000.0;
  uint64_t v14 = (v12 >> 18) + ((unint64_t)v12 >> 63);
  unint64_t v15 = qword_102419048;
  if (os_log_type_enabled((os_log_t)qword_102419048, OS_LOG_TYPE_DEBUG))
  {
    switch(*(unsigned char *)(a2 + 13))
    {
      case 1:
        float v16 = "Portrait";
        break;
      case 2:
        float v16 = "PortraitUpsideDown";
        break;
      case 3:
        float v16 = "LandscapeLeft";
        break;
      case 4:
        float v16 = "LandscapeRight";
        break;
      case 5:
        float v16 = "FaceUp";
        break;
      case 6:
        float v16 = "FaceDown";
        break;
      case 7:
        sub_101AB8DD4();
      default:
        float v16 = "Ambiguous";
        break;
    }
    switch(*(unsigned char *)(a2 + 14))
    {
      case 1:
        uint64_t v17 = "Portrait";
        break;
      case 2:
        uint64_t v17 = "PortraitUpsideDown";
        break;
      case 3:
        uint64_t v17 = "LandscapeLeft";
        break;
      case 4:
        uint64_t v17 = "LandscapeRight";
        break;
      case 5:
        uint64_t v17 = "FaceUp";
        break;
      case 6:
        uint64_t v17 = "FaceDown";
        break;
      case 7:
        sub_101AB8DD4();
      default:
        uint64_t v17 = "Ambiguous";
        break;
    }
    int v18 = *(unsigned __int8 *)(a2 + 16);
    *(_DWORD *)uint64_t buf = 136316674;
    float v22 = v16;
    __int16 v23 = 2080;
    uint64_t v24 = v17;
    __int16 v25 = 1024;
    int v26 = v9;
    __int16 v27 = 1024;
    int v28 = v18;
    __int16 v29 = 2048;
    uint64_t v30 = v14;
    __int16 v31 = 1024;
    int v32 = v7;
    __int16 v33 = 2048;
    double v34 = v13;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[CLOrientationStatisticsRecorder] fromOrientation: %s, toOrientation: %s, displayState: %u, isAPAwake: %u, timeSinceLastOrientationChange: %llu, generalMotionState: %u, timestamp: %.3f", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419040 != -1) {
      dispatch_once(&qword_102419040, &stru_10232ACF8);
    }
    sub_1014F14F8(*(unsigned __int8 *)(a2 + 13));
    sub_1014F14F8(*(unsigned __int8 *)(a2 + 14));
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOrientationStatisticsLogger::feedOrientationStatistics(const OrientationStatistics &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  return AnalyticsSendEventLazy();
}

const char *sub_1014F14F8(int a1)
{
  switch(a1)
  {
    case 1:
      uint64_t result = "Portrait";
      break;
    case 2:
      uint64_t result = "PortraitUpsideDown";
      break;
    case 3:
      uint64_t result = "LandscapeLeft";
      break;
    case 4:
      uint64_t result = "LandscapeRight";
      break;
    case 5:
      uint64_t result = "FaceUp";
      break;
    case 6:
      uint64_t result = "FaceDown";
      break;
    case 7:
      sub_101AB8DD4();
    default:
      uint64_t result = "Ambiguous";
      break;
  }
  return result;
}

NSDictionary *sub_1014F15A4(uint64_t a1)
{
  v5[0] = @"logTimestamp";
  v6[0] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v5[1] = @"fromOrientation";
  v6[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
  void v5[2] = @"toOrientation";
  void v6[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 68)];
  void v5[3] = @"displayState";
  v6[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  void v5[4] = @"isAPAwake";
  void v6[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 48) + 16)];
  v5[5] = @"timeSinceLastOrientationChange";
  v6[5] = +[NSNumber numberWithLongLong:*(void *)(a1 + 56)];
  v5[6] = @"motionState";
  float v2 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 76)];
  v5[7] = @"transitionType";
  uint64_t v3 = *(void *)(a1 + 32);
  v6[6] = v2;
  v6[7] = v3;
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:8];
}

void sub_1014F16EC(id a1)
{
  qword_102419048 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Orientation");
}

uint64_t sub_1014F1780(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_1014F193C(a1, "CLWorkloadCalibratorRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10232AD28;
  *(void *)(a1 + 72) = off_10232ADE0;
  sub_100F03BA0((void *)(a1 + 336), 0, 0);
  sub_100F03BA0((void *)(a1 + 352), 0, 0);
  sub_100F03BA0((void *)(a1 + 368), 0, 0);
  sub_100F03BA0((void *)(a1 + 384), 0, 0);
  sub_100F03BA0((void *)(a1 + 400), 0, 0);
  sub_100F03BA0((void *)(a1 + 416), 0, 0);
  sub_100F03BA0((void *)(a1 + 432), 0, 0);
  sub_100F03BA0((void *)(a1 + 448), 0, 0);
  sub_100F03BA0((void *)(a1 + 464), 0, 0);
  sub_100F03BA0((void *)(a1 + 480), 0, 0);
  sub_100F03BA0((void *)(a1 + 496), 0, 0);
  *(_OWORD *)(a1 + 512) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_1014F1910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F193C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = &off_1022B2C68;
  *(void *)a1 = off_10232AEC0;
  *(void *)(a1 + 72) = off_10232AF68;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_10232AEC0;
  *(void *)(a1 + 72) = off_10232AF68;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 240) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1014F1D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1014F1DE0()
{
}

void *sub_1014F1DE8(void *a1)
{
  *a1 = off_10232AEC0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_10232AF68;
  a1[33] = off_1022B2C20;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1014F1EA8(void *a1)
{
  *a1 = off_10232AD28;
  a1[9] = off_10232ADE0;
  sub_1014F1F28((uint64_t)a1, 0, 0);

  return sub_1014F1DE8(a1);
}

void sub_1014F1F28(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 512) = a2;
    char v6 = *(const void **)(a1 + 520);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 520) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101AB8E00();
    sub_1014F1FA0(v7);
  }
}

void *sub_1014F1FA4(uint64_t a1)
{
  return sub_1014F1EA8((void *)(a1 - 72));
}

void sub_1014F1FAC(void *a1)
{
  sub_1014F1EA8(a1);

  operator delete();
}

void sub_1014F1FE4(uint64_t a1)
{
  sub_1014F1EA8((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1014F2020()
{
  return -1;
}

uint64_t sub_1014F2028()
{
  return -1;
}

uint64_t sub_1014F2030(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v30[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v31 = 256;
  if (sub_100082064(v6))
  {
    sub_100082068((void *)(a1 + 352), v30);
    while (!sub_1014F2288(v30, (uint64_t)v26))
    {
      int v8 = v26[0];
      int v7 = v26[1];
      float v9 = v27;
      float v10 = v28;
      uint64_t v11 = v29;
      uint64_t v13 = *(_DWORD **)(a2 + 8);
      unint64_t v12 = *(void *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        unint64_t v15 = *(_DWORD **)a2;
        uint64_t v16 = ((uint64_t)v13 - *(void *)a2) >> 5;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59) {
          sub_1001D7FD4();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 4 > v17) {
          unint64_t v17 = v18 >> 4;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)sub_1001D9EDC(a2 + 16, v19);
          unint64_t v15 = *(_DWORD **)a2;
          uint64_t v13 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = &v20[32 * v16];
        *(_DWORD *)uint64_t v21 = v8;
        *((_DWORD *)v21 + 1) = v7;
        *((float *)v21 + 2) = v9;
        *((float *)v21 + 3) = v10;
        *((void *)v21 + 2) = v11;
        float v22 = v21;
        if (v13 != v15)
        {
          do
          {
            long long v23 = *((_OWORD *)v13 - 1);
            *((_OWORD *)v22 - 2) = *((_OWORD *)v13 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 32;
            v13 -= 8;
          }
          while (v13 != v15);
          unint64_t v15 = *(_DWORD **)a2;
        }
        uint64_t v14 = v21 + 32;
        *(void *)a2 = v22;
        *(void *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = v21 + 32;
        *(void *)(a2 + 16) = &v20[32 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        _DWORD *v13 = v26[0];
        v13[1] = v7;
        *((float *)v13 + 2) = v9;
        *((float *)v13 + 3) = v10;
        uint64_t v14 = (char *)(v13 + 8);
        *((void *)v13 + 2) = v11;
      }
      *(void *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = v14;
    }
    uint64_t v24 = v30[0];
    v30[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_1014F2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014F2288(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  int v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 4) = sqlite3_column_int(v7, 1);
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_double(v8, 2);
  float v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v9, 3);
  float v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v11 = sqlite3_column_double(v10, 4);
  uint64_t result = 0;
  *(double *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_1014F2340(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 336), &v8);
  uint64_t v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1014F23EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F242C(uint64_t a1)
{
  return sub_1014F2340(a1 - 72);
}

uint64_t sub_1014F2434(void *a1, uint64_t a2, int a3, float a4)
{
  uint64_t v9 = a1[14];
  uint64_t v8 = a1 + 14;
  float v10 = v8 - 5;
  float v36 = v8;
  (*(void (**)(void))(v9 + 16))();
  __int16 v38 = 256;
  if (!sub_100082064(v10)) {
    goto LABEL_32;
  }
  sub_100082068(a1 + 46, &v35);
  if (v35)
  {
    double v11 = (sqlite3_stmt *)sub_10014D19C(v35);
    if (sub_10014D1A4(v11, 1, a3))
    {
      unint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v35);
      if (sub_100055D58(v12, 2, a4))
      {
        uint64_t v13 = a1[10];
        uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(v35);
        sub_10001FEB0(v13, v14);
      }
    }
    while (!sub_1014F2288(&v35, (uint64_t)buf))
    {
      int v16 = *(_DWORD *)buf;
      int v15 = v40;
      float v17 = v41;
      float v18 = v42;
      uint64_t v19 = v43;
      uint64_t v21 = *(_DWORD **)(a2 + 8);
      unint64_t v20 = *(void *)(a2 + 16);
      if ((unint64_t)v21 >= v20)
      {
        long long v23 = *(_DWORD **)a2;
        uint64_t v24 = ((uint64_t)v21 - *(void *)a2) >> 5;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59) {
          sub_1001D7FD4();
        }
        uint64_t v26 = v20 - (void)v23;
        if (v26 >> 4 > v25) {
          unint64_t v25 = v26 >> 4;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          double v28 = (char *)sub_1001D9EDC(a2 + 16, v27);
          long long v23 = *(_DWORD **)a2;
          uint64_t v21 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          double v28 = 0;
        }
        uint64_t v29 = &v28[32 * v24];
        *(_DWORD *)uint64_t v29 = v16;
        *((_DWORD *)v29 + 1) = v15;
        *((float *)v29 + 2) = v17;
        *((float *)v29 + 3) = v18;
        *((void *)v29 + 2) = v19;
        uint64_t v30 = v29;
        if (v21 != v23)
        {
          do
          {
            long long v31 = *((_OWORD *)v21 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 32;
            v21 -= 8;
          }
          while (v21 != v23);
          long long v23 = *(_DWORD **)a2;
        }
        float v22 = v29 + 32;
        *(void *)a2 = v30;
        *(void *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = v29 + 32;
        *(void *)(a2 + 16) = &v28[32 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        _DWORD *v21 = *(_DWORD *)buf;
        v21[1] = v15;
        *((float *)v21 + 2) = v17;
        *((float *)v21 + 3) = v18;
        float v22 = (char *)(v21 + 8);
        *((void *)v21 + 2) = v19;
      }
      *(void *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = v22;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232AE70);
    }
    int v32 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "WorkloadCalibratorRecorderDb: failed to prepare getActTypeAndStdDevAsc #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232AE70);
      }
      double v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkloadCalibratorRecorderDb::getAllRecordsByActivityTypeAndMaximumStandardDeviation(std::vector<CLWorkloadCalibratorEntry> &, const int, const float) const", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
  }
  uint64_t result = v35;
  uint64_t v35 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (HIBYTE(v38))
  {
LABEL_32:
    if ((_BYTE)v38) {
      return pthread_mutex_unlock(v37);
    }
    else {
      return (*(uint64_t (**)(void *))(*v36 + 24))(v36);
    }
  }
  return result;
}

void sub_1014F27F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 8))(a6);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014F2864(uint64_t a1, double a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v16[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v17 = 256;
  if (sub_100082064(v6))
  {
    sub_100082068((void *)(a1 + 384), v16);
    int v7 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
    if (sub_100055D58(v7, 1, a2))
    {
      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
      sub_10001FEB0(v8, v9);
      uint64_t v10 = *(void *)(a1 + 80);
      if (*(uint64_t *)(v10 + 88) <= 0) {
        uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 88);
      }
      sub_10003CC68(v10, v11);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232AE90);
      }
      unint64_t v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232AE90);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkloadCalibratorRecorderDb::deleteRecordsBefore(CFTimeInterval)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    uint64_t v13 = v16[0];
    v16[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_1014F2B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 8))(a6);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1014F2B8C(uint64_t *a1)
{
  if (sub_10014C3C0(a1[10]))
  {
    sub_1005F7B0C(a1[10], "WorkloadCalibratorHistory", (const char **)&qword_1024882F0, (const std::string::value_type **)&qword_102488410, 0);
    a1[42] = sub_100601D1C(a1[10], (uint64_t)"SELECT COUNT(*) FROM WorkloadCalibratorHistory WHERE activityType == ?");
    a1[43] = v2;
    a1[44] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime ASC");
    a1[45] = v3;
    a1[46] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM WorkloadCalibratorHistory WHERE activityType == ? AND standardDeviation <= ? ORDER BY startTime ASC");
    a1[47] = v4;
    a1[48] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM WorkloadCalibratorHistory WHERE startTime < ?");
    a1[49] = v5;
    a1[50] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM WorkloadCalibratorHistory WHERE startTime > ?");
    a1[51] = v6;
    a1[52] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM WorkloadCalibratorHistory");
    a1[53] = v7;
    a1[54] = sub_100601D1C(a1[10], (uint64_t)"INSERT INTO WorkloadCalibratorHistory (activityType, valueAverage, standardDeviation, startTime) VALUES (?, ?, ?, ?)");
    a1[55] = v8;
    a1[58] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime DESC LIMIT 1");
    a1[59] = v9;
    a1[56] = sub_100601D1C(a1[10], (uint64_t)"UPDATE WorkloadCalibratorHistory SET startTime = startTime + ?");
    a1[57] = v10;
    a1[60] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM WorkloadCalibratorHistory WHERE id not in (SELECT id FROM WorkloadCalibratorHistory ORDER BY id DESC LIMIT ?) AND activityType = ?");
    a1[61] = v11;
    a1[62] = sub_100601D1C(a1[10], (uint64_t)"UPDATE WorkloadCalibratorHistory SET valueAverage= ?, standardDeviation= ? WHERE startTime = ? AND activityType = ?");
    a1[63] = v12;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232AE90);
    }
    uint64_t v13 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232AE90);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWorkloadCalibratorRecorderDb::prepareSQLStatements()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

uint64_t sub_1014F2E28(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 416), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(v7);
    sub_10001FEB0(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0) {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_10003CC68(v5, v6);
    *(_DWORD *)(a1 + 132) = 0;
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014F2ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F2EE8(uint64_t a1)
{
  return sub_1014F2E28(a1 - 72);
}

uint64_t sub_1014F2EF0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
    sub_100082068((void *)(a1 + 400), &v12);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v12);
    if (sub_100055D58(v5, 3, *(double *)(a2 + 16)))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v12);
      sub_10001FEB0(v6, v7);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232AE90);
      }
      uint64_t v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to delete records.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232AE90);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLWorkloadCalibratorRecorderDb::deleteRecordsAfterInsertUL(const CLWorkloadCalibratorEntry &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    uint64_t v9 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v9 + 88) <= 0) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = *(void *)(v9 + 88);
    }
    sub_10003CC68(v9, v10);
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014F3178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F31C0(uint64_t a1, double a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 448), &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v10);
    if (sub_100055D58(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v10);
      sub_10001FEB0(v6, v7);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232AE90);
      }
      uint64_t v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to shift records.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232AE90);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLWorkloadCalibratorRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014F33D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F341C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 432), &v11);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v11);
    if (sub_10014D1A4(v5, 1, *(_DWORD *)(a2 + 4)))
    {
      uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v11);
      if (sub_100055D58(v6, 2, *(float *)(a2 + 8)))
      {
        uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v11);
        if (sub_100055D58(v7, 3, *(float *)(a2 + 12)))
        {
          uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v11);
          if (sub_100055D58(v8, 4, *(double *)(a2 + 16)))
          {
            uint64_t v9 = *(void *)(a1 + 80);
            uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v11);
            sub_10001FEB0(v9, v10);
          }
        }
      }
    }
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014F3510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F352C(uint64_t a1, int a2, int a3)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 480), &v13);
    uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v13);
    if (sub_10014D1A4(v7, 1, a2))
    {
      uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v13);
      if (sub_10014D1A4(v8, 2, a3))
      {
        uint64_t v9 = *(void *)(a1 + 80);
        uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v13);
        sub_10001FEB0(v9, v10);
        uint64_t v11 = *(void *)(a1 + 80);
        if (*(uint64_t *)(v11 + 88) <= 0) {
          uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v12 = *(void *)(v11 + 88);
        }
        sub_10003CC68(v11, v12);
      }
    }
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014F360C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F3628(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 496), &v11);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v11);
    if (sub_100055D58(v5, 1, *(float *)(a2 + 8)))
    {
      uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v11);
      if (sub_100055D58(v6, 2, *(float *)(a2 + 12)))
      {
        uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v11);
        if (sub_100055D58(v7, 3, *(double *)(a2 + 16)))
        {
          uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v11);
          if (sub_10014D1A4(v8, 4, *(_DWORD *)(a2 + 4)))
          {
            uint64_t v9 = *(void *)(a1 + 80);
            uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v11);
            sub_10001FEB0(v9, v10);
          }
        }
      }
    }
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014F371C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F3738(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232AE90);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a2 + 4);
      double v7 = *(float *)(a2 + 8);
      double v8 = *(float *)(a2 + 12);
      uint64_t v9 = *(void *)(a2 + 16);
      *(_DWORD *)uint64_t buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(double *)&buf[10] = v7;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(double *)&buf[20] = v8;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WorkloadCalibratorDb (%d,%f,%f,%f).", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232AE90);
      }
      double v18 = *(float *)(a2 + 8);
      double v19 = *(float *)(a2 + 12);
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v25 = __PAIR64__(*(_DWORD *)(a2 + 4), 67109888);
      __int16 v26 = 2048;
      double v27 = v18;
      __int16 v28 = 2048;
      double v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = v20;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWorkloadCalibratorRecorderDb::insertRecordUL(const CLWorkloadCalibratorEntry &, BOOL)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t buf = *(_OWORD *)a2;
    *(_OWORD *)&uint8_t buf[16] = v10;
    sub_100082068((void *)(a1 + 432), &v25);
    uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(v25);
    if (sub_10014D1A4(v11, 1, *(_DWORD *)(a2 + 4)))
    {
      uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v25);
      if (sub_100055D58(v12, 2, *(float *)(a2 + 8)))
      {
        uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v25);
        if (sub_100055D58(v13, 3, *(float *)(a2 + 12)))
        {
          uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(v25);
          if (sub_100055D58(v14, 4, *(double *)(a2 + 16)))
          {
            uint64_t v15 = *(void *)(a1 + 80);
            int v16 = (sqlite3_stmt *)sub_10014D19C(v25);
            sub_10001FEB0(v15, v16);
            ++*(_DWORD *)(a1 + 132);
            __int16 v17 = *(void **)(a1 + 512);
            if (v17)
            {
              if (*(void *)(a1 + 520))
              {
                v22[0] = _NSConcreteStackBlock;
                v22[1] = 3221225472;
                _DWORD v22[2] = sub_1014F3ABC;
                v22[3] = &unk_1022ACFE0;
                v22[4] = a1;
                long long v23 = *(_OWORD *)buf;
                long long v24 = *(_OWORD *)&buf[16];
                [v17 async:v22];
              }
            }
          }
        }
      }
    }
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1014F3A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F3ABC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 520);
  long long v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v4);
}

uint64_t sub_1014F3B00()
{
  return 0;
}

uint64_t sub_1014F3B08(uint64_t a1, void *a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 464), &v11);
  uint64_t v4 = sub_1014F2288(&v11, (uint64_t)&v8);
  if (!v4)
  {
    float32x2_t v5 = vcvt_f32_f64(v9);
    *a2 = v8;
    a2[1] = v5;
    a2[2] = v10;
  }
  uint64_t v6 = v11;
  uint64_t v11 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

void sub_1014F3BB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F3BD0(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          float32x2_t v5 = __p;
        }
        else {
          float32x2_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          float64x2_t v9 = __p;
        }
        else {
          float64x2_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AB8F8C(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1014F3FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1014F4058(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1014F5F0C(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10232AE70);
  }
  float32x2_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232AE70);
    }
    double v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232AE70);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLWorkloadCalibratorEntry>::setDatabaseAccessible() [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1014F47AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1014F47E0(uint64_t a1, uint64_t a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 240) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232AE70);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232AE70);
        }
        LOWORD(v31) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 16);
    double v8 = v29;
    double v9 = v7 - v29;
    if (v7 - v29 < 0.0) {
      double v9 = -(v7 - v29);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232AE70);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 16);
        *(_DWORD *)uint64_t buf = 134349312;
        double v36 = v29;
        __int16 v37 = 2050;
        uint64_t v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232AE70);
        }
        uint64_t v22 = *(void *)(a2 + 16);
        int v31 = 134349312;
        double v32 = v29;
        __int16 v33 = 2050;
        uint64_t v34 = v22;
        long long v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 16);
      double v8 = v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232AE70);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 16);
          *(_DWORD *)uint64_t buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_10232AE70);
          }
          double v24 = *(double *)(a2 + 16);
          int v31 = 134217984;
          double v32 = v24;
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_10232AE70);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232AE70);
        }
        int v31 = 134217984;
        double v32 = v18;
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkloadCalibratorEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_1014F4FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1014F500C(uint64_t a1)
{
  return sub_1014F4058(a1 - 72);
}

void sub_1014F5014(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1014F5044(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1014F5074(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB90FC(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1014F5438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1014F54B8(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB926C(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1014F582C(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB93DC(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      float32x2_t v5 = __p;
    }
    else {
      float32x2_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1014F5B58(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB954C(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_1014F5E7C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_1014F5F0C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1014F5F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014F5FA8(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1014F5FD8()
{
  qword_1024882F0 = (uint64_t)"id";
  dword_1024882F8 = 1;
  word_1024882FC = 1;
  byte_102488300 = 0;
  byte_102488318 = 0;
  qword_102488320 = (uint64_t)"activityType";
  dword_102488328 = 1;
  word_10248832C = 0;
  byte_102488330 = 0;
  byte_102488348 = 0;
  qword_102488350 = (uint64_t)"valueAverage";
  dword_102488358 = 2;
  word_10248835C = 0;
  byte_102488360 = 0;
  byte_102488378 = 0;
  qword_102488380 = (uint64_t)"standardDeviation";
  dword_102488388 = 2;
  word_10248838C = 0;
  byte_102488390 = 0;
  byte_1024883A8 = 0;
  qword_1024883B0 = (uint64_t)"startTime";
  dword_1024883B8 = 2;
  word_1024883BC = 0;
  byte_1024883C0 = 0;
  byte_1024883D8 = 0;
  qword_1024883E0 = 0;
  dword_1024883E8 = 5;
  word_1024883EC = 0;
  byte_1024883F0 = 0;
  byte_102488408 = 0;
  qword_102488410 = (uint64_t)"activityType";
  *(void *)algn_102488418 = "startTime";
  qword_102488420 = 0;
}

void sub_1014F60A0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  *uint64_t v5 = off_10232AFD8;
  v5[6] = 0;
  sub_101594980();
}

void sub_1014F617C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v3) {
    sub_101A6A9C8(v3);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_1014F61A0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232B098);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimDataSubscription::onSwimNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232B098);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimDataSubscription::onSwimNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1014F7340(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1014F635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F6380(void *a1)
{
  *a1 = off_10232AFD8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[6];
    a1[6] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_1014F6434(void *a1)
{
  sub_1014F6380(a1);

  operator delete();
}

void *sub_1014F646C@<X0>(uint64_t a1@<X8>)
{
  v6[0] = off_10232B308;
  v6[1] = sub_1014F66BC;
  void v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v7, "kCLConnectionMessageSwimDataUpdate");
  sub_100BF79B0((uint64_t)&v8, (uint64_t)v6);
  v5[0] = off_10232B3B8;
  v5[1] = sub_1014F6ACC;
  void v5[2] = 0;
  void v5[3] = v5;
  sub_100134750(v9, "kCLConnectionMessageSwimDataQuery");
  sub_100BF79B0((uint64_t)&v10, (uint64_t)v5);
  v4[0] = off_10232B3B8;
  v4[1] = sub_1014F6F1C;
  _OWORD v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v11, "kCLConnectionMessageSwimSWOLFSessionQuery");
  sub_100BF79B0((uint64_t)v12, (uint64_t)v4);
  sub_1014F879C(a1, (unsigned __int8 *)v7, 3);
  for (uint64_t i = 0; i != -21; i -= 7)
  {
    sub_100BF7ECC(&v12[i * 8]);
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  sub_100BF7ECC(v4);
  sub_100BF7ECC(v5);
  return sub_100BF7ECC(v6);
}

void sub_1014F6634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  for (uint64_t i = 112; i != -56; i -= 56)
    sub_1014F7304((uint64_t)(&a21 + i));
  sub_100BF7ECC(&a9);
  sub_100BF7ECC(&a13);
  sub_100BF7ECC(&a17);
  _Unwind_Resume(a1);
}

void sub_1014F66BC(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10232B0D8);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SwimData subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232B0D8);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    unsigned int v16 = 138412802;
    uint64_t v17 = v11;
    __int16 v18 = 2048;
    uint64_t v19 = a1;
    __int16 v20 = 1024;
    int v21 = a2;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleRequestSwimDataUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v12 != buf) {
      free(v12);
    }
  }
  unsigned int v16 = 0;
  if (sub_1014F7624(a1, (int *)&v16))
  {
    sub_10009C834(a1);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:0 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:0];
    }
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232B0B8);
    }
    uint64_t v10 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to swim updates.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232B0B8);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleRequestSwimDataUpdate(BOOL, const CLNameValuePair &)", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
    uint64_t v14 = CMErrorMessage;
    uint64_t v15 = +[NSNumber numberWithUnsignedInt:v16];
    *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    sub_1014F76F0(a1);
  }
}

void sub_1014F6A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1014F6ACC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v16 = 0;
  if (sub_1014F7624(a1, (int *)&v16))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v6);
    uint64_t v8 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (uint64_t v9 = CMSwimKeyDataRecord, [DictionaryOfClasses objectForKeyedSubscript:CMSwimKeyDataRecord]))
    {
      uint64_t v10 = [[CLOSTransaction alloc] initWithDescription:"CLDaemonClient.SwimNotifierQuery"];
      uint64_t v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)uint64_t buf = 0u;
      [objc_msgSend(v8, "objectForKeyedSubscript:", v9) convertToSwimEntry:buf];
      uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 16);
      v30[6] = v40;
      v30[7] = v41;
      v30[8] = v42;
      uint64_t v31 = v43;
      id v30[2] = v36;
      uint64_t v30[3] = v37;
      v30[4] = v38;
      v30[5] = v39;
      v30[0] = *(_OWORD *)buf;
      v30[1] = v35;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3321888768;
      long long v24 = v40;
      long long v25 = v41;
      long long v26 = v42;
      long long v20 = v36;
      long long v21 = v37;
      long long v22 = v38;
      long long v23 = v39;
      long long v18 = *(_OWORD *)buf;
      v17[2] = sub_1014F7784;
      long long v17[3] = &unk_10232B000;
      long long v19 = v35;
      int v13 = *(CLConnectionMessage **)a2;
      uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v27 = v43;
      __int16 v28 = v13;
      double v29 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      void v17[4] = v10;
      [v11 queryUsingRecord:v30 withReply:v17];
      if (v29) {
        sub_1000DB0A0(v29);
      }
    }
    else
    {
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232B0B8);
      }
      uint64_t v14 = qword_102419008;
      if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_10232B0B8);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLSwimDataSubscription::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v32 = CMErrorMessage;
      __int16 v33 = &off_1023950C0;
      +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v44 = CMErrorMessage;
    float v45 = +[NSNumber numberWithUnsignedInt:v16];
    +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1014F6ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1014F6F1C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v19 = 0;
  long long v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  if (sub_1014F7624(a1, &v22))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v6);
    uint64_t v8 = CMSwimSWOLFSessionIdKey;
    if ([DictionaryOfClasses objectForKeyedSubscript:CMSwimSWOLFSessionIdKey])
    {
      uint64_t v9 = [[CLOSTransaction alloc] initWithDescription:"CLDaemonClient.SWOLFQueryForSessionId"];
      uint64_t v10 = *(void **)(*(void *)(a1 + 48) + 16);
      id v11 = [DictionaryOfClasses objectForKeyedSubscript:v8];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3321888768;
      v16[2] = sub_1014F7A54;
      uint64_t v16[3] = &unk_10232B038;
      int v13 = *(CLConnectionMessage **)a2;
      uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
      v16[5] = &v19;
      void v16[6] = v13;
      uint64_t v17 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      void v16[4] = v9;
      [v10 querySessionSWOLF:v11 withReply:v16];
      if (v17) {
        sub_1000DB0A0(v17);
      }
    }
    else
    {
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232B0B8);
      }
      uint64_t v14 = qword_102419008;
      if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "SWOLF query,empty request", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_10232B0B8);
        }
        __int16 v18 = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLSwimDataSubscription::handleSWOLFQueryForSessionId(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v23 = CMErrorMessage;
      long long v24 = &off_1023950C0;
      +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v26 = CMErrorMessage;
    uint64_t v27 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v20 + 6)];
    +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    CLConnectionMessage::sendReply();
  }
  _Block_object_dispose(&v19, 8);
}

void sub_1014F72AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1014F7304(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1014F7340(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    id v5 = [objc_alloc((Class)CMSwimData) initWithSwimEntry:a4];
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232B0B8);
    }
    uint64_t v6 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 138412802;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      __int16 v22 = 2048;
      uint64_t v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232B0B8);
      }
      uint64_t v8 = *(void *)(a1 + 24);
      int v13 = 138412802;
      id v14 = v5;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = a1;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataSubscription::onSwimNotification(int, const CLSwimNotifier_Type::Notification &, const CLSwimNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v9 != buf) {
        free(v9);
      }
    }
    id v10 = v5;
    uint64_t v11 = CMSwimKeyDataArray;
    uint64_t v12 = +[NSArray arrayWithObjects:&v10 count:1];
    *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];

    sub_1014F75A0(a1);
  }
}

void sub_1014F75A0(uint64_t a1)
{
  sub_1000E9420(&off_10232B428, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1014F760C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F7624(uint64_t a1, int *a2)
{
  sub_100134750(&__p, "com.apple.locationd.natalimetry");
  char v4 = sub_1010A4BAC(a1);
  char v5 = v4;
  if ((v9 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    int v6 = 110;
    goto LABEL_10;
  }
  operator delete(__p);
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (sub_1010A4D14(a1))
  {
    if (sub_101591190(*(void *)(a1 + 8)) && (sub_1000A16E8() & 0x40000000) != 0) {
      return 1;
    }
    int v6 = 109;
  }
  else
  {
    int v6 = 111;
  }
LABEL_10:
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

void sub_1014F76D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014F76F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_10232B428, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1014F776C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014F7784(uint64_t a1, void *a2)
{
  if (a2) {
    char v4 = a2;
  }
  else {
    char v4 = &__NSArray0__struct;
  }
  uint64_t v18 = CMSwimKeyDataArray;
  uint64_t v19 = v4;
  +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
  memset(out, 0, 37);
  memset(v16, 0, 37);
  uuid_unparse((const unsigned __int8 *)(a1 + 48), out);
  uuid_unparse((const unsigned __int8 *)(a1 + 64), v16);
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_10232B0B8);
  }
  char v5 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 134218754;
    uint64_t v9 = v6;
    __int16 v10 = 2080;
    uint64_t v11 = out;
    __int16 v12 = 2080;
    int v13 = v16;
    __int16 v14 = 2048;
    id v15 = [a2 count];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Query: id, %llu, session, %s, db, %s, Response (numel): %lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232B0B8);
    }
    [a2 count];
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  CLConnectionMessage::sendReply();
}

uint64_t sub_1014F7A28(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 200);
  *(void *)(result + 192) = *(void *)(a2 + 192);
  *(void *)(result + 200) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1014F7A44(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 200);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1014F7A54(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 == 100)
  {
    uint64_t v12 = CMSwimSWOLFDataKey;
    int v13 = a2;
    +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232B0B8);
    }
    char v5 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [a2 description];
      *(_DWORD *)uint64_t buf = 138412290;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Session SWOLF Query Result: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232B0B8);
      }
      [a2 description];
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataSubscription::handleSWOLFQueryForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    CLConnectionMessage::sendReply();
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232B0B8);
    }
    uint64_t v8 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v17) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error querying session swolf, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232B0B8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSwimDataSubscription::handleSWOLFQueryForSessionId(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v14 = CMErrorMessage;
    id v15 = +[NSNumber numberWithUnsignedInt:a3];
    +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1014F7E1C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1014F7E4C(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_1014F7E7C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1014F7EB0()
{
}

void *sub_1014F7EC4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_10232B108;
  return result;
}

void sub_1014F7EFC(uint64_t a1, void *a2)
{
  *a2 = off_10232B108;
}

double sub_1014F7F24(uint64_t a1, double **a2)
{
  uint64_t v2 = *a2;
  double result = **a2;
  double v4 = 0.0;
  while (v2 != a2[1])
  {
    double v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_1014F7F50(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1014F7F90()
{
}

void sub_1014F7FA0()
{
}

void *sub_1014F7FB4()
{
  double result = operator new(0x10uLL);
  void *result = off_10232B188;
  return result;
}

void sub_1014F7FEC(uint64_t a1, void *a2)
{
  *a2 = off_10232B188;
}

double sub_1014F8014(uint64_t a1, double **a2)
{
  uint64_t v2 = a2[1];
  double result = **a2;
  double v4 = 0.0;
  if (*a2 != v2)
  {
    char v5 = *a2;
    do
    {
      double v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_1014F8064(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1014F80A4()
{
}

void sub_1014F80B4()
{
}

void *sub_1014F80C8()
{
  double result = operator new(0x10uLL);
  void *result = off_10232B208;
  return result;
}

void sub_1014F8100(uint64_t a1, void *a2)
{
  *a2 = off_10232B208;
}

BOOL sub_1014F8128(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_1014F8138(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1014F8178()
{
}

void sub_1014F8188()
{
}

void *sub_1014F819C()
{
  double result = operator new(0x10uLL);
  void *result = off_10232B288;
  return result;
}

void sub_1014F81D4(uint64_t a1, void *a2)
{
  *a2 = off_10232B288;
}

BOOL sub_1014F81FC(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_1014F8214(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1014F8254()
{
}

__n128 sub_1014F8260(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10232B308;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  return result;
}

__n128 sub_1014F82AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10232B308;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  return result;
}

void sub_1014F82DC(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_1014F82E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014F8324()
{
}

void sub_1014F8330(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1014F838C(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1014F8374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F838C(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  id v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    __int16 v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B378);
    }
    uint64_t v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232B378);
      }
    }
    uint64_t v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_1014F85BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1014F85D8(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1014F8608(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10232B3B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  return result;
}

__n128 sub_1014F8654(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10232B3B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  return result;
}

void sub_1014F8684(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1014F868C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014F86CC()
{
}

void sub_1014F86D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  double v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  char v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    char v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_1014F8778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014F879C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1014F8818(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1014F8804(_Unwind_Exception *a1)
{
  sub_100BF7F50(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1014F8818(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1014F8A9C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1014F8B8C((uint64_t)v25, 0);
  return i;
}

void sub_1014F8A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1014F8B8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1014F8A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x310], 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1014F8B14(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1014F8AFC(_Unwind_Exception *a1)
{
  sub_1014F8B8C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1014F8B14(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BF7708((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1014F8B70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014F8B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF7FD0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_1014F8BE4()
{
  xmmword_102488430 = xmmword_101E0D5F0;
  unk_102488440 = xmmword_101E0D600;
  xmmword_102488450 = xmmword_101E0D610;
  unk_102488460 = xmmword_101E0D620;
  xmmword_102488470 = xmmword_101E0D630;
  unk_102488480 = xmmword_101E0D640;
  xmmword_102488490 = xmmword_101E0D650;
  unk_1024884A0 = xmmword_101E0D660;
  xmmword_1024884B0 = xmmword_101E0D670;
  unk_1024884C0 = xmmword_101E0D680;
  xmmword_1024884D0 = xmmword_101E0D690;
  unk_1024884E0 = xmmword_101E0D6A0;
  qword_1024884F0 = (uint64_t)off_10232B108;
  qword_102488508 = (uint64_t)&qword_1024884F0;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_1024884F0, (void *)&_mh_execute_header);
  qword_102488510 = (uint64_t)off_10232B188;
  qword_102488528 = (uint64_t)&qword_102488510;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_102488510, (void *)&_mh_execute_header);
  qword_102488530 = (uint64_t)off_10232B208;
  qword_102488548 = (uint64_t)&qword_102488530;
  __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_102488530, (void *)&_mh_execute_header);
  qword_102488550 = (uint64_t)off_10232B288;
  qword_102488568 = (uint64_t)&qword_102488550;

  return __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_102488550, (void *)&_mh_execute_header);
}

void sub_1014F8E1C(id a1)
{
  qword_102488570 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLClientAuthorizationCacheSilo"];
}

void sub_1014F9988(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  _Unwind_Resume(a1);
}

void sub_1014F9D90(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1014FA27C(uint64_t a1, void *a2)
{
  long long v4 = sub_1014FBCB4((void *)a1);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232B610);
  }
  uint64_t v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = [*(id *)(a1 + 136) isAuthorizedForServiceType:6];
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t buf = 68290050;
    __int16 v45 = 2082;
    float v46 = "";
    __int16 v47 = 1026;
    *(_DWORD *)float v48 = v6;
    *(_WORD *)&v48[4] = 2114;
    *(void *)&_OWORD v48[6] = v4;
    *(_WORD *)&v48[14] = 2114;
    *(void *)&unsigned char v48[16] = v7;
    *(_WORD *)&v48[24] = 2114;
    *(void *)&v48[26] = sub_10009AD44((void *)a1, @"activeType");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#INFO #slv authorization status\", \"isAuthorized\":%{public}hhd, \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x36u);
  }
  if ([*(id *)(a1 + 136) isAuthorizedForServiceType:6])
  {
    if ([*(id *)(a1 + 136) isAuthorizedForServiceType:12])
    {
      sub_1014FB184(a1, (uint64_t)a2, v4);
    }
    else
    {
      [a2 coordinate];
      uint64_t v12 = v11;
      [a2 coordinate];
      uint64_t v14 = v13;
      [a2 horizontalAccuracy];
      uint64_t v16 = v15;
      float v17 = *(void **)(a1 + 280);
      id v18 = objc_alloc((Class)CLLocation);
      int v25 = 0xFFFF;
      uint64_t v26 = v12;
      uint64_t v27 = v14;
      uint64_t v28 = v16;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v29 = xmmword_101D1C570;
      long long v30 = _Q0;
      long long v31 = _Q0;
      unint64_t v32 = 0xBFF0000000000000;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v34 = 0xBFF0000000000000;
      int v33 = 0;
      int v37 = 0;
      unint64_t v38 = 0xBFF0000000000000;
      int v39 = 0x7FFFFFFF;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v40 = 0;
      char v43 = 0;
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      void v24[2] = sub_1014FBD0C;
      v24[3] = &unk_10232B520;
      v24[5] = v4;
      v24[6] = a1;
      v24[4] = a2;
      [v17 snapLocation:objc_msgSend(v18, "initWithClientLocation:", &v25) withReply:v24];
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    unint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = sub_10009AD44((void *)a1, @"activeType");
      uint64_t buf = 68289794;
      __int16 v45 = 2082;
      float v46 = "";
      __int16 v47 = 2114;
      *(void *)float v48 = v4;
      *(_WORD *)&v48[8] = 2114;
      *(void *)&v48[10] = v9;
      *(_WORD *)&v48[18] = 2114;
      *(void *)&v48[20] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #slv Got visit when we should be unsubscribed\", \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
    }
  }
}

uint64_t sub_1014FA5CC(uint64_t a1)
{
  *(void *)a1 = off_10232B480;
  sub_100195744(a1);

  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 280) = 0;

  *(void *)(a1 + 264) = 0;
  [*(id *)(a1 + 256) invalidate];

  *(void *)(a1 + 256) = 0;

  return sub_100702CC8(a1);
}

void sub_1014FA660(uint64_t a1)
{
  sub_1014FA5CC(a1);

  operator delete();
}

void *sub_1014FA698@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_10232B640;
  v5[1] = sub_1014FA850;
  void v5[2] = 0;
  void v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageSignificantLocationVisit");
  sub_100BEC710((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_10232B640;
  v4[1] = sub_1014FACD0;
  _OWORD v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageSignificantLocationVisitState");
  sub_100BEC710((uint64_t)v9, (uint64_t)v4);
  sub_1014FCB30(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BECA68(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BECA68(v4);
  return sub_100BECA68(v5);
}

void sub_1014FA7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_1014FB0EC(v2 + i);
  sub_100BECA68((uint64_t *)va);
  sub_100BECA68(va1);
  _Unwind_Resume(a1);
}

void sub_1014FA850(void *a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v22, Dictionary);
  BOOL v21 = 0;
  if (sub_1000D2988((uint64_t)v22, "kCLConnectionMessageSubscribeKey", &v21))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    unsigned int v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[8];
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      int v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = v7;
      __int16 v28 = 1026;
      BOOL v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Client subscribe\", \"client\":%{public, location:escape_only}@, \"subscribe\":%{public}hhd}", buf, 0x22u);
    }
    if (!v21)
    {
      sub_1014FBE78(a1, 0);
      goto LABEL_20;
    }
    unsigned int v20 = 0;
    if (!sub_10006EF84((uint64_t)v22, "kCLConnectionMessageSignificantLocationVisitTypeKey", &v20)) {
      goto LABEL_10;
    }
    sub_100134750(buf, "com.apple.locationd.slv_configurer");
    char isEntitled = CLConnectionMessage::isEntitled();
    char v9 = isEntitled;
    if (SBYTE3(v27) < 0)
    {
      operator delete(*(void **)buf);
      if (v9) {
        goto LABEL_10;
      }
    }
    else if (isEntitled)
    {
LABEL_10:
      sub_1014FBE78(a1, v20 | (unint64_t)&_mh_execute_header);
      goto LABEL_20;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    uint64_t v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v17 = a1[8];
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      int v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLV configuration\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232B610);
      }
    }
    uint64_t v18 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v19 = a1[8];
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      int v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = v19;
      uint64_t v12 = "Client is not entitled to provide #SLV configuration";
      uint64_t v13 = "{\"msg%{public}.0s\":\"Client is not entitled to provide #SLV configuration\", \"client\":%{public, location:escape_only}@}";
      uint64_t v14 = v18;
      uint32_t v15 = 28;
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    uint64_t v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      int v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232B610);
      }
    }
    uint64_t v11 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      int v25 = "";
      uint64_t v12 = "Couldn't get value for kCLConnectionMessageSubscribeKey key";
      uint64_t v13 = "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}";
      uint64_t v14 = v11;
      uint32_t v15 = 18;
LABEL_18:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, buf, v15);
    }
  }
LABEL_20:
  sub_10013F3C4(v22);
}

void sub_1014FAC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a11);

  _Unwind_Resume(a1);
}

void sub_1014FACD0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  unint64_t v3 = sub_1014FBCB4((void *)a1);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232B610);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [*(id *)(a1 + 136) isAuthorizedForServiceType:6];
    uint64_t v6 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68290050;
    __int16 v24 = 2082;
    int v23 = 0;
    int v25 = "";
    __int16 v26 = 1026;
    *(_DWORD *)uint64_t v27 = v5;
    *(_WORD *)&v27[4] = 2114;
    *(void *)&v27[6] = v3;
    *(_WORD *)&v27[14] = 2114;
    *(void *)&v27[16] = v6;
    *(_WORD *)&v27[24] = 2114;
    *(void *)&v27[26] = sub_10009AD44((void *)a1, @"activeType");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#INFO #slv authorization status\", \"isAuthorized\":%{public}hhd, \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@}", buf, 0x36u);
  }
  unsigned __int8 v7 = [*(id *)(a1 + 136) isAuthorizedForServiceType:6];
  if (v3) {
    unsigned __int8 v8 = v7;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  if (v8)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    char v9 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      id v10 = [*(id *)(a1 + 128) silo];
      *(_DWORD *)uint64_t buf = 68289282;
      int v23 = 0;
      __int16 v24 = 2082;
      int v25 = "";
      __int16 v26 = 2114;
      *(void *)uint64_t v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv We can retrieve the visit\", \"Silo\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (*(void *)(a1 + 264))
    {
      id v11 = objc_alloc((Class)RTStoredVisitFetchOptions);
      id v12 = [v11 initWithAscending:0 confidence:[NSNumber numberWithDouble:RTVisitConfidenceHigh] dateInterval:0 labelVisit:1 limit:&off_1023950D8];
      uint64_t v13 = *(void **)(a1 + 264);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1014FBF18;
      v21[3] = &unk_10232B548;
      v21[4] = v3;
      v21[5] = a1;
      [v13 fetchStoredVisitsWithOptions:v12 withReply:v21];
      goto LABEL_24;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    uint64_t v20 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      int v25 = "";
      uint64_t v17 = "{\"msg%{public}.0s\":\"#Warning #slv CLRoutineMonitor is not supported.\"}";
      uint64_t v18 = v20;
      uint32_t v19 = 18;
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    uint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 64);
      uint64_t v16 = sub_10009AD44((void *)a1, @"activeType");
      *(_DWORD *)uint64_t buf = 68289794;
      int v23 = 0;
      __int16 v24 = 2082;
      int v25 = "";
      __int16 v26 = 2114;
      *(void *)uint64_t v27 = v3;
      *(_WORD *)&v27[8] = 2114;
      *(void *)&_OWORD v27[10] = v15;
      *(_WORD *)&unsigned char v27[18] = 2114;
      *(void *)&v27[20] = v16;
      uint64_t v17 = "{\"msg%{public}.0s\":\"#Warning #slv Got visit state request when we should be unsubscribed\", \"commencemen"
            "tDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public"
            ", location:escape_only}@}";
      uint64_t v18 = v14;
      uint32_t v19 = 48;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    }
  }
LABEL_24:
}

void sub_1014FB0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1014FB0EC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id sub_1014FB128(uint64_t a1, void *a2)
{
  id v3 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a2 encodeWithCoder:v3];

  return [v3 encodedData];
}

void sub_1014FB184(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = +[CLVisit _visitWithVisit:a2 authDate:a3];
  if (v5)
  {
    uint64_t v6 = v5;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    unsigned __int8 v7 = qword_102419528;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t buf = 68289539;
      __int16 v53 = 2082;
      float v54 = "";
      __int16 v55 = 2113;
      float v56 = v6;
      __int16 v57 = 2114;
      uint64_t v58 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Sending visit to client\", \"visit\":%{private, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    CFStringRef v50 = @"kCLConnectionMessageSignificantLocationVisitKey";
    id v51 = sub_1014FB128(v8, v6);
    id v10 = +[NSDictionary dictionaryWithObjects:&v51 forKeys:&v50 count:1];
    id v11 = [*(id *)(a1 + 64) legacyClientKey];
    [v6 coordinate];
    uint64_t v13 = v12;
    [v6 coordinate];
    uint64_t v15 = v14;
    [v6 horizontalAccuracy];
    uint64_t v17 = v16;
    id v18 = objc_alloc((Class)CLLocation);
    int v31 = 0xFFFF;
    uint64_t v32 = v13;
    uint64_t v33 = v15;
    uint64_t v34 = v17;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v35 = xmmword_101D1C570;
    long long v36 = _Q0;
    long long v37 = _Q0;
    unint64_t v38 = 0xBFF0000000000000;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    unint64_t v40 = 0xBFF0000000000000;
    int v39 = 0;
    int v43 = 0;
    unint64_t v44 = 0xBFF0000000000000;
    int v45 = 0x7FFFFFFF;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v46 = 0;
    char v49 = 0;
    id v24 = [v18 initWithClientLocation:&v31];
    int v25 = *(void **)(a1 + 288);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    id v30[2] = sub_1014FB4C8;
    uint64_t v30[3] = &unk_10232B4D0;
    v30[5] = v11;
    v30[6] = a1;
    v30[4] = v10;
    [v25 handleProvisionalIntermediationForService:6 forClientKey:v11 at:v24 withReply:v30];
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    __int16 v26 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(a1 + 64);
      uint64_t v28 = sub_10009AD44((void *)a1, @"activeType");
      unsigned int v29 = [*(id *)(a1 + 136) isAuthorizedForServiceType:6];
      uint64_t buf = 68290050;
      __int16 v53 = 2082;
      float v54 = "";
      __int16 v55 = 2114;
      float v56 = a3;
      __int16 v57 = 2114;
      uint64_t v58 = v27;
      __int16 v59 = 2114;
      uint64_t v60 = v28;
      __int16 v61 = 1026;
      unsigned int v62 = v29;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Dropping visit because there's nothing left after slicing out unauthorized bits\", \"commencementDate\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@, \"interest\":%{public, location:escape_only}@, \"authorized\":%{public}hhd}", (uint8_t *)&buf, 0x36u);
    }
  }
}

void *sub_1014FB4C8(void *result, int a2)
{
  if (a2)
  {
    id v2 = result;
    uint64_t v3 = result[6];
    sub_1014FB530(v3, 10.0);
    id v4 = [[objc_msgSend(*(id *)(v3 + 128), "vendor") proxyForService:@"CLApplicationLifecycleManager"];
    uint64_t v5 = v2[5];
    return [v4 launchApplication:v5 requiringAuthForServiceMask:64];
  }
  return result;
}

void sub_1014FB530(uint64_t a1, double a2)
{
  sub_100134750(__p, "kCLConnectionMessageSignificantLocationVisit");
  sub_1014FD05C(&v13);
  uint64_t v5 = v13;
  id v4 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = __p;
  uint64_t v6 = sub_10017F3F8(a1 + 200, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v17);
  *((void *)v6 + 5) = 64;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v7 = (std::__shared_weak_count *)*((void *)v6 + 7);
  *((void *)v6 + 6) = v5;
  *((void *)v6 + 7) = v4;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  for (uint64_t i = *(void **)(a1 + 176); i; uint64_t i = (void *)*i)
  {
    uint64_t v9 = i[2];
    uint64_t v11 = v13;
    uint64_t v12 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 16))(v9, &v11, 64);
    if (v12) {
      sub_1000DB0A0(v12);
    }
  }
  if (a2 >= 0.0)
  {
    sub_1014FCF78(a1, a2);
  }
  else
  {
    id v10 = +[NSString stringWithUTF8String:"kCLConnectionMessageSignificantLocationVisit"];
    [objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v10) invalidate];
    [*(id *)(a1 + 240) setObject:0 forKeyedSubscript:v10];
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1014FB6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1014FB724(uint64_t a1, char *a2)
{
  if (a2)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    id v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 64);
      uint64_t buf = 68289539;
      __int16 v55 = 2082;
      float v56 = "";
      __int16 v57 = 2113;
      uint64_t v58 = a2;
      __int16 v59 = 2114;
      uint64_t v60 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Preparing visit info for client\", \"visit\":%{private, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    id v6 = objc_alloc((Class)CLVisit);
    [a2 coordinate];
    double v8 = v7;
    double v10 = v9;
    [a2 horizontalAccuracy];
    id v12 = [v6 initWithCoordinate:v8 horizontalAccuracy:v10 arrivalDate:[NSDate distantPast] departureDate:[NSDate distantFuture] detectionDate:[NSDate distantPast] placeInference:[a2 _placeInference]];
    CFStringRef v52 = @"kCLConnectionMessageSignificantLocationVisitStateKey";
    id v53 = sub_1014FB128((uint64_t)v12, v12);
    uint64_t v13 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    uint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 64);
      uint64_t buf = 68289539;
      __int16 v55 = 2082;
      float v56 = "";
      __int16 v57 = 2081;
      uint64_t v58 = "";
      __int16 v59 = 2114;
      uint64_t v60 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Preparing visit info for client\", \"visit\":%{private, location:escape_only}s, \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    uint64_t v13 = (NSDictionary *)&__NSDictionary0__struct;
  }
  id v16 = [*(id *)(a1 + 64) legacyClientKey];
  [a2 coordinate];
  uint64_t v18 = v17;
  [a2 coordinate];
  uint64_t v20 = v19;
  [a2 horizontalAccuracy];
  uint64_t v22 = v21;
  id v23 = objc_alloc((Class)CLLocation);
  int v33 = 0xFFFF;
  uint64_t v34 = v18;
  uint64_t v35 = v20;
  uint64_t v36 = v22;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v37 = xmmword_101D1C570;
  long long v38 = _Q0;
  long long v39 = _Q0;
  unint64_t v40 = 0xBFF0000000000000;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v42 = 0xBFF0000000000000;
  int v41 = 0;
  int v45 = 0;
  unint64_t v46 = 0xBFF0000000000000;
  int v47 = 0x7FFFFFFF;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  char v51 = 0;
  id v29 = [v23 initWithClientLocation:&v33];
  long long v30 = *(void **)(a1 + 288);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1014FBAA4;
  v32[3] = &unk_10232B4F8;
  v32[4] = v13;
  v32[5] = a1;
  return [v30 handleProvisionalIntermediationForService:6 forClientKey:v16 at:v29 withReply:v32];
}

void sub_1014FBAA4(uint64_t a1, int a2)
{
  if (a2) {
    sub_1014FBAC0(*(void *)(a1 + 40), 10.0);
  }
}

void sub_1014FBAC0(uint64_t a1, double a2)
{
  sub_100134750(__p, "kCLConnectionMessageSignificantLocationVisitState");
  sub_1014FD05C(&v13);
  uint64_t v5 = v13;
  id v4 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = __p;
  id v6 = sub_10017F3F8(a1 + 200, (unsigned __int8 *)__p, (uint64_t)&unk_101D0B290, (long long **)&v17);
  *((void *)v6 + 5) = 64;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v7 = (std::__shared_weak_count *)*((void *)v6 + 7);
  *((void *)v6 + 6) = v5;
  *((void *)v6 + 7) = v4;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  for (uint64_t i = *(void **)(a1 + 176); i; uint64_t i = (void *)*i)
  {
    uint64_t v9 = i[2];
    uint64_t v11 = v13;
    id v12 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 16))(v9, &v11, 64);
    if (v12) {
      sub_1000DB0A0(v12);
    }
  }
  if (a2 >= 0.0)
  {
    sub_1014FD138(a1, a2);
  }
  else
  {
    double v10 = +[NSString stringWithUTF8String:"kCLConnectionMessageSignificantLocationVisitState"];
    [objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v10) invalidate];
    [*(id *)(a1 + 240) setObject:0 forKeyedSubscript:v10];
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1014FBC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDate *sub_1014FBCB4(void *a1)
{
  __n128 result = (NSDate *)sub_10009AD44(a1, @"startDate");
  if (result)
  {
    [(NSDate *)result doubleValue];
    return +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  }
  return result;
}

void sub_1014FBD0C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = sub_1014FBD54(a1, a2, *(void **)(a1 + 32));
  uint64_t v5 = *(void **)(a1 + 40);

  sub_1014FB184(v3, (uint64_t)v4, v5);
}

id sub_1014FBD54(uint64_t a1, void *a2, void *a3)
{
  if (a2)
  {
    [a2 clientLocation];
    double v5 = v11;
    [a2 clientLocation];
    double v6 = v10;
    id v7 = objc_alloc((Class)CLVisit);
    [a2 clientLocation];
    double v8 = v12;
  }
  else
  {
    id v7 = objc_alloc((Class)CLVisit);
    double v8 = 0.0;
    double v6 = 0.0;
    double v5 = 0.0;
  }
  return [v7 initWithCoordinate:objc_msgSend(a3, "arrivalDate") horizontalAccuracy:objc_msgSend(a3, "departureDate") arrivalDate:objc_msgSend(a3, "detectionDate") placeInference:objc_msgSend(a3, "_placeInference")];
}

id sub_1014FBE78(void *a1, uint64_t a2)
{
  id result = (id)sub_10009AD44(a1, @"activeType");
  if ((a2 & 0xFF00000000) != 0)
  {
    if (result)
    {
      id result = [result intValue];
      if (result == a2) {
        return result;
      }
    }
    double v5 = +[NSNumber numberWithInt:a2];
  }
  else
  {
    if (!result) {
      return result;
    }
    double v5 = 0;
  }
  sub_10009A6F0((uint64_t)a1, @"activeType", (uint64_t)v5);
  sub_100196178((uint64_t)a1);

  return (id)sub_10009AC4C((uint64_t)a1);
}

void sub_1014FBF18(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232B610);
  }
  id v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    id v8 = [*(id *)(v6 + 128) silo];
    *(_DWORD *)uint64_t buf = 68289282;
    int v57 = 0;
    __int16 v58 = 2082;
    __int16 v59 = "";
    __int16 v60 = 2114;
    id v61 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv inside the fetchStoredVisitsWithOptions block\", \"Silo\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  [*(id *)(v6 + 128) silo];
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232B610);
  }
  uint64_t v9 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    id v10 = [*(id *)(v6 + 128) silo];
    *(_DWORD *)uint64_t buf = 68289282;
    int v57 = 0;
    __int16 v58 = 2082;
    __int16 v59 = "";
    __int16 v60 = 2114;
    id v61 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv after the DBG_ASSERT_INSIDE\", \"Silo\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (a3)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    double v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v57 = 0;
      __int16 v58 = 2082;
      __int16 v59 = "";
      __int16 v60 = 2114;
      id v61 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#slv: CoreRoutine error while getting stored visits.\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232B610);
      }
    }
    double v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v57 = 0;
      __int16 v58 = 2082;
      __int16 v59 = "";
      __int16 v60 = 2114;
      id v61 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slv: CoreRoutine error while getting stored visits.", "{\"msg%{public}.0s\":\"#slv: CoreRoutine error while getting stored visits.\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    id v13 = [a2 firstObject];
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    uint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      int v57 = 0;
      __int16 v58 = 2082;
      __int16 v59 = "";
      __int16 v60 = 2113;
      id v61 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#slv: last RTVisit returned.\", \"RTVisit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    if (v13)
    {
      if ([v13 type] == (id)1) {
        id v13 = [objc_alloc((Class)CLVisit) initWithVisit:v13];
      }
      else {
        id v13 = 0;
      }
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232B610);
    }
    uint64_t v15 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      int v57 = 0;
      __int16 v58 = 2082;
      __int16 v59 = "";
      __int16 v60 = 2113;
      id v61 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv: last visit returned.\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    if (([*(id *)(v6 + 136) isAuthorizedForServiceType:12] & 1) != 0 || !v13)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232B610);
      }
      uint64_t v32 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#slv: using full precision or lastVisit is nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_10232B610);
        }
        __int16 v55 = 0;
        uint64_t v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisitMonitoringSubscription::handleMessageSignificantLocationVisitState(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      sub_1014FB724(v6, (char *)v13);
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232B610);
      }
      char v16 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#slv: using corrective compensation", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_10232B610);
        }
        __int16 v55 = 0;
        int v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisitMonitoringSubscription::handleMessageSignificantLocationVisitState(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      [v13 coordinate];
      uint64_t v18 = v17;
      [v13 coordinate];
      uint64_t v20 = v19;
      [v13 horizontalAccuracy];
      uint64_t v22 = v21;
      id v23 = *(void **)(v6 + 280);
      id v24 = objc_alloc((Class)CLLocation);
      int v36 = 0xFFFF;
      uint64_t v37 = v18;
      uint64_t v38 = v20;
      uint64_t v39 = v22;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v40 = xmmword_101D1C570;
      long long v41 = _Q0;
      long long v42 = _Q0;
      unint64_t v43 = 0xBFF0000000000000;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      unint64_t v45 = 0xBFF0000000000000;
      int v44 = 0;
      int v48 = 0;
      unint64_t v49 = 0xBFF0000000000000;
      int v50 = 0x7FFFFFFF;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v51 = 0;
      char v54 = 0;
      id v30 = [v24 initWithClientLocation:&v36];
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_1014FC69C;
      v35[3] = &unk_10232B520;
      uint64_t v31 = *(void *)(a1 + 32);
      v35[4] = v13;
      v35[5] = v31;
      v35[6] = v6;
      [v23 snapLocation:v30 withReply:v35];
    }
  }
}

id sub_1014FC69C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (char *)sub_1014FBD54(a1, a2, *(void **)(a1 + 32));

  return sub_1014FB724(v2, v3);
}

void sub_1014FC6DC(uint64_t a1)
{
  *(void *)(a1 + 264) = 0;
}

uint64_t sub_1014FC70C(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (!*(unsigned char *)(result + 276))
  {
LABEL_4:
    if (a2 == 1)
    {
      [*(id *)(v3 + 264) startLeechingVisitsForClient:*(void *)(v3 + 256)];
    }
    else if (!a2)
    {
      [*(id *)(v3 + 264) startMonitoringVisitsForClient:*(void *)(v3 + 256)];
    }
    *(_DWORD *)(v3 + 272) = a2;
    *(unsigned char *)(v3 + 276) = 1;
    [objc_msgSend(*(id *)(v3 + 128), "vendor") proxyForService:@"CLClientManager"];
    id v4 = *(void **)(v3 + 64);
    if (v4) {
      [v4 clientName];
    }
    sub_1001C203C();
  }
  if (*(_DWORD *)(result + 272) != a2)
  {
    sub_100195744(result);
    goto LABEL_4;
  }
  return result;
}

void sub_1014FC854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1014FC868(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:*(id *)(a1 + 64) forKeyedSubscript:@"ClientKeyPath"];
  uint64_t v3 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3) forKeyedSubscript:@"SubscriptionStorageName"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 136)) forKeyedSubscript:@"AuthContext"];
  if (*(unsigned char *)(a1 + 276)) {
    [v2 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 272))] forKeyedSubscript:@"RunningType"];
  }
  return v2;
}

void sub_1014FC93C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1014FC96C(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1014FC99C(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = off_10232B640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  return result;
}

__n128 sub_1014FC9E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10232B640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  return result;
}

void sub_1014FCA18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1014FCA20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1014FCA60()
{
}

void sub_1014FCA6C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  double v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  id v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    double v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_1014FCB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1014FCB30(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1014FCBAC(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1014FCB98(_Unwind_Exception *a1)
{
  sub_100BECAEC(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1014FCBAC(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  id v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    id v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1014FCE30(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1014FCF20((uint64_t)v25, 0);
  return i;
}

void sub_1014FCE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1014FCF20((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1014FCE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x310], 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1014FCEA8(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1014FCE90(_Unwind_Exception *a1)
{
  sub_1014FCF20(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1014FCEA8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BEC4A4((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1014FCF04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014FCF20(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BECB6C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

id sub_1014FCF78(uint64_t a1, double a2)
{
  long long v4 = +[NSString stringWithUTF8String:"kCLConnectionMessageSignificantLocationVisit"];
  id v5 = [objc_msgSend(*(id *)(a1 + 128), "silo") newTimer];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_1014FD0C0;
  void v7[3] = &unk_1022A3020;
  void v7[4] = a1;
  [v5 setHandler:v7];
  [v5 setNextFireDelay:a2];
  [objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4) invalidate];
  return [*(id *)(a1 + 240) setObject:v5 forKeyedSubscript:v4];
}

void *sub_1014FD05C@<X0>(void *a1@<X8>)
{
  id v2 = operator new(0x70uLL);
  __n128 result = sub_10017E960(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1014FD0AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1014FD0C0(uint64_t a1)
{
}

void sub_1014FD0C8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_100134750(__p, "kCLConnectionMessageSignificantLocationVisit");
  sub_1010AC4C0(v1, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1014FD11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1014FD138(uint64_t a1, double a2)
{
  long long v4 = +[NSString stringWithUTF8String:"kCLConnectionMessageSignificantLocationVisitState"];
  id v5 = [objc_msgSend(*(id *)(a1 + 128), "silo") newTimer];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_1014FD21C;
  void v7[3] = &unk_1022A3020;
  void v7[4] = a1;
  [v5 setHandler:v7];
  [v5 setNextFireDelay:a2];
  [objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4) invalidate];
  return [*(id *)(a1 + 240) setObject:v5 forKeyedSubscript:v4];
}

void sub_1014FD21C(uint64_t a1)
{
}

void sub_1014FD224(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_100134750(__p, "kCLConnectionMessageSignificantLocationVisitState");
  sub_1010AC4C0(v1, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1014FD278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014FDA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(exception_object);
}

id sub_1014FDA7C(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onDataProtectionManagerNotification:*a2 data:*a3];
}

void sub_1014FE0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1014FE3A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10232B708);
  }
  unint64_t v8 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v31) = [a3 statusCode];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "HTTP Response for Server registration, statusCode: %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10232B708);
    }
    int v24 = 67240192;
    LODWORD(v25) = [a3 statusCode];
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (a4 || (uint64_t)[a3 statusCode] < 200 || (uint64_t)objc_msgSend(a3, "statusCode") >= 300)
  {
    id v15 = [objc_alloc((Class)NSString) initWithData:a2 encoding:4];
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10232B708);
    }
    float v16 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      id v17 = [a3 statusCode];
      *(_DWORD *)uint64_t buf = 134349570;
      id v31 = v17;
      __int16 v32 = 2112;
      uint64_t v33 = a4;
      __int16 v34 = 2112;
      id v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to register subject, statusCode: %{public}ld, error: %@, response: %@", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10232B708);
      }
      int v24 = 134349570;
      id v25 = [a3 statusCode];
      __int16 v26 = 2112;
      uint64_t v27 = a4;
      __int16 v28 = 2112;
      id v29 = v15;
      size_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  else
  {
    uint64_t v23 = 0;
    id v9 = +[NSJSONSerialization JSONObjectWithData:a2 options:1 error:&v23];
    unint64_t v10 = v9;
    if (!v9 || v23)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10232B708);
      }
      BOOL v18 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 138412546;
        id v31 = v10;
        __int16 v32 = 2112;
        uint64_t v33 = v23;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Unable to parse response for register subject, responseDictionary: %@, error: %@", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10232B708);
        }
        int v24 = 138412546;
        id v25 = v10;
        __int16 v26 = 2112;
        uint64_t v27 = v23;
        unint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    else
    {
      id v11 = [v9 objectForKey:@"subjectId"];
      id v12 = [v10 objectForKey:@"token"];
      if (v11)
      {
        id v13 = v12;
        if (v12)
        {
          id v14 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          _DWORD v22[2] = sub_1014FEA74;
          v22[3] = &unk_10229FF28;
          v22[4] = *(void *)(a1 + 32);
          void v22[5] = v11;
          v22[6] = v13;
          [v14 async:v22];
        }
      }
    }
  }
}

id sub_1014FEA74(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 32) = [objc_alloc((Class)NSUUID) initWithUUIDString:*(void *)(a1 + 40)];
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  *(void *)(*(void *)(a1 + 32) + 40) = [*(id *)(a1 + 48) copy];

  [*(id *)(a1 + 32) _saveSubjectUUID:*(void *)(*(void *)(a1 + 32) + 32)];
  [*(id *)(a1 + 32) _saveSubjectAuth:*(void *)(*(void *)(a1 + 32) + 40)];
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10232B708);
  }
  char v3 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v5 = *(void *)(v4 + 40);
    *(_DWORD *)uint64_t buf = 138478083;
    uint64_t v10 = v6;
    __int16 v11 = 2113;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Successfully registered device, subject UUID: %{private}@, subject Auth: %{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10232B708);
    }
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFallServer _registerDevice]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return [*(id *)(a1 + 32) _enableDataCollection];
}

void sub_1014FF414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_101500EE4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _registerDevice];
}

void sub_1015017E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_101501ADC(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_101501B0C(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_101501C30(a1, "VO2MaxSessionAttributesHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10232B738;
  *(void *)(a1 + 72) = off_10232B7F0;
  sub_100F03BA0((void *)(a1 + 384), 0, 0);
  sub_100F03BA0((void *)(a1 + 400), 0, 0);
  *(unsigned char *)(a1 + 416) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_101501C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101501C30(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = off_1022ADB08;
  *(void *)a1 = off_10232BAE0;
  *(void *)(a1 + 72) = off_10232BB88;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_10232BAE0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_10232BB88;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 12000;
  *(void *)(a1 + 312) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 320));
  *(void *)(a1 + 320) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_101502044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1010A3D88(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1015020D8()
{
}

void *sub_1015020E0(void *a1)
{
  *a1 = off_10232BAE0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_10232BB88;
  a1[39] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 40);
  sub_1010A3D88(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1015021A4(uint64_t a1)
{
  return sub_1015020E0((void *)(a1 - 72));
}

void sub_1015021AC(void *a1)
{
  sub_1015020E0(a1);

  operator delete();
}

void sub_1015021E4(uint64_t a1)
{
  sub_1015020E0((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_101502220(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    if (!*(unsigned char *)(a1 + 416)) {
      (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxSessionAttributesHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_10150239C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015023B4(uint64_t a1, uint64_t a2)
{
  return sub_101502220(a1 - 72, a2);
}

uint64_t sub_1015023BC(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxSessionAttributesHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1015025F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101502638(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_double(v7, 1);
  unint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  id v9 = sqlite3_column_text(v8, 2);
  uuid_parse((const char *)v9, (unsigned __int8 *)(a2 + 16));
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v10, 3);
  __int16 v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 4);
  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = sqlite3_column_int(v12, 5);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 52) = sqlite3_column_int(v13, 6) != 0;
  id v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v14, 7);
  id v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t v16 = sqlite3_column_blob(v15, 8);
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 64) = [objc_alloc((Class)NSData) initWithBytes:v16 length:sqlite3_column_bytes(v17, 8)];
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  unint64_t v19 = sqlite3_column_blob(v18, 9);
  unint64_t v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  id v21 = [objc_alloc((Class)NSData) initWithBytes:v19 length:sqlite3_column_bytes(v20, 9)];
  uint64_t result = 0;
  *(void *)(a2 + 72) = v21;
  return result;
}

uint64_t sub_1015027DC(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM VO2MaxSessionAttributesHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_101502898(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015028D4(uint64_t a1)
{
  return sub_1015027DC(a1 - 72);
}

uint64_t sub_1015028DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_101502904(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 400), &v19);
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a2 + 16), out);
    uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v19);
    if (sub_100055D58(v7, 1, *(double *)(a2 + 8)))
    {
      unint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v19);
      if (sub_100133F10(v8, 2, out))
      {
        id v9 = (sqlite3_stmt *)sub_10014D19C(v19);
        if (sub_100055D58(v9, 3, *(double *)(a2 + 32)))
        {
          uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v19);
          if (sub_100055D58(v10, 4, *(double *)(a2 + 40)))
          {
            __int16 v11 = (sqlite3_stmt *)sub_10014D19C(v19);
            if (sub_100055B20(v11, 5, *(_DWORD *)(a2 + 48)))
            {
              uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v19);
              if (sub_10014D1A4(v12, 6, *(unsigned __int8 *)(a2 + 52)))
              {
                uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v19);
                if (sub_10014D1A4(v13, 7, *(_DWORD *)(a2 + 56)))
                {
                  id v14 = (sqlite3_stmt *)sub_10014D19C(v19);
                  if (sub_100604C54(v14, 8, *(void **)(a2 + 64)))
                  {
                    id v15 = (sqlite3_stmt *)sub_10014D19C(v19);
                    if (sub_100604C54(v15, 9, *(void **)(a2 + 72)))
                    {
                      uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v19);
                      if (sub_10014DBB4(v16, 10, a3))
                      {
                        uint64_t v17 = *(void *)(a1 + 80);
                        __int16 v18 = (sqlite3_stmt *)sub_10014D19C(v19);
                        sub_10001FEB0(v17, v18);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101502AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101502AF4(uint64_t a1, const unsigned __int8 *a2, char **a3)
{
  if (sub_100082064(a1 + 72))
  {
    a3[1] = *a3;
    uuid_unparse(a2, out);
    sub_100082068((void *)(a1 + 384), &v32);
    long long v38 = 0uLL;
    char v6 = (sqlite3_stmt *)sub_10014D19C(v32);
    if (sub_100133F10(v6, 1, out))
    {
      while (!sub_101502638(&v32, (uint64_t)buf))
      {
        uint64_t v7 = a3[1];
        unint64_t v8 = (unint64_t)a3[2];
        if ((unint64_t)v7 >= v8)
        {
          unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a3) >> 4);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0x333333333333333) {
            sub_1001D7FD4();
          }
          unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)*a3) >> 4);
          if (2 * v15 > v14) {
            unint64_t v14 = 2 * v15;
          }
          if (v15 >= 0x199999999999999) {
            unint64_t v16 = 0x333333333333333;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16) {
            uint64_t v17 = (char *)sub_100214C7C((uint64_t)(a3 + 2), v16);
          }
          else {
            uint64_t v17 = 0;
          }
          __int16 v18 = &v17[80 * v13];
          *(_OWORD *)__int16 v18 = *(_OWORD *)buf;
          long long v19 = v35;
          long long v20 = v36;
          long long v21 = v38;
          *((_OWORD *)v18 + 3) = v37;
          *((_OWORD *)v18 + 4) = v21;
          *((_OWORD *)v18 + 1) = v19;
          *((_OWORD *)v18 + 2) = v20;
          uint64_t v23 = *a3;
          uint64_t v22 = a3[1];
          int v24 = v18;
          if (v22 != *a3)
          {
            do
            {
              *((_OWORD *)v24 - 5) = *((_OWORD *)v22 - 5);
              long long v25 = *((_OWORD *)v22 - 4);
              long long v26 = *((_OWORD *)v22 - 3);
              long long v27 = *((_OWORD *)v22 - 1);
              *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v24 - 1) = v27;
              *((_OWORD *)v24 - 4) = v25;
              *((_OWORD *)v24 - 3) = v26;
              v24 -= 80;
              v22 -= 80;
            }
            while (v22 != v23);
            uint64_t v22 = *a3;
          }
          uint64_t v12 = v18 + 80;
          *a3 = v24;
          a3[1] = v18 + 80;
          a3[2] = &v17[80 * v16];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_OWORD *)uint64_t v7 = *(_OWORD *)buf;
          long long v9 = v35;
          long long v10 = v36;
          long long v11 = v38;
          *((_OWORD *)v7 + 3) = v37;
          *((_OWORD *)v7 + 4) = v11;
          *((_OWORD *)v7 + 1) = v9;
          *((_OWORD *)v7 + 2) = v10;
          uint64_t v12 = v7 + 80;
        }
        a3[1] = v12;
      }
    }
    uint64_t v30 = v32;
    uint64_t v32 = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    return 100;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10232B880);
    }
    uint64_t v28 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10232B880);
      }
      *(_WORD *)out = 0;
      id v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxSessionAttributesRecorderDb::queryBySessionId(const unsigned char *, std::vector<VO2MaxSessionAttributes> &) const", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    return 109;
  }
}

void sub_101502E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_101502E9C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT MIN(startTime) FROM VO2MaxSessionAttributesHistory WHERE algorithmVersion >= ?");
  }
  return 0;
}

void sub_101502F84(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101502F9C(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT sah.* from VO2MaxSessionAttributesHistory sah WHERE sah.startTime > ? AND EXISTS (SELECT sh.id FROM VO2MaxSummaryHistory sh WHERE sh.sessionId = sah.sessionId)");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10232B880);
  }
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10232B880);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxSessionAttributesRecorderDb::getSessionsWithClusters(std::vector<VO2MaxSessionAttributes> &, const CFAbsoluteTime) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_10150330C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_101503350(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxSessionAttributesHistory WHERE startTime >= ? and startTime <= ? ORDER BY startTime ASC");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10232B880);
  }
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10232B880);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxSessionAttributesRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<VO2MaxSessionAttributes> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_1015036DC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_101503720(uint64_t a1, const unsigned __int8 *a2)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_10002B640(*(void *)(a1 + 80));
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxSummaryHistory WHERE sessionId = ?");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10232B8A0);
  }
  uint64_t v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Unable to save fetched output data from CloudKit. Device is locked and we are unable to open the database", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10232B8A0);
    }
    *(_WORD *)out = 0;
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char *, const VO2MaxSessionAttributes, const std::vector<VO2MaxSummary> &, const VO2MaxOutput &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 0;
}

void sub_1015048F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    if (!v15)
    {
LABEL_3:
      if (!v14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  if (!v14)
  {
LABEL_5:
    if (a12)
    {
      (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
      if (!v13)
      {
LABEL_7:
        if (!v12) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }
    else if (!v13)
    {
      goto LABEL_7;
    }
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    if (!v12) {
LABEL_9:
    }
      _Unwind_Resume(exception_object);
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    goto LABEL_9;
  }
LABEL_4:
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  goto LABEL_5;
}

void *sub_101504A84@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxSessionAttributesHistory");
}

void *sub_101504A94@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxSessionAttributesHistory");
}

uint64_t sub_101504AA4(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_101504B2C(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "VO2MaxSessionAttributesHistory", (const char **)&off_10232B8C0, (const std::string::value_type **)&off_102479320, 0);
    *(void *)(a1 + 384) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxSessionAttributesHistory WHERE sessionId = ?");
    *(void *)(a1 + 392) = v3;
    uint64_t result = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"UPDATE VO2MaxSessionAttributesHistory SET startTime = ?, sessionId = ?, meanMaxMets = ?, prior = ?, hardwareType = ?, betaBlockerUse = ?, algorithmVersion = ?, outputCloudKitSystemFields = ?, inputCloudKitSystemFields = ? WHERE id = ?");
    *(void *)(a1 + 400) = result;
    *(void *)(a1 + 40_Block_object_dispose(&STACK[0x310], 8) = v4;
    *(unsigned char *)(a1 + 416) = 1;
  }
  return result;
}

uint64_t sub_101504B2C(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxSessionAttributesHistory");
  if (result)
  {
    uint64_t v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxSessionAttributesHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_101505080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_101505128(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxSessionAttributesHistory");
  }
  return result;
}

void sub_1015051D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015051F0(uint64_t a1)
{
  return sub_101505128(a1 - 72);
}

uint64_t sub_1015051F8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM VO2MaxSessionAttributesHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1015052F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10150530C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE VO2MaxSessionAttributesHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_1015053C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015053D8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxSessionAttributesHistory (startTime, sessionId, meanMaxMets, prior, hardwareType, betaBlockerUse, algorithmVersion, outputCloudKitSystemFields, inputCloudKitSystemFields) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_101505590(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015055B0()
{
  return 0;
}

uint64_t sub_1015055B8(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxSessionAttributesHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_101505654(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10150566C(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232BBC8);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232BBC8);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      long long v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    long long v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      long long v11 = v21;
    }
    else {
      long long v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_101506898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_101506BF8(uint64_t a1)
{
  sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name = 'VO2MaxSessionAttributesHistorySessionIdIndex'");
}

void sub_1015070A0(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101507124(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE VO2MaxSessionAttributesHistory AS sa SET outputCloudKitSystemFields = NULL WHERE sa.sessionId IN (SELECT DISTINCT sh.sessionId FROM VO2MaxStagingSummaryHistory AS sh)");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10232B8A0);
  }
  uint64_t v2 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "VO2MaxSessionAttributesHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10232B8A0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVO2MaxSessionAttributesRecorderDb::updateSessionsNeedingCloudKitSyncForOutputs() const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0;
}

void sub_101507328(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101507348(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB9790(v2);
    __break(1u);
  }
  long long v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      int v4 = v13;
    }
    else {
      int v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    long long v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = v13;
    }
    else {
      size_t v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1015077DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 - 169) < 0) {
    operator delete(*(void **)(v4 - 192));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101507864(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_101509838(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10232BBC8);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232BBC8);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232BBC8);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_101507FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_101508018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 16);
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

id *sub_101508034(uint64_t a1, uint64_t a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v39);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232BBC8);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232BBC8);
        }
        LOWORD(v31) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v40;
    double v9 = v7 - v40;
    if (v7 - v40 < 0.0) {
      double v9 = -(v7 - v40);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232BBC8);
      }
      long long v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)uint64_t buf = 134349312;
        double v36 = v40;
        __int16 v37 = 2050;
        uint64_t v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232BBC8);
        }
        uint64_t v24 = *(void *)(a2 + 8);
        int v31 = 134349312;
        double v32 = v40;
        __int16 v33 = 2050;
        uint64_t v34 = v24;
        long long v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v40;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232BBC8);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)uint64_t buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_10232BBC8);
          }
          double v26 = *(double *)(a2 + 8);
          int v31 = 134217984;
          double v32 = v26;
          long long v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v29 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_10232BBC8);
        double v17 = v29;
      }
      double v18 = v16 - v17;
      long long v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10232BBC8);
        }
        int v31 = 134217984;
        double v32 = v18;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSessionAttributes, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSessionAttributes, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v39, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  long long v20 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x310], 8) = v22;
  *(_OWORD *)(a1 + 240) = v20;
  *(_OWORD *)(a1 + 256) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_101508848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101508874(uint64_t a1)
{
  return sub_101507864(a1 - 72);
}

void sub_10150887C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1015088AC(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_1015088DC(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AB9900(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = v15;
    }
    else {
      double v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_101508D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101508DB4(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AB9A70(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_101509128(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB9BE0(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101509454(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AB9D50(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_101509778(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1015097A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_101509838(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1015098B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015098D4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101509904(uint64_t a1, uint64_t *a2, int a3, double *a4)
{
  if ((unint64_t)*a2 < 0x2E)
  {
    switch(a3)
    {
      case 1:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0E098;
        break;
      case 3:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0E378;
        break;
      case 4:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0E4E8;
        break;
      case 6:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0E658;
        break;
      default:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0E208;
        break;
    }
    double v8 = v10[*a2];
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BC08);
    }
    uint64_t v6 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *a2;
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupCn0ProbabilityGivenOutdoor(),index out of bound,%lu", buf, 0xCu);
    }
    double v8 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BC08);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupCn0ProbabilityGivenOutdoor(const std::size_t &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a4 = v8;
  return result;
}

uint64_t sub_101509B74(uint64_t a1, uint64_t *a2, double *a3)
{
  if ((unint64_t)*a2 < 0x2E)
  {
    uint64_t result = 0;
    double v7 = dbl_101E0E7C8[*a2];
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BC08);
    }
    uint64_t v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *a2;
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupCn0ProbabilityGivenIndoor(),index out of bound,%lu", buf, 0xCu);
    }
    double v7 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BC08);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupCn0ProbabilityGivenIndoor(const std::size_t &, double &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_101509D60(uint64_t a1, uint64_t *a2, int a3, double *a4)
{
  if ((unint64_t)*a2 < 0x47)
  {
    switch(a3)
    {
      case 1:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0E938;
        break;
      case 3:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0EDA8;
        break;
      case 4:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0EFE0;
        break;
      case 6:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0F218;
        break;
      default:
        uint64_t result = 0;
        uint64_t v10 = (double *)&unk_101E0EB70;
        break;
    }
    double v8 = v10[*a2];
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BC08);
    }
    uint64_t v6 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *a2;
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupNumSatsProbabilityGivenOutdoor(),index out of bound,%lu", buf, 0xCu);
    }
    double v8 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BC08);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupNumSatsProbabilityGivenOutdoor(const std::size_t &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a4 = v8;
  return result;
}

uint64_t sub_101509FD0(uint64_t a1, uint64_t *a2, double *a3)
{
  if ((unint64_t)*a2 < 0x47)
  {
    uint64_t result = 0;
    double v7 = dbl_101E0F450[*a2];
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BC08);
    }
    uint64_t v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *a2;
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupNumSatsProbabilityGivenIndoor(),index out of bound,%lu", buf, 0xCu);
    }
    double v7 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BC08);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupNumSatsProbabilityGivenIndoor(const std::size_t &, double &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_10150A1BC(uint64_t a1, unsigned int a2, double *a3)
{
  uint64_t v4 = a2;
  if (a2 < 4)
  {
    uint64_t result = 0;
    double v6 = dbl_101E0F688[a2];
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BC08);
    }
    uint64_t v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenOutdoor(),index out of bound,%lu", buf, 0xCu);
    }
    double v6 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BC08);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupGnssAvailabilityStateProbabilityGivenOutdoor(const CLGnssAvailabilityPredictor::PredictionType, double &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_10150A39C(uint64_t a1, unsigned int a2, double *a3)
{
  uint64_t v4 = a2;
  if (a2 < 4)
  {
    uint64_t result = 0;
    double v6 = dbl_101E0F6A0[a2];
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BC08);
    }
    uint64_t v5 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupGnssAvailabilityStateProbabilityGivenIndoor(),index out of bound,%lu", buf, 0xCu);
    }
    double v6 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BC08);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupGnssAvailabilityStateProbabilityGivenIndoor(const CLGnssAvailabilityPredictor::PredictionType, double &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t result = 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_10150A57C(uint64_t a1, double *a2, double *a3, void *a4)
{
  double v5 = *a3;
  if (*a3 <= 0.0 || v5 > 5.0)
  {
    if (v5 <= 5.0 || v5 > 10.0)
    {
      if (v5 <= 10.0 || v5 > 15.0)
      {
        if (v5 <= 15.0 || v5 > 30.0)
        {
          if (v5 <= 30.0 || v5 > 45.0)
          {
            BOOL v11 = v5 > 90.0 || v5 <= 45.0;
            uint64_t v10 = 5;
            if (v11) {
              uint64_t v10 = -1;
            }
          }
          else
          {
            uint64_t v10 = 4;
          }
        }
        else
        {
          uint64_t v10 = 3;
        }
      }
      else
      {
        uint64_t v10 = 2;
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  sub_10150A660(a1, a2, &dbl_101E0F788[4 * v10], &dbl_101E0F788[4 * v10 + 1], &dbl_101E0F788[4 * v10 + 2], &dbl_101E0F788[4 * v10 + 3]);
  *a4 = v12;
  return 0;
}

void sub_10150A660(uint64_t a1, double *a2, double *a3, double *a4, void *a5, double *a6)
{
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v6 = *a4;
    if ((*(void *)a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)a6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *a6 > 0.0
      && v6 != 0.0)
    {
      exp(-(*a2 - *a3) / v6);
    }
  }
}

uint64_t sub_10150A73C(uint64_t a1, double *a2, void *a3)
{
  sub_10150A660(a1, a2, &dbl_101E0F848, &dbl_101E0F850, &qword_101E0F858, &dbl_101E0F860);
  *a3 = v4;
  return 0;
}

void sub_10150A788(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_10150A7B8()
{
  uint64_t result = sub_1000EB1B0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_10150A838()
{
}

void sub_10150A85C(int a1, uint64_t a2)
{
}

uint64_t sub_10150A86C()
{
  if (qword_102488580 != -1) {
    dispatch_once(&qword_102488580, &stru_10232BC28);
  }
  return qword_10248D788;
}

void sub_10150A8B4(uint64_t a1)
{
}

void sub_10150A974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  sub_1012F6FF8(v11);
  _Unwind_Resume(a1);
}

void sub_10150A9A0(void *a1)
{
  sub_1012F6FF8(a1);

  operator delete();
}

__n128 sub_10150A9D8@<Q0>(int a1@<W1>, int a2@<W2>, long long *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1024885A0, memory_order_acquire) & 1) == 0)
  {
    double v6 = a3;
    int v28 = a1;
    int v39 = a2;
    int v7 = __cxa_guard_acquire(qword_1024885A0);
    a1 = v28;
    a2 = v39;
    a3 = v6;
    if (v7)
    {
      xmmword_102488590 = xmmword_101E0F880;
      sub_100B9BEAC((float32x4_t *)&xmmword_102488590, (float32x4_t)xmmword_101E0F880);
      __cxa_guard_release(qword_1024885A0);
      a3 = v6;
      a1 = v28;
      a2 = v39;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1024885C0, memory_order_acquire) & 1) == 0)
  {
    double v8 = a3;
    int v29 = a1;
    int v40 = a2;
    int v9 = __cxa_guard_acquire(qword_1024885C0);
    a1 = v29;
    a2 = v40;
    a3 = v8;
    if (v9)
    {
      xmmword_1024885B0 = xmmword_101E0F890;
      sub_100B9BEAC((float32x4_t *)&xmmword_1024885B0, (float32x4_t)xmmword_101E0F890);
      __cxa_guard_release(qword_1024885C0);
      a3 = v8;
      a1 = v29;
      a2 = v40;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1024885E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v10 = a3;
    int v30 = a1;
    int v41 = a2;
    int v11 = __cxa_guard_acquire(qword_1024885E0);
    a1 = v30;
    a2 = v41;
    a3 = v10;
    if (v11)
    {
      xmmword_1024885D0 = xmmword_101E0F8A0;
      sub_100B9BEAC((float32x4_t *)&xmmword_1024885D0, (float32x4_t)xmmword_101E0F8A0);
      __cxa_guard_release(qword_1024885E0);
      a3 = v10;
      a1 = v30;
      a2 = v41;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_102488600, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a3;
    int v31 = a1;
    int v42 = a2;
    int v13 = __cxa_guard_acquire(qword_102488600);
    a1 = v31;
    a2 = v42;
    a3 = v12;
    if (v13)
    {
      xmmword_1024885F0 = xmmword_101E0F8B0;
      sub_100B9BEAC((float32x4_t *)&xmmword_1024885F0, (float32x4_t)xmmword_101E0F8B0);
      __cxa_guard_release(qword_102488600);
      a3 = v12;
      a1 = v31;
      a2 = v42;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_102488620, memory_order_acquire) & 1) == 0)
  {
    unsigned __int8 v14 = a3;
    int v32 = a1;
    int v43 = a2;
    int v15 = __cxa_guard_acquire(qword_102488620);
    a1 = v32;
    a2 = v43;
    a3 = v14;
    if (v15)
    {
      xmmword_102488610 = xmmword_101E0F8C0;
      sub_100B9BEAC((float32x4_t *)&xmmword_102488610, (float32x4_t)xmmword_101E0F8C0);
      __cxa_guard_release(qword_102488620);
      a3 = v14;
      a1 = v32;
      a2 = v43;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_102488640, memory_order_acquire) & 1) == 0)
  {
    uint64_t v16 = a3;
    int v33 = a1;
    int v44 = a2;
    int v17 = __cxa_guard_acquire(qword_102488640);
    a1 = v33;
    a2 = v44;
    a3 = v16;
    if (v17)
    {
      xmmword_102488630 = xmmword_101E0F8D0;
      sub_100B9BEAC((float32x4_t *)&xmmword_102488630, (float32x4_t)xmmword_101E0F8D0);
      __cxa_guard_release(qword_102488640);
      a3 = v16;
      a1 = v33;
      a2 = v44;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_102488660, memory_order_acquire) & 1) == 0)
  {
    double v18 = a3;
    int v34 = a1;
    int v45 = a2;
    int v19 = __cxa_guard_acquire(qword_102488660);
    a1 = v34;
    a2 = v45;
    a3 = v18;
    if (v19)
    {
      xmmword_102488650 = xmmword_101E0F8E0;
      sub_100B9BEAC((float32x4_t *)&xmmword_102488650, (float32x4_t)xmmword_101E0F8E0);
      __cxa_guard_release(qword_102488660);
      a3 = v18;
      a1 = v34;
      a2 = v45;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_102488680, memory_order_acquire) & 1) == 0)
  {
    long long v20 = a3;
    int v35 = a1;
    int v46 = a2;
    int v21 = __cxa_guard_acquire(qword_102488680);
    a1 = v35;
    a2 = v46;
    a3 = v20;
    if (v21)
    {
      xmmword_102488670 = xmmword_101E0F8F0;
      sub_100B9BEAC((float32x4_t *)&xmmword_102488670, (float32x4_t)xmmword_101E0F8F0);
      __cxa_guard_release(qword_102488680);
      a3 = v20;
      a1 = v35;
      a2 = v46;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1024886A0, memory_order_acquire) & 1) == 0)
  {
    long long v22 = a3;
    int v36 = a1;
    int v47 = a2;
    int v23 = __cxa_guard_acquire(qword_1024886A0);
    a1 = v36;
    a2 = v47;
    a3 = v22;
    if (v23)
    {
      xmmword_102488690 = xmmword_101E0F890;
      sub_100B9BEAC((float32x4_t *)&xmmword_102488690, (float32x4_t)xmmword_101E0F890);
      __cxa_guard_release(qword_1024886A0);
      a3 = v22;
      a1 = v36;
      a2 = v47;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1024886C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = a3;
    int v37 = a1;
    int v48 = a2;
    int v25 = __cxa_guard_acquire(qword_1024886C0);
    a1 = v37;
    a2 = v48;
    a3 = v24;
    if (v25)
    {
      xmmword_1024886B0 = xmmword_101E0F8A0;
      sub_100B9BEAC((float32x4_t *)&xmmword_1024886B0, (float32x4_t)xmmword_101E0F8A0);
      __cxa_guard_release(qword_1024886C0);
      a3 = v24;
      a1 = v37;
      a2 = v48;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024886E0, memory_order_acquire) & 1) == 0)
  {
    double v26 = a3;
    int v38 = a1;
    int v49 = a2;
    int v27 = __cxa_guard_acquire(&qword_1024886E0);
    a1 = v38;
    a2 = v49;
    a3 = v26;
    if (v27)
    {
      xmmword_1024886D0 = xmmword_101E0F900;
      sub_100B9BEAC((float32x4_t *)&xmmword_1024886D0, (float32x4_t)xmmword_101E0F900);
      __cxa_guard_release(&qword_1024886E0);
      a3 = v26;
      a1 = v38;
      a2 = v49;
    }
  }
  switch(a1)
  {
    case 1:
      uint64_t v3 = &xmmword_1024885D0;
      uint64_t v4 = &xmmword_1024885B0;
      goto LABEL_17;
    case 2:
      uint64_t v3 = &xmmword_1024885F0;
      break;
    case 3:
      uint64_t v3 = &xmmword_102488630;
      uint64_t v4 = &xmmword_102488610;
      goto LABEL_17;
    case 4:
      uint64_t v3 = &xmmword_102488670;
      uint64_t v4 = &xmmword_102488650;
      goto LABEL_17;
    case 5:
      uint64_t v3 = &xmmword_1024886B0;
      uint64_t v4 = &xmmword_102488690;
LABEL_17:
      if (a2 == 2) {
        uint64_t v3 = v4;
      }
      break;
    case 6:
      uint64_t v3 = &xmmword_1024886D0;
      break;
    default:
      uint64_t v3 = &xmmword_102488590;
      break;
  }
  __n128 result = (__n128)*v3;
  *a3 = *v3;
  return result;
}

void sub_10150AEC8(_Unwind_Exception *a1)
{
}

double sub_10150AF98(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    uint64_t v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v23) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Unrecognized interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return v5;
  }
  sub_1012F71A4(a1);
  double v9 = *a3;
  *(double *)(a1 + 256) = *a3;
  if (v9 <= 0.00001)
  {
    if (*(unsigned char *)(a1 + 29)) {
      (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), @"MaxFIFOEvents", &off_102395108);
    }
    sub_1012F76A8(a1);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    int v11 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Low latency mode and time sync reset", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_36;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_55;
    }
    goto LABEL_61;
  }
  *(unsigned char *)(a1 + 30) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  if (*(unsigned char *)(a1 + 28))
  {
    if (*(unsigned char *)(a1 + 29))
    {
      (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), @"MaxFIFOEvents", &off_1023950F0);
      if (*(double *)(a1 + 256) <= 0.0200100001)
      {
        sub_1012F7668(a1, 1);
        int v10 = 2;
        goto LABEL_28;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 29))
  {
    (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), @"MaxFIFOEvents", &off_102395108);
  }
  sub_1012F7668(a1, 0);
  int v10 = 1;
LABEL_28:
  *(_DWORD *)(a1 + 24_Block_object_dispose(&STACK[0x310], 8) = v10;
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_10232BCB0);
  }
  uint64_t v12 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 248);
    if (*(unsigned char *)(a1 + 28)) {
      unsigned __int8 v14 = "YES";
    }
    else {
      unsigned __int8 v14 = "NO";
    }
    *(_DWORD *)uint64_t buf = 136446466;
    int v23 = v14;
    __int16 v24 = 1026;
    int v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Low latency mode: %{public}s. TimeSync type: %{public}d", buf, 0x12u);
  }
  if (!sub_10013D1A0(115, 2)) {
    goto LABEL_36;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024190E0 != -1) {
LABEL_61:
  }
    dispatch_once(&qword_1024190E0, &stru_10232BCB0);
LABEL_55:
  long long v20 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v20);
  if (v20 != (char *)buf) {
    free(v20);
  }
LABEL_36:
  if (*(unsigned char *)(a1 + 29))
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    int v15 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(const char **)(a1 + 256);
      *(_DWORD *)uint64_t buf = 134349056;
      int v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    sub_100A29D64(*(void *)(a1 + 32), *(double *)(a1 + 256));
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    int v17 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Skip setting interval for monitor type client", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  return *(double *)(a1 + 256);
}

BOOL sub_10150B790(BOOL result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    sub_1012F71A4(result);
    __n128 result = sub_1012F7104(v3);
    *(_DWORD *)(v3 + 264) = result;
  }
  return result;
}

uint64_t sub_10150B7C8(uint64_t a1)
{
  BOOL v2 = sub_1012F7104(a1);
  int v3 = *(_DWORD *)(a1 + 264);
  uint64_t result = sub_1012F7104(a1);
  if (v3 != result)
  {
    double v5 = (int *)(a1 + 264);
    *(_DWORD *)(a1 + 264) = v2;
    if (v2 <= 1)
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      double v6 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v7 = sub_1012F70B4(*v5);
        *(_DWORD *)uint64_t buf = 138543362;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] sending accessory status to clients: %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_10232BCB0);
        }
        sub_1012F70B4(*v5);
        double v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::sendAccessoryStatus()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      *(void *)uint64_t buf = sub_1000D3E50();
      return sub_1000E7BA0(a1, 2, a1 + 264, 4);
    }
  }
  return result;
}

void sub_10150B9D4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    int v3 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67174657;
      LODWORD(v10) = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received unsupported event %{private}d from AudioAccessoryInterface", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 26_Block_object_dispose(&STACK[0x310], 8) = sub_1012F7134();
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    double v6 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = sub_1012F7090(*(_DWORD *)(a1 + 268));
      *(_DWORD *)uint64_t buf = 138543362;
      CFStringRef v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Received InEar status update from AudioAccessoryInterface - %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      sub_1012F7090(*(_DWORD *)(a1 + 268));
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
    if (!*(_DWORD *)(a1 + 48)) {
      *(unsigned char *)(a1 + 30) = 0;
    }
  }
}

void sub_10150BD20(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102488748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102488748))
  {
    sub_10150C8EC((uint64_t)&dword_1024886E8);
    __cxa_atexit((void (*)(void *))sub_101A1A8D4, &dword_1024886E8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102488748);
  }
  if (*(unsigned char *)(a1 + 30)) {
    goto LABEL_3;
  }
  *(unsigned char *)(a1 + 30) = 1;
  *(_DWORD *)std::string __p = 0;
  sub_100134750(&__p[8], "N/A");
  sub_100134750(&v23[8], "N/A");
  *(void *)int v25 = 0;
  *(void *)&v25[8] = 0;
  *(_DWORD *)&v25[16] = 1065353216;
  char v26 = 0;
  *(void *)&long long v27 = 0;
  *((void *)&v27 + 1) = 0x3F80000000000000;
  dword_1024886E8 = 0;
  if (byte_102488707 < 0) {
    operator delete((void *)xmmword_1024886F0);
  }
  char v4 = 0;
  xmmword_1024886F0 = *(_OWORD *)&__p[8];
  unk_102488700 = *(void *)v23;
  v23[7] = 0;
  __p[8] = 0;
  if (byte_10248871F < 0)
  {
    operator delete((void *)xmmword_102488708);
    char v4 = v23[7];
  }
  xmmword_102488708 = *(_OWORD *)&v23[8];
  unk_102488718 = v24;
  HIBYTE(v24) = 0;
  v23[8] = 0;
  dword_102488720 = *(_DWORD *)v25;
  xmmword_102488724 = *(_OWORD *)&v25[4];
  byte_102488734 = v26;
  xmmword_102488738 = v27;
  if (v4 < 0) {
    operator delete(*(void **)&__p[8]);
  }
  if (!sub_1012F72FC(a1, &dword_1024886E8))
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    double v8 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Service not found!", __p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v9);
      if (v9 != __p) {
        free(v9);
      }
    }
    return;
  }
  double v5 = (__IOHIDServiceClient *)sub_100A291D0(*(void *)(a1 + 32));
  if (sub_10149FE70(&v21, v5, @"H2HTransformation", (id)8))
  {
    byte_102488734 = 1;
    *(float32x4_t *)std::string __p = vmulq_f32(vcvtq_f32_s32(vmovl_s16(v21)), (float32x4_t)vdupq_n_s32(0x38000100u));
    sub_100B9BEAC((float32x4_t *)__p, *(float32x4_t *)__p);
    xmmword_102488738 = *(_OWORD *)__p;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    double v6 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 134349824;
      *(double *)&__p[4] = *(float *)&xmmword_102488738;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(double *)&__p[14] = *((float *)&xmmword_102488738 + 1);
      *(_WORD *)&__p[22] = 2050;
      *(double *)int v23 = *((float *)&xmmword_102488738 + 2);
      *(_WORD *)&v23[8] = 2050;
      *(double *)&v23[10] = *((float *)&xmmword_102488738 + 3);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Received headset to head transformation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", __p, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190E0 == -1)
      {
LABEL_69:
        long long v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v20);
        if (v20 != __p) {
          free(v20);
        }
        goto LABEL_33;
      }
LABEL_75:
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      goto LABEL_69;
    }
  }
  else
  {
    byte_102488734 = 0;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    CFStringRef v10 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Warning! Headset to Head transformation is not available from the accessory.", __p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190E0 == -1) {
        goto LABEL_69;
      }
      goto LABEL_75;
    }
  }
LABEL_33:
  if (byte_102488734)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102488770, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_102488770))
    {
      xmmword_102488760 = xmmword_101E0F910;
      sub_100B9BEAC((float32x4_t *)&xmmword_102488760, (float32x4_t)xmmword_101E0F910);
      __cxa_guard_release(&qword_102488770);
    }
    sub_100B9BB80((uint64_t)&xmmword_102488738, (float *)&xmmword_102488760, (float32x4_t *)__p, v7);
    xmmword_102488724 = *(_OWORD *)__p;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    int v11 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 134349824;
      *(double *)&__p[4] = *(float *)&xmmword_102488724;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(double *)&__p[14] = *((float *)&xmmword_102488724 + 1);
      *(_WORD *)&__p[22] = 2050;
      *(double *)int v23 = *((float *)&xmmword_102488724 + 2);
      *(_WORD *)&v23[8] = 2050;
      *(double *)&v23[10] = *((float *)&xmmword_102488724 + 3);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Derived device frame orientation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", __p, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v12);
      if (v12 != __p) {
        free(v12);
      }
    }
  }
  else
  {
    sub_10150A9D8(dword_102488720, dword_1024886E8, (long long *)__p);
    xmmword_102488724 = *(_OWORD *)__p;
  }
  if (dword_102488720 > 8)
  {
    int v13 = 0;
  }
  else
  {
    int v13 = 1;
    if (((1 << dword_102488720) & 0x1BB) != 0)
    {
      if (dword_1024886E8 == 2) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
    }
  }
  dword_102488750 = v13;
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_10232BCB0);
  }
  unsigned __int8 v14 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v15 = sub_1012F7068(dword_102488720);
    CFStringRef v16 = sub_1012F70E0(dword_102488750);
    if (byte_102488707 >= 0) {
      int v17 = &xmmword_1024886F0;
    }
    else {
      int v17 = (long long *)xmmword_1024886F0;
    }
    if (byte_10248871F >= 0) {
      double v18 = &xmmword_102488708;
    }
    else {
      double v18 = (long long *)xmmword_102488708;
    }
    *(_DWORD *)std::string __p = 138479107;
    *(void *)&__p[4] = v15;
    *(_WORD *)&unsigned char __p[12] = 2114;
    *(void *)&__p[14] = v16;
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)int v23 = dword_1024886E8;
    *(_WORD *)&v23[4] = 2081;
    *(void *)&v23[6] = v17;
    *(_WORD *)&v23[14] = 2081;
    *(void *)&v23[16] = v18;
    LOWORD(v24) = 1026;
    *(_DWORD *)((char *)&v24 + 2) = dword_102488720;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] config,%{private}@,location,%{public}@,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s,hardwareModel,%{public}d", __p, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    sub_1012F7068(dword_102488720);
    sub_1012F70E0(dword_102488750);
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "%s\n", v19);
    if (v19 != __p) {
      free(v19);
    }
  }
  sub_1000E7BA0(a1, 1, (uint64_t)&dword_1024886E8, 96);
  if (*(unsigned char *)(a1 + 30))
  {
LABEL_3:
    *(_DWORD *)(a2 + 104) = dword_102488750;
    sub_1000E7BA0(a1, 0, a2, 144);
  }
}

void sub_10150C8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t sub_10150C8EC(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  BOOL v2 = (void *)(a1 + 32);
  sub_100134750((void *)(a1 + 8), "N/A");
  sub_100134750(v2, "N/A");
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x310], 8) = 0x3F80000000000000;
  return a1;
}

void sub_10150C958(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10150C974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DataValue = (unsigned __int8 *)IOHIDEventGetDataValue();
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  if (DataValue) {
    BOOL v8 = IntegerValue == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return;
  }
  uint64_t v9 = IntegerValue;
  *(void *)&long long v86 = 0;
  *((void *)&v86 + 1) = 0x3F80000000000000;
  unsigned __int16 v90 = 0;
  long long v91 = 0uLL;
  unint64_t TimeStamp = IOHIDEventGetTimeStamp();
  double v92 = sub_1000D3D90(TimeStamp);
  long long v95 = 0u;
  memset(v96, 0, sizeof(v96));
  int v97 = 0;
  char v85 = 0;
  CFArrayRef v11 = sub_10149F340(a4, &v85);
  *(void *)((char *)v96 + 4) = v11;
  v12.i32[1] = HIDWORD(v92);
  *((double *)&v91 + 1) = v92;
  if (v85 && v11)
  {
    id v13 = sub_1012F76E0(a1, (uint64_t)v11);
    if (!v13) {
      goto LABEL_46;
    }
    id v14 = v13;
    double v15 = sub_1000D3D90((unint64_t)v13);
    double v16 = v92 - v15;
    if (v92 - v15 <= -3600.0 || v16 >= 3600.0)
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      int v23 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)((char *)v96 + 4);
        uint64_t v25 = IOHIDEventGetTimeStamp();
        *(_DWORD *)uint64_t buf = 134349824;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v25;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&buf[24] = v14;
        *(_WORD *)&buf[32] = 2050;
        *(void *)__int16 v129 = (uint64_t)(*(double *)((char *)v96 + 12) * 1000000000.0);
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Abnormal TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_10232BCB0);
        }
        uint64_t v26 = *(void *)((char *)v96 + 4);
        uint64_t v27 = IOHIDEventGetTimeStamp();
        int v98 = 134349824;
        *(void *)uint64_t v99 = v26;
        *(_WORD *)&v99[8] = 2050;
        *(void *)&unsigned char v99[10] = v27;
        *(_WORD *)&v99[18] = 2050;
        *(void *)&v99[20] = v14;
        *(_WORD *)&v99[28] = 2050;
        *(void *)__int16 v100 = (uint64_t)(*(double *)((char *)v96 + 12) * 1000000000.0);
        goto LABEL_28;
      }
    }
    else
    {
      *(double *)((char *)v96 + 12) = v92 - v15;
      *((double *)&v91 + 1) = v15;
      LODWORD(v96[0]) = *(_DWORD *)(a1 + 248);
      if (v16 <= 0.100000001)
      {
        if (v16 <= 0.0)
        {
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_10232BCB0);
          }
          int v34 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v35 = *(void *)((char *)v96 + 4);
            uint64_t v36 = IOHIDEventGetTimeStamp();
            *(_DWORD *)uint64_t buf = 134349824;
            *(void *)&uint8_t buf[4] = v35;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v36;
            *(_WORD *)&buf[22] = 2050;
            *(void *)&buf[24] = v14;
            *(_WORD *)&buf[32] = 2050;
            *(void *)__int16 v129 = (uint64_t)(*(double *)((char *)v96 + 12) * 1000000000.0);
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Zero or Negative TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 == -1) {
              goto LABEL_17;
            }
            goto LABEL_154;
          }
        }
        else
        {
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_10232BCB0);
          }
          int v29 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v30 = *(void *)((char *)v96 + 4);
            uint64_t v31 = IOHIDEventGetTimeStamp();
            *(_DWORD *)uint64_t buf = 134349824;
            *(void *)&uint8_t buf[4] = v30;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v31;
            *(_WORD *)&buf[22] = 2050;
            *(void *)&buf[24] = v14;
            *(_WORD *)&buf[32] = 2050;
            *(void *)__int16 v129 = (uint64_t)(*(double *)((char *)v96 + 12) * 1000000000.0);
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_10232BCB0);
            }
            uint64_t v32 = *(void *)((char *)v96 + 4);
            uint64_t v33 = IOHIDEventGetTimeStamp();
            int v98 = 134349824;
            *(void *)uint64_t v99 = v32;
            *(_WORD *)&v99[8] = 2050;
            *(void *)&unsigned char v99[10] = v33;
            *(_WORD *)&v99[18] = 2050;
            *(void *)&v99[20] = v14;
            *(_WORD *)&v99[28] = 2050;
            *(void *)__int16 v100 = (uint64_t)(*(double *)((char *)v96 + 12) * 1000000000.0);
            int v28 = (unsigned char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n");
            goto LABEL_29;
          }
        }
      }
      else
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_10232BCB0);
        }
        int v17 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *(void *)((char *)v96 + 4);
          uint64_t v19 = IOHIDEventGetTimeStamp();
          *(_DWORD *)uint64_t buf = 134349824;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = v19;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&buf[24] = v14;
          *(_WORD *)&buf[32] = 2050;
          *(void *)__int16 v129 = (uint64_t)(*(double *)((char *)v96 + 12) * 1000000000.0);
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] High TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 == -1)
          {
LABEL_17:
            uint64_t v20 = *(void *)((char *)v96 + 4);
            uint64_t v21 = IOHIDEventGetTimeStamp();
            int v98 = 134349824;
            *(void *)uint64_t v99 = v20;
            *(_WORD *)&v99[8] = 2050;
            *(void *)&unsigned char v99[10] = v21;
            *(_WORD *)&v99[18] = 2050;
            *(void *)&v99[20] = v14;
            *(_WORD *)&v99[28] = 2050;
            *(void *)__int16 v100 = (uint64_t)(*(double *)((char *)v96 + 12) * 1000000000.0);
LABEL_28:
            int v28 = (unsigned char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n");
LABEL_29:
            if (v28 != buf) {
              free(v28);
            }
            goto LABEL_46;
          }
LABEL_154:
          dispatch_once(&qword_1024190E0, &stru_10232BCB0);
          goto LABEL_17;
        }
      }
    }
  }
  else if (!v85)
  {
    LODWORD(v96[0]) = *(_DWORD *)(a1 + 248);
    uint64_t v22 = mach_absolute_time();
    *(double *)v12.i64 = sub_1000D3D90(v22);
    double v92 = *(double *)v12.i64;
  }
LABEL_46:
  unsigned int v37 = *DataValue;
  if (v37 >= 4 && v9 == 47 || v37 == 3 && v9 == 49)
  {
    DWORD2(v95) = *(unsigned __int16 *)(DataValue + 45);
    if ((*(_WORD *)(DataValue + 1) & 0x80) == 0)
    {
      *(void *)&long long v91 = *(void *)(DataValue + 3);
      float v38 = (float)*(__int16 *)(DataValue + 13) / 32767.0;
      float v39 = (float)*(__int16 *)(DataValue + 15) / 32767.0;
      *(float *)uint64_t buf = (float)*(__int16 *)(DataValue + 11) / 32767.0;
      *(float *)&uint8_t buf[4] = v38;
      v12.f32[0] = sqrtf(fmaxf((float)((float)(1.0 - (float)(*(float *)buf * *(float *)buf)) - (float)(v38 * v38))- (float)(v39 * v39), 0.0));
      *(float *)&uint8_t buf[8] = v39;
      *(_DWORD *)&unsigned char buf[12] = v12.i32[0];
      sub_100B9BEAC((float32x4_t *)buf, v12);
      long long v86 = *(_OWORD *)buf;
      float v40 = (float)*(__int16 *)(DataValue + 31) * 0.00097656;
      float v41 = (float)*(__int16 *)(DataValue + 33) * 0.00097656;
      *((float *)&v88 + 2) = (float)*(__int16 *)(DataValue + 29) * 0.00097656;
      *((float *)&v88 + 3) = v40;
      float v89 = v41;
      float v42 = (float)*(__int16 *)(DataValue + 17) * 0.0019531;
      float v43 = (float)*(__int16 *)(DataValue + 21);
      float v44 = (float)*(__int16 *)(DataValue + 19) * 0.0019531;
      *(float *)&long long v87 = v42;
      *((float *)&v87 + 1) = v44;
      *((float *)&v87 + 2) = v43 * 0.0019531;
      if (v37 < 5)
      {
        *(_WORD *)((char *)&v97 + 1) = 0;
        LOWORD(v42) = *(_WORD *)(DataValue + 23);
        LOWORD(v44) = *(_WORD *)(DataValue + 25);
        LOWORD(v43) = *(_WORD *)(DataValue + 27);
        *((float *)&v87 + 3) = (float)LODWORD(v42) * 0.00000011921;
        *(float *)&long long v88 = (float)LODWORD(v44) * 0.00000011921;
        *((float *)&v88 + 1) = (float)LODWORD(v43) * 0.00000011921;
      }
      else
      {
        LOWORD(v42) = *(_WORD *)(DataValue + 23);
        *((float *)&v87 + 3) = (float)LODWORD(v42) * 0.00000011921;
        *(float *)&long long v88 = *((float *)&v87 + 3);
        *((float *)&v88 + 1) = *((float *)&v87 + 3);
        if (v37 == 5)
        {
          char v45 = 0;
          unsigned __int8 v46 = 0;
        }
        else
        {
          unsigned __int8 v46 = DataValue[25];
          char v45 = 1;
        }
        BYTE2(v97) = v45;
        BYTE1(v97) = v46;
        if (DataValue[26] || DataValue[27] || (LOBYTE(v50) = DataValue[28], (_BYTE)v50)) {
          int v50 = (*(unsigned __int16 *)(DataValue + 1) >> 9) & 1;
        }
        LOBYTE(v97) = v50;
        *((float *)&v96[1] + 1) = (float)(char)DataValue[26] / 127.0;
        *((float *)&v96[1] + 2) = (float)(char)DataValue[27] / 127.0;
        *((float *)&v96[1] + 3) = (float)(char)DataValue[28] / 127.0;
      }
      float v51 = (float)*(__int16 *)(DataValue + 37) * 0.00097656;
      float v52 = (float)*(__int16 *)(DataValue + 39) * 0.00097656;
      *(float *)&uint64_t v93 = (float)*(__int16 *)(DataValue + 35) * 0.00097656;
      *((float *)&v93 + 1) = v51;
      float v94 = v52;
      LODWORD(v95) = *(_DWORD *)(DataValue + 41);
      unsigned int v53 = *(unsigned __int16 *)(DataValue + 1);
      int v54 = (v53 >> 14) & 2;
      if ((v53 & 0x4000) != 0) {
        int v54 = 1;
      }
      DWORD1(v95) = v54;
      unsigned __int16 v90 = v53 & 0x3FFF;
      int v55 = *(_DWORD *)(a1 + 268);
      BOOL v57 = v55 == 4 || v55 == 2;
      HIBYTE(v97) = v57;
      __int16 v58 = (long long *)(a1 + 104);
      unsigned int v59 = *(_DWORD *)(a1 + 204);
      if (DWORD2(v95) && DWORD2(v95) == v59)
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_10232BCB0);
        }
        __int16 v60 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          int v61 = *(_DWORD *)(a1 + 204);
          uint64_t v62 = *(void *)(a1 + 160);
          *(_DWORD *)uint64_t buf = 67240960;
          *(_DWORD *)&uint8_t buf[4] = v61;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v62;
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = DWORD2(v95);
          *(_WORD *)&buf[24] = 2050;
          *(void *)&buf[26] = v91;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received duplicate packets: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_125;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 == -1) {
          goto LABEL_113;
        }
      }
      else if (DWORD2(v95) < 3 || DWORD2(v95) >= v59)
      {
        if ((unint64_t)v91 < 0xC351 || (unint64_t)v91 >= *(void *)(a1 + 160))
        {
          if (!LODWORD(v96[0]) || !*(_DWORD *)(a1 + 212) || *((double *)&v91 + 1) >= *(double *)(a1 + 168)) {
            goto LABEL_125;
          }
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_10232BCB0);
          }
          uint64_t v72 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
          {
            int v73 = *(_DWORD *)(a1 + 204);
            uint64_t v74 = *(void *)(a1 + 168);
            *(_DWORD *)uint64_t buf = 67240960;
            *(_DWORD *)&uint8_t buf[4] = v73;
            *(_WORD *)&uint8_t buf[8] = 2050;
            *(void *)&buf[10] = v74;
            *(_WORD *)&unsigned char buf[18] = 1026;
            *(_DWORD *)&buf[20] = DWORD2(v95);
            *(_WORD *)&buf[24] = 2050;
            *(void *)&buf[26] = *((void *)&v91 + 1);
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] TimeSynced timestamp went backward: lastSeq,%{public}d,lastTimestamp,%{public}.3f,currSeq,%{public}d,currTimestamp,%{public}.3f", buf, 0x22u);
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_125;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_10232BCB0);
          }
          int v83 = *(_DWORD *)(a1 + 204);
          uint64_t v84 = *(void *)(a1 + 168);
          int v98 = 67240960;
          *(_DWORD *)uint64_t v99 = v83;
          *(_WORD *)&v99[4] = 2050;
          *(void *)&v99[6] = v84;
          *(_WORD *)&v99[14] = 1026;
          *(_DWORD *)&v99[16] = DWORD2(v95);
          *(_WORD *)&v99[20] = 2050;
          *(void *)&v99[22] = *((void *)&v91 + 1);
          goto LABEL_114;
        }
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_10232BCB0);
        }
        float v66 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          int v67 = *(_DWORD *)(a1 + 204);
          uint64_t v68 = *(void *)(a1 + 160);
          *(_DWORD *)uint64_t buf = 67240960;
          *(_DWORD *)&uint8_t buf[4] = v67;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v68;
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = DWORD2(v95);
          *(_WORD *)&buf[24] = 2050;
          *(void *)&buf[26] = v91;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received backward W2 GTB timestamp: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_125;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 == -1)
        {
LABEL_113:
          int v69 = *(_DWORD *)(a1 + 204);
          uint64_t v70 = *(void *)(a1 + 160);
          int v98 = 67240960;
          *(_DWORD *)uint64_t v99 = v69;
          *(_WORD *)&v99[4] = 2050;
          *(void *)&v99[6] = v70;
          *(_WORD *)&v99[14] = 1026;
          *(_DWORD *)&v99[16] = DWORD2(v95);
          *(_WORD *)&v99[20] = 2050;
          *(void *)&v99[22] = v91;
LABEL_114:
          __int16 v71 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v71);
          if (v71 != buf) {
            free(v71);
          }
LABEL_125:
          if (v58 != &v86) {
            long long *v58 = v86;
          }
          long long v75 = v88;
          *(_OWORD *)(a1 + 120) = v87;
          *(_OWORD *)(a1 + 136) = v75;
          *(float *)(a1 + 152) = v89;
          *(_WORD *)(a1 + 156) = v90;
          *(_OWORD *)(a1 + 160) = v91;
          *(double *)(a1 + 176) = v92;
          *(void *)(a1 + 184) = v93;
          *(float *)(a1 + 192) = v94;
          long long v76 = v95;
          long long v77 = v96[0];
          long long v78 = v96[1];
          *(_DWORD *)(a1 + 244) = v97;
          *(_OWORD *)(a1 + 22_Block_object_dispose(&STACK[0x310], 8) = v78;
          *(_OWORD *)(a1 + 212) = v77;
          *(_OWORD *)(a1 + 196) = v76;
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_10232BCB0);
          }
          __int16 v79 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 67241216;
            *(_DWORD *)&uint8_t buf[4] = DWORD2(v95);
            *(_WORD *)&uint8_t buf[8] = 2050;
            *(void *)&buf[10] = v91;
            *(_WORD *)&unsigned char buf[18] = 2050;
            *(void *)&buf[20] = *((void *)&v91 + 1);
            *(_WORD *)&unsigned char buf[28] = 1026;
            *(_DWORD *)&buf[30] = v96[0];
            v129[0] = 2050;
            *(void *)&v129[1] = *(void *)((char *)v96 + 12);
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_INFO, "[AccessoryDeviceMotion] seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,TimeSyncStatus,%{public}u,latency,%{public}20.20f", buf, 0x2Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_10232BCB0);
            }
            int v98 = 67241216;
            *(_DWORD *)uint64_t v99 = DWORD2(v95);
            *(_WORD *)&v99[4] = 2050;
            *(void *)&v99[6] = v91;
            *(_WORD *)&v99[14] = 2050;
            *(void *)&v99[16] = *((void *)&v91 + 1);
            *(_WORD *)&v99[24] = 1026;
            *(_DWORD *)&v99[26] = v96[0];
            v100[0] = 2050;
            *(void *)&v100[1] = *(void *)((char *)v96 + 12);
            __int16 v81 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v81);
            if (v81 != buf) {
              free(v81);
            }
          }
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_10232BCB0);
          }
          unsigned int v80 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134353664;
            *(double *)&uint8_t buf[4] = *(float *)&v86;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&buf[14] = *((float *)&v86 + 1);
            *(_WORD *)&buf[22] = 2050;
            *(double *)&buf[24] = *((float *)&v86 + 2);
            *(_WORD *)&buf[32] = 2050;
            *(double *)__int16 v129 = *((float *)&v86 + 3);
            v129[4] = 2050;
            *(double *)&v129[5] = *(float *)&v87;
            v129[9] = 2050;
            double v130 = *((float *)&v87 + 1);
            __int16 v131 = 2050;
            double v132 = *((float *)&v87 + 2);
            __int16 v133 = 2050;
            double v134 = *((float *)&v87 + 3);
            __int16 v135 = 2050;
            double v136 = *(float *)&v88;
            __int16 v137 = 2050;
            double v138 = *((float *)&v88 + 1);
            __int16 v139 = 2050;
            double v140 = *((float *)&v88 + 2);
            __int16 v141 = 2050;
            double v142 = *((float *)&v88 + 3);
            __int16 v143 = 2050;
            double v144 = v89;
            __int16 v145 = 2050;
            double v146 = *(float *)&v93;
            __int16 v147 = 2050;
            double v148 = *((float *)&v93 + 1);
            __int16 v149 = 2050;
            double v150 = v94;
            __int16 v151 = 1026;
            int v152 = v90;
            __int16 v153 = 2050;
            double v154 = *(float *)&v95;
            __int16 v155 = 1026;
            int v156 = DWORD1(v95);
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] q.x,%{public}20.20f,q.y,%{public}20.20f,q.z,%{public}20.20f,q.w,%{public}20.20f,rotationRate.x,%{public}20.20f,rotationRate.y,%{public}20.20f,rotationRate.z,%{public}20.20f,variance.x,%{public}20.20f,variance.y,%{public}20.20f,variance.z,%{public}20.20f,userAccel.x,%{public}20.20f,userAccel.y,%{public}20.20f,userAccel.z,%{public}20.20f,filteredAccel.x,%{public}20.20f,filteredAccel.y,%{public}20.20f,filteredAccel.z,%{public}20.20f,status,%{public}04x,quiescentNoise,%{public}20.20f,quiescentMode,%{public}d", buf, 0xB8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_10232BCB0);
            }
            int v98 = 134353664;
            *(double *)uint64_t v99 = *(float *)&v86;
            *(_WORD *)&v99[8] = 2050;
            *(double *)&unsigned char v99[10] = *((float *)&v86 + 1);
            *(_WORD *)&v99[18] = 2050;
            *(double *)&v99[20] = *((float *)&v86 + 2);
            *(_WORD *)&v99[28] = 2050;
            *(double *)__int16 v100 = *((float *)&v86 + 3);
            v100[4] = 2050;
            *(double *)&v100[5] = *(float *)&v87;
            v100[9] = 2050;
            double v101 = *((float *)&v87 + 1);
            __int16 v102 = 2050;
            double v103 = *((float *)&v87 + 2);
            __int16 v104 = 2050;
            double v105 = *((float *)&v87 + 3);
            __int16 v106 = 2050;
            double v107 = *(float *)&v88;
            __int16 v108 = 2050;
            double v109 = *((float *)&v88 + 1);
            __int16 v110 = 2050;
            double v111 = *((float *)&v88 + 2);
            __int16 v112 = 2050;
            double v113 = *((float *)&v88 + 3);
            __int16 v114 = 2050;
            double v115 = v89;
            __int16 v116 = 2050;
            double v117 = *(float *)&v93;
            __int16 v118 = 2050;
            double v119 = *((float *)&v93 + 1);
            __int16 v120 = 2050;
            double v121 = v94;
            __int16 v122 = 1026;
            int v123 = v90;
            __int16 v124 = 2050;
            double v125 = *(float *)&v95;
            __int16 v126 = 1026;
            int v127 = DWORD1(v95);
            unsigned int v82 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v82);
            if (v82 != buf) {
              free(v82);
            }
          }
          sub_10150BD20(a1, (uint64_t)&v86);
          return;
        }
      }
      else
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_10232BCB0);
        }
        float v63 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          int v64 = *(_DWORD *)(a1 + 204);
          uint64_t v65 = *(void *)(a1 + 160);
          *(_DWORD *)uint64_t buf = 67240960;
          *(_DWORD *)&uint8_t buf[4] = v64;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v65;
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = DWORD2(v95);
          *(_WORD *)&buf[24] = 2050;
          *(void *)&buf[26] = v91;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received backward sequence number: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_125;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 == -1) {
          goto LABEL_113;
        }
      }
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      goto LABEL_113;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    int v47 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Invalid IMU error on accessory", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      LOWORD(v9_Block_object_dispose(&STACK[0x310], 8) = 0;
LABEL_70:
      int v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v49);
      if (v49 != buf) {
        free(v49);
      }
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10232BCB0);
    }
    int v48 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v37;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Invalid accessory device motion packet size %{public}ld and version %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10232BCB0);
      }
      int v98 = 134349312;
      *(void *)uint64_t v99 = v9;
      *(_WORD *)&v99[8] = 1026;
      *(_DWORD *)&unsigned char v99[10] = v37;
      goto LABEL_70;
    }
  }
}

void sub_10150E19C(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void *sub_10150E1CC(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = a2;
  result[2] = a3;
  void *result = off_10232BCE0;
  result[3] = 0;
  return result;
}

id *sub_10150E1F4(id *a1)
{
  *a1 = off_10232BCE0;
  if (a1[3])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD20);
    }
    BOOL v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      (*((void (**)(void **__return_ptr, id *))*a1 + 3))(__p, a1);
      if (v6 >= 0) {
        int v3 = __p;
      }
      else {
        int v3 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      CFStringRef v10 = "";
      __int16 v11 = 2082;
      float32x4_t v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA Disablement assertion dropped\", \"me\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    [a1[3] invalidate];

    a1[3] = 0;
  }
  sub_100426880(a1);
  return a1;
}

void sub_10150E374(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10150E384(id *a1)
{
  sub_10150E1F4(a1);

  operator delete();
}

void sub_10150E3BC(void *a1, uint64_t a2)
{
  char v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 50)
    {
LABEL_7:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232BD20);
      }
      char v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v7 + 23) >= 0) {
          int v8 = (const char *)v7;
        }
        else {
          int v8 = *(const char **)v7;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning unrecognized message\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    char v4 = (void *)*v4;
  }
  else if (v5 != 50)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "LocationIndependenceAssertion/kCLConnectionMessage", 0x32uLL)) {
    goto LABEL_7;
  }
  __int16 v9 = _os_activity_create((void *)&_mh_execute_header, "CL: LocationIndependenceAssertion/kCLConnectionMessage", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD20);
  }
  CFStringRef v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = "activity";
    __int16 v21 = 2050;
    uint64_t v22 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationIndependenceAssertion/kCLConnectionMessage\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  __int16 v11 = *(CLConnectionMessage **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  v13[0] = v11;
  v13[1] = (CLConnectionMessage *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10150E63C(a1, v13);
  if (v12) {
    sub_1000DB0A0((std::__shared_weak_count *)v12);
  }
  os_activity_scope_leave(&state);
}

void sub_10150E614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11) {
    sub_1000DB0A0(v11);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10150E63C(void *a1, CLConnectionMessage **a2)
{
  if (a1[3])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD20);
    }
    int v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, void *))(*a1 + 24))(&__p, a1);
      char v4 = SBYTE3(v26) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#warning LocationIndependenceAssertion already taken by %{public}s", buf, 0xCu);
      if (SBYTE3(v26) < 0) {
        operator delete(__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232BD20);
      }
      (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 24))(buf, a1);
      if (v19 >= 0) {
        int v16 = buf;
      }
      else {
        int v16 = *(unsigned char **)buf;
      }
      int v20 = 136446210;
      __int16 v21 = v16;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      if (v19 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonLocationIndependenceAssertion::handleMessageLocationIndependenceAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != (char *)&__p) {
        free(v17);
      }
    }
    return;
  }
  sub_100134750(&__p, "com.apple.locationd.independence_declarer");
  char v6 = sub_10150ECA0((uint64_t)a1, (uint64_t *)&__p);
  char v7 = v6;
  if (SBYTE3(v26) < 0)
  {
    operator delete(__p);
    if (v7)
    {
LABEL_14:
      if (objc_msgSend(objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", @"kCLConnectionMessagePurposeKey"), "length"))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_10232BD20);
        }
        int v8 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 24))(buf, a1);
          __int16 v9 = v19 >= 0 ? buf : *(unsigned char **)buf;
          std::string __p = (void *)68289282;
          __int16 v23 = 2082;
          uint64_t v24 = "";
          __int16 v25 = 2082;
          uint64_t v26 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA Taking a disablement assertion\", \"me\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
          if (v19 < 0) {
            operator delete(*(void **)buf);
          }
        }
        a1[3] = [(CLStreamedLocationProviderAssertion *)[CLStreamedLocationProviderDisablementAssertion alloc] initInUniverse:a1[2]];
        return;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232BD20);
      }
      uint64_t v12 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 24))(buf, a1);
        if (v19 >= 0) {
          id v13 = buf;
        }
        else {
          id v13 = *(unsigned char **)buf;
        }
        std::string __p = (void *)68289282;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        uint64_t v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if (v19 < 0) {
          operator delete(*(void **)buf);
        }
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_10232BD20);
        }
      }
      id v14 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 24))(buf, a1);
        if (v19 >= 0) {
          double v15 = buf;
        }
        else {
          double v15 = *(unsigned char **)buf;
        }
        std::string __p = (void *)68289282;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        uint64_t v26 = v15;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.", "{\"msg%{public}.0s\":\"#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        goto LABEL_47;
      }
      return;
    }
  }
  else if (v6)
  {
    goto LABEL_14;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD20);
  }
  CFStringRef v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 24))(buf, a1);
    if (v19 >= 0) {
      __int16 v11 = buf;
    }
    else {
      __int16 v11 = *(unsigned char **)buf;
    }
    std::string __p = (void *)68289282;
    __int16 v23 = 2082;
    uint64_t v24 = "";
    __int16 v25 = 2082;
    uint64_t v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Stream #CLLIA #warning Not entitled as a streaming disabler... ignoring LocationIndependenceAssertion\", \"client name\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
LABEL_47:
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10150EC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10150ECA0(uint64_t a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD20);
  }
  int v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
    char v6 = *(unsigned char **)__p;
    char v7 = "not entitled";
    if (v19 >= 0) {
      char v6 = __p;
    }
    if (isEntitled) {
      char v7 = "entitled";
    }
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    uint64_t v22 = v6;
    __int16 v23 = 2080;
    uint64_t v24 = v7;
    __int16 v25 = 2080;
    uint64_t v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD20);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(v14, a1);
    CFStringRef v10 = (void **)v14[0];
    __int16 v11 = "not entitled";
    if (v15 >= 0) {
      CFStringRef v10 = v14;
    }
    if (isEntitled) {
      __int16 v11 = "entitled";
    }
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v10;
    __int16 v17 = 2080;
    uint64_t v18 = v11;
    __int16 v19 = 2080;
    int v20 = v12;
    id v13 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonLocationIndependenceAssertion::isEntitled(const std::string &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return isEntitled;
}

void sub_10150EF88(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_10150EFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_10232BD50;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD90);
  }
  char v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,CLDaemonGnssDisablementAssertion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLDaemonGnssDisablementAssertion::CLDaemonGnssDisablementAssertion(CLConnection *, id<CLIntersiloUniverse>)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return a1;
}

void sub_10150F180(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  sub_100426880((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10150F1DC(uint64_t a1)
{
  *(void *)a1 = off_10232BD50;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD90);
  }
  BOOL v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,~CLDaemonGnssDisablementAssertion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLDaemonGnssDisablementAssertion::~CLDaemonGnssDisablementAssertion()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:38];
  }
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  sub_100426880((void *)a1);
  return a1;
}

void sub_10150F3C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10150F3D0(uint64_t a1)
{
  sub_10150F1DC(a1);

  operator delete();
}

void sub_10150F408(uint64_t a1, uint64_t a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD90);
  }
  uint64_t v3 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "Fail";
    if (a2) {
      uint64_t v4 = "Success";
    }
    int buf = 136446210;
    *(void *)buf_4 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,sendAssertionRsp,BasebandCausesL1Interference,isAsserted,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    int v5 = "Fail";
    if (a2) {
      int v5 = "Success";
    }
    LODWORD(v10[0]) = 136446210;
    *(void *)((char *)v10 + 4) = v5;
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonGnssDisablementAssertion::sendAssertionRsp(BOOL) const", "%s\n", v6);
    if (v6 != (char *)&buf) {
      free(v6);
    }
  }
  CFStringRef v8 = @"kCLGDA_AssertionCompleteStatusKey";
  __int16 v9 = +[NSNumber numberWithBool:a2];
  v10[0] = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  sub_101510B98("kCLConnectionMessageGnssDisablementAssertRsp", &buf);
  char v7 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(void *)&buf_4[4]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf_4[4] + 8), 1uLL, memory_order_relaxed);
  }
  CLConnection::sendMessage();
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (*(void *)&buf_4[4]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf_4[4]);
  }
}

void sub_10150F678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10150F6A4(uint64_t a1, uint64_t a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD90);
  }
  uint64_t v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    *(_DWORD *)int buf = 136380675;
    uint64_t v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,message,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    uint64_t v11 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v11 + 23) >= 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = *(void *)v11;
    }
    int v15 = 136380675;
    uint64_t v16 = v12;
    id v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLDaemonGnssDisablementAssertion::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  char v7 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != 44) {
      return;
    }
    char v7 = (void *)*v7;
  }
  else if (v8 != 44)
  {
    return;
  }
  if (!memcmp(v7, "kCLConnectionMessageGnssDisablementAssertReq", 0x2CuLL))
  {
    __int16 v9 = *(CLConnectionMessage **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    v14[0] = v9;
    v14[1] = (CLConnectionMessage *)v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    sub_10150F918(a1, v14);
    if (v10) {
      sub_1000DB0A0((std::__shared_weak_count *)v10);
    }
  }
}

void sub_10150F8F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10150F918(uint64_t a1, CLConnectionMessage **a2)
{
  if (!sub_1007439B8())
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    id v13 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      id v14 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,unsupported platform,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_65;
  }
  sub_100134750(buf, "com.apple.locationd.gnss-disablement");
  char v4 = sub_101510140(a1, (uint64_t *)buf);
  char v5 = v4;
  if ((SBYTE3(v33) & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_4;
    }
LABEL_21:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    int v15 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      uint64_t v16 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v16;
      __int16 v34 = 2082;
      uint64_t v35 = "com.apple.locationd.gnss-disablement";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing entitlement,request denied\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s}", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_65;
  }
  operator delete(*(void **)buf);
  if ((v5 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_4:
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v7 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  id v8 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
  id v9 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
  if (!v8)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    __int16 v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      uint64_t v18 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing bundleID,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_65;
  }
  uint64_t v10 = v9;
  if (!v9)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    __int16 v19 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      int v20 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing bundlePath,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_65;
  }
  if (!v7)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    __int16 v21 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      uint64_t v22 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,missing reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_65;
  }
  if (![v7 length])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    __int16 v23 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      uint64_t v24 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,empty reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
LABEL_65:
    sub_10150F408(a1, 0);
    return;
  }
  uint64_t v11 = (const std::string::value_type *)[v7 UTF8String];
  uint64_t v12 = (const char *)(a1 + 24);
  std::string::assign((std::string *)(a1 + 24), v11);
  if ([v8 length] || objc_msgSend(v10, "length"))
  {
    sub_1015102C0(a1);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    __int16 v25 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      if (v28 >= 0) {
        uint64_t v26 = __p;
      }
      else {
        uint64_t v26 = (void **)__p[0];
      }
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v12 = *(const char **)v12;
      }
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      uint64_t v33 = v26;
      __int16 v34 = 2082;
      uint64_t v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,#warning,daemon,no beneficiary,request denied\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10150F408(a1, 0);
    if (*(char *)(a1 + 47) < 0)
    {
      **(unsigned char **)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 47) = 0;
    }
  }
}

void sub_10151011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101510140(uint64_t a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD90);
  }
  char v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
    if (v10 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    if (*((char *)a2 + 23) >= 0) {
      id v7 = a2;
    }
    else {
      id v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)int buf = 68289794;
    int v12 = 0;
    __int16 v13 = 2082;
    id v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = v6;
    __int16 v17 = 2082;
    uint64_t v18 = v7;
    __int16 v19 = 1026;
    int v20 = isEntitled;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#clgda,daemon,\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s, \"entitled\":%{public}hhd}", buf, 0x2Cu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  return isEntitled;
}

void sub_1015102C0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232BDB0);
  }
  BOOL v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,notifyClientEnteringInterferenceMode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232BDB0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonGnssDisablementAssertion::notifyClientEnteringInterferenceMode()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (!*(void *)(a1 + 48) && sub_1007439B8()) {
    sub_100E92BC0();
  }
}

void sub_10151072C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232BD90);
  }
  uint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a4 + 1440);
    int v8 = *(_DWORD *)(a4 + 1444);
    *(_DWORD *)int buf = 67240448;
    int v12 = v7;
    __int16 v13 = 1026;
    int v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#clgda,daemon,kNotificationBasebandCausesL1Interference,%{public}d,bandChangeStatus,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232BD90);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  BOOL v9 = !sub_1007439B8() || sub_100743AA0() || *(_DWORD *)(a4 + 1444) != 1;
  sub_10150F408(a1, v9);
}

void sub_101510934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232BDD0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232BDD0);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonGnssDisablementAssertion::handleGnssDisablementNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10151072C(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101510AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101510B08(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101510B38(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101510B68(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void *sub_101510B98@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101510BE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_101510BFC(uint64_t a1)
{
  uint64_t v1 = sub_1015155B8(a1);
  *(int64x2_t *)(v1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
  *(void *)(v1 + 160) = 0;
  *(_DWORD *)(v1 + 16_Block_object_dispose(&STACK[0x310], 8) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(void *)(v1 + 20_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(v1 + 216) = 0x3FE0000000000000;
  *(void *)(v1 + 224) = 0;
  *(unsigned char *)(v1 + 232) = 0;
  *(_DWORD *)(v1 + 236) = 0;
  *(unsigned char *)(v1 + 240) = 0;
  *(void *)(v1 + 24_Block_object_dispose(&STACK[0x310], 8) = 0;
  return result;
}

void *sub_101510C50(void *result)
{
  void *result = off_10232BE00;
  result[8] = off_1022CAFC0;
  result[1] = off_1022CAFC0;
  return result;
}

uint64_t sub_101510CB0(uint64_t result)
{
  *(unsigned char *)(result + 240) = 0;
  *(void *)(result + 24_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)double result = off_10232BE00;
  *(void *)(result + 64) = off_1022CAFC0;
  *(void *)(result + _Block_object_dispose(&STACK[0x310], 8) = off_1022CAFC0;
  return result;
}

uint64_t sub_101510D18(uint64_t a1, double a2)
{
  if (sub_101510EF0(a1))
  {
    *(unsigned char *)(a1 + 240) = 1;
    *(double *)(a1 + 24_Block_object_dispose(&STACK[0x310], 8) = a2;
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    char v4 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 248);
      *(_DWORD *)int buf = 134217984;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_Initialize,EstimatorTimeCfaSec,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::initialize(const CFAbsoluteTime)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return *(unsigned __int8 *)(a1 + 240);
}

BOOL sub_101510EF0(uint64_t a1)
{
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = 0x3DDB7CDFD9D7BDBBLL;
  uint64_t v9 = 0x100000002;
  uint64_t v7 = off_10232BE58;
  long long v8 = xmmword_101E0F9B0;
  char v10 = &v11;
  *(void *)sub_10004DF44((uint64_t)&v7, 0, 0) = 0x3FE0000000000000;
  *(void *)sub_10004DF44((uint64_t)&v7, 1, 0) = 0x3FE0000000000000;
  int v2 = sub_101511238(a1, (uint64_t)&v7);
  if (v2)
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    uint64_t v3 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLOutdoorEstimator,Initialize(),Estimator initialization failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1)
      {
LABEL_16:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::initializeHiddenMarkovModel()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return v2 == 0;
      }
LABEL_18:
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    char v4 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,Initialize(),CN HMM is initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
  return v2 == 0;
}

uint64_t sub_101511238(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 128);
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    for (unsigned int i = 0; i != v5; ++i)
    {
      double v7 = sub_1000629A4(a2, i);
      if (v7 < 0.0 || v7 > 1.0) {
        sub_101AB9F18();
      }
    }
  }
  uint64_t v15 = 0x100000002;
  int v13 = off_10232BE58;
  long long v14 = xmmword_101E0F9B0;
  __int16 v16 = (double *)v17;
  uint64_t v9 = (cnprint::CNPrinter *)sub_1000629E0(a2, 1, (uint64_t)&v13);
  if (DWORD2(v14) != 1) {
    sub_101AB9EEC();
  }
  double v10 = *v16;
  if (*v16 <= 0.0) {
    sub_101AB9EC0();
  }
  if (fabs(v10 + -1.0) > v4 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    LOWORD(v13) = 2;
    LOBYTE(v12[0]) = 1;
    cnprint::CNPrinter::Print();
  }
  sub_1000622DC((uint64_t)v12, a2);
  sub_1001885FC(v12, v5, 1);
  uint64_t v15 = 0x100000002;
  int v13 = off_10232BE58;
  long long v14 = xmmword_101E0F9B0;
  __int16 v16 = (double *)v17;
  sub_100061AC4((uint64_t)v12, (uint64_t)&v13, 1.0 / v10);
  sub_100063168(a1 + 8, (uint64_t)&v13);
  sub_100063168(a1 + 64, a1 + 8);
  *(_DWORD *)(a1 + 120) = 1;
  return 0;
}

void sub_101511400(uint64_t a1, double *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  double v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,processEvidence(),Process GnssEvidence", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v53) = 0;
    __int16 v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (!*(unsigned char *)(a1 + 240))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    uint64_t v15 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM Not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v53) = 0;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
      goto LABEL_103;
    }
    return;
  }
  uint64_t v50 = 0x100000002;
  long long v49 = xmmword_101E0F9B0;
  int v48 = off_10232BEA0;
  float v51 = &v52;
  *(void *)sub_10004DF44((uint64_t)&v48, 0, 0) = sub_10004CCEC;
  *(void *)sub_10004DF44((uint64_t)&v48, 1, 0) = sub_10004CCEC;
  uint64_t v45 = 0x100000002;
  float v43 = off_10232BF28;
  long long v44 = xmmword_101E0F9B0;
  unsigned __int8 v46 = &v47;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v41 = _Q0;
  long long v39 = _Q0;
  double v10 = a2[2];
  if (v10 < 0.0) {
    double v10 = 0.0;
  }
  double v42 = *a2;
  double v40 = v42;
  double v37 = -1.0;
  unint64_t v38 = (unint64_t)v10;
  if (sub_101509904(a1 + 136, (uint64_t *)&v38, *(_DWORD *)(a1 + 160), &v37))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    uint64_t v11 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      int v12 = *(_DWORD *)(a1 + 160);
      *(_DWORD *)int buf = 67174657;
      LODWORD(v70) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor failed for signal environment,%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1)
      {
LABEL_16:
        int v13 = *(_DWORD *)(a1 + 160);
        int v53 = 67174657;
        LODWORD(v54) = v13;
        long long v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
        goto LABEL_103;
      }
LABEL_111:
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
      goto LABEL_16;
    }
    return;
  }
  if (v37 < 0.0 || v37 > 1.0 || (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    __int16 v17 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenOutdoor returned invalid probability", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      goto LABEL_120;
    }
    goto LABEL_102;
  }
  *((double *)&v41 + 1) = v37;
  double v37 = -1.0;
  if (sub_101509B74(a1 + 136, (uint64_t *)&v38, &v37))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    __int16 v16 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,ProcessEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor failed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1) {
      goto LABEL_102;
    }
LABEL_120:
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
    goto LABEL_102;
  }
  if (v37 < 0.0 || v37 > 1.0 || (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    int v20 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupCn0ProbabilityGivenIndoor returned invalid probability", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      goto LABEL_120;
    }
    goto LABEL_102;
  }
  *(double *)&long long v41 = v37;
  *(void *)sub_10004DF44((uint64_t)&v43, 0, 0) = &v41;
  unint64_t v38 = *((unsigned int *)a2 + 6);
  double v37 = -1.0;
  if (!sub_101509D60(a1 + 136, (uint64_t *)&v38, *(_DWORD *)(a1 + 160), &v37))
  {
    if (v37 < 0.0 || v37 > 1.0 || (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v22 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        goto LABEL_120;
      }
    }
    else
    {
      *((double *)&v39 + 1) = v37;
      double v37 = -1.0;
      if (sub_101509FD0(a1 + 136, (uint64_t *)&v38, &v37))
      {
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        __int16 v21 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor failed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          goto LABEL_120;
        }
      }
      else
      {
        if (v37 >= 0.0 && v37 <= 1.0 && (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          *(double *)&long long v39 = v37;
          *(void *)sub_10004DF44((uint64_t)&v43, 1, 0) = &v39;
          sub_1000630D0(a1, (uint64_t)buf);
          int v24 = sub_100061B84(a1, 2, (uint64_t)buf, 2, (uint64_t)&v48, (uint64_t)&v43);
          if (v24)
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            __int16 v25 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 67109120;
              LODWORD(v70) = v24;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,HMM update failed,%d", buf, 8u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              int v53 = 67109120;
              LODWORD(v54) = v24;
              long long v14 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
              goto LABEL_103;
            }
          }
          else
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            uint64_t v27 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
            {
              double v28 = *a2;
              uint64_t v29 = *((void *)a2 + 2);
              int v30 = *((_DWORD *)a2 + 6);
              uint64_t v31 = *(void *)(a1 + 248);
              *(_DWORD *)int buf = 134219777;
              double v70 = v28;
              __int16 v71 = 2049;
              uint64_t v72 = v29;
              __int16 v73 = 1025;
              int v74 = v30;
              __int16 v75 = 2048;
              uint64_t v76 = v31;
              __int16 v77 = 2049;
              uint64_t v78 = *((void *)&v41 + 1);
              __int16 v79 = 2049;
              uint64_t v80 = v41;
              __int16 v81 = 2049;
              uint64_t v82 = *((void *)&v39 + 1);
              __int16 v83 = 2049;
              uint64_t v84 = v39;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_GnssEvidence,evidenceCfatSec,%f,cn0dBHz,%{private}f,numTrackedSatellitesAboveElevationMask,%{private}d,EstimatorTimeCfaSec,%f,cn0likelihoodObservationGivenOutdoor,%{private}f,cn0likelihoodObservationGivenIndoor,%{private}f,numSatlikelihoodObservationGivenOutdoor,%{private}f,numSatlikelihoodObservationGivenIndoor,%{private}f", buf, 0x4Eu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              double v32 = *a2;
              uint64_t v33 = *((void *)a2 + 2);
              int v34 = *((_DWORD *)a2 + 6);
              uint64_t v35 = *(void *)(a1 + 248);
              int v53 = 134219777;
              double v54 = v32;
              __int16 v55 = 2049;
              uint64_t v56 = v33;
              __int16 v57 = 1025;
              int v58 = v34;
              __int16 v59 = 2048;
              uint64_t v60 = v35;
              __int16 v61 = 2049;
              uint64_t v62 = *((void *)&v41 + 1);
              __int16 v63 = 2049;
              uint64_t v64 = v41;
              __int16 v65 = 2049;
              uint64_t v66 = *((void *)&v39 + 1);
              __int16 v67 = 2049;
              uint64_t v68 = v39;
              uint64_t v36 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v36);
              if (v36 != (char *)buf) {
                free(v36);
              }
            }
            sub_100062B8C(a1);
          }
          return;
        }
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        uint64_t v26 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          goto LABEL_120;
        }
      }
    }
LABEL_102:
    LOWORD(v53) = 0;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssEvidence &)", "%s\n", v14);
LABEL_103:
    if (v14 != (char *)buf) {
      free(v14);
    }
    return;
  }
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  __int16 v18 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
  {
    int v19 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)int buf = 67174657;
    LODWORD(v70) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssEvidence,lookupNumSatsProbabilityGivenOutdoor failed for signal environment,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1) {
      goto LABEL_16;
    }
    goto LABEL_111;
  }
}

void *sub_101512594(void *result)
{
  void *result = off_10232BF80;
  return result;
}

void *sub_1015125B4(void *result)
{
  void *result = off_10232BEF8;
  return result;
}

void sub_1015125D4(uint64_t a1, double *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  double v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,processEvidence(),Process AlsEvidence", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v50) = 0;
    double v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  if (!*(unsigned char *)(a1 + 240))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    long long v14 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM Not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v50) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v15);
      goto LABEL_71;
    }
    return;
  }
  uint64_t v47 = 0x100000001;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v46 = v5;
  uint64_t v45 = off_10232BFB0;
  int v48 = &v49;
  *(void *)sub_10004DF44((uint64_t)&v45, 0, 0) = sub_10004CCEC;
  uint64_t v42 = 0x100000001;
  double v40 = off_10232BFF8;
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  long long v41 = v6;
  float v43 = &v44;
  __asm { FMOV            V0.2D, #-1.0 }
  uint64_t v12 = *(void *)a2;
  long long v38 = _Q0;
  uint64_t v39 = v12;
  double v37 = -1.0;
  if (!sub_10150A57C(a1 + 136, a2 + 2, a2 + 3, &v37))
  {
    if (v37 < 0.0 || v37 > 1.0 || (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      __int16 v17 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1)
      {
LABEL_70:
        LOWORD(v50) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v15);
LABEL_71:
        if (v15 != (char *)buf) {
          free(v15);
        }
        return;
      }
    }
    else
    {
      *((double *)&v38 + 1) = v37;
      double v37 = -1.0;
      if (sub_10150A73C(a1 + 136, a2 + 2, &v37))
      {
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        __int16 v16 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor failed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 == -1) {
          goto LABEL_70;
        }
      }
      else
      {
        if (v37 >= 0.0 && v37 <= 1.0 && (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          *(double *)&long long v38 = v37;
          *(void *)sub_10004DF44((uint64_t)&v40, 0, 0) = &v38;
          sub_1000630D0(a1, (uint64_t)buf);
          sub_1001884A4((uint64_t)&v50, (uint64_t)&v45);
          sub_10018834C((uint64_t)v36, (uint64_t)&v40);
          int v18 = sub_100061B84(a1, 2, (uint64_t)buf, 1, (uint64_t)&v50, (uint64_t)v36);
          if (v18)
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            int v19 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 67109120;
              LODWORD(v67) = v18;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,HMM update failed,%d", buf, 8u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              int v50 = 67109120;
              LODWORD(v51) = v18;
              uint64_t v15 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v15);
              goto LABEL_71;
            }
          }
          else
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            __int16 v21 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v22 = *(void *)a2;
              uint64_t v23 = *((void *)a2 + 2);
              uint64_t v24 = *((void *)a2 + 3);
              int v25 = *((unsigned __int8 *)a2 + 32);
              uint64_t v26 = *((void *)a2 + 5);
              uint64_t v27 = *(void *)(a1 + 248);
              *(_DWORD *)int buf = 134219777;
              uint64_t v67 = v22;
              __int16 v68 = 2049;
              uint64_t v69 = *((void *)&v38 + 1);
              __int16 v70 = 2049;
              uint64_t v71 = v38;
              __int16 v72 = 2049;
              uint64_t v73 = v23;
              __int16 v74 = 2049;
              uint64_t v75 = v24;
              __int16 v76 = 1025;
              int v77 = v25;
              __int16 v78 = 1025;
              int v79 = v26;
              __int16 v80 = 2048;
              uint64_t v81 = v27;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_AlsEvidence,evidenceCfatSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f,alsTrustedLux,%{private}f,sunElevationAngleDegrees,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}d,EstimatorTimeCfaSec,%f", buf, 0x4Au);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              uint64_t v29 = *(void *)a2;
              uint64_t v30 = *((void *)a2 + 2);
              uint64_t v31 = *((void *)a2 + 3);
              int v32 = *((unsigned __int8 *)a2 + 32);
              uint64_t v33 = *((void *)a2 + 5);
              uint64_t v34 = *(void *)(a1 + 248);
              int v50 = 134219777;
              uint64_t v51 = v29;
              __int16 v52 = 2049;
              uint64_t v53 = *((void *)&v38 + 1);
              __int16 v54 = 2049;
              uint64_t v55 = v38;
              __int16 v56 = 2049;
              uint64_t v57 = v30;
              __int16 v58 = 2049;
              uint64_t v59 = v31;
              __int16 v60 = 1025;
              int v61 = v32;
              __int16 v62 = 1025;
              int v63 = v33;
              __int16 v64 = 2048;
              uint64_t v65 = v34;
              uint64_t v35 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsEvidence &)", "%s\n", v35);
              if (v35 != (char *)buf) {
                free(v35);
              }
            }
            sub_100062B8C(a1);
          }
          return;
        }
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        int v20 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookupAlsEvidenceProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 == -1) {
          goto LABEL_70;
        }
      }
    }
LABEL_77:
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
    goto LABEL_70;
  }
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  int v13 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsEvidence,lookuplookupAlsEvidenceProbabilityGivenOutdoorProbabilityGivenOutdoor failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1) {
      goto LABEL_70;
    }
    goto LABEL_77;
  }
}

void sub_1015131E0(uint64_t a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  double v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process GnssAvailability", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v43) = 0;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if (!*(unsigned char *)(a1 + 240))
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    int v13 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM Not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v43) = 0;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v14);
      goto LABEL_71;
    }
    return;
  }
  uint64_t v40 = 0x100000001;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v39 = v5;
  long long v38 = off_10232BFB0;
  long long v41 = &v42;
  *(void *)sub_10004DF44((uint64_t)&v38, 0, 0) = sub_10004CCEC;
  uint64_t v35 = 0x100000001;
  uint64_t v33 = off_10232BFF8;
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  long long v34 = v6;
  uint64_t v36 = &v37;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v31 = _Q0;
  uint64_t v32 = *a2;
  double v30 = -1.0;
  if (!sub_10150A1BC(a1 + 136, *((_DWORD *)a2 + 6), &v30))
  {
    if (v30 < 0.0 || v30 > 1.0 || (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      __int16 v16 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 == -1)
      {
LABEL_70:
        LOWORD(v43) = 0;
        long long v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v14);
LABEL_71:
        if (v14 != (char *)buf) {
          free(v14);
        }
        return;
      }
    }
    else
    {
      *((double *)&v31 + 1) = v30;
      double v30 = -1.0;
      if (sub_10150A39C(a1 + 136, *((_DWORD *)a2 + 6), &v30))
      {
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        uint64_t v15 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor failed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 == -1) {
          goto LABEL_70;
        }
      }
      else
      {
        if (v30 >= 0.0 && v30 <= 1.0 && (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          *(double *)&long long v31 = v30;
          *(void *)sub_10004DF44((uint64_t)&v33, 0, 0) = &v31;
          sub_1000630D0(a1, (uint64_t)buf);
          sub_1001884A4((uint64_t)&v43, (uint64_t)&v38);
          sub_10018834C((uint64_t)v29, (uint64_t)&v33);
          int v17 = sub_100061B84(a1, 2, (uint64_t)buf, 1, (uint64_t)&v43, (uint64_t)v29);
          if (v17)
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            int v18 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 67109120;
              LODWORD(v54) = v17;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,HMM update failed,%d", buf, 8u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              int v43 = 67109120;
              LODWORD(v44) = v17;
              long long v14 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v14);
              goto LABEL_71;
            }
          }
          else
          {
            if (qword_1024194F0 != -1) {
              dispatch_once(&qword_1024194F0, &stru_10232BE28);
            }
            int v20 = qword_1024194F8;
            if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v21 = *a2;
              int v22 = *((_DWORD *)a2 + 6);
              uint64_t v23 = *(void *)(a1 + 248);
              *(_DWORD *)int buf = 134219009;
              uint64_t v54 = v21;
              __int16 v55 = 1025;
              int v56 = v22;
              __int16 v57 = 2048;
              uint64_t v58 = v23;
              __int16 v59 = 2049;
              uint64_t v60 = *((void *)&v31 + 1);
              __int16 v61 = 2049;
              uint64_t v62 = v31;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_GnssAvailability,evidenceCfatSec,%f,GnssAvailability,%{private}d,EstimatorTimeCfaSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f", buf, 0x30u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194F0 != -1) {
                dispatch_once(&qword_1024194F0, &stru_10232BE28);
              }
              uint64_t v25 = *a2;
              int v26 = *((_DWORD *)a2 + 6);
              uint64_t v27 = *(void *)(a1 + 248);
              int v43 = 134219009;
              uint64_t v44 = v25;
              __int16 v45 = 1025;
              int v46 = v26;
              __int16 v47 = 2048;
              uint64_t v48 = v27;
              __int16 v49 = 2049;
              uint64_t v50 = *((void *)&v31 + 1);
              __int16 v51 = 2049;
              uint64_t v52 = v31;
              double v28 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GnssAvailabilityEvidence &)", "%s\n", v28);
              if (v28 != (char *)buf) {
                free(v28);
              }
            }
            sub_100062B8C(a1);
          }
          return;
        }
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        int v19 = qword_1024194F8;
        if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 == -1) {
          goto LABEL_70;
        }
      }
    }
LABEL_77:
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
    goto LABEL_70;
  }
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  uint64_t v12 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GnssAvailability,lookupGnssAvailabilityStateProbabilityGivenOutdoor failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 == -1) {
      goto LABEL_70;
    }
    goto LABEL_77;
  }
}

void sub_101513DA4(uint64_t a1, double *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  double v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process GpsModelOutput", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v36) = 0;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v33 = 0x100000001;
    *(void *)&long long v5 = 0x100000001;
    *((void *)&v5 + 1) = 0x100000001;
    long long v32 = v5;
    long long v31 = off_10232BFB0;
    long long v34 = &v35;
    *(void *)sub_10004DF44((uint64_t)&v31, 0, 0) = sub_10004CCEC;
    uint64_t v28 = 0x100000001;
    int v26 = off_10232BFF8;
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    long long v27 = v6;
    uint64_t v29 = &v30;
    double v7 = *a2;
    double v8 = a2[3];
    double v9 = 0.95;
    if (v8 <= 0.95) {
      double v9 = a2[3];
    }
    if (v8 >= 0.001) {
      double v10 = v9;
    }
    else {
      double v10 = 0.001;
    }
    *(double *)&v25[1] = 1.0 - v10;
    *(double *)&v25[2] = v7;
    *(double *)uint64_t v25 = v10;
    *(void *)sub_10004DF44((uint64_t)&v26, 0, 0) = v25;
    sub_1000630D0(a1, (uint64_t)buf);
    sub_1001884A4((uint64_t)&v36, (uint64_t)&v31);
    sub_10018834C((uint64_t)v24, (uint64_t)&v26);
    int v11 = sub_100061B84(a1, 2, (uint64_t)buf, 1, (uint64_t)&v36, (uint64_t)v24);
    if (v11)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v12 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109120;
        LODWORD(v43) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM update failed,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        int v36 = 67109120;
        LODWORD(v37) = v11;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v13);
LABEL_29:
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    else
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v15 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
      {
        double v16 = *a2;
        uint64_t v17 = *((void *)a2 + 3);
        uint64_t v18 = *(void *)(a1 + 248);
        *(_DWORD *)int buf = 134218497;
        double v43 = v16;
        __int16 v44 = 2049;
        uint64_t v45 = v17;
        __int16 v46 = 2048;
        uint64_t v47 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_GpsModelOutput,evidenceCfatSec,%f,gpsModelOutput,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        double v20 = *a2;
        uint64_t v21 = *((void *)a2 + 3);
        uint64_t v22 = *(void *)(a1 + 248);
        int v36 = 134218497;
        double v37 = v20;
        __int16 v38 = 2049;
        uint64_t v39 = v21;
        __int16 v40 = 2048;
        uint64_t v41 = v22;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      sub_100062B8C(a1);
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    long long v14 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),GpsModelOutput,HMM Not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v36) = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::GpsModelOutputEvidence &)", "%s\n", v13);
      goto LABEL_29;
    }
  }
}

void sub_101514460(uint64_t a1, double *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  double v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process WifiModelOutput", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v36) = 0;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v33 = 0x100000001;
    *(void *)&long long v5 = 0x100000001;
    *((void *)&v5 + 1) = 0x100000001;
    long long v32 = v5;
    long long v31 = off_10232BFB0;
    long long v34 = &v35;
    *(void *)sub_10004DF44((uint64_t)&v31, 0, 0) = sub_10004CCEC;
    uint64_t v28 = 0x100000001;
    int v26 = off_10232BFF8;
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    long long v27 = v6;
    uint64_t v29 = &v30;
    double v7 = *a2;
    double v8 = a2[3];
    double v9 = 0.95;
    if (v8 <= 0.95) {
      double v9 = a2[3];
    }
    if (v8 >= 0.001) {
      double v10 = v9;
    }
    else {
      double v10 = 0.001;
    }
    *(double *)&v25[1] = 1.0 - v10;
    *(double *)&v25[2] = v7;
    *(double *)uint64_t v25 = v10;
    *(void *)sub_10004DF44((uint64_t)&v26, 0, 0) = v25;
    sub_1000630D0(a1, (uint64_t)buf);
    sub_1001884A4((uint64_t)&v36, (uint64_t)&v31);
    sub_10018834C((uint64_t)v24, (uint64_t)&v26);
    int v11 = sub_100061B84(a1, 2, (uint64_t)buf, 1, (uint64_t)&v36, (uint64_t)v24);
    if (v11)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v12 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109120;
        LODWORD(v43) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM update failed,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        int v36 = 67109120;
        LODWORD(v37) = v11;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v13);
LABEL_29:
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    else
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v15 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
      {
        double v16 = *a2;
        uint64_t v17 = *((void *)a2 + 3);
        uint64_t v18 = *(void *)(a1 + 248);
        *(_DWORD *)int buf = 134218497;
        double v43 = v16;
        __int16 v44 = 2049;
        uint64_t v45 = v17;
        __int16 v46 = 2048;
        uint64_t v47 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_WifiModelOutput,evidenceCfatSec,%f,wifiIndoorProb,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        double v20 = *a2;
        uint64_t v21 = *((void *)a2 + 3);
        uint64_t v22 = *(void *)(a1 + 248);
        int v36 = 134218497;
        double v37 = v20;
        __int16 v38 = 2049;
        uint64_t v39 = v21;
        __int16 v40 = 2048;
        uint64_t v41 = v22;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      sub_100062B8C(a1);
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    long long v14 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),WifiModelOutput,HMM Not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v36) = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::WifiModelOutputEvidence &)", "%s\n", v13);
      goto LABEL_29;
    }
  }
}

void sub_101514B1C(uint64_t a1, double *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  double v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process AlsModelOutput", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    LOWORD(v36) = 0;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v33 = 0x100000001;
    *(void *)&long long v5 = 0x100000001;
    *((void *)&v5 + 1) = 0x100000001;
    long long v32 = v5;
    long long v31 = off_10232BFB0;
    long long v34 = &v35;
    *(void *)sub_10004DF44((uint64_t)&v31, 0, 0) = sub_10004CCEC;
    uint64_t v28 = 0x100000001;
    int v26 = off_10232BFF8;
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    long long v27 = v6;
    uint64_t v29 = &v30;
    double v7 = *a2;
    double v8 = a2[3];
    double v9 = 0.95;
    if (v8 <= 0.95) {
      double v9 = a2[3];
    }
    if (v8 >= 0.001) {
      double v10 = v9;
    }
    else {
      double v10 = 0.001;
    }
    v25[1] = v10;
    v25[2] = v7;
    v25[0] = 1.0 - v10;
    *(void *)sub_10004DF44((uint64_t)&v26, 0, 0) = v25;
    sub_1000630D0(a1, (uint64_t)buf);
    sub_1001884A4((uint64_t)&v36, (uint64_t)&v31);
    sub_10018834C((uint64_t)v24, (uint64_t)&v26);
    int v11 = sub_100061B84(a1, 2, (uint64_t)buf, 1, (uint64_t)&v36, (uint64_t)v24);
    if (v11)
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v12 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109120;
        LODWORD(v43) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM update failed,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        int v36 = 67109120;
        LODWORD(v37) = v11;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v13);
LABEL_29:
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    else
    {
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      uint64_t v15 = qword_1024194F8;
      if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
      {
        double v16 = *a2;
        uint64_t v17 = *((void *)a2 + 3);
        uint64_t v18 = *(void *)(a1 + 248);
        *(_DWORD *)int buf = 134218497;
        double v43 = v16;
        __int16 v44 = 2049;
        uint64_t v45 = v17;
        __int16 v46 = 2048;
        uint64_t v47 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_AlsModelOutput,evidenceCfatSec,%f,alsOutdoorProb,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194F0 != -1) {
          dispatch_once(&qword_1024194F0, &stru_10232BE28);
        }
        double v20 = *a2;
        uint64_t v21 = *((void *)a2 + 3);
        uint64_t v22 = *(void *)(a1 + 248);
        int v36 = 134218497;
        double v37 = v20;
        __int16 v38 = 2049;
        uint64_t v39 = v21;
        __int16 v40 = 2048;
        uint64_t v41 = v22;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      sub_100062B8C(a1);
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    long long v14 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),AlsModelOutput,HMM Not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_10232BE28);
      }
      LOWORD(v36) = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::AlsModelOutputEvidence &)", "%s\n", v13);
      goto LABEL_29;
    }
  }
}

void sub_1015151D8()
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  uint64_t v0 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,ProcessEvidence(),Process RouteHint", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::RouteHintEvidence &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101515360(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 160) = a2;
  *(_DWORD *)(a1 + 164) = a3;
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_10232BE28);
  }
  double v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)int buf = 67174657;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_SignalEnvironmentInfo,signalEnvironmentType,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_10232BE28);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorEstimator::setSignalEnvironmentInfo(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, CLSignalEnvironmentProvider_Type::SignalEnvironmentFidelityLevel)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_101515518(void *a1)
{
  *a1 = off_10232BE00;
  a1[8] = off_1022CAFC0;
  a1[1] = off_1022CAFC0;
  operator delete();
}

void sub_101515588(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_1015155B8(uint64_t a1)
{
  *(void *)a1 = off_10232BE00;
  *(void *)(a1 + 32) = 0x100000002;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = off_10232BE58;
  *(_OWORD *)(a1 + 16) = xmmword_101E0F9B0;
  *(void *)(a1 + 40) = a1 + 48;
  int v2 = (_DWORD *)(a1 + 64);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x310], 8) = 0x100000002;
  *(void *)(a1 + 64) = off_10232BE58;
  *(_OWORD *)(a1 + 72) = xmmword_101E0F9B0;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = 0x3DDB7CDFD9D7BDBBLL;
  sub_100062B3C((_DWORD *)(a1 + 8), 0, 0);
  sub_100062B3C(v2, 0, 0);
  *(_DWORD *)(a1 + 120) = 1;
  return a1;
}

void sub_1015156AC(_Unwind_Exception *a1)
{
  *int v2 = off_1022CAFC0;
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_1015156E8(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_101515718(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_10151573C(void *a1)
{
  *a1 = off_10232BEF8;
  operator delete();
}

void sub_10151576C(uint64_t a1)
{
  sub_101515790(a1, v1);
}

void sub_101515790(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      if (!a2) {
        sub_101A70314();
      }
      int v6 = v4 + v2 - *(_DWORD *)(a1 + 20);
      if (v6 <= 0) {
        sub_101A70340();
      }
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = 1;
        do
        {
          double v10 = &a2[v9];
          if (!a2[v9])
          {
            uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8 * v9);
            int v12 = v9;
            do
            {
              int v12 = v12 * v6 % (int)v8;
              uint64_t v13 = *(void *)(a1 + 32);
              uint64_t v14 = *(void *)(v13 + 8 * v12);
              *(void *)(v13 + 8 * v12) = v11;
              char *v10 = 1;
              double v10 = &a2[v12];
              uint64_t v11 = v14;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v8);
      }
    }
  }
}

void sub_101515868(void *a1)
{
  *a1 = off_10232BF80;
  operator delete();
}

uint64_t sub_101515898(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000002;
  *(void *)(result + 32) = 0;
  *(void *)(result + _Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_10232BE58;
  if (a2 > 2)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 2)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x310], 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_101515944(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_101515964(void *a1)
{
  *a1 = off_10232BEF8;
  operator delete();
}

void sub_101515994(uint64_t a1)
{
  sub_101515790(a1, &v1);
}

void sub_1015159B8(void *a1)
{
  *a1 = off_10232BF80;
  operator delete();
}

uint64_t sub_1015159F0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  unsigned int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 56))(__p, a1);
    uint64_t v3 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered unexpected location notification while in %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 56))(buf, a1);
    if (v8 >= 0) {
      int v5 = buf;
    }
    else {
      int v5 = *(unsigned char **)buf;
    }
    int v9 = 136315138;
    double v10 = v5;
    int v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::HandleLocationNotification(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  return 1;
}

uint64_t sub_101515C48(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  unsigned int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 56))(__p, a1);
    uint64_t v3 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered unexpected motion state notification while in %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 56))(buf, a1);
    if (v8 >= 0) {
      int v5 = buf;
    }
    else {
      int v5 = *(unsigned char **)buf;
    }
    int v9 = 136315138;
    double v10 = v5;
    int v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::HandleMotionStateNotification(const CLMotionActivity &)", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  return 1;
}

uint64_t sub_101515EA0()
{
  return 1;
}

uint64_t sub_101515EA8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  unsigned int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 56))(__p, a1);
    uint64_t v3 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered unexpected step count notification while in %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 56))(buf, a1);
    if (v8 >= 0) {
      int v5 = buf;
    }
    else {
      int v5 = *(unsigned char **)buf;
    }
    int v9 = 136315138;
    double v10 = v5;
    int v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::HandleStepCountNotification(const CLStepCountEntry &)", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  return 1;
}

uint64_t sub_101516100()
{
  return 1;
}

uint64_t sub_101516108()
{
  return 1;
}

uint64_t sub_101516110()
{
  return 0;
}

uint64_t sub_101516118(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 328) || (unint64_t v3 = *(void *)(v2 + 376), v3 <= 4))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 376);
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to pedometer data history length %lu", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v6 = *(void **)(*(void *)(a1 + 8) + 376);
    LODWORD(__p[0]) = 134217984;
    *(void **)((char *)__p + 4) = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v7);
LABEL_179:
    if (v7 != buf) {
      free(v7);
    }
    return 0;
  }
  if (!*(unsigned char *)(v2 + 1232) || (unint64_t v8 = *(void *)(v2 + 424), v8 <= 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 424);
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to GNSS data history length %lu", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    __int16 v100 = *(void **)(*(void *)(a1 + 8) + 424);
    LODWORD(__p[0]) = 134217984;
    *(void **)((char *)__p + 4) = v100;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v7);
    goto LABEL_179;
  }
  uint64_t v13 = *(void *)(v2 + 344);
  unint64_t v14 = *(void *)(v2 + 368);
  double v15 = *(double *)(*(void *)(v13 + 8 * (v14 / 0x17)) + 176 * (v14 % 0x17));
  if (*(double *)(*(void *)(*(void *)(v2 + 392) + (((v8 + *(void *)(v2 + 416) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 800 * ((v8 + *(_DWORD *)(v2 + 416) - 1) & 0xF)
                 + 192) < v15)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    double v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to old GNSS data", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    LOWORD(__p[0]) = 0;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v7);
    goto LABEL_179;
  }
  double v17 = *(double *)(v2 + 224);
  if (v17 > 0.0001 && v17 < 3.6)
  {
    unint64_t v18 = v14 + v3;
    int v19 = (void *)(v13 + 8 * (v18 / 0x17));
    if (*(void *)(v2 + 352) == v13) {
      unint64_t v20 = 0;
    }
    else {
      unint64_t v20 = *v19 + 176 * (v18 % 0x17);
    }
    double v21 = *(double *)(v2 + 192);
    *(void *)int buf = v19;
    *(void *)&uint8_t buf[8] = v20;
    double v22 = 2.56 / v17;
    sub_100174054(buf, -1);
    uint64_t v23 = *(void *)&buf[8];
    if (**(void **)buf == *(void *)&buf[8]) {
      uint64_t v23 = *(void *)(*(void *)buf - 8) + 4048;
    }
    double v24 = v21 - *(double *)(v23 - 136);
    if (v22 > v24 * 3.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      __int16 v76 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218240;
        *(double *)&uint8_t buf[4] = v22;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to discrepancy between pace distance %.3f and delta distance %.3f", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      LODWORD(__p[0]) = 134218240;
      *(void **)((char *)__p + 4) = *(void **)&v22;
      WORD2(__p[1]) = 2048;
      *(void **)((char *)&__p[1] + 6) = *(void **)&v24;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v7);
      goto LABEL_179;
    }
  }
  memset(__p, 0, 24);
  sub_1013FB0B4(__p, 5uLL);
  uint64_t v25 = *(void **)(a1 + 8);
  uint64_t v26 = v25[43];
  if (v25[44] != v26)
  {
    unint64_t v27 = v25[46];
    uint64_t v28 = *(void *)(v26 + 8 * (v27 / 0x17)) + 176 * (v27 % 0x17);
    unint64_t v29 = *(void *)(v26 + 8 * ((v25[47] + v27) / 0x17)) + 176 * ((v25[47] + v27) % 0x17);
    if (v28 != v29)
    {
      uint64_t v30 = (void *)(v26 + 8 * (v27 / 0x17));
      double v31 = 0.0;
      double v32 = 0.0;
      while (1)
      {
        *(void *)int buf = 0;
        v105[0] = 0;
        uint64_t v101 = 0;
        *(void *)__int16 v102 = 0;
        if ((sub_101517848(v28, (double *)buf, (double *)v105, (double *)v102, (double *)&v101) & 1) == 0) {
          goto LABEL_114;
        }
        double v33 = *(double *)buf;
        double v34 = *(double *)v105 * *(double *)v105;
        uint64_t v35 = (char *)__p[1];
        if (__p[1] >= __p[2])
        {
          double v37 = (char *)__p[0];
          int64_t v38 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 60) {
            sub_1001D7FD4();
          }
          int64_t v40 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 3 > v39) {
            unint64_t v39 = v40 >> 3;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)sub_1000C571C((uint64_t)&__p[2], v41);
            double v37 = (char *)__p[0];
            uint64_t v35 = (char *)__p[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          double v43 = (double *)&v42[16 * v38];
          *double v43 = v33;
          v43[1] = v34;
          __int16 v44 = v43;
          if (v35 != v37)
          {
            do
            {
              *((_OWORD *)v44 - 1) = *((_OWORD *)v35 - 1);
              v44 -= 2;
              v35 -= 16;
            }
            while (v35 != v37);
            double v37 = (char *)__p[0];
          }
          int v36 = v43 + 2;
          __p[0] = v44;
          __p[1] = v43 + 2;
          __p[2] = &v42[16 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(void *)__p[1] = *(void *)buf;
          *((double *)v35 + 1) = v34;
          int v36 = (double *)(v35 + 16);
        }
        __p[1] = v36;
        v28 += 176;
        if (v28 - *v30 == 4048)
        {
          uint64_t v45 = v30[1];
          ++v30;
          uint64_t v28 = v45;
        }
        double v31 = v31 + 1.0 / v34;
        double v32 = v32 + 1.0 / (v34 * v31) * (v33 - v32);
        if (v28 == v29) {
          goto LABEL_62;
        }
      }
    }
  }
  double v31 = 0.0;
  int v36 = (double *)__p[1];
  double v32 = 0.0;
LABEL_62:
  __int16 v46 = (double *)__p[0];
  double v47 = 1.0 / v31;
  if (__p[0] == v36)
  {
LABEL_75:
    memset(v105, 0, 24);
    sub_1013FB0B4(v105, 0xCuLL);
    uint64_t v54 = *(void **)(a1 + 8);
    uint64_t v55 = v54[49];
    double v56 = 0.0;
    if (v54[50] == v55)
    {
      double v61 = 0.0;
    }
    else
    {
      unint64_t v57 = v54[52];
      uint64_t v58 = (void *)(v55 + 8 * (v57 >> 4));
      __int16 v59 = (double *)(*v58 + 800 * (v57 & 0xF));
      uint64_t v60 = *(void *)(v55 + (((v54[53] + v57) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 800 * ((*((_DWORD *)v54 + 106) + v57) & 0xF);
      double v61 = 0.0;
      while (v59 != (double *)v60)
      {
        if (v59[24] >= v15)
        {
          double v62 = *(double *)((char *)v59 + 44);
          double v63 = *(double *)((char *)v59 + 52);
          if (v63 < 0.25) {
            double v63 = 0.25;
          }
          double v64 = v63 * v63;
          uint64_t v65 = (char *)v105[1];
          if (v105[1] >= v105[2])
          {
            uint64_t v67 = (char *)v105[0];
            int64_t v68 = ((char *)v105[1] - (char *)v105[0]) >> 4;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 60) {
              sub_1001D7FD4();
            }
            int64_t v70 = (char *)v105[2] - (char *)v105[0];
            if (((char *)v105[2] - (char *)v105[0]) >> 3 > v69) {
              unint64_t v69 = v70 >> 3;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v71 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v69;
            }
            if (v71)
            {
              __int16 v72 = (char *)sub_1000C571C((uint64_t)&v105[2], v71);
              uint64_t v67 = (char *)v105[0];
              uint64_t v65 = (char *)v105[1];
            }
            else
            {
              __int16 v72 = 0;
            }
            uint64_t v73 = (double *)&v72[16 * v68];
            *uint64_t v73 = v62;
            v73[1] = v64;
            __int16 v74 = v73;
            if (v65 != v67)
            {
              do
              {
                *((_OWORD *)v74 - 1) = *((_OWORD *)v65 - 1);
                v74 -= 2;
                v65 -= 16;
              }
              while (v65 != v67);
              uint64_t v67 = (char *)v105[0];
            }
            uint64_t v66 = v73 + 2;
            v105[0] = v74;
            v105[1] = v73 + 2;
            v105[2] = &v72[16 * v71];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *(double *)v105[1] = v62;
            *((double *)v65 + 1) = v64;
            uint64_t v66 = v65 + 16;
          }
          v105[1] = v66;
          double v61 = v61 + 1.0 / v64;
          double v56 = v56 + 1.0 / (v64 * v61) * (v62 - v56);
        }
        v59 += 100;
        if ((double *)((char *)v59 - *v58) == (double *)12800)
        {
          uint64_t v75 = (double *)v58[1];
          ++v58;
          __int16 v59 = v75;
        }
      }
    }
    __int16 v78 = (double *)v105[0];
    if ((void *)((char *)v105[1] - (char *)v105[0]) < (void *)0x20)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      int v79 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134217984;
        *(void *)&uint8_t buf[4] = ((char *)v105[1] - (char *)v105[0]) >> 4;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to insufficient GNSS records with sufficiently recent time stamps (%lu records)", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_171;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      *(_DWORD *)__int16 v102 = 134217984;
      *(void *)&v102[4] = ((char *)v105[1] - (char *)v105[0]) >> 4;
      __int16 v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v80);
      goto LABEL_188;
    }
    double v81 = 1.0 / v61;
    double v82 = 0.0;
    if (v105[0] != v105[1])
    {
      while (1)
      {
        double v83 = v78[1];
        double v84 = *v78 - v56;
        double v85 = v84 * v84 / (v83 - v81);
        if (v85 > 6.59854421) {
          break;
        }
        double v82 = v82 + v84 * v84 / v83;
        v78 += 2;
        if (v78 == v105[1]) {
          goto LABEL_128;
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      double v92 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218240;
        *(double *)&uint8_t buf[4] = v84;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v85;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to GNSS outlier innovation,%.3lf,statistic,%.3lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_171;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      *(_DWORD *)__int16 v102 = 134218240;
      *(double *)&v102[4] = v84;
      __int16 v103 = 2048;
      int64_t v104 = *(void *)&v85;
      __int16 v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v80);
      goto LABEL_188;
    }
LABEL_128:
    if (v82 > *(double *)((char *)&unk_101E0FBD0 + (((char *)v105[1] - (char *)v105[0]) >> 1) - 16))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      long long v86 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218240;
        *(double *)&uint8_t buf[4] = v82;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = (((char *)v105[1] - (char *)v105[0]) >> 4) - 1;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to GNSS outlier goodness-of-fit statistic %.3lf (%lu DOF)", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_171;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      *(_DWORD *)__int16 v102 = 134218240;
      *(double *)&v102[4] = v82;
      __int16 v103 = 2048;
      int64_t v104 = (((char *)v105[1] - (char *)v105[0]) >> 4) - 1;
      __int16 v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v80);
      goto LABEL_188;
    }
    long long v87 = *(double **)(a1 + 8);
    double v88 = v87[19];
    double v89 = v87[78];
    if (vabdd_f64(v88, v89) > 3.84)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      double v90 = v88 - v89;
      long long v91 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134217984;
        *(double *)&uint8_t buf[4] = v90;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to old data age,%.3lf sec.", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_171;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      *(_DWORD *)__int16 v102 = 134217984;
      *(double *)&v102[4] = v90;
      __int16 v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v80);
      goto LABEL_188;
    }
    uint64_t v93 = (double *)((char *)v87 + 476);
    double v94 = *v93;
    double v95 = v93[1];
    if (v95 < 0.25) {
      double v95 = 0.25;
    }
    double v96 = v32 - v94;
    double v97 = vabdd_f64(v32, v94) / sqrt(v47 + v95 * v95);
    if (v97 <= 2.5758293)
    {
      if (vabdd_f64(v32, v56) / sqrt(v47 + v81) <= 2.5758293)
      {
        uint64_t v11 = 1;
        goto LABEL_172;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v99 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218240;
        *(double *)&uint8_t buf[4] = v96;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v97;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to equivalence of averaged speeds Observation,%.3lf,testStatistic,%.3lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_171:
        uint64_t v11 = 0;
LABEL_172:
        if (v105[0])
        {
          v105[1] = v105[0];
          operator delete(v105[0]);
        }
        goto LABEL_174;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_187;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      int v98 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134218240;
        *(double *)&uint8_t buf[4] = v96;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v97;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to equivalence Observation,%.3lf,testStatistic,%.3lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_171;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_187;
      }
    }
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
LABEL_187:
    *(_DWORD *)__int16 v102 = 134218240;
    *(double *)&v102[4] = v96;
    __int16 v103 = 2048;
    int64_t v104 = *(void *)&v97;
    __int16 v80 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v80);
LABEL_188:
    if (v80 != buf) {
      free(v80);
    }
    goto LABEL_171;
  }
  double v48 = 0.0;
  while (1)
  {
    double v49 = v46[1];
    double v50 = *v46 - v32;
    double v51 = v50 * v50 / (v49 - v47);
    if (v51 > 6.59854421) {
      break;
    }
    double v48 = v48 + v50 * v50 / v49;
    v46 += 2;
    if (v46 == v36)
    {
      if (v48 <= 9.48772904) {
        goto LABEL_75;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v52 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 134217984;
        *(double *)&uint8_t buf[4] = v48;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to pedometer outlier goodness-of-fit statistic %.3lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        LODWORD(v105[0]) = 134217984;
        *(void **)((char *)v105 + 4) = *(void **)&v48;
        uint64_t v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v53);
LABEL_184:
        if (v53 != buf) {
          free(v53);
        }
        goto LABEL_114;
      }
      goto LABEL_114;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  int v77 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134218240;
    *(double *)&uint8_t buf[4] = v50;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v51;
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: should not be active due to pedometer outlier innovation,%.3lf,statistic,%.3lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    LODWORD(v105[0]) = 134218240;
    *(void **)((char *)v105 + 4) = *(void **)&v50;
    WORD2(v105[1]) = 2048;
    *(void **)((char *)&v105[1] + 6) = *(void **)&v51;
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceState::ShouldBeActive() const", "%s\n", v53);
    goto LABEL_184;
  }
LABEL_114:
  uint64_t v11 = 0;
LABEL_174:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11;
}

void sub_1015177BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101517848(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  if ((*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a1 + 8) <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    double v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      double v22 = *(double *)(a1 + 8);
      *(_DWORD *)int buf = 134349056;
      double v33 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Pedometer Assistance: encountered invalid time stamp %{public}.3lf", buf, 0xCu);
    }
    BOOL v23 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v23)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_27;
      }
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 120) & 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v8 = (unint64_t)(v7 - 0x10000000000000) >> 53;
    unint64_t v9 = v7 - 1;
    BOOL v10 = v8 >= 0x3FF && v9 >= 0xFFFFFFFFFFFFFLL;
    double v11 = 0.0;
    if (!v10) {
      double v11 = 1.0 / *(double *)(a1 + 120);
    }
    *a2 = v11;
    if (v11 <= 11.4822547)
    {
      double v15 = *(double *)(a1 + 128);
      double v16 = *(double *)(a1 + 136);
      int v17 = sub_10073C674();
      double v18 = 0.25;
      if (!v17) {
        double v18 = 0.1;
      }
      double v19 = *a2;
      if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v16 == 0.0) {
        double v20 = v19 * 0.1;
      }
      else {
        double v20 = fabs(v19 + -1.0 / v16);
      }
      if (v20 < v18) {
        double v20 = v18;
      }
      if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 == 0.0) {
        double v29 = v19 * 0.1;
      }
      else {
        double v29 = vabdd_f64(1.0 / v15, v19);
      }
      if (v29 >= v18) {
        double v18 = v29;
      }
      *a3 = sqrt(v18 * (v18 * (v20 / (v20 + v18))) + v20 * (v18 / (v20 + v18)) * v20);
      double v30 = *a2 + v20 * -3.0;
      if (v30 < 0.0) {
        double v30 = 0.0;
      }
      *a4 = v30;
      double v31 = *a2 + v18 * 3.0;
      if (v31 > 11.4822547) {
        double v31 = 11.4822547;
      }
      *a5 = v31;
      return 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    uint64_t v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      double v26 = *a2;
      *(_DWORD *)int buf = 134349056;
      double v33 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Pedometer Assistance: encountered impossible pedestrian speed %{public}.3lf", buf, 0xCu);
    }
    BOOL v27 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v27)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_27:
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLGNSSPedometerAssistanceController::GetPedometerStatistics(const CLStepCountEntry &, double &, double &, double &, double &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
        return 0;
      }
LABEL_45:
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      goto LABEL_27;
    }
  }
  return result;
}

void *sub_101517C7C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "PedometerAssistanceDisabledState");
}

void sub_101517C8C(uint64_t a1)
{
}

void sub_101517EA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 58))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: deregistering for notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      unint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::DeregisterForNotifications()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3) {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:5];
    }
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4) {
      [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:1];
    }
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:0];
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:2];
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      [*(id *)(v7 + 16) unregister:*(void *)(v7 + 8) forNotification:2];
    }
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      [*(id *)(v8 + 16) unregister:*(void *)(v8 + 8) forNotification:0];
    }
    *(unsigned char *)(a1 + 5_Block_object_dispose(&STACK[0x310], 8) = 0;
  }
}

uint64_t sub_1015180B8(uint64_t a1)
{
  return 1;
}

void sub_1015180D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 58))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: registering for notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:5 registrationInfo:0];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: location notifications unavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      [*(id *)(v5 + 16) register:*(void *)(v5 + 8) forNotification:1 registrationInfo:0];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: motion state notifications unavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7)
    {
      [*(id *)(v7 + 16) register:*(void *)(v7 + 8) forNotification:0 registrationInfo:0];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: motion state observer notifications unavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        double v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      [*(id *)(v9 + 16) register:*(void *)(v9 + 8) forNotification:2 registrationInfo:0];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      BOOL v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: natalimetry notifications unavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      [*(id *)(v11 + 16) register:*(void *)(v11 + 8) forNotification:2 registrationInfo:0];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      char v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: status notifications unavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        double v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      [*(id *)(v13 + 16) register:*(void *)(v13 + 8) forNotification:0 registrationInfo:0];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      unint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: step count notifications unavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        double v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
    *(unsigned char *)(a1 + 5_Block_object_dispose(&STACK[0x310], 8) = 1;
  }
}

uint64_t sub_101518A14(uint64_t a1, uint64_t a2, char *a3)
{
  sub_101518AA4(*(void *)(a1 + 8), a2, a3);
  sub_1001801E0(*(void *)(*(void *)(a1 + 8) + 136), a2);
  int v8 = v5;
  if (sub_1004B5FBC())
  {
    if (v8 == 1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!*(unsigned char *)(v6 + 144) && !*(unsigned char *)(v6 + 145)) {
        sub_101518FE0(v6, v6 + 96);
      }
    }
  }
  return 1;
}

uint64_t sub_101518AA4(uint64_t a1, uint64_t a2, char *__src)
{
  double v3 = *(double *)(a2 + 76);
  if (v3 == -1.0) {
    return 0;
  }
  BOOL v4 = v3 < 0.0 || ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v4 && (unint64_t)(*(void *)&v3 - 1) > 0xFFFFFFFFFFFFELL) {
    return 0;
  }
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) != 1) {
    return 0;
  }
  double v7 = *(double *)(a2 + 44);
  if (v7 == -1.0) {
    return 0;
  }
  double v8 = *(double *)(a2 + 52);
  if (v7 < 0.0 || v8 == -1.0) {
    return 0;
  }
  uint64_t result = 0;
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v8 <= 0.0) {
    return result;
  }
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t result = 0;
  double v13 = *((double *)__src + 4);
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v13 > 0.0)
  {
    if (*(unsigned char *)(a1 + 1232))
    {
      double v14 = *(double *)(a1 + 624);
      if (v13 <= v14)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        double v15 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 134218240;
          double v48 = v13;
          __int16 v49 = 2048;
          double v50 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered out-of-order GNSS notification time %.3lf vs. last seen notification time %.3lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232C2C8);
          }
          *(_DWORD *)double v30 = 134218240;
          *(double *)&v30[4] = v13;
          *(_WORD *)&v30[12] = 2048;
          *(double *)&v30[14] = v14;
          double v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdateGPSLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
      }
    }
    long long v16 = *(_OWORD *)(a2 + 112);
    long long v35 = *(_OWORD *)(a2 + 96);
    long long v36 = v16;
    v37[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)(a2 + 140);
    long long v17 = *(_OWORD *)(a2 + 48);
    long long v31 = *(_OWORD *)(a2 + 32);
    long long v32 = v17;
    long long v18 = *(_OWORD *)(a2 + 80);
    long long v33 = *(_OWORD *)(a2 + 64);
    long long v34 = v18;
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)double v30 = *(_OWORD *)a2;
    *(_OWORD *)&v30[16] = v19;
    memcpy(v38, __src, sizeof(v38));
    uint64_t v39 = *((void *)__src + 65);
    double v20 = (std::__shared_weak_count *)*((void *)__src + 66);
    int64_t v40 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = *(_OWORD *)(__src + 616);
    long long v45 = *(_OWORD *)(__src + 600);
    *(_OWORD *)__int16 v46 = v21;
    *(void *)&v46[13] = *(void *)(__src + 629);
    long long v22 = *(_OWORD *)(__src + 552);
    long long v41 = *(_OWORD *)(__src + 536);
    long long v42 = v22;
    long long v23 = *(_OWORD *)(__src + 584);
    long long v43 = *(_OWORD *)(__src + 568);
    long long v44 = v23;
    sub_100F3C528(a1 + 432, (uint64_t)v30);
    sub_10151EC6C((void *)(a1 + 384), a1 + 432);
    if (*(void *)(a1 + 424) >= 0xDuLL) {
      sub_10151EDA0((void *)(a1 + 384));
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    double v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v25 = *(double *)(a2 + 76);
      double v26 = *(double *)(a2 + 44);
      uint64_t v27 = *(void *)(a2 + 52);
      *(_DWORD *)int buf = 134218496;
      double v48 = v25;
      __int16 v49 = 2048;
      double v50 = v26;
      __int16 v51 = 2048;
      uint64_t v52 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received GPS time,%.3lf,speed,%.3lf,speedSigma,%.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdateGPSLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    if (v40) {
      sub_1000DB0A0(v40);
    }
    return 1;
  }
  return result;
}

void sub_101518FBC(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2E0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101518FE0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_101ABA61C();
  }
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 72))(v4) & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    char v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 56))(__p, a2);
      double v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: could not handle exiting %s", buf, 0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 56))(buf, a2);
      if (v18 >= 0) {
        long long v16 = buf;
      }
      else {
        long long v16 = *(unsigned char **)buf;
      }
      int v19 = 136315138;
      double v20 = v16;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_59;
    }
LABEL_40:
    sub_10151D150(a1);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 56))(__p, a2);
    uint64_t v6 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: entering %s", buf, 0xCu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 56))(buf, a2);
    if (v18 >= 0) {
      double v14 = buf;
    }
    else {
      double v14 = *(unsigned char **)buf;
    }
    int v19 = 136315138;
    double v20 = v14;
    double v15 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::ChangeState(PedometerAssistanceState *const)", "%s\n", v15);
    if (v15 != (char *)__p) {
      free(v15);
    }
  }
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if ((result & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 128) + 56))(__p);
      uint64_t v9 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: could not handle entering %s", buf, 0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 128) + 56))(buf);
      if (v18 >= 0) {
        BOOL v10 = buf;
      }
      else {
        BOOL v10 = *(unsigned char **)buf;
      }
      int v19 = 136315138;
      double v20 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_59:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::ChangeState(PedometerAssistanceState *const)", "%s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_101519678(uint64_t a1, uint64_t a2)
{
  sub_1004B6360(*(void *)(*(void *)(a1 + 8) + 136), a2);
  int v6 = v3;
  if (sub_1004B5FBC())
  {
    if (v6 == 1)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (!*(unsigned char *)(v4 + 144) && !*(unsigned char *)(v4 + 145)) {
        sub_101518FE0(v4, v4 + 96);
      }
    }
  }
  return 1;
}

uint64_t sub_1015196E8()
{
  return 1;
}

BOOL sub_1015196F0(uint64_t a1, uint64_t a2)
{
  return sub_1015196F8(*(void *)(a1 + 8), a2);
}

BOOL sub_1015196F8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 8);
  if ((*(uint64_t *)&v2 <= -1 || ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v2 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      double v41 = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered invalid step count notification time %.3lf", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_59:
      int64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdatePedometerHistory(const CLStepCountEntry &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
      return 0;
    }
    goto LABEL_66;
  }
  if (*(double *)(a2 + 40) >= 0.0)
  {
    if (*(unsigned char *)(a2 + 152) == 1 && *(double *)(a2 + 120) == 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: ignoring zero pace in stroller cases", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_59;
      }
      goto LABEL_66;
    }
    char v12 = (long long *)(a1 + 152);
    if (!*(unsigned char *)(a1 + 328))
    {
      long long v15 = *(_OWORD *)a2;
      long long v16 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x310], 8) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 184) = v16;
      long long *v12 = v15;
      long long v17 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)(a2 + 64);
      long long v19 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x310], 8) = v19;
      *(_OWORD *)(a1 + 200) = v17;
      *(_OWORD *)(a1 + 216) = v18;
      long long v20 = *(_OWORD *)(a2 + 112);
      long long v21 = *(_OWORD *)(a2 + 128);
      long long v22 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 312) = v22;
      *(_OWORD *)(a1 + 264) = v20;
      *(_OWORD *)(a1 + 280) = v21;
      *(unsigned char *)(a1 + 32_Block_object_dispose(&STACK[0x310], 8) = 1;
      goto LABEL_50;
    }
    double v13 = *(double *)(a1 + 160);
    if (v2 > v13)
    {
      if (v2 - v13 > 3.84)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        double v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 134218496;
          double v41 = v2;
          __int16 v42 = 2048;
          double v43 = v13;
          __int16 v44 = 2048;
          double v45 = v2 - v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: encountered unexpected step count notification time %.3lf vs. last seen notification time %.3lf for a period of %.3lf", buf, 0x20u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_59;
        }
        goto LABEL_66;
      }
      long long v24 = *(_OWORD *)a2;
      long long v25 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x310], 8) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 184) = v25;
      long long *v12 = v24;
      long long v26 = *(_OWORD *)(a2 + 48);
      long long v27 = *(_OWORD *)(a2 + 64);
      long long v28 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x310], 8) = v28;
      *(_OWORD *)(a1 + 200) = v26;
      *(_OWORD *)(a1 + 216) = v27;
      long long v29 = *(_OWORD *)(a2 + 112);
      long long v30 = *(_OWORD *)(a2 + 128);
      long long v31 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 312) = v31;
      *(_OWORD *)(a1 + 264) = v29;
      *(_OWORD *)(a1 + 280) = v30;
LABEL_50:
      sub_1006AA720((void *)(a1 + 336), (long long *)a2);
      unint64_t v32 = *(void *)(a1 + 376);
      if (v32 >= 6)
      {
        ++*(void *)(a1 + 368);
        *(void *)(a1 + 376) = v32 - 1;
        sub_100A31F9C(a1 + 336, 1);
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      long long v33 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v34 = *(double *)(a2 + 8);
        double v35 = *(double *)(a2 + 120);
        double v36 = *(double *)(a2 + 128);
        uint64_t v37 = *(void *)(a2 + 136);
        *(_DWORD *)int buf = 134218752;
        double v41 = v34;
        __int16 v42 = 2048;
        double v43 = v35;
        __int16 v44 = 2048;
        double v45 = v36;
        __int16 v46 = 2048;
        uint64_t v47 = v37;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received pedometer time,%.3lf,pace,%.3lf,lowerBound,%.3lf,upperBound,%.3lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        uint64_t v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdatePedometerHistory(const CLStepCountEntry &)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      return 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    long long v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134218240;
      double v41 = v2;
      __int16 v42 = 2048;
      double v43 = v13;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered out-of-order step count notification time %.3lf vs. last seen notification time %.3lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_59;
    }
LABEL_66:
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    goto LABEL_59;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = *(double *)(a2 + 40);
    *(_DWORD *)int buf = 134217984;
    double v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered invalid step count notification rawDistance %.3lf", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_59;
    }
    goto LABEL_66;
  }
  return result;
}

void *sub_101519F7C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "PedometerAssistanceAsleepState");
}

uint64_t sub_101519F8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 328)) {
    *(unsigned char *)(v2 + 32_Block_object_dispose(&STACK[0x310], 8) = 0;
  }
  int v3 = *(void ***)(v2 + 344);
  uint64_t v4 = *(void *)(v2 + 352);
  *(void *)(v2 + 376) = 0;
  unint64_t v5 = v4 - (void)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v6 = *(void *)(v2 + 352);
      int v3 = (void **)(*(void *)(v2 + 344) + 8);
      *(void *)(v2 + 344) = v3;
      unint64_t v5 = v6 - (void)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    uint64_t v7 = 11;
  }
  else
  {
    if (v5 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v7 = 23;
  }
  *(void *)(v2 + 36_Block_object_dispose(&STACK[0x310], 8) = v7;
LABEL_10:
  double v8 = *(void **)(a1 + 8);
  uint64_t v9 = (void **)v8[49];
  BOOL v10 = (void **)v8[50];
  if (v10 == v9)
  {
    long long v15 = v8 + 53;
    BOOL v10 = (void **)v8[49];
  }
  else
  {
    unint64_t v11 = v8[52];
    char v12 = &v9[v11 >> 4];
    uint64_t v13 = (uint64_t)*v12;
    uint64_t v14 = (uint64_t)*v12 + 800 * (v11 & 0xF);
    long long v15 = v8 + 53;
    uint64_t v16 = *(uint64_t *)((char *)v9 + (((v8[53] + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 800 * ((*((_DWORD *)v8 + 106) + (int)v11) & 0xF);
    if (v14 != v16)
    {
      do
      {
        long long v17 = *(std::__shared_weak_count **)(v14 + 688);
        if (v17)
        {
          sub_1000DB0A0(v17);
          uint64_t v13 = (uint64_t)*v12;
        }
        v14 += 800;
        if (v14 - v13 == 12800)
        {
          uint64_t v18 = (uint64_t)v12[1];
          ++v12;
          uint64_t v13 = v18;
          uint64_t v14 = v18;
        }
      }
      while (v14 != v16);
      uint64_t v9 = (void **)v8[49];
      BOOL v10 = (void **)v8[50];
    }
  }
  *long long v15 = 0;
  unint64_t v19 = (char *)v10 - (char *)v9;
  if ((unint64_t)((char *)v10 - (char *)v9) >= 0x11)
  {
    do
    {
      operator delete(*v9);
      uint64_t v20 = v8[50];
      uint64_t v9 = (void **)(v8[49] + 8);
      v8[49] = v9;
      unint64_t v19 = v20 - (void)v9;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    uint64_t v21 = 8;
  }
  else
  {
    if (v19 >> 3 != 2) {
      goto LABEL_26;
    }
    uint64_t v21 = 16;
  }
  v8[52] = v21;
LABEL_26:
  uint64_t v22 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v22 + 1232))
  {
    long long v23 = *(std::__shared_weak_count **)(v22 + 1120);
    uint64_t v24 = *(void *)(a1 + 8);
    if (v23)
    {
      sub_1000DB0A0(v23);
      uint64_t v24 = *(void *)(a1 + 8);
    }
    *(unsigned char *)(v22 + 1232) = 0;
    uint64_t v22 = v24;
  }
  if (*(unsigned char *)(v22 + 1248)) {
    *(unsigned char *)(v22 + 124_Block_object_dispose(&STACK[0x310], 8) = 0;
  }
  return 1;
}

uint64_t sub_10151A14C(uint64_t a1, uint64_t a2, char *a3)
{
  sub_101518AA4(*(void *)(a1 + 8), a2, a3);
  sub_1001801E0(*(void *)(*(void *)(a1 + 8) + 136), a2);
  int v9 = v5;
  int v6 = sub_1004B5FBC();
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v6 || v9 != 1 || *(unsigned char *)(v7 + 144) || *(unsigned char *)(v7 + 145)) {
    sub_101518FE0(v7, v7 + 80);
  }
  return 1;
}

uint64_t sub_10151A1E0(uint64_t a1, uint64_t a2)
{
  sub_1004B6360(*(void *)(*(void *)(a1 + 8) + 136), a2);
  int v7 = v3;
  int v4 = sub_1004B5FBC();
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v4 || v7 != 1 || *(unsigned char *)(v5 + 144) || *(unsigned char *)(v5 + 145)) {
    sub_101518FE0(v5, v5 + 80);
  }
  return 1;
}

uint64_t sub_10151A254(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: application processor going to sleep", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceAwakeState::HandleStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_101518FE0(*(void *)(a1 + 8), *(void *)(a1 + 8) + 80);
  }
  return 1;
}

BOOL sub_10151A404(uint64_t a1, uint64_t a2)
{
  BOOL v3 = sub_1015196F8(*(void *)(a1 + 8), a2);
  if (v3 && sub_101516118(a1)) {
    sub_101518FE0(*(void *)(a1 + 8), *(void *)(a1 + 8) + 112);
  }
  return v3;
}

void *sub_10151A450@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "PedometerAssistanceAwakeState");
}

uint64_t sub_10151A460(uint64_t a1, uint64_t a2, char *a3)
{
  sub_101518AA4(*(void *)(a1 + 8), a2, a3);
  sub_1001801E0(*(void *)(*(void *)(a1 + 8) + 136), a2);
  int v9 = v5;
  int v6 = sub_1004B5FBC();
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v6 || v9 != 1 || *(unsigned char *)(v7 + 144) || *(unsigned char *)(v7 + 145)) {
    sub_101518FE0(v7, v7 + 80);
  }
  return 1;
}

uint64_t sub_10151A4F4(uint64_t a1, uint64_t a2)
{
  sub_1004B6360(*(void *)(*(void *)(a1 + 8) + 136), a2);
  int v7 = v3;
  int v4 = sub_1004B5FBC();
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v4 || v7 != 1 || *(unsigned char *)(v5 + 144) || *(unsigned char *)(v5 + 145)) {
    sub_101518FE0(v5, v5 + 80);
  }
  return 1;
}

uint64_t sub_10151A568(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: application processor going to sleep", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::HandleStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_101518FE0(*(void *)(a1 + 8), *(void *)(a1 + 8) + 80);
  }
  return 1;
}

BOOL sub_10151A718(uint64_t a1, uint64_t a2)
{
  BOOL v3 = sub_1015196F8(*(void *)(a1 + 8), a2);
  if (v3)
  {
    if (sub_101516118(a1)) {
      (**(void (***)(uint64_t))a1)(a1);
    }
    else {
      sub_101518FE0(*(void *)(a1 + 8), *(void *)(a1 + 8) + 96);
    }
  }
  return v3;
}

void *sub_10151A790@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "PedometerAssistanceActiveState");
}

uint64_t sub_10151A7A0(void (***a1)(void))
{
  return 1;
}

uint64_t sub_10151A7DC(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 8);
  if (!v2[56] && !v2[57] || !v2[328]) {
    return 0;
  }
  double v23 = 0.0;
  double v24 = 0.0;
  double v21 = 0.0;
  double v22 = 0.0;
  uint64_t result = sub_101517848((uint64_t)(v2 + 152), &v24, &v23, &v22, &v21);
  if (result)
  {
    uint64_t result = 0;
    double v4 = v24;
    if (v24 >= 0.0 && v24 <= 4.4704)
    {
      uint64_t v5 = *(void *)&v21;
      double v6 = v22;
      if (v22 < v21)
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        double v8 = sub_10016C458();
        uint64_t v9 = *(void *)(a1 + 8);
        double v10 = *(double *)(v9 + 484);
        if (v10 < 0.25) {
          double v10 = 0.25;
        }
        if (*(unsigned char *)(v9 + 56))
        {
          double v11 = v23;
          if (vabdd_f64(*(double *)(v9 + 476), v4) / sqrt(v11 * v11 + v10 * v10) <= 0.67448975)
          {
            *(CFAbsoluteTime *)long long v25 = Current;
            *(double *)&v25[8] = v8;
            *(double *)&v25[16] = v4;
            double v26 = v23;
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
            char v12 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 134218496;
              CFAbsoluteTime v33 = Current;
              __int16 v34 = 2048;
              uint64_t v35 = *(void *)&v4;
              __int16 v36 = 2048;
              double v37 = v11;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: Type,Speed,CFAbsoluteTime,%.3lf,Speed,%.3lf,Uncertainty,%.3lf", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10232C2C8);
              }
              *(_DWORD *)long long v29 = 134218496;
              *(CFAbsoluteTime *)&v29[4] = Current;
              *(_WORD *)&v29[12] = 2048;
              *(double *)&v29[14] = v4;
              *(_WORD *)&v29[22] = 2048;
              double v30 = v11;
              unint64_t v19 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::SendPedometerAssistanceCommand()", "%s\n", v19);
              if (v19 != (char *)buf) {
                free(v19);
              }
            }
            uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 1280);
            if (!v13) {
              sub_10015E48C();
            }
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 48))(v13, v25);
LABEL_35:
            uint64_t v18 = *(void *)(a1 + 8);
            *(CFAbsoluteTime *)(v18 + 1240) = Current;
            uint64_t result = 1;
            *(unsigned char *)(v18 + 124_Block_object_dispose(&STACK[0x310], 8) = 1;
            return result;
          }
        }
        if (*(unsigned char *)(v9 + 57))
        {
          *(CFAbsoluteTime *)long long v29 = Current;
          *(double *)&v29[8] = v8;
          *(void *)&v29[16] = 0x400EB851EB851EB8;
          double v30 = v6;
          uint64_t v31 = v5;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232C2C8);
          }
          long long v17 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 134218752;
            CFAbsoluteTime v33 = Current;
            __int16 v34 = 2048;
            uint64_t v35 = 0x400EB851EB851EB8;
            __int16 v36 = 2048;
            double v37 = v6;
            __int16 v38 = 2048;
            uint64_t v39 = v5;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: Type,Constraint,CFAbsoluteTime,%.3lf,Duration,%.3lf,LowerBound,%.3lf,UpperBound,%.3lf", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
            *(_DWORD *)long long v25 = 134218752;
            *(CFAbsoluteTime *)&v25[4] = Current;
            *(_WORD *)&unsigned char v25[12] = 2048;
            *(void *)&unsigned char v25[14] = 0x400EB851EB851EB8;
            *(_WORD *)&v25[22] = 2048;
            double v26 = v6;
            __int16 v27 = 2048;
            uint64_t v28 = v5;
            uint64_t v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::SendPedometerAssistanceCommand()", "%s\n", v20);
            if (v20 != (char *)buf) {
              free(v20);
            }
          }
          sub_10151AE28(*(void *)(a1 + 8) + 1288);
          goto LABEL_35;
        }
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134349312;
        CFAbsoluteTime v33 = v6;
        __int16 v34 = 2050;
        uint64_t v35 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Pedometer Assistance: pedometerSpeedMinBound %{public}.3lf >= pedometerSpeedMaxBound %{public}.3lf", buf, 0x16u);
      }
      BOOL v15 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v15)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        *(_DWORD *)long long v25 = 134349312;
        *(double *)&v25[4] = v6;
        *(_WORD *)&unsigned char v25[12] = 2050;
        *(void *)&unsigned char v25[14] = v5;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGNSSPedometerAssistanceController::PedometerAssistanceActiveState::SendPedometerAssistanceCommand()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10151AE28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void sub_10151AE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 257;
  *(unsigned char *)(a1 + 5_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 64) = off_10232C0E8;
  *(void *)(a1 + 72) = a1;
  *(void *)(a1 + 80) = off_10232C148;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x310], 8) = a1;
  *(void *)(a1 + 96) = off_10232C1A8;
  *(void *)(a1 + 104) = a1;
  *(void *)(a1 + 112) = off_10232C208;
  *(void *)(a1 + 120) = a1;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 32_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(unsigned char *)(a1 + 1232) = 0;
  *(unsigned char *)(a1 + 1240) = 0;
  *(unsigned char *)(a1 + 124_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(void *)(a1 + 1312) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(unsigned char *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: constructing GNSSPedometerAssistanceController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    LOWORD(v26) = 0;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (*(void *)a1)
  {
    if (*(void *)(a3 + 24))
    {
      if (*(void *)(a4 + 24))
      {
        int v25 = 0;
        sub_1000C7F88(buf);
        int v8 = sub_10006EF84(*(uint64_t *)buf, "GpsEnablePedometerAssistanceCommands", &v25);
        if (v29) {
          sub_1000DB0A0(v29);
        }
        if (v8)
        {
          *(unsigned char *)(a1 + 56) = v25 == 1;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232C2C8);
          }
          uint64_t v9 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            int v10 = *(unsigned __int8 *)(a1 + 56);
            *(_DWORD *)int buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: GpsEnablePedometerAssistanceCommands,%d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
            int v19 = *(unsigned __int8 *)(a1 + 56);
            int v26 = 67109120;
            int v27 = v19;
            uint64_t v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v20);
            if (v20 != (char *)buf) {
              free(v20);
            }
          }
        }
        if (!*(unsigned char *)(a1 + 56))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232C2C8);
          }
          char v12 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer assistance commands disabled", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
            goto LABEL_75;
          }
LABEL_30:
          int v25 = 0;
          sub_1000C7F88(buf);
          int v13 = sub_10006EF84(*(uint64_t *)buf, "GpsEnablePedometerConstraintAssistanceCommands", &v25);
          if (v29) {
            sub_1000DB0A0(v29);
          }
          if (v13)
          {
            *(unsigned char *)(a1 + 57) = v25 == 1;
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
            uint64_t v14 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v15 = *(unsigned __int8 *)(a1 + 57);
              *(_DWORD *)int buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v15;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: GpsEnablePedometerConstraintAssistanceCommands,%d", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10232C2C8);
              }
              int v21 = *(unsigned __int8 *)(a1 + 57);
              int v26 = 67109120;
              int v27 = v21;
              double v22 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v22);
              if (v22 != (char *)buf) {
                free(v22);
              }
            }
          }
          if (*(unsigned char *)(a1 + 57))
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
            uint64_t v16 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer constraint assistance commands enabled", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10232C2C8);
              }
LABEL_80:
              LOWORD(v26) = 0;
              double v24 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v24);
              if (v24 != (char *)buf) {
                free(v24);
              }
            }
          }
          else
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
            long long v17 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer constraint assistance commands disabled", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10232C2C8);
              }
              goto LABEL_80;
            }
          }
          *(unsigned char *)(a1 + 5_Block_object_dispose(&STACK[0x310], 8) = 0;
          sub_100681630();
        }
        if (qword_1024193D0 == -1)
        {
LABEL_19:
          double v11 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: pedometer assistance commands enabled", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232C2C8);
            }
LABEL_75:
            LOWORD(v26) = 0;
            double v23 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::CLGNSSPedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v23);
            if (v23 != (char *)buf) {
              free(v23);
            }
            goto LABEL_30;
          }
          goto LABEL_30;
        }
LABEL_62:
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        goto LABEL_19;
      }
      sub_101ABA7A4(buf);
    }
    else
    {
      sub_101ABA900(buf);
    }
  }
  else
  {
    sub_101ABAA5C(buf);
  }
  abort_report_np();
  __break(1u);
  goto LABEL_62;
}

void sub_10151BF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  sub_1008555F4(a20);
  sub_100855374(a21);
  if (*(unsigned char *)(v21 + 1232))
  {
    int v25 = *(std::__shared_weak_count **)(v21 + 1120);
    if (v25) {
      sub_1000DB0A0(v25);
    }
  }
  sub_10151EEF8(a15);
  sub_1006AA34C(a16);
  sub_10151EEA8(v23, 0);
  *(void *)(v21 + 112) = &off_10232C088;
  *(void *)(v21 + 96) = &off_10232C088;
  *(void *)(v21 + 80) = &off_10232C088;
  *(void *)(v21 + 64) = &off_10232C088;
  uint64_t v26 = *(void *)(v21 + 48);
  *(void *)(v21 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void *)(v21 + 40);
  *(void *)(v21 + 40) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(v21 + 32);
  *(void *)(v21 + 32) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *(void *)(v21 + 24);
  *(void *)(v21 + 24) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void *)(v21 + 16);
  *(void *)(v21 + 16) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *v22;
  *double v22 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  _Unwind_Resume(a1);
}

void sub_10151C1A8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10151E0EC((uint64_t)a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10151C35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10151C37C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10151E2C0((uint64_t)a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10151C530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10151C550(uint64_t a1, _DWORD *a2, uint64_t *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10151E490((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10151C70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10151C72C(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10151E6D4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10151C8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10151C908(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10151E8C8((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10151CAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10151CAE4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10151EA9C((uint64_t)a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10151CC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10151CCB8(void *a1, uint64_t a2)
{
  sub_100855678((uint64_t)v4, a2);
  sub_10151F040(v4, a1);
  sub_100855374(v4);
  return a1;
}

void *sub_10151CD2C(void *a1, uint64_t a2)
{
  sub_100855710((uint64_t)v4, a2);
  sub_10151F2AC(v4, a1);
  sub_1008555F4(v4);
  return a1;
}

void *sub_10151CDA0(void *result)
{
  void *result = &off_10232C088;
  return result;
}

uint64_t sub_10151CDC0(uint64_t a1)
{
  sub_101518FE0(a1, a1 + 64);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: destructing GNSSPedometerAssistanceController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGNSSPedometerAssistanceController::~CLGNSSPedometerAssistanceController()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_1008555F4((void *)(a1 + 1288));
  sub_100855374((void *)(a1 + 1256));
  if (*(unsigned char *)(a1 + 1232))
  {
    BOOL v3 = *(std::__shared_weak_count **)(a1 + 1120);
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  sub_10151EEF8((void *)(a1 + 384));
  sub_1006AA34C((void *)(a1 + 336));
  sub_10151EEA8((uint64_t **)(a1 + 136), 0);
  *(void *)(a1 + 112) = &off_10232C088;
  *(void *)(a1 + 96) = &off_10232C088;
  *(void *)(a1 + 80) = &off_10232C088;
  *(void *)(a1 + 64) = &off_10232C088;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

void sub_10151D140(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10151D150(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: resetting GNSSPedometerAssistanceController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    *(_WORD *)uint64_t v8 = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::Reset()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = a1 + 64;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  BOOL v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 128) + 56))(buf);
    uint64_t v4 = v13 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)&uint64_t v8[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: entering %s", v8, 0xCu);
    if (v13 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 128) + 56))(v8);
    if (v9 >= 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = *(unsigned char **)v8;
    }
    int v10 = 136315138;
    char v11 = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    if (v9 < 0) {
      operator delete(*(void **)v8);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::Reset()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1004B5FCC();
}

void sub_10151D588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1004B6020((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10151D5A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = a1;
  int v11 = 0;
  sub_1000C7F88(buf);
  int v3 = sub_10006EF84(*(uint64_t *)buf, "GpsEnablePedometerAssistance", &v11);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (!v3) {
    goto LABEL_37;
  }
  int v4 = v11;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4 == 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: GpsEnablePedometerAssistance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v13 = 67109120;
    BOOL v14 = v4 == 1;
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGNSSPedometerAssistanceController> CLGNSSPedometerAssistanceController::CreatePedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (v4 == 1)
  {
LABEL_37:
    if (sub_10015F760())
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: feature enabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232C2C8);
        }
        LOWORD(v13) = 0;
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGNSSPedometerAssistanceController> CLGNSSPedometerAssistanceController::CreatePedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      sub_10151DA54();
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: feature disabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    LOWORD(v13) = 0;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGNSSPedometerAssistanceController> CLGNSSPedometerAssistanceController::CreatePedometerAssistanceController(id<CLIntersiloUniverse>, SendPedometerAssistanceCommand, SendPedometerConstraintAssistanceCommand)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *a2 = 0;
}

void sub_10151DA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10151DA54()
{
}

void sub_10151DB24(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1008555F4((uint64_t *)va);
  sub_100855374((uint64_t *)va1);
  operator delete();
}

void sub_10151DB68(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 128) + 56))(&__s1);
  sub_100134750(__p, "PedometerAssistanceDisabledState");
  unsigned __int8 v2 = v22;
  if ((v22 & 0x80u) == 0) {
    size_t v3 = v22;
  }
  else {
    size_t v3 = __n;
  }
  unint64_t v4 = v19;
  int v5 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != v4)
  {
    BOOL v15 = 0;
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((char)v22 < 0)
  {
    BOOL v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    uint64_t v7 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v6;
      uint64_t v6 = (void **)((char *)v6 + 1);
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  BOOL v15 = 1;
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    operator delete(__s1);
    if (v15) {
      return;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v22 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (v15) {
    return;
  }
LABEL_29:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  __int16 v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received external feature disable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    LOWORD(__p[0]) = 0;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::DisablePedometerAssistance()", "%s\n", v17);
    if (v17 != (char *)&__s1) {
      free(v17);
    }
  }
  sub_101518FE0(a1, a1 + 64);
}

void sub_10151DE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10151DE2C(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 128) + 56))(&__s1);
  sub_100134750(__p, "PedometerAssistanceDisabledState");
  unsigned __int8 v2 = v20;
  if ((v20 & 0x80u) == 0) {
    size_t v3 = v20;
  }
  else {
    size_t v3 = __n;
  }
  unint64_t v4 = v17;
  int v5 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != v4)
  {
    BOOL v12 = 1;
    if (((char)v17 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((char)v20 < 0)
  {
    BOOL v12 = memcmp(__s1, v6, __n) != 0;
    goto LABEL_22;
  }
  if (v20)
  {
    uint64_t v7 = v20 - 1;
    p_s1 = &__s1;
    do
    {
      int v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v9 = v10;
      int v11 = *(unsigned __int8 *)v6;
      uint64_t v6 = (void **)((char *)v6 + 1);
      BOOL v12 = v9 != v11;
    }
    while (v9 == v11 && v7-- != 0);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  BOOL v12 = 0;
  if (((char)v17 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    operator delete(__s1);
    if (v12) {
      return;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v20 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (v12) {
    return;
  }
LABEL_29:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
  BOOL v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received external feature enable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    LOWORD(__p[0]) = 0;
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::EnablePedometerAssistance()", "%s\n", v15);
    if (v15 != (char *)&__s1) {
      free(v15);
    }
  }
  sub_101518FE0(a1, a1 + 80);
}

void sub_10151E0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10151E0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128), a4, a4 + 160);
  if ((result & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: failed to handle location notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_101518FE0(a1, a1 + 80);
  }
  return result;
}

uint64_t sub_10151E2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), a4);
  if ((result & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: failed to handle motion state notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_101518FE0(a1, a1 + 80);
  }
  return result;
}

void sub_10151E490(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  if (!*a3)
  {
    int v6 = *((_DWORD *)a4 + 2);
    if (!v6 || v6 == 71 || (*a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)a4 <= 0.0) {
      *(unsigned char *)(a1 + 144) = 0;
    }
    else {
      *(unsigned char *)(a1 + 144) = CLMotionActivity::isTypePedestrian() ^ 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *((_DWORD *)a4 + 2);
      uint64_t v9 = *a4;
      int v10 = *(unsigned __int8 *)(a1 + 144);
      *(_DWORD *)int buf = 67109632;
      int v13 = v8;
      __int16 v14 = 2048;
      uint64_t v15 = v9;
      __int16 v16 = 1024;
      int v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: fitnessSession,%d,startTime,%.3lf,nonPedestrianFitnessSession,%d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_10151E6D4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    *(unsigned char *)(a1 + 145) = *(_DWORD *)(a4 + 40) != 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a4 + 40);
      int v8 = *(unsigned __int8 *)(a1 + 145);
      *(_DWORD *)int buf = 67109376;
      int v11 = v7;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: condition,%d,nonPedestrianUserMotion,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleNatalimetryNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_10151E8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 128) + 40))(*(void *)(a1 + 128), a3, a4);
  if ((result & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: failed to handle status notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_101518FE0(a1, a1 + 80);
  }
  return result;
}

uint64_t sub_10151EA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 128) + 48))(*(void *)(a1 + 128), a4);
  if ((result & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232C2C8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: failed to handle step count notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_101518FE0(a1, a1 + 80);
  }
  return result;
}

__n128 sub_10151EC6C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10151F518(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = *(void *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8));
  unsigned int v9 = v7 & 0xF;
  uint64_t v10 = v8 + 800 * (v7 & 0xF);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v11;
  long long v12 = *(_OWORD *)(a2 + 32);
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 80) = v14;
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 4_Block_object_dispose(&STACK[0x310], 8) = v13;
  long long v15 = *(_OWORD *)(a2 + 96);
  long long v16 = *(_OWORD *)(a2 + 112);
  long long v17 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v10 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(v10 + 112) = v16;
  *(_OWORD *)(v10 + 12_Block_object_dispose(&STACK[0x310], 8) = v17;
  *(_OWORD *)(v10 + 96) = v15;
  memcpy((void *)(v10 + 160), (const void *)(a2 + 160), 0x201uLL);
  *(void *)(v10 + 680) = *(void *)(a2 + 680);
  uint64_t v18 = *(void *)(a2 + 688);
  *(void *)(v10 + 68_Block_object_dispose(&STACK[0x310], 8) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = v8 + 800 * v9 + 696;
  long long v20 = *(_OWORD *)(a2 + 696);
  long long v21 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(v19 + 32) = v21;
  *(_OWORD *)uint64_t v19 = v20;
  __n128 result = *(__n128 *)(a2 + 744);
  long long v23 = *(_OWORD *)(a2 + 760);
  long long v24 = *(_OWORD *)(a2 + 776);
  *(void *)(v19 + 93) = *(void *)(a2 + 789);
  *(_OWORD *)(v19 + 64) = v23;
  *(_OWORD *)(v19 + 80) = v24;
  *(__n128 *)(v19 + 4_Block_object_dispose(&STACK[0x310], 8) = result;
  ++a1[5];
  return result;
}

uint64_t sub_10151EDA0(void *a1)
{
  unint64_t v2 = a1[4];
  size_t v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + ((v2 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 800 * (v2 & 0xF) + 688);
  if (v3)
  {
    sub_1000DB0A0(v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;

  return sub_100A32A04((uint64_t)a1, 1);
}

void sub_10151EE18(void *a1)
{
  *a1 = &off_10232C088;
  operator delete();
}

void sub_10151EE48(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10151EE78(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t *sub_10151EEA8(uint64_t **a1, uint64_t *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1004B6020(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10151EEF8(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  size_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    size_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 4];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 800 * (v5 & 0xF);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 800 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 688);
        if (v10)
        {
          sub_1000DB0A0(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 800;
        if (v8 - v7 == 12800)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      unint64_t v2 = (void **)a1[1];
      size_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      size_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 8;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 16;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    long long v15 = *v2++;
    operator delete(v15);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void *sub_10151F040(void *result, void *a2)
{
  if (a2 != result)
  {
    size_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10151F2A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10151F2AC(void *result, void *a2)
{
  if (a2 != result)
  {
    size_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10151F50C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10151F518(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x3200uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x3200uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x3200uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10151F7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10151F830()
{
  unint64_t v2 = *(NSObject **)(v0 + 984);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_10151F84C()
{
  unint64_t v2 = *(NSObject **)(v0 + 984);
  return os_signpost_enabled(v2);
}

void sub_10151F864()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0FB98;
      v0[3] = unk_101E0FBA8;
      v0[4] = xmmword_101E0FBB8;
      v0[0] = xmmword_101E0FB78;
      v0[1] = unk_101E0FB88;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10151F944(_Unwind_Exception *a1)
{
}

uint64_t sub_10151F95C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488778, (void *)&_mh_execute_header);
}

std::string *sub_10151F9B0@<X0>(std::string *a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  return std::string::operator=(a3 + 3, a2);
}

void sub_10151F9E4(_Unwind_Exception *a1)
{
  sub_1000064D0(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10151F9F8(void **a1)
{
  char v1 = *((unsigned char *)a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v2 = (uint64_t)a1[1];
  }
  if (v1 >= 0) {
    BOOL v3 = (char *)a1;
  }
  else {
    BOOL v3 = (char *)*a1;
  }
  unint64_t v4 = &v3[v2];
  if (v2 >= 31)
  {
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 99, v5 - 30);
      if (!v7) {
        break;
      }
      if (*(void *)v7 == 0x6C7070612E6D6F63
        && *((void *)v7 + 1) == 0x697461636F6C2E65
        && *((void *)v7 + 2) == 0x636578652E646E6FLL
        && *(void *)(v7 + 23) == 0x2D656C6261747563)
      {
        if (v7 != v4 && v7 == v3) {
          return 0;
        }
        break;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v5 = v4 - v6;
    }
    while (v4 - v6 >= 31);
  }
  if (v2 >= 27)
  {
    uint64_t v12 = v3;
    do
    {
      uint64_t v13 = (char *)memchr(v12, 99, v2 - 26);
      if (!v13) {
        break;
      }
      if (*(void *)v13 == 0x6C7070612E6D6F63
        && *((void *)v13 + 1) == 0x697461636F6C2E65
        && *((void *)v13 + 2) == 0x646E75622E646E6FLL
        && *(void *)(v13 + 19) == 0x2D656C646E75622ELL)
      {
        return v13 == v4 || v13 != v3;
      }
      uint64_t v12 = v13 + 1;
      uint64_t v2 = v4 - v12;
    }
    while (v4 - v12 > 26);
  }
  uint64_t v13 = v4;
  return v13 == v4 || v13 != v3;
}

void *sub_10151FB90@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "root");
}

void *sub_10151FBA0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "none");
}

uint64_t sub_10151FBB0(int *a1)
{
  uint64_t v2 = 0;
  uint64_t result = 0;
  int v4 = *a1;
  while (dword_101E0FD8C[v2] != v4)
  {
    uint64_t result = (result + 1);
    if (++v2 == 9) {
      sub_101ABAFF8();
    }
  }
  return result;
}

uint64_t sub_10151FBFC(unsigned int a1)
{
  if (a1 >= 9) {
    sub_101ABB1C8();
  }
  return dword_101E0FD8C[a1];
}

void sub_10151FC28(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101520468(void *a1, char a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232C398);
    }
    int v4 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[4];
      uint64_t v6 = a1[5];
      uint64_t v7 = a1[6];
      *(_DWORD *)int buf = 138543875;
      uint64_t v12 = v5;
      __int16 v13 = 2114;
      uint64_t v14 = v6;
      __int16 v15 = 2049;
      uint64_t v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HealthKitWriter: successfully pushed steadiness sample to HealthKit, startDate: %{public}@, endDate:%{public}@, walkingSteadiness: %{private}f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232C398);
      }
      uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:]_block_invoke", "%s\n");
LABEL_19:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232C398);
    }
    uint64_t v10 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138543362;
      uint64_t v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "HealthKitWriter: failed to push steadiness sample to HealthKit, error, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232C398);
      }
      uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityHealthKitWriter writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:]_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_101520D08(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232C398);
    }
    BOOL v3 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully pushed WalkingSteadinessEvent sample", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232C398);
      }
      int v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter writeSteadinessEvent:startDate:endDate:source:]_block_invoke", "%s\n");
LABEL_19:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232C398);
    }
    uint64_t v6 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138543362;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to insert WalkingSteadinessEvent sample: %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232C398);
      }
      int v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityHealthKitWriter writeSteadinessEvent:startDate:endDate:source:]_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_101521810(uint64_t a1, int a2, std::string::size_type a3)
{
  if (a2)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_10232C378);
    }
    int v4 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
    {
      sub_101136C9C(*(_DWORD *)(a1 + 32), __p);
      uint64_t v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector successfully pushed %s sample", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_10232C378);
      }
      sub_101136C9C(*(_DWORD *)(a1 + 32), &buf);
      uint64_t v6 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter _writeToHealthKitType:value:startDate:endDate:metadata:]_block_invoke", "%s\n", (const char *)v6);
LABEL_31:
      if (v6 != __p) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_10232C378);
    }
    uint64_t v8 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      sub_101136C9C(*(_DWORD *)(a1 + 32), __p);
      uint64_t v9 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKDataCollector failed to insert a %s sample, error, %{public}@", (uint8_t *)&buf, 0x16u);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_10232C378);
      }
      sub_101136C9C(*(_DWORD *)(a1 + 32), &buf);
      uint64_t v6 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityHealthKitWriter _writeToHealthKitType:value:startDate:endDate:metadata:]_block_invoke", "%s\n", (const char *)v6);
      goto LABEL_31;
    }
  }
}

void sub_101522380(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(v1 + 16);
    v2();
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_10232C378);
    }
    BOOL v3 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "HealthKitWriter: Data collection completion was nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_10232C378);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityHealthKitWriter dataCollectorDidRequestCollectionThroughDate:completion:]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10152255C(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_10152258C(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_101522698()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 12320) = v2;
    operator delete(v2);
  }
  operator delete();
}

id sub_1015226D4(long long *a1, void *a2)
{
  long long v3 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  return [a2 onResultAvailable:&v3];
}

uint64_t sub_101522948(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  sub_101522998(a1, a2);
  return a1;
}

void sub_10152297C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x310], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101522998(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1015229D4((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = *(void *)a1 + 48 * a2;
  }
}

void sub_1015229D4(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_10014F86C(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[48 * v8];
    __int16 v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 2);
        *(_OWORD *)(v14 - 20) = *(_OWORD *)(v18 - 20);
        *((_OWORD *)v14 - 3) = v20;
        *((_OWORD *)v14 - 2) = v21;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *sub_101522B64@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  switch(*a1)
  {
    case 0:
      BOOL v3 = "Unknown";
      goto LABEL_13;
    case 1:
      BOOL v3 = "System";
      goto LABEL_13;
    case 2:
      BOOL v3 = "Register";
      goto LABEL_13;
    case 3:
      BOOL v3 = "Unregister";
      goto LABEL_13;
    case 4:
      BOOL v3 = "Notification";
LABEL_13:
      uint64_t result = sub_100134750(a2, v3);
      break;
    default:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10232C3D0);
      }
      uint64_t v5 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        int v6 = *a1;
        *(_DWORD *)std::string buf = 67109120;
        int v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#locctl,#rec,messageTypeToString,unhandled type,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10232C3D0);
        }
        unint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string CLLocationControllerRecorder_Types::messageTypeToString(const CLLocationControllerRecorder_Types::MessageType &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      uint64_t result = sub_100134750(a2, "<error>");
      break;
  }
  return result;
}

void *sub_101522E48@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  switch(*a1)
  {
    case 0:
      BOOL v3 = "Unknown";
      goto LABEL_29;
    case 1:
      BOOL v3 = "Client";
      goto LABEL_29;
    case 2:
      BOOL v3 = "DaemonStatus";
      goto LABEL_29;
    case 3:
      BOOL v3 = "ClientManager";
      goto LABEL_29;
    case 4:
      BOOL v3 = "WifiService";
      goto LABEL_29;
    case 5:
      BOOL v3 = "DataProtectionManager";
      goto LABEL_29;
    case 6:
      BOOL v3 = "BluetoothService";
      goto LABEL_29;
    case 7:
      BOOL v3 = "CompanionNotifier";
      goto LABEL_29;
    case 8:
      BOOL v3 = "MotionState";
      goto LABEL_29;
    case 9:
      BOOL v3 = "MotionStateObserver";
      goto LABEL_29;
    case 10:
      BOOL v3 = "SignalEnvironmentProvider";
      goto LABEL_29;
    case 11:
      BOOL v3 = "TelephonyService";
      goto LABEL_29;
    case 12:
      BOOL v3 = "AppMonitor";
      goto LABEL_29;
    case 13:
      BOOL v3 = "WifiLocationProvider";
      goto LABEL_29;
    case 14:
      BOOL v3 = "CellLocationProvider";
      goto LABEL_29;
    case 15:
      BOOL v3 = "GnssLocationProvider";
      goto LABEL_29;
    case 16:
      BOOL v3 = "PipelineLocationProvider";
      goto LABEL_29;
    case 17:
      BOOL v3 = "Wifi2LocationProvider";
      goto LABEL_29;
    case 18:
      BOOL v3 = "AccessoryLocationProvider";
      goto LABEL_29;
    case 19:
      BOOL v3 = "SimulatedLocationProvider";
      goto LABEL_29;
    case 20:
      BOOL v3 = "LoiLocationProvider";
      goto LABEL_29;
    case 21:
      BOOL v3 = "LocationController";
      goto LABEL_29;
    case 22:
      BOOL v3 = "OutdoorService";
      goto LABEL_29;
    case 23:
      BOOL v3 = "RoutineVisit";
      goto LABEL_29;
    case 24:
      BOOL v3 = "InertialOdometry";
      goto LABEL_29;
    case 25:
      BOOL v3 = "MotionStateMediator";
      goto LABEL_29;
    case 26:
      BOOL v3 = "MapRouteHintService";
LABEL_29:
      uint64_t result = sub_100134750(a2, v3);
      break;
    default:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10232C3D0);
      }
      int v6 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        int v7 = *a1;
        *(_DWORD *)std::string buf = 67109120;
        int v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#locctl,#rec,serviceTypeToString,unhandled type,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10232C3D0);
        }
        unint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string CLLocationControllerRecorder_Types::serviceTypeToString(const CLLocationControllerRecorder_Types::ServiceType &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      uint64_t result = sub_100134750(a2, "<error>");
      break;
  }
  return result;
}

void sub_10152349C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1015234CC()
{
}

id sub_101523528(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLDaemonStatus"];

  return [v1 syncgetReachability];
}

BOOL sub_101523560()
{
  return (sub_1000A16E8() & 0x6000000000000) != 0;
}

uint64_t sub_101523584()
{
  sub_100103240();
  unint64_t v0 = sub_1000A16E8();
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  id v1 = qword_102419108;
  uint64_t v2 = (v0 >> 49) & 1;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "CLKappaNotifier can detect %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier_canDetect()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v2;
}

uint64_t sub_101523740(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1015237D0;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102488790 != -1) {
    dispatch_once(&qword_102488790, block);
  }
  return qword_10248D798;
}

void sub_1015237D0()
{
}

void sub_10152381C()
{
}

void sub_101523840(uint64_t a1, void *a2)
{
  sub_101524710(a1, "CLKappaNotifier", a2);
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  uint64_t v3 = qword_102419108;
  *(void *)(a1 + 112) = &qword_10248D420;
  *(void *)(a1 + 120) = v3;
  *(void *)a1 = off_10232C450;
  sub_1013C3358((uint64_t *)(a1 + 128), (uint64_t)"idle", (uint64_t)&qword_10248D420);
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = off_10232C668;
  *(void *)(a1 + 176) = a1;
  sub_1013C3358((uint64_t *)(a1 + 184), (uint64_t)"armed", (uint64_t)&qword_10248D420);
  *(void *)(a1 + 184) = off_10232C6C8;
  *(void *)(a1 + 232) = a1;
  sub_101536E58((uint64_t *)(a1 + 240), a1);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 310) = 0;
  *(void *)(a1 + 320) = [*(id *)(a1 + 40) newTimer];
  *(_WORD *)(a1 + 32_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(unsigned char *)(a1 + 330) = 0;
  *(void *)(a1 + 336) = off_1022B6DB8;
  uint64_t v4 = operator new(0x20uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = off_1022B6DF0;
  *((_DWORD *)v4 + 6) = 31337;
  *(void *)(a1 + 344) = v4 + 3;
  *(void *)(a1 + 352) = v4;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 392) = "com.apple.igneous.enableIgneous";
  *(void *)(a1 + 400) = "com.apple.igneous.disableIgneousWithDelay";
  *(void *)(a1 + 40_Block_object_dispose(&STACK[0x310], 8) = "com.apple.igneous.enableIgneousWithDelay";
  *(_WORD *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 41_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 420) = 0x5A000000000;
  sub_10044FD20((unsigned __int8 *)&v5, "IgneousMaxMotionTriggerCount", dword_101E0FEE0, 0);
  *(_DWORD *)(a1 + 42_Block_object_dispose(&STACK[0x310], 8) = HIDWORD(v5);
  *(void *)(a1 + 432) = 0x40A7700000000000;
  sub_101A1F180((unsigned __int8 *)&v5, "IgneousScheduledEnableRenewPeriod", &qword_101E0FEE8, 0);
  *(void *)(a1 + 440) = v6;
  sub_101A1F180((unsigned __int8 *)&v5, "IgneousCheckSaewEnablementCadence", &qword_101E0FEF0, 0);
  *(void *)(a1 + 44_Block_object_dispose(&STACK[0x310], 8) = v6;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 48_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(unsigned char *)(a1 + 504) = 14;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 505) = 0;
  *(unsigned char *)(a1 + 520) = 30;
  *(void *)(a1 + 521) = 0;
  *(_DWORD *)(a1 + 529) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 56_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(void *)(a1 + 584) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  sub_1013C3510((void *)(a1 + 112), (void *)(a1 + 128));
  sub_1015247BC(a1);
  if (sub_1000D2E34(0)) {
    operator new();
  }
  if (objc_opt_class()) {
    operator new();
  }
  sub_100561580();
}

void sub_10152437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v18 = v12[76];
  v12[76] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *v14;
  *uint64_t v14 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v12[72];
  v12[72] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v12[71];
  v12[71] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v12[70];
  v12[70] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v12[69];
  v12[69] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v12[68];
  v12[68] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *v13;
  uint64_t *v13 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v12[62];
  v12[62] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *v16;
  *size_t v16 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_1015380B8(v15, 0);
  sub_10012E38C(a12);
  v12[30] = off_1023236F8;
  uint64_t v28 = (void *)v12[32];
  if (v28)
  {
    v12[33] = v28;
    operator delete(v28);
  }
  v12[23] = off_1023236F8;
  uint64_t v29 = (void *)v12[25];
  if (v29)
  {
    v12[26] = v29;
    operator delete(v29);
  }
  v12[16] = off_1023236F8;
  long long v30 = (void *)v12[18];
  if (v30)
  {
    v12[19] = v30;
    operator delete(v30);
  }
  sub_101525D1C((uint64_t)v12);
  _Unwind_Resume(a1);
}

uint64_t sub_101524710(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10232C828;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = 0;
  return a1;
}

void sub_1015247A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015247BC(uint64_t a1)
{
  sub_1001B26D4(a1);
  sub_1015370FC(a1, 0);
  if (qword_102419320 != -1) {
    dispatch_once(&qword_102419320, &stru_10232C798);
  }
  uint64_t v2 = qword_102419328;
  if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "initialize Igneous arm status,0", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    LOWORD(v23) = 0;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::initIgneousConfig()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v22 = 0;
  uint64_t v3 = sub_1000A6958();
  sub_10016332C(v3, "CLIgneousArmSessionStartTime", &v22);
  uint64_t v4 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v4 + 944))();
  int v21 = -1;
  uint64_t v5 = sub_1000A6958();
  sub_10006EF84(v5, "CLIgneousMaxArmMinutes", &v21);
  int v6 = v21;
  if (v21 < 0) {
    int v6 = 1440;
  }
  *(_DWORD *)(a1 + 424) = v6;
  sub_10044FD20(buf, "IgneousMaxArmMinutes", (_DWORD *)(a1 + 424), 0);
  *(_DWORD *)(a1 + 424) = v30;
  double v20 = -1.0;
  uint64_t v7 = sub_1000A6958();
  sub_1000A699C(v7, "CLIgneousMaxScheduledArmSec", &v20);
  double v8 = v20;
  if (v20 <= -1.0) {
    double v8 = 3000.0;
  }
  *(double *)(a1 + 432) = v8;
  sub_101A1F180(buf, "IgneousMaxScheduledArmSec", (void *)(a1 + 432), 0);
  *(void *)(a1 + 432) = *(void *)v31;
  int v19 = -1;
  uint64_t v9 = sub_1000A6958();
  sub_10006EF84(v9, "CLIgneousMotionTriggerCount", &v19);
  *(_DWORD *)(a1 + 420) = v19 & ~(v19 >> 31);
  if (qword_102419320 != -1) {
    dispatch_once(&qword_102419320, &stru_10232C798);
  }
  int v10 = qword_102419328;
  if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(a1 + 424);
    uint64_t v12 = *(void *)(a1 + 432);
    int v13 = *(_DWORD *)(a1 + 420);
    *(_DWORD *)std::string buf = 67109632;
    int v30 = v11;
    *(_WORD *)long long v31 = 2048;
    *(void *)&v31[2] = v12;
    __int16 v32 = 1024;
    int v33 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "initialize Igneous maxArmMin,%d,maxScheduledArmSec,%f,motionTriggerCount,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    int v15 = *(_DWORD *)(a1 + 424);
    uint64_t v16 = *(void *)(a1 + 432);
    int v17 = *(_DWORD *)(a1 + 420);
    int v23 = 67109632;
    int v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v16;
    __int16 v27 = 1024;
    int v28 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::initIgneousConfig()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
}

void sub_101524C14(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onAOP", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onAOP\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10152936C(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101524DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101524DE8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101529C70(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101524FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101524FC4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onPressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onPressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101529874((char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101525180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015251A0(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101529AAC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10152535C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10152537C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onUserInfoNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onUserInfoNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10152AF50(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101525538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101525558(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10152DD70(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101525714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101525734(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10152B7B0((unsigned char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015258F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101525910(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    int v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    __int16 v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::string buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_10152B170(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_101525AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101525AE8(uint64_t a1)
{
}

void sub_101525AF0(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: Self::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Self::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10152B3DC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101525CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101525CCC(void *a1)
{
  *a1 = off_1023236F8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_101525D1C(uint64_t a1)
{
  *(void *)a1 = off_10232C828;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101525DA0(uint64_t a1)
{
  *(void *)a1 = off_10232C450;
  sub_1015260B8(a1);
  uint64_t v2 = *(void *)(a1 + 608);
  *(void *)(a1 + 60_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 600);
  *(void *)(a1 + 600) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 568);
  *(void *)(a1 + 56_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 480);
  *(void *)(a1 + 480) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_1015380B8((id **)(a1 + 360), 0);
  sub_10012E38C((void *)(a1 + 336));
  *(void *)(a1 + 240) = off_1023236F8;
  char v12 = *(void **)(a1 + 256);
  if (v12)
  {
    *(void *)(a1 + 264) = v12;
    operator delete(v12);
  }
  *(void *)(a1 + 184) = off_1023236F8;
  int v13 = *(void **)(a1 + 200);
  if (v13)
  {
    *(void *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = v13;
    operator delete(v13);
  }
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = off_1023236F8;
  __int16 v14 = *(void **)(a1 + 144);
  if (v14)
  {
    *(void *)(a1 + 152) = v14;
    operator delete(v14);
  }

  return sub_101525D1C(a1);
}

void sub_101526080(uint64_t a1)
{
  sub_101525DA0(a1);

  operator delete();
}

void sub_1015260B8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 496) + 16) unregister:*(void *)(*(void *)(a1 + 496) + 8) forNotification:0];
  if (sub_1000D2E34(0))
  {
    uint64_t v2 = sub_1000D2E34(0);
    sub_1009D26C4(v2, 29, *(void *)(a1 + 488));
    *(void *)(a1 + 48_Block_object_dispose(&STACK[0x310], 8) = 0;
  }
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = 1;
}

void *sub_101526114@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101526190()
{
  long long v37 = xmmword_101E0FEF8;
  long long v38 = unk_101E0FF08;
  *(_OWORD *)uint64_t v39 = xmmword_101E0FF18;
  *(_OWORD *)&v39[12] = *(long long *)((char *)&xmmword_101E0FF18 + 12);
  sub_1000E9354(v36);
  uint64_t v0 = sub_1000A6958();
  if (sub_100012960(v0, "Kappa", v36))
  {
    uint64_t v1 = (void *)sub_1000E9358((uint64_t)v36);
    id v2 = [v1 valueForKey:@"coupled"];
    id v3 = [v1 valueForKey:@"uncoupled"];
    id v4 = [v1 valueForKey:@"skiLiftWindowSec"];
    id v5 = [v1 valueForKey:@"mPlanarMaxRMSThreshold"];
    id v6 = [v1 valueForKey:@"mPlanarEnergyThreshold"];
    id v7 = [v1 valueForKey:@"mPlanarChaosThreshold"];
    id v8 = [v1 valueForKey:@"mPlanarSaturationThreshold"];
    id v9 = [v1 valueForKey:@"mRolloverMaxRMSThreshold"];
    id v10 = [v1 valueForKey:@"mRolloverEnergyThreshold"];
    id v35 = [v1 valueForKey:@"mRolloverChaosThreshold"];
    id v34 = [v1 valueForKey:@"mRolloverSaturationThreshold"];
    if (v2)
    {
      [v2 floatValue];
      DWORD1(v37) = v11;
    }
    if (v3)
    {
      [v3 floatValue];
      DWORD2(v37) = v12;
    }
    if (v4) {
      WORD6(v37) = (unsigned __int16)[v4 unsignedShortValue];
    }
    if (v5)
    {
      [v5 floatValue];
      HIDWORD(v3_Block_object_dispose(&STACK[0x310], 8) = v13;
    }
    if (v6)
    {
      [v6 floatValue];
      *(_DWORD *)uint64_t v39 = v14;
    }
    if (v7)
    {
      [v7 floatValue];
      *(_DWORD *)&v39[4] = v15;
    }
    if (v8)
    {
      [v8 floatValue];
      *(_DWORD *)&char v39[8] = v16;
    }
    if (v9)
    {
      [v9 floatValue];
      *(_DWORD *)&v39[12] = v17;
    }
    if (v10)
    {
      [v10 floatValue];
      *(_DWORD *)&v39[16] = v18;
    }
    if (v35)
    {
      [v35 floatValue];
      *(_DWORD *)&v39[20] = v19;
    }
    if (v34)
    {
      [v34 floatValue];
      *(_DWORD *)&v39[24] = v20;
    }
    id v21 = [v1 valueForKey:@"kill"];
    if (v21 && [v21 BOOLValue])
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      uint64_t v22 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "kill config", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::configureAOP() const", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      char v23 = 0;
      LOBYTE(v37) = 0;
    }
    else
    {
      char v23 = 1;
    }
    id v25 = [v1 valueForKey:@"martyImpactThreshold"];
    id v26 = [v1 valueForKey:@"martyRotationThreshold"];
    if (v25)
    {
      [v25 floatValue];
      LODWORD(v3_Block_object_dispose(&STACK[0x310], 8) = v27;
    }
    if (v26)
    {
      [v26 floatValue];
      DWORD1(v3_Block_object_dispose(&STACK[0x310], 8) = v28;
    }
  }
  else
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v24 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "using default config", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::configureAOP() const", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    char v23 = 1;
  }
  DWORD2(v3_Block_object_dispose(&STACK[0x310], 8) = sub_101526764();
  uint64_t v29 = objc_opt_class();
  if (v29)
  {
    uint64_t v29 = (uint64_t)+[SOSUtilities isKappaVisible];
    char v30 = v23 & v29;
  }
  else
  {
    char v30 = 0;
  }
  LOBYTE(v37) = v30;
  sub_1000D2D08(v29, 0, &v37, 0x3CuLL);
  return sub_10013F3C4(v36);
}

void sub_101526704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

float sub_101526764()
{
  double v6 = -1.0;
  uint64_t v0 = sub_1000A6958();
  sub_1000A699C(v0, "CLIgneousMotionTriggerProbability", &v6);
  double v1 = v6;
  if (v6 <= -1.0) {
    double v1 = 0.0;
  }
  double v6 = v1;
  sub_101A1F180(buf, "IgneousMotionTriggerProbability", &v6, 0);
  double v2 = *(double *)&v10[4];
  double v6 = *(double *)&v10[4];
  if (*(double *)&v10[4] > 1.0 || *(double *)&v10[4] < 0.0)
  {
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    id v3 = qword_102419328;
    if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(double *)id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "invalid motion trigger probability %f, ignoring", buf, 0xCu);
    }
    double v2 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      int v7 = 134217984;
      double v8 = v6;
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "float CLKappaNotifier::retrieveIgneousMotionTriggerProbability() const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return v2;
}

void sub_101526988(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  id v3 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v4 = a2[1];
    int v5 = a2[2];
    int v6 = a2[3];
    int v7 = a2[4];
    int v8 = a2[7];
    int v9 = a2[5];
    int v10 = a2[6];
    *(_DWORD *)std::string buf = 67111168;
    int v22 = 8;
    __int16 v23 = 2048;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = v4;
    __int16 v27 = 1024;
    int v28 = v5;
    __int16 v29 = 1024;
    int v30 = v6;
    __int16 v31 = 1024;
    int v32 = v7;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    int v36 = v9;
    __int16 v37 = 1024;
    int v38 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "kCompanionCollect %d %p %d %d %d %d/%d %d %d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (a2[3])
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v11 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      int v12 = a2[7];
      *(_DWORD *)std::string buf = 67109120;
      int v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "arming marty %d", buf, 8u);
    }
    uint64_t v13 = sub_10013D1A0(115, 2);
    if (!v13) {
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419100 == -1)
    {
LABEL_54:
      int v20 = (char *)_os_log_send_and_compose_impl();
      uint64_t v13 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
LABEL_20:
      sub_1000D2D08(v13, 2, a2, 8uLL);
      return;
    }
LABEL_56:
    dispatch_once(&qword_102419100, &stru_10232C638);
    goto LABEL_54;
  }
  if (a2[5])
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v14 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "arming igneous", buf, 2u);
    }
    uint64_t v13 = sub_10013D1A0(115, 2);
    if (!v13) {
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419100 == -1) {
      goto LABEL_54;
    }
    goto LABEL_56;
  }
  if (sub_101523584())
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v15 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "I can arm myself", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v16 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n");
LABEL_40:
      if (v16 != buf) {
        free(v16);
      }
    }
  }
  else
  {
    sub_100103240();
    if ((sub_1000A16E8() & 0x4000000000000) != 0)
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v18 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "arming kappa", buf, 2u);
      }
      uint64_t v13 = sub_10013D1A0(115, 2);
      if (!v13) {
        goto LABEL_20;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419100 == -1) {
        goto LABEL_54;
      }
      goto LABEL_56;
    }
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v17 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "kCompanionCollect unexpected", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v16 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::armSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n");
      goto LABEL_40;
    }
  }
}

void sub_10152714C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  id v3 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v4 = a2[1];
    int v5 = a2[2];
    int v6 = a2[3];
    int v7 = a2[4];
    int v8 = a2[7];
    int v9 = a2[5];
    int v10 = a2[6];
    *(_DWORD *)std::string buf = 67111168;
    int v22 = 8;
    __int16 v23 = 2048;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = v4;
    __int16 v27 = 1024;
    int v28 = v5;
    __int16 v29 = 1024;
    int v30 = v6;
    __int16 v31 = 1024;
    int v32 = v7;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    int v36 = v9;
    __int16 v37 = 1024;
    int v38 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "kCompanionStop %d %p %d %d %d %d/%d %d %d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (a2[3])
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v11 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      int v12 = a2[7];
      *(_DWORD *)std::string buf = 67109120;
      int v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "disarming marty %d", buf, 8u);
    }
    uint64_t v13 = sub_10013D1A0(115, 2);
    if (!v13) {
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419100 == -1)
    {
LABEL_54:
      int v20 = (char *)_os_log_send_and_compose_impl();
      uint64_t v13 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
LABEL_20:
      sub_1000D2D08(v13, 2, a2, 8uLL);
      return;
    }
LABEL_56:
    dispatch_once(&qword_102419100, &stru_10232C638);
    goto LABEL_54;
  }
  if (a2[5])
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v14 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "disarming igneous", buf, 2u);
    }
    uint64_t v13 = sub_10013D1A0(115, 2);
    if (!v13) {
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419100 == -1) {
      goto LABEL_54;
    }
    goto LABEL_56;
  }
  if (sub_101523584())
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v15 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "I can disarm myself", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v16 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n");
LABEL_40:
      if (v16 != buf) {
        free(v16);
      }
    }
  }
  else
  {
    sub_100103240();
    if ((sub_1000A16E8() & 0x4000000000000) != 0)
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v18 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "disarming", buf, 2u);
      }
      uint64_t v13 = sub_10013D1A0(115, 2);
      if (!v13) {
        goto LABEL_20;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419100 == -1) {
        goto LABEL_54;
      }
      goto LABEL_56;
    }
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v17 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unexpected message", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v16 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::disarmSafetyClient(CMSPU::Safety::Command::OverrideClient *)", "%s\n");
      goto LABEL_40;
    }
  }
}

void sub_101527910(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  switch(v3)
  {
    case 1:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v6 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v22 = 1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "arming for client %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v17 = 67109120;
        int v18 = 1;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      int v7 = 24;
      goto LABEL_26;
    case 2:
      int v8 = a2[1];
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v9 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109376;
        int v22 = 2;
        __int16 v23 = 1024;
        int v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "arming for client %d %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v17 = 67109376;
        int v18 = 2;
        __int16 v19 = 1024;
        int v20 = v8;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      if (v8) {
        int v7 = 28;
      }
      else {
        int v7 = 26;
      }
LABEL_26:
      if (sub_101523584())
      {
        id v10 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        int v14[2] = sub_101527F18;
        void v14[3] = &unk_1022EFDB0;
        char v16 = v3;
        int v15 = v7;
        [v10 doAsync:v14];
      }
      return;
    case 4:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v4 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "not forwarding igneous arming", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        LOWORD(v17) = 0;
        int v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n");
LABEL_45:
        if (v5 != buf) {
          free(v5);
        }
      }
      break;
    default:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v11 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "unexpected message", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        LOWORD(v17) = 0;
        int v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)", "%s\n");
        goto LABEL_45;
      }
      break;
  }
}

id sub_101527F18(uint64_t a1, uint64_t a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v4 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v5 = *(unsigned __int8 *)(a1 + 36);
    int v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)std::string buf = 67109376;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "tell the companion to collect for %d msgType %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToArm(CMMotionCoprocessorReply::SafetyArmClient *)_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_1005E26F4(120.0, a2, *(_DWORD *)(a1 + 32), 0, 300, 1, 0, 0, 0, 0);
}

void sub_101528120(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  switch(v3)
  {
    case 1:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v6 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v22 = 1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "disarming for client %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v17 = 67109120;
        int v18 = 1;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      int v7 = 25;
      goto LABEL_26;
    case 2:
      int v8 = a2[1];
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v9 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109376;
        int v22 = 2;
        __int16 v23 = 1024;
        int v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "disarming for client %d %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v17 = 67109376;
        int v18 = 2;
        __int16 v19 = 1024;
        int v20 = v8;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      if (v8) {
        int v7 = 29;
      }
      else {
        int v7 = 27;
      }
LABEL_26:
      if (sub_101523584())
      {
        id v10 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        int v14[2] = sub_101528728;
        void v14[3] = &unk_1022EFDB0;
        char v16 = v3;
        int v15 = v7;
        [v10 doAsync:v14];
      }
      return;
    case 4:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v4 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "not forwarding igneous disarming", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        LOWORD(v17) = 0;
        int v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n");
LABEL_45:
        if (v5 != buf) {
          free(v5);
        }
      }
      break;
    default:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v11 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "unexpected message", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        LOWORD(v17) = 0;
        int v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n");
        goto LABEL_45;
      }
      break;
  }
}

id sub_101528728(uint64_t a1, uint64_t a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v4 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v5 = *(unsigned __int8 *)(a1 + 36);
    int v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)std::string buf = 67109376;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "tell the companion to stop collecting for %d msgType %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToDisarm(CMMotionCoprocessorReply::SafetyDisarmClient *)_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_1005E26F4(120.0, a2, *(_DWORD *)(a1 + 32), 0, 300, 1, 0, 0, 0, 0);
}

void sub_101528930(uint64_t a1, unsigned char *a2)
{
  if (*a2 != 2)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v5 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "unexpected client mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v14 = 0;
      goto LABEL_38;
    }
    return;
  }
  int v3 = a2[2];
  if (a2[1] == v3)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v4 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "invald mode switch", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v14 = 0;
LABEL_38:
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::tellCompanionToMartyModeSwitch(CMMotionCoprocessorReply::SafetyMartyModeSwitch *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      return;
    }
    return;
  }
  if (a2[1]) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v3 == 0;
  }
  if (!v7)
  {
    int v8 = 28;
    goto LABEL_25;
  }
  if (a2[1] && !a2[2])
  {
    int v8 = 26;
LABEL_25:
    if (sub_101523584())
    {
      id v9 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_101528D18;
      void v12[3] = &unk_1022EA0A8;
      v12[4] = a2;
      int v13 = v8;
      [v9 doAsync:v12];
    }
    return;
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v10 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "invalid settings", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    __int16 v14 = 0;
    goto LABEL_38;
  }
}

id sub_101528D18(uint64_t a1, uint64_t a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v4 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v5 = **(unsigned __int8 **)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)std::string buf = 67109376;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "tell the companion to stop collecting for %d msgType %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::tellCompanionToMartyModeSwitch(CMMotionCoprocessorReply::SafetyMartyModeSwitch *)_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_1005E26F4(120.0, a2, *(_DWORD *)(a1 + 40), 0, 300, 1, 0, 0, 0, 0);
}

void sub_101528F28(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2 == 4)
  {
    int v2 = *(unsigned __int16 *)(a2 + 2);
    double v14 = 0.0;
    BOOL v13 = 0;
    uint64_t v3 = sub_1000A6958();
    sub_1000A699C(v3, "CLIgneousArmSessionStartTime", &v14);
    uint64_t v4 = sub_1000A6958();
    sub_1000D2988(v4, "CLIgneousArmSessionIsCharging", &v13);
    if (v14 != 0.0)
    {
      double v5 = (v14 - floor(v14 / 86400.0) * 86400.0) / 60.0;
      double v6 = (CFAbsoluteTimeGetCurrent() - v14) / 60.0;
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      double v7 = round(v5);
      double v8 = round(v6);
      id v9 = qword_102419328;
      if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134219008;
        double v26 = v14;
        __int16 v27 = 1024;
        int v28 = (int)v7;
        __int16 v29 = 1024;
        BOOL v30 = v13;
        __int16 v31 = 1024;
        int v32 = (int)v8;
        __int16 v33 = 1024;
        int v34 = v2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "send Igneous analytics,startTime,%f,startTimeInMin,%d,isCharging,%d,sessionDurationInMin,%d,numMotionTrigger,%u", buf, 0x24u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419320 != -1) {
          dispatch_once(&qword_102419320, &stru_10232C798);
        }
        int v15 = 134219008;
        double v16 = v14;
        __int16 v17 = 1024;
        int v18 = (int)v7;
        __int16 v19 = 1024;
        BOOL v20 = v13;
        __int16 v21 = 1024;
        int v22 = (int)v8;
        __int16 v23 = 1024;
        int v24 = v2;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::sendAnalyticsEventIgneous(CMMotionCoprocessorReply::SafetyDisarmClient *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      AnalyticsSendEventLazy();
      double v14 = 0.0;
      uint64_t v10 = sub_1000A6958();
      sub_10016332C(v10, "CLIgneousArmSessionStartTime", &v14);
      uint64_t v11 = *(void *)sub_1000A6958();
      (*(void (**)(void))(v11 + 944))();
    }
  }
}

NSDictionary *sub_101529284(uint64_t a1)
{
  v3[0] = @"startTime";
  v4[0] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 32)];
  v3[1] = @"isCharging";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 50)];
  void v3[2] = @"sessionDuration";
  _OWORD v4[2] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 40)];
  v3[3] = @"numMotionTrigger";
  void v4[3] = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 48)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

void sub_10152936C(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 1))
  {
    case 0:
      uint64_t v4 = a1 + 112;
      uint64_t v5 = a2 + 2;
      uint64_t v6 = 1;
      goto LABEL_24;
    case 1:
      uint64_t v4 = a1 + 112;
      uint64_t v5 = a2 + 2;
      uint64_t v6 = 2;
      goto LABEL_24;
    case 2:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      double v7 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "received arm client from AOP", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        BOOL v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      uint64_t v8 = a1 + 112;
      uint64_t v9 = a2 + 2;
      uint64_t v10 = 11;
      goto LABEL_22;
    case 3:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      uint64_t v11 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "received disarm client from AOP", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        double v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v8 = a1 + 112;
      uint64_t v9 = a2 + 2;
      uint64_t v10 = 12;
      goto LABEL_22;
    case 4:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v12 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "received marty mode switch from AOP", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onAOP(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v8 = a1 + 112;
      uint64_t v9 = a2 + 2;
      uint64_t v10 = 13;
LABEL_22:
      sub_1013C3640(v8, v10, v9);
      break;
    case 5:
      uint64_t v4 = a1 + 112;
      uint64_t v6 = 3;
      uint64_t v5 = 0;
LABEL_24:
      sub_1013C3640(v4, v6, v5);
      break;
    default:
      return;
  }
}

char *sub_101529874(char *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    uint64_t v4 = result;
    *(_OWORD *)(result + 504) = *(_OWORD *)a4;
    uint64_t v5 = *(void *)(a4 + 16);
    *(void *)(result + 525) = *(void *)(a4 + 21);
    *((void *)result + 65) = v5;
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v6 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      double v7 = *(float *)(v4 + 521);
      double v8 = *(float *)(v4 + 525);
      double v9 = *(float *)(v4 + 529);
      *(_DWORD *)std::string buf = 134218496;
      double v12 = v7;
      __int16 v13 = 2048;
      double v14 = v8;
      __int16 v15 = 2048;
      double v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PressureInertialFit,x,%f,y,%f,z,%f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return (char *)[*(id *)(*((void *)v4 + 62) + 16) unregister:*(void *)(*((void *)v4 + 62) + 8) forNotification:0];
  }
  return result;
}

void sub_101529AAC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (!*a3)
  {
    *(_DWORD *)(a1 + 592) = *a4;
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v5 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *a4;
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "signal environment %u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_101529C70(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 != 5 && *a3 != 0)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v40 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
    {
      int v41 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)__int16 v106 = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Unhandled location notification %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v42 = *a3;
      int v86 = 67240192;
      *(_DWORD *)long long v87 = v42;
      double v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v43);
LABEL_43:
      if (v43 != (char *)buf) {
        free(v43);
      }
      return;
    }
    return;
  }
  if (!sub_1000E6DB4(a4)) {
    return;
  }
  long long v8 = *(_OWORD *)(a4 + 96);
  long long v9 = *(_OWORD *)(a4 + 128);
  v84[7] = *(_OWORD *)(a4 + 112);
  v85[0] = v9;
  *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)(a4 + 140);
  long long v10 = *(_OWORD *)(a4 + 32);
  long long v11 = *(_OWORD *)(a4 + 64);
  long long v12 = *(_OWORD *)(a4 + 80);
  v84[3] = *(_OWORD *)(a4 + 48);
  v84[4] = v11;
  v84[5] = v12;
  v84[6] = v8;
  long long v13 = *(_OWORD *)(a4 + 16);
  v84[0] = *(_OWORD *)a4;
  v84[1] = v13;
  v84[2] = v10;
  int v14 = sub_1001AF22C((uint64_t)v84, *(double *)(a4 + 936));
  int v15 = *(_DWORD *)(a4 + 96);
  double Current = CFAbsoluteTimeGetCurrent();
  double v17 = *(double *)(a4 + 76);
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  double v18 = Current - v17;
  __int16 v19 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    BOOL v21 = v14 == 1 || v15 == 3;
    double v22 = *(double *)(a4 + 52);
    *(_DWORD *)std::string buf = 67110144;
    *(_DWORD *)__int16 v106 = v21;
    *(_WORD *)&v106[4] = 2048;
    *(double *)&v106[6] = v22;
    *(_WORD *)&v106[14] = 1024;
    *(_DWORD *)&v106[16] = v22 > 0.0;
    *(_WORD *)double v107 = 1024;
    *(_DWORD *)&v107[2] = v22 <= 4.0;
    *(_WORD *)&v107[6] = 1024;
    *(_DWORD *)&v107[8] = v18 >= 0.0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "GPS filter %d %f %d %d %d", buf, 0x24u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    BOOL v60 = v14 == 1 || v15 == 3;
    double v61 = *(double *)(a4 + 52);
    int v86 = 67110144;
    *(_DWORD *)long long v87 = v60;
    *(_WORD *)&v87[4] = 2048;
    *(double *)&v87[6] = v61;
    *(_WORD *)&v87[14] = 1024;
    *(_DWORD *)&v87[16] = v61 > 0.0;
    *(_WORD *)double v88 = 1024;
    *(_DWORD *)&v88[2] = v61 <= 4.0;
    *(_WORD *)&v88[6] = 1024;
    *(_DWORD *)&v88[8] = v18 >= 0.0;
    double v62 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v62);
    if (v62 != (char *)buf) {
      free(v62);
    }
  }
  sub_10006ACBC(buf, "KappaFilterGPS", (unsigned __int8 *)&unk_101E10181, 0);
  if (!buf[1]
    || v15 == 3 && v18 >= 0.0
    || v14 == 1 && (double v57 = *(double *)(a4 + 52), v57 > 0.0) && v57 <= 4.0 && v18 >= 0.0)
  {
    float v23 = *(double *)(a4 + 44);
    if (v23 > 31.293) {
      float v23 = 31.293;
    }
    float v74 = v23;
    v24.f64[0] = *(float64_t *)(a4 + 68);
    v24.f64[1] = *(float64_t *)(a4 + 4);
    float32x4_t v75 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a4 + 52)), v24);
    float v25 = *(double *)(a4 + 12);
    float v76 = v25;
    uint64_t v77 = *(void *)(a4 + 248);
    char v78 = *(_DWORD *)(a1 + 592);
    unint64_t v79 = (unint64_t)(v18 * 1000000.0);
    float v26 = *(double *)(a4 + 20);
    float v80 = v26;
    int v81 = *(_DWORD *)(a4 + 784);
    float v82 = *(float *)(a4 + 788);
    int v83 = *(_DWORD *)(a4 + 96);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    __int16 v27 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void *)(a4 + 76);
      int v29 = *a3;
      *(_DWORD *)std::string buf = 134220800;
      *(void *)__int16 v106 = v28;
      *(_WORD *)&v106[8] = 2048;
      *(void *)&v106[10] = v79;
      *(_WORD *)&v106[18] = 1024;
      *(_DWORD *)double v107 = v29;
      *(_WORD *)&v107[4] = 2048;
      *(double *)&v107[6] = v74;
      __int16 v108 = 2048;
      double v109 = v75.f32[0];
      __int16 v110 = 2048;
      double v111 = v75.f32[1];
      __int16 v112 = 2048;
      double v113 = v75.f32[3];
      __int16 v114 = 2048;
      double v115 = v76;
      __int16 v116 = 2048;
      double v117 = v80;
      __int16 v118 = 1024;
      int v119 = v81;
      __int16 v120 = 2048;
      double v121 = v82;
      __int16 v122 = 1024;
      int v123 = v83;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "GPS timestamp %.6f, delta %llu, notify(type) = %u, speed = %f accuracy = %f course = %f lat(tr) = %f long(tr) = %f horAcc = %f dem %d conf %f type %d", buf, 0x6Eu);
    }
    uint64_t v30 = sub_10013D1A0(115, 2);
    if (v30)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      uint64_t v63 = *(void *)(a4 + 76);
      int v64 = *a3;
      int v86 = 134220800;
      *(void *)long long v87 = v63;
      *(_WORD *)&v87[8] = 2048;
      *(void *)&v87[10] = v79;
      *(_WORD *)&v87[18] = 1024;
      *(_DWORD *)double v88 = v64;
      *(_WORD *)&v88[4] = 2048;
      *(double *)&v88[6] = v74;
      __int16 v89 = 2048;
      double v90 = v75.f32[0];
      __int16 v91 = 2048;
      double v92 = v75.f32[1];
      __int16 v93 = 2048;
      double v94 = v75.f32[3];
      __int16 v95 = 2048;
      double v96 = v76;
      __int16 v97 = 2048;
      double v98 = v80;
      __int16 v99 = 1024;
      int v100 = v81;
      __int16 v101 = 2048;
      double v102 = v82;
      __int16 v103 = 1024;
      int v104 = v83;
      uint64_t v65 = (char *)_os_log_send_and_compose_impl();
      uint64_t v30 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v65);
      if (v65 != (char *)buf) {
        free(v65);
      }
    }
    sub_1000D2D08(v30, 4, &v74, 0x40uLL);
  }
  if (!sub_1013C34D8(a1 + 112, a1 + 240) || *(void *)(a1 + 384) || (*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1)
  {
    sub_1000E9354(&v74);
    uint64_t v31 = sub_1000A6958();
    sub_100012960(v31, "Kappa", &v74);
    int v32 = (void *)sub_1000E9358((uint64_t)&v74);
    id v33 = [v32 valueForKey:@"roadHorizontalAccuracy"];
    id v34 = [v32 valueForKey:@"roadSearchRadius"];
    __int16 v35 = v34;
    if (v33)
    {
      [v33 floatValue];
      float v37 = v36;
      if (v35)
      {
LABEL_34:
        [v35 floatValue];
        float v39 = v38;
        goto LABEL_47;
      }
    }
    else
    {
      float v37 = 25.0;
      if (v34) {
        goto LABEL_34;
      }
    }
    float v39 = 300.0;
LABEL_47:
    if (sub_1013C34D8(a1 + 112, a1 + 240) && !*(void *)(a1 + 384) && *(double *)(a4 + 20) < v37)
    {
      *(void *)(a1 + 384) = (unint64_t)(v18 * 1000000.0);
      *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = *(_OWORD *)(a4 + 4);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v44 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v45 = *(void *)(a1 + 368);
        uint64_t v46 = *(void *)(a1 + 376);
        uint64_t v47 = *(void *)(a4 + 20);
        *(_DWORD *)std::string buf = 134218496;
        *(void *)__int16 v106 = v45;
        *(_WORD *)&v106[8] = 2048;
        *(void *)&v106[10] = v46;
        *(_WORD *)&v106[18] = 2048;
        *(void *)double v107 = v47;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Querying distance from lat:%f long:%f, location uncertainty:%f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        uint64_t v66 = *(void *)(a1 + 368);
        uint64_t v67 = *(void *)(a1 + 376);
        uint64_t v68 = *(void *)(a4 + 20);
        int v86 = 134218496;
        *(void *)long long v87 = v66;
        *(_WORD *)&v87[8] = 2048;
        *(void *)&v87[10] = v67;
        *(_WORD *)&v87[18] = 2048;
        *(void *)double v88 = v68;
        unint64_t v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      uint64_t v49 = *(void *)(a1 + 344);
      double v48 = *(std::__shared_weak_count **)(a1 + 352);
      if (v48)
      {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v48->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_1000DB0A0(v48);
      }
      uint64_t v50 = *(id **)(a1 + 360);
      double v51 = *(double *)(a1 + 368);
      double v52 = *(double *)(a1 + 376);
      float v53 = *(double *)(a4 + 20);
      v72[0] = _NSConcreteStackBlock;
      v72[1] = 3321888768;
      v72[2] = sub_10152AA64;
      v72[3] = &unk_10232C540;
      v72[4] = a1;
      v72[5] = v49;
      uint64_t v73 = v48;
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100E68290(v50, (uint64_t)v72, v51, v52, v53, v39);
      if (v73) {
        std::__shared_weak_count::__release_weak(v73);
      }
      if (v48) {
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (sub_1013C34D8(a1 + 112, a1 + 240) && !*(void *)(a1 + 384))
    {
      double v54 = v37;
      if (*(double *)(a4 + 20) >= v54)
      {
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        long long v55 = qword_102419108;
        if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v56 = *(void *)(a4 + 20);
          *(_DWORD *)std::string buf = 134218240;
          *(void *)__int16 v106 = v56;
          *(_WORD *)&v106[8] = 2048;
          *(double *)&v106[10] = v54;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Not querying roads because location uncertainty %f is greater or equal than %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          uint64_t v70 = *(void *)(a4 + 20);
          int v86 = 134218240;
          *(void *)long long v87 = v70;
          *(_WORD *)&v87[8] = 2048;
          *(double *)&v87[10] = v54;
          unint64_t v71 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v71);
          if (v71 != (char *)buf) {
            free(v71);
          }
        }
      }
    }
    sub_10013F3C4(&v74);
    return;
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  uint64_t v58 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Not querying roads because location is not from GPS", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    LOWORD(v86) = 0;
    double v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v43);
    goto LABEL_43;
  }
}

void sub_10152AA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19)
{
}

uint64_t sub_10152AA64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v8[0] = 0;
  v8[1] = v8;
  _DWORD v8[2] = 0x3812000000;
  void v8[3] = sub_100177FF8;
  uint64_t v8[4] = sub_100177734;
  void v8[5] = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v9 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_10152ABA0;
  void v7[3] = &unk_1022CF388;
  void v7[5] = v8;
  v7[6] = v3;
  void v7[4] = a3;
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5 && *(void *)(v5 + 8) != -1) {
    sub_10152ABA0((uint64_t)v7);
  }
  _Block_object_dispose(v8, 8);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    operator delete();
  }
  return result;
}

void sub_10152AB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _Block_object_dispose(&a16, 8);
  uint64_t v23 = a22;
  a22 = 0;
  if (v23) {
    operator delete();
  }
  _Unwind_Resume(a1);
}

void sub_10152ABA0(uint64_t a1)
{
  unint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
  if (!(*(void *)(a1 + 32) | v1)) {
    sub_101ABB53C();
  }
  sub_1000D2D08(a1, 11, (void *)v1, 0x60uLL);
  if (*(void *)(a1 + 32))
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v3 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error happened getting distance to closest road: %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::onLocation(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_10152AD80(uint64_t a1, uint64_t a2)
{
  int v3 = sub_100D33CF4(a2);
  char v8 = v3;
  if (*(unsigned __int8 *)(a1 + 312) != v3)
  {
    if (v3)
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      uint64_t v4 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Notifying AOP of active emergency", buf, 2u);
      }
      uint64_t v5 = sub_10013D1A0(115, 2);
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        uint64_t v5 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onEmergencyStateChange(CLEmergencyState)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      sub_1000D2D08(v5, 7, &v8, 1uLL);
      char v6 = v8;
    }
    else
    {
      char v6 = 0;
    }
    *(unsigned char *)(a1 + 312) = v6;
  }
}

void sub_10152AF50(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    if (*(unsigned char *)(a4 + 56)) {
      int v5 = (int)*(float *)(a4 + 20);
    }
    else {
      int v5 = -1;
    }
    *(_DWORD *)(a1 + 584) = v5;
    *(_DWORD *)(a1 + 58_Block_object_dispose(&STACK[0x310], 8) = *(_DWORD *)(a4 + 4);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    char v6 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 584);
      int v8 = *(_DWORD *)(a1 + 588);
      *(_DWORD *)std::string buf = 67109376;
      int v12 = v7;
      __int16 v13 = 1024;
      int v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "age=%d biologicalSex=%d", buf, 0xEu);
    }
    uint64_t v9 = sub_10013D1A0(115, 2);
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      uint64_t v9 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    buf[0] = *(_DWORD *)(a1 + 584);
    buf[1] = *(_DWORD *)(a1 + 588);
    sub_1000D2D08(v9, 5, buf, 2uLL);
  }
}

double sub_10152B170(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v5 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      unsigned int v6 = *(unsigned __int8 *)(a4 + 96);
      LODWORD(buf) = 67110144;
      HIDWORD(buf) = v6 & 1;
      __int16 v13 = 1024;
      int v14 = (v6 >> 1) & 1;
      __int16 v15 = 1024;
      int v16 = (v6 >> 2) & 1;
      __int16 v17 = 1024;
      int v18 = (v6 >> 3) & 1;
      __int16 v19 = 1024;
      int v20 = (v6 >> 4) & 1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "(onMotionStateUpdate) EventActivity; hints %d %d %d %d %d",
        (uint8_t *)&buf,
        0x20u);
    }
    uint64_t v7 = sub_10013D1A0(115, 2);
    if (v7)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      long long v11 = (char *)_os_log_send_and_compose_impl();
      uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onMotionStateUpdate(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)&buf) {
        free(v11);
      }
    }
    unsigned int v9 = *(unsigned __int8 *)(a4 + 96);
    LOBYTE(buf) = v9 & 1;
    v8.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v9) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)((char *)&buf + 1) = vmovn_s16(v8).u32[0];
    sub_1000D2D08(v7, 9, &buf, 5uLL);
  }
  return result;
}

void sub_10152B3DC(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  switch(*a3)
  {
    case 2:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v5 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Turning off slow timer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        __int16 v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      unsigned int v6 = *(void **)(a1 + 472);
      double v7 = 1.79769313e308;
      double v8 = 1.79769313e308;
      goto LABEL_14;
    case 3:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      unsigned int v9 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Scheduling slow timer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      unsigned int v6 = *(void **)(a1 + 472);
      double v8 = 60.0;
      double v7 = 1.0;
LABEL_14:
      [v6 setNextFireDelay:v7 interval:v8];
      return;
    case 7:
      *(unsigned char *)(a1 + 314) = a4[9];
      goto LABEL_17;
    case 8:
      *(unsigned char *)(a1 + 313) = *a4;
LABEL_17:
      BOOL v10 = sub_10000A8A4((unsigned char *)a1);
      BOOL v11 = sub_1000085CC((unsigned char *)a1);
      int v12 = sub_10006A7CC(a1);
      uint64_t v13 = 0x10000;
      if (!v12) {
        uint64_t v13 = 0;
      }
      uint64_t v14 = 256;
      if (!v11) {
        uint64_t v14 = 0;
      }
      sub_1001B2A4C(a1, v14 | v10 | v13);
      break;
    default:
      return;
  }
}

void sub_10152B7B0(unsigned char *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    unsigned int v6 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
    {
      int v7 = *(_DWORD *)(a4 + 8);
      int v8 = *(_DWORD *)(a4 + 16);
      *(_DWORD *)uint64_t buf = 67240448;
      int v17 = v7;
      __int16 v18 = 1026;
      int v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "workout type %{public}u, %{public}u", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    int v9 = (*(_DWORD *)(a4 + 8) | *(_DWORD *)(a4 + 16)) != 0;
    if (a1[315] == v9)
    {
      BOOL v10 = 0;
    }
    else
    {
      a1[315] = v9;
      BOOL v10 = sub_10000A8A4(a1);
    }
    BOOL v11 = sub_1000085CC(a1);
    int v12 = sub_10006A7CC((uint64_t)a1);
    uint64_t v13 = 0x10000;
    if (!v12) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 256;
    if (!v11) {
      uint64_t v14 = 0;
    }
    sub_1001B2A4C((uint64_t)a1, v14 | v10 | v13);
  }
}

uint64_t sub_10152BA04(uint64_t a1)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v2 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 328);
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v33) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "checking remotely armed clients for timeout %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v23 = *(unsigned __int8 *)(a1 + 328);
    LODWORD(v31[0]) = 67109120;
    HIDWORD(v31[0]) = v23;
    float64x2_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  v28[0] = 1;
  memset(&v28[1], 0, 7);
  int v4 = sub_10152CF84();
  sub_1000E9354(v31);
  uint64_t v5 = sub_1000A6958();
  if (!sub_100012960(v5, "Kappa", v31))
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    BOOL v10 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "cannot access timestamps, turning everything off", buf, 2u);
    }
    uint64_t v6 = sub_10013D1A0(115, 2);
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(v29) = 0;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      uint64_t v6 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    goto LABEL_47;
  }
  uint64_t v6 = (uint64_t)[objc_alloc((Class)NSMutableDictionary) initWithDictionary:sub_1000E9358((uint64_t)v31)];
  int v7 = (void *)v6;
  if ((*(unsigned char *)(a1 + 328) & 1) != 0
    && ((v12 = objc_msgSend((id)v6, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp")), uint64_t v6 = (uint64_t)objc_msgSend(v7, "objectForKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp")), !v12)|| v6 && (objc_msgSend((id)v6, "doubleValue"), CFAbsoluteTimeGetCurrent() - v13 > (double)v4)))
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v14 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "kappa timed out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(v29) = 0;
      float v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    uint64_t v6 = (uint64_t)[v7 removeObjectForKey: +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp")];
    char v9 = 0;
    int v8 = 1;
    *(_WORD *)&v28[1] = 1;
  }
  else
  {
    int v8 = 0;
    char v9 = 1;
  }
  if ((*(unsigned char *)(a1 + 328) & 2) != 0
    && ((v16 = objc_msgSend(v7, "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp")), uint64_t v6 = (uint64_t)objc_msgSend(v7, "objectForKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "martyHeartbeatTimestamp")), !v16)|| v6 && (objc_msgSend((id)v6, "doubleValue"), CFAbsoluteTimeGetCurrent() - v17 > (double)v4)))
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    __int16 v18 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "marty timed out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(v29) = 0;
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    [v7 removeObjectForKey:[NSString stringWithUTF8String:"martyHeartbeatTimestamp"]];
    int v15 = 1;
    *(_WORD *)&v28[3] = 1;
  }
  else
  {
    int v15 = 0;
    if (v9)
    {
      int v8 = 0;
      goto LABEL_46;
    }
    int v8 = 1;
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v19 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    id v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "setting dictionary %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v29 = 138412290;
    uint64_t v30 = v7;
    float v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::remoteArmedClientTimeout()", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  sub_100017FD4(v31, (CFDictionaryRef)v7);
  uint64_t v20 = sub_1000A6958();
  sub_1004D3878(v20, "Kappa", (uint64_t)v31);
  uint64_t v21 = sub_1000A6958();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 944))(v21);
LABEL_46:
  if (v8 | v15) {
LABEL_47:
  }
    sub_10152714C(v6, v28);
  return sub_10013F3C4(v31);
}

void sub_10152C2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

id sub_10152C2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, v4, objc_opt_class(), 0), a2, 0);
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  uint64_t v6 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    id v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "receiving heartbeat %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v21 = 138412290;
    id v22 = v5;
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  id result = [v5 objectForKey:@"SafetyCompanionHeartbeat"];
  if (result)
  {
    unsigned __int8 v8 = [[v5 objectForKeyedSubscript:@"SafetyCompanionHeartbeat"] intValue];
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    char v9 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v24) = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "updating heartbeat timestamps %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v21 = 67109120;
      LODWORD(v22) = v8;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1000E9354(&v21);
    uint64_t v11 = sub_1000A6958();
    if (sub_100012960(v11, "Kappa", &v21))
    {
      id v12 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:sub_1000E9358((uint64_t)&v21)];
      if (v8) {
        [v12 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current) forKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp")];
      }
      if ((v8 & 2) != 0) {
        [v12 setObject:[NSNumber numberWithDouble:Current] forKeyedSubscript:[NSString stringWithUTF8String:"martyHeartbeatTimestamp"]];
      }
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      double v13 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 138412290;
        id v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "setting dictionary %@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      sub_100017FD4(&v21, (CFDictionaryRef)v12);
      uint64_t v14 = sub_1000A6958();
      sub_1004D3878(v14, "Kappa", (uint64_t)&v21);
      uint64_t v15 = sub_1000A6958();
      (*(void (**)(uint64_t))(*(void *)v15 + 944))(v15);
    }
    else
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      id v16 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "failed to get dictionary", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::companionHeartbeat(NSData *)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return (id)sub_10013F3C4(&v21);
  }
  return result;
}

void sub_10152C9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10152CA20(uint64_t a1)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v2 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 329);
    *(_DWORD *)uint64_t buf = 67109120;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending heartbeat for %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v8 = *(unsigned __int8 *)(a1 + 329);
    int v13 = 67109120;
    int v14 = v8;
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::locallyArmedClientHeartbeat()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(unsigned char *)(a1 + 329))
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    [v4 setObject:[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 329)] forKeyedSubscript:@"SafetyCompanionHeartbeat"];
    id v5 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:v4], 1, 0);
    if (sub_101523584())
    {
      id v6 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_10152CDE4;
      void v11[3] = &unk_10232C578;
      int v12 = 30;
      v11[4] = v5;
      [v6 doAsync:v11];
    }
  }
  else
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v7 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "nothing to send, returning", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(v13) = 0;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::locallyArmedClientHeartbeat()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

id sub_10152CDE4(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(120.0, a2, *(_DWORD *)(a1 + 40), *(void **)(a1 + 32), 300, 1, 0, 0, 0, 0);
}

uint64_t sub_10152CE34(uint64_t a1)
{
  *(_WORD *)(a1 + 32_Block_object_dispose(&STACK[0x310], 8) = 0;
  [*(id *)(a1 + 320) setNextFireTime:1.79769313e308];
  sub_1000E9354(v6);
  uint64_t v1 = sub_1000A6958();
  if (sub_100012960(v1, "Kappa", v6))
  {
    id v2 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:sub_1000E9358((uint64_t)v6)];
    [v2 removeObjectForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kappaHeartbeatTimestamp")];
    [v2 removeObjectForKey:[NSString stringWithUTF8String:"martyHeartbeatTimestamp"]];
    [v2 removeObjectForKey:[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "igneousHeartbeatTimestamp")];
    sub_100017FD4(v6, (CFDictionaryRef)v2);
    uint64_t v3 = sub_1000A6958();
    sub_1004D3878(v3, "Kappa", (uint64_t)v6);
    uint64_t v4 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v4 + 944))(v4);
  }
  return sub_10013F3C4(v6);
}

void sub_10152CF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10152CF84()
{
  sub_1000E9354(v5);
  uint64_t v0 = sub_1000A6958();
  if (sub_100012960(v0, "Kappa", v5)) {
    uint64_t v1 = (uint64_t)[((id)sub_1000E9358((uint64_t)v5)) valueForKey:[NSString stringWithUTF8String:"remotelyArmedClientTimeoutSeconds"]].integerValue;
  }
  else {
    uint64_t v1 = 900;
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  id v2 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "timeout seconds %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v6 = 67109120;
    int v7 = v1;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLKappaNotifier::getRemoteTimeoutSeconds()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10013F3C4(v5);
  return v1;
}

void sub_10152D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10152D1C0(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  sub_10073ACDC(&v13);
  std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v13;
  }
  else {
    uint64_t v4 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  LOBYTE(buf[0]) = 32;
  id v5 = sub_100227008(v4, (unsigned __int8 *)v4 + size, (unsigned __int8 *)buf);
  int v6 = (char *)&v13 + HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    int v7 = &v13;
  }
  else
  {
    int v6 = (char *)(v13.__r_.__value_.__r.__words[0] + v13.__r_.__value_.__l.__size_);
    int v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&v13, v5 - (unsigned __int8 *)v7, v6 - (char *)v5);
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v8 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    int v9 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    buf[0] = 136315138;
    *(void *)&buf[1] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "buildString %s", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v11 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    int v14 = 136315138;
    uint64_t v15 = v11;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const std::unique_ptr<CLNameValuePair> CLKappaNotifier::lookupOTAConfig(const CLNameValuePair &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v10 = &v13;
  }
  else {
    BOOL v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v10, 0x8000100u);
  sub_1000E9358(a2);
  operator new();
}

void sub_10152DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48)
{
  sub_10013F3C4(&a40);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  a48 = &a44;
  sub_1000A7B4C((void ***)&a48);
  sub_10013F3C4(&a30);
  uint64_t v49 = *a16;
  *a16 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_10152DD70(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 6)
  {
    id v5 = [[CLOSTransaction alloc] initWithDescription:"CLKappaNotifier.onMobileAssetNotification"];
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v6 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "creating transaction", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(__p[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)&buf) {
        free(v11);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)a4 + 800))(a4, __p);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v7 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = __p;
      if (v16 < 0) {
        int v8 = (void **)__p[0];
      }
      int buf = 136446210;
      *(void *)buf_4 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "received config %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v12 = __p;
      if (v16 < 0) {
        int v12 = (void **)__p[0];
      }
      int v17 = 136446210;
      __int16 v18 = v12;
      std::string v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    uint64_t v9 = sub_1000E9358(a4);
    if (v9) {
      sub_10152D1C0(v9, a4);
    }
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    BOOL v10 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to convert config to dictionary", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(v17) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }

    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_101530468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 8))(a38);
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_101530604(uint64_t a1, unint64_t *a2, char a3)
{
  if (a3) {
    char v5 = -1;
  }
  else {
    char v5 = sub_1015307C8(a1, *a2);
  }
  *(unsigned char *)(a1 + 330) = v5;
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v6 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Firing companion stop event", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::stopCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1013C3640(a1 + 112, 6, (uint64_t)a2);
}

unint64_t sub_1015307C8(uint64_t a1, unint64_t a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  uint64_t v3 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67110656;
    unsigned int v7 = (a2 >> 8) & 1;
    __int16 v8 = 1024;
    unsigned int v9 = WORD1(a2) & 1;
    __int16 v10 = 1024;
    unsigned int v11 = BYTE3(a2) & 1;
    __int16 v12 = 1024;
    int v13 = BYTE4(a2) & 1;
    __int16 v14 = 1024;
    int v15 = HIBYTE(a2) & 1;
    __int16 v16 = 1024;
    int v17 = (a2 >> 40) & 1;
    __int16 v18 = 1024;
    int v19 = HIWORD(a2) & 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "constructOverrideClientBitset %d %d %d %d %d %d %d", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint8_t CLKappaNotifier::constructOverrideClientBitset(CMSPU::Safety::Command::OverrideClient, BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return (a2 >> 23) & 2 | (a2 >> 8) & 1 | (a2 >> 38) & 4;
}

void sub_101530A2C(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = (unsigned char *)a1;
  if (*(unsigned __int8 *)(a2 + 3) | *(unsigned __int8 *)(a2 + 5))
  {
    a1 = sub_101523584();
    if ((a1 & 1) == 0)
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v10 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "refusing to arm logging devices for marty/igneous", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        goto LABEL_59;
      }
      goto LABEL_57;
    }
  }
  if (*(unsigned char *)(a2 + 1))
  {
    a1 = sub_10000A8A4(v5);
    if ((a1 & 1) == 0)
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      unsigned int v11 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "refusing to collect, kappa not allowed", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        goto LABEL_59;
      }
LABEL_57:
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return;
    }
  }
  if (*(unsigned char *)(a2 + 3))
  {
    a1 = sub_1000085CC(v5);
    if ((a1 & 1) == 0)
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v12 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "refusing to collect, marty not allowed", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419100 == -1) {
        goto LABEL_57;
      }
LABEL_59:
      dispatch_once(&qword_102419100, &stru_10232C638);
      goto LABEL_57;
    }
  }
  if (!*(unsigned char *)(a2 + 5) || (a1 = sub_10006A7CC((uint64_t)v5), (a1 & 1) != 0))
  {
    if ((a3 & 1) == 0)
    {
      int v6 = sub_1015307C8(a1, *(void *)a2);
      v5[328] |= v6;
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      unsigned int v7 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        int v8 = v5[328];
        *(_DWORD *)int buf = 67109376;
        int v18 = v6;
        __int16 v19 = 1024;
        int v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "arm remote %d remote armed bitmap %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    unsigned int v9 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Firing companion collect event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onCompanionCollect(CMSPU::Safety::Command::OverrideClient &, BOOL)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    sub_1013C3640((uint64_t)(v5 + 112), 5, a2);
    return;
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v13 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "refusing to collect, igneous not allowed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 == -1) {
      goto LABEL_57;
    }
    goto LABEL_59;
  }
}

uint64_t sub_10153116C()
{
  sub_1000E9354(v5);
  uint64_t v0 = sub_1000A6958();
  if (sub_100012960(v0, "Kappa", v5)) {
    uint64_t v1 = [(uint64_t)[objc_msgSend((id)sub_1000E9358((uint64_t)v5), "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "locallyArmedClientHeartbeatSeconds")) integerValue];
  }
  else {
    uint64_t v1 = 300;
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  id v2 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109120;
    int v9 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "heartbeat timer configured to use %d seconds", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v6 = 67109120;
    int v7 = v1;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLKappaNotifier::getLocalHeartbeatTimerSeconds()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10013F3C4(v5);
  return v1;
}

void sub_101531380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

id sub_1015313A8(uint64_t a1, uint64_t a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  uint64_t v4 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setting dem os_activity_scope_state_s state = %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::requestDemFlatness(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLDigitalElevationModel"] updateComputeDemFlatnessMetric:a2];
}

void sub_101531628(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  uint64_t v3 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    int v4 = *a2;
    int v5 = a2[1];
    int v6 = a2[2];
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)int buf = 67109888;
    int v11 = v4;
    __int16 v12 = 1024;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "inject AOP trigger %d %d %d, delayUsec %d", buf, 0x1Au);
  }
  uint64_t v8 = sub_10013D1A0(115, 2);
  if (v8)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    uint64_t v8 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::injectTrigger(CMMotionCoprocessorCommand::Kappa::Trigger)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_1000D2D08(v8, 3, a2, 0x18uLL);
}

uint64_t sub_10153234C(uint64_t a1)
{
  uint64_t v1 = *(const char **)(*(void *)(a1 + 112) + 40);
  if (!strcmp(v1, "triggered")) {
    return 2;
  }
  else {
    return strcmp(v1, "armed") == 0;
  }
}

BOOL sub_101532AA8()
{
  double v9 = -1.0;
  uint64_t v0 = sub_1000A6958();
  sub_1000A699C(v0, "CLIgneousTriggerProbability", &v9);
  double v1 = v9;
  if (v9 <= -1.0) {
    double v1 = 1.0;
  }
  double v9 = v1;
  sub_101A1F180(buf, "IgneousTriggerProbability", &v9, 0);
  double v9 = *(double *)((char *)v13 + 4);
  if (*(double *)((char *)v13 + 4) > 1.0 || *(double *)((char *)v13 + 4) < 0.0)
  {
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    id v2 = qword_102419328;
    if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134217984;
      *(double *)int v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "invalid trigger probability %f, ignoring", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      int v10 = 134217984;
      *(double *)int v11 = v9;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKappaNotifier::shouldTriggerIgneous()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    double v9 = 0.0;
  }
  double v3 = drand48();
  double v4 = v9;
  if (qword_102419320 != -1) {
    dispatch_once(&qword_102419320, &stru_10232C798);
  }
  int v5 = qword_102419328;
  if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109376;
    LODWORD(v13[0]) = v3 <= v4;
    WORD2(v13[0]) = 2048;
    *(double *)((char *)v13 + 6) = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "shouldTriggerIgneous,%d,TriggerProb,%f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    int v10 = 67109376;
    LODWORD(v11[0]) = v3 <= v4;
    WORD2(v11[0]) = 2048;
    *(double *)((char *)v11 + 6) = v9;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKappaNotifier::shouldTriggerIgneous()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v3 <= v4;
}

void sub_101532F00(id a1)
{
  qword_102488798 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLKappaNotifierSilo"];
}

void sub_101533194(id a1)
{
  if ((sub_1000A16E8() & 0x6000000000000) != 0) {
    byte_1024887A8 = 1;
  }
}

void sub_1015331C4(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        double v9 = (uint64_t *)v4;
      }
      else {
        double v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)int buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232C7F8);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)int buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10232C7F8);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101533454(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101533508(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101533550(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101533598(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1015335E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024793F8);
}

uint64_t sub_10153360C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          id v24 = (uint64_t *)v18;
        }
        else {
          id v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)int buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)int buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101538138();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024793F9;
        int v39 = v17;
        *(void *)int buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)int buf = &v39;
        uint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)int buf = &v39;
        id v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)int buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)int buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  __int16 v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    float v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      float v37 = (void *)*v37;
    }
    *(_DWORD *)int v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    float v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_101533AB0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)int buf = 136446466;
      id v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232C7F8);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101533D34(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232C7F8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232C7F8);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                float v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101534108(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x20uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void v6[3] = *a3;
  *uint64_t v6 = (uint64_t)off_10232C928;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  unsigned char v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_1015341BC(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015341D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_101534224(uint64_t a1, int *a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)int buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    int v29 = v30;
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    uint64_t *v18 = (uint64_t)off_10232C928;
    v18[3] = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_101538BE8();
  }
  os_activity_scope_leave(&state);
}

void sub_101534808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101534854(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)int buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232C7F8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients() [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)int buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232C7F8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients() [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10232C7F8);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)int buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232C7F8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::listClients() [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101534E00(id a1)
{
  qword_102419108 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

uint64_t sub_101534E30(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1;
  switch(a2)
  {
    case 5:
      sub_101526988(a1, a3);
      break;
    case 2:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v4 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "AOP is not armed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual State *CLKappaNotifier::Idle::trigger(uint64_t, const void *)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      break;
    case 1:
      if (*a3) {
        return *(void *)(a1 + 48) + 184;
      }
      break;
    default:
      return 0;
  }
  return v3;
}

uint64_t sub_101535004(uint64_t a1)
{
  sub_101526190();
  uint64_t v2 = *(void *)(a1 + 48);

  return sub_10152CE34(v2);
}

void sub_101535040(void *a1)
{
  *a1 = off_1023236F8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1015350B0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 1:
      if (*a3) {
        goto LABEL_62;
      }
      return *(void *)(a1 + 48) + 128;
    case 2:
      int v6 = *a3;
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      uint64_t v7 = qword_102419328;
      if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67109120;
        int v41 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "receive AOP trigger,igneousPath,%u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419320 != -1) {
          dispatch_once(&qword_102419320, &stru_10232C798);
        }
        char v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      if (v6)
      {
        uint64_t v8 = *(void *)(a1 + 48);
        int v9 = *(_DWORD *)(v8 + 420) + 1;
        *(_DWORD *)(v8 + 420) = v9;
        sub_101535DE4(v8, v9);
      }
      return *(void *)(a1 + 48) + 240;
    case 5:
      sub_101526988(0, a3);
      goto LABEL_62;
    case 6:
      sub_10152714C(0, a3);
      goto LABEL_62;
    case 11:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v19 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "received kAOPArmClient", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      uint64_t v20 = *(void *)(a1 + 48);
      unsigned __int8 v21 = *a3;
      if ((*(unsigned char *)(v20 + 328) & *a3) == 0)
      {
        char v22 = *(unsigned char *)(v20 + 329);
        if (!v22)
        {
          int v23 = sub_10153116C();
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          BOOL v24 = qword_102419108;
          if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 67109120;
            int v41 = v23;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "setting heartbeat to %d seconds", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419100 != -1) {
              dispatch_once(&qword_102419100, &stru_10232C638);
            }
            float v38 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v38);
            if (v38 != (char *)buf) {
              free(v38);
            }
          }
          [*(id *)(*(void *)(a1 + 48) + 320) setNextFireDelay:1.0 interval:(double)v23];
          unsigned __int8 v21 = *a3;
          uint64_t v20 = *(void *)(a1 + 48);
          char v22 = *(unsigned char *)(v20 + 329);
        }
        *(unsigned char *)(v20 + 329) = v22 | v21;
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        __int16 v25 = qword_102419108;
        if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
        {
          int v26 = *a3;
          int v27 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 329);
          *(_DWORD *)int buf = 67109376;
          int v41 = v26;
          __int16 v42 = 1024;
          int v43 = v27;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "arm client %d locally armed bitmap %d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          char v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v36);
          if (v36 != (char *)buf) {
            free(v36);
          }
        }
        sub_101527910(*(void *)(a1 + 48), a3);
      }
      goto LABEL_62;
    case 12:
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v10 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "received kAOPDisarmClient", buf, 2u);
      }
      uint64_t v11 = sub_10013D1A0(115, 2);
      if (v11)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        __int16 v34 = (char *)_os_log_send_and_compose_impl();
        uint64_t v11 = sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      sub_101528F28(v11, (uint64_t)a3);
      int v12 = *(unsigned __int8 **)(a1 + 48);
      int v13 = *a3;
      int v14 = v12[328];
      if ((v14 & v13) != 0)
      {
        v12[328] = v14 & ~v12[330];
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v15 = qword_102419108;
        if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(a1 + 48);
          int v17 = *(unsigned __int8 *)(v16 + 330);
          LODWORD(v16) = *(unsigned __int8 *)(v16 + 328);
          *(_DWORD *)int buf = 67109376;
          int v41 = v17;
          __int16 v42 = 1024;
          int v43 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "disarm remote %d remote armed bitmap %d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          BOOL v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      else
      {
        v12[329] &= ~(_BYTE)v13;
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        BOOL v28 = qword_102419108;
        if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
        {
          int v29 = *a3;
          int v30 = *(unsigned __int8 *)(*(void *)(a1 + 48) + 329);
          *(_DWORD *)int buf = 67109376;
          int v41 = v29;
          __int16 v42 = 1024;
          int v43 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "disarm client %d locally armed bitmap %d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          int v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v37);
          if (v37 != (char *)buf) {
            free(v37);
          }
        }
        uint64_t v31 = *(void *)(a1 + 48);
        if (!*(unsigned char *)(v31 + 329))
        {
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          int v32 = qword_102419108;
          if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "turning off heartbeat", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419100 != -1) {
              dispatch_once(&qword_102419100, &stru_10232C638);
            }
            __int16 v39 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual State *CLKappaNotifier::Armed::trigger(uint64_t, const void *)", "%s\n", v39);
            if (v39 != (char *)buf) {
              free(v39);
            }
          }
          [*(id *)(*(void *)(a1 + 48) + 320) setNextFireDelay:1.79769313e308 interval:1.79769313e308];
          uint64_t v31 = *(void *)(a1 + 48);
        }
        sub_101528120(v31, a3);
      }
      goto LABEL_62;
    case 13:
      sub_101528930(*(void *)(a1 + 48), a3);
LABEL_62:
      uint64_t result = a1;
      break;
    default:
      return result;
  }
  return result;
}

id sub_101535D0C(uint64_t a1)
{
  sub_101535FE0(1u);
  sub_1000D2D08(v2, 1, 0, 0);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(v3 + 560);
  if (v4)
  {
    [*(id *)(v4 + 16) register:*(void *)(v4 + 8) forNotification:5 registrationInfo:0];
    uint64_t v3 = *(void *)(a1 + 48);
  }
  uint64_t v5 = *(void *)(v3 + 600);
  uint64_t v7 = *(void *)(v5 + 8);
  int v6 = *(void **)(v5 + 16);

  return [v6 register:v7 forNotification:0 registrationInfo:0];
}

void sub_101535D84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(v1 + 560);
  if (v2)
  {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:5];
    uint64_t v1 = *(void *)(a1 + 48);
  }
  [*(id *)(*(void *)(v1 + 600) + 16) unregister:*(void *)(*(void *)(v1 + 600) + 8) forNotification:0];

  sub_101535FE0(0);
}

void sub_101535DE4(uint64_t a1, int a2)
{
  v6[0] = a2;
  uint64_t v2 = sub_1000A6958();
  sub_1000EA838(v2, "CLIgneousMotionTriggerCount", v6);
  uint64_t v3 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v3 + 944))();
  if (qword_102419320 != -1) {
    dispatch_once(&qword_102419320, &stru_10232C798);
  }
  uint64_t v4 = qword_102419328;
  if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    int v8 = v6[0];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "save Igneous motion trigger count,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    v6[1] = 67109120;
    void v6[2] = v6[0];
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::saveIgneousMotionTriggerCount(int)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_101535FE0(unsigned int a1)
{
  kern_return_t v3;
  NSObject *v4;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  io_service_t MatchingService;
  kern_return_t v8;
  NSObject *v9;
  NSObject *v10;
  kern_return_t v11;
  NSObject *v12;
  kern_return_t v13;
  NSObject *v14;
  kern_return_t v15;
  NSObject *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  io_connect_t connect;
  mach_port_t connection[2];
  void *keys;
  uint32_t outputCnt;
  int v30;
  kern_return_t v31;
  uint64_t input;
  void *values[2];
  mach_port_t mainPort[2];
  unint64_t v35;
  uint8_t buf[8];
  char v37;

  mainPort[0] = 0;
  if (IOMainPort(bootstrap_port, mainPort))
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v2 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Failed to get IOMainPort.\n", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(values[0]) = 0;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL deviceHasSecureAudioController()", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    outputCnt = 0;
    goto LABEL_8;
  }
  outputCnt = 0;
  if (!IORegistryEntryFromPath(mainPort[0], "IODeviceTree:/arm-io/iop-audio-controller"))
  {
LABEL_8:
    sub_100134750(buf, "AppleAOPAudioController");
    sub_101536C30((io_service_t *)&keys, (uint64_t)buf);
    if (v37 < 0) {
      operator delete(*(void **)buf);
    }
    sub_101536D2C(connection, (io_service_t *)&keys);
    *(void *)mainPort = 6;
    uint64_t v35 = a1;
    uint64_t v3 = IOConnectCallScalarMethod(connection[0], 5u, (const uint64_t *)mainPort, 2u, 0, &outputCnt);
    if (v3)
    {
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      uint64_t v4 = qword_102419108;
      if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "IOConnectCallScalarMethod failed 0x%08x", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        LODWORD(values[0]) = 67109120;
        HIDWORD(values[0]) = v3;
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    sub_101536DF0(connection);
    sub_101536E24((io_object_t *)&keys);
    return;
  }
  *(void *)connection = @"lai ";
  keys = @"identifier";
  uint64_t v5 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)connection, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)mainPort = @"IONameMatch";
  uint64_t v35 = (unint64_t)@"IOPropertyMatch";
  values[0] = @"IOPAudioClientManagerDevice";
  values[1] = v5;
  int v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)mainPort, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
  CFRelease(v5);
  connect = 0;
  int v8 = IOServiceOpen(MatchingService, mach_task_self_, 2u, &connect);
  if (v8)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v9 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "IOServiceOpen failed 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LODWORD(input) = 67109120;
      HIDWORD(input) = v8;
      unsigned __int8 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  if (!connect)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v10 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Failed to create ioconnect", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      LOWORD(input) = 0;
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  input = 1;
  uint64_t v11 = IOConnectCallScalarMethod(connect, a1 ^ 1, &input, 1u, 0, 0);
  if (v11)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v12 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "IOConnectCallScalarMethod failed 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v30 = 67109120;
      uint64_t v31 = v11;
      char v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  int v13 = IOServiceClose(connect);
  if (v13)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    int v14 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "IOServiceClose failed 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v30 = 67109120;
      uint64_t v31 = v13;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  int v15 = IOObjectRelease(MatchingService);
  if (v15)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    uint64_t v16 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "IOConnectCallScalarMethod failed 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10232C638);
      }
      int v30 = 67109120;
      uint64_t v31 = v15;
      BOOL v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void AOPAudio_toggle(BOOL)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  int v17 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "AOPAudio_toggle command success", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
    LOWORD(v30) = 0;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void AOPAudio_toggle(BOOL)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
}

void sub_101536BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, io_connect_t a12, int a13, io_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

io_service_t *sub_101536C30(io_service_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  CFDictionaryRef v4 = IOServiceNameMatching(v3);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  *a1 = MatchingService;
  if (!MatchingService)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v8);
  }
  return a1;
}

void sub_101536CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

io_connect_t *sub_101536D2C(io_connect_t *connect, io_service_t *a2)
{
  kern_return_t v3;
  mach_error_t v5;
  std::runtime_error *exception;
  char *v7;

  uint64_t v3 = IOServiceOpen(*a2, mach_task_self_, 0, connect);
  if (v3)
  {
    uint64_t v5 = v3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v7 = mach_error_string(v5);
    std::runtime_error::runtime_error(exception, v7);
    goto LABEL_6;
  }
  if (!*connect)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create ioconnect");
LABEL_6:
  }
  return connect;
}

void sub_101536DD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

io_connect_t *sub_101536DF0(io_connect_t *a1)
{
  io_connect_t v2 = *a1;
  if (v2) {
    IOServiceClose(v2);
  }
  return a1;
}

io_object_t *sub_101536E24(io_object_t *a1)
{
  io_object_t v2 = *a1;
  if (v2) {
    IOObjectRelease(v2);
  }
  return a1;
}

uint64_t *sub_101536E58(uint64_t *a1, uint64_t a2)
{
  CFDictionaryRef v4 = sub_1013C3358(a1, (uint64_t)"triggered", a2 + 184);
  *CFDictionaryRef v4 = (uint64_t)off_10232C728;
  v4[6] = a2;
  id v5 = [*(id *)(a2 + 40) newTimer];
  a1[7] = (uint64_t)v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  double v7[2] = sub_101536F4C;
  void v7[3] = &unk_1022A3020;
  void v7[4] = a1;
  [v5 setHandler:v7];
  return a1;
}

void sub_101536F14(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = off_1023236F8;
  uint64_t v3 = (void *)v1[2];
  if (v3)
  {
    v1[3] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101536F4C(uint64_t a1)
{
}

uint64_t sub_101536F64(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 3) < 2) {
    return *(void *)(a1 + 48) + 184;
  }
  if (a2 != 2) {
    return 0;
  }
  [*(id *)(a1 + 56) setNextFireDelay:660.0 interval:1.79769313e308];
  return *(void *)(a1 + 48) + 240;
}

id sub_101536FCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 560);
  if (v2)
  {
    [*(id *)(v2 + 16) register:*(void *)(v2 + 8) forNotification:0 registrationInfo:0];
    sub_1015313A8(*(void *)(a1 + 48), 1);
  }
  uint64_t v3 = *(void **)(a1 + 56);

  return [v3 setNextFireDelay:660.0 interval:1.79769313e308];
}

void *sub_101537038(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 48);
  if (result[70])
  {
    sub_1015313A8((uint64_t)result, 0);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 560) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 48) + 560) + 8) forNotification:0];
    uint64_t result = *(void **)(a1 + 48);
  }
  result[46] = 0;
  result[47] = 0;
  result[48] = 0;
  return result;
}

void sub_10153708C(void *a1)
{
  *a1 = off_1023236F8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1015370FC(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v6 = a2;
  uint64_t v2 = sub_1000A6958();
  sub_1000EA238(v2, "CLIgneousArmStatus", &v6);
  uint64_t v3 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v3 + 944))();
  if (qword_102419320 != -1) {
    dispatch_once(&qword_102419320, &stru_10232C798);
  }
  CFDictionaryRef v4 = qword_102419328;
  if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67240192;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "saved Igneous arm status,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    int v7 = 67240192;
    int v8 = v6;
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::saveIgneousArmStatus(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1015372F8(uint64_t a1, char a2, void *a3)
{
  if (a3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = [[a3 objectForKeyedSubscript:@"saEnablementStateInCountry"] BOOLValue];
    unsigned int v7 = [[objc_msgSend(a3, "objectForKeyedSubscript:", @"saEnablementStateInCoverageArea") boolValue];
    unsigned int v8 = [[a3 objectForKeyedSubscript:@"saEnablementStateOptedIn"] BOOLValue];
    unsigned int v9 = [[a3 objectForKeyedSubscript:@"saEmergencyAlertSwitchEnabled"] BOOLValue];
    if ([a3 objectForKey:@"saMotionHarvestAllowed"])
    {
      unsigned int v10 = [[a3 objectForKeyedSubscript:@"saMotionHarvestAllowed"] BOOLValue];
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      uint64_t v11 = qword_102419328;
      if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67109120;
        unsigned int v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "received harvestAllowed,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419320 != -1) {
          dispatch_once(&qword_102419320, &stru_10232C798);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::checkSaewEnablement()_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    else
    {
      unsigned int v10 = 0;
    }
    *(unsigned char *)(v5 + 317) = a2 | v10;
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    int v14 = qword_102419328;
    if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = *(unsigned __int8 *)(v5 + 317);
      *(_DWORD *)int buf = 67110400;
      unsigned int v18 = v15;
      __int16 v19 = 1024;
      unsigned int v20 = v6;
      __int16 v21 = 1024;
      unsigned int v22 = v7;
      __int16 v23 = 1024;
      unsigned int v24 = v8;
      __int16 v25 = 1024;
      unsigned int v26 = v9;
      __int16 v27 = 1024;
      unsigned int v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SAEW enabled,%d,country,%d,coverage,%d,optedIn,%d,emergency,%d,harvestAllowed,%d\n", buf, 0x26u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419320 == -1)
    {
LABEL_27:
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::checkSaewEnablement()_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return;
    }
LABEL_29:
    dispatch_once(&qword_102419320, &stru_10232C798);
    goto LABEL_27;
  }
  if (qword_102419320 != -1) {
    dispatch_once(&qword_102419320, &stru_10232C798);
  }
  int v13 = qword_102419328;
  if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "isSaewEnabledAsync invalid context", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419320 == -1) {
      goto LABEL_27;
    }
    goto LABEL_29;
  }
}

void sub_1015377CC(id a1)
{
  qword_102419328 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Igneous");
}

void sub_1015377FC(id a1)
{
  qword_1024887C0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
}

uint64_t sub_101537828()
{
  if (qword_1024887B8 != -1) {
    dispatch_once(&qword_1024887B8, &stru_10232C7B8);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)qword_1024887C0, "MAGetActivationState");
  off_1024793F0 = v0;

  return v0();
}

void sub_101537890(void *a1, xpc_activity_t activity)
{
  uint64_t v4 = a1[4];
  if (!xpc_activity_get_state(activity))
  {
    sub_101537FA4(v4, activity, a1[5]);
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    uint64_t v5 = qword_102419328;
    if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[6];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v8 = a1[5];
      *(_DWORD *)int buf = 136315650;
      uint64_t v29 = v6;
      __int16 v30 = 2048;
      CFAbsoluteTime v31 = Current;
      __int16 v32 = 2048;
      uint64_t v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "register on DAS,%s,now,%f,delay,%lld", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      CFAbsoluteTimeGetCurrent();
      unsigned int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  if (xpc_activity_get_state(activity) == 2)
  {
    if (qword_102419320 != -1) {
      dispatch_once(&qword_102419320, &stru_10232C798);
    }
    unsigned int v9 = qword_102419328;
    if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[6];
      CFAbsoluteTime v11 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)int buf = 136315394;
      uint64_t v29 = v10;
      __int16 v30 = 2048;
      CFAbsoluteTime v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "get run time on DAS,%s,now,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      CFAbsoluteTimeGetCurrent();
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    BOOL v12 = sub_10000A8A4((unsigned char *)v4);
    BOOL v13 = sub_1000085CC((unsigned char *)v4);
    int v14 = sub_10006A7CC(v4);
    int v15 = 0x10000;
    if (!v14) {
      int v15 = 0;
    }
    int v16 = 256;
    if (!v13) {
      int v16 = 0;
    }
    sub_1001B2788(v4, v16 | v12 | v15);
    if (xpc_activity_set_state(activity, 5))
    {
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      int v17 = qword_102419328;
      if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = a1[6];
        CFAbsoluteTime v19 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)int buf = 136315394;
        uint64_t v29 = v18;
        __int16 v30 = 2048;
        CFAbsoluteTime v31 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "finish on DAS,%s,now,%f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419320 != -1) {
          dispatch_once(&qword_102419320, &stru_10232C798);
        }
        CFAbsoluteTimeGetCurrent();
        __int16 v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      unsigned int v20 = (const char *)a1[6];
      if (!strcmp(v20, *(const char **)(v4 + 392)))
      {
        *(unsigned char *)(v4 + 416) = 0;
      }
      else if (!strcmp(v20, *(const char **)(v4 + 400)))
      {
        *(unsigned char *)(v4 + 417) = 0;
      }
      else if (!strcmp(v20, *(const char **)(v4 + 408)))
      {
        *(unsigned char *)(v4 + 41_Block_object_dispose(&STACK[0x310], 8) = 0;
      }
    }
    else
    {
      if (qword_102419320 != -1) {
        dispatch_once(&qword_102419320, &stru_10232C798);
      }
      __int16 v21 = qword_102419328;
      if (os_log_type_enabled((os_log_t)qword_102419328, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = a1[6];
        CFAbsoluteTime v23 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)int buf = 136315394;
        uint64_t v29 = v22;
        __int16 v30 = 2048;
        CFAbsoluteTime v31 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "error on DAS,%s,now,%f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419320 != -1) {
          dispatch_once(&qword_102419320, &stru_10232C798);
        }
        CFAbsoluteTimeGetCurrent();
        unsigned int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::scheduleXPCTaskIgneous(const char *, const int64_t)_block_invoke", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
  }
}

void sub_101537FA4(uint64_t a1, _xpc_activity_s *a2, int64_t a3)
{
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_string(v5, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_int64(v5, XPC_ACTIVITY_DELAY, a3);
  xpc_dictionary_set_int64(v5, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
  xpc_activity_set_criteria(a2, v5);

  xpc_release(v5);
}

void sub_101538088(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

id *sub_1015380B8(id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100E6828C(result);
    operator delete();
  }
  return result;
}

void sub_101538108(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101538138()
{
}

unsigned char *sub_1015381E4(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    unsigned int v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1015382FC(a4);
    uint64_t v10 = *(void *)a3 + 80;
    CFAbsoluteTime v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    BOOL v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_1015382DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1015382FC(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_101538398(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_101538724(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_101538398(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_101538AE4((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10232C8F8);
    }
    xpc_object_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101E101E4 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_10232C8F8);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101E101E4 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_10232C8F8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101E101E4 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLKappaNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_101538724(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232C8F8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E101E4 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLKappaNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232C8F8);
      }
      xpc_object_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E101E4 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10232C8F8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_101538AE4(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102395180))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
    {
      uint64_t v4 = sub_101ABB83C();
      return (id)sub_101538B6C(v4);
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_101538B6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10232C928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101538B8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10232C928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101538BE8()
{
}

void sub_101538C94(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    xpc_object_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1015382FC(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                uint64_t v22 = (uint64_t *)v17;
              }
              else {
                uint64_t v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              double v48 = v19;
              sub_1015381E4(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      __int16 v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      __int16 v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              double v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232C7F8);
              }
              unsigned int v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)int buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232C7F8);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLKappaNotifier_Type::Notification, CLKappaNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLKappaNotifier_Type::Notification, NotificationData_T = CLKappaNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_101539084(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_1015390A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E0FEA8;
      v0[3] = unk_101E0FEB8;
      v0[4] = xmmword_101E0FEC8;
      v0[0] = xmmword_101E0FE88;
      v0[1] = unk_101E0FE98;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101539184(_Unwind_Exception *a1)
{
}

uint64_t sub_1015394B0(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0;
      *(unsigned char *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          LODWORD(v19) = 0;
          goto LABEL_42;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v19) = 0;
      }
LABEL_42:
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v19;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0;
      }
LABEL_38:
      *(unsigned char *)(a1 + 12) = v14 != 0;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1015399DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022C86D0;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 1;
  *(void *)(a1 + 24) = 0x10000000000;
  uint64_t v3 = (unsigned char *)(a1 + 12820);
  *(_DWORD *)(a1 + 20) = 1031798784;
  *(unsigned char *)(a1 + 1056) = 1;
  *(void *)(a1 + 1072) = 0x10000000000;
  *(_DWORD *)(a1 + 106_Block_object_dispose(&STACK[0x310], 8) = 1031798784;
  *(void *)(a1 + 2104) = a2;
  *(void *)(a1 + 2112) = 0;
  *(_DWORD *)(a1 + 2120) = 50;
  *(unsigned char *)(a1 + 2124) = 1;
  *(_DWORD *)(a1 + 2144) = 256;
  *(void *)(a1 + 2136) = 1031798784;
  *(unsigned char *)(a1 + 3172) = 1;
  *(_DWORD *)(a1 + 3192) = 256;
  *(void *)(a1 + 3184) = 1031798784;
  *(unsigned char *)(a1 + 4220) = 1;
  *(_DWORD *)(a1 + 4240) = 256;
  *(void *)(a1 + 4232) = 1031798784;
  *(void *)(a1 + 5272) = 0;
  *(_DWORD *)(a1 + 5280) = 25;
  *(unsigned char *)(a1 + 5284) = 1;
  *(_DWORD *)(a1 + 5304) = 256;
  *(void *)(a1 + 5296) = 1031798784;
  *(unsigned char *)(a1 + 6332) = 1;
  *(_DWORD *)(a1 + 6352) = 256;
  *(void *)(a1 + 6344) = 1031798784;
  *(unsigned char *)(a1 + 7380) = 1;
  *(_DWORD *)(a1 + 7400) = 256;
  *(void *)(a1 + 7392) = 1031798784;
  sub_1014F0838(a1 + 8432);
  *(unsigned char *)(a1 + 10724) = 1;
  *(_OWORD *)(a1 + 1070_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 10680) = 0u;
  *(_OWORD *)(a1 + 10696) = 0u;
  *(_OWORD *)(a1 + 1064_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 10664) = 0u;
  *(_OWORD *)(a1 + 10632) = 0u;
  *(_DWORD *)(a1 + 10744) = 256;
  *(void *)(a1 + 10736) = 1031798784;
  *(unsigned char *)(a1 + 11772) = 1;
  *(_DWORD *)(a1 + 11792) = 256;
  *(void *)(a1 + 11784) = 1031798784;
  unsigned char *v3 = 1;
  *(_DWORD *)(a1 + 12840) = 256;
  *(void *)(a1 + 12832) = 1031798784;
  v3[1048] = 0;
  *(_DWORD *)(a1 + 13872) = 0;
  *(_DWORD *)(a1 + 5300) = 0;
  *(_DWORD *)(a1 + 634_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(_DWORD *)(a1 + 7396) = 0;
  *(_DWORD *)(a1 + 2140) = 0;
  *(_DWORD *)(a1 + 318_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(_DWORD *)(a1 + 4236) = 0;
  *(_OWORD *)(a1 + 13880) = 0u;
  *(void *)(a1 + 13896) = 0;
  return a1;
}

float sub_101539B54(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, int a7)
{
  if (a7)
  {
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(void *)a1 + 24))(a1, a2 + 6, a3);
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(void *)a1 + 24))(a1, a2 + 530, a4);
    (*(void (**)(uint64_t, unsigned __int16 *, _DWORD *))(*(void *)a1 + 24))(a1, a2 + 1054, a5);
  }
  else
  {
    uint64_t v13 = a1 + 8432;
    sub_1014F083C(a1 + 8432, a3, a2 + 14);
    sub_1014F083C(v13, a4, a2 + 538);
    sub_1014F083C(v13, a5, a2 + 1062);
  }
  for (uint64_t i = 0; i != 128; ++i)
  {
    float result = (float)(*(float *)&a3[i] + *(float *)&a4[i]) + *(float *)&a5[i];
    *(float *)(a6 + i * 4) = result;
  }
  return result;
}

uint64_t sub_101539C90(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024887D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024887D0))
  {
    byte_1024887C8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    __cxa_guard_release(&qword_1024887D0);
  }
  uint64_t v2 = 0;
  v15[0] = a1 + 659;
  v15[1] = a1 + 264;
  v15[2] = a1[263];
  do
  {
    uint64_t v3 = (void *)sub_100D6A5F0();
    if (v3)
    {
      int v4 = 0;
      char v5 = 0;
      uint64_t v6 = v15[v2];
      do
      {
        char v7 = (*(uint64_t (**)(void *, void))(*v3 + 16))(v3, *(unsigned int *)(v6 + 8));
        if (!byte_1024887C8) {
          goto LABEL_8;
        }
        if ((*(unsigned int (**)(void *, void))(*v3 + 32))(v3, *(unsigned int *)(v6 + 8)))
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232C9A8);
          }
          char v8 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMAccelerometerProcessor.cpp, line 181,Hamming required but ignored..", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10232C9A8);
            }
            uint64_t v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CMAccelerometerProcessor::computeFrequencyFeatures()", "%s\n", v13);
            if (v13 != (char *)buf) {
              free(v13);
            }
          }
        }
        if (!byte_1024887C8) {
LABEL_8:
        }
          v4 |= (*(uint64_t (**)(void *, void))(*v3 + 32))(v3, *(unsigned int *)(v6 + 8));
        v5 |= v7;
        uint64_t v3 = (void *)v3[1];
      }
      while (v3);
      if (v5)
      {
        uint64_t v9 = v15[v2];
        if (((byte_1024887C8 == 0) & v4) == 1)
        {
          sub_101539B54((uint64_t)a1, (unsigned __int16 *)v15[v2], v19, v18, v17, (uint64_t)v16, 1);
          for (uint64_t i = (void *)sub_100D6A5F0(); i; uint64_t i = (void *)i[1])
          {
            if ((*(unsigned int (**)(void *, void))(*i + 32))(i, *(unsigned int *)(v9 + 8))) {
              (*(void (**)(void *, uint64_t, _DWORD *, _DWORD *, _DWORD *, unsigned char *))(*i + 24))(i, v9, v19, v18, v17, v16);
            }
          }
        }
        sub_101539B54((uint64_t)a1, (unsigned __int16 *)v9, v19, v18, v17, (uint64_t)v16, 0);
        for (j = (void *)sub_100D6A5F0(); j; j = (void *)j[1])
        {
          if (byte_1024887C8
            || ((*(uint64_t (**)(void *, void))(*j + 32))(j, *(unsigned int *)(v9 + 8)) & 1) == 0)
          {
            (*(void (**)(void *, uint64_t, _DWORD *, _DWORD *, _DWORD *, unsigned char *))(*j + 24))(j, v9, v19, v18, v17, v16);
          }
        }
      }
    }
    ++v2;
  }
  while (v2 != 3);
  return 1;
}

void sub_10153A100(_Unwind_Exception *a1)
{
}

void sub_10153A120(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10153A150(void *a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, signed int a10, unsigned char *a11, uint64_t a12)
{
  *a11 = 0;
  unint64_t v15 = (void *)(a3 + 8);
  sub_100DDE574(a3, *(void **)(a3 + 8));
  *(void *)a3 = v15;
  double v134 = (uint64_t **)a3;
  *(void *)(a3 + 16) = 0;
  *unint64_t v15 = 0;
  sub_1000D7FCC(a7);
  v158 = 0;
  unint64_t v159 = 0;
  unint64_t v160 = 0;
  uint64_t v155 = (uint64_t)&v155;
  int v156 = &v155;
  std::string::size_type v157 = 0;
  char v16 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (v16[33] == v16[32])
      {
        sub_100A0BCCC(&v155, (uint64_t)(v16 + 4), *((unsigned char *)v16 + 280) == 0);
      }
      else
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_10232C9C8);
        }
        char v17 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Polygonal fence should not be added for wifi monitoring", (uint8_t *)&buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_10232C9C8);
          }
          *(_WORD *)v179 = 0;
          unsigned int v18 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v18);
          if (v18 != &buf) {
            free(v18);
          }
        }
      }
      uint64_t v19 = (void *)v16[1];
      if (v19)
      {
        do
        {
          unint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (void *)v16[2];
          _ZF = *v20 == (void)v16;
          char v16 = v20;
        }
        while (!_ZF);
      }
      char v16 = v20;
    }
    while (v20 != a2 + 1);
  }
  sub_100A0CEC4((uint64_t)&v155);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10232C9C8);
  }
  uint64_t v22 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v23 = a2[2];
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v23;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v157;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Fence: combined fences, %{public}lu, fences to, %{public}lu, fences", (uint8_t *)&buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
    uint64_t v124 = a2[2];
    *(_DWORD *)v179 = 134349312;
    *(void *)&v179[4] = v124;
    *(_WORD *)&v179[12] = 2050;
    *(void *)&v179[14] = v157;
    double v125 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v125);
    if (v125 != &buf) {
      free(v125);
    }
  }
  unsigned int v24 = v156;
  if (v156 == &v155)
  {
    char v140 = 0;
  }
  else
  {
    char v140 = 0;
    do
    {
      unint64_t v25 = v159;
      if (v159 >= v160)
      {
        uint64_t v26 = sub_10153C3FC((uint64_t *)&v158);
      }
      else
      {
        sub_100CBE220(v159, 0, -1);
        uint64_t v26 = v25 + 504;
      }
      unint64_t v159 = v26;
      if (*((_DWORD *)v24 + 50) == -1)
      {
        sub_101ABB9BC();
        abort_report_np();
        __break(1u);
      }
      uint64_t v27 = (std::string::size_type *)(v24 + 2);
      if (sub_100CBECFC(v26 - 504, (uint64_t)a1, (uint64_t)(v24 + 2), *((unsigned __int8 *)v24 + 288), 0))
      {
        BOOL v28 = *((unsigned char *)v24 + 288) != 0;
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_10232C9C8);
        }
        uint64_t v29 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v30 = (std::string::size_type)(v24 + 2);
          if (*((char *)v24 + 39) < 0) {
            std::string::size_type v30 = *v27;
          }
          BOOL v31 = v24 + 5;
          if (*((char *)v24 + 63) < 0) {
            BOOL v31 = (void *)*v31;
          }
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v26 - 152) - *(void *)(v26 - 160)) >> 5);
          uint64_t v33 = "exit";
          if (!*((unsigned char *)v24 + 288)) {
            uint64_t v33 = "entry";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v30;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          *(void *)v186 = v32;
          *(_WORD *)&v186[8] = 2081;
          *(void *)&v186[10] = v33;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Fence: Calculator for %{public}s/%{private}s returned %{public}ld desired APs for %{private}s", (uint8_t *)&buf, 0x2Au);
        }
        v140 |= v28;
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_10232C9C8);
          }
          if (*((char *)v24 + 39) < 0) {
            uint64_t v27 = (std::string::size_type *)*v27;
          }
          uint64_t v34 = v24 + 5;
          if (*((char *)v24 + 63) < 0) {
            uint64_t v34 = (void *)*v34;
          }
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v26 - 152) - *(void *)(v26 - 160)) >> 5);
          uint64_t v36 = "exit";
          if (!*((unsigned char *)v24 + 288)) {
            uint64_t v36 = "entry";
          }
          *(_DWORD *)v179 = 136446979;
          *(void *)&v179[4] = v27;
          *(_WORD *)&v179[12] = 2081;
          *(void *)&v179[14] = v34;
          __int16 v180 = 2050;
          unint64_t v181 = v35;
          __int16 v182 = 2081;
          *(void *)v183 = v36;
          int v37 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v37);
          if (v37 != &buf) {
            free(v37);
          }
        }
      }
      else
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_10232C9C8);
        }
        BOOL v38 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
        {
          sub_100C8C864((uint64_t)(v24 + 2));
          __int16 v39 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v179 = 136380675;
          *(void *)&v179[4] = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Fence: Failed to calculate fence %{private}s", v179, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_10232C9C8);
          }
          sub_100C8C864((uint64_t)(v24 + 2));
          double v48 = v179;
          if (v180 < 0) {
            double v48 = *(unsigned char **)v179;
          }
          LODWORD(v170.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
          uint64_t v49 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v180) < 0) {
            operator delete(*(void **)v179);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v49);
          if (v49 != &buf) {
            free(v49);
          }
        }
        int v40 = (uint64_t *)v24[33];
        if (v40 != v24 + 34)
        {
          do
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_10232C9C8);
            }
            BOOL v41 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
            {
              sub_100C8C864((uint64_t)(v40 + 4));
              __int16 v42 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &buf
                  : (std::string *)buf.__r_.__value_.__r.__words[0];
              *(_DWORD *)v179 = 136380675;
              *(void *)&v179[4] = v42;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#Warning Fence: combined fence, %{private}s", v179, 0xCu);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_10232C9C8);
              }
              sub_100C8C864((uint64_t)(v40 + 4));
              uint64_t v45 = v179;
              if (v180 < 0) {
                uint64_t v45 = *(unsigned char **)v179;
              }
              LODWORD(v170.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
              int v46 = (std::string *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v180) < 0) {
                operator delete(*(void **)v179);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v46);
              if (v46 != &buf) {
                free(v46);
              }
            }
            int v43 = (uint64_t *)v40[1];
            if (v43)
            {
              do
              {
                BOOL v44 = v43;
                int v43 = (uint64_t *)*v43;
              }
              while (v43);
            }
            else
            {
              do
              {
                BOOL v44 = (uint64_t *)v40[2];
                _ZF = *v44 == (void)v40;
                int v40 = v44;
              }
              while (!_ZF);
            }
            int v40 = v44;
          }
          while (v44 != v24 + 34);
        }
        unint64_t v47 = v159 - 504;
        (**(void (***)(uint64_t))(v159 - 504))(v159 - 504);
        unint64_t v159 = v47;
      }
      unsigned int v24 = (uint64_t *)v24[1];
    }
    while (v24 != &v155);
  }
  sub_10153C13C((uint64_t)&v158);
  v154[0] = 0;
  v154[1] = 0;
  v152[1] = 0;
  __int16 v153 = v154;
  __int16 v151 = v152;
  v152[0] = 0;
  v179[0] = 0;
  char v184 = 0;
  uint64_t v50 = (uint64_t)a8;
  if (a4 && (v140 & 1) != 0)
  {
    sub_100588040((uint64_t)v179, a5);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
    double v51 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      v162.__r_.__value_.__r.__words[0] = *(void *)v179;
      sub_10006DE8C(&buf);
      __int16 v52 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v170.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
      WORD2(v170.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v170.__r_.__value_.__r.__words[1] + 6) = *(_DWORD *)&v183[6];
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Fence: Using associated AP %{private}s, channel %{private}d for exit", (uint8_t *)&v170, 0x12u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_10232C9C8);
      }
      v161.__r_.__value_.__r.__words[0] = *(void *)v179;
      sub_10006DE8C(&v170);
      if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v128 = &v170;
      }
      else {
        uint64_t v128 = (std::string *)v170.__r_.__value_.__r.__words[0];
      }
      LODWORD(v162.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v162.__r_.__value_.__r.__words + 4) = (std::string::size_type)v128;
      WORD2(v162.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v162.__r_.__value_.__r.__words[1] + 6) = *(_DWORD *)&v183[6];
      __int16 v129 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v170.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v129);
      if (v129 != &buf) {
        free(v129);
      }
    }
  }
  sub_100CC62AC(a6, &v158);
  sub_1000E23EC(v147, (uint64_t)v179);
  int v53 = sub_100CC1D40(a1, (uint64_t *)&v158, a10, a9, (uint64_t)v147, v134, &v153, &v151, 0.97, a6);
  int v54 = v53 ^ 1;
  *a11 = v53 ^ 1;
  if (v150 && v149 < 0)
  {
    operator delete(__p);
    int v54 = *a11;
  }
  if (v54)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
    long long v55 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#Warning Fence: Continuous monitoring is needed in order to supported the monitored fences", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_10232C9C8);
      }
      LOWORD(v170.__r_.__value_.__l.__data_) = 0;
      int v127 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v127);
      if (v127 != &buf) {
        free(v127);
      }
    }
  }
  signed int v56 = 0;
  int v57 = v151;
  if (v151 != v152 && a10 >= 1)
  {
    signed int v56 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v138 = _Q0;
    do
    {
      std::string::size_type v62 = (std::string::size_type)v57[5];
      sub_100134750(&v145, "");
      int v63 = *((_DWORD *)v57 + 23);
      v170.__r_.__value_.__r.__words[0] = v62;
      *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = v145;
      uint64_t v171 = v146;
      long long v145 = 0uLL;
      uint64_t v146 = 0;
      uint64_t v172 = -1;
      int v173 = v63;
      long long v174 = v138;
      __int16 v175 = 256;
      int v176 = 0;
      char v177 = 0;
      uint64_t v178 = 0;
      uint64_t v64 = sub_1000D8908((uint64_t)&v170);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_10232C9C8);
      }
      unint64_t v65 = v64 & 0x20000000000;
      uint64_t v66 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        v161.__r_.__value_.__r.__words[0] = (std::string::size_type)v57[5];
        sub_10006DE8C(&v162);
        uint64_t v67 = &v162;
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v67 = (std::string *)v162.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v68 = (std::string::size_type)v57[9];
        int v69 = *((_DWORD *)v57 + 23);
        uint64_t v70 = v57[6];
        unint64_t v71 = v57[7];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381955;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v68;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
        *(_DWORD *)v186 = v69;
        *(_WORD *)&v186[4] = 2049;
        *(void *)&v186[6] = v70;
        *(_WORD *)&v186[14] = 2049;
        *(void *)&v186[16] = v71;
        __int16 v187 = 1025;
        int v188 = v65 >> 41;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "WifiFenceCalculator: Adding exit AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, %{private}12.8lf, %{private}12.8lf, isLocallyAdministered, %{private}d", (uint8_t *)&buf, 0x36u);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_10232C9C8);
        }
        std::string::size_type v144 = (std::string::size_type)v57[5];
        sub_10006DE8C(&v161);
        float v76 = &v161;
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          float v76 = (std::string *)v161.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v77 = (std::string::size_type)v57[9];
        int v78 = *((_DWORD *)v57 + 23);
        unint64_t v79 = v57[6];
        float v80 = v57[7];
        LODWORD(v162.__r_.__value_.__l.__data_) = 136381955;
        *(std::string::size_type *)((char *)v162.__r_.__value_.__r.__words + 4) = (std::string::size_type)v76;
        WORD2(v162.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&v162.__r_.__value_.__r.__words[1] + 6) = v77;
        HIWORD(v162.__r_.__value_.__r.__words[2]) = 1025;
        int v163 = v78;
        __int16 v164 = 2049;
        v165 = v79;
        __int16 v166 = 2049;
        v167 = v80;
        __int16 v168 = 1025;
        int v169 = v65 >> 41;
        int v81 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v161.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v81);
        if (v81 != &buf) {
          free(v81);
        }
      }
      unint64_t v72 = a8[1];
      if (v72 >= a8[2])
      {
        uint64_t v73 = sub_1001F8D14(a8, (uint64_t)&v170);
      }
      else
      {
        sub_1001F8C88((uint64_t)a8, (uint64_t)&v170);
        uint64_t v73 = v72 + 88;
      }
      uint64_t v50 = (uint64_t)a8;
      a8[1] = v73;
      if (SHIBYTE(v171) < 0) {
        operator delete((void *)v170.__r_.__value_.__l.__size_);
      }
      float v74 = v57[1];
      if (v74)
      {
        do
        {
          float32x4_t v75 = (void **)v74;
          float v74 = (void *)*v74;
        }
        while (v74);
      }
      else
      {
        do
        {
          float32x4_t v75 = (void **)v57[2];
          _ZF = *v75 == v57;
          int v57 = v75;
        }
        while (!_ZF);
      }
      ++v56;
      if (v75 == v152) {
        break;
      }
      int v57 = v75;
    }
    while (v56 < a10);
  }
  sub_10153C224(v50);
  float v82 = v153;
  if (v153 != v154 && v56 < a10)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    long long v139 = _Q0;
    do
    {
      std::string::size_type v100 = (std::string::size_type)v82[5];
      sub_100134750(&v142, "");
      int v101 = *((_DWORD *)v82 + 23);
      v170.__r_.__value_.__r.__words[0] = v100;
      *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = v142;
      uint64_t v171 = v143;
      long long v142 = 0uLL;
      uint64_t v143 = 0;
      uint64_t v172 = -1;
      int v173 = v101;
      long long v174 = v139;
      __int16 v175 = 256;
      int v176 = 0;
      char v177 = 0;
      uint64_t v178 = 0;
      if (sub_100D550A4(v101))
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_10232C9C8);
        }
        double v102 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)v82[5];
          sub_10006DE8C(&v162);
          __int16 v103 = &v162;
          if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v103 = (std::string *)v162.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v104 = (std::string::size_type)v82[9];
          int v105 = *((_DWORD *)v82 + 23);
          __int16 v106 = v82[6];
          double v107 = v82[7];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136381699;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v103;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v104;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
          *(_DWORD *)v186 = v105;
          *(_WORD *)&v186[4] = 2049;
          *(void *)&v186[6] = v106;
          *(_WORD *)&v186[14] = 2049;
          *(void *)&v186[16] = v107;
          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "WifiFenceCalculator: Adding entry AP, mac, %{private}s, hAcc, %{private}.2lf, channel, %{private}d, location, %{private}12.8lf, %{private}12.8lf", (uint8_t *)&buf, 0x30u);
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v162.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_10232C9C8);
          }
          std::string::size_type v144 = (std::string::size_type)v82[5];
          sub_10006DE8C(&v161);
          __int16 v118 = &v161;
          if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v118 = (std::string *)v161.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v119 = (std::string::size_type)v82[9];
          int v120 = *((_DWORD *)v82 + 23);
          double v121 = v82[6];
          __int16 v122 = v82[7];
          LODWORD(v162.__r_.__value_.__l.__data_) = 136381699;
          *(std::string::size_type *)((char *)v162.__r_.__value_.__r.__words + 4) = (std::string::size_type)v118;
          WORD2(v162.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&v162.__r_.__value_.__r.__words[1] + 6) = v119;
          HIWORD(v162.__r_.__value_.__r.__words[2]) = 1025;
          int v163 = v120;
          __int16 v164 = 2049;
          v165 = v121;
          __int16 v166 = 2049;
          v167 = v122;
          int v123 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v161.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v123);
          if (v123 != &buf) {
            free(v123);
          }
        }
        unint64_t v108 = a7[1];
        if (v108 >= a7[2])
        {
          uint64_t v109 = sub_1001F8D14(a7, (uint64_t)&v170);
        }
        else
        {
          sub_1001F8C88((uint64_t)a7, (uint64_t)&v170);
          uint64_t v109 = v108 + 88;
        }
        a7[1] = v109;
      }
      else
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_10232C9C8);
        }
        __int16 v110 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          int v111 = v173;
          v161.__r_.__value_.__r.__words[0] = v170.__r_.__value_.__r.__words[0];
          sub_10006DE8C(&buf);
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v162.__r_.__value_.__l.__data_) = 67174915;
          HIDWORD(v162.__r_.__value_.__r.__words[0]) = v111;
          LOWORD(v162.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v162.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_buf;
          _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %{private}d, mac, %{private}s", (uint8_t *)&v162, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_10232C9C8);
          }
          int v113 = v173;
          std::string::size_type v144 = v170.__r_.__value_.__r.__words[0];
          sub_10006DE8C(&v162);
          __int16 v114 = &v162;
          if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v114 = (std::string *)v162.__r_.__value_.__r.__words[0];
          }
          LODWORD(v161.__r_.__value_.__l.__data_) = 67174915;
          HIDWORD(v161.__r_.__value_.__r.__words[0]) = v113;
          LOWORD(v161.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v161.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v114;
          double v115 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v115);
          if (v115 != &buf) {
            free(v115);
          }
        }
      }
      if (SHIBYTE(v171) < 0) {
        operator delete((void *)v170.__r_.__value_.__l.__size_);
      }
      __int16 v116 = v82[1];
      if (v116)
      {
        do
        {
          double v117 = (void **)v116;
          __int16 v116 = (void *)*v116;
        }
        while (v116);
      }
      else
      {
        do
        {
          double v117 = (void **)v82[2];
          _ZF = *v117 == v82;
          float v82 = v117;
        }
        while (!_ZF);
      }
      float v82 = v117;
    }
    while (v117 != v154);
  }
  sub_10153C224((uint64_t)a7);
  unint64_t v84 = 0x2E8BA2E8BA2E8BA3 * ((a7[1] - *a7) >> 3) + 0x2E8BA2E8BA2E8BA3 * ((a8[1] - *a8) >> 3);
  if (v84 > a10)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
    double v85 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v84;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a10;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_FAULT, "Fence: Fence calculator returned more APs (%{public}zu) than maximum (%{public}d)", (uint8_t *)&buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_10232C9C8);
      }
      LODWORD(v170.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = v84;
      WORD2(v170.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v170.__r_.__value_.__r.__words[1] + 6) = a10;
      double v130 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v130);
      if (v130 != &buf) {
        free(v130);
      }
    }
  }
  if ((v140 & 1) != 0 && *a9 == a9[1])
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
    int v86 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v87 = 0x2E8BA2E8BA2E8BA3 * ((a8[1] - *a8) >> 3);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v87;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#Warning Fence: no visible APs, exitAPs, %{public}lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_10232C9C8);
      }
      uint64_t v131 = 0x2E8BA2E8BA2E8BA3 * ((a8[1] - *a8) >> 3);
      LODWORD(v170.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = v131;
      double v132 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v132);
      if (v132 != &buf) {
        free(v132);
      }
    }
  }
  double v88 = v158;
  for (unint64_t i = v159; v88 != (double *)i; v88 += 63)
  {
    if (*((void *)v88 + 44) != *((void *)v88 + 43))
    {
      double v90 = (void *)*((void *)v88 + 46);
      if (*((void **)v88 + 47) != v90)
      {
        if (*v90) {
          continue;
        }
      }
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
    __int16 v91 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      sub_100C8C864((uint64_t)(v88 + 4));
      double v92 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v88 + 44) - *((void *)v88 + 43)) >> 5);
      LODWORD(v170.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      WORD2(v170.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v170.__r_.__value_.__r.__words[1] + 6) = v93;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "Fence: request a download for, %{private}s, fChosenAPs, %{public}lu", (uint8_t *)&v170, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_10232C9C8);
      }
      sub_100C8C864((uint64_t)(v88 + 4));
      __int16 v95 = &v170;
      if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v95 = (std::string *)v170.__r_.__value_.__r.__words[0];
      }
      unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v88 + 44) - *((void *)v88 + 43)) >> 5);
      LODWORD(v162.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v162.__r_.__value_.__r.__words + 4) = (std::string::size_type)v95;
      WORD2(v162.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v162.__r_.__value_.__r.__words[1] + 6) = v96;
      __int16 v97 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v170.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v97);
      if (v97 != &buf) {
        free(v97);
      }
    }
    uint64_t v94 = *(void *)(a12 + 24);
    if (!v94) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, double *))(*(void *)v94 + 48))(v94, v88 + 4);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10232C9C8);
  }
  double v98 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "Fence: calculateAPsForFences end", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
    LOWORD(v170.__r_.__value_.__l.__data_) = 0;
    __int16 v126 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, BOOL> &, std::map<CLFenceManager_Type::Fence, int> &, BOOL, const CLWifiService_Type::AccessPoint &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, int, BOOL &, std::function<void (const CLFenceManager_Type::Fence &)>)", "%s\n", (const char *)v126);
    if (v126 != &buf) {
      free(v126);
    }
  }
  if (v184 && SHIBYTE(v181) < 0) {
    operator delete(*(void **)&v179[8]);
  }
  sub_1000F5BB0((uint64_t)&v151, v152[0]);
  sub_1000F5BB0((uint64_t)&v153, v154[0]);
  sub_100D9F3B4(&v155);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
  sub_10153C33C((void ***)&buf);
}

void sub_10153BFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,__int16 a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (LOBYTE(STACK[0x2B8]))
  {
    if (SLOBYTE(STACK[0x27F]) < 0) {
      operator delete((void *)STACK[0x268]);
    }
  }
  sub_1000F5BB0((uint64_t)&a49, (void *)a50);
  sub_1000F5BB0((uint64_t)&a52, (void *)a53);
  sub_100D9F3B4(&a55);
  STACK[0x2C0] = (unint64_t)&a58;
  sub_10153C33C((void ***)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10153C13C(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 3uLL);
  unint64_t v4 = 0xEFBEFBEFBEFBEFBFLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xEFBEFBEFBEFBEFBFLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      char v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      char v8 = (char *)sub_10153C58C(v7, v4);
    }
    int v10 = v8;
    BOOL v11 = &v8[504 * v5];
    char v12 = v11;
    uint64_t v13 = &v8[504 * v9];
    sub_10153C514(v6, &v10);
    return sub_10153C664((uint64_t)&v10);
  }
  return result;
}

void sub_10153C1FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_10153C224(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 3uLL);
  unint64_t v4 = 0x2E8BA2E8BA2E8BA3 * v3.i64[0];
  unint64_t v5 = v4;
  if (0x2E8BA2E8BA2E8BA3 * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      char v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      char v8 = (char *)sub_1000DA8B4(v7, v4);
    }
    int v10 = v8;
    BOOL v11 = &v8[88 * v5];
    char v12 = v11;
    uint64_t v13 = &v8[88 * v9];
    sub_1001F89D8(v6, &v10);
    return sub_1001F8BA4((uint64_t)&v10);
  }
  return result;
}

void sub_10153C2E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_10153C30C(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_10153C33C(void ***a1)
{
  unint64_t v1 = *a1;
  int64x2_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    unint64_t v4 = (void (***)(void))v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 63;
      uint64_t v7 = v4 - 63;
      do
      {
        (**v7)(v7);
        v6 -= 63;
        BOOL v8 = v7 == v2;
        v7 -= 63;
      }
      while (!v8);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10153C3FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xEFBEFBEFBEFBEFBFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x82082082082082) {
    sub_1001D7FD4();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xEFBEFBEFBEFBEFBFLL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x41041041041041) {
    unint64_t v7 = 0x82082082082082;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    BOOL v8 = (char *)sub_10153C58C(v5, v7);
  }
  else {
    BOOL v8 = 0;
  }
  BOOL v11 = v8;
  char v12 = &v8[504 * v3];
  uint64_t v14 = &v8[504 * v7];
  sub_100CBE220((uint64_t)v12, 0, -1);
  uint64_t v13 = v12 + 504;
  sub_10153C514(a1, &v11);
  uint64_t v9 = a1[1];
  sub_10153C664((uint64_t)&v11);
  return v9;
}

void sub_10153C500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10153C664((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10153C514(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10153C5D8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10153C58C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x82082082082083) {
    sub_1001D7FA0();
  }
  return operator new(504 * a2);
}

uint64_t sub_10153C5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_100CCA78C(i + a7, i + a3))
    i -= 504;
  return a6;
}

uint64_t sub_10153C664(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 504;
    (**(void (***)(void))(i - 504))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_10153C6D4(uint64_t a1, void *a2, int *a3, char a4, double *a5)
{
  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = xmmword_101E10270;
  *(void *)(a1 + 24) = 0xBFF0000000000000;
  *(void *)(a1 + 32) = *a2;
  uint64_t v5 = *(void *)a3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = v5;
  uint64_t v6 = *a3;
  *(void *)(a1 + 56) = off_1022DE6F0;
  *(void *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 136) = a4;
  *(void *)(a1 + 144) = off_1022B2000;
  *(_DWORD *)(a1 + 152) = 3;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = a1 + 216;
  double result = *a5;
  *(double *)(a1 + 232) = *a5;
  return result;
}

void sub_10153C788(uint64_t a1, double *a2, double *a3, void *a4, void *a5)
{
  *(double *)(a1 + 16) = *a2 - *a3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0x4188B82000000000;
  *a5 = 0x40BC200000000000;
  *a4 = *(void *)(a1 + 16);
  *(unsigned char *)(a1 + 1) = 1;
  *(double *)(a1 + 24) = *a2;
  if (*(unsigned char *)(a1 + 136)) {
    sub_10041F400((void *)(a1 + 144));
  }
}

BOOL sub_10153C7DC(uint64_t a1, double *a2)
{
  uint64_t v3 = a1 + 56;
  sub_100B0AD90(a1 + 56, a2);
  unint64_t v4 = *(unsigned int *)(a1 + 128);
  unint64_t v5 = *(void *)(a1 + 48);
  if (v5 <= v4) {
    *(double *)(a1 + 40) = *(double *)(a1 + 232) * (sub_10153C840(v3) * *(double *)(a1 + 232));
  }
  return v5 <= v4;
}

double sub_10153C840(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 72);
  double result = 0.0;
  if (v1 >= 2)
  {
    unint64_t v3 = *(void *)(a1 + 64);
    double v4 = 0.0;
    uint64_t v5 = *(void *)(a1 + 72);
    double v6 = 0.0;
    do
    {
      double v7 = *(double *)(*(void *)(*(void *)(a1 + 40) + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF))
         - *(double *)(a1 + 16) / (double)v1;
      double v6 = v6 + v7 * v7;
      double v4 = v4 + v7;
      ++v3;
      --v5;
    }
    while (v5);
    return (v6 - v4 * v4 / (double)v1) / (double)(v1 - 1);
  }
  return result;
}

uint64_t sub_10153C8B8(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v10 = *a2;
  double v47 = *a2 - *a3;
  if (!*(unsigned char *)a1)
  {
    if (sub_10153C7DC(a1, &v47))
    {
      double v13 = *(double *)(a1 + 40);
      if (v13 > 0.0 && v13 < 0.25)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232CA08);
        }
        uint64_t v26 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v27 = *(void *)(a1 + 40);
          *(_DWORD *)std::string buf = 134217984;
          *(void *)&uint8_t buf[4] = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Estimated,time offset measurement variance(s^2),%.12g", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232CA08);
          }
          double v45 = *(double *)(a1 + 40);
          int v48 = 134217984;
          double v49 = v45;
          int v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v46);
          if (v46 != buf) {
            free(v46);
          }
        }
        *(unsigned char *)a1 = 1;
        double v10 = *a2;
        goto LABEL_2;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232CA08);
      }
      unint64_t v15 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Unacceptable,time offset measurement variance(s^2),%.12g", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232CA08);
        }
        double v43 = *(double *)(a1 + 40);
        int v48 = 134217984;
        double v49 = v43;
        BOOL v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v44);
        if (v44 != buf) {
          free(v44);
        }
      }
      *(unsigned char *)a1 = 0;
    }
    uint64_t result = 0;
    *a4 = v47;
    *a5 = 7200.0;
    *(double *)(a1 + 24) = *a2;
    return result;
  }
LABEL_2:
  if (!*(unsigned char *)(a1 + 1) || (double v11 = v10 - *(double *)(a1 + 24), v11 > *(double *)(a1 + 32)))
  {
    sub_10153C788(a1, a2, a3, a4, a5);
    return 0;
  }
  *(double *)(a1 + 24) = v10;
  if (*(unsigned char *)(a1 + 136))
  {
    sub_10007EEB4(a1 + 144, &v47);
    *(void *)std::string buf = 0;
    if (*(void *)(a1 + 224) == *(_DWORD *)(a1 + 152))
    {
      if (sub_10007EDE0((void *)(a1 + 144), 2, buf)) {
        double v47 = *(double *)buf;
      }
    }
  }
  double v17 = *(double *)(a1 + 40);
  double v18 = *(double *)(a1 + 8);
  if (v17 + v18 <= 0.0)
  {
    *(unsigned char *)a1 = 0;
    sub_10153C788(a1, a2, a3, a4, a5);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232CA08);
    }
    std::string::size_type v23 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Unexpected,state plus measurement covariance < 0.", buf, 2u);
    }
    BOOL v24 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v24)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232CA08);
      }
      LOWORD(v4_Block_object_dispose(&STACK[0x310], 8) = 0;
      unint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
      return 0;
    }
  }
  else
  {
    double v19 = *(double *)(a1 + 16);
    double v20 = v47 - v19;
    double v21 = v20 * v20 / (v17 + v18);
    if (v21 <= 20.25)
    {
      double v22 = v11 * 0.00005625;
      if (v21 > 9.0) {
        double v17 = v17 + v17;
      }
    }
    else if (v20 <= 7200.0)
    {
      double v22 = v20 * v20;
    }
    else
    {
      double v22 = 51840000.0;
    }
    double v28 = v18 + v22;
    double v29 = v28 / (v17 + v28);
    double v30 = v28 * (1.0 - v29);
    *(double *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v30;
    *(double *)(a1 + 16) = v19 + v29 * v20;
    double v31 = sqrt(v30);
    if (v30 >= 0.00000225) {
      double v32 = v31;
    }
    else {
      double v32 = 0.00000225;
    }
    *a5 = v32;
    *a4 = *(double *)(a1 + 16);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232CA08);
    }
    uint64_t v33 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v34 = *a2;
      double v35 = *a3;
      double v36 = *a4;
      double v37 = *a5;
      *(_DWORD *)std::string buf = 134219776;
      *(double *)&uint8_t buf[4] = v34;
      __int16 v65 = 2048;
      double v66 = v35;
      __int16 v67 = 2048;
      double v68 = v36;
      __int16 v69 = 2048;
      double v70 = v37;
      __int16 v71 = 2048;
      double v72 = v17;
      __int16 v73 = 2048;
      double v74 = v22;
      __int16 v75 = 2048;
      double v76 = v20;
      __int16 v77 = 2048;
      double v78 = v21;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "internalTimeSecs,%.6lf,externalTimeSecs,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.9g,R,%.9g,Q,%.9g,v,%.9g,vtest2,%.9g", buf, 0x52u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232CA08);
      }
      double v38 = *a2;
      double v39 = *a3;
      double v40 = *a4;
      double v41 = *a5;
      int v48 = 134219776;
      double v49 = v38;
      __int16 v50 = 2048;
      double v51 = v39;
      __int16 v52 = 2048;
      double v53 = v40;
      __int16 v54 = 2048;
      double v55 = v41;
      __int16 v56 = 2048;
      double v57 = v17;
      __int16 v58 = 2048;
      double v59 = v22;
      __int16 v60 = 2048;
      double v61 = v20;
      __int16 v62 = 2048;
      double v63 = v21;
      __int16 v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)", "%s\n", v42);
      if (v42 != buf) {
        free(v42);
      }
    }
    return 1;
  }
  return result;
}

void sub_10153D0C0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

NSString *sub_10153D0F0()
{
  id v0 = [objc_alloc((Class)NSDictionary) initWithContentsOfFile:@"/System/Library/CoreServices/SystemVersion.plist"];
  unint64_t v1 = +[NSString stringWithFormat:@"%@.%@", [v0 objectForKey:@"ProductVersion"], objc_msgSend(v0, "objectForKey:", @"ProductBuildVersion")];

  return v1;
}

NSString *sub_10153D178()
{
  id v0 = +[NSLocale preferredLanguages];
  if ([(NSArray *)v0 count] && (id v1 = [(NSArray *)v0 objectAtIndex:0]) != 0)
  {
    id v2 = v1;
    id v3 = [+[NSLocale currentLocale] objectForKey:NSLocaleCountryCode];
    if ([v3 length]) {
      return +[NSString stringWithFormat:@"%@_%@", v2, v3];
    }
    else {
      return (NSString *)v2;
    }
  }
  else
  {
    uint64_t v5 = +[NSLocale currentLocale];
    return [(NSLocale *)v5 localeIdentifier];
  }
}

id sub_10153D234()
{
  if (qword_1024887E8 != -1) {
    dispatch_once(&qword_1024887E8, &stru_10232CA28);
  }
  id v0 = sub_10153D178();
  id v1 = objc_alloc_init((Class)PBDataWriter);
  [v1 writeBigEndianFixed16:1];
  [v1 writeBigEndianShortThenString:v0];
  [v1 writeBigEndianShortThenString:qword_1024887D8];
  [v1 writeBigEndianShortThenString:qword_1024887E0];
  id v2 = [v1 immutableData];

  return v2;
}

void sub_10153D2E0(id a1)
{
  qword_1024887D8 = [+[NSBundle mainBundle] bundleIdentifier];
  qword_1024887E0 = sub_10153D0F0();
}

void *sub_10153D320(void *result, uint64_t a2)
{
  id *result = off_10232CA58;
  result[1] = a2;
  return result;
}

id sub_10153D340(uint64_t a1, uint64_t a2)
{
  id v3 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTilesManager"];
  double v4 = +[NSString stringWithUTF8String:"0"];
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  return [v3 requestTileDownloadByType:10 path:v4 details:v7];
}

id sub_10153D3B8(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  if (a3) {
    sub_101ABBBEC();
  }
  id v8 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLWifiTilesManager"];
  long long v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  uint64_t v12 = *(void *)(a2 + 32);
  return [v8 requestTileDownloadForLat:v11 lon:a4 details:a5];
}

void sub_10153D42C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10153D45C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10153D4DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10153D56C(_Unwind_Exception *a1)
{
}

void sub_10153D5EC(uint64_t a1, void *a2, int a3)
{
  if ([a2 hasDepartureDate])
  {
    sub_10154087C(a1);
    *(unsigned char *)(a1 + 120_Block_object_dispose(&STACK[0x310], 8) = 0;
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    double v6 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = "low";
      if (a3 == 1) {
        double v7 = "high";
      }
      *(_DWORD *)std::string buf = 136315138;
      double v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VEHICULAR: visit, confidence, %s, exit", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
LABEL_25:
      unint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onVisit(CLVisit *, CLVehicleStateNotifier_Type::LoiVisitConfidence)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else if ([a2 hasArrivalDate])
  {
    if (a3 == 1)
    {
      *(unsigned char *)(a1 + 120_Block_object_dispose(&STACK[0x310], 8) = 0;
      [a2 coordinate];
      double v9 = v8;
      double v11 = v10;
      [a2 horizontalAccuracy];
      sub_101540A74(a1, v9, v11, v12);
    }
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    double v13 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = "low";
      if (a3 == 1) {
        uint64_t v14 = "high";
      }
      *(_DWORD *)std::string buf = 136315138;
      double v17 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "VEHICULAR: visit, confidence, %s, entry", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      goto LABEL_25;
    }
  }
}

void sub_10153DAD8(id a1)
{
  qword_1024887F0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLVehicleStateNotifierSilo"];
}

uint64_t sub_10153DB98(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10153E140;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102488800 != -1) {
    dispatch_once(&qword_102488800, block);
  }
  return qword_10248D7A0;
}

void sub_10153DE50(uint64_t a1)
{
  sub_10154087C(a1);
  *(unsigned char *)(a1 + 120_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_10232CCD0);
  }
  id v2 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "VEHICULAR: reset vehicular false positive mitigation states", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::resetVehicularFalsePositiveSuppressionDnd()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_10153E140()
{
}

void sub_10153E18C()
{
}

void sub_10153E1B0(uint64_t a1, void *a2)
{
  id v3 = (void *)sub_10153EDEC(a1, "CLVehicleStateNotifier", a2);
  void *v3 = off_10232CAF8;
  bzero(v3 + 14, 0x330uLL);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 144) = _Q0;
  *(void *)(a1 + 92_Block_object_dispose(&STACK[0x310], 8) = 0xBFF0000000000000;
  CLMotionActivity::getInit((uint64_t *)(a1 + 936), v9);
  *(_OWORD *)(a1 + 108_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 1103) = 0;
  double v10 = operator new(0x20uLL);
  void *v10 = off_10232CDE0;
  v10[1] = sub_101540EF4;
  void v10[2] = 0;
  v10[3] = a1;
  operator new();
}

void sub_10153EB90(_Unwind_Exception *a1)
{
  uint64_t v8 = *v6;
  *double v6 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_100C0AB60(v4);
  sub_100EBBF9C(v3);
  uint64_t v9 = v1[162];
  v1[162] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *v5;
  *long long v5 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_1003C2C38(v1 + 139, 0);
  uint64_t v11 = v1[17];
  v1[17] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v1[16];
  v1[16] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v1[15];
  v1[15] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *v2;
  *id v2 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  sub_10153F9F4((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10153EDEC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10232CD00;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = 0;
  return a1;
}

void sub_10153EE7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10153EE98(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    double v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onVehicleConnectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    double v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onVehicleConnectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  memcpy((void *)(a4 + 144), a3, 0x318uLL);
  sub_1000A32B8(a4);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10153F058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10153F078(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101540D2C(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10153F22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10153F24C(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (*a2 == 8)
  {
    *(unsigned char *)(a4 + 1292) = *a3;
    sub_1000A32B8(a4);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10153F414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10153F434(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_101541224(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10153F5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10153F608(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (*a2 == 1) {
    *(unsigned char *)(a4 + 1106) = *(unsigned char *)(a3 + 4);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10153F7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10153F7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    long long v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onCarAutomaticDNDTriggeringPreferenceChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v11 = 2082;
      *(void *)&_OWORD v11[2] = "";
      *(_WORD *)&_OWORD v11[10] = 2082;
      *(void *)&v11[12] = "activity";
      *(_WORD *)&v11[20] = 2050;
      *(void *)&v11[22] = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onCarAutomaticDNDTriggeringPreferenceChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  uint64_t v7 = *(void **)(a4 + 1128);
  *(void *)std::string buf = _NSConcreteStackBlock;
  *(void *)char v11 = 3221225472;
  *(void *)&v11[8] = sub_1015414AC;
  *(void *)&v11[16] = &unk_10232CBC8;
  *(void *)&v11[24] = a4;
  [v7 fetchAutomaticDNDTriggerPreferenceWithReply:buf];
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10153F9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10153F9F4(uint64_t a1)
{
  *(void *)a1 = off_10232CD00;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10153FA78(uint64_t a1)
{
  *(void *)a1 = off_10232CAF8;

  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;

  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 108_Block_object_dispose(&STACK[0x310], 8) = 0;

  *(void *)(a1 + 1360) = 0;
  uint64_t v2 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  uint64_t v3 = *(void *)(a1 + 1568);
  if (v3)
  {
    sub_100D0C8F8(v3);
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100C0AB60(a1 + 1368);
  sub_100EBBF9C(a1 + 1304);
  uint64_t v5 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1296) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 1120);
  *(void *)(a1 + 1120) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1003C2C38((uint64_t *)(a1 + 1112), 0);
  uint64_t v7 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }

  return sub_10153F9F4(a1);
}

void sub_10153FCD0(uint64_t a1)
{
  sub_10153FA78(a1);

  operator delete();
}

uint64_t sub_10153FD08(uint64_t a1)
{
  if (*(int *)(a1 + 1312) >= 1) {
    sub_100EBC6AC(a1 + 1304);
  }
  uint64_t result = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = 1;
  return result;
}

uint64_t sub_10153FD74(uint64_t a1, _DWORD *a2)
{
  if (!*a2) {
    sub_10153FD98(a1);
  }
  return 1;
}

void sub_10153FD98(uint64_t a1)
{
  *(_DWORD *)std::string buf = 0;
  int v2 = sub_1001072EC(a1, (int *)buf, 1);
  int v3 = v2;
  if (*(unsigned char *)(a1 + 1352))
  {
    if (*(unsigned char *)(a1 + 1104)
      || *(unsigned char *)(a1 + 1105)
      || *(void *)(a1 + 1152) == 2
      || !*(unsigned char *)(a1 + 1353)
      || v2 <= 0)
    {
      if (*(int *)(a1 + 1312) >= 1)
      {
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        uint64_t v4 = qword_102419018;
        if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
        {
          int v5 = *(unsigned __int8 *)(a1 + 1104);
          int v6 = *(unsigned __int8 *)(a1 + 1105);
          uint64_t v7 = *(void *)(a1 + 1152);
          int v8 = *(unsigned __int8 *)(a1 + 1353);
          *(_DWORD *)std::string buf = 67175681;
          int v29 = v5;
          __int16 v30 = 1025;
          int v31 = v6;
          __int16 v32 = 2049;
          uint64_t v33 = v7;
          __int16 v34 = 1025;
          int v35 = v8;
          __int16 v36 = 1025;
          BOOL v37 = v3 > 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Releasing power assertion and disabling proactive gps, loi, %{private}d, stationaryWifi, %{private}d, state, %{private}lu, auth, %{private}d, clients, %{private}d", buf, 0x24u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419010 != -1) {
            dispatch_once(&qword_102419010, &stru_10232CCD0);
          }
          int v10 = *(unsigned __int8 *)(a1 + 1104);
          int v11 = *(unsigned __int8 *)(a1 + 1105);
          uint64_t v12 = *(void *)(a1 + 1152);
          int v13 = *(unsigned __int8 *)(a1 + 1353);
          int v18 = 67175681;
          int v19 = v10;
          __int16 v20 = 1025;
          int v21 = v11;
          __int16 v22 = 2049;
          uint64_t v23 = v12;
          __int16 v24 = 1025;
          int v25 = v13;
          __int16 v26 = 1025;
          BOOL v27 = v3 > 0;
          __int16 v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::checkAndToggleGPS()", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        sub_100EBC6AC(a1 + 1304);
      }
      [*(id *)(*(void *)(a1 + 1560) + 16) unregister:*(void *)(*(void *)(a1 + 1560) + 8) forNotification:0];
      *(unsigned char *)(a1 + 1352) = 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 1104) && !*(unsigned char *)(a1 + 1105) && *(void *)(a1 + 1152) != 2)
  {
    if (*(unsigned char *)(a1 + 1353))
    {
      if (v2 >= 1)
      {
        *(unsigned char *)(a1 + 1352) = 1;
        [*(id *)(*(void *)(a1 + 1560) + 16) register:*(void *)(*(void *)(a1 + 1560) + 8) forNotification:0 registrationInfo:0];
        if (*(int *)(a1 + 1312) <= 0)
        {
          if (qword_102419010 != -1) {
            dispatch_once(&qword_102419010, &stru_10232CCD0);
          }
          uint64_t v9 = qword_102419018;
          if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Taking power assertion and enabling proactive gps.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419010 != -1) {
              dispatch_once(&qword_102419010, &stru_10232CCD0);
            }
            LOWORD(v1_Block_object_dispose(&STACK[0x310], 8) = 0;
            __int16 v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::checkAndToggleGPS()", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
          sub_100134750(__p, "vehicular detection");
          sub_100EBBFD8(a1 + 1304, (uint64_t *)__p);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void sub_1015401E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10154020C(uint64_t a1, _DWORD *a2)
{
  if (!*a2) {
    sub_10153FD98(a1);
  }
  return 1;
}

void sub_101540230(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned __int8 v3 = [a2 isAuthorizedForServiceTypeMask:16];
  *(unsigned char *)(v2 + 1353) = v3;
  if ((v3 & 1) == 0)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    uint64_t v4 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateLocationAuthorization()_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

__n128 sub_1015403D0(uint64_t a1, int *a2, const CLMotionActivity *a3)
{
  uint64_t v5 = a1 + 936;
  if ((CLMotionActivity::isSimilar((CLMotionActivity *)(a1 + 936), (const CLMotionActivity *)a2, a3) & 1) == 0
    && ((CLMotionActivity::isInVehicle((CLMotionActivity *)v5) & 1) != 0
     || CLMotionActivity::isInVehicle((CLMotionActivity *)a2)))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    int v6 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 936);
      uint64_t v8 = *((void *)a2 + 10);
      int v9 = *a2;
      int v10 = a2[1];
      int v11 = a2[16];
      int v12 = a2[4];
      int v13 = a2[5];
      unsigned int v14 = *((unsigned __int8 *)a2 + 96);
      int v15 = a2[3];
      int v16 = a2[13];
      int v17 = *((unsigned __int8 *)a2 + 48);
      int v18 = a2[25];
      unsigned int v19 = *((unsigned __int8 *)a2 + 68);
      int v20 = *((unsigned __int8 *)a2 + 69);
      unsigned int v21 = *((unsigned __int8 *)a2 + 70);
      int v22 = *((unsigned __int16 *)a2 + 36);
      uint64_t v31 = *(void *)(a1 + 1216);
      uint64_t v32 = *(void *)(a1 + 1224);
      *(_DWORD *)std::string buf = 67115264;
      int v34 = v7;
      __int16 v35 = 1024;
      int v36 = v9;
      __int16 v37 = 2048;
      uint64_t v38 = v8;
      __int16 v39 = 1024;
      int v40 = v10;
      __int16 v41 = 1024;
      int v42 = v11;
      __int16 v43 = 1024;
      int v44 = v13;
      __int16 v45 = 1024;
      int v46 = v14 & 1;
      __int16 v47 = 1024;
      int v48 = (v14 >> 1) & 1;
      __int16 v49 = 1024;
      int v50 = (v14 >> 4) & 1;
      __int16 v51 = 1024;
      int v52 = (v14 >> 3) & 1;
      __int16 v53 = 1024;
      int v54 = (v14 >> 2) & 1;
      __int16 v55 = 1024;
      int v56 = v15;
      __int16 v57 = 1024;
      int v58 = v12;
      __int16 v59 = 1024;
      int v60 = v16;
      __int16 v61 = 1024;
      int v62 = v17;
      __int16 v63 = 1024;
      int v64 = v18;
      __int16 v65 = 1024;
      int v66 = v19 & 0xF;
      __int16 v67 = 1024;
      unsigned int v68 = v19 >> 4;
      __int16 v69 = 1024;
      int v70 = v20;
      __int16 v71 = 1024;
      int v72 = v21 & 1;
      __int16 v73 = 1024;
      int v74 = (v21 >> 1) & 1;
      __int16 v75 = 1024;
      int v76 = v22;
      __int16 v77 = 1024;
      int v78 = (v21 >> 2) & 1;
      __int16 v79 = 2048;
      uint64_t v80 = v31;
      __int16 v81 = 2048;
      uint64_t v82 = v32;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VEHICULAR transition: from,%d,to,%d,time,%f,confidence,%d,vehicleType,%d,constrained,%d,motion,%d,gps,%d,bt,%d,wifi,%d,bb,%d,mountedState,%d,mountedConfidence,%d,exitState,%d,isVehicleConnected,%d,vehicularConfidence,%d,prevFsmState,%d,curFsmState,%d,fsmEvent,%u,vehToStatic,%d,pedToMove,%d,consecStatic,%u,noRecentLoi,%d,lastLoiEnter,%lf,lastLoiExit,%lf", buf, 0xA4u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::feedMotionActivity(const CLMotionActivity &)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  long long v23 = *((_OWORD *)a2 + 1);
  long long v24 = *((_OWORD *)a2 + 2);
  long long v25 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v5 + 4_Block_object_dispose(&STACK[0x310], 8) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v5 + 64) = v25;
  *(_OWORD *)(v5 + 16) = v23;
  *(_OWORD *)(v5 + 32) = v24;
  long long v26 = *((_OWORD *)a2 + 5);
  long long v27 = *((_OWORD *)a2 + 6);
  long long v28 = *((_OWORD *)a2 + 7);
  *(void *)(v5 + 12_Block_object_dispose(&STACK[0x310], 8) = *((void *)a2 + 16);
  *(_OWORD *)(v5 + 96) = v27;
  *(_OWORD *)(v5 + 112) = v28;
  *(_OWORD *)(v5 + 80) = v26;
  sub_1000A32B8(a1);
  return result;
}

uint64_t sub_10154087C(uint64_t a1)
{
  *(unsigned char *)(a1 + 1104) = 0;
  *(CFAbsoluteTime *)(a1 + 1224) = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 1232) = xmmword_101D1C570;
  *(void *)(a1 + 124_Block_object_dispose(&STACK[0x310], 8) = 0xBFF0000000000000;
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_10232CCD0);
  }
  uint64_t v2 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "VEHICULAR: exiting DNDLOI", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::exitDndLoi()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10153FD98(a1);
  sub_1000A32B8(a1);
  uint64_t result = sub_1000D2E34(0);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 128) + 16))();
  }
  return result;
}

uint64_t sub_101540A74(uint64_t a1, double a2, double a3, double a4)
{
  *(unsigned char *)(a1 + 1104) = 1;
  *(CFAbsoluteTime *)(a1 + 1216) = CFAbsoluteTimeGetCurrent();
  double v8 = 0.0;
  if (a4 < 1000.0 && a4 > 0.0) {
    double v8 = a4;
  }
  *(double *)(a1 + 1232) = v8;
  *(double *)(a1 + 1240) = a2;
  *(double *)(a1 + 124_Block_object_dispose(&STACK[0x310], 8) = a3;
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_10232CCD0);
  }
  int v10 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 1232);
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "VEHICULAR: entering DNDLOI, range, %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::enterDndLoi(CLLocationCoordinate2D, CLLocationAccuracy)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_10153FD98(a1);
  sub_1000A32B8(a1);
  uint64_t result = sub_1000D2E34(0);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 128) + 16))();
  }
  return result;
}

id *sub_101540CBC(id *result, int a2)
{
  uint64_t v2 = result;
  if (a2 == 2)
  {
    if (*((_DWORD *)result + 322) != 3) {
      return result;
    }
    uint64_t result = (id *)[result[137] stopMonitoringTransitStateForClient:result[136]];
    int v3 = 4;
    goto LABEL_7;
  }
  if (a2 == 1 && *((_DWORD *)result + 322) != 3)
  {
    uint64_t result = (id *)[result[137] startMonitoringTransitStateForClient:result[136]];
    int v3 = 3;
LABEL_7:
    *((_DWORD *)v2 + 322) = v3;
  }
  return result;
}

void sub_101540D2C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_10232CCD0);
  }
  int v6 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a4;
    *(_DWORD *)std::string buf = 67240192;
    int v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VEHICULAR: Received transit navigation state: %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onTransitNavigationStateUpdateNotification(int, const CLCachedLocationController_Type::Notification &, const CLCachedLocationController_Type::NotificationData &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)(a1 + 1272) = *a4;
  sub_1000A32B8(a1);
}

void sub_101540EF4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    if (!sub_101576750(*(void *)(a1 + 1112)))
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      uint64_t v4 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "VEHICULAR: WiFi dis-associated, update vehicular state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_1000A32B8(a1);
    }
    BOOL v5 = sub_101576750(*(void *)(a1 + 1112)) && !sub_101576770(*(void *)(a1 + 1112));
    *(unsigned char *)(a1 + 1105) = v5;
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    int v6 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int8 *)(a1 + 1105);
      *(_DWORD *)std::string buf = 67174657;
      int v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "VEHICULAR: WiFi isStationary, %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_10153FD98(a1);
  }
}

void sub_101541224(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 == 14)
  {
    BOOL v5 = *(void **)(a1 + 1360);
    *(void *)std::string buf = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    int v12 = sub_101540230;
    int v13 = &unk_1022C2590;
    uint64_t v14 = a1;
    [v5 getAuthorizationContextOfNonZonalClient:[NSString stringWithUTF8String:"com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle"] withReply:buf];
    sub_10153FD98(a1);
  }
  else if (*a3)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232CCB0);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      int v8 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Warning VEHICULAR: Received unhandled location notification, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232CCB0);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVehicleStateNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    uint64_t v4 = a1 + 1368;
    sub_100C0C648(v4);
  }
}

void sub_1015414AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232CCB0);
    }
    int v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#error when retrieving Car Automatic DND Trigger Preference", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232CCB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::retrieveCarAutomaticDNDTriggeringPreference()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(void **)(v5 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_101541690;
    void v7[3] = &unk_1022B8660;
    void v7[4] = v5;
    void v7[5] = a2;
    [v6 async:v7];
  }
}

void sub_101541690(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 < 3) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(v1 + 1136) = v3;
  sub_1000A32B8(v1);
}

void sub_1015416A8(uint64_t a1, _OWORD *a2)
{
  if (!*(void *)(a1 + 1080))
  {
    sub_10153DE50(a1);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    int v9 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "VEHICULAR: Error retrieving LOIs. CLRoutineMonitor is not supported", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    __int16 v14 = 0;
    int v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)", "%s\n");
LABEL_21:
    if (v10 != buf) {
      free(v10);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 1106))
  {
    id v4 = objc_alloc((Class)CLLocation);
    long long v5 = a2[7];
    v12[6] = a2[6];
    v12[7] = v5;
    v13[0] = a2[8];
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)((char *)a2 + 140);
    long long v6 = a2[3];
    void v12[2] = a2[2];
    void v12[3] = v6;
    long long v7 = a2[5];
    v12[4] = a2[4];
    void v12[5] = v7;
    long long v8 = a2[1];
    v12[0] = *a2;
    v12[1] = v8;
    [v4 initWithClientLocation:v12];
    [*(id *)(a1 + 1080) fetchLocationsOfInterestWithinDistance:150.0 ofLocation:];
    return;
  }
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_10232CCD0);
  }
  uint64_t v11 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "VEHICULAR: Error retrieving LOIs, since device is locked", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    __int16 v14 = 0;
    int v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)", "%s\n");
    goto LABEL_21;
  }
}

id sub_101541A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_101541A98;
  void v6[3] = &unk_1022B6D48;
  void v6[4] = a3;
  _DWORD v6[5] = a2;
  v6[6] = *(void *)(a1 + 32);
  v6[7] = v3;
  return [v4 async:v6];
}

void sub_101541A98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 32))
  {
    sub_10153DE50(*(void *)(a1 + 56));
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    uint64_t v3 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v37 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "VEHICULAR: Error retrieving LOIs. %{public}@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    uint64_t v27 = *(void *)(a1 + 32);
    int v34 = 138543362;
    uint64_t v35 = v27;
    long long v26 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke", "%s\n");
LABEL_49:
    if (v26 != buf) {
      free(v26);
    }
    return;
  }
  if (![*(id *)(a1 + 40) count])
  {
    *(unsigned char *)(v2 + 1209) = 1;
    if (!*(unsigned char *)(v2 + 1208)) {
      return;
    }
    *(unsigned char *)(v2 + 120_Block_object_dispose(&STACK[0x310], 8) = 0;
    sub_1000A32B8(v2);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    uint64_t v11 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "VEHICULAR: No LOIs near fast suppression range", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    LOWORD(v34) = 0;
LABEL_45:
    long long v26 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke", "%s\n");
    goto LABEL_49;
  }
  if (!*(unsigned char *)(v2 + 1209))
  {
    *(unsigned char *)(v2 + 1209) = 1;
    [*(id *)(a1 + 48) coordinate];
    double v21 = v20;
    double v23 = v22;
    [*(id *)(a1 + 48) horizontalAccuracy];
    sub_101540A74(v2, v21, v23, v24);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    long long v25 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "VEHICULAR: recover visit, confidence, high, entry", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    LOWORD(v34) = 0;
    goto LABEL_45;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v5 = *(void **)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v30;
    while (2)
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        if (![v10 type] || objc_msgSend(v10, "type") == (id)1)
        {
          if (!*(unsigned char *)(v2 + 1208))
          {
            [objc_msgSend(v10, "location") latitude];
            double v13 = v12;
            [objc_msgSend(v10, "location") longitude];
            double v15 = v14;
            [*(id *)(a1 + 48) coordinate];
            double v17 = v16;
            [*(id *)(a1 + 48) coordinate];
            if (sub_1000A3D9C(v13, v15, v17, v18) < 60.0)
            {
              *(unsigned char *)(v2 + 120_Block_object_dispose(&STACK[0x310], 8) = 1;
              if (qword_102419010 != -1) {
                dispatch_once(&qword_102419010, &stru_10232CCD0);
              }
              unsigned int v19 = qword_102419018;
              if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "VEHICULAR: fast suppression range detected", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419010 != -1) {
                  dispatch_once(&qword_102419010, &stru_10232CCD0);
                }
                LOWORD(v34) = 0;
                long long v28 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)_block_invoke", "%s\n", v28);
                if (v28 != (char *)buf) {
                  free(v28);
                }
              }
              sub_1000A32B8(v2);
            }
          }
          return;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  *(unsigned char *)(v2 + 120_Block_object_dispose(&STACK[0x310], 8) = 0;
}

void sub_101542118(uint64_t a1)
{
  uint64_t v1 = (id *)&kCMMotionCuesEnterVehicularStateNotification;
  if (*(void *)(a1 + 1184) != 2) {
    uint64_t v1 = (id *)&kCMMotionCuesExitVehicularStateNotification;
  }
  id v2 = *v1;
  if (notify_post((const char *)[*v1 UTF8String]))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    uint64_t v3 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[MotionCues] VEHICULAR: Could not post state associated with vehicular state changed notification.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVehicleStateNotifier::notifyMotionCues()", "%s\n");
LABEL_21:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10232CCD0);
    }
    long long v5 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      id v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MotionCues] VEHICULAR: successfully posted notification, %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::notifyMotionCues()", "%s\n");
      goto LABEL_21;
    }
  }
}

void sub_101542400(void *a1)
{
  if ((sub_1000A16E8() & 0x800000000) != 0)
  {
    uint64_t v2 = a1[144];
    uint64_t v3 = a1[145];
    uint64_t v4 = a1[146];
    int v10 = 0;
    *(void *)&long long buf = v2;
    *((void *)&buf + 1) = v3;
    uint64_t v13 = v4;
    (*(void (**)(void *, int *, long long *, uint64_t, uint64_t, void))(*a1 + 152))(a1, &v10, &buf, 1, 0xFFFFFFFFLL, 0);
    int v10 = 1;
    *(void *)&long long buf = v2;
    *((void *)&buf + 1) = v3;
    uint64_t v13 = v4;
    (*(void (**)(void *, int *, long long *, uint64_t, uint64_t, void))(*a1 + 152))(a1, &v10, &buf, 1, 0xFFFFFFFFLL, 0);
    if (sub_1000FC450())
    {
      CFStringRef v14 = @"Mode";
      double v15 = +[NSNumber numberWithInt:*((unsigned int *)a1 + 288)];
      sub_1000FC494((uint64_t)+[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1], (uint64_t)"VehicularDetection");
    }
    uint64_t v5 = kCMVehicularStateChangedNotification;
    if (notify_post((const char *)[kCMVehicularStateChangedNotification UTF8String]))
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      id v6 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "VEHICULAR: Could not post state associated with vehicular state changed notification.", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        LOWORD(v10) = 0;
LABEL_13:
        id v7 = (long long *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVehicleStateNotifier::notifyVehicularDnd()", "%s\n");
LABEL_33:
        if (v7 != &buf) {
          free(v7);
        }
      }
    }
    else if (a1[143] == 2 {
           && notify_post((const char *)[kCMVehicularStateChangedToVehicularNotification UTF8String]))
    }
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      uint64_t v8 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "VEHICULAR: Could not post kCMVehicularStateChangedToVehicularNotification.", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        LOWORD(v10) = 0;
        goto LABEL_13;
      }
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10232CCD0);
      }
      int v9 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "VEHICULAR: successfully posted notification, %@", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_10232CCD0);
        }
        int v10 = 138412290;
        uint64_t v11 = v5;
        id v7 = (long long *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleStateNotifier::notifyVehicularDnd()", "%s\n");
        goto LABEL_33;
      }
    }
  }
}

uint64_t sub_1015428D0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_10232CEE8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    double v12 = a3;
  }
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1015429B4()
{
}

void sub_101542A70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_101542AAC(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232CC70);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        unsigned int v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10232CC70);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        double v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101542D3C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101542DF0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101542E38(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101542E80(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_101542EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024794C8);
}

uint64_t sub_101542EF4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          long long v29 = (uint64_t *)v25;
        }
        else {
          long long v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        memset(buf, 0, 24);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101545924();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024794C9;
        int v39 = v17;
        *(void *)long long buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        int v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    double v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    *(_DWORD *)int v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10154339C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      double v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232CC70);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101543620(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232CC70);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232CC70);
                }
                long long v29 = a1 + 8;
                if (a1[31] < 0) {
                  long long v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1015439F4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x30uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = (uint64_t)off_10232CE78;
  *(_OWORD *)(v6 + 3) = *(_OWORD *)a3;
  _DWORD v6[5] = *(void *)(a3 + 16);
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  unsigned char v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_101543AB0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101543AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_101543B1C(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    long long v29 = v30;
    memset(v30, 0, sizeof(v30));
    long long v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x30uLL);
    v18[1] = 0;
    v18[2] = 0;
    uint64_t *v18 = (uint64_t)off_10232CE78;
    *(_OWORD *)(v18 + 3) = *(_OWORD *)a3;
    v18[5] = *(void *)(a3 + 16);
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1015449DC();
  }
  os_activity_scope_leave(&state);
}

void sub_101544108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101544154(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232CC70);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232CC70);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232CC70);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10232CC70);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232CC70);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101544704(uint64_t a1)
{
  sub_1015458B4(a1);

  operator delete();
}

id sub_10154473C(uint64_t a1, int a2, void *a3)
{
  id result = sub_101545014(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10154478C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_1015447BC()
{
  if (qword_102488810 != -1) {
    dispatch_once(&qword_102488810, &stru_10232CC90);
  }
  Class result = objc_getClass("CARAutomaticDNDStatus");
  qword_102488808 = (uint64_t)result;
  off_1024794C0 = sub_101544820;
  return result;
}

uint64_t sub_101544820()
{
  return qword_102488808;
}

void sub_10154482C(id a1)
{
  qword_102488818 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CarKit.framework/CarKit", 2);
}

void sub_101544858(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101544888(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

__n128 sub_1015448B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_10232CDE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10154490C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10232CDE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = result;
  return result;
}

uint64_t sub_101544944(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  int v3 = (uint64_t (*)(void *, void))a1[1];
  int v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    int v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_101544990(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1015449D0()
{
}

void sub_1015449DC()
{
}

void sub_101544A90(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int16 v49 = v9;
        id v13 = sub_101545014(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_101544E80(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              long long v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  long long v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int16 v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232CC70);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                __int16 v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232CC70);
                }
                __int16 v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                __int16 v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                __int16 v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLVehicleStateNotifier_Type::Notification, CLVehicleStateNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLVehicleStateNotifier_Type::Notification, NotificationData_T = CLVehicleStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101544E80(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_101545014(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_101544F78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10232CE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101544F98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10232CE78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101544FF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_101545014(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1015450B0(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_10154543C(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1015450B0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1015457FC((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10232CEB8);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101E10652 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_10232CEB8);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101E10652 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_10232CEB8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101E10652 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleStateNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_10154543C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232CEB8);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E10652 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleStateNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232CEB8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E10652 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10232CEB8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1015457FC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102395198))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)24) {
      sub_101ABBF50();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_101545884(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1015458B4(uint64_t a1)
{
  *(void *)a1 = &off_10232CEE8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101545924()
{
}

uint64_t sub_1015459D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_1015459F8()
{
}

void sub_101545A6C()
{
}

uint64_t sub_101545A90()
{
  if (qword_102488820 != -1) {
    dispatch_once(&qword_102488820, &stru_10232CF00);
  }
  return qword_10248D7A8;
}

void *sub_101545AD8(void *a1)
{
  *a1 = off_10232CF30;
  id v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4(a1);
}

void sub_101545B38(void *a1)
{
  sub_101545AD8(a1);

  operator delete();
}

void sub_101545B70(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    return;
  }
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  if (v5) {
    goto LABEL_14;
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10232CF78);
  }
  int v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Building AccessoryWake device", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10232CF78);
    }
    __int16 v13 = 0;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPencilMotion::numberOfSpectatorsChanged(int, size_t)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  char v7 = (uint64_t *)sub_100A26784();
  uint64_t v11 = 0x330000FF00;
  char v12 = 0;
  sub_101A46D60(v7, (uint64_t)&v11, (uint64_t *)buf);
  long long v8 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  __int16 v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  if (!v9)
  {
    uint64_t v5 = (uint64_t *)v8;
    if (!(void)v8) {
      return;
    }
    goto LABEL_14;
  }
  sub_1000DB0A0(v9);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
LABEL_14:
    if (a3) {
      sub_100A2932C(v5, (uint64_t)sub_101545D9C, a1);
    }
    else {
      sub_100A2932C(v5, 0, 0);
    }
  }
}

void sub_101545D9C()
{
  if (IOHIDEventGetType() == 1)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10232CF78);
    }
    id v0 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Empty payload, returning", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10232CF78);
      }
      uint64_t v1 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLPencilMotion::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)", "%s\n");
      if (v1 != buf) {
        free(v1);
      }
    }
  }
}

double sub_1015460C8(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10232CF78);
    }
    int v3 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    double v4 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10232CF78);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLPencilMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_100A29D64(v6, *a3);
      return *a3;
    }
    else
    {
      return 0.0;
    }
  }
  return v4;
}

uint64_t sub_101546284(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10232CF78);
  }
  double v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)long long buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PencilMotion report %u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10232CF78);
    }
    char v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPencilMotion::onMotion(CFTimeInterval, CLPencilMotion::Report &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return sub_1000E7BA0(a1, 0, (uint64_t)a2, 16);
}

void sub_101546458(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_101546904()
{
}

id sub_101546930(uint64_t a1, void *a2)
{
  return _[a2 onMslp:a1];
}

void sub_101547554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void sub_101547F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101548498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015497E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101549804(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    char v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMMatrix<double, 15>::operator()(size_t, size_t) [T = double, M = 15, N = 15]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    int v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMMatrix<double, 15>::operator()(size_t, size_t) [T = double, M = 15, N = 15]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 8 * (a2 - a3 + 16 * a3);
}

BOOL sub_101549B64(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_10155067C(a2);
  if (result)
  {
    unint64_t v5 = 15;
    unint64_t v6 = 14;
    while (1)
    {
      unint64_t v7 = v6;
      double v8 = sub_101550760(a2, v6, v6);
      unint64_t v9 = v5;
      if (v5 <= 0xE)
      {
        do
        {
          double v10 = *(double *)sub_101550AC0(a1 + 120, v7, v9);
          double v11 = *(double *)sub_101550AC0(a1 + 120, v7, v9);
          double v8 = v8 + -(v10 * v11) * *(double *)sub_101550E1C(a1, v9++);
        }
        while (v9 != 15);
      }
      *(double *)sub_101550E1C(a1, v7) = v8;
      if (*(double *)sub_101550E1C(a1, v7) <= 0.0) {
        break;
      }
      if (v7)
      {
        unint64_t v12 = v5 - 2;
        do
        {
          unint64_t v13 = v12;
          double v14 = sub_101550760(a2, v12, v7);
          unint64_t v15 = v5;
          if (v5 <= 0xE)
          {
            do
            {
              double v16 = *(double *)sub_101550AC0(a1 + 120, v13, v15);
              double v17 = *(double *)sub_101550AC0(a1 + 120, v7, v15);
              double v14 = v14 + -(v16 * v17) * *(double *)sub_101550E1C(a1, v15++);
            }
            while (v15 != 15);
          }
          double v18 = v14 / *(double *)sub_101550E1C(a1, v7);
          *(double *)sub_101550AC0(a1 + 120, v13, v7) = v18;
          unint64_t v12 = v13 - 1;
        }
        while (v13);
      }
      unint64_t v6 = v7 - 1;
      unint64_t v5 = v7;
      if (!v7) {
        return 1;
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    unint64_t v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 15>::factor(const CMMatrix<T, N, N> &) [T = double, N = 15]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_101549E9C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    unint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 15;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMVector<double, 15>::operator[](const size_t) [T = double, N = 15]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 8 * a2;
}

uint64_t sub_10154A078(uint64_t a1, uint64_t a2)
{
  if (sub_101550FF8(a1, 0) == 0.0)
  {
    BOOL v4 = 0;
    unint64_t v5 = 0;
LABEL_7:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    unint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "D[%zu] == 0, semidefinite matrix!", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 15>::solve(CMVector<T, N> &) const [T = double, N = 15]", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  else
  {
    unint64_t v6 = -1;
    while (v6 != 13)
    {
      double v7 = sub_101550FF8(a1, v6 + 2);
      ++v6;
      if (v7 == 0.0)
      {
        BOOL v4 = v6 > 0xD;
        unint64_t v5 = v6 + 1;
        goto LABEL_7;
      }
    }
    uint64_t v10 = a1 + 120;
    unint64_t v11 = 14;
    uint64_t v12 = 13;
    do
    {
      unint64_t v13 = v11;
      unint64_t v11 = v12;
      do
      {
        double v14 = *(double *)sub_101549E9C(a2, v13);
        double v15 = sub_1015511D4(a1 + 120, v11, v13);
        double v16 = (double *)sub_101549E9C(a2, v11);
        *double v16 = *v16 - v14 * v15;
        ++v13;
      }
      while (v13 != 15);
      uint64_t v12 = v11 - 1;
    }
    while (v11);
    do
    {
      double v17 = sub_101550FF8(a1, v11);
      double v18 = (double *)sub_101549E9C(a2, v11);
      double *v18 = *v18 / v17;
      ++v11;
    }
    while (v11 != 15);
    unint64_t v19 = 0;
    do
    {
      unint64_t v20 = v19++;
      if (v20 <= 0xD)
      {
        unint64_t v21 = v19;
        do
        {
          double v22 = *(double *)sub_101549E9C(a2, v20);
          double v23 = sub_1015511D4(v10, v20, v21);
          BOOL v24 = (double *)sub_101549E9C(a2, v21);
          double *v24 = *v24 - v22 * v23;
          ++v21;
        }
        while (v21 != 15);
      }
    }
    while (v19 != 15);
    return 1;
  }
  return v4;
}

void sub_10154A5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10154AC54(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v62 = 0.0;
    id v5 = [*(id *)(*(void *)(a1 + 32) + 16) latestAbsoluteAltitude];
    double v6 = 0.0;
    if (v5)
    {
      double v7 = v5;
      [v5 timestamp];
      double v8 = 0.0;
      if (v9 != 1.79769313e308)
      {
        [v7 altitude];
        double v8 = v10;
        [v7 accuracy];
        double v6 = v11;
      }
    }
    else
    {
      double v8 = 0.0;
    }
    [*(id *)(*(void *)(a1 + 32) + 32) removeAllObjects];
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id v14 = [a2 countByEnumeratingWithState:&v58 objects:v71 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v59;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v59 != v15) {
            objc_enumerationMutation(a2);
          }
          double v17 = *(void **)(*((void *)&v58 + 1) + 8 * i);
          [v17 meanSeaLevelPressure];
          if (v18 >= 80000.0 && v18 <= 115000.0) {
            [*(id *)(*(void *)(a1 + 32) + 32) addObject:v17];
          }
        }
        id v14 = [a2 countByEnumeratingWithState:&v58 objects:v71 count:16];
      }
      while (v14);
    }
    [*(id *)(*(void *)(a1 + 32) + 40) removeAllObjects];
    [*(id *)(a1 + 32) clearRecentMeanSeaLevelPressureArrayInPlist];
    *(void *)(*(void *)(a1 + 32) + 8_Block_object_dispose(&STACK[0x310], 8) = 0x7FEFFFFFFFFFFFFFLL;
    unint64_t v19 = *(void **)(a1 + 32);
    uint64_t v20 = v19[4];
    sub_100134750(__p, "finish refreshing mean sea level pressure:");
    [v19 printMeanSeaLevelPressureArray:v20 withPrePhrase:__p];
    if (v57 < 0) {
      operator delete(__p[0]);
    }
    [*(id *)(a1 + 32) getAndSendCurrentEstimateMeanSeaLevelPressureFrom:0];
    unsigned int v21 = [*(id *)(a1 + 32) getLastPressureSample:&v62];
    if (v21)
    {
      double v22 = v62;
      [*(id *)(*(void *)(a1 + 32) + 56) meanSeaLevelPressure];
      float v23 = v22;
      float v25 = v24;
      float v26 = sub_1001C1F30(v23, v25);
      double v27 = v62;
      [*(id *)(*(void *)(a1 + 32) + 56) meanSeaLevelPressure];
      float v28 = v27;
      float v30 = v29;
      sub_1014BE614(v28, v30);
      LODWORD(v27) = v31;
      [*(id *)(*(void *)(a1 + 32) + 56) uncertainty];
      double v33 = v32 * *(float *)&v27;
      if (v8 == 0.0
        || (v34 = *(void *)(a1 + 32), double v35 = *(double *)(v34 + 216), v35 == 1.79769313e308)
        || (double v36 = *(double *)(v34 + 112), v36 == 1.79769313e308)
        || (*(_DWORD *)(v34 + 252) & 0x80000000) != 0
        || *(double *)(v34 + 312) == 1.79769313e308)
      {
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232CFE8);
        }
        BOOL v38 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = *(void *)(a1 + 32);
          uint64_t v40 = *(void *)(v39 + 216);
          uint64_t v41 = *(void *)(v39 + 112);
          int v42 = *(_DWORD *)(v39 + 252);
          uint64_t v43 = *(void *)(v39 + 312);
          *(_DWORD *)long long buf = 134218752;
          uint64_t v73 = v40;
          __int16 v74 = 2048;
          uint64_t v75 = v41;
          __int16 v76 = 1024;
          int v77 = v42;
          __int16 v78 = 2048;
          uint64_t v79 = v43;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "fail to send mslp refresh event to CA,pressureAtRefresh,%f,lastSuccessfulRefreshTimestamp,%f,numberOfRebaseBtwRefresh,%d,maxPressure,%f", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_10232CFE8);
          }
          uint64_t v50 = *(void *)(a1 + 32);
          uint64_t v51 = *(void *)(v50 + 216);
          uint64_t v52 = *(void *)(v50 + 112);
          int v53 = *(_DWORD *)(v50 + 252);
          uint64_t v54 = *(void *)(v50 + 312);
          int v63 = 134218752;
          uint64_t v64 = v51;
          __int16 v65 = 2048;
          uint64_t v66 = v52;
          __int16 v67 = 1024;
          int v68 = v53;
          __int16 v69 = 2048;
          uint64_t v70 = v54;
          __int16 v55 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v55);
          if (v55 != (char *)buf) {
            free(v55);
          }
        }
      }
      else
      {
        [v34 sentRefreshMslpAnalyticsWithAltitudeCorrection:v26 - v8 uncertaintyBeforeCurrentRefresh:v6 uncertaintyAfterCurrentRefresh:v33 refreshDuration:(*(double *)(a1 + 40) - *(double *)(a1 + 48)) / 60.0 xpcWaitingTime:(Current - *(double *)(v34 + 264)) / 60.0 timeDiffBtwRefresh:(Current - v36) / 60.0 pressureDelta:vabdd_f64(v62, v35)];
      }
    }
    else
    {
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232CFE8);
      }
      int v37 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "current pressure is not available.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10232CFE8);
        }
        LOWORD(v63) = 0;
        __int16 v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v49);
        if (v49 != (char *)buf) {
          free(v49);
        }
      }
      double v33 = 1.79769313e308;
    }
    *(void *)(*(void *)(a1 + 32) + 200) = *(void *)(*(void *)(a1 + 32) + 280);
    *(void *)(*(void *)(a1 + 32) + 20_Block_object_dispose(&STACK[0x310], 8) = *(void *)(*(void *)(a1 + 32) + 288);
    *(unsigned char *)(*(void *)(a1 + 32) + 249) = 0;
    *(_DWORD *)(*(void *)(a1 + 32) + 252) = 0;
    *(_DWORD *)(*(void *)(a1 + 32) + 256) = 0;
    *(_DWORD *)(*(void *)(a1 + 32) + 224) = 0;
    *(void *)(*(void *)(a1 + 32) + 304) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(*(void *)(a1 + 32) + 312) = 0x7FEFFFFFFFFFFFFFLL;
    double v44 = v62;
    if (!v21) {
      double v44 = 1.79769313e308;
    }
    *(double *)(*(void *)(a1 + 32) + 216) = v44;
    *(double *)(*(void *)(a1 + 32) + 192) = v33;
    *(double *)(*(void *)(a1 + 32) + 112) = Current;
    *(double *)(*(void *)(a1 + 32) + 264) = Current;
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10232CFE8);
    }
    __int16 v45 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = *(void *)(*(void *)(a1 + 32) + 264);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v73 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "last refresh timestamp update to,lastRefreshTimestamp,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232CFE8);
      }
      uint64_t v47 = *(void *)(*(void *)(a1 + 32) + 264);
      int v63 = 134217984;
      uint64_t v64 = v47;
      int v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    [*(id *)(a1 + 32) writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp:Current];
    [*(id *)(a1 + 32) saveMeanSeaLevelPressureArrayToPlist];
  }
  else
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10232CFE8);
    }
    uint64_t v12 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "finish refreshing mean sea level pressure array with zero element.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10232CFE8);
      }
      LOWORD(v63) = 0;
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMeanSeaLevelPressureEstimator refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:]_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_10154B570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_10154BC88(uint64_t a1)
{
  v3[0] = @"altitudeCorrection";
  v4[0] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v3[1] = @"minMaxPressureDelta";
  v4[1] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 312) - *(double *)(*(void *)(a1 + 32) + 304)];
  void v3[2] = @"pressureDelta";
  _OWORD v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  v3[3] = @"numberOfRebase";
  void v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 252)];
  void v3[4] = @"numberOfTrackEnded";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 256)];
  v3[5] = @"numberOfWeatherUpdate";
  v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 224)];
  v3[6] = @"refreshDuration";
  v4[6] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  v3[7] = @"timeDiffBtwRefresh";
  v4[7] = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  v3[8] = @"travelingDistance";
  v4[8] = +[NSNumber numberWithDouble:*(double *)(a1 + 72)];
  v3[9] = @"uncertaintyAfterFormerRefresh";
  v4[9] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 192)];
  v3[10] = @"uncertaintyAfterLatterRefresh";
  v4[10] = +[NSNumber numberWithDouble:*(double *)(a1 + 80)];
  v3[11] = @"uncertaintyBeforeLatterRefresh";
  v4[11] = +[NSNumber numberWithDouble:*(double *)(a1 + 88)];
  v3[12] = @"xpcWaitingTime";
  v4[12] = +[NSNumber numberWithDouble:*(double *)(a1 + 96)];
  v3[13] = @"firstRefreshAfterVisit";
  v4[13] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 249)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:14];
}

void sub_10154C330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10154D2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_10154D8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  sub_101706914((PB::Base *)&a22);
  _Unwind_Resume(a1);
}

void sub_10154EA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10154ED00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10154FF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101550064(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_101550098(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_1015500C8(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10232D058;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101550250;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_101550264;
  void v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101550228(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101550250(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101550264(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101550280(uint64_t a1)
{
  sub_101550574(a1);

  operator delete();
}

id sub_1015502B8(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232D028);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315906;
      unint64_t v29 = 0x8000000101E1072FLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v30 = 2048;
      uint64_t v31 = 16;
      __int16 v32 = 2048;
      unint64_t v33 = a4;
      __int16 v34 = 1024;
      int v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232D028);
      }
      int v20 = 136315906;
      unint64_t v21 = 0x8000000101E1072FLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v22 = 2048;
      uint64_t v23 = 16;
      __int16 v24 = 2048;
      unint64_t v25 = a4;
      __int16 v26 = 1024;
      int v27 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMMeanSeaLevelPressure>::dispatchData(int, const void *, size_t) [T = CLBarometerCalibration_Types::CMMeanSeaLevelPressure]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  unint64_t v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1015505F0;
  uint64_t v16[3] = &unk_1022F1228;
  void v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v10;
  return [v13 async:v16];
}

uint64_t sub_101550574(uint64_t a1)
{
  *(void *)a1 = off_10232D058;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_1015505F0(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    int v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[8];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_10155064C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_10155067C(uint64_t a1)
{
  BOOL v2 = 0;
  unint64_t v3 = 0;
LABEL_2:
  unint64_t v4 = v3++;
  unint64_t v5 = v3;
  while (1)
  {
    double v6 = sub_101550760(a1, v4, v5);
    double v7 = v6 - sub_101550760(a1, v5, v4);
    double v8 = sub_101550760(a1, v4, v5);
    double v9 = v8 - sub_101550760(a1, v5, v4);
    if (v7 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 1.00000002e-16) {
      return v2;
    }
    if (++v5 == 15)
    {
      BOOL v2 = v4 > 0xC;
      if (v3 != 14) {
        goto LABEL_2;
      }
      return 1;
    }
  }
}

double sub_101550760(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMMatrix<double, 15>::operator()(size_t, size_t) const [T = double, M = 15, N = 15]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    double v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMMatrix<double, 15>::operator()(size_t, size_t) const [T = double, M = 15, N = 15]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return *(double *)(a1 + 8 * (a2 - a3 + 16 * a3));
}

uint64_t sub_101550AC0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 15]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    double v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 15]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_101550E1C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    unint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 15;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 15>::DiagonalMatrix::operator()(size_t) [T = double, N = 15]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 8 * a2;
}

double sub_101550FF8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    unint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 15;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMFactoredMatrix<double, 15>::DiagonalMatrix::operator()(size_t) const [T = double, N = 15]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(double *)(a1 + 8 * a2);
}

double sub_1015511D4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 0xF)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = double, N = 15]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D098);
    }
    __int16 v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D098);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMFactoredMatrix<double, 15>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = double, N = 15]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return *(double *)(a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1)));
}

uint64_t sub_101551530()
{
  sub_100134750(qword_102488828, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488828, (void *)&_mh_execute_header);
}

BOOL sub_101551590(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 3 && *(_DWORD *)(a1 + 132) == 2;
}

BOOL sub_1015515A8(uint64_t a1, uint64_t a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D258);
  }
  unint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 4);
    uint64_t v6 = *(void *)(a1 + 12);
    uint64_t v7 = *(void *)(a1 + 20);
    int v8 = *(_DWORD *)(a1 + 96);
    int v9 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)long long buf = 134219008;
    uint64_t v21 = v5;
    __int16 v22 = 2048;
    uint64_t v23 = v6;
    __int16 v24 = 2048;
    uint64_t v25 = v7;
    __int16 v26 = 1024;
    int v27 = v8;
    __int16 v28 = 1024;
    int v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ALTERED: original location: %.8f, %.8f, %.2f, %d, %d", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D258);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationProvider_Type::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  double v10 = *(double *)(a2 + 336);
  if (v10 != -1.0)
  {
    *(_DWORD *)(a1 + 96) = 1;
    *(_DWORD *)(a1 + 132) = 1;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 320);
    *(double *)(a1 + 20) = v10;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D258);
    }
    uint64_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 4);
      uint64_t v13 = *(void *)(a1 + 12);
      uint64_t v14 = *(void *)(a1 + 20);
      int v15 = *(_DWORD *)(a1 + 96);
      int v16 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)long long buf = 134219008;
      uint64_t v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      __int16 v24 = 2048;
      uint64_t v25 = v14;
      __int16 v26 = 1024;
      int v27 = v15;
      __int16 v28 = 1024;
      int v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D258);
      }
      unint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationProvider_Type::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  return v10 != -1.0;
}

void sub_1015519C8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1015519F8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101552900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_101552954(id a1)
{
  qword_102488840 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CLEEDHelperXpcInterface];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, v4, v5, v6, objc_opt_class(), 0);
  [(id)qword_102488840 setClasses:v7 forSelector:"fetchAllPendingRequestsWithCompletion:" argumentIndex:0 ofReply:1];
  [(id)qword_102488840 setClasses:v7 forSelector:"mediaUploadList:forRequestID:completion:" argumentIndex:0 ofReply:0];
  [(id)qword_102488840 setClasses:v7 forSelector:"fetchMitigationsWithCompletion:" argumentIndex:0 ofReply:1];
  int v8 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CLEEDRequestDelegate];
  qword_102488848 = (uint64_t)v8;

  [(NSXPCInterface *)v8 setClasses:v7 forSelector:"notifyMitigationNeeded:" argumentIndex:0 ofReply:0];
}

void sub_101552ADC(uint64_t a1)
{
  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  id v3 = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    id v4 = v3;
    if (v3)
    {
      [Weak[10] removeObject:v3];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10232D3B0);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = Weak[10];
        *(_DWORD *)long long buf = 136446722;
        int v9 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke_2";
        __int16 v10 = 2114;
        id v11 = v4;
        __int16 v12 = 2114;
        id v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, Connection[%{public}@] invalidated, active connections:%{public}@", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10232D3B0);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
  }
}

id sub_101552CF0(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136446466;
    id v6 = "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke_2";
    __int16 v7 = 1026;
    unsigned int v8 = [Weak processIdentifier];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s, Connection to client[%{public}d] interrupted", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    [Weak processIdentifier];
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEEDHelperService listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [Weak invalidate];
}

uint64_t sub_1015533B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446722;
    __int16 v10 = "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received pending requests from EED, set:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService fetchAllPendingRequestsWithCompletion:]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  dispatch_assert_queue_V2((dispatch_queue_t)[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo") queue]);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1015538B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446723;
    __int16 v10 = "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke";
    __int16 v11 = 2113;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received current mediaupload request from EED, request:%{private}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  dispatch_assert_queue_V2((dispatch_queue_t)[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo") queue]);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_101553DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446722;
    __int16 v10 = "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received current streaming request from EED, request:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService fetchCurrentStreamingRequestWithCompletion:]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  dispatch_assert_queue_V2((dispatch_queue_t)[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo") queue]);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1015542A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446722;
    __int16 v10 = "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received mitigations from EED, mitigation:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService fetchMitigationsWithCompletion:]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  dispatch_assert_queue_V2([(dispatch_queue_t)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo") queue]);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_101554938(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446466;
    unsigned int v8 = "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received media upload reply from EED, error:%{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService mediaUploadList:forRequestID:completion:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  dispatch_assert_queue_V2([objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo") queue]);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_101554F88(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446466;
    unsigned int v8 = "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received streaming session ended reply from EED, error:%{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService streamingSessionEndedForRequestID:completion:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(*(void *)(a1 + 32) + 8) silo queue]);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1015555FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446722;
    uint64_t v10 = "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    __int16 v13 = 2114;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, received handleResponse reply from EED, updatedRequest:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDHelperService handleResponse:forRequest:completion:]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  dispatch_assert_queue_V2((dispatch_queue_t)[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "silo") queue]);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_101555DE8(uint64_t a1, void *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    unsigned int v5 = [*(id *)(a1 + 32) processIdentifier];
    *(_DWORD *)long long buf = 136446978;
    unsigned int v8 = "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke";
    __int16 v9 = 1026;
    unsigned int v10 = v5;
    __int16 v11 = 2114;
    id v12 = [a2 localizedDescription];
    __int16 v13 = 2114;
    id v14 = [a2 localizedFailureReason];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    [*(id *)(a1 + 32) processIdentifier];
    [a2 localizedDescription];
    [a2 localizedFailureReason];
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEEDHelperService notifyNewRequestAvailable]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_101556648(uint64_t a1, void *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10232D3B0);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    unsigned int v5 = [*(id *)(a1 + 32) processIdentifier];
    *(_DWORD *)long long buf = 136446978;
    unsigned int v8 = "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke";
    __int16 v9 = 1026;
    unsigned int v10 = v5;
    __int16 v11 = 2114;
    id v12 = [a2 localizedDescription];
    __int16 v13 = 2114;
    id v14 = [a2 localizedFailureReason];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s[%{public}d]: %{public}@ %{public}@\n", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10232D3B0);
    }
    [*(id *)(a1 + 32) processIdentifier];
    [a2 localizedDescription];
    [a2 localizedFailureReason];
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEEDHelperService notifyMitigationNeeded:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_101556890(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_101556CDC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_59;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_61;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_61:
        uint64_t v36 = 24;
        goto LABEL_78;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_65:
        uint64_t v36 = 28;
        goto LABEL_78;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v24 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0;
        }
LABEL_69:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v24;
        goto LABEL_79;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 0x10u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v14 |= (unint64_t)(v30 & 0x7F) << v27;
            if (v30 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_73:
        uint64_t v36 = 36;
        goto LABEL_78;
      case 5u:
        uint64_t v31 = objc_alloc_init(ALSLocation);

        *(void *)(a1 + 16) = v31;
        if PBReaderPlaceMark() && (sub_100F95DD8((uint64_t)v31, a2))
        {
          PBReaderRecallMark();
LABEL_79:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 6u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 8u;
        while (2)
        {
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v14 |= (unint64_t)(v35 & 0x7F) << v32;
            if (v35 < 0)
            {
              v32 += 7;
              BOOL v9 = v33++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_77:
        uint64_t v36 = 32;
LABEL_78:
        *(_DWORD *)(a1 + v36) = v14;
        goto LABEL_79;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_79;
    }
  }
}

uint64_t sub_101558008(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 48) |= 4u;
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }
        uint64_t v31 = 20;
        goto LABEL_69;
      case 2u:
        *(unsigned char *)(a1 + 48) |= 2u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }
        uint64_t v31 = 16;
        goto LABEL_69;
      case 3u:
        *(unsigned char *)(a1 + 48) |= 8u;
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }
        uint64_t v31 = 24;
        goto LABEL_69;
      case 4u:
        *(unsigned char *)(a1 + 48) |= 0x80u;
        unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }
        uint64_t v31 = 44;
        goto LABEL_69;
      case 5u:
        *(unsigned char *)(a1 + 48) |= 0x40u;
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }
        uint64_t v31 = 40;
        goto LABEL_69;
      case 6u:
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v15 = 0;
        }
        uint64_t v31 = 32;
        goto LABEL_69;
      case 7u:
        *(unsigned char *)(a1 + 48) |= 0x10u;
        unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v15 = 0;
        }
        uint64_t v31 = 28;
LABEL_69:
        *(_DWORD *)(a1 + v31) = v15;
        continue;
      case 8u:
        *(unsigned char *)(a1 + 48) |= 1u;
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v24;
        continue;
      case 9u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 48) |= 0x20u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
      v27 |= (unint64_t)(v30 & 0x7F) << v25;
      if ((v30 & 0x80) == 0) {
        goto LABEL_52;
      }
      v25 += 7;
      BOOL v10 = v26++ >= 9;
      if (v10)
      {
        LODWORD(v27) = 0;
        goto LABEL_54;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v27) = 0;
    }
LABEL_54:
    *(_DWORD *)(a1 + 36) = v27;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10155916C(unsigned int a1)
{
  if (a1 > 0xD) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_10232D3F0 + (int)a1);
  }
}

void sub_1015592A4(id a1)
{
  qword_102488858 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSmootherMonitorSilo"];
}

uint64_t *sub_1015592D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t *sub_10155932C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t *sub_101559380(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_1015593D4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = v2;
    operator delete(v2);
  }
  return a1;
}

id sub_10155A2D0(uint64_t a1)
{
  [*(id *)(a1 + 32) silo];
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  uint64_t v2 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "CLRS,Connection Interrupted", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    char v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSmootherMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(a1 + 32) setUpdating:0];
  return [*(id *)(a1 + 32) setConnection:0];
}

id sub_10155A484(uint64_t a1)
{
  [*(id *)(a1 + 32) silo];
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  uint64_t v2 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLRS,Connection Invalidated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    char v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(a1 + 32) setUpdating:0];
  return [*(id *)(a1 + 32) setConnection:0];
}

void sub_10155AB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10155B780(_Unwind_Exception *a1)
{
  if (STACK[0x3F8]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x3F8]);
  }
  __cxa_guard_abort(qword_102488870);
  _Unwind_Resume(a1);
}

id sub_10155B8BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) smoothLocationsInternal:*(void *)(*(void *)(a1 + 48) + 8) + 48 workoutActivity:*(unsigned int *)(a1 + 56) shouldReconstructRoute:*(unsigned __int8 *)(a1 + 60) intervalEpochsVector:&qword_10248D7E8 handler:*(void *)(a1 + 40)];
}

__n128 sub_10155B8E4(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10155B908(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

NSObject *sub_10155B920(uint64_t a1, int a2, id *a3, uint64_t *a4)
{
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  unint64_t v8 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    char v9 = a4;
    if (*((char *)a4 + 23) < 0) {
      char v9 = (uint64_t *)*a4;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v27 = v9;
    __int16 v28 = 1026;
    int v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRS,handleStopCompletedTimer,type,%{public}s,ii,%{public}u", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    unint64_t v14 = a4;
    if (*((char *)a4 + 23) < 0) {
      unint64_t v14 = (uint64_t *)*a4;
    }
    int v22 = 136446466;
    unint64_t v23 = v14;
    __int16 v24 = 1026;
    int v25 = a2;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  __n128 result = *a3;
  if (*a3)
  {
    dispatch_source_cancel(result);

    *a3 = 0;
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    uint64_t v11 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      int v12 = a4;
      if (*((char *)a4 + 23) < 0) {
        int v12 = (uint64_t *)*a4;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v27 = v12;
      __int16 v28 = 1026;
      int v29 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLRS,handleStopCompletedTimer,timer fired,could not retrieve %{public}s samples in time,ii,%{public}u", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      if (*((char *)a4 + 23) < 0) {
        a4 = (uint64_t *)*a4;
      }
      int v22 = 136446466;
      unint64_t v23 = a4;
      __int16 v24 = 1026;
      int v25 = a2;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    id v13 = [[[*(id *)(a1 + 32) universe] silo];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10155BD24;
    long long v17[3] = &unk_10232D488;
    uint64_t v19 = *(void *)(a1 + 48);
    int v20 = *(_DWORD *)(a1 + 56);
    char v21 = *(unsigned char *)(a1 + 60);
    long long v18 = *(_OWORD *)(a1 + 32);
    return [v13 async:v17];
  }
  return result;
}

id sub_10155BD24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) smoothLocationsInternal:*(void *)(*(void *)(a1 + 48) + 8) + 48 workoutActivity:*(unsigned int *)(a1 + 56) shouldReconstructRoute:*(unsigned __int8 *)(a1 + 60) intervalEpochsVector:&qword_10248D7E8 handler:*(void *)(a1 + 40)];
}

void sub_10155BD4C(uint64_t a1, unsigned int a2, dispatch_object_t *a3, char *a4)
{
  if (!*a3)
  {
    dispatch_source_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue")]);
    *a3 = v8;
    if (!v8) {
      sub_101ABC0D4();
    }
    if (a4[23] < 0)
    {
      BOOL v10 = *(char **)a4;
      int64_t v9 = *((void *)a4 + 1);
    }
    else
    {
      int64_t v9 = a4[23];
      BOOL v10 = a4;
    }
    int v11 = *(char *)(a1 + 71);
    if (v11 >= 0) {
      int v12 = (char *)(a1 + 48);
    }
    else {
      int v12 = *(char **)(a1 + 48);
    }
    if (v11 >= 0) {
      int64_t v13 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      int64_t v13 = *(void *)(a1 + 56);
    }
    if (v13)
    {
      if (v9 >= v13)
      {
        int v15 = &v10[v9];
        int v16 = *v12;
        unint64_t v17 = v10;
        do
        {
          uint64_t v18 = v9 - v13;
          if (v18 == -1) {
            break;
          }
          uint64_t v19 = (char *)memchr(v17, v16, v18 + 1);
          if (!v19) {
            break;
          }
          int v20 = v19;
          if (!memcmp(v19, v12, v13))
          {
            if (v20 == v15 || v20 - v10 == -1) {
              break;
            }
            goto LABEL_23;
          }
          unint64_t v17 = v20 + 1;
          int64_t v9 = v15 - (v20 + 1);
        }
        while (v9 >= v13);
      }
      unsigned int v14 = 0;
    }
    else
    {
LABEL_23:
      unsigned int v14 = 3;
    }
    unint64_t v21 = v14 * (unint64_t)a2 + 8;
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    int v22 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v23 = a4;
      if (a4[23] < 0) {
        unint64_t v23 = *(char **)a4;
      }
      *(_DWORD *)long long buf = 136446722;
      int v42 = v23;
      __int16 v43 = 2050;
      unint64_t v44 = v21;
      __int16 v45 = 1026;
      unsigned int v46 = a2;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CLRS,createStopCompletedTimer,type,%{public}s,kTimeoutDurationSeconds,%{public}llu,ii,%{public}u", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      int v29 = a4;
      if (a4[23] < 0) {
        int v29 = *(char **)a4;
      }
      int v35 = 136446722;
      uint64_t v36 = v29;
      __int16 v37 = 2050;
      unint64_t v38 = v21;
      __int16 v39 = 1026;
      unsigned int v40 = a2;
      char v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    uint64_t v24 = 1000000000 * v21;
    int v25 = *a3;
    dispatch_time_t v26 = dispatch_walltime(0, v24);
    dispatch_source_set_timer(v25, v26, v24, 0xEE6B280uLL);
    uint64_t v27 = *a3;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_10155C130;
    handler[3] = &unk_10232D4D8;
    uint64_t v28 = *(void *)(a1 + 40);
    unsigned int v34 = a2;
    handler[4] = v28;
    handler[5] = a3;
    if (a4[23] < 0)
    {
      sub_1000DC48C(&__p, *(void **)a4, *((void *)a4 + 1));
    }
    else
    {
      long long __p = *(_OWORD *)a4;
      uint64_t v33 = *((void *)a4 + 2);
    }
    dispatch_source_set_event_handler(v27, handler);
    dispatch_resume(*a3);
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_10155C130(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 64);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(v1 + 16))(v1, v3, v2, __p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10155C1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10155C1D8(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)__n128 result = v3;
  return result;
}

void sub_10155C208(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_10155C21C(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  if ((a3 & 1) == 0 && *(void *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48) + 8 * a4)) {
    goto LABEL_8;
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  uint64_t v7 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
  {
    BOOL v8 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48) + 8 * a4) == 0;
    *(_DWORD *)long long buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v8;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&uint8_t buf[16] = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLRS,Cannot handle fetched inertial odometry samples,hadIOFetchError,%{public}d,fStopCompletedTimerVecInertialOdometry[ii]==nullptr,%{public}d,ii,%{public}u", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    BOOL v66 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48) + 8 * a4) == 0;
    int v90 = 67240704;
    *(_DWORD *)__int16 v91 = a3;
    *(_WORD *)&v91[4] = 1026;
    *(_DWORD *)&v91[6] = v66;
    LOWORD(v92) = 1026;
    *(_DWORD *)((char *)&v92 + 2) = a4;
    __int16 v67 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v67);
    if (v67 != buf) {
      free(v67);
    }
    unint64_t v9 = a4;
  }
  else
  {
LABEL_8:
    unint64_t v9 = a4;
  }
  unint64_t v73 = v9;
  if (*(void *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48) + 8 * v9))
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    BOOL v10 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRS,cancelStopCompletedTimer,ii,%{public}u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      int v90 = 67240192;
      *(_DWORD *)__int16 v91 = a4;
      int v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
    dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48) + 8 * v73));

    *(void *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48) + 8 * v73) = 0;
  }
  id v11 = [a2 count];
  if (v11)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    int v12 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "firstObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate"]
      uint64_t v14 = v13;
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate"]
      *(_DWORD *)long long buf = 134349824;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2050;
      int v101 = v15;
      *(_WORD *)double v102 = 1026;
      *(_DWORD *)&v102[2] = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRS,fetch backgroundInertialOdometrySamples completion block,total backgroundInertialOdometrySamples,%{public}lu,first timestamp,%{public}f,last timestamp,%{public}f,ii,%{public}u", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "firstObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate"]
      uint64_t v70 = v69;
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate"]
      int v90 = 134349824;
      *(void *)__int16 v91 = v11;
      *(_WORD *)&v91[8] = 2050;
      uint64_t v92 = v70;
      __int16 v93 = 2050;
      uint64_t v94 = v71;
      __int16 v95 = 1026;
      LODWORD(v96) = a4;
      int v72 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v72);
      if (v72 != buf) {
        free(v72);
      }
    }
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    id v16 = [a2 countByEnumeratingWithState:&v86 objects:v99 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v87;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v87 != v17) {
            objc_enumerationMutation(a2);
          }
          uint64_t v19 = *(void **)(*((void *)&v86 + 1) + 8 * (void)v18);
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_10232D630);
          }
          int v20 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
          {
            [objc_msgSend(v19, "cfAbsTimestamp") timeIntervalSinceReferenceDate];
            uint64_t v22 = v21;
            [v19 sampleInterval_s];
            uint64_t v24 = v23;
            [objc_msgSend(v19, "deltaPosition_m") X];
            dispatch_time_t v26 = v25;
            [objc_msgSend(v19, "deltaPosition_m") Y];
            uint64_t v28 = v27;
            [objc_msgSend(v19, "deltaPosition_m") Z];
            *(_DWORD *)long long buf = 134284545;
            *(void *)&uint8_t buf[4] = v22;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(void *)&buf[14] = v24;
            *(_WORD *)&buf[22] = 2049;
            int v101 = v26;
            *(_WORD *)double v102 = 2049;
            *(void *)&v102[2] = v28;
            *(_WORD *)&v102[10] = 2049;
            *(void *)&unsigned char v102[12] = v29;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLRS,enumerate IO samples fetched from DB,cfAbsTimestamp,%{private}.1lf,sampleInterval_s,%{private}.1lf,deltaPosition_m,%{private}.2lf,%{private}.2lf,,%{private}.2lf", buf, 0x34u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_10232D630);
            }
            [objc_msgSend(v19, "cfAbsTimestamp") timeIntervalSinceReferenceDate];
            uint64_t v31 = v30;
            [v19 sampleInterval_s];
            uint64_t v33 = v32;
            [objc_msgSend(v19, "deltaPosition_m") X];
            uint64_t v35 = v34;
            [objc_msgSend(v19, "deltaPosition_m") Y];
            uint64_t v37 = v36;
            [objc_msgSend(v19, "deltaPosition_m") Z];
            int v90 = 134284545;
            *(void *)__int16 v91 = v31;
            *(_WORD *)&v91[8] = 2049;
            uint64_t v92 = v33;
            __int16 v93 = 2049;
            uint64_t v94 = v35;
            __int16 v95 = 2049;
            uint64_t v96 = v37;
            __int16 v97 = 2049;
            uint64_t v98 = v38;
            __int16 v39 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v39);
            if (v39 != buf) {
              free(v39);
            }
          }
          uint64_t v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        id v40 = [a2 countByEnumeratingWithState:&v86 objects:v99 count:16];
        id v16 = v40;
      }
      while (v40);
    }
    uint64_t v41 = qword_10248D7F0;
    unint64_t v42 = (qword_10248D7F0 - qword_10248D7E8) >> 4;
    if (v42 <= v73)
    {
      if (qword_10248D7F0 >= (unint64_t)qword_10248D7F8)
      {
        unint64_t v46 = v42 + 1;
        if ((v42 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v47 = qword_10248D7F8 - qword_10248D7E8;
        if ((qword_10248D7F8 - qword_10248D7E8) >> 3 > v46) {
          unint64_t v46 = v47 >> 3;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48) {
          __int16 v49 = (char *)sub_1000C571C((uint64_t)&qword_10248D7F8, v48);
        }
        else {
          __int16 v49 = 0;
        }
        uint64_t v50 = &v49[16 * v42];
        uint64_t v51 = (uint64_t)&v49[16 * v48];
        *(void *)uint64_t v50 = 0;
        *((void *)v50 + 1) = 0;
        uint64_t v43 = (uint64_t)(v50 + 16);
        uint64_t v53 = qword_10248D7E8;
        uint64_t v52 = (char *)qword_10248D7F0;
        if (qword_10248D7F0 != qword_10248D7E8)
        {
          do
          {
            *((_OWORD *)v50 - 1) = *((_OWORD *)v52 - 1);
            v50 -= 16;
            v52 -= 16;
          }
          while (v52 != (char *)v53);
          uint64_t v52 = (char *)qword_10248D7E8;
        }
        qword_10248D7E8 = (uint64_t)v50;
        qword_10248D7F0 = v43;
        qword_10248D7F8 = v51;
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)qword_10248D7F0 = 0;
        *(void *)(v41 + _Block_object_dispose(&STACK[0x310], 8) = 0;
        uint64_t v43 = v41 + 16;
      }
      qword_10248D7F0 = v43;
    }
    id v54 = a2;
    *(void *)(qword_10248D7E8 + 16 * v73 + _Block_object_dispose(&STACK[0x310], 8) = v54;
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    unint64_t v44 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "CLRS,warning,total background inertial odometry samples fetched,0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      LOWORD(v90) = 0;
      __int16 v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v45);
      if (v45 != buf) {
        free(v45);
      }
    }
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  __int16 v55 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    int v56 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)long long buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v56;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "CLRS,fetchLocationsWithStartTime,intervalIndex,%{public}u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    int v64 = *(_DWORD *)(a1 + 104);
    int v90 = 67240192;
    *(_DWORD *)__int16 v91 = v64;
    __int16 v65 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v65);
    if (v65 != buf) {
      free(v65);
    }
  }
  uint64_t v57 = *(void *)(a1 + 48);
  uint64_t v58 = *(unsigned int *)(a1 + 104);
  uint64_t v59 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48);
  sub_100134750(__p, "location");
  (*(void (**)(uint64_t, uint64_t, unint64_t, void **))(v57 + 16))(v57, v58, v59 + 8 * v73, __p);
  if (v85 < 0) {
    operator delete(__p[0]);
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3052000000;
  int v101 = sub_10155CFE8;
  *(void *)double v102 = sub_10155CFF8;
  *(void *)&v102[8] = 0;
  *(void *)&v102[8] = objc_alloc_init((Class)NSMutableArray);
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  v75[2] = sub_10155D004;
  v75[3] = &unk_10232D548;
  uint64_t v60 = *(void *)(a1 + 80);
  uint64_t v78 = *(void *)(a1 + 72);
  uint64_t v79 = buf;
  uint64_t v61 = *(void *)(a1 + 88);
  uint64_t v80 = v60;
  uint64_t v81 = v61;
  int v82 = *(_DWORD *)(a1 + 108);
  char v83 = *(unsigned char *)(a1 + 112);
  uint64_t v62 = *(void *)(a1 + 56);
  int v63 = *(void **)(a1 + 40);
  id v76 = *(id *)(a1 + 32);
  uint64_t v77 = v62;
  [objc_msgSend(v63, "startDate") timeIntervalSinceReferenceDate];
  [v76 fetchLocationsWithStartTime:*(unsigned int *)(a1 + 104) endTime:*(void *)(*(void *)&buf[8] + 40) intervalIndex:v75 locationArray:];
  _Block_object_dispose(buf, 8);
}

void sub_10155CFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10155CFE8(uint64_t a1, uint64_t a2)
{
}

void sub_10155CFF8(uint64_t a1)
{
}

void sub_10155D004(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5 = a1;
  if ((a2 & 1) == 0 && *(void *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48) + 8 * a3)) {
    goto LABEL_8;
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  unint64_t v6 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
  {
    BOOL v7 = *(void *)(*(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 48) + 8 * a3) == 0;
    *(_DWORD *)long long buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&uint8_t buf[16] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLRS,Cannot handle fetched locations,hadLocationFetchError,%{public}d,fStopCompletedTimerVecLocations[jj]==nullptr,%{public}d,jj,%{public}u", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    BOOL v87 = *(void *)(*(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 48) + 8 * a3) == 0;
    int v116 = 67240704;
    *(_DWORD *)double v117 = a2;
    *(_WORD *)&v117[4] = 1026;
    *(_DWORD *)&v117[6] = v87;
    *(_WORD *)&v117[10] = 1026;
    *(_DWORD *)&unsigned char v117[12] = a3;
    long long v88 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v88);
    unint64_t v8 = a3;
    if (v88 != (char *)buf) {
      free(v88);
    }
  }
  else
  {
LABEL_8:
    unint64_t v8 = a3;
  }
  if (*(void *)(*(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 48) + 8 * v8))
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    unint64_t v9 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRS,cancelStopCompletedTimer,jj,%{public}u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      int v116 = 67240192;
      *(_DWORD *)double v117 = a3;
      long long v89 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v89);
      if (v89 != (char *)buf) {
        free(v89);
      }
    }
    dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 48) + 8 * v8));

    *(void *)(*(void *)(*(void *)(*(void *)(v5 + 48) + 8) + 48) + 8 * v_Block_object_dispose(&STACK[0x310], 8) = 0;
  }
  id v10 = [*(id *)(*(void *)(*(void *)(v5 + 56) + 8) + 40) count];
  if (v10)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    id v11 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(*(void *)(v5 + 56) + 8) + 40), "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      uint64_t v13 = v12;
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(*(void *)(v5 + 56) + 8) + 40), "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      *(_DWORD *)long long buf = 134349824;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v13;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v14;
      *(_WORD *)&buf[32] = 1026;
      *(_DWORD *)&unsigned char buf[34] = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRS,fetch locations completion block,total locations,%{public}lu,first timestamp,%{public}f,last timestamp,%{public}f,jj,%{public}u", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(*(void *)(v5 + 56) + 8) + 40), "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      uint64_t v91 = v90;
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(*(void *)(v5 + 56) + 8) + 40), "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      int v116 = 134349824;
      *(void *)double v117 = v10;
      *(_WORD *)&v117[8] = 2050;
      *(void *)&v117[10] = v91;
      *(_WORD *)&v117[18] = 2050;
      *(void *)&v117[20] = v92;
      *(_WORD *)&v117[28] = 1026;
      *(_DWORD *)&v117[30] = a3;
      __int16 v93 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v93);
      if (v93 != (char *)buf) {
        free(v93);
      }
    }
    sub_1008297D4(__p, (unint64_t)v10);
    unint64_t v94 = v8;
    uint64_t v95 = v5;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    int v15 = *(void **)(*(void *)(*(void *)(v5 + 56) + 8) + 40);
    id v16 = [v15 countByEnumeratingWithState:&v110 objects:v134 count:16];
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)v111;
      do
      {
        uint64_t v19 = 0;
        uint64_t v96 = v17;
        uint64_t v20 = 112 * (void)v17;
        do
        {
          if (*(void *)v111 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v21 = *(void **)(*((void *)&v110 + 1) + 8 * (void)v19);
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_10232D630);
          }
          uint64_t v22 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v23 = [v21 type];
            [objc_msgSend(v21, "timestamp") timeIntervalSinceReferenceDate];
            uint64_t v25 = v24;
            [v21 horizontalAccuracy];
            uint64_t v27 = v26;
            [v21 coordinate];
            uint64_t v97 = v28;
            uint64_t v99 = v27;
            [v21 coordinate];
            uint64_t v30 = v29;
            [v21 speed];
            uint64_t v32 = v31;
            [v21 course];
            uint64_t v34 = v33;
            [v21 speedAccuracy];
            uint64_t v36 = v35;
            [v21 courseAccuracy];
            uint64_t v38 = v37;
            [v21 altitude];
            uint64_t v40 = v39;
            [v21 verticalAccuracy];
            uint64_t v42 = v41;
            unsigned int v43 = [v21 signalEnvironmentType];
            *(_DWORD *)long long buf = 67177473;
            *(_DWORD *)&uint8_t buf[4] = v23;
            *(_WORD *)&uint8_t buf[8] = 2049;
            *(void *)&buf[10] = v25;
            *(_WORD *)&unsigned char buf[18] = 2049;
            *(void *)&buf[20] = v99;
            *(_WORD *)&unsigned char buf[28] = 2049;
            *(void *)&buf[30] = v97;
            *(_WORD *)&buf[38] = 2049;
            *(void *)&unsigned char buf[40] = v30;
            *(_WORD *)&buf[48] = 2049;
            *(void *)&buf[50] = v32;
            *(_WORD *)&buf[58] = 2049;
            *(void *)&buf[60] = v34;
            *(_WORD *)&std::string buf[68] = 2049;
            *(void *)&buf[70] = v36;
            *(_WORD *)&buf[78] = 2049;
            *(void *)&buf[80] = v38;
            *(_WORD *)&buf[88] = 2049;
            *(void *)&buf[90] = v40;
            *(_WORD *)&buf[98] = 2049;
            *(void *)&buf[100] = v42;
            *(_WORD *)&buf[108] = 1025;
            *(_DWORD *)&buf[110] = v43;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLRS,enumerate locations fetched from DB,type,%{private}d,timestamp,%{private}.1lf,horizontalAccuracy,%{private}.1lf,ll,%{private}.8lf,%{private}.8lf,speed,%{private}.2lf,course,%{private}.2lf,speedAccuracy,%{private}.2lf,courseAccuracy,%{private}.2lf,altitude,%{private}.2lf,vUnc,%{private}.2lf,signalEnv,%{private}d", buf, 0x72u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_10232D630);
            }
            unsigned int v45 = [v21 type];
            [objc_msgSend(v21, "timestamp") timeIntervalSinceReferenceDate];
            uint64_t v47 = v46;
            [v21 horizontalAccuracy];
            uint64_t v98 = v48;
            uint64_t v100 = v47;
            [v21 coordinate];
            uint64_t v50 = v49;
            [v21 coordinate];
            uint64_t v52 = v51;
            [v21 speed];
            uint64_t v54 = v53;
            [v21 course];
            uint64_t v56 = v55;
            [v21 speedAccuracy];
            uint64_t v58 = v57;
            [v21 courseAccuracy];
            uint64_t v60 = v59;
            [v21 altitude];
            uint64_t v62 = v61;
            [v21 verticalAccuracy];
            uint64_t v64 = v63;
            unsigned int v65 = [v21 signalEnvironmentType];
            int v116 = 67177473;
            *(_DWORD *)double v117 = v45;
            *(_WORD *)&v117[4] = 2049;
            *(void *)&v117[6] = v100;
            *(_WORD *)&v117[14] = 2049;
            *(void *)&v117[16] = v98;
            *(_WORD *)&v117[24] = 2049;
            *(void *)&v117[26] = v50;
            __int16 v118 = 2049;
            uint64_t v119 = v52;
            __int16 v120 = 2049;
            uint64_t v121 = v54;
            __int16 v122 = 2049;
            uint64_t v123 = v56;
            __int16 v124 = 2049;
            uint64_t v125 = v58;
            __int16 v126 = 2049;
            uint64_t v127 = v60;
            __int16 v128 = 2049;
            uint64_t v129 = v62;
            __int16 v130 = 2049;
            uint64_t v131 = v64;
            __int16 v132 = 1025;
            unsigned int v133 = v65;
            BOOL v66 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v66);
            if (v66 != (char *)buf) {
              free(v66);
            }
          }
          if (v21) {
            [v21 clientLocation];
          }
          else {
            memset(buf, 0, 156);
          }
          double v44 = sub_1008238C8((uint64_t)buf, (uint64_t)__p[0] + v20);
          uint64_t v19 = (char *)v19 + 1;
          v20 += 112;
        }
        while (v16 != v19);
        id v67 = [v15 countByEnumeratingWithState:&v110 objects:v134 count:16];
        id v16 = v67;
        uint64_t v17 = (char *)v19 + (void)v96;
      }
      while (v67);
    }
    uint64_t v68 = qword_10248D7F0;
    unint64_t v69 = (qword_10248D7F0 - qword_10248D7E8) >> 4;
    unint64_t v8 = v94;
    uint64_t v5 = v95;
    if (v69 <= v94)
    {
      if (qword_10248D7F0 >= (unint64_t)qword_10248D7F8)
      {
        unint64_t v73 = v69 + 1;
        if ((v69 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v74 = qword_10248D7F8 - qword_10248D7E8;
        if ((qword_10248D7F8 - qword_10248D7E8) >> 3 > v73) {
          unint64_t v73 = v74 >> 3;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75) {
          id v76 = (char *)sub_1000C571C((uint64_t)&qword_10248D7F8, v75);
        }
        else {
          id v76 = 0;
        }
        uint64_t v77 = &v76[16 * v69];
        uint64_t v78 = (uint64_t)&v76[16 * v75];
        *(void *)uint64_t v77 = 0;
        *((void *)v77 + 1) = 0;
        uint64_t v70 = (uint64_t)(v77 + 16);
        uint64_t v80 = qword_10248D7E8;
        uint64_t v79 = (char *)qword_10248D7F0;
        if (qword_10248D7F0 != qword_10248D7E8)
        {
          do
          {
            *((_OWORD *)v77 - 1) = *((_OWORD *)v79 - 1);
            v77 -= 16;
            v79 -= 16;
          }
          while (v79 != (char *)v80);
          uint64_t v79 = (char *)qword_10248D7E8;
        }
        qword_10248D7E8 = (uint64_t)v77;
        qword_10248D7F0 = v70;
        qword_10248D7F8 = v78;
        if (v79) {
          operator delete(v79);
        }
      }
      else
      {
        *(void *)qword_10248D7F0 = 0;
        *(void *)(v68 + _Block_object_dispose(&STACK[0x310], 8) = 0;
        uint64_t v70 = v68 + 16;
      }
      qword_10248D7F0 = v70;
    }
    id v81 = objc_alloc_init((Class)NSMutableArray);
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    int v82 = *(void **)(*(void *)(*(void *)(v95 + 56) + 8) + 40);
    id v83 = [v82 countByEnumeratingWithState:&v106 objects:v115 count:16];
    if (v83)
    {
      uint64_t v84 = *(void *)v107;
      do
      {
        for (uint64_t i = 0; i != v83; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v107 != v84) {
            objc_enumerationMutation(v82);
          }
          [v81 addObject:*(void *)(*((void *)&v106 + 1) + 8 * i)];
        }
        id v83 = [v82 countByEnumeratingWithState:&v106 objects:v115 count:16];
      }
      while (v83);
    }
    *(void *)(qword_10248D7E8 + 16 * v94) = v81;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    uint64_t v71 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "CLRS,warning,total locations fetched,0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      LOWORD(v116) = 0;
      int v72 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke", "%s\n", v72);
      if (v72 != (char *)buf) {
        free(v72);
      }
    }
  }
  if (*(void *)(v5 + 72) - 1 == v8)
  {
    id v86 = [objc_msgSend(*(id *)(v5 + 32), "universe") silo];
    v101[0] = _NSConcreteStackBlock;
    v101[1] = 3221225472;
    v101[2] = sub_10155DE28;
    v101[3] = &unk_10232D488;
    uint64_t v103 = *(void *)(v5 + 64);
    int v104 = *(_DWORD *)(v5 + 80);
    char v105 = *(unsigned char *)(v5 + 84);
    long long v102 = *(_OWORD *)(v5 + 32);
    [v86 async:v101];
  }
}

void sub_10155DDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10155DE28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) smoothLocationsInternal:*(void *)(*(void *)(a1 + 48) + 8) + 48 workoutActivity:*(unsigned int *)(a1 + 56) shouldReconstructRoute:*(unsigned __int8 *)(a1 + 60) intervalEpochsVector:&qword_10248D7E8 handler:*(void *)(a1 + 40)];
}

id sub_10155E088(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(a4, "universe"), "silo"), "assertInside");
  uint64_t v7 = *a2;
  long long v8 = a3[9];
  v15[8] = a3[8];
  v15[9] = v8;
  long long v9 = a3[11];
  v15[10] = a3[10];
  v15[11] = v9;
  long long v10 = a3[5];
  v15[4] = a3[4];
  v15[5] = v10;
  long long v11 = a3[7];
  v15[6] = a3[6];
  v15[7] = v11;
  long long v12 = a3[1];
  v15[0] = *a3;
  v15[1] = v12;
  long long v13 = a3[3];
  v15[2] = a3[2];
  void v15[3] = v13;
  return [a4 onCompanionNotification:v7 data:v15];
}

id sub_10155E348(uint64_t a1, unsigned int *a2, long long *a3, void *a4)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(a4, "universe"), "silo"), "assertInside");
  uint64_t v7 = *a2;
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  return [a4 onDaemonStatusNotification:v7 data:&v9];
}

const void **sub_10155E60C(uint64_t a1, unsigned int *a2, const void **a3, void *a4)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(a4, "universe"), "silo"), "assertInside");
  uint64_t v7 = *a2;
  long long v8 = *a3;
  uint64_t v10 = v8;
  if (v8) {
    CFRetain(v8);
  }
  [a4 onTelephonyNotification:v7 data:&v10];
  return sub_1000DC024(&v10);
}

void sub_10155E680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DC024((const void **)va);
  _Unwind_Resume(a1);
}

void sub_10155FA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000D7D80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10155FBA0(uint64_t a1, void *a2, uint64_t a3)
{
  double v6 = sub_10016C458();
  double v7 = *(double *)(a1 + 40);
  double v8 = *(double *)(a1 + 48) - *(double *)(a1 + 56);
  double v9 = 1.0;
  if (v8 > 0.0) {
    double v9 = (double)(unint64_t)[a2 count] / v8;
  }
  double v10 = v6 - v7;
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  double v11 = v10 * 1000.0;
  long long v12 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67241472;
    *(_DWORD *)uint64_t v19 = v13;
    *(_WORD *)&v19[4] = 2050;
    *(void *)&v19[6] = [a2 count];
    __int16 v20 = 2050;
    double v21 = v8;
    __int16 v22 = 2050;
    double v23 = v9;
    __int16 v24 = 2050;
    double v25 = v11;
    __int16 v26 = 1026;
    BOOL v27 = a3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRS,received stored background inertial odometry samples,intervalIndex,%{public}u,count,%{public}lu,fetchIntervalDurationSeconds,%{public}.1lf,fetchYield,%{public}.2lf,responseTime,%{public}.1lf,ms,hadError,%{public}d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    [a2 count];
    id v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchBackgroundInertialOdometrySamplesWithStartTime:endTime:intervalIndex:completionBlock:]_block_invoke", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (a3)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    uint64_t v14 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)uint64_t v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLRS,error fetching stored background inertial odometry samples, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSmootherMonitor fetchBackgroundInertialOdometrySamplesWithStartTime:endTime:intervalIndex:completionBlock:]_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  AnalyticsSendEventLazy();
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

NSDictionary *sub_101560014(uint64_t a1)
{
  v5[0] = @"fetchTimeMsec";
  v6[0] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 48)];
  v5[1] = @"sampleCount";
  v6[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) count]);
  void v5[2] = @"fetchIntervalDurationSeconds";
  void v6[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  void v5[3] = @"yield";
  void v6[3] = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  void v5[4] = @"intervalIndex";
  void v6[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  v5[5] = @"didHaveError";
  uint64_t v2 = +[NSNumber numberWithBool:*(void *)(a1 + 40) != 0];
  v5[6] = @"errorMessage";
  uint64_t v3 = *(void *)(a1 + 40);
  _DWORD v6[5] = v2;
  v6[6] = v3;
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:7];
}

void sub_1015602F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10156030C(uint64_t a1, void *a2, void *a3, int a4)
{
  double v8 = sub_10016C458() - *(double *)(a1 + 72);
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
  double v9 = v8 * 1000.0;
  double v10 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)long long buf = 67241216;
    *(_DWORD *)uint64_t v58 = v11;
    *(_WORD *)&v58[4] = 2050;
    *(void *)&v58[6] = [a2 count];
    *(_WORD *)&v58[14] = 2050;
    *(double *)&v58[16] = v8 * 1000.0;
    *(_WORD *)&v58[24] = 1026;
    *(_DWORD *)&v58[26] = a4;
    LOWORD(v59) = 1026;
    *(_DWORD *)((char *)&v59 + 2) = a3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRS,received partial stored locations,intervalIndex,%{public}u,count,%{public}lu,responseTime,%{public}.1lf,ms,enumerationComplete,%{public}d,error,%{public}d", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    int v32 = *(_DWORD *)(a1 + 96);
    int v47 = 67241216;
    *(_DWORD *)uint64_t v48 = v32;
    *(_WORD *)&v48[4] = 2050;
    *(void *)&_OWORD v48[6] = [a2 count];
    *(_WORD *)&v48[14] = 2050;
    *(double *)&unsigned char v48[16] = v8 * 1000.0;
    *(_WORD *)&v48[24] = 1026;
    *(_DWORD *)&v48[26] = a4;
    LOWORD(v49) = 1026;
    *(_DWORD *)((char *)&v49 + 2) = a3 != 0;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  uint64_t v42 = a3;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v12 = [a2 countByEnumeratingWithState:&v43 objects:v56 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v44;
    do
    {
      int v15 = 0;
      do
      {
        if (*(void *)v44 != v14) {
          objc_enumerationMutation(a2);
        }
        id v16 = *(void **)(*((void *)&v43 + 1) + 8 * (void)v15);
        if (objc_msgSend(*(id *)(a1 + 32), "isLocationUsefulForSmoothing:", objc_msgSend(v16, "type")))
        {
          [*(id *)(a1 + 40) addObject:v16];
        }
        else
        {
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_10232D630);
          }
          uint64_t v17 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v18 = [v16 type];
            *(_DWORD *)long long buf = 67240192;
            *(_DWORD *)uint64_t v58 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLRS,location type is not useful for smoothing,type,%{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_10232D630);
            }
            unsigned int v19 = [v16 type];
            int v47 = 67240192;
            *(_DWORD *)uint64_t v48 = v19;
            __int16 v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v20);
            if (v20 != (char *)buf) {
              free(v20);
            }
          }
        }
        int v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v21 = [a2 countByEnumeratingWithState:&v43 objects:v56 count:16];
      id v13 = v21;
    }
    while (v21);
  }
  if (v42)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    __int16 v22 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)uint64_t v58 = v42;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLRS,error enumerating stored locations, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      int v47 = 138543362;
      *(void *)uint64_t v48 = v42;
      uint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) = v42;
  }
  if (a4)
  {
    double v23 = *(double *)(a1 + 80) - *(double *)(a1 + 88);
    double v24 = 1.0;
    if (v23 > 0.0) {
      double v24 = (double)(unint64_t)[*(id *)(a1 + 40) count] / v23;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_10232D630);
    }
    double v25 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate");
      uint64_t v27 = v26;
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      uint64_t v29 = v28;
      id v30 = [*(id *)(a1 + 40) count];
      BOOL v31 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) != 0;
      *(_DWORD *)long long buf = 134350592;
      *(void *)uint64_t v58 = v27;
      *(_WORD *)&v58[8] = 2050;
      *(void *)&v58[10] = v29;
      *(_WORD *)&v58[18] = 2050;
      *(void *)&v58[20] = v30;
      *(_WORD *)&v58[28] = 2050;
      double v59 = v23;
      __int16 v60 = 2050;
      double v61 = v24;
      __int16 v62 = 2050;
      double v63 = v9;
      __int16 v64 = 1026;
      BOOL v65 = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CLRS,received all stored locations,startDate,%{public}f,endDate,%{public}f,count,%{public}lu,fetchIntervalDurationSeconds,%{public}.1lf,fetchYield,%{public}.2lf,responseTime,%{public}.1lf,ms,hadError,%{public}d", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate"]
      uint64_t v36 = v35;
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      uint64_t v38 = v37;
      id v39 = [*(id *)(a1 + 40) count];
      BOOL v40 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) != 0;
      int v47 = 134350592;
      *(void *)uint64_t v48 = v36;
      *(_WORD *)&v48[8] = 2050;
      *(void *)&v48[10] = v38;
      *(_WORD *)&v48[18] = 2050;
      *(void *)&v48[20] = v39;
      *(_WORD *)&v48[28] = 2050;
      double v49 = v23;
      __int16 v50 = 2050;
      double v51 = v24;
      __int16 v52 = 2050;
      double v53 = v9;
      __int16 v54 = 1026;
      BOOL v55 = v40;
      uint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSmootherMonitor fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:]_block_invoke", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    AnalyticsSendEventLazy();
    (*(void (**)(void, BOOL, void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) != 0, *(unsigned int *)(a1 + 96));
  }
}

NSDictionary *sub_101560C20(uint64_t a1)
{
  v3[0] = @"fetchTimeMsec";
  v4[0] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 48)];
  v3[1] = @"sampleCount";
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) count]);
  void v3[2] = @"yield";
  _OWORD v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  v3[3] = @"fetchIntervalDurationSeconds";
  void v4[3] = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  void v3[4] = @"intervalIndex";
  void v4[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  v3[5] = @"didHaveError";
  v4[5] = +[NSNumber numberWithBool:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) != 0];
  v3[6] = @"errorMessage";
  v4[6] = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:7];
}

void sub_101560E88(id a1)
{
  qword_102419418 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

void *sub_101560EB8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001DCF60(a1, a2);
    char v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_101560F14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x310], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101560F30()
{
  __cxa_atexit((void (*)(void *))sub_1015592D8, &qword_10248D7B0, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))sub_10155932C, &qword_10248D7B8, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))sub_101559380, &qword_10248D7C0, (void *)&_mh_execute_header);
  sub_100134750(__p, "CLSmootherMonitor");
  sub_100DEE064(qword_10248D7C8, __p);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit((void (*)(void *))sub_100DEE0E0, qword_10248D7C8, (void *)&_mh_execute_header);
  qword_10248D7F0 = 0;
  qword_10248D7F8 = 0;
  qword_10248D7E8 = 0;
  return __cxa_atexit((void (*)(void *))sub_1015593D4, &qword_10248D7E8, (void *)&_mh_execute_header);
}

void sub_101561034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101561050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v42, a3);
  sub_10065AB34((uint64_t)v41, a4);
  sub_10065AC50((uint64_t)v40, a5);
  sub_100DD5888(a1, a2, @"EmergencyLocation", 1, 5, (uint64_t)v42, (uint64_t)v41, (uint64_t)v40);
  sub_10065ACE8(v40);
  sub_10065ABCC(v41);
  sub_10065AAB0(v42);
  *(void *)a1 = off_10232D660;
  char v9 = sub_1000FFBA8();
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  sub_1000E9354(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  sub_1000E9354(a1 + 320);
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 40_Block_object_dispose(&STACK[0x310], 8) = 1065353216;
  sub_10130E0D0((void *)(a1 + 416));
  sub_100562B88((uint64_t)&v28, 0);
  int v27 = 0;
  id v39 = &v27;
  double v10 = sub_101031714(a1 + 144, &v27, (uint64_t)&unk_101D0B290, &v39);
  *((_DWORD *)v10 + 6) = v28;
  std::string::operator=((std::string *)(v10 + 4), &v29);
  *((unsigned char *)v10 + 56) = v30;
  std::string::operator=((std::string *)(v10 + 8), &v31);
  *((unsigned char *)v10 + 8_Block_object_dispose(&STACK[0x310], 8) = v32;
  sub_1004CE798((uint64_t)(v10 + 12), (uint64_t)v33);
  *((unsigned char *)v10 + 112) = v34;
  sub_1004CE798((uint64_t)(v10 + 15), (uint64_t)v35);
  *((unsigned char *)v10 + 136) = v36;
  sub_1004CE798((uint64_t)(v10 + 18), (uint64_t)v37);
  *((unsigned char *)v10 + 160) = v38;
  sub_100562C84((uint64_t)&v28);
  LODWORD(v39) = 0;
  uint64_t v28 = &v39;
  int v11 = sub_1000F3008(a1 + 240, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
  id v12 = (void **)(v11 + 24);
  if (v11[47] < 0) {
    operator delete(*v12);
  }
  NSObject *v12 = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = -1;
  *((void *)v11 + 7) = -1;
  v11[64] = 0;
  LODWORD(v39) = 0;
  uint64_t v28 = &v39;
  id v13 = sub_1001163CC(a1 + 280, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
  *(void *)((char *)v13 + 20) = -1;
  *((unsigned char *)v13 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
  sub_100562B88((uint64_t)&v28, 1);
  int v27 = 1;
  id v39 = &v27;
  uint64_t v14 = sub_101031714(a1 + 144, &v27, (uint64_t)&unk_101D0B290, &v39);
  *((_DWORD *)v14 + 6) = v28;
  std::string::operator=((std::string *)(v14 + 4), &v29);
  *((unsigned char *)v14 + 56) = v30;
  std::string::operator=((std::string *)(v14 + 8), &v31);
  *((unsigned char *)v14 + 8_Block_object_dispose(&STACK[0x310], 8) = v32;
  sub_1004CE798((uint64_t)(v14 + 12), (uint64_t)v33);
  *((unsigned char *)v14 + 112) = v34;
  sub_1004CE798((uint64_t)(v14 + 15), (uint64_t)v35);
  *((unsigned char *)v14 + 136) = v36;
  sub_1004CE798((uint64_t)(v14 + 18), (uint64_t)v37);
  *((unsigned char *)v14 + 160) = v38;
  sub_100562C84((uint64_t)&v28);
  LODWORD(v39) = 1;
  uint64_t v28 = &v39;
  int v15 = sub_1000F3008(a1 + 240, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
  id v16 = (void **)(v15 + 24);
  if (v15[47] < 0) {
    operator delete(*v16);
  }
  *id v16 = 0;
  *((void *)v15 + 4) = 0;
  *((void *)v15 + 5) = 0;
  *((void *)v15 + 6) = -1;
  *((void *)v15 + 7) = -1;
  v15[64] = 0;
  LODWORD(v39) = 1;
  uint64_t v28 = &v39;
  uint64_t v17 = sub_1001163CC(a1 + 280, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
  *(void *)((char *)v17 + 20) = -1;
  *((unsigned char *)v17 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
  if (*(unsigned char *)(a1 + 136))
  {
    sub_100562B88((uint64_t)&v28, 2);
    int v27 = 2;
    id v39 = &v27;
    unsigned int v18 = sub_101031714(a1 + 144, &v27, (uint64_t)&unk_101D0B290, &v39);
    *((_DWORD *)v18 + 6) = v28;
    std::string::operator=((std::string *)(v18 + 4), &v29);
    *((unsigned char *)v18 + 56) = v30;
    std::string::operator=((std::string *)(v18 + 8), &v31);
    *((unsigned char *)v18 + 8_Block_object_dispose(&STACK[0x310], 8) = v32;
    sub_1004CE798((uint64_t)(v18 + 12), (uint64_t)v33);
    *((unsigned char *)v18 + 112) = v34;
    sub_1004CE798((uint64_t)(v18 + 15), (uint64_t)v35);
    *((unsigned char *)v18 + 136) = v36;
    sub_1004CE798((uint64_t)(v18 + 18), (uint64_t)v37);
    *((unsigned char *)v18 + 160) = v38;
    sub_100562C84((uint64_t)&v28);
    LODWORD(v39) = 2;
    uint64_t v28 = &v39;
    unsigned int v19 = sub_1000F3008(a1 + 240, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
    __int16 v20 = (void **)(v19 + 24);
    if (v19[47] < 0) {
      operator delete(*v20);
    }
    char *v20 = 0;
    *((void *)v19 + 4) = 0;
    *((void *)v19 + 5) = 0;
    *((void *)v19 + 6) = -1;
    *((void *)v19 + 7) = -1;
    v19[64] = 0;
    LODWORD(v39) = 2;
    uint64_t v28 = &v39;
    id v21 = sub_1001163CC(a1 + 280, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
    *(void *)((char *)v21 + 20) = -1;
    *((unsigned char *)v21 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
    sub_100562B88((uint64_t)&v28, 3);
    int v27 = 3;
    id v39 = &v27;
    __int16 v22 = sub_101031714(a1 + 144, &v27, (uint64_t)&unk_101D0B290, &v39);
    *((_DWORD *)v22 + 6) = v28;
    std::string::operator=((std::string *)(v22 + 4), &v29);
    *((unsigned char *)v22 + 56) = v30;
    std::string::operator=((std::string *)(v22 + 8), &v31);
    *((unsigned char *)v22 + 8_Block_object_dispose(&STACK[0x310], 8) = v32;
    sub_1004CE798((uint64_t)(v22 + 12), (uint64_t)v33);
    *((unsigned char *)v22 + 112) = v34;
    sub_1004CE798((uint64_t)(v22 + 15), (uint64_t)v35);
    *((unsigned char *)v22 + 136) = v36;
    sub_1004CE798((uint64_t)(v22 + 18), (uint64_t)v37);
    *((unsigned char *)v22 + 160) = v38;
    sub_100562C84((uint64_t)&v28);
    LODWORD(v39) = 3;
    uint64_t v28 = &v39;
    double v23 = sub_1000F3008(a1 + 240, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
    double v24 = (void **)(v23 + 24);
    if (v23[47] < 0) {
      operator delete(*v24);
    }
    id *v24 = 0;
    *((void *)v23 + 4) = 0;
    *((void *)v23 + 5) = 0;
    *((void *)v23 + 6) = -1;
    *((void *)v23 + 7) = -1;
    v23[64] = 0;
    LODWORD(v39) = 3;
    uint64_t v28 = &v39;
    double v25 = sub_1001163CC(a1 + 280, (int *)&v39, (uint64_t)&unk_101D0B290, (_DWORD **)&v28);
    *(void *)((char *)v25 + 20) = -1;
    *((unsigned char *)v25 + 2_Block_object_dispose(&STACK[0x310], 8) = 0;
  }
  return a1;
}

void sub_101561718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_101312B30(v17);
  sub_1015661A0(v16);
  sub_1015661A0(v11 + 336);
  sub_10013F3C4(a10);
  sub_1000D7D80(v15);
  sub_1000DB114(v14);
  sub_101031644(v13);
  sub_10013F3C4(a11);
  sub_101031644(v12);
  sub_100DD5960(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10156181C(void *a1)
{
  *a1 = off_10232D660;
  uint64_t v2 = (uint64_t)(a1 + 18);
  sub_101312B30((uint64_t)(a1 + 52));
  sub_1015661A0((uint64_t)(a1 + 47));
  sub_1015661A0((uint64_t)(a1 + 42));
  sub_10013F3C4(a1 + 40);
  sub_1000D7D80((uint64_t)(a1 + 35));
  sub_1000DB114((uint64_t)(a1 + 30));
  sub_101031644((uint64_t)(a1 + 25));
  sub_10013F3C4(a1 + 23);
  sub_101031644(v2);

  return sub_100DD5960((uint64_t)a1);
}

void sub_1015618BC(void *a1)
{
  sub_10156181C(a1);

  operator delete();
}

uint64_t sub_1015618F4(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)long long buf = 136446210;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    [*(id *)(a1 + 16) UTF8String];
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1000E9354(buf);
  sub_1004CE798(a1 + 320, (uint64_t)buf);
  uint64_t result = sub_10013F3C4(buf);
  for (uint64_t i = *(void **)(a1 + 352); i; uint64_t i = (void *)*i)
  {
    sub_1000E9354(buf);
    sub_1004CE798((uint64_t)(i + 3), (uint64_t)buf);
    uint64_t result = sub_10013F3C4(buf);
  }
  for (j = *(void **)(a1 + 392); j; j = (void *)*j)
  {
    sub_1000E9354(buf);
    sub_1004CE798((uint64_t)(j + 3), (uint64_t)buf);
    uint64_t result = sub_10013F3C4(buf);
  }
  return result;
}

void sub_101561B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_101561B4C(std::string::size_type a1)
{
  sub_101561B84(a1);

  return sub_101561F5C(a1);
}

void sub_101561B84(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    int v4 = sub_1007E72D8(*(void **)(a1 + 128));
    int v5 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationEmergencyGeneralSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v15 = [*(id *)(a1 + 16) UTF8String];
    int v16 = sub_1007E72D8(*(void **)(a1 + 128));
    int v17 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(v25.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(v25.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v16;
    WORD1(v25.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v25.__r_.__value_.__r.__words[2]) = v17;
    unsigned int v18 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendGeneralSettingsNotification()", "%s\n", (const char *)v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  sub_100134750(&v25, "#CLConfig,");
  double v6 = std::string::append(&v25, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(__p, ",kNotificationEmergencyGeneralSettings,");
  if ((v23 & 0x80u) == 0) {
    double v8 = __p;
  }
  else {
    double v8 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v9 = v23;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  double v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  uint64_t v11 = (void *)v10->__r_.__value_.__r.__words[0];
  unint64_t size = v10->__r_.__value_.__l.__size_;
  v24[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(void *)&long long __dst = v11;
    *((void *)&__dst + 1) = size;
    *(_DWORD *)__int16 v20 = v24[0];
    *(_DWORD *)&v20[3] = *(_DWORD *)((char *)v24 + 3);
    char v21 = v13;
    goto LABEL_21;
  }
  sub_1000DC48C(&__dst, v11, size);
LABEL_21:
  uint64_t v14 = (void *)sub_1000E9358(a1 + 320);
  sub_1007E7320(&__dst, v14);
  if (v21 < 0) {
    operator delete((void *)__dst);
  }
  sub_100DD8718(a1, 0, a1 + 320);
  if (v13 < 0) {
    operator delete(v11);
  }
}

void sub_101561EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101561F5C(std::string::size_type a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  id v3 = (uint64_t *)(a1 + 416);
  uint64_t v4 = sub_1000E9358(a1 + 320);
  CFPropertyListRef propertyList = v2;
  sub_100F080A4((uint64_t *)(a1 + 416), v4, (uint64_t)v2);
  long long v82 = 0u;
  long long v83 = 0u;
  int v84 = 1065353216;
  int v5 = *(uint64_t **)(a1 + 392);
  if (v5)
  {
    uint64_t v69 = a1 + 336;
    uint64_t v6 = a1 + 144;
    do
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      long long v7 = (unsigned int *)(v5 + 2);
      double v8 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [*(id *)(a1 + 16) UTF8String];
        int v10 = *v7;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,overlaying asset settings for desc,%{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        id v31 = [*(id *)(a1 + 16) UTF8String];
        int v32 = *v7;
        LODWORD(v86.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
        WORD2(v86.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v32;
        uint64_t v33 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v33);
        if (v33 != &buf) {
          free(v33);
        }
      }
      uint64_t v11 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, propertyList, 1uLL);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      uint64_t v12 = sub_101566220(v69, (int *)v5 + 4, (uint64_t)&unk_101D0B290, &buf);
      uint64_t v13 = sub_1000E9358((uint64_t)(v12 + 24));
      sub_100F080A4(v3, v13, (uint64_t)v11);
      uint64_t v14 = sub_1000E9358((uint64_t)(v5 + 3));
      sub_100F080A4(v3, v14, (uint64_t)v11);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v15 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [*(id *)(a1 + 16) UTF8String];
        int v17 = *v7;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,finished asset settings overlay for desc,%{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        id v34 = [*(id *)(a1 + 16) UTF8String];
        int v35 = *v7;
        LODWORD(v86.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        WORD2(v86.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v35;
        char v36 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v36);
        if (v36 != &buf) {
          free(v36);
        }
      }
      sub_100134750(&v86, "#CLConfig,");
      unsigned int v18 = std::string::append(&v86, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      sub_100134750(&__p, ",asset settings overlay,");
      std::string::size_type v20 = a1;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      unsigned __int8 v23 = std::string::append(&buf, (const std::string::value_type *)p_p, size);
      double v24 = (void *)v23->__r_.__value_.__r.__words[0];
      unint64_t v25 = v23->__r_.__value_.__l.__size_;
      LODWORD(v76[0]) = v23->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v76 + 3) = *(_DWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + 3);
      int v26 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v86.__r_.__value_.__l.__data_);
        if (v26 < 0)
        {
LABEL_27:
          sub_1000DC48C(&__dst, v24, v25);
          goto LABEL_28;
        }
      }
      else if (v26 < 0)
      {
        goto LABEL_27;
      }
      *(void *)&long long __dst = v24;
      *((void *)&__dst + 1) = v25;
      *(_DWORD *)uint64_t v80 = v76[0];
      *(_DWORD *)&v80[3] = *(_DWORD *)((char *)v76 + 3);
      char v81 = v26;
LABEL_28:
      sub_1007E7320(&__dst, v11);
      if (v81 < 0) {
        operator delete((void *)__dst);
      }
      sub_1004CE540(&v86, v11);
      uint64_t v27 = *v7;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      uint64_t v28 = sub_101031714(v6, (int *)v5 + 4, (uint64_t)&unk_101D0B290, &__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      std::string v29 = sub_101031714(v6, (int *)v5 + 4, (uint64_t)&unk_101D0B290, &__p);
      sub_1005555F0(&buf, v27, v28 + 4, v29 + 8, &v86);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 2);
      char v30 = sub_101031714((uint64_t)&v82, (int *)v5 + 4, (uint64_t)&unk_101D0B290, &__p);
      *((_DWORD *)v30 + 6) = buf.__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)(v30 + 4), (const std::string *)&buf.__r_.__value_.__r.__words[1]);
      *((unsigned char *)v30 + 56) = (_BYTE)v89;
      std::string::operator=((std::string *)(v30 + 8), &v90);
      *((unsigned char *)v30 + 8_Block_object_dispose(&STACK[0x310], 8) = v91;
      sub_1004CE798((uint64_t)(v30 + 12), (uint64_t)v92);
      *((unsigned char *)v30 + 112) = v92[16];
      sub_1004CE798((uint64_t)(v30 + 15), (uint64_t)v93);
      *((unsigned char *)v30 + 136) = v93[16];
      sub_1004CE798((uint64_t)(v30 + 18), (uint64_t)v94);
      *((unsigned char *)v30 + 160) = v94[16];
      sub_100562C84((uint64_t)&buf);
      sub_10013F3C4(&v86);
      a1 = v20;
      if (v26 < 0) {
        operator delete(v24);
      }
      int v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  id v37 = objc_alloc_init((Class)NSMutableDictionary);
  for (std::string::size_type i = a1 + 216; ; sub_100555E50((int *)(i + 24), v37))
  {
    std::string::size_type i = *(void *)i;
    if (!i) {
      break;
    }
  }
  id v39 = objc_alloc_init((Class)NSMutableDictionary);
  for (std::string::size_type j = a1 + 160; ; sub_100555E50((int *)(j + 24), v39))
  {
    std::string::size_type j = *(void *)j;
    if (!j) {
      break;
    }
  }
  id v41 = objc_alloc_init((Class)NSMutableDictionary);
  for (k = (int *)v83; k; k = *(int **)k)
    sub_100555E50(k + 6, v41);
  id v43 = objc_alloc_init((Class)NSMutableDictionary);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  long long v44 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v45 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,creating mutable copy of settings from default bundle", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v61 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(v86.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
    __int16 v62 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v62);
    if (v62 != &buf) {
      free(v62);
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  buf.__r_.__value_.__l.__size_ = 3221225472;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_101565FE4;
  long long v88 = &unk_10231AA88;
  id v89 = v43;
  v90.__r_.__value_.__r.__words[0] = a1;
  [v37 enumerateKeysAndObjectsUsingBlock:&buf];
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  long long v46 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v47 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,overlaying settings from CBs/OBs", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v63 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(v86.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
    __int16 v64 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v64);
    if (v64 != &buf) {
      free(v64);
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  buf.__r_.__value_.__l.__size_ = 3221225472;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_101565FE4;
  long long v88 = &unk_10231AA88;
  id v89 = v43;
  v90.__r_.__value_.__r.__words[0] = a1;
  [v39 enumerateKeysAndObjectsUsingBlock:&buf];
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  uint64_t v48 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v49 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,overlaying asset settings onto settings from bundles", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v65 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(v86.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
    BOOL v66 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v66);
    if (v66 != &buf) {
      free(v66);
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  buf.__r_.__value_.__l.__size_ = 3221225472;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_101565FE4;
  long long v88 = &unk_10231AA88;
  id v89 = v43;
  v90.__r_.__value_.__r.__words[0] = a1;
  [v41 enumerateKeysAndObjectsUsingBlock:&buf];
  sub_1000E9354(&v86);
  v86.__r_.__value_.__r.__words[2] = -1;
  sub_1004CE540(&buf, v43);
  sub_1004CE798((uint64_t)&v86, (uint64_t)&buf);
  sub_10013F3C4(&buf);
  LODWORD(v86.__r_.__value_.__r.__words[2]) = sub_1007E7290(*(void **)(a1 + 128));
  HIDWORD(v86.__r_.__value_.__r.__words[2]) = sub_1007E72D8(*(void **)(a1 + 128));
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  __int16 v50 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v51 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v86.__r_.__value_.__r.__words[2]);
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v86.__r_.__value_.__r.__words[2];
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationEmergencyCarrierSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)&buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v67 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v86.__r_.__value_.__r.__words[2]);
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v86.__r_.__value_.__r.__words[2];
    uint64_t v68 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::sendCarrierSettingsNotification()", "%s\n", (const char *)v68);
    if (v68 != &buf) {
      free(v68);
    }
  }
  sub_100134750(&__p, "#CLConfig,");
  __int16 v52 = std::string::append(&__p, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v76, ",kNotificationEmergencyCarrierSettings,");
  if ((v77 & 0x80u) == 0) {
    __int16 v54 = v76;
  }
  else {
    __int16 v54 = (void **)v76[0];
  }
  if ((v77 & 0x80u) == 0) {
    std::string::size_type v55 = v77;
  }
  else {
    std::string::size_type v55 = (std::string::size_type)v76[1];
  }
  uint64_t v56 = std::string::append(&buf, (const std::string::value_type *)v54, v55);
  uint64_t v57 = (void *)v56->__r_.__value_.__r.__words[0];
  unint64_t v58 = v56->__r_.__value_.__l.__size_;
  v78[0] = v56->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v78 + 3) = *(_DWORD *)((char *)&v56->__r_.__value_.__r.__words[2] + 3);
  int v59 = SHIBYTE(v56->__r_.__value_.__r.__words[2]);
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  if ((char)v77 < 0) {
    operator delete(v76[0]);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_82;
    }
  }
  else if ((v59 & 0x80000000) == 0)
  {
LABEL_82:
    *(void *)&long long v73 = v57;
    *((void *)&v73 + 1) = v58;
    *(_DWORD *)uint64_t v74 = v78[0];
    *(_DWORD *)&v74[3] = *(_DWORD *)((char *)v78 + 3);
    char v75 = v59;
    goto LABEL_85;
  }
  sub_1000DC48C(&v73, v57, v58);
LABEL_85:
  sub_1007E7320(&v73, v43);
  if (v75 < 0) {
    operator delete((void *)v73);
  }
  sub_1004CE794(v71);
  std::string::size_type v72 = v86.__r_.__value_.__r.__words[2];
  sub_100DD8830(a1 + 32, 1);
  sub_10013F3C4(v71);
  if (v59 < 0) {
    operator delete(v57);
  }
  sub_10013F3C4(&v86);
  return sub_101031644((uint64_t)&v82);
}

void sub_101562F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
}

void sub_1015630C8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x310], 8) = sub_100DD0F94(*(void **)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_DWORD *)(a2 + 52) = sub_1007E7290(v4);
    *(_DWORD *)(a2 + 56) = sub_1007E72D8(*(void **)(a1 + 128));
    *(unsigned char *)(a2 + 85) = sub_100DD0F80(*(void *)(a1 + 128));
    uint64_t v5 = a1 + 240;
    int v18 = 0;
    *(void *)std::string buf = &v18;
    uint64_t v6 = sub_1000F3008(a1 + 240, &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    std::string::operator=((std::string *)(a2 + 88), (const std::string *)v6 + 1);
    char v7 = v6[64];
    *(_OWORD *)(a2 + 112) = *((_OWORD *)v6 + 3);
    *(unsigned char *)(a2 + 12_Block_object_dispose(&STACK[0x310], 8) = v7;
    int v18 = 1;
    *(void *)std::string buf = &v18;
    double v8 = sub_1000F3008(a1 + 240, &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    std::string::operator=((std::string *)(a2 + 136), (const std::string *)v8 + 1);
    char v9 = v8[64];
    *(_OWORD *)(a2 + 160) = *((_OWORD *)v8 + 3);
    *(unsigned char *)(a2 + 176) = v9;
    if (*(unsigned char *)(a1 + 136))
    {
      int v18 = 2;
      *(void *)std::string buf = &v18;
      int v10 = sub_1000F3008(v5, &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      std::string::operator=((std::string *)(a2 + 184), (const std::string *)v10 + 1);
      char v11 = v10[64];
      *(_OWORD *)(a2 + 20_Block_object_dispose(&STACK[0x310], 8) = *((_OWORD *)v10 + 3);
      *(unsigned char *)(a2 + 224) = v11;
      int v18 = 3;
      *(void *)std::string buf = &v18;
      uint64_t v12 = sub_1000F3008(v5, &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      std::string::operator=((std::string *)(a2 + 232), (const std::string *)v12 + 1);
      char v13 = v12[64];
      *(_OWORD *)(a2 + 256) = *((_OWORD *)v12 + 3);
      *(unsigned char *)(a2 + 272) = v13;
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    uint64_t v14 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,getVersionInfoForAwd,no asset available to report for component", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v16 = [*(id *)(a1 + 16) UTF8String];
      int v18 = 136446210;
      id v19 = v16;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::getVersionInfoForAwd(CLDaemonStats_Type::LocationMobileAssetStatistics &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

uint64_t sub_1015633F8(std::string::size_type a1, void *a2)
{
  for (std::string::size_type i = *(void **)(a1 + 160); i; std::string::size_type i = (void *)*i)
    sub_100556180((uint64_t)(i + 3), a2);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  uint64_t v5 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)std::string buf = 136446210;
    id v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,handleBundleChange,CB/OB changed", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    [*(id *)(a1 + 16) UTF8String];
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::handleBundleChange(NSDictionary *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t result = sub_100DD5C90((id *)a1);
  if (result)
  {
    sub_1015635F4(a1);
    return sub_101561F5C(a1);
  }
  return result;
}

void sub_1015635F4(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 16) UTF8String];
      id v4 = [[[*(id *)(a1 + 128) getLocalFileUrl] absoluteString] UTF8String];
      *(_DWORD *)std::string buf = 136446467;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading carrier settings under %{private}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v17 = [*(id *)(a1 + 16) UTF8String];
      id v18 = [[[*(id *)(a1 + 128) getLocalFileUrl] absoluteString] UTF8String];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
      id v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings()", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    memset(&__p, 0, sizeof(__p));
    sub_1000C7F88(buf);
    BOOL v5 = sub_1004D1284(*(uint64_t *)buf, "CLConfigBundleIdOverride", &__p);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v5)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v6 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [*(id *)(a1 + 16) UTF8String];
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446467;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2081;
        *(void *)&buf[14] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,overriding bundle IDs to %{private}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        [*(id *)(a1 + 16) UTF8String];
        std::string::size_type v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings()", "%s\n", v20);
        if (v20 != buf) {
          free(v20);
        }
      }
      for (uint64_t i = a1 + 160; ; sub_101565C14(a1, (int *)(i + 16), &__p, v10 + 1))
      {
        uint64_t i = *(void *)i;
        if (!i) {
          break;
        }
        *(void *)std::string buf = i + 16;
        id v10 = (std::string *)sub_1000F3008(a1 + 240, (int *)(i + 16), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      }
    }
    else
    {
      for (uint64_t j = a1 + 160; ; sub_101565C14(a1, (int *)(j + 16), (std::string *)(j + 32), v16 + 1))
      {
        uint64_t j = *(void *)j;
        if (!j) {
          break;
        }
        *(void *)std::string buf = j + 16;
        id v16 = (std::string *)sub_1000F3008(a1 + 240, (int *)(j + 16), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    char v11 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCarrierSettings,asset unavailable,ignoring", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v13 = [*(id *)(a1 + 16) UTF8String];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings()", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
  }
}

void sub_101563BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101563C18(std::string::size_type a1, const void *a2)
{
  CFPropertyListRef v3 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a2, 1uLL);
  sub_1004CE540(v5, v3);
  sub_1004CE798(a1 + 184, (uint64_t)v5);
  sub_10013F3C4(v5);
  sub_101563C9C(a1);
  return sub_101561F5C(a1);
}

void sub_101563C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101563C9C(uint64_t a1)
{
  uint64_t v2 = a1 + 184;
  if (sub_1004D5EE4(a1 + 184))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    CFPropertyListRef v3 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      v18[0] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings,no default bundle settings,ignoring", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      [*(id *)(a1 + 16) UTF8String];
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    for (uint64_t i = *(uint64_t **)(a1 + 216); i; uint64_t i = (uint64_t *)*i)
    {
      sub_100562B88((uint64_t)buf, *((_DWORD *)i + 4));
      *((_DWORD *)i + 6) = *(_DWORD *)buf;
      std::string::operator=((std::string *)(i + 4), (const std::string *)((char *)v18 + 4));
      *((unsigned char *)i + 56) = v19;
      std::string::operator=((std::string *)(i + 8), &v20);
      *((unsigned char *)i + 8_Block_object_dispose(&STACK[0x310], 8) = v21;
      sub_1004CE798((uint64_t)(i + 12), (uint64_t)v22);
      *((unsigned char *)i + 112) = v23;
      sub_1004CE798((uint64_t)(i + 15), (uint64_t)v24);
      *((unsigned char *)i + 136) = v25;
      sub_1004CE798((uint64_t)(i + 18), (uint64_t)v26);
      *((unsigned char *)i + 160) = v27;
      sub_100562C84((uint64_t)buf);
    }
  }
  else
  {
    id v6 = [(id)sub_1000E9358(v2) valueForKey:@"LocationByCountry"];
    if (v6)
    {
      id v7 = v6;
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      double v8 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)std::string buf = 136446210;
        v18[0] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        [*(id *)(a1 + 16) UTF8String];
        id v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings()", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      for (uint64_t j = *(uint64_t **)(a1 + 296); j; uint64_t j = (uint64_t *)*j)
        sub_101564848(a1, *((_DWORD *)j + 4), v7, *((unsigned int *)j + 5), *((unsigned int *)j + 6), *((unsigned __int8 *)j + 28));
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      char v11 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v12 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)std::string buf = 136446210;
        v18[0] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readDefaultBundleSettings,no location by country array", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        [*(id *)(a1 + 16) UTF8String];
        id v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      for (k = *(uint64_t **)(a1 + 216); k; k = (uint64_t *)*k)
      {
        sub_100562B88((uint64_t)buf, *((_DWORD *)k + 4));
        *((_DWORD *)k + 6) = *(_DWORD *)buf;
        std::string::operator=((std::string *)(k + 4), (const std::string *)((char *)v18 + 4));
        *((unsigned char *)k + 56) = v19;
        std::string::operator=((std::string *)(k + 8), &v20);
        *((unsigned char *)k + 8_Block_object_dispose(&STACK[0x310], 8) = v21;
        sub_1004CE798((uint64_t)(k + 12), (uint64_t)v22);
        *((unsigned char *)k + 112) = v23;
        sub_1004CE798((uint64_t)(k + 15), (uint64_t)v24);
        *((unsigned char *)k + 136) = v25;
        sub_1004CE798((uint64_t)(k + 18), (uint64_t)v26);
        *((unsigned char *)k + 160) = v27;
        sub_100562C84((uint64_t)buf);
      }
    }
  }
}

void sub_1015642C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100562C84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1015642E4(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    uint64_t v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 16) UTF8String];
      id v4 = [[[objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl") absoluteString] UTF8String];
      *(_DWORD *)std::string buf = 136446467;
      id v22 = v3;
      __int16 v23 = 2081;
      id v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,reading country settings under %{private}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v13 = [*(id *)(a1 + 16) UTF8String];
      id v14 = [[[*(id *)(a1 + 128) getLocalFileUrl] absoluteString] UTF8String];
      int v17 = 136446467;
      id v18 = v13;
      __int16 v19 = 2081;
      id v20 = v14;
      id v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_1000E9354(&v17);
    if (sub_100DD6DC0(a1, @"countryInfoMap.plist", (uint64_t)&v17))
    {
      for (uint64_t i = a1 + 296;
            ;
            sub_1015651E0(a1, *(_DWORD *)(i + 16), (uint64_t)&v17, *(unsigned int *)(i + 20), *(unsigned int *)(i + 24), *(unsigned __int8 *)(i + 28)))
      {
        uint64_t i = *(void *)i;
        if (!i) {
          break;
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v10 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)std::string buf = 136446210;
        id v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,failed to load country info map file", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        [*(id *)(a1 + 16) UTF8String];
        id v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      for (uint64_t j = *(void **)(a1 + 352); j; uint64_t j = (void *)*j)
      {
        sub_1000E9354(buf);
        sub_1004CE798((uint64_t)(j + 3), (uint64_t)buf);
        sub_10013F3C4(buf);
      }
    }
    sub_10013F3C4(&v17);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      id v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,asset unavailable,ignoring", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v8 = [*(id *)(a1 + 16) UTF8String];
      int v17 = 136446210;
      id v18 = v8;
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_101564808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_101564848(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v26 = a2;
  sub_100562B88((uint64_t)buf, a2);
  *(void *)char v27 = &v26;
  id v11 = sub_101031714(a1 + 200, &v26, (uint64_t)&unk_101D0B290, (_DWORD **)v27);
  *((_DWORD *)v11 + 6) = *(_DWORD *)buf;
  std::string::operator=((std::string *)(v11 + 4), (const std::string *)&buf[8]);
  *((unsigned char *)v11 + 56) = v44;
  std::string::operator=((std::string *)(v11 + 8), &v45);
  *((unsigned char *)v11 + 8_Block_object_dispose(&STACK[0x310], 8) = v46;
  sub_1004CE798((uint64_t)(v11 + 12), (uint64_t)v47);
  *((unsigned char *)v11 + 112) = v47[16];
  sub_1004CE798((uint64_t)(v11 + 15), (uint64_t)v48);
  *((unsigned char *)v11 + 136) = v48[16];
  sub_1004CE798((uint64_t)(v11 + 18), (uint64_t)v49);
  *((unsigned char *)v11 + 160) = v49[16];
  sub_100562C84((uint64_t)buf);
  sub_1000E9354(v25);
  if (sub_100DD7940(a1, a3, a4, a5, a6, (uint64_t)v25))
  {
    id v12 = [(id)sub_1000E9358((uint64_t)v25) valueForKey:@"Location"];
    if (v12)
    {
      CFDictionaryRef v13 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v12, 1uLL);
      *(void *)std::string buf = &v26;
      id v14 = sub_101031714(a1 + 200, &v26, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_100555D30((uint64_t)(v14 + 3), v13);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v15 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = v16;
        __int16 v37 = 1026;
        int v38 = v26;
        __int16 v39 = 1026;
        int v40 = a4;
        __int16 v41 = 1026;
        int v42 = a5;
        __int16 v43 = 1026;
        int v44 = a6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings,loaded country settings for descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 == -1)
        {
LABEL_9:
          id v17 = [*(id *)(a1 + 16) UTF8String];
          *(_DWORD *)char v27 = 136447234;
          *(void *)&v27[4] = v17;
          __int16 v28 = 1026;
          int v29 = v26;
          __int16 v30 = 1026;
          int v31 = a4;
          __int16 v32 = 1026;
          int v33 = a5;
          __int16 v34 = 1026;
          int v35 = a6;
          id v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings(BundleDescriptor, NSArray *, int32_t, int32_t, BOOL)", "%s\n", v18);
LABEL_26:
          if (v18 != buf) {
            free(v18);
          }
          return sub_10013F3C4(v25);
        }
LABEL_28:
        dispatch_once(&qword_102419600, &stru_10232D700);
        goto LABEL_9;
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      char v21 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v22 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = v22;
        __int16 v37 = 1026;
        int v38 = v26;
        __int16 v39 = 1026;
        int v40 = a4;
        __int16 v41 = 1026;
        int v42 = a5;
        __int16 v43 = 1026;
        int v44 = a6;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readDefaultBundleSettings,location dict not present,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        id v24 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)char v27 = 136447234;
        *(void *)&v27[4] = v24;
        __int16 v28 = 1026;
        int v29 = v26;
        __int16 v30 = 1026;
        int v31 = a4;
        __int16 v32 = 1026;
        int v33 = a5;
        __int16 v34 = 1026;
        int v35 = a6;
        id v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readDefaultBundleSettings(BundleDescriptor, NSArray *, int32_t, int32_t, BOOL)", "%s\n", v18);
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    __int16 v19 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136447234;
      *(void *)&uint8_t buf[4] = v20;
      __int16 v37 = 1026;
      int v38 = v26;
      __int16 v39 = 1026;
      int v40 = a4;
      __int16 v41 = 1026;
      int v42 = a5;
      __int16 v43 = 1026;
      int v44 = a6;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readDefaultBundleSettings,no country settings found,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }
  return sub_10013F3C4(v25);
}

void sub_101564F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_101564F60(uint64_t a1)
{
  sub_101564FC8(a1);
  sub_1015642E4(a1);
  sub_1015635F4(a1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 120);

  return v2(a1);
}

void sub_101564FC8(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    sub_100DD6DC0(a1, @"general.plist", a1 + 320);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    uint64_t v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readGeneralSettings,asset unavailable,ignoring", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      [*(id *)(a1 + 16) UTF8String];
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readGeneralSettings()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1015651E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v39 = a2;
  if (*(void *)(a1 + 128))
  {
    sub_1000E9354(buf);
    *(void *)int v40 = &v39;
    id v11 = sub_101566220(a1 + 336, &v39, (uint64_t)&unk_101D0B290, (_DWORD **)v40);
    sub_1004CE798((uint64_t)(v11 + 24), (uint64_t)buf);
    sub_10013F3C4(buf);
    sub_1000E9354(v38);
    if ((sub_100DD7598(a1, a3, a4, a5, a6, (uint64_t)v38) & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      char v25 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = v26;
        __int16 v48 = 1026;
        LODWORD(v49) = v39;
        WORD2(v49) = 1026;
        *(_DWORD *)((char *)&v49 + 6) = a4;
        WORD5(v49) = 1026;
        HIDWORD(v49) = a5;
        *(_WORD *)__int16 v50 = 1026;
        *(_DWORD *)&v50[2] = a6;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,no country info found,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        id v27 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)int v40 = 136447234;
        *(void *)&void v40[4] = v27;
        __int16 v41 = 1026;
        LODWORD(v42) = v39;
        WORD2(v42) = 1026;
        *(_DWORD *)((char *)&v42 + 6) = a4;
        WORD5(v42) = 1026;
        HIDWORD(v42) = a5;
        *(_WORD *)__int16 v43 = 1026;
        *(_DWORD *)&v43[2] = a6;
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v28);
        if (v28 != buf) {
          free(v28);
        }
      }
      goto LABEL_57;
    }
    memset(&__p, 0, sizeof(__p));
    if (sub_1000A7CF8((uint64_t)v38, @"SettingsFile", &__p))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      CFDictionaryRef v13 = +[NSString stringWithUTF8String:p_p];
      *(void *)std::string buf = &v39;
      id v14 = sub_101566220(a1 + 336, &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (!sub_100DD6DC0(a1, v13, (uint64_t)(v14 + 24)))
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        __int16 v32 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
          id v33 = [*(id *)(a1 + 16) UTF8String];
          __int16 v34 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446723;
          *(void *)&uint8_t buf[4] = v33;
          __int16 v48 = 2081;
          *(void *)&long long v49 = v34;
          WORD4(v49) = 1026;
          *(_DWORD *)((char *)&v49 + 10) = v39;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountrySettings,failed to load settings file,%{private}s,descriptor,%{public}d", buf, 0x1Cu);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_55;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10232D700);
        }
        id v35 = [*(id *)(a1 + 16) UTF8String];
        char v36 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int v40 = 136446723;
        *(void *)&void v40[4] = v35;
        __int16 v41 = 2081;
        *(void *)&long long v42 = v36;
        WORD4(v42) = 1026;
        *(_DWORD *)((char *)&v42 + 10) = v39;
        id v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v20);
        if (v20 == buf) {
          goto LABEL_55;
        }
        goto LABEL_64;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v15 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [*(id *)(a1 + 16) UTF8String];
        id v17 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          id v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136447491;
        *(void *)&uint8_t buf[4] = v16;
        __int16 v48 = 1026;
        LODWORD(v49) = v39;
        WORD2(v49) = 2081;
        *(void *)((char *)&v49 + 6) = v17;
        HIWORD(v49) = 1026;
        *(_DWORD *)__int16 v50 = a4;
        *(_WORD *)&v50[4] = 1026;
        int v51 = a5;
        __int16 v52 = 1026;
        int v53 = a6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,loaded settings for descriptor,%{public}d,filename,%{private}s,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x2Eu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_55;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v18 = [*(id *)(a1 + 16) UTF8String];
      __int16 v19 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v40 = 136447491;
      *(void *)&void v40[4] = v18;
      __int16 v41 = 1026;
      LODWORD(v42) = v39;
      WORD2(v42) = 2081;
      *(void *)((char *)&v42 + 6) = v19;
      HIWORD(v42) = 1026;
      *(_DWORD *)__int16 v43 = a4;
      *(_WORD *)&v43[4] = 1026;
      int v44 = a5;
      __int16 v45 = 1026;
      int v46 = a6;
      id v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v20);
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      int v29 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v30 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = v30;
        __int16 v48 = 1026;
        LODWORD(v49) = v39;
        WORD2(v49) = 1026;
        *(_DWORD *)((char *)&v49 + 6) = a4;
        WORD5(v49) = 1026;
        HIDWORD(v49) = a5;
        *(_WORD *)__int16 v50 = 1026;
        *(_DWORD *)&v50[2] = a6;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountrySettings,missing settings filename,descriptor,%{public}d,mcc,%{public}d,mnc,%{public}d,is3DigitMnc,%{public}d", buf, 0x24u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_55;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v31 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)int v40 = 136447234;
      *(void *)&void v40[4] = v31;
      __int16 v41 = 1026;
      LODWORD(v42) = v39;
      WORD2(v42) = 1026;
      *(_DWORD *)((char *)&v42 + 6) = a4;
      WORD5(v42) = 1026;
      HIDWORD(v42) = a5;
      *(_WORD *)__int16 v43 = 1026;
      *(_DWORD *)&v43[2] = a6;
      id v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v20);
    }
    if (v20 == buf)
    {
LABEL_55:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_57:
      sub_10013F3C4(v38);
      return;
    }
LABEL_64:
    free(v20);
    goto LABEL_55;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  char v21 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v22 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,asset unavailable,ignoring", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v23 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)int v40 = 136446210;
    *(void *)&void v40[4] = v23;
    id v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCountrySettings(BundleDescriptor, CLNameValuePair &, int32_t, int32_t, BOOL)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
}

void sub_101565BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a17);
  _Unwind_Resume(a1);
}

void sub_101565C14(uint64_t a1, int *a2, std::string *__str, std::string *this)
{
  std::string::operator=(this, __str);
  id v8 = (const char *)[@"kBundleIDUnavailable" UTF8String];
  size_t v9 = strlen(v8);
  size_t v10 = v9;
  std::string::size_type v11 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v9 == __str->__r_.__value_.__l.__size_)
    {
      if (v9 == -1) {
        goto LABEL_35;
      }
      id v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
LABEL_9:
    if ((v11 & 0x80u) == 0) {
      std::string::size_type size = v11;
    }
    else {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    id v14 = __p;
    sub_1001110E4((uint64_t)__p, size + 6);
    if (v32 < 0) {
      id v14 = *(unsigned char **)__p;
    }
    if (size)
    {
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v15 = __str;
      }
      else {
        id v15 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      memmove(v14, v15, size);
    }
    strcpy(&v14[size], ".plist");
    if (v32 >= 0) {
      id v16 = __p;
    }
    else {
      id v16 = *(unsigned char **)__p;
    }
    id v17 = +[NSString stringWithUTF8String:v16];
    *(void *)id v26 = a2;
    id v18 = sub_101566220(a1 + 376, a2, (uint64_t)&unk_101D0B290, (_DWORD **)v26);
    this[1].__r_.__value_.__s.__data_[16] = sub_100DD6DC0(a1, v17, (uint64_t)(v18 + 24));
    if (v32 < 0) {
      operator delete(*(void **)__p);
    }
    return;
  }
  if (v9 != v11) {
    goto LABEL_9;
  }
  id v12 = __str;
  if (v10 == -1) {
LABEL_35:
  }
    sub_1002E93D4();
LABEL_8:
  if (memcmp(v12, v8, v10)) {
    goto LABEL_9;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10232D700);
  }
  __int16 v19 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = [*(id *)(a1 + 16) UTF8String];
    int v21 = *a2;
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = v20;
    __int16 v30 = 1026;
    int v31 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,bundle ID unavailable for descriptor,%{public}d", __p, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    id v23 = [*(id *)(a1 + 16) UTF8String];
    int v24 = *a2;
    *(_DWORD *)id v26 = 136446466;
    *(void *)&v26[4] = v23;
    __int16 v27 = 1026;
    int v28 = v24;
    char v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyLocationConfigAsset::readCarrierSettings(const BundleDescriptor &, const std::string &, CLDaemonStats_Type::CarrierSettingsStatus &)", "%s\n", v25);
    if (v25 != __p) {
      free(v25);
    }
  }
  sub_1000E9354(__p);
  *(void *)id v26 = a2;
  id v22 = sub_101566220(a1 + 376, a2, (uint64_t)&unk_101D0B290, (_DWORD **)v26);
  sub_1004CE798((uint64_t)(v22 + 24), (uint64_t)__p);
  sub_10013F3C4(__p);
  this[1].__r_.__value_.__s.__data_[16] = 0;
}

void sub_101565FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

id sub_101565FE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [*(id *)(a1 + 32) objectForKey:a2];
    if (!v7 || (id v8 = v7, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      id v8 = objc_alloc_init((Class)NSMutableDictionary);
      [*(id *)(a1 + 32) setObject:v8 forKey:a2];
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_101565FE4;
    v13[3] = &unk_10231AA88;
    void v13[4] = v8;
    v13[5] = v6;
    return [a3 enumerateKeysAndObjectsUsingBlock:v13];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a3, 2uLL);
      std::string::size_type v11 = *(void **)(a1 + 32);
    }
    else
    {
      id v12 = *(void **)(a1 + 32);
      id v10 = [a3 copy];
      std::string::size_type v11 = v12;
    }
    return [v11 setObject:v10 forKey:a2];
  }
}

void sub_101566170(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1015661A0(uint64_t a1)
{
  sub_1015661DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1015661DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      sub_10013F3C4(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

char *sub_101566220(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    size_t v9 = *(char ***)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = *(char **)i)
      {
        unint64_t v11 = *((void *)i + 1);
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_101566468(a1, *a2, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  id v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    void *v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(char **)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(char **)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t i = v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1015664E4(v21, 0);
  return i;
}

void sub_101566450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1015664E4((char **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_101566468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x28uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x310], 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = **a3;
  uint64_t result = sub_1000E9354(v8 + 3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1015664CC(_Unwind_Exception *a1)
{
  sub_1015664E4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1015664E4(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      sub_10013F3C4(v2 + 24);
    }
    operator delete(v2);
  }
}

void sub_10156653C(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102488890, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102488890))
  {
    __cxa_atexit((void (*)(void *))sub_1015665F8, &xmmword_102488880, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102488890);
  }
  if (qword_102488898 != -1) {
    dispatch_once(&qword_102488898, &stru_10232D720);
  }
  uint64_t v2 = *((void *)&xmmword_102488880 + 1);
  *a1 = xmmword_102488880;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t sub_1015665F8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_101566628(id a1)
{
  sub_101567344(&v3);
  long long v1 = v3;
  long long v3 = 0uLL;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&xmmword_102488880 + 1);
  xmmword_102488880 = v1;
  if (v2)
  {
    sub_1000DB0A0(v2);
    if (*((void *)&v3 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
    }
  }
}

uint64_t sub_10156667C(_OWORD *a1, _OWORD *a2)
{
  if ((sub_1000E6DB4((uint64_t)a2) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10232D740);
    }
    float v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "@WifiPositionWiggleMetrics, invalid location LatLon", buf, 2u);
    }
    BOOL v13 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_18:
      size_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiPositionWiggleMetrics::receiveLocation(const CLDaemonLocation &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
      return 0;
    }
LABEL_21:
    dispatch_once(&qword_1024193A0, &stru_10232D740);
    goto LABEL_18;
  }
  if (*((_DWORD *)a2 + 24) == 4)
  {
    sub_101566978((uint64_t)a1, (uint64_t)a2);
    long long v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    long long v5 = a2[2];
    long long v6 = a2[3];
    long long v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[2] = v5;
    a1[3] = v6;
    long long v8 = a2[6];
    long long v9 = a2[7];
    long long v10 = a2[8];
    *(_OWORD *)((char *)a1 + 140) = *(_OWORD *)((char *)a2 + 140);
    a1[7] = v9;
    a1[8] = v10;
    a1[6] = v8;
    return 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10232D740);
  }
  BOOL v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    int v15 = *((_DWORD *)a2 + 24);
    *(_DWORD *)std::string buf = 67240192;
    int v19 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "@WifiPositionWiggleMetrics, invalid location type %{public}d", buf, 8u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  return result;
}

void sub_101566978(uint64_t a1, uint64_t a2)
{
  sub_101566D80(a1, a2, (uint64_t)buf);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 169) = *(_OWORD *)&buf[9];
  if (*(unsigned char *)(a1 + 184))
  {
    v9[0] = @"positionWiggleDistance";
    v10[0] = +[NSNumber numberWithDouble:*(double *)(a1 + 160)];
    v9[1] = @"positionWiggleTimestampDelta";
    v10[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 168)];
    void v9[2] = @"positionWiggleSpeed";
    void v10[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 176)];
    long long v3 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:3];
    if (*(double *)(a1 + 160) >= 0.0 && *(double *)(a1 + 168) > 0.0 && *(double *)(a1 + 176) >= 0.0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10232D740);
      }
      long long v5 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 138543362;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "@WifiPositionWiggleMetrics, submitting CoreAnalytics event for wifi position wiggle, %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10232D740);
        }
        long long v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiPositionWiggleMetrics::sendCoreAnalyticsEvent(const CLDaemonLocation &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      AnalyticsSendEventLazy();
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10232D740);
      }
      long long v4 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 138543362;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "@WifiPositionWiggleMetrics, error, invalid wifi position wiggle, %{public}@, skip", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10232D740);
        }
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiPositionWiggleMetrics::sendCoreAnalyticsEvent(const CLDaemonLocation &)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
}

void sub_101566D80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!sub_1000E6DB4(a2) || (sub_1000E6DB4(a1) & 1) == 0)
  {
LABEL_44:
    char v21 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_45;
  }
  double v6 = *(double *)(a2 + 76);
  double v7 = *(double *)(a1 + 76);
  double v8 = v6 - v7;
  if (v6 - v7 < 0.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10232D740);
    }
    long long v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10005BA4C();
      sub_10005BA4C();
      long long v10 = v30;
      if (v33 < 0) {
        long long v10 = *(unsigned char **)v30;
      }
      if (v29 >= 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136381187;
      char v36 = v10;
      __int16 v37 = 2081;
      int v38 = v11;
      __int16 v39 = 2050;
      double v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WifiPositionWiggleMetrics, #warning, timestamp out of order, current location, %{private}s, previous location, %{private}s, timestamp delta, %{public}.1f", buf, 0x20u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33) < 0) {
        operator delete(*(void **)v30);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10232D740);
    }
    sub_10005BA4C();
    int v12 = v29;
    BOOL v13 = (void **)__p[0];
    sub_10005BA4C();
    BOOL v14 = __p;
    if (v12 < 0) {
      BOOL v14 = v13;
    }
    if (v27 >= 0) {
      int v15 = v26;
    }
    else {
      int v15 = (void **)v26[0];
    }
    *(_DWORD *)__int16 v30 = 136381187;
    *(void *)&v30[4] = v14;
    __int16 v31 = 2081;
    char v32 = v15;
    __int16 v33 = 2050;
    double v34 = v8;
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_57;
  }
  if (v6 - v7 == 0.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10232D740);
    }
    size_t v17 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10005BA4C();
      sub_10005BA4C();
      id v18 = v30;
      if (v33 < 0) {
        id v18 = *(unsigned char **)v30;
      }
      if (v29 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136381187;
      char v36 = v18;
      __int16 v37 = 2081;
      int v38 = v19;
      __int16 v39 = 2050;
      double v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@WifiPositionWiggleMetrics, #warning, timestamp delta is 0, current location, %{private}s, previous location, %{private}s, timestamp delta, %{public}.1f", buf, 0x20u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33) < 0) {
        operator delete(*(void **)v30);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10232D740);
    }
    sub_10005BA4C();
    int v22 = v29;
    id v23 = (void **)__p[0];
    sub_10005BA4C();
    int v24 = __p;
    if (v22 < 0) {
      int v24 = v23;
    }
    if (v27 >= 0) {
      char v25 = v26;
    }
    else {
      char v25 = (void **)v26[0];
    }
    *(_DWORD *)__int16 v30 = 136381187;
    *(void *)&v30[4] = v24;
    __int16 v31 = 2081;
    char v32 = v25;
    __int16 v33 = 2050;
    double v34 = v8;
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(__p[0]);
    }
LABEL_57:
    sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<PositionWiggle> CLWifiPositionWiggleMetrics::getPositionWiggle(const CLDaemonLocation &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    goto LABEL_44;
  }
  double v20 = sub_1000A3D9C(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 4), *(double *)(a1 + 12));
  *(double *)a3 = v20;
  *(double *)(a3 + _Block_object_dispose(&STACK[0x310], 8) = v8;
  *(double *)(a3 + 16) = v20 / v8;
  char v21 = 1;
LABEL_45:
  *(unsigned char *)(a3 + 24) = v21;
}

void sub_1015672CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10156730C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_101567314(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101567344(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xD8uLL);
  sub_101567390((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
}

void sub_10156737C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_101567390(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(void *)a1 = off_10232D770;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(_DWORD *)(a1 + 24) = 0xFFFF;
  *(_OWORD *)(a1 + 2_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(a1 + 44) = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 60) = _Q1;
  *(_OWORD *)(a1 + 76) = _Q1;
  *(_OWORD *)(a1 + 92) = _Q1;
  *(_DWORD *)(a1 + 10_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)(a1 + 112) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 140) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 14_Block_object_dispose(&STACK[0x310], 8) = 0x7FFFFFFF;
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 176) = 0;
  return result;
}

void sub_101567414(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10232D770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101567434(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10232D770;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101567490(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  uint64_t v5 = sub_1007FC1E8(a1, &v7, a3, a4);
  *(void *)uint64_t v5 = &off_10232D8C8;
  *(void *)(v5 + 376) = 0;
  *(void *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 32_Block_object_dispose(&STACK[0x310], 8) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(void *)(v5 + 360) = 0;
  *(void *)(v5 + 36_Block_object_dispose(&STACK[0x310], 8) = v5 + 376;
  sub_100103240();
  *(unsigned char *)(a1 + 392) = sub_10073E30C();
  return a1;
}

void sub_101567514(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v2, *(void **)(v1 + 376));
  long long v4 = *(void **)(v1 + 344);
  if (v4)
  {
    *(void *)(v1 + 352) = v4;
    operator delete(v4);
  }
  sub_1010456D8(v1);
  _Unwind_Resume(a1);
}

void *sub_101567544(uint64_t a1, int a2, uint64_t a3)
{
  double result = (void *)sub_101567490(a1, a2, qword_1024888A0, a3);
  void *result = off_10232D7C0;
  return result;
}

void sub_101567588(uint64_t a1)
{
  sub_10156AD30(a1);

  operator delete();
}

uint64_t sub_1015675C0()
{
  return 310;
}

uint64_t sub_1015675C8(uint64_t a1, std::string::value_type *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_101047E00(a1, a2);
  sub_10104A8A0((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_10156AD9C((uint64_t)&v43, a1 + 368);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  uint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218242;
    *(void *)__int16 v54 = v45;
    *(_WORD *)&v54[8] = 2080;
    *(void *)&unsigned char v54[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    *(_DWORD *)std::string __p = 134218242;
    *(void *)&__p[4] = v45;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)&__p[14] = a2;
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  uint64_t v6 = a1 + 376;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = a1 + 376;
  int v7 = v43;
  if (v43 != &v44)
  {
    uint64_t v8 = 0;
    while (1)
    {
      long long v42 = *(_OWORD *)((char *)v7 + 25);
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      v39[0] = 0;
      v39[1] = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = v6;
      clock_t v9 = clock();
      int v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *))(*(void *)a1 + 192))(a1, &v42, &v40);
      clock_t v11 = clock();
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = v6;
      clock_t v12 = clock();
      int v13 = (*(uint64_t (**)(uint64_t, long long *, void *))(*(void *)a1 + 184))(a1, &v42, v39);
      clock_t v14 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v14 - v12, v11 - v9);
      if (v10 != v13) {
        break;
      }
      int v15 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *))(*(void *)a1 + 176))(a1, &v42, &v40);
      if (v15) {
        sub_10104C204(a1, (unsigned __int16)v41, WORD1(v41), (double *)&v38, (double *)&v37);
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      BOOL v16 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = v45;
        uint64_t v18 = v37;
        uint64_t v19 = v38;
        sub_101043DAC();
        double v20 = __p;
        if (__p[23] < 0) {
          double v20 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 134219266;
        *(void *)__int16 v54 = v8;
        *(_WORD *)&v54[8] = 2048;
        *(void *)&unsigned char v54[10] = v17;
        *(_WORD *)&v54[18] = 1024;
        *(_DWORD *)&v54[20] = v15;
        __int16 v55 = 2048;
        uint64_t v56 = v19;
        __int16 v57 = 2048;
        uint64_t v58 = v18;
        __int16 v59 = 2080;
        __int16 v60 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232D990);
        }
        uint64_t v24 = v45;
        uint64_t v25 = v37;
        uint64_t v26 = v38;
        sub_101043DAC();
        char v27 = &v35;
        if (v36 < 0) {
          char v27 = v35;
        }
        *(_DWORD *)std::string __p = 134219266;
        *(void *)&__p[4] = v8;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v24;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&unsigned char __p[24] = v15;
        __int16 v47 = 2048;
        uint64_t v48 = v26;
        __int16 v49 = 2048;
        uint64_t v50 = v25;
        __int16 v51 = 2080;
        __int16 v52 = v27;
        int v28 = (char *)_os_log_send_and_compose_impl();
        if (v36 < 0) {
          operator delete(v35);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      if (!v15)
      {
        int v31 = 759;
        char v32 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v31, v32);
      }
      char v21 = v7[1];
      if (v21)
      {
        do
        {
          int v22 = (void **)v21;
          char v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v22 = (void **)v7[2];
          BOOL v23 = *v22 == v7;
          int v7 = v22;
        }
        while (!v23);
      }
      ++v8;
      int v7 = v22;
      if (v22 == &v44) {
        goto LABEL_36;
      }
    }
    int v31 = 742;
    char v32 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  uint64_t v8 = 0;
LABEL_36:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  char v29 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)__int16 v54 = 1;
    *(_WORD *)&v54[4] = 2048;
    *(void *)&v54[6] = v8;
    *(_WORD *)&v54[14] = 2048;
    *(void *)&v54[16] = v45;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    *(void *)std::string __p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(void *)&__p[10] = v8;
    *(_WORD *)&__p[18] = 2048;
    *(void *)&__p[20] = v45;
    double v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  sub_1000F5BB0((uint64_t)&v43, v44);
  return 1;
}

void sub_101567DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27)
{
}

void sub_101567E18(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1007FE8A4(a1, (uint64_t)a2, a3);
  uint64_t v82 = 0;
  int v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(void *)long long v83 = 0x200006ABBALL;
      memset(&v83[8], 0, 32);
      LODWORD(v84) = 0;
      sub_101044D88(a4, (uint64_t)v83);
      clock_t v11 = (void *)(a1 + 344);
      *(void *)(a1 + 352) = *(void *)(a1 + 344);
      sub_1013069A4((char **)(a1 + 344), *(unsigned int *)&v83[12]);
      clock_t v12 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&v83[12], *(int *)&v83[16]);
      if (v12)
      {
        DWORD2(v79) = 0;
        *(void *)&long long v79 = 0;
        if (*(_DWORD *)&v83[12])
        {
          unint64_t v13 = 0;
          do
          {
            sub_101043FBC((unsigned __int16 *)&v12[v13 * *(unsigned int *)&v83[16]], (uint64_t)&v79);
            unint64_t v15 = *(void *)(a1 + 352);
            unint64_t v14 = *(void *)(a1 + 360);
            if (v15 >= v14)
            {
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v11) >> 2);
              unint64_t v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555) {
                sub_1001D7FD4();
              }
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19) {
                unint64_t v19 = 2 * v20;
              }
              if (v20 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v21 = 0x1555555555555555;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21) {
                int v22 = (char *)sub_10080FC80(a1 + 360, v21);
              }
              else {
                int v22 = 0;
              }
              BOOL v23 = &v22[12 * v18];
              uint64_t v24 = v79;
              *((_DWORD *)v23 + 2) = DWORD2(v79);
              *(void *)BOOL v23 = v24;
              uint64_t v26 = *(_DWORD **)(a1 + 344);
              uint64_t v25 = *(_DWORD **)(a1 + 352);
              char v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  uint64_t v28 = *(void *)(v25 - 3);
                  v25 -= 3;
                  int v29 = v25[2];
                  *(void *)(v27 - 12) = v28;
                  v27 -= 12;
                  *((_DWORD *)v27 + 2) = v29;
                }
                while (v25 != v26);
                uint64_t v25 = (_DWORD *)*v11;
              }
              uint64_t v17 = v23 + 12;
              *(void *)(a1 + 344) = v27;
              *(void *)(a1 + 352) = v23 + 12;
              *(void *)(a1 + 360) = &v22[12 * v21];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              uint64_t v16 = v79;
              *(_DWORD *)(v15 + _Block_object_dispose(&STACK[0x310], 8) = DWORD2(v79);
              *(void *)unint64_t v15 = v16;
              uint64_t v17 = (char *)(v15 + 12);
            }
            *(void *)(a1 + 352) = v17;
            if (!*(unsigned char *)(a5 + 9))
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232D990);
              }
              __int16 v30 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *(_DWORD *)&v83[12];
                sub_101043FEC();
                char v32 = __p;
                if (SBYTE3(v96) < 0) {
                  char v32 = *(unsigned char **)__p;
                }
                *(_DWORD *)std::string buf = 134218498;
                *(void *)uint64_t v100 = v13;
                *(_WORD *)&v100[8] = 1024;
                *(_DWORD *)int v101 = v31;
                *(_WORD *)&void v101[4] = 2080;
                *(void *)&v101[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v96) < 0) {
                  operator delete(*(void **)__p);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10232D990);
                }
                int v33 = *(_DWORD *)&v83[12];
                sub_101043FEC();
                double v34 = v80;
                if (v81 < 0) {
                  double v34 = (void **)v80[0];
                }
                *(_DWORD *)std::string __p = 134218498;
                *(void *)&__p[4] = v13;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = v33;
                *(_WORD *)&__p[18] = 2080;
                uint64_t v96 = v34;
                id v35 = (char *)_os_log_send_and_compose_impl();
                if (v81 < 0) {
                  operator delete(v80[0]);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v35);
                if (v35 != (char *)buf) {
                  free(v35);
                }
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v83[12]);
        }
      }
      goto LABEL_82;
    }
    unsigned int v42 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)std::string __p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101DB37A0;
  uint64_t v96 = 0;
  uint64_t v98 = 0;
  uint64_t v97 = 0;
  sub_101044D88(a4, (uint64_t)__p);
  char v36 = (uint64_t **)(a1 + 368);
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = a1 + 376;
  if (!*(unsigned char *)(a5 + 9))
  {
    long long v79 = 0uLL;
    __int16 v43 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    clock_t v12 = v43;
    if (!v43)
    {
LABEL_82:
      unsigned int v42 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      unint64_t v44 = 0;
      id v76 = v43;
      do
      {
        sub_101043D54((unsigned __int16 *)&v12[v44 * *(unsigned int *)&__p[16]], (uint64_t)&v79);
        sub_10156BAAC(v36, (unsigned __int16 *)&v79, &v79);
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        sub_10104C204(a1, WORD4(v79), WORD5(v79), (double *)&v78, (double *)&v77);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232D990);
        }
        uint64_t v45 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v46 = *(_DWORD *)&__p[12];
          uint64_t v47 = *(void *)(a1 + 384);
          sub_101043DAC();
          uint64_t v48 = v36;
          if (v83[23] >= 0) {
            __int16 v49 = v83;
          }
          else {
            __int16 v49 = *(unsigned char **)v83;
          }
          uint64_t v50 = v77;
          uint64_t v51 = v78;
          double v52 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v53 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)std::string buf = 134220290;
          *(void *)uint64_t v100 = v44;
          *(_WORD *)&v100[8] = 1024;
          *(_DWORD *)int v101 = v46;
          *(_WORD *)&void v101[4] = 2048;
          *(void *)&v101[6] = v47;
          __int16 v102 = 2080;
          uint64_t v103 = v49;
          __int16 v104 = 2048;
          uint64_t v105 = v51;
          __int16 v106 = 2048;
          uint64_t v107 = v50;
          __int16 v108 = 2048;
          double v109 = v52;
          __int16 v110 = 2048;
          double v111 = v53;
          __int16 v112 = 1024;
          int v113 = v54;
          __int16 v114 = 1024;
          int v115 = v55;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v83[23] & 0x80000000) != 0) {
            operator delete(*(void **)v83);
          }
          char v36 = v48;
          clock_t v12 = v76;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232D990);
          }
          int v56 = *(_DWORD *)&__p[12];
          uint64_t v57 = *(void *)(a1 + 384);
          sub_101043DAC();
          char v75 = v36;
          if (v81 >= 0) {
            uint64_t v58 = v80;
          }
          else {
            uint64_t v58 = (void **)v80[0];
          }
          uint64_t v59 = v77;
          uint64_t v60 = v78;
          double v61 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v62 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v63 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v64 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)long long v83 = 134220290;
          *(void *)&v83[4] = v44;
          *(_WORD *)&v83[12] = 1024;
          *(_DWORD *)&v83[14] = v56;
          *(_WORD *)&v83[18] = 2048;
          *(void *)&v83[20] = v57;
          *(_WORD *)&v83[28] = 2080;
          *(void *)&v83[30] = v58;
          *(_WORD *)&v83[38] = 2048;
          uint64_t v84 = v60;
          __int16 v85 = 2048;
          uint64_t v86 = v59;
          __int16 v87 = 2048;
          double v88 = v61;
          __int16 v89 = 2048;
          double v90 = v62;
          __int16 v91 = 1024;
          int v92 = v63;
          __int16 v93 = 1024;
          int v94 = v64;
          id v65 = (char *)_os_log_send_and_compose_impl();
          if (v81 < 0) {
            operator delete(v80[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v65);
          char v36 = v75;
          if (v65 != (char *)buf) {
            free(v65);
          }
        }
        ++v44;
      }
      while (v44 < *(unsigned int *)&__p[12]);
    }
    goto LABEL_101;
  }
  BOOL v37 = sub_10156B168(a1, (unsigned __int16 **)(a1 + 344), (_DWORD *)&v82 + 1, &v82);
  int v39 = v82;
  int v38 = HIDWORD(v82);
  unsigned int v40 = v82 - HIDWORD(v82) + 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  uint64_t v41 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)uint64_t v100 = v40;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v38;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    *(_DWORD *)long long v83 = 67109376;
    *(_DWORD *)&v83[4] = v40;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&v83[10] = v38;
    long long v73 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v73);
    if (v73 != (char *)buf) {
      free(v73);
    }
  }
  if ((v39 + 1) >= *(_DWORD *)&__p[12]) {
    unsigned int v42 = *(_DWORD *)&__p[12] - v38;
  }
  else {
    unsigned int v42 = v40;
  }
  if (!v42)
  {
LABEL_57:
    clock_t v12 = 0;
    goto LABEL_83;
  }
  if (v42 + v38 > *(_DWORD *)&__p[12]) {
    sub_101AAE45C();
  }
  clock_t v12 = (char *)sub_100800268(a1, a2, a3, v38, v42, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)long long v83 = 0;
  *(void *)&v83[8] = 0;
  if (!v37)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    uint64_t v69 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      LOWORD(v80[0]) = 0;
      uint64_t v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v74);
      if (v74 != (char *)buf) {
        free(v74);
      }
    }
LABEL_101:
    unsigned int v42 = 0;
    int v70 = 1;
    goto LABEL_102;
  }
  if (sub_10156B7AC(a1, (uint64_t)v12, v42, *(int *)&__p[16], (unsigned __int16 *)(a1 + 328), v83))
  {
    sub_10156BAAC((uint64_t **)(a1 + 368), (unsigned __int16 *)v83, v83);
LABEL_83:
    BOOL v66 = 1;
    goto LABEL_84;
  }
  int v70 = 0;
LABEL_102:
  BOOL v66 = v70 != 0;
LABEL_84:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  id v67 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101043DAC();
    uint64_t v68 = v83[23] >= 0 ? v83 : *(unsigned char **)v83;
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)uint64_t v100 = v66;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v42;
    *(_WORD *)int v101 = 2080;
    *(void *)&v101[2] = v68;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v83[23] & 0x80000000) != 0) {
      operator delete(*(void **)v83);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    sub_101043DAC();
    if (SBYTE3(v96) >= 0) {
      uint64_t v71 = __p;
    }
    else {
      uint64_t v71 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long v83 = 67109634;
    *(_DWORD *)&v83[4] = v66;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&v83[10] = v42;
    *(_WORD *)&v83[14] = 2080;
    *(void *)&v83[16] = v71;
    std::string::size_type v72 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE3(v96) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v72);
    if (v72 != (char *)buf) {
      free(v72);
    }
  }
  if (v12) {
    free(v12);
  }
}

void sub_101568CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101568CF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t sub_101568D18(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 368);
  uint64_t v7 = sub_10156BCC0(a1 + 368, a2);
  uint64_t v8 = (void **)v7;
  if (a1 + 376 != v7)
  {
    *(_OWORD *)a3 = *(_OWORD *)(v7 + 25);
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  int v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101043DAC();
    clock_t v11 = v144[9] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v144[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    sub_101043DAC();
    if ((SBYTE7(v138) & 0x80u) == 0) {
      uint64_t v74 = buf;
    }
    else {
      uint64_t v74 = *(unsigned char **)buf;
    }
    *(_DWORD *)uint64_t v129 = 136315138;
    *(void *)&v129[4] = v74;
    char v75 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v138) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v75);
    if (v75 != __p) {
      free(v75);
    }
  }
  *(void *)(a1 + 352) = *(void *)(a1 + 344);
  sub_100134750(v123, "");
  uint64_t v125 = 0;
  int v126 = -1;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  if ((sub_1007FCEFC(a1, (uint64_t)v123) & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    uint64_t v16 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      *(_WORD *)std::string buf = 0;
      id v76 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v76);
      if (v76 != __p) {
        free(v76);
      }
    }
    BOOL v9 = 0;
    goto LABEL_179;
  }
  unsigned int v103 = 0;
  clock_t v12 = 0;
  uint64_t v122 = 0;
  int v120 = 0;
  int v121 = 43962;
  uint64_t v117 = 0x200006ABBALL;
  long long v118 = 0u;
  long long v119 = 0u;
  *(void *)&uint8_t buf[4] = 184;
  *(_DWORD *)std::string buf = 371642;
  int v137 = 381;
  long long v138 = 0u;
  long long v139 = 0u;
  uint64_t v141 = 0;
  uint64_t v140 = 0;
  int v142 = 0;
  int v112 = 502714;
  long long v113 = xmmword_101DB37A0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v13 = v128;
      if (!sub_1007FD08C(a1, v123, &v121)) {
        goto LABEL_162;
      }
      if (HIWORD(v121) == 7) {
        break;
      }
      if (HIWORD(v121) == 6)
      {
        sub_101044D88(v127 + v13, (uint64_t)&v117);
        clock_t v12 = (unsigned __int16 *)(v13 + v127 + v122 + 12);
        if ((unint64_t)v12 + (DWORD2(v118) * DWORD1(v118)) > v125 + v127)
        {
          if (!*(unsigned char *)(a1 + 392)) {
            goto LABEL_162;
          }
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232D990);
          }
          uint64_t v47 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            int v48 = DWORD1(v118);
            __int16 v93 = sub_100147F50(*(_DWORD *)(a1 + 48));
            int v100 = v48;
            sub_101307404();
            int v49 = v130[9];
            uint64_t v50 = *(unsigned char **)v129;
            sub_101043DAC();
            uint64_t v51 = v129;
            if (v49 < 0) {
              uint64_t v51 = v50;
            }
            double v52 = v132;
            if (v135 < 0) {
              double v52 = *(unsigned char **)v132;
            }
            *(_DWORD *)std::string __p = 134284803;
            *(void *)&__p[4] = v12;
            *(_WORD *)&unsigned char __p[12] = 1025;
            *(_DWORD *)std::string::size_type v144 = v100;
            *(_WORD *)&v144[4] = 2049;
            *(void *)&v144[6] = v13;
            *(_WORD *)&v144[14] = 2081;
            *(void *)&v144[16] = v93;
            *(_WORD *)&v144[24] = 2081;
            *(void *)&v144[26] = v51;
            *(_WORD *)&v144[34] = 2081;
            v145[0] = v52;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v135 < 0) {
              operator delete(*(void **)v132);
            }
            if ((v130[9] & 0x80000000) != 0) {
              operator delete(*(void **)v129);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232D990);
          }
          int v101 = DWORD1(v118);
          int v94 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          int v53 = v135;
          int v54 = *(unsigned char **)v132;
          sub_101043DAC();
          int v55 = v132;
          if (v53 < 0) {
            int v55 = v54;
          }
          int v56 = v110;
          if (v111 < 0) {
            int v56 = (void **)v110[0];
          }
          *(_DWORD *)uint64_t v129 = 134284803;
          *(void *)&v129[4] = v12;
          *(_WORD *)&v129[12] = 1025;
          *(_DWORD *)__int16 v130 = v101;
          *(_WORD *)&v130[4] = 2049;
          *(void *)&v130[6] = v13;
          *(_WORD *)&v130[14] = 2081;
          *(void *)&v130[16] = v94;
          *(_WORD *)&v130[24] = 2081;
          *(void *)&v130[26] = v55;
          *(_WORD *)&v130[34] = 2081;
          *(void *)uint64_t v131 = v56;
          int v31 = (char *)_os_log_send_and_compose_impl();
          if (v111 < 0) {
            operator delete(v110[0]);
          }
          if (v135 < 0) {
            operator delete(*(void **)v132);
          }
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v121) != 5)
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232D990);
          }
          char v32 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
          {
            int v33 = sub_100147F50(*(_DWORD *)(a1 + 48));
            sub_101307404();
            double v34 = v130[9] >= 0 ? v129 : *(unsigned char **)v129;
            *(_DWORD *)std::string __p = 134218498;
            *(void *)&__p[4] = v13;
            *(_WORD *)&unsigned char __p[12] = 2080;
            *(void *)std::string::size_type v144 = v33;
            *(_WORD *)&v144[8] = 2080;
            *(void *)&v144[10] = v34;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v130[9] & 0x80000000) != 0) {
              operator delete(*(void **)v129);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232D990);
          }
          id v35 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          if (v135 >= 0) {
            char v36 = v132;
          }
          else {
            char v36 = *(unsigned char **)v132;
          }
          *(_DWORD *)uint64_t v129 = 134218498;
          *(void *)&v129[4] = v13;
          *(_WORD *)&v129[12] = 2080;
          *(void *)__int16 v130 = v35;
          *(_WORD *)&v130[8] = 2080;
          *(void *)&v130[10] = v36;
          int v31 = (char *)_os_log_send_and_compose_impl();
          if (v135 < 0) {
            operator delete(*(void **)v132);
          }
LABEL_147:
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v31);
          goto LABEL_221;
        }
        sub_101043CA4(v127 + v13, (uint64_t)buf);
      }
    }
    sub_101044D88(v127 + v13, (uint64_t)&v112);
    uint64_t v14 = v13 + v127 + v122 + 12;
    if (v14 + (unint64_t)(HIDWORD(v113) * DWORD2(v113)) > v125 + v127)
    {
      if (!*(unsigned char *)(a1 + 392)) {
        goto LABEL_162;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      BOOL v37 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v38 = DWORD2(v113);
        __int16 v91 = sub_100147F50(*(_DWORD *)(a1 + 48));
        int v98 = v38;
        sub_101307404();
        int v39 = v130[9];
        unsigned int v40 = *(unsigned char **)v129;
        sub_101043DAC();
        uint64_t v41 = v129;
        if (v39 < 0) {
          uint64_t v41 = v40;
        }
        unsigned int v42 = v132;
        if (v135 < 0) {
          unsigned int v42 = *(unsigned char **)v132;
        }
        *(_DWORD *)std::string __p = 134284803;
        *(void *)&__p[4] = v14;
        *(_WORD *)&unsigned char __p[12] = 1025;
        *(_DWORD *)std::string::size_type v144 = v98;
        *(_WORD *)&v144[4] = 2049;
        *(void *)&v144[6] = v13;
        *(_WORD *)&v144[14] = 2081;
        *(void *)&v144[16] = v91;
        *(_WORD *)&v144[24] = 2080;
        *(void *)&v144[26] = v41;
        *(_WORD *)&v144[34] = 2081;
        v145[0] = v42;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v135 < 0) {
          operator delete(*(void **)v132);
        }
        if ((v130[9] & 0x80000000) != 0) {
          operator delete(*(void **)v129);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      int v99 = DWORD2(v113);
      int v92 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v43 = v135;
      unint64_t v44 = *(unsigned char **)v132;
      sub_101043DAC();
      uint64_t v45 = v132;
      if (v43 < 0) {
        uint64_t v45 = v44;
      }
      int v46 = v110;
      if (v111 < 0) {
        int v46 = (void **)v110[0];
      }
      *(_DWORD *)uint64_t v129 = 134284803;
      *(void *)&v129[4] = v14;
      *(_WORD *)&v129[12] = 1025;
      *(_DWORD *)__int16 v130 = v99;
      *(_WORD *)&v130[4] = 2049;
      *(void *)&v130[6] = v13;
      *(_WORD *)&v130[14] = 2081;
      *(void *)&v130[16] = v92;
      *(_WORD *)&v130[24] = 2080;
      *(void *)&v130[26] = v45;
      *(_WORD *)&v130[34] = 2081;
      *(void *)uint64_t v131 = v46;
      int v31 = (char *)_os_log_send_and_compose_impl();
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if (v135 < 0) {
        operator delete(*(void **)v132);
      }
      goto LABEL_147;
    }
    sub_1000F5BB0((uint64_t)v6, *v8);
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 36_Block_object_dispose(&STACK[0x310], 8) = v8;
    void *v8 = 0;
    int v109 = 0;
    uint64_t v108 = 0;
    sub_1010441CC(&v108, a2);
    unsigned int v106 = DWORD2(v113);
    unsigned int v107 = 0;
    if (!v12)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      uint64_t v57 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
      {
        uint64_t v58 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        uint64_t v59 = v144[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t v129 = 136380931;
        *(void *)&v129[4] = v58;
        *(_WORD *)&v129[12] = 2081;
        *(void *)__int16 v130 = v59;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v129, 0x16u);
        if ((v144[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      uint64_t v60 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v130[9] >= 0) {
        double v61 = v129;
      }
      else {
        double v61 = *(unsigned char **)v129;
      }
      *(_DWORD *)__int16 v132 = 136380931;
      *(void *)&v132[4] = v60;
      __int16 v133 = 2081;
      double v134 = v61;
      int v31 = (char *)_os_log_send_and_compose_impl();
      if ((v130[9] & 0x80000000) != 0) {
        operator delete(*(void **)v129);
      }
      goto LABEL_147;
    }
    BOOL v15 = sub_10156BB30(a1, v12, DWORD1(v118), SDWORD2(v118), (unsigned __int16 *)&v108, &v107, &v106);
    if (v107 >= DWORD2(v113) || v106 >= DWORD2(v113)) {
      break;
    }
    if (!v15)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      double v62 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v95 = v107;
        unsigned int v102 = v106;
        sub_101043FEC();
        if (v130[9] >= 0) {
          int v63 = v129;
        }
        else {
          int v63 = *(unsigned char **)v129;
        }
        int v64 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        if (v135 >= 0) {
          id v65 = v132;
        }
        else {
          id v65 = *(unsigned char **)v132;
        }
        *(_DWORD *)std::string __p = 67175683;
        *(_DWORD *)&__p[4] = v95;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = v102;
        *(_WORD *)std::string::size_type v144 = 2081;
        *(void *)&v144[2] = v63;
        *(_WORD *)&v144[10] = 2081;
        *(void *)&v144[12] = v64;
        *(_WORD *)&v144[20] = 2081;
        *(void *)&v144[22] = v65;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v135 < 0) {
          operator delete(*(void **)v132);
        }
        if ((v130[9] & 0x80000000) != 0) {
          operator delete(*(void **)v129);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      unsigned int v83 = v107;
      unsigned int v96 = v106;
      sub_101043FEC();
      if (v135 >= 0) {
        uint64_t v84 = v132;
      }
      else {
        uint64_t v84 = *(unsigned char **)v132;
      }
      __int16 v85 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v111 >= 0) {
        uint64_t v86 = v110;
      }
      else {
        uint64_t v86 = (void **)v110[0];
      }
      *(_DWORD *)uint64_t v129 = 67175683;
      *(_DWORD *)&v129[4] = v83;
      *(_WORD *)&v129[8] = 1025;
      *(_DWORD *)&_WORD v129[10] = v96;
      *(_WORD *)__int16 v130 = 2081;
      *(void *)&v130[2] = v84;
      *(_WORD *)&v130[10] = 2081;
      *(void *)&v130[12] = v85;
      *(_WORD *)&v130[20] = 2081;
      *(void *)&v130[22] = v86;
      int v31 = (char *)_os_log_send_and_compose_impl();
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if (v135 < 0) {
        operator delete(*(void **)v132);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v31);
LABEL_221:
      if (v31 != __p) {
        free(v31);
      }
      goto LABEL_162;
    }
    unsigned int v103 = v106 - v107 + 1;
    if (!sub_10156B7AC(a1, v14 + HIDWORD(v113) * v107, v103, SHIDWORD(v113), a2, a3)) {
      goto LABEL_162;
    }
    sub_10156BAAC(v6, a3, a3);
  }
  if (*(unsigned char *)(a1 + 392))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    uint64_t v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      unint64_t v18 = v129;
      sub_101043FEC();
      if (v130[9] < 0) {
        unint64_t v18 = *(unsigned char **)v129;
      }
      uint64_t v97 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v19 = v135;
      unint64_t v20 = *(unsigned char **)v132;
      unsigned int v21 = v107;
      unsigned int v87 = v106;
      int v89 = DWORD2(v113);
      sub_101043DAC();
      int v22 = v132;
      if (v19 < 0) {
        int v22 = v20;
      }
      BOOL v23 = v110;
      if (v111 < 0) {
        BOOL v23 = (void **)v110[0];
      }
      *(_DWORD *)std::string __p = 136382211;
      *(void *)&__p[4] = v18;
      *(_WORD *)&unsigned char __p[12] = 2081;
      *(void *)std::string::size_type v144 = v97;
      *(_WORD *)&v144[8] = 2081;
      *(void *)&v144[10] = v22;
      *(_WORD *)&v144[18] = 1025;
      *(_DWORD *)&v144[20] = v21;
      *(_WORD *)&v144[24] = 1025;
      *(_DWORD *)&v144[26] = v87;
      *(_WORD *)&v144[30] = 1025;
      *(_DWORD *)&v144[32] = v89;
      LOWORD(v145[0]) = 2081;
      *(void *)((char *)v145 + 2) = v23;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if (v135 < 0) {
        operator delete(*(void **)v132);
      }
      if ((v130[9] & 0x80000000) != 0) {
        operator delete(*(void **)v129);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      uint64_t v24 = v132;
      sub_101043FEC();
      if (v135 < 0) {
        uint64_t v24 = *(unsigned char **)v132;
      }
      double v90 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v25 = v111;
      uint64_t v26 = (void **)v110[0];
      unsigned int v27 = v106;
      unsigned int v28 = v107;
      int v88 = DWORD2(v113);
      sub_101043DAC();
      int v29 = v110;
      if (v25 < 0) {
        int v29 = v26;
      }
      __int16 v30 = &v104;
      if (v105 < 0) {
        __int16 v30 = v104;
      }
      *(_DWORD *)uint64_t v129 = 136382211;
      *(void *)&v129[4] = v24;
      *(_WORD *)&v129[12] = 2081;
      *(void *)__int16 v130 = v90;
      *(_WORD *)&v130[8] = 2081;
      *(void *)&v130[10] = v29;
      *(_WORD *)&v130[18] = 1025;
      *(_DWORD *)&v130[20] = v28;
      *(_WORD *)&v130[24] = 1025;
      *(_DWORD *)&v130[26] = v27;
      *(_WORD *)&v130[30] = 1025;
      *(_DWORD *)&v130[32] = v88;
      *(_WORD *)uint64_t v131 = 2081;
      *(void *)&v131[2] = v30;
      int v31 = (char *)_os_log_send_and_compose_impl();
      if (v105 < 0) {
        operator delete(v104);
      }
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if (v135 < 0) {
        operator delete(*(void **)v132);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v31);
      goto LABEL_221;
    }
  }
LABEL_162:
  uint64_t v66 = sub_10156BCC0((uint64_t)v6, a2);
  id v67 = (void **)v66;
  BOOL v9 = v8 != (void **)v66;
  if (v8 != (void **)v66) {
    *(_OWORD *)a3 = *(_OWORD *)(v66 + 25);
  }
  if (v127) {
    sub_1007FCFE0(a1, (uint64_t)v123);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  uint64_t v68 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101043DAC();
    int v69 = v130[9];
    int v70 = *(unsigned char **)v129;
    sub_101043DAC();
    uint64_t v71 = v129;
    if (v69 < 0) {
      uint64_t v71 = v70;
    }
    if (v135 >= 0) {
      std::string::size_type v72 = v132;
    }
    else {
      std::string::size_type v72 = *(unsigned char **)v132;
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v67;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v103;
    *(_WORD *)std::string::size_type v144 = 2080;
    *(void *)&v144[2] = v71;
    *(_WORD *)&v144[10] = 2080;
    *(void *)&v144[12] = v72;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v135 < 0) {
      operator delete(*(void **)v132);
    }
    if ((v130[9] & 0x80000000) != 0) {
      operator delete(*(void **)v129);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    BOOL v77 = v8 != v67;
    sub_101043DAC();
    int v78 = v135;
    long long v79 = *(unsigned char **)v132;
    sub_101043DAC();
    uint64_t v80 = v132;
    if (v78 < 0) {
      uint64_t v80 = v79;
    }
    if (v111 >= 0) {
      char v81 = v110;
    }
    else {
      char v81 = (void **)v110[0];
    }
    *(_DWORD *)uint64_t v129 = 67109890;
    *(_DWORD *)&v129[4] = v77;
    *(_WORD *)&v129[8] = 1024;
    *(_DWORD *)&_WORD v129[10] = v103;
    *(_WORD *)__int16 v130 = 2080;
    *(void *)&v130[2] = v80;
    *(_WORD *)&v130[10] = 2080;
    *(void *)&v130[12] = v81;
    uint64_t v82 = (char *)_os_log_send_and_compose_impl();
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if (v135 < 0) {
      operator delete(*(void **)v132);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v82);
    if (v82 != __p) {
      free(v82);
    }
  }
LABEL_179:
  if (v124 < 0) {
    operator delete(v123[0]);
  }
  return v9;
}

void sub_10156A4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10156A604(uint64_t a1, unsigned __int16 *a2, _OWORD *a3)
{
  *(_OWORD *)(a1 + 32_Block_object_dispose(&STACK[0x310], 8) = *(_OWORD *)a2;
  char v35 = 0;
  uint64_t v37 = nullsub_41(0, a2);
  double v34 = "search";
  char v36 = 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101043DAC();
    uint64_t v7 = SHIBYTE(v46) >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v46) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    sub_101043DAC();
    if (SHIBYTE(v40) >= 0) {
      unsigned int v21 = buf;
    }
    else {
      unsigned int v21 = *(unsigned char **)buf;
    }
    LODWORD(v43.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    int v22 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v40) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v22);
    if (v22 != __p) {
      free(v22);
    }
  }
  sub_101048050(a1, &v43);
  uint64_t v8 = (const char **)(a1 + 8);
  BOOL v9 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    BOOL v9 = *v8;
  }
  if (sub_1000A569C(v9))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    int v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      clock_t v11 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        clock_t v11 = *v8;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      unsigned int v28 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        unsigned int v28 = *v8;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v29);
      if (v29 != __p) {
        free(v29);
      }
    }
    std::string::operator=(&v43, (const std::string *)(a1 + 8));
  }
  sub_101049A48((void *)a1, (uint64_t)&v43, (uint64_t)&v34);
  uint64_t v12 = sub_10156BCC0(a1 + 368, a2);
  uint64_t v13 = v12;
  uint64_t v14 = a1 + 376;
  if (a1 + 376 != v12) {
    *a3 = *(_OWORD *)(v12 + 25);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  BOOL v15 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101043DAC();
    int v16 = SHIBYTE(v40);
    uint64_t v17 = *(unsigned char **)buf;
    sub_101043DAC();
    unint64_t v18 = buf;
    if (v16 < 0) {
      unint64_t v18 = v17;
    }
    if (v33 >= 0) {
      int v19 = v32;
    }
    else {
      int v19 = (void **)v32[0];
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v14 != v13;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    __int16 v45 = 2080;
    int v46 = v18;
    __int16 v47 = 2080;
    int v48 = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    sub_101043DAC();
    int v23 = v33;
    uint64_t v24 = (void **)v32[0];
    sub_101043DAC();
    int v25 = v32;
    if (v23 < 0) {
      int v25 = v24;
    }
    if (v31 >= 0) {
      uint64_t v26 = &v30;
    }
    else {
      uint64_t v26 = v30;
    }
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v14 != v13;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    __int16 v39 = 2080;
    unsigned int v40 = v25;
    __int16 v41 = 2080;
    unsigned int v42 = v26;
    unsigned int v27 = (char *)_os_log_send_and_compose_impl();
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v27);
    if (v27 != __p) {
      free(v27);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  return v14 != v13;
}

void sub_10156ACC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10156AD30(uint64_t a1)
{
  *(void *)a1 = &off_10232D8C8;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }

  return sub_1010456D8(a1);
}

uint64_t sub_10156AD9C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_10156ADF4((char *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10156ADDC(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_10156ADF4(char *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)(result + 8);
    do
    {
      double result = sub_10156AE80(v5, v6, (unsigned __int16 *)((char *)v4 + 25), (void *)((char *)v4 + 25));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *sub_10156AE80(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t v6 = sub_10156AF08(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 25) = *a4;
    sub_1000EDF90(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10156AF08(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_14;
  }
  unsigned int v5 = *a5;
  unsigned int v6 = *(unsigned __int16 *)((char *)a2 + 25);
  if (v5 == v6)
  {
    unsigned int v7 = a5[1];
    unsigned int v8 = *(unsigned __int16 *)((char *)a2 + 27);
    if (v7 == v8)
    {
      int v9 = *((_DWORD *)a5 + 1);
      int v10 = *(_DWORD *)((char *)a2 + 29);
      if (v9 >= v10)
      {
        if (v10 >= v9) {
          goto LABEL_31;
        }
LABEL_9:
        uint64_t v11 = a2[1];
        if (v11)
        {
          uint64_t v12 = (uint64_t *)a2[1];
          do
          {
            a4 = (uint64_t **)v12;
            uint64_t v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          int v23 = a2;
          do
          {
            a4 = (uint64_t **)v23[2];
            BOOL v17 = *a4 == v23;
            int v23 = (uint64_t *)a4;
          }
          while (!v17);
        }
        if (a4 != a1 + 1)
        {
          unsigned int v24 = *(unsigned __int16 *)((char *)a4 + 25);
          BOOL v25 = v5 >= v24;
          if (v5 == v24 && (unsigned int v26 = a5[1], v27 = *(unsigned __int16 *)((char *)a4 + 27), v25 = v26 >= v27, v26 == v27))
          {
            if (*((_DWORD *)a5 + 1) >= *(_DWORD *)((char *)a4 + 29)) {
              return sub_10156B0A8((uint64_t)a1, a3, a5);
            }
          }
          else if (v25)
          {
            return sub_10156B0A8((uint64_t)a1, a3, a5);
          }
        }
        if (v11)
        {
          *a3 = (uint64_t *)a4;
        }
        else
        {
          *a3 = a2;
          return a2 + 1;
        }
        return (uint64_t *)a4;
      }
LABEL_14:
      uint64_t v13 = (uint64_t *)*a2;
      if (*a1 == a2)
      {
        BOOL v15 = a2;
      }
      else
      {
        if (v13)
        {
          uint64_t v14 = (uint64_t *)*a2;
          do
          {
            BOOL v15 = v14;
            uint64_t v14 = (uint64_t *)v14[1];
          }
          while (v14);
        }
        else
        {
          int v16 = a2;
          do
          {
            BOOL v15 = (uint64_t *)v16[2];
            BOOL v17 = *v15 == (void)v16;
            int v16 = v15;
          }
          while (v17);
        }
        unsigned int v18 = *(unsigned __int16 *)((char *)v15 + 25);
        unsigned int v19 = *a5;
        BOOL v20 = v18 >= v19;
        if (v18 == v19 && (v21 = *(unsigned __int16 *)((char *)v15 + 27), unsigned int v22 = a5[1], v20 = v21 >= v22, v21 == v22))
        {
          if (*(_DWORD *)((char *)v15 + 29) >= *((_DWORD *)a5 + 1)) {
            return sub_10156B0A8((uint64_t)a1, a3, a5);
          }
        }
        else if (v20)
        {
          return sub_10156B0A8((uint64_t)a1, a3, a5);
        }
      }
      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7 < v8) {
      goto LABEL_14;
    }
    if (v8 < v7) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v5 < v6) {
      goto LABEL_14;
    }
    if (v6 < v5) {
      goto LABEL_9;
    }
  }
LABEL_31:
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_10156B0A8(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  long long v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    int v8 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        int v9 = v4;
        unsigned int v10 = *(unsigned __int16 *)((char *)v4 + 25);
        if (v6 == v10) {
          break;
        }
        if (v6 >= v10)
        {
          if (v10 >= v6) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }
LABEL_12:
        long long v4 = (uint64_t *)*v9;
        double result = v9;
        if (!*v9) {
          goto LABEL_18;
        }
      }
      unsigned int v11 = *(unsigned __int16 *)((char *)v9 + 27);
      if (v7 != v11)
      {
        if (v7 >= v11)
        {
          if (v11 >= v7) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      int v12 = *(_DWORD *)((char *)v9 + 29);
      if (v8 < v12) {
        goto LABEL_12;
      }
      if (v12 >= v8) {
        goto LABEL_18;
      }
LABEL_15:
      double result = v9 + 1;
      long long v4 = (uint64_t *)v9[1];
      if (!v4) {
        goto LABEL_18;
      }
    }
  }
  int v9 = result;
LABEL_18:
  *a2 = v9;
  return result;
}

void sub_10156B138(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_10156B168(uint64_t a1, unsigned __int16 **a2, _DWORD *a3, _DWORD *a4)
{
  int v36 = 0;
  uint64_t v35 = 0;
  sub_1010441CC(&v35, (_DWORD *)(a1 + 328));
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  unsigned int v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a2;
    int v8 = a2[1];
    sub_101043FEC();
    if (v42 >= 0) {
      unsigned int v10 = __p;
    }
    else {
      unsigned int v10 = *(unsigned char **)__p;
    }
    unsigned int v11 = *a2;
    unsigned int v12 = **a2;
    BOOL v13 = (unsigned __int16)v35 >= v12;
    if ((unsigned __int16)v35 == v12)
    {
      unsigned int v14 = v11[1];
      BOOL v13 = WORD1(v35) >= v14;
      if (WORD1(v35) == v14) {
        BOOL v13 = HIDWORD(v35) >= *((_DWORD *)v11 + 1);
      }
    }
    int v15 = !v13;
    *(_DWORD *)std::string buf = 134218498;
    *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v9) >> 2);
    __int16 v45 = 2080;
    int v46 = v10;
    __int16 v47 = 1024;
    int v48 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    unsigned int v24 = *a2;
    int v23 = a2[1];
    sub_101043FEC();
    if (v38 >= 0) {
      BOOL v25 = v37;
    }
    else {
      BOOL v25 = (void **)v37[0];
    }
    unsigned int v26 = *a2;
    unsigned int v27 = **a2;
    BOOL v28 = (unsigned __int16)v35 >= v27;
    if ((unsigned __int16)v35 == v27)
    {
      unsigned int v29 = v26[1];
      BOOL v28 = WORD1(v35) >= v29;
      if (WORD1(v35) == v29) {
        BOOL v28 = HIDWORD(v35) >= *((_DWORD *)v26 + 1);
      }
    }
    int v30 = !v28;
    *(_DWORD *)std::string __p = 134218498;
    *(void *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v24) >> 2);
    __int16 v40 = 2080;
    __int16 v41 = v25;
    __int16 v42 = 1024;
    int v43 = v30;
    char v31 = (char *)_os_log_send_and_compose_impl();
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v31);
    if (v31 != buf) {
      free(v31);
    }
  }
  *a4 = 0;
  *a3 = 0;
  int v16 = *a2;
  BOOL v17 = a2[1];
  __p[0] = 0;
  unsigned int v18 = sub_10156BA38(v16, v17, (unsigned __int16 *)&v35);
  if (*a2 == v18)
  {
    *a3 = *((_DWORD *)v18 + 2);
    *a4 = *((_DWORD *)v18 + 2) + 1;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    unsigned int v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_101043FEC();
      BOOL v20 = v47 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v47) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D990);
      }
      sub_101043FEC();
      if (v42 >= 0) {
        char v32 = __p;
      }
      else {
        char v32 = *(unsigned char **)__p;
      }
      LODWORD(v37[0]) = 136315138;
      *(void **)((char *)v37 + 4) = v32;
      char v33 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v42) < 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    return 1;
  }
  if (a2[1] != v18)
  {
    *a3 = *((_DWORD *)v18 - 1);
    *a4 = *((_DWORD *)v18 + 2);
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  unsigned int v22 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    *(_WORD *)std::string __p = 0;
    double v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v34);
    if (v34 != buf) {
      free(v34);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10156B7AC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int16 *a5, _OWORD *a6)
{
  if (!a3)
  {
    uint64_t v21 = 0;
    int v13 = 0;
    goto LABEL_20;
  }
  unsigned int v9 = a3;
  int v11 = 0;
  int v12 = 1;
  while (1)
  {
    int v13 = v12;
    memset(buf, 0, sizeof(buf));
    sub_101043D54((unsigned __int16 *)((v11 + (v9 >> 1)) * a4 + a2), (uint64_t)buf);
    unsigned int v14 = *a5;
    BOOL v15 = *(unsigned __int16 *)buf >= v14;
    if (*(unsigned __int16 *)buf == v14)
    {
      unsigned int v16 = a5[1];
      BOOL v15 = *(unsigned __int16 *)&buf[2] >= v16;
      if (*(unsigned __int16 *)&buf[2] == v16) {
        break;
      }
    }
    BOOL v18 = !v15;
LABEL_10:
    BOOL v19 = !v18;
    if (v18) {
      int v20 = (v9 >> 1) + 1;
    }
    else {
      int v20 = 0;
    }
    v11 += v20;
    if (v19) {
      v9 >>= 1;
    }
    else {
      v9 -= (v9 >> 1) + 1;
    }
    int v12 = v13 + 1;
    if (!v9)
    {
      uint64_t v21 = 0;
      goto LABEL_20;
    }
  }
  int v17 = *((_DWORD *)a5 + 1);
  if (*(_DWORD *)&buf[4] != v17)
  {
    BOOL v18 = *(_DWORD *)&buf[4] < v17;
    goto LABEL_10;
  }
  *a6 = *(_OWORD *)buf;
  uint64_t v21 = 1;
LABEL_20:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232D990);
  }
  unsigned int v22 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v21;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232D990);
    }
    unsigned int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  return v21;
}

unsigned __int16 *sub_10156BA38(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != result)
  {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)result) >> 2);
    unsigned int v4 = *a3;
    unsigned int v5 = a3[1];
    do
    {
      unint64_t v6 = v3 >> 1;
      unsigned int v7 = &result[6 * (v3 >> 1)];
      unsigned int v8 = *v7;
      BOOL v9 = v8 >= v4;
      if (v8 == v4)
      {
        unsigned int v10 = result[6 * v6 + 1];
        BOOL v9 = v10 >= v5;
        if (v10 == v5) {
          BOOL v9 = *(_DWORD *)&result[6 * v6 + 2] >= *((_DWORD *)a3 + 1);
        }
      }
      if (!v9)
      {
        BOOL result = v7 + 6;
        unint64_t v6 = v3 + ~v6;
      }
      unint64_t v3 = v6;
    }
    while (v6);
  }
  return result;
}

char *sub_10156BAAC(uint64_t **a1, unsigned __int16 *a2, _OWORD *a3)
{
  unsigned int v5 = sub_10156B0A8((uint64_t)a1, &v9, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 25) = *a3;
    sub_1000EDF90(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

BOOL sub_10156BB30(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, unsigned __int16 *a5, _DWORD *a6, _DWORD *a7)
{
  int v26 = 0;
  uint64_t v25 = 0;
  if (!a3) {
    goto LABEL_22;
  }
  unsigned int v13 = 0;
  unsigned int v14 = a3;
  do
  {
    sub_101043FBC((unsigned __int16 *)((char *)a2 + (v13 + (v14 >> 1)) * a4), (uint64_t)&v25);
    unsigned int v15 = *a5;
    BOOL v16 = (unsigned __int16)v25 >= v15;
    if ((unsigned __int16)v25 == v15)
    {
      unsigned int v17 = a5[1];
      BOOL v16 = WORD1(v25) >= v17;
      if (WORD1(v25) == v17) {
        BOOL v16 = HIDWORD(v25) >= *((_DWORD *)a5 + 1);
      }
    }
    int v18 = !v16;
    unsigned int v19 = v14 >> 1;
    if (v18) {
      v14 -= (v14 >> 1) + 1;
    }
    else {
      v14 >>= 1;
    }
    if (v18) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 0;
    }
    v13 += v20;
  }
  while (v14);
  if (v13) {
    BOOL v21 = v13 >= a3;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    sub_101043FBC((unsigned __int16 *)((char *)a2 + v13 * a4), (uint64_t)&v25);
    *a7 = v26;
    sub_101043FBC((unsigned __int16 *)((char *)a2 + (v13 - 1) * a4), (uint64_t)&v25);
    BOOL v22 = 1;
    int v23 = v26;
    goto LABEL_29;
  }
  if (v13)
  {
LABEL_22:
    int v23 = 0;
    BOOL v22 = 0;
    *a7 = 0;
    goto LABEL_29;
  }
  sub_101043FBC(a2, (uint64_t)&v25);
  if (__PAIR64__(WORD1(v25), (unsigned __int16)v25) == __PAIR64__(a5[1], *a5))
  {
    BOOL v22 = HIDWORD(v25) == *((_DWORD *)a5 + 1);
    if (HIDWORD(v25) == *((_DWORD *)a5 + 1)) {
      int v23 = v26;
    }
    else {
      int v23 = 0;
    }
  }
  else
  {
    BOOL v22 = 0;
    int v23 = 0;
  }
  *a7 = v23;
LABEL_29:
  *a6 = v23;
  return v22;
}

uint64_t sub_10156BCC0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t result = sub_10156BD34(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = *(unsigned __int16 *)(result + 25);
  BOOL v7 = v5 >= v6;
  if (v5 != v6 || (v8 = a2[1], v9 = *(unsigned __int16 *)(result + 27), BOOL v7 = v8 >= v9, v8 != v9))
  {
    if (v7) {
      return result;
    }
    return v3;
  }
  if (*((_DWORD *)a2 + 1) < *(_DWORD *)(result + 29)) {
    return v3;
  }
  return result;
}

uint64_t sub_10156BD34(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v5 = *a2;
    unsigned int v6 = a2[1];
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(a3 + 25);
      BOOL v8 = v7 >= v5;
      if (v7 == v5 && (unsigned int v9 = *(unsigned __int16 *)(a3 + 27), v8 = v9 >= v6, v9 == v6)) {
        BOOL v10 = *(_DWORD *)(a3 + 29) < *((_DWORD *)a2 + 1);
      }
      else {
        BOOL v10 = !v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        int v12 = (uint64_t *)(a3 + 8);
      }
      else {
        int v12 = (uint64_t *)a3;
      }
      if (v11) {
        uint64_t result = a3;
      }
      a3 = *v12;
    }
    while (*v12);
  }
  return result;
}

void sub_10156BD90()
{
}

void sub_10156BDE4()
{
}

double sub_10156BE08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100797098(a1, a2);
  *uint64_t v2 = off_10232D9C0;
  *(void *)&double result = 0x1500000029;
  v2[1738] = 0x1500000029;
  v2[1739] = &unk_101E10878;
  return result;
}

void sub_10156BE54(uint64_t a1, int a2, int a3)
{
  int v4 = a2 - 2 * a3;
  uint64_t v5 = *(void *)(a1 + 2104);
  if (v4 < *(unsigned __int16 *)(v5 + 30))
  {
    int64_t v6 = v4;
    int v7 = a2 - 2 * a3 - 40;
    do
    {
      float v8 = *(float *)sub_1004182C4((unsigned __int16 *)(v5 + 28), v6);
      float v9 = *(float *)sub_1004182C4((unsigned __int16 *)(*(void *)(a1 + 2104) + 1076), v6);
      BOOL v10 = (float *)sub_1004182C4((unsigned __int16 *)(*(void *)(a1 + 2104) + 2124), v6);
      if (v6 < 40)
      {
        float v11 = *v10;
        if ((v6 & 1) == 0)
        {
LABEL_7:
          uint64_t v12 = *(unsigned __int16 *)(a1 + 2142);
          unint64_t v13 = *(unsigned int *)(a1 + 2144);
          uint64_t v14 = *(unsigned __int16 *)(a1 + 2140);
          if (v14 + v12 >= v13) {
            uint64_t v15 = *(unsigned int *)(a1 + 2144);
          }
          else {
            uint64_t v15 = 0;
          }
          *(float *)(a1 + 2148 + 4 * (v14 + v12 - v15)) = v8;
          if (v13 <= v12)
          {
            if (v14 + 1 < v13) {
              LOWORD(v13) = 0;
            }
            *(_WORD *)(a1 + 2140) = v14 + 1 - v13;
          }
          else
          {
            *(_WORD *)(a1 + 2142) = v12 + 1;
          }
          *(unsigned char *)(a1 + 2124) = 1;
          uint64_t v16 = *(unsigned __int16 *)(a1 + 3190);
          unint64_t v17 = *(unsigned int *)(a1 + 3192);
          uint64_t v18 = *(unsigned __int16 *)(a1 + 3188);
          if (v18 + v16 >= v17) {
            uint64_t v19 = *(unsigned int *)(a1 + 3192);
          }
          else {
            uint64_t v19 = 0;
          }
          *(float *)(a1 + 3196 + 4 * (v18 + v16 - v19)) = v9;
          if (v17 <= v16)
          {
            if (v18 + 1 < v17) {
              LOWORD(v17) = 0;
            }
            *(_WORD *)(a1 + 318_Block_object_dispose(&STACK[0x310], 8) = v18 + 1 - v17;
          }
          else
          {
            *(_WORD *)(a1 + 3190) = v16 + 1;
          }
          *(unsigned char *)(a1 + 3172) = 1;
          uint64_t v20 = *(unsigned __int16 *)(a1 + 4238);
          unint64_t v21 = *(unsigned int *)(a1 + 4240);
          uint64_t v22 = *(unsigned __int16 *)(a1 + 4236);
          if (v22 + v20 >= v21) {
            uint64_t v23 = *(unsigned int *)(a1 + 4240);
          }
          else {
            uint64_t v23 = 0;
          }
          *(float *)(a1 + 4244 + 4 * (v22 + v20 - v23)) = v11;
          if (v21 <= v20)
          {
            if (v22 + 1 < v21) {
              LOWORD(v21) = 0;
            }
            *(_WORD *)(a1 + 4236) = v22 + 1 - v21;
          }
          else
          {
            *(_WORD *)(a1 + 423_Block_object_dispose(&STACK[0x310], 8) = v20 + 1;
          }
          *(unsigned char *)(a1 + 4220) = 1;
        }
      }
      else
      {
        float v8 = sub_10156C078(a1 + 13904, (unsigned __int16 *)(*(void *)(a1 + 2104) + 28), v7);
        float v9 = sub_10156C078(a1 + 13904, (unsigned __int16 *)(*(void *)(a1 + 2104) + 1076), v7);
        float v11 = sub_10156C078(a1 + 13904, (unsigned __int16 *)(*(void *)(a1 + 2104) + 2124), v7);
        if ((v6 & 1) == 0) {
          goto LABEL_7;
        }
      }
      ++v6;
      uint64_t v5 = *(void *)(a1 + 2104);
      ++v7;
    }
    while (v6 < *(unsigned __int16 *)(v5 + 30));
  }
  *(void *)(a1 + 2112) = *(void *)v5;
}

float sub_10156C078(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (a3 < 0 || a2[1] <= (unint64_t)(a3 + *(_DWORD *)a1 - 1))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DA38);
    }
    unint64_t v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v18 = *(_DWORD *)a1;
      uint64_t v19 = a2[1];
      *(_DWORD *)std::string buf = 67109632;
      int v22 = a3;
      __int16 v23 = 1024;
      int v24 = v18;
      __int16 v25 = 2048;
      uint64_t v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Assertion failed: (offset >= 0) && (offset + fFullTapCount - 1 < samples.size()), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMSymmetricFirFilter.h, line 37,offset,%d,fullTapCount,%d,samplesSize,%zu.", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232DA38);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "SampleType CMSymmetricFirFilter<float>::batchFilter(const CMQueue<SampleType> &, int) const [T = float, SampleType = float]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  int v6 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0) {
    int v7 = *(_DWORD *)a1;
  }
  else {
    int v7 = v6 + 1;
  }
  if (v6 < 2)
  {
    int v15 = v7 >> 1;
    float v9 = 0.0;
    if ((v6 & 1) == 0) {
      return v9;
    }
    return v9 + (float)(*(float *)sub_1004182C4(a2, v15 + a3) * **(float **)(a1 + 8));
  }
  uint64_t v8 = 0;
  float v9 = 0.0;
  int v10 = -1;
  do
  {
    float v11 = *(float *)sub_1004182C4(a2, a3 + v8);
    uint64_t v12 = (float *)sub_1004182C4(a2, a3 + v10 + *(_DWORD *)a1);
    int v13 = *(_DWORD *)a1;
    float v9 = v9 + (float)((float)(v11 + *v12) * *(float *)(*(void *)(a1 + 8) + 4 * (v10 + *(_DWORD *)(a1 + 4))));
    ++v8;
    if (*(int *)a1 >= 0) {
      int v14 = *(_DWORD *)a1;
    }
    else {
      int v14 = v13 + 1;
    }
    int v15 = v14 >> 1;
    --v10;
  }
  while (v8 < v15);
  if (v13) {
    return v9 + (float)(*(float *)sub_1004182C4(a2, v15 + a3) * **(float **)(a1 + 8));
  }
  return v9;
}

void sub_10156C354(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)uint64_t v5 = 0x10000000000;
  sub_10156C3EC((uint64_t)v5, a2 + 16);
  sub_100514398(v5);
  sub_1014F083C(a1 + 8432, a3, v5);
}

void sub_10156C3EC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  if (*(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 4))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DA38);
    }
    int v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 4);
      uint64_t v8 = *(unsigned int *)(a2 + 4);
      *(_DWORD *)std::string buf = 134218240;
      uint64_t v11 = v7;
      __int16 v12 = 2048;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: rhs.capacity() == capacity(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 70,capacity,%zu,%zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232DA38);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CMQueue<float>::deepCopy(const CMQueue<T> &) [T = float]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  if (*(_WORD *)(a2 + 2))
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (_DWORD *)sub_1004182C4((unsigned __int16 *)a2, v4);
      sub_100877A00((unsigned __int16 *)a1, v5);
      ++v4;
    }
    while (v4 < *(unsigned __int16 *)(a2 + 2));
  }
}

void sub_10156C60C(void *a1)
{
  *a1 = off_1022C86D0;
  operator delete();
}

void sub_10156C63C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_10156C66C(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  uint64_t *result = off_1022FA060;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_10156C6A4(uint64_t a1, uint64_t a2)
{
  int v3 = 9;
  double result = (void *)sub_1007FC1E8(a1, &v3, qword_1024888A8, a2);
  result[41] = result + 41;
  result[42] = result + 41;
  result[43] = 0;
  result[44] = result + 44;
  result[45] = result + 44;
  result[46] = 0;
  void *result = off_10232DA68;
  return result;
}

void sub_10156C710(void *a1)
{
  sub_101570D4C(a1);

  operator delete();
}

uint64_t sub_10156C748()
{
  return 380;
}

double sub_10156C750()
{
  return 0.5;
}

uint64_t sub_10156C758()
{
  return 1000;
}

uint64_t sub_10156C760(uint64_t a1, std::string::value_type *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  v67[0] = (uint64_t)v67;
  v67[1] = (uint64_t)v67;
  uint64_t v68 = 0;
  sub_101047E00(a1, a2);
  int v5 = sub_10104A8A0((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  if (v67 != (uint64_t *)(a1 + 328)) {
    sub_101570DAC(v67, *(void *)(a1 + 336), a1 + 328);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232DC18);
  }
  int v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = v68;
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    uint64_t v8 = v70[9] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 134218498;
    *(void *)std::string::size_type v72 = v7;
    *(_WORD *)&v72[8] = 2080;
    *(void *)long long v73 = a2;
    *(_WORD *)&v73[8] = 2080;
    *(void *)&v73[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s", buf, 0x20u);
    if ((v70[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    uint64_t v39 = v68;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(&v64, a1);
    if (v66 >= 0) {
      __int16 v40 = &v64;
    }
    else {
      __int16 v40 = v64;
    }
    *(_DWORD *)std::string __p = 134218498;
    *(void *)&__p[4] = v39;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)int v70 = a2;
    *(_WORD *)&v70[8] = 2080;
    *(void *)&v70[10] = v40;
    __int16 v41 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v66) < 0) {
      operator delete(v64);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  sub_1003B2350((void *)(a1 + 328));
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
  double v62 = 0.0;
  double v63 = 0.0;
  int v9 = 0;
  if (v5)
  {
    int v10 = 0;
    while (2)
    {
      int v11 = 0;
      int v12 = v9;
      double v13 = (double)v10;
      unsigned int v43 = v10;
      int v44 = v9 + 20;
      do
      {
        double v61 = 0.0;
        double v61 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1) / 20.0 + 0.0;
        double v60 = 0.0;
        double v60 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1) / 20.0 + 0.0;
        int v64 = &v64;
        id v65 = &v64;
        uint64_t v66 = 0;
        uint64_t v57 = (uint64_t)&v57;
        uint64_t v58 = &v57;
        uint64_t v59 = 0;
        double v14 = sub_10013DAC0(a1 + 48);
        double v63 = v14 + v61 * v13;
        double v15 = sub_10013DA9C(a1 + 48);
        double v62 = v15 + v60 * (double)v11;
        (*(void (**)(uint64_t, double *, double *, double *, double *, void, void, uint64_t *))(*(void *)a1 + 176))(a1, &v63, &v62, &v61, &v60, 0, 0, &v57);
        (*(void (**)(uint64_t, double *, double *, double *, double *, uint64_t, void, void **))(*(void *)a1 + 176))(a1, &v63, &v62, &v61, &v60, 1, 0, &v64);
        int v45 = v11;
        uint64_t v16 = v65;
        uint64_t v47 = v66;
        uint64_t v48 = v59;
        while (v16 != &v64)
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
          double v17 = sub_10013DAC0(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 56))(a1, v17);
          (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
          double v18 = sub_10013DA9C(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 64))(a1, v18);
          uint64_t v16 = (void **)v16[1];
        }
        for (uint64_t i = v58; i != &v57; uint64_t i = (uint64_t *)i[1])
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
          double v20 = sub_10013DAC0(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 56))(a1, v20);
          (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
          double v21 = sub_10013DA9C(a1 + 48);
          (*(void (**)(uint64_t, double))(*(void *)a1 + 64))(a1, v21);
        }
        sub_101570F4C((uint64_t)v54, (uint64_t)v65, (uint64_t)&v64);
        sub_101570F4C((uint64_t)&v51, (uint64_t)v58, (uint64_t)&v57);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232DC18);
        }
        int v22 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134218752;
          *(double *)std::string::size_type v72 = v63;
          *(_WORD *)&v72[8] = 2048;
          *(double *)long long v73 = v62;
          *(_WORD *)&v73[8] = 2048;
          *(void *)&v73[10] = v53;
          *(_WORD *)&v73[18] = 2048;
          *(void *)&v73[20] = v56;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu", buf, 0x2Au);
        }
        int v46 = v12;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232DC18);
          }
          *(_DWORD *)std::string __p = 134218752;
          *(double *)&__p[4] = v63;
          *(_WORD *)&unsigned char __p[12] = 2048;
          *(double *)int v70 = v62;
          *(_WORD *)&v70[8] = 2048;
          *(void *)&v70[10] = v53;
          *(_WORD *)&v70[18] = 2048;
          *(void *)&v70[20] = v56;
          double v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
        __int16 v23 = v51;
        if (v51 != &v52)
        {
          int v24 = 0;
          do
          {
            (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
            double v25 = sub_10013DAC0(a1 + 48);
            (*(void (**)(uint64_t, double))(*(void *)a1 + 56))(a1, v25);
            (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
            double v26 = sub_10013DA9C(a1 + 48);
            (*(void (**)(uint64_t, double))(*(void *)a1 + 64))(a1, v26);
            if (&v55 == (void **)sub_101571264((uint64_t)v54, (unsigned __int16 *)&v59))
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              ++v24;
              unsigned int v27 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                sub_101065BC0((uint64_t)&v59);
                BOOL v28 = __p;
                if (v70[9] < 0) {
                  BOOL v28 = *(unsigned char **)__p;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)std::string::size_type v72 = v28;
                *(_WORD *)&v72[8] = 1024;
                *(_DWORD *)long long v73 = v24;
                *(_WORD *)&v73[4] = 2048;
                *(double *)&v73[6] = v63;
                *(_WORD *)&v73[14] = 2048;
                *(double *)&v73[16] = v62;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf", buf, 0x26u);
                if ((v70[9] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10232DC18);
                }
                sub_101065BC0((uint64_t)&v59);
                char v32 = &v49;
                if (v50 < 0) {
                  char v32 = v49;
                }
                *(_DWORD *)std::string __p = 136315906;
                *(void *)&__p[4] = v32;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)int v70 = v24;
                *(_WORD *)&v70[4] = 2048;
                *(double *)&v70[6] = v63;
                *(_WORD *)&v70[14] = 2048;
                *(double *)&v70[16] = v62;
                char v33 = (char *)_os_log_send_and_compose_impl();
                if (v50 < 0) {
                  operator delete(v49);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v33);
                if (v33 != (char *)buf) {
                  free(v33);
                }
              }
            }
            unsigned int v29 = v23[1];
            if (v29)
            {
              do
              {
                int v30 = (void **)v29;
                unsigned int v29 = (void *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                int v30 = (void **)v23[2];
                BOOL v31 = *v30 == v23;
                __int16 v23 = v30;
              }
              while (!v31);
            }
            __int16 v23 = v30;
          }
          while (v30 != &v52);
        }
        int v12 = v46 + 1;
        sub_1000F5BB0((uint64_t)&v51, v52);
        sub_1000F5BB0((uint64_t)v54, v55);
        sub_1003B2350(&v57);
        sub_1003B2350(&v64);
        if (v47 != v48)
        {
          uint64_t v35 = 0;
          int v9 = v46 + 1;
          goto LABEL_63;
        }
        int v11 = v45 + 1;
      }
      while (v45 != 19);
      int v10 = v43 + 1;
      uint64_t v35 = 1;
      int v9 = v44;
      if (v43 < 0x13) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
LABEL_63:
  int v36 = v9;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232DC18);
  }
  uint64_t v37 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)std::string::size_type v72 = v35;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&void v72[6] = v36;
    *(_WORD *)long long v73 = 1024;
    *(_DWORD *)&v73[2] = 400;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %u, %d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    *(_DWORD *)std::string __p = 67109632;
    *(_DWORD *)&__p[4] = v35;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v36;
    *(_WORD *)int v70 = 1024;
    *(_DWORD *)&v70[2] = 400;
    __int16 v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  sub_1003B2350(v67);
  return v35;
}

void sub_10156D53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

void *sub_10156D5D8(uint64_t a1)
{
  sub_101045750(a1);
  sub_1003B2350((void *)(a1 + 328));

  return sub_1003B2350((void *)(a1 + 352));
}

void sub_10156D618(void *a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1007FE8A4((uint64_t)a1, (uint64_t)a2, a3);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232DC18);
  }
  int v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v10 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)__int16 v93 = v10;
    *(_WORD *)&v93[4] = 2080;
    *(void *)&v93[6] = sub_101043C80(v10);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    unsigned int v67 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)std::string __p = 67109378;
    *(_DWORD *)&__p[4] = v67;
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = sub_101043C80(v67);
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v68);
    if (v68 != (char *)buf) {
      free(v68);
    }
  }
  int v82 = 568250;
  long long v83 = xmmword_101E108F0;
  unsigned int v84 = 4;
  int v79 = 633786;
  long long v80 = xmmword_101E10900;
  uint64_t v81 = 0xA000600000000;
  int v77 = 699322;
  long long v78 = xmmword_101E10910;
  int v11 = *(unsigned __int16 *)(a3 + 2);
  if (v11 != 10)
  {
    if (v11 != 9)
    {
      if (v11 == 8)
      {
        sub_101044E70(a4, (uint64_t)&v82);
        int v12 = DWORD2(v83);
        int v13 = HIDWORD(v83);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232DC18);
        }
        double v14 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67109376;
          *(_DWORD *)__int16 v93 = DWORD2(v83);
          *(_WORD *)&v93[4] = 1024;
          *(_DWORD *)&v93[6] = HIDWORD(v83);
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232DC18);
          }
          *(_DWORD *)std::string __p = 67109376;
          *(_DWORD *)&__p[4] = DWORD2(v83);
          *(_WORD *)&__p[8] = 1024;
          *(_DWORD *)&__p[10] = HIDWORD(v83);
          int v69 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v69);
          if (v69 != (char *)buf) {
            free(v69);
          }
        }
        uint64_t v15 = (v13 * v12);
        uint64_t v16 = (char *)sub_100800268((uint64_t)a1, a2, a3, 0, v13 * v12, v84);
        if (v16)
        {
          LODWORD(v73) = 0;
          if (v15)
          {
            uint64_t v17 = 0;
            int v18 = 0;
            do
            {
              sub_101044E60((unsigned int *)&v16[v17 * v84], &v73);
              if (!*(unsigned char *)(a5 + 9))
              {
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10232DC18);
                }
                uint64_t v19 = qword_102419638;
                if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                {
                  int v20 = v73;
                  sub_1015712E4();
                  double v21 = __p;
                  if (v87[3] < 0) {
                    double v21 = *(unsigned char **)__p;
                  }
                  *(_DWORD *)std::string buf = 134218754;
                  *(void *)__int16 v93 = v17;
                  *(_WORD *)&v93[8] = 1024;
                  *(_DWORD *)&v93[10] = v15;
                  __int16 v94 = 1024;
                  *(_DWORD *)unsigned int v95 = v20 - v18;
                  *(_WORD *)&v95[4] = 2080;
                  *(void *)&v95[6] = v21;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, step, %04d, %s", buf, 0x22u);
                  if ((v87[3] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419630 != -1) {
                    dispatch_once(&qword_102419630, &stru_10232DC18);
                  }
                  int v22 = v73;
                  sub_1015712E4();
                  __int16 v23 = v75;
                  if (v76 < 0) {
                    __int16 v23 = (void **)v75[0];
                  }
                  *(_DWORD *)std::string __p = 134218754;
                  *(void *)&__p[4] = v17;
                  *(_WORD *)&unsigned char __p[12] = 1024;
                  *(_DWORD *)&unsigned char __p[14] = v15;
                  __int16 v86 = 1024;
                  *(_DWORD *)unsigned int v87 = v22 - v18;
                  *(_WORD *)&v87[4] = 2080;
                  *(void *)&v87[6] = v23;
                  int v24 = (char *)_os_log_send_and_compose_impl();
                  if (v76 < 0) {
                    operator delete(v75[0]);
                  }
                  sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v24);
                  if (v24 != (char *)buf) {
                    free(v24);
                  }
                }
              }
              int v18 = v73;
              ++v17;
            }
            while (v15 != v17);
          }
LABEL_110:
          char v32 = v16;
LABEL_111:
          free(v32);
          return;
        }
      }
      return;
    }
    sub_101044EB0(a4, (uint64_t)&v79);
    sub_1003B2350(a1 + 41);
    int v29 = DWORD2(v80);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    int v30 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)__int16 v93 = DWORD2(v80);
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232DC18);
      }
      *(_DWORD *)std::string __p = 67109120;
      *(_DWORD *)&__p[4] = DWORD2(v80);
      uint64_t v71 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v71);
      if (v71 != (char *)buf) {
        free(v71);
      }
    }
    if (!*(unsigned char *)(a5 + 8))
    {
      uint64_t v16 = (char *)sub_100800268((uint64_t)a1, a2, a3, 0, v29, SHIDWORD(v80));
      if (!v16) {
        return;
      }
      if (DWORD2(v80))
      {
        unint64_t v45 = 0;
        do
        {
          int v74 = 0;
          uint64_t v73 = 0;
          sub_101044DBC((unsigned __int16 *)&v16[v45 * HIDWORD(v80)], (uint64_t)&v73);
          int v46 = operator new(0x20uLL);
          uint64_t v47 = v73;
          v46[1] = a1 + 41;
          v46[2] = v47;
          *((_DWORD *)v46 + 6) = v74;
          uint64_t v48 = a1[41];
          void *v46 = v48;
          *(void *)(v48 + _Block_object_dispose(&STACK[0x310], 8) = v46;
          a1[41] = v46;
          ++a1[43];
          unsigned int v49 = (unsigned __int16)v73;
          unsigned int v50 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
          double v51 = sub_10013DAC0((uint64_t)(a1 + 6));
          double v52 = (*(double (**)(void *))(*a1 + 56))(a1);
          unsigned int v53 = WORD1(v73);
          unsigned int v54 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
          double v55 = sub_10013DA9C((uint64_t)(a1 + 6));
          (*(void (**)(void *))(*a1 + 64))(a1);
          if (!*(unsigned char *)(a5 + 9))
          {
            double v57 = v56;
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10232DC18);
            }
            double v58 = v51 + (double)v49 / (double)v50 * v52 + v52 / (double)v50 * 0.5;
            uint64_t v59 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              int v60 = DWORD2(v80);
              uint64_t v61 = a1[43];
              sub_101065BC0((uint64_t)&v73);
              double v62 = __p;
              if (v87[3] < 0) {
                double v62 = *(unsigned char **)__p;
              }
              *(_DWORD *)std::string buf = 134219266;
              *(void *)__int16 v93 = v45;
              *(_WORD *)&v93[8] = 1024;
              *(_DWORD *)&v93[10] = v60;
              __int16 v94 = 2048;
              *(void *)unsigned int v95 = v61;
              *(_WORD *)&v95[8] = 2080;
              *(void *)&v95[10] = v62;
              __int16 v96 = 2048;
              double v97 = v58;
              __int16 v98 = 2048;
              double v99 = v55 + (double)v53 / (double)v54 * v57 + v57 / (double)v54 * 0.5;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf", buf, 0x3Au);
              if ((v87[3] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              int v63 = DWORD2(v80);
              uint64_t v64 = a1[43];
              sub_101065BC0((uint64_t)&v73);
              id v65 = v75;
              if (v76 < 0) {
                id v65 = (void **)v75[0];
              }
              *(_DWORD *)std::string __p = 134219266;
              *(void *)&__p[4] = v45;
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&unsigned char __p[14] = v63;
              __int16 v86 = 2048;
              *(void *)unsigned int v87 = v64;
              *(_WORD *)&v87[8] = 2080;
              *(void *)&v87[10] = v65;
              __int16 v88 = 2048;
              double v89 = v58;
              __int16 v90 = 2048;
              double v91 = v55 + (double)v53 / (double)v54 * v57 + v57 / (double)v54 * 0.5;
              uint64_t v66 = (char *)_os_log_send_and_compose_impl();
              if (v76 < 0) {
                operator delete(v75[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v66);
              if (v66 != (char *)buf) {
                free(v66);
              }
            }
          }
          ++v45;
        }
        while (v45 < DWORD2(v80));
      }
      goto LABEL_110;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    BOOL v31 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, headers only, give up", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    *(_WORD *)std::string __p = 0;
    BOOL v28 = (const char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v28);
LABEL_64:
    if (v28 == (const char *)buf) {
      return;
    }
    char v32 = (char *)v28;
    goto LABEL_111;
  }
  sub_101044D88(a4, (uint64_t)&v77);
  sub_1003B2350(a1 + 44);
  int v25 = DWORD2(v78);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232DC18);
  }
  double v26 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)__int16 v93 = DWORD2(v78);
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = DWORD2(v78);
    int v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v70);
    if (v70 != (char *)buf) {
      free(v70);
    }
  }
  if (!*(unsigned char *)(a5 + 8))
  {
    uint64_t v16 = (char *)sub_100800268((uint64_t)a1, a2, a3, 0, v25, SHIDWORD(v78));
    if (!v16) {
      return;
    }
    if (DWORD2(v78))
    {
      unint64_t v33 = 0;
      do
      {
        int v74 = 0;
        uint64_t v73 = 0;
        sub_101044DBC((unsigned __int16 *)&v16[v33 * HIDWORD(v78)], (uint64_t)&v73);
        double v34 = operator new(0x20uLL);
        uint64_t v35 = v73;
        v34[1] = a1 + 44;
        v34[2] = v35;
        *((_DWORD *)v34 + 6) = v74;
        uint64_t v36 = a1[44];
        *double v34 = v36;
        *(void *)(v36 + _Block_object_dispose(&STACK[0x310], 8) = v34;
        a1[44] = v34;
        ++a1[46];
        if (!*(unsigned char *)(a5 + 9))
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232DC18);
          }
          uint64_t v37 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            int v38 = DWORD2(v80);
            uint64_t v39 = a1[46];
            sub_101065BC0((uint64_t)&v73);
            __int16 v40 = __p;
            if (v87[3] < 0) {
              __int16 v40 = *(unsigned char **)__p;
            }
            *(_DWORD *)std::string buf = 134218754;
            *(void *)__int16 v93 = v33;
            *(_WORD *)&v93[8] = 1024;
            *(_DWORD *)&v93[10] = v38;
            __int16 v94 = 2048;
            *(void *)unsigned int v95 = v39;
            *(_WORD *)&v95[8] = 2080;
            *(void *)&v95[10] = v40;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s", buf, 0x26u);
            if ((v87[3] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10232DC18);
            }
            int v41 = DWORD2(v80);
            uint64_t v42 = a1[46];
            sub_101065BC0((uint64_t)&v73);
            unsigned int v43 = v75;
            if (v76 < 0) {
              unsigned int v43 = (void **)v75[0];
            }
            *(_DWORD *)std::string __p = 134218754;
            *(void *)&__p[4] = v33;
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&unsigned char __p[14] = v41;
            __int16 v86 = 2048;
            *(void *)unsigned int v87 = v42;
            *(_WORD *)&v87[8] = 2080;
            *(void *)&v87[10] = v43;
            int v44 = (char *)_os_log_send_and_compose_impl();
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v44);
            if (v44 != (char *)buf) {
              free(v44);
            }
          }
        }
        ++v33;
      }
      while (v33 < DWORD2(v78));
    }
    goto LABEL_110;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232DC18);
  }
  unsigned int v27 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "TILE: CLSpatialDataTileTemplate, headers only, give up", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    *(_WORD *)std::string __p = 0;
    BOOL v28 = (const char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v28);
    goto LABEL_64;
  }
}

void sub_10156E8B8(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int a6, int a7, uint64_t *a8)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232DC18);
  }
  *(void *)v186 = a1;
  int v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *a2;
    double v13 = *a3;
    double v14 = *a4;
    double v15 = *a5;
    uint64_t v16 = a8[2];
    *(_DWORD *)std::string buf = 134219520;
    *(double *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = v13;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&unsigned char buf[24] = v14;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&unsigned char buf[34] = v15;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = a6;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)v237 = a7;
    *(_WORD *)&v237[4] = 2048;
    *(void *)&v237[6] = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, includeRegionalEntries, %d, entries, %lu", buf, 0x40u);
  }
  int v171 = a7;
  int v172 = a6;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    double v153 = *a2;
    double v154 = *a3;
    double v155 = *a4;
    double v156 = *a5;
    uint64_t v157 = a8[2];
    int v226 = 134219520;
    uint64_t v227 = *(void *)&v153;
    *(_WORD *)v228 = 2048;
    *(double *)&v228[2] = v154;
    *(_WORD *)&v228[10] = 2048;
    *(double *)&v228[12] = v155;
    LOWORD(v229) = 2048;
    *(double *)((char *)&v229 + 2) = v156;
    WORD5(v229) = 1024;
    HIDWORD(v229) = a6;
    __int16 v230 = 1024;
    int v231 = a7;
    __int16 v232 = 2048;
    uint64_t v233 = v157;
    v158 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v158);
    if (v158 != buf) {
      free(v158);
    }
  }
  clock_t v170 = clock();
  int v213 = 0;
  size_t v212 = 0;
  uint64_t v227 = 176;
  int v226 = 306106;
  *(_DWORD *)v228 = 381;
  int v234 = 0;
  uint64_t v235 = 0;
  *(_OWORD *)&v228[4] = 0u;
  long long v229 = 0u;
  int v209 = 568250;
  long long v210 = xmmword_101E108F0;
  unsigned int v211 = 4;
  uint64_t v208 = 0;
  int v207 = 43962;
  int v204 = 633786;
  long long v205 = xmmword_101E10900;
  uint64_t v206 = 0xA000600000000;
  int v202 = 699322;
  long long v203 = xmmword_101E10910;
  double v17 = sub_10013DAC0(a1 + 48);
  double v18 = sub_10013DA9C(a1 + 48);
  double v19 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  double v21 = *a2;
  double v22 = *a3;
  double v23 = *a4;
  if (*a2 > v17 || v21 + v23 < v17)
  {
    BOOL v24 = v17 <= v21;
    if (v17 + v19 < v21) {
      BOOL v24 = 0;
    }
  }
  else
  {
    BOOL v24 = 1;
  }
  double v25 = *a5;
  if (v22 > v18 || v22 + v25 < v18)
  {
    BOOL v26 = v18 <= v22;
    if (v18 + v20 < v22) {
      BOOL v26 = 0;
    }
  }
  else
  {
    BOOL v26 = 1;
  }
  if (v24 && v26)
  {
    if (v21 > v17) {
      double v27 = *a2;
    }
    else {
      double v27 = v17;
    }
    if (v22 > v18) {
      double v28 = *a3;
    }
    else {
      double v28 = v18;
    }
    if (v27 + v23 >= v17 + v19) {
      double v29 = v17 + v19 - v27;
    }
    else {
      double v29 = *a4;
    }
    double v30 = v18 + v20;
    if (v28 + v25 >= v30) {
      double v31 = v30 - v28;
    }
    else {
      double v31 = *a5;
    }
    double v187 = v29;
    double v189 = v31;
    int v176 = (char *)sub_1007FC25C(a1, &v212, &v213);
    uint64_t v32 = 0;
    BOOL v33 = v176 != 0;
    if (v176)
    {
      uint64_t v195 = 0;
      uint64_t v183 = 0;
      if (v212)
      {
        uint64_t v183 = 0;
        uint64_t v195 = 0;
        uint64_t v32 = 0;
        size_t v34 = 0;
        while (1)
        {
          uint64_t v35 = v32;
          uint64_t v36 = (unsigned __int16 *)&v176[v34];
          sub_100D33DF8((unsigned __int16 *)&v176[v34], (uint64_t)&v207);
          if ((unsigned __int16)v207 != 43962)
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10232DC18);
            }
            unsigned int v67 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v207;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: invalid section, signature, 0x%x, stopping", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              *(_DWORD *)v216 = 67109120;
              *(_DWORD *)&v216[4] = (unsigned __int16)v207;
              std::string v162 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v162);
              if (v162 != buf) {
                free(v162);
              }
            }
LABEL_88:
            BOOL v33 = 1;
            if (v183 && (v172 & 1) == 0)
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              uint64_t v68 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, asked not to use index", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10232DC18);
                }
                *(_WORD *)v216 = 0;
                int v163 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v163);
                if (v163 != buf) {
                  free(v163);
                }
                uint64_t v183 = 0;
                BOOL v33 = 1;
              }
              else
              {
                uint64_t v183 = 0;
              }
            }
            goto LABEL_102;
          }
          unint64_t v37 = v208 + (unint64_t)HIDWORD(v208) + 12;
          if (v37 > 0x640000B) {
            break;
          }
          switch(HIWORD(v207))
          {
            case 4:
              sub_10125BA6C(v36, (uint64_t)&v226);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              int v38 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                int v39 = *(_DWORD *)v228;
                int v40 = *(_DWORD *)&v228[4];
                int v41 = *(_DWORD *)&v228[8];
                float v42 = *(float *)&v228[12];
                float v43 = *(float *)&v228[16];
                unint64_t v44 = *((void *)&v229 + 1);
                uint64_t v45 = v229;
                int v46 = v234;
                CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                *(_DWORD *)std::string buf = 67111424;
                *(_DWORD *)&uint8_t buf[4] = v39;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v40;
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v41;
                *(_WORD *)&buf[20] = 2048;
                *(double *)&buf[22] = v42;
                *(_WORD *)&buf[30] = 2048;
                *(double *)&buf[32] = v43;
                *(_WORD *)&unsigned char buf[40] = 2048;
                *(double *)&buf[42] = *(float *)&v45;
                *(_WORD *)v237 = 2048;
                *(double *)&v237[2] = *((float *)&v45 + 1);
                *(_WORD *)&v237[10] = 2048;
                *(double *)&v237[12] = (double)v44 - kCFAbsoluteTimeIntervalSince1970;
                __int16 v238 = 1024;
                int v239 = v46;
                __int16 v240 = 2048;
                CFAbsoluteTime v241 = Current - ((double)*((unint64_t *)&v229 + 1) - kCFAbsoluteTimeIntervalSince1970);
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2lf, expAge, %d, age, %.2lf", buf, 0x56u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_56;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              int v48 = *(_DWORD *)v228;
              int v49 = *(_DWORD *)&v228[4];
              int v50 = *(_DWORD *)&v228[8];
              float v51 = *(float *)&v228[12];
              float v52 = *(float *)&v228[16];
              unint64_t v53 = *((void *)&v229 + 1);
              uint64_t v54 = v229;
              int v55 = v234;
              CFAbsoluteTime v56 = CFAbsoluteTimeGetCurrent();
              *(_DWORD *)v216 = 67111424;
              *(_DWORD *)&v216[4] = v48;
              *(_WORD *)&v216[8] = 1024;
              *(_DWORD *)&v216[10] = v49;
              *(_WORD *)&v216[14] = 1024;
              *(_DWORD *)&v216[16] = v50;
              *(_WORD *)&v216[20] = 2048;
              *(double *)&v216[22] = v51;
              *(_WORD *)&v216[30] = 2048;
              *(double *)&v216[32] = v52;
              *(_WORD *)v217 = 2048;
              *(double *)&v217[2] = *(float *)&v54;
              __int16 v218 = 2048;
              double v219 = *((float *)&v54 + 1);
              __int16 v220 = 2048;
              double v221 = (double)v53 - kCFAbsoluteTimeIntervalSince1970;
              __int16 v222 = 1024;
              int v223 = v55;
              __int16 v224 = 2048;
              CFAbsoluteTime v225 = v56 - ((double)*((unint64_t *)&v229 + 1) - kCFAbsoluteTimeIntervalSince1970);
              double v57 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v57);
              break;
            case 8:
              sub_101044E70((uint64_t)v36, (uint64_t)&v209);
              uint64_t v60 = v210;
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              uint64_t v61 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = DWORD2(v210);
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v210);
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v211;
                _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d", buf, 0x14u);
              }
              uint64_t v183 = (uint64_t)v36 + v60 + 12;
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_56;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              *(_DWORD *)v216 = 67109632;
              *(_DWORD *)&v216[4] = DWORD2(v210);
              *(_WORD *)&v216[8] = 1024;
              *(_DWORD *)&v216[10] = HIDWORD(v210);
              *(_WORD *)&v216[14] = 1024;
              *(_DWORD *)&v216[16] = v211;
              double v57 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v57);
              break;
            case 9:
              sub_101044EB0((uint64_t)v36, (uint64_t)&v204);
              uint64_t v58 = v205;
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              uint64_t v59 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = DWORD2(v205);
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v205);
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v206;
                _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d", buf, 0x14u);
              }
              uint64_t v195 = (uint64_t)v36 + v58 + 12;
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_56;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              *(_DWORD *)v216 = 67109632;
              *(_DWORD *)&v216[4] = DWORD2(v205);
              *(_WORD *)&v216[8] = 1024;
              *(_DWORD *)&v216[10] = HIDWORD(v205);
              *(_WORD *)&v216[14] = 1024;
              *(_DWORD *)&v216[16] = v206;
              double v57 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v57);
              break;
            case 0xA:
              sub_101044D88((uint64_t)v36, (uint64_t)&v202);
              uint64_t v62 = v203;
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              int v63 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = DWORD2(v203);
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v203);
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d", buf, 0xEu);
              }
              uint64_t v32 = (uint64_t)v36 + v62 + 12;
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10232DC18);
                }
                *(_DWORD *)v216 = 67109376;
                *(_DWORD *)&v216[4] = DWORD2(v203);
                *(_WORD *)&v216[8] = 1024;
                *(_DWORD *)&v216[10] = HIDWORD(v203);
                uint64_t v64 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v64);
                if (v64 != buf) {
                  free(v64);
                }
              }
              goto LABEL_62;
            default:
              goto LABEL_62;
          }
          if (v57 != buf) {
            free(v57);
          }
LABEL_56:
          uint64_t v32 = v35;
LABEL_62:
          v34 += v208 + (unint64_t)HIDWORD(v208) + 12;
          if (v34 >= v212) {
            goto LABEL_88;
          }
        }
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232DC18);
        }
        int v69 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 134218240;
          *(void *)&uint8_t buf[4] = v37;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = 104857612;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_FAULT, "TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232DC18);
          }
          *(_DWORD *)v216 = 134218240;
          *(void *)&v216[4] = v37;
          *(_WORD *)&v216[12] = 2048;
          *(void *)&v216[14] = 104857612;
          __int16 v164 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v164);
          if (v164 != buf) {
            free(v164);
          }
        }
        BOOL v33 = 0;
      }
    }
    else
    {
      uint64_t v195 = 0;
      uint64_t v183 = 0;
    }
LABEL_102:
    int v169 = WORD2(v206);
    int v70 = HIWORD(v206);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    uint64_t v168 = v32;
    uint64_t v71 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v183;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v195;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, pIndexEntries, 0x%lx, pEntries, 0x%lx", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232DC18);
      }
      *(_DWORD *)v216 = 134218240;
      *(void *)&v216[4] = v183;
      *(_WORD *)&v216[12] = 2048;
      *(void *)&v216[14] = v195;
      unint64_t v159 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v159);
      if (v159 != buf) {
        free(v159);
      }
    }
    if (!v33)
    {
      LODWORD(v95) = 0;
LABEL_242:
      clock_t v150 = clock();
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232DC18);
      }
      __int16 v151 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v152 = a8[2];
        *(_DWORD *)std::string buf = 67110400;
        *(_DWORD *)&uint8_t buf[4] = v95;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v152;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v172;
        *(_WORD *)&unsigned char buf[24] = 2048;
        *(void *)&buf[26] = v150 - v170;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&buf[36] = v169;
        *(_WORD *)&unsigned char buf[40] = 1024;
        *(_DWORD *)&buf[42] = v70;
        _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, examinedEntries, %5u, foundEntries, %5lu, isUseIndex, %d, clocks, %10lu, extra, %3d, %3d", buf, 0x2Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232DC18);
        }
        uint64_t v160 = a8[2];
        *(_DWORD *)v216 = 67110400;
        *(_DWORD *)&v216[4] = v95;
        *(_WORD *)&v216[8] = 2048;
        *(void *)&v216[10] = v160;
        *(_WORD *)&v216[18] = 1024;
        *(_DWORD *)&v216[20] = v172;
        *(_WORD *)&v216[24] = 2048;
        *(void *)&v216[26] = v150 - v170;
        *(_WORD *)&v216[34] = 1024;
        *(_DWORD *)&v216[36] = v169;
        *(_WORD *)v217 = 1024;
        *(_DWORD *)&v217[2] = v70;
        std::string v161 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v161);
        if (v161 != buf) {
          free(v161);
        }
      }
      if (v176) {
        sub_1007FCEA4(v186[0], v176, v212, v213);
      }
      return;
    }
    double v184 = v27;
    double v192 = v28;
    int v201 = 0;
    uint64_t v200 = 0;
    int v199 = 0;
    v198[0] = 0;
    v198[1] = 0;
    v197 = (uint64_t *)v198;
    float v72 = *(float *)&v228[12];
    float v73 = *(float *)&v229;
    uint64_t v74 = *(void *)v186;
    unsigned int v75 = (*(uint64_t (**)(int *))(**(void **)v186 + 80))(*(int **)v186);
    float v76 = *(float *)&v228[16];
    float v77 = *((float *)&v229 + 1);
    unsigned int v78 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 72))(v74);
    float v79 = *(float *)&v228[12];
    float v80 = *(float *)&v229;
    unsigned int v81 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 80))(v74);
    float v82 = *(float *)&v228[16];
    float v83 = *((float *)&v229 + 1);
    int v84 = (int)((v184 - v72) / (v73 / (double)v75));
    int v85 = (int)((v192 - v76) / (v77 / (double)v78));
    int v86 = (int)((v184 + v187 - v79) / (v80 / (double)v81));
    int v87 = (int)((v192 + v189 - v82)
              / (v83
               / (double)(*(unsigned int (**)(uint64_t))(*(void *)v74 + 72))(v74)));
    if (v86 - v84 <= 1) {
      int v88 = 1;
    }
    else {
      int v88 = v86 - v84;
    }
    if (v87 - v85 <= 1) {
      int v89 = 1;
    }
    else {
      int v89 = v87 - v85;
    }
    if (v183)
    {
      int v167 = v70;
      unsigned int v193 = (*(uint64_t (**)(int *))(**(void **)v186 + 80))(*(int **)v186);
      unsigned int v190 = DWORD2(v210);
      unsigned int v90 = (*(uint64_t (**)(int *))(**(void **)v186 + 72))(*(int **)v186);
      unsigned int v91 = HIDWORD(v210);
      if (v84 >= v169) {
        int v92 = v84 - v169;
      }
      else {
        int v92 = 0;
      }
      int v93 = v85 - v167;
      if (v85 < v167) {
        int v93 = 0;
      }
      int v174 = v93;
      int v175 = v92;
      int v185 = v86 + v169;
      if (v86 + v169 >= (*(unsigned int (**)(int *))(**(void **)v186 + 80))(*(int **)v186)) {
        int v185 = (*(uint64_t (**)(int *))(**(void **)v186 + 80))(*(int **)v186);
      }
      int v173 = v87 + v167;
      if (v87 + v167 >= (*(unsigned int (**)(int *))(**(void **)v186 + 72))(*(int **)v186)) {
        int v173 = (*(uint64_t (**)(int *))(**(void **)v186 + 72))(*(int **)v186);
      }
      unsigned int v94 = 0;
      LODWORD(v95) = 0;
      int v178 = v193 / v190;
      int v191 = v88 + v84;
      int v188 = v89 + v85;
      int v96 = v175;
      int v177 = v174 / (int)(v90 / v91);
      while (v96 < (*(unsigned int (**)(int *))(**(void **)v186 + 80))(*(int **)v186) && v96 < v185)
      {
        if (v177) {
          int v98 = v177 - 1;
        }
        else {
          int v98 = 0;
        }
        sub_101044E60((unsigned int *)(v183 + v211 * (unint64_t)(v98 + HIDWORD(v210) * (v96 / v178))), &v199);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232DC18);
        }
        double v99 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67110912;
          *(_DWORD *)&uint8_t buf[4] = v96;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v175;
          *(_WORD *)&unsigned char buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v185;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = v174;
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&unsigned char buf[28] = v173;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&unsigned char buf[34] = v96 / v178;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&unsigned char buf[40] = v98;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v199;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, line, %d, searched_min_y, %d, %d, searched_min_x, %d, %d, index_y, %d, index_x, %d, entriesOffset, %d", buf, 0x32u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232DC18);
          }
          *(_DWORD *)v216 = 67110912;
          *(_DWORD *)&v216[4] = v96;
          *(_WORD *)&v216[8] = 1024;
          *(_DWORD *)&v216[10] = v175;
          *(_WORD *)&v216[14] = 1024;
          *(_DWORD *)&v216[16] = v185;
          *(_WORD *)&v216[20] = 1024;
          *(_DWORD *)&v216[22] = v174;
          *(_WORD *)&v216[26] = 1024;
          *(_DWORD *)&v216[28] = v173;
          *(_WORD *)&v216[32] = 1024;
          *(_DWORD *)&v216[34] = v96 / v178;
          *(_WORD *)&v216[38] = 1024;
          *(_DWORD *)v217 = v98;
          *(_WORD *)&v217[4] = 1024;
          *(_DWORD *)&v217[6] = v199;
          uint64_t v122 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v122);
          if (v122 != buf) {
            free(v122);
          }
        }
        int v100 = 0;
        do
        {
          unsigned int v101 = v199 + v100;
          unsigned int v196 = v199 + v100;
          if ((v199 + v100) >= DWORD2(v205)) {
            break;
          }
          if (!v94 || v101 > v94)
          {
            unsigned int v102 = v198[0];
            if (!v198[0]) {
              goto LABEL_151;
            }
            unsigned int v103 = v198;
            do
            {
              __int16 v104 = v102;
              char v105 = v103;
              unsigned int v106 = *((_DWORD *)v102 + 7);
              unsigned int v107 = v102 + 1;
              if (v106 >= v101)
              {
                unsigned int v107 = v104;
                unsigned int v103 = (void **)v104;
              }
              unsigned int v102 = (void *)*v107;
            }
            while (v102);
            if (v103 == v198) {
              goto LABEL_151;
            }
            if (v106 < v101) {
              __int16 v104 = v105;
            }
            if (v101 < *((_DWORD *)v104 + 7))
            {
LABEL_151:
              sub_101044DBC((unsigned __int16 *)(v195 + HIDWORD(v205) * (unint64_t)v101), (uint64_t)&v200);
              BOOL v108 = (unsigned __int16)v200 <= v84 && (unsigned __int16)v200 + 1 >= v84
                  || v84 <= (unsigned __int16)v200 && v191 >= (unsigned __int16)v200;
              BOOL v110 = WORD1(v200) <= v85 && WORD1(v200) + 1 >= v85 || v85 <= WORD1(v200) && v188 >= WORD1(v200);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232DC18);
              }
              int v112 = v108 && v110;
              LODWORD(v95) = v95 + 1;
              long long v113 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v114 = v196;
                sub_101065BC0((uint64_t)&v200);
                uint64_t v115 = v216;
                if (v216[23] < 0) {
                  uint64_t v115 = *(unsigned char **)v216;
                }
                *(_DWORD *)std::string buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v114;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v112;
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v95;
                *(_WORD *)&buf[20] = 2080;
                *(void *)&buf[22] = v115;
                _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, entryId, %d, isIntersect, %d, examinedEntries, %d, entry, %s", buf, 0x1Eu);
                if ((v216[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v216);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10232DC18);
                }
                unsigned int v119 = v196;
                sub_101065BC0((uint64_t)&v200);
                int v120 = v214;
                if (v215 < 0) {
                  int v120 = (void **)v214[0];
                }
                *(_DWORD *)v216 = 67109890;
                *(_DWORD *)&v216[4] = v119;
                *(_WORD *)&v216[8] = 1024;
                *(_DWORD *)&v216[10] = v112;
                *(_WORD *)&v216[14] = 1024;
                *(_DWORD *)&v216[16] = v95;
                *(_WORD *)&v216[20] = 2080;
                *(void *)&v216[22] = v120;
                int v121 = (char *)_os_log_send_and_compose_impl();
                if (v215 < 0) {
                  operator delete(v214[0]);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v121);
                if (v121 != buf) {
                  free(v121);
                }
              }
              if (v112)
              {
                uint64_t v116 = operator new(0x20uLL);
                uint64_t v117 = v200;
                v116[6] = v201;
                uint64_t v118 = *a8;
                *((void *)v116 + 1) = a8;
                *((void *)v116 + 2) = v117;
                *(void *)uint64_t v116 = v118;
                *(void *)(v118 + _Block_object_dispose(&STACK[0x310], 8) = v116;
                *a8 = (uint64_t)v116;
                ++a8[2];
                sub_10116FCA8(&v197, &v196, &v196);
              }
              unsigned int v94 = v196;
            }
          }
          ++v100;
        }
        while (v96 >= (unsigned __int16)v200);
        ++v96;
      }
      uint64_t v123 = *(void *)v186;
      uint64_t v32 = v168;
      int v70 = v167;
    }
    else
    {
      if (v195)
      {
        uint64_t v123 = *(void *)v186;
        if (DWORD2(v205))
        {
          unint64_t v95 = 0;
          int v124 = v88 + v84;
          do
          {
            sub_101044DBC((unsigned __int16 *)(v195 + v95 * HIDWORD(v205)), (uint64_t)&v200);
            BOOL v126 = v84 <= (unsigned __int16)v200 && v124 >= (unsigned __int16)v200;
            int v128 = (unsigned __int16)v200 <= v84 && (unsigned __int16)v200 + 1 >= v84 || v126;
            BOOL v130 = v85 <= WORD1(v200) && v89 + v85 >= WORD1(v200);
            int v132 = WORD1(v200) <= v85 && WORD1(v200) + 1 >= v85 || v130;
            if ((v128 & v132) == 1)
            {
              __int16 v133 = operator new(0x20uLL);
              uint64_t v134 = v200;
              v133[6] = v201;
              uint64_t v135 = *a8;
              *((void *)v133 + 1) = a8;
              *((void *)v133 + 2) = v134;
              *(void *)__int16 v133 = v135;
              *(void *)(v135 + _Block_object_dispose(&STACK[0x310], 8) = v133;
              *a8 = (uint64_t)v133;
              ++a8[2];
            }
            ++v95;
          }
          while (v95 < DWORD2(v205));
          goto LABEL_237;
        }
      }
      else
      {
        uint64_t v123 = *(void *)v186;
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232DC18);
        }
        double v136 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, int *))(**(void **)v186 + 16))(buf, *(int **)v186);
          int v137 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)v216 = 136315138;
          *(void *)&v216[4] = v137;
          _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEBUG, "TILE: getEntriesForArea, nothing to search, %s", v216, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10232DC18);
          }
          (*(void (**)(unsigned char *__return_ptr))(**(void **)v186 + 16))(v216);
          if (v216[23] >= 0) {
            v165 = v216;
          }
          else {
            v165 = *(unsigned char **)v216;
          }
          LODWORD(v214[0]) = 136315138;
          *(void **)((char *)v214 + 4) = v165;
          __int16 v166 = (char *)_os_log_send_and_compose_impl();
          if ((v216[23] & 0x80000000) != 0) {
            operator delete(*(void **)v216);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v166);
          if (v166 != buf) {
            free(v166);
          }
          LODWORD(v95) = 0;
          uint64_t v123 = *(void *)v186;
          goto LABEL_237;
        }
      }
      LODWORD(v95) = 0;
    }
LABEL_237:
    if (v171 && DWORD2(v203))
    {
      unint64_t v138 = 0;
      do
      {
        sub_101044DBC((unsigned __int16 *)(v32 + v138 * HIDWORD(v203)), (uint64_t)&v200);
        double v139 = *a2;
        double v140 = *a4;
        float v141 = *(float *)&v228[12];
        float v142 = *(float *)&v229;
        LOWORD(v200) = (int)((v139 + v140 * 0.5 - v141)
                           / (v142
                            / (double)(*(unsigned int (**)(uint64_t))(*(void *)v123 + 80))(v123)));
        double v143 = *a3;
        double v144 = *a5;
        float v145 = *(float *)&v228[16];
        float v146 = *((float *)&v229 + 1);
        WORD1(v200) = (int)((v143 + v144 * 0.5 - v145)
                          / (v146
                           / (double)(*(unsigned int (**)(uint64_t))(*(void *)v123 + 72))(v123)));
        __int16 v147 = operator new(0x20uLL);
        uint64_t v148 = v200;
        v147[6] = v201;
        uint64_t v149 = *a8;
        *((void *)v147 + 1) = a8;
        *((void *)v147 + 2) = v148;
        *(void *)__int16 v147 = v149;
        *(void *)(v149 + _Block_object_dispose(&STACK[0x310], 8) = v147;
        *a8 = (uint64_t)v147;
        ++a8[2];
        ++v138;
      }
      while (v138 < DWORD2(v203));
    }
    sub_1000F5BB0((uint64_t)&v197, v198[0]);
    goto LABEL_242;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10232DC18);
  }
  id v65 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "TILE: doesIntersectWithTile, %d, no intersection with the tile", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DC18);
    }
    *(_DWORD *)v216 = 67109120;
    *(_DWORD *)&v216[4] = 0;
    uint64_t v66 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
}

void sub_101570CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,void *a42)
{
}

uint64_t sub_101570D4C(void *a1)
{
  *a1 = off_10232DB60;
  sub_1003B2350(a1 + 44);
  sub_1003B2350(a1 + 41);

  return sub_1010456D8((uint64_t)a1);
}

uint64_t *sub_101570DAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v6 = *(void *)(a2 + 16);
    *((_DWORD *)i + 6) = *(_DWORD *)(a2 + 24);
    i[2] = v6;
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return sub_101570E04((uint64_t)a1, a1, a2, a3);
  }
  else {
    return sub_1005AED4C((uint64_t)a1, i, a1);
  }
}

uint64_t *sub_101570E04(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x20uLL);
    int v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v10 = *(void *)(a3 + 16);
    *((_DWORD *)v8 + 6) = *(_DWORD *)(a3 + 24);
    _DWORD v8[2] = v10;
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = 1;
    if (v11 != a4)
    {
      double v13 = v8;
      do
      {
        uint64_t v8 = operator new(0x20uLL);
        void *v8 = v13;
        v8[1] = 0;
        uint64_t v14 = *(void *)(v11 + 16);
        *((_DWORD *)v8 + 6) = *(_DWORD *)(v11 + 24);
        _DWORD v8[2] = v14;
        v13[1] = v8;
        ++v12;
        uint64_t v11 = *(void *)(v11 + 8);
        double v13 = v8;
      }
      while (v11 != a4);
    }
    uint64_t v15 = *a2;
    *(void *)(v15 + _Block_object_dispose(&STACK[0x310], 8) = v9;
    void *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_101570EE8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_101570F08(_Unwind_Exception *a1)
{
}

void sub_101570F1C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_101570F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x310], 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_101570FD0((uint64_t **)a1, v4, (unsigned __int16 *)(v6 + 16), v6 + 16);
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_101570FB8(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_101570FD0(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v6 = sub_101571060(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 25) = *(void *)a4;
    *(_DWORD *)(v7 + 33) = *(_DWORD *)(a4 + 8);
    sub_1000EDF90(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_101571060(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_5;
  }
  unsigned int v5 = *a5;
  unsigned int v6 = *(unsigned __int16 *)((char *)a2 + 25);
  unsigned int v7 = a5[1];
  unsigned int v8 = *(unsigned __int16 *)((char *)a2 + 27);
  BOOL v9 = v7 < v8;
  if (v5 != v6) {
    BOOL v9 = v5 < v6;
  }
  if (v9)
  {
LABEL_5:
    uint64_t v10 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v12 = a2;
LABEL_24:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      uint64_t v11 = (uint64_t *)*a2;
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      double v17 = a2;
      do
      {
        uint64_t v12 = (uint64_t *)v17[2];
        BOOL v18 = *v12 == (void)v17;
        double v17 = v12;
      }
      while (v18);
    }
    unsigned int v19 = *(unsigned __int16 *)((char *)v12 + 25);
    unsigned int v20 = *a5;
    BOOL v18 = v19 == v20;
    BOOL v21 = v19 < v20;
    if (v18) {
      BOOL v21 = *(unsigned __int16 *)((char *)v12 + 27) < a5[1];
    }
    if (v21) {
      goto LABEL_24;
    }
    return sub_1015711E0((uint64_t)a1, a3, a5);
  }
  BOOL v13 = v8 < v7;
  if (v5 == v6) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = v6 < v5;
  }
  if (v14)
  {
    uint64_t v15 = a2[1];
    if (v15)
    {
      uint64_t v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        uint64_t v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      double v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        BOOL v18 = *a4 == v22;
        double v22 = (uint64_t *)a4;
      }
      while (!v18);
    }
    if (a4 == a1 + 1) {
      goto LABEL_35;
    }
    unsigned int v23 = *(unsigned __int16 *)((char *)a4 + 25);
    BOOL v24 = v7 < *(unsigned __int16 *)((char *)a4 + 27);
    BOOL v18 = v5 == v23;
    BOOL v25 = v5 < v23;
    if (v18) {
      BOOL v25 = v24;
    }
    if (v25)
    {
LABEL_35:
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_1015711E0((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_1015711E0(uint64_t a1, void *a2, unsigned __int16 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    do
    {
      while (1)
      {
        unsigned int v8 = v4;
        unsigned int v9 = *(unsigned __int16 *)((char *)v4 + 25);
        unsigned int v10 = *(unsigned __int16 *)((char *)v8 + 27);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v8;
        double result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      double result = v8 + 1;
      unint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

uint64_t sub_101571264(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  uint64_t v7 = v2;
  do
  {
    unsigned int v8 = *(unsigned __int16 *)(v3 + 25);
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = *(unsigned __int16 *)(v3 + 27) < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      BOOL v11 = (uint64_t *)(v3 + 8);
    }
    else {
      BOOL v11 = (uint64_t *)v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v12 = *(unsigned __int16 *)(v7 + 25);
  BOOL v13 = v6 < *(unsigned __int16 *)(v7 + 27);
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

uint64_t sub_1015712E4()
{
  sub_10010F274((uint64_t)v2);
  sub_100132EFC(v3, (uint64_t)"entriesOffset, ", 15);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v2
  v3[0] = v0;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101571468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10157147C()
{
}

void sub_1015714D0()
{
}

void *sub_1015714F4(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = *a2;
  uint64_t v5 = a2[1];
  a1[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  a1[2] = *a3;
  uint64_t v6 = a3[1];
  a1[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  a1[4] = *a4;
  uint64_t v7 = a4[1];
  a1[5] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232DC38);
  }
  unsigned int v8 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[Phone side] Setting up CMMobilityCalibrationManager", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232DC38);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMMobilityCal::CMMobilityCalibrationManager::CMMobilityCalibrationManager(std::shared_ptr<CLMobility::BoutMetricsDelegate>, std::shared_ptr<CLMobility::GaitMetricsDelegate>, std::shared_ptr<CLMobility::PedometerDelegate>)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return a1;
}

void sub_1015716EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  char v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

NSData *sub_101571724(uint64_t a1, void *a2)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232DC38);
  }
  uint64_t v3 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v1_Block_object_dispose(&STACK[0x310], 8) = [a2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CMMobilityCalibrationManager: Attempt to serialize array of %d entries.", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232DC38);
    }
    int v15 = 67109120;
    LODWORD(v16) = [a2 count];
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v14 = 0;
  char v4 = +[NSKeyedArchiver archivedDataWithRootObject:a2 requiringSecureCoding:1 error:&v14];
  if (v14)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232DC38);
    }
    uint64_t v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Error serializing the message: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232DC38);
      }
      int v15 = 138412290;
      uint64_t v16 = v14;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v6 = v4;
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232DC38);
    }
    uint64_t v7 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = [(NSData *)v6 length];
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v1_Block_object_dispose(&STACK[0x310], 8) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CMMobilityCalibrationManager: Serialization complete, message size: %d bytes.", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232DC38);
      }
      unsigned int v12 = [(NSData *)v6 length];
      int v15 = 67109120;
      LODWORD(v16) = v12;
      BOOL v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CMMobilityCal::CMMobilityCalibrationManager::serializeMessage(NSMutableArray *) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v6;
}

NSData *sub_101571BB0(uint64_t *a1, double a2, double a3)
{
  id v6 = +[NSMutableArray array];
  if (sub_101571C40(a1, v6, a2, a3) != 100) {
    return 0;
  }
  id v7 = [v6 count];
  if (!v7) {
    return 0;
  }

  return sub_101571724((uint64_t)v7, v6);
}

uint64_t sub_101571C40(uint64_t *a1, void *a2, double a3, double a4)
{
  uint64_t v19 = 0;
  std::string __p = 0;
  unsigned int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unsigned int v17 = sub_101571E78(a1, &__p, &v19, a3, a4);
  if (v17 == 100)
  {
    id v8 = +[NSMutableArray array];
    if (v20 != v19)
    {
      BOOL v9 = v8;
      unint64_t v10 = 0;
      do
      {
        [v9 removeAllObjects];
        BOOL v11 = [CLMobilityCalBoutMetrics alloc];
        unsigned int v12 = [(CLMobilityCalBoutMetrics *)v11 initWithBoutMetrics:(char *)__p + 224 * v10];
        BOOL v13 = (uint64_t *)(v19 + 24 * v10);
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        while (v15 != v14)
        {
          [v9 addObject:[[CLMobilityCalGaitMetrics alloc] initWithGaitMetrics:v15]];
          v15 += 96;
        }
        v26[1] = @"GaitMetrics";
        v27[0] = v12;
        v26[0] = @"BoutMetrics";
        v27[1] = +[NSArray arrayWithArray:v9];
        [a2 addObject:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 2)];
        ++v10;
      }
      while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
    }
  }
  BOOL v25 = (void **)&v19;
  sub_1001DCABC(&v25);
  if (__p)
  {
    unsigned int v23 = __p;
    operator delete(__p);
  }
  return v17;
}

void sub_101571E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17)
{
  a17 = &a11;
  sub_1001DCABC((void ***)&a17);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101571E78(uint64_t *a1, void **a2, uint64_t *a3, double a4, double a5)
{
  int v89 = 0;
  unsigned int v90 = 0;
  uint64_t v91 = 0;
  unint64_t v10 = (std::__shared_weak_count *)a1[1];
  if (!v10 || v10->__shared_owners_ < 0)
  {
    BOOL v11 = 0;
    goto LABEL_6;
  }
  BOOL v11 = std::__shared_weak_count::lock(v10);
  if (!v11)
  {
LABEL_6:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  uint64_t v12 = *a1;
LABEL_7:
  BOOL v13 = (std::__shared_weak_count *)a1[3];
  if (!v13 || v13->__shared_owners_ < 0)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    if (v12) {
      goto LABEL_13;
    }
    goto LABEL_76;
  }
  uint64_t v14 = std::__shared_weak_count::lock(v13);
  if (!v14)
  {
    uint64_t v15 = 0;
    if (v12) {
      goto LABEL_13;
    }
LABEL_76:
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232DC38);
    }
    int v69 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Unable to reference bout metrics DB. Abort query.", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232DC38);
      }
      LOWORD(v92) = 0;
      unsigned int v81 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v81);
      if (v81 != (char *)&__p) {
        free(v81);
      }
    }
    goto LABEL_81;
  }
  uint64_t v15 = a1[2];
  if (!v12) {
    goto LABEL_76;
  }
LABEL_13:
  if (v15)
  {
    if ((*(uint64_t (**)(uint64_t, void, void **, double, double))(*(void *)v12 + 24))(v12, 0, &v89, a4, a5))
    {
      a2[1] = *a2;
      sub_1001DCB10(a3);
      sub_101572E44(a2, 0x1EuLL);
      sub_101572F58(a3, 0x1EuLL);
      int v88 = v11;
      uint64_t v19 = (__n128 *)v89;
      uint64_t v18 = v90;
      if (v89 == v90)
      {
        unsigned int v20 = 0;
        goto LABEL_101;
      }
      unsigned int v20 = 0;
      while ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5)) < 0x1E)
      {
        if (v20 >= 0x5DC)
        {
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_10232DC38);
          }
          float v72 = qword_102419038;
          if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(__p) = 0;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CMMobilityCalibrationManager: Max allowed number of gait metrics collected - terminate collection.", (uint8_t *)&__p, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_101;
          }
          bzero(&__p, 0x65CuLL);
          if (qword_102419030 == -1)
          {
LABEL_139:
            LOWORD(v92) = 0;
            int v87 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v87);
            if (v87 != (char *)&__p) {
              free(v87);
            }
            goto LABEL_101;
          }
LABEL_142:
          dispatch_once(&qword_102419030, &stru_10232DC38);
          goto LABEL_139;
        }
        v16.n128_u64[0] = v19->n128_u64[1];
        v17.n128_u64[0] = v19[1].n128_u64[0];
        if (v17.n128_f64[0] - v16.n128_f64[0] >= 20.0 && v17.n128_f64[0] - v16.n128_f64[0] <= 360.0)
        {
          uint64_t v21 = a3[1];
          if (v21 == *a3 || *(void *)(v21 - 16) != *(void *)(v21 - 24))
          {
            std::string __p = 0;
            double v99 = 0;
            uint64_t v100 = 0;
            sub_10157300C(a3, (uint64_t)&__p);
            if (__p)
            {
              double v99 = __p;
              operator delete(__p);
            }
            v16.n128_u64[0] = v19->n128_u64[1];
            v17.n128_u64[0] = v19[1].n128_u64[0];
            uint64_t v21 = a3[1];
          }
          int v22 = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(*(void *)v15 + 24))(v15, v21 - 24, v16, v17);
          if (v22 == 100)
          {
            uint64_t v24 = a3[1];
            unint64_t v25 = *(void *)(v24 - 24);
            BOOL v26 = *(_OWORD **)(v24 - 16);
            if (v26 != (_OWORD *)v25)
            {
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v26 - v25) >> 5);
              sub_1015732D0(v25, v26, 126 - 2 * __clz(v27), 1);
              double v28 = (__n128 *)a2[1];
              unint64_t v29 = (unint64_t)a2[2];
              if ((unint64_t)v28 >= v29)
              {
                uint64_t v39 = 0x6DB6DB6DB6DB6DB7 * (((char *)v28 - (unsigned char *)*a2) >> 5);
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) > 0x124924924924924) {
                  sub_1001D7FD4();
                }
                unint64_t v41 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v29 - (void)*a2) >> 5);
                if (2 * v41 > v40) {
                  unint64_t v40 = 2 * v41;
                }
                if (v41 >= 0x92492492492492) {
                  unint64_t v42 = 0x124924924924924;
                }
                else {
                  unint64_t v42 = v40;
                }
                if (v42) {
                  float v43 = (char *)sub_1001F0E60((uint64_t)(a2 + 2), v42);
                }
                else {
                  float v43 = 0;
                }
                unint64_t v44 = (__n128 *)&v43[224 * v39];
                __n128 v45 = v19[1];
                *unint64_t v44 = *v19;
                v44[1] = v45;
                __n128 v46 = v19[2];
                __n128 v47 = v19[3];
                __n128 v48 = v19[5];
                v44[4] = v19[4];
                v44[5] = v48;
                v44[2] = v46;
                v44[3] = v47;
                __n128 v49 = v19[6];
                __n128 v50 = v19[7];
                __n128 v51 = v19[9];
                v44[8] = v19[8];
                v44[9] = v51;
                v44[6] = v49;
                v44[7] = v50;
                __n128 v16 = v19[10];
                __n128 v17 = v19[11];
                __n128 v52 = v19[13];
                v44[12] = v19[12];
                v44[13] = v52;
                v44[10] = v16;
                v44[11] = v17;
                uint64_t v54 = (char *)*a2;
                unint64_t v53 = (char *)a2[1];
                int v55 = v44;
                if (v53 != *a2)
                {
                  do
                  {
                    __n128 v56 = *((__n128 *)v53 - 13);
                    v55[-14] = *((__n128 *)v53 - 14);
                    v55[-13] = v56;
                    __n128 v57 = *((__n128 *)v53 - 12);
                    __n128 v58 = *((__n128 *)v53 - 11);
                    __n128 v59 = *((__n128 *)v53 - 9);
                    v55[-10] = *((__n128 *)v53 - 10);
                    v55[-9] = v59;
                    v55[-12] = v57;
                    v55[-11] = v58;
                    __n128 v60 = *((__n128 *)v53 - 8);
                    __n128 v61 = *((__n128 *)v53 - 7);
                    __n128 v62 = *((__n128 *)v53 - 5);
                    v55[-6] = *((__n128 *)v53 - 6);
                    v55[-5] = v62;
                    v55[-8] = v60;
                    v55[-7] = v61;
                    __n128 v16 = *((__n128 *)v53 - 4);
                    __n128 v17 = *((__n128 *)v53 - 3);
                    __n128 v63 = *((__n128 *)v53 - 2);
                    *(__n128 *)((char *)v55 - 19) = *(__n128 *)(v53 - 19);
                    v55[-3] = v17;
                    v55[-2] = v63;
                    v55[-4] = v16;
                    v55 -= 14;
                    v53 -= 224;
                  }
                  while (v53 != v54);
                  unint64_t v53 = (char *)*a2;
                }
                int v38 = v44 + 14;
                *a2 = v55;
                a2[1] = &v44[14];
                a2[2] = &v43[224 * v42];
                if (v53) {
                  operator delete(v53);
                }
              }
              else
              {
                __n128 v30 = v19[1];
                __n128 *v28 = *v19;
                v28[1] = v30;
                __n128 v31 = v19[2];
                __n128 v32 = v19[3];
                __n128 v33 = v19[5];
                v28[4] = v19[4];
                v28[5] = v33;
                v28[2] = v31;
                v28[3] = v32;
                __n128 v34 = v19[6];
                __n128 v35 = v19[7];
                __n128 v36 = v19[9];
                unsigned __int8 v28[8] = v19[8];
                v28[9] = v36;
                v28[6] = v34;
                v28[7] = v35;
                __n128 v16 = v19[10];
                __n128 v17 = v19[11];
                __n128 v37 = v19[13];
                unsigned char v28[12] = v19[12];
                v28[13] = v37;
                v28[10] = v16;
                v28[11] = v17;
                int v38 = v28 + 14;
              }
              v20 += v27;
              a2[1] = v38;
            }
          }
          else
          {
            if (v22 == 109)
            {
              if (qword_102419030 != -1) {
                dispatch_once(&qword_102419030, &stru_10232DC38);
              }
              unsigned int v23 = qword_102419038;
              if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(__p) = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CMMobilityCalibrationManager: Defering bout processing. Gait Metrics unavailable, likely because device is locked.", (uint8_t *)&__p, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(&__p, 0x65CuLL);
                if (qword_102419030 != -1) {
                  dispatch_once(&qword_102419030, &stru_10232DC38);
                }
                LOWORD(v92) = 0;
                uint64_t v64 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v64);
                if (v64 != (char *)&__p) {
                  free(v64);
                }
              }
            }
            *(void *)(a3[1] - 16) = *(void *)(a3[1] - 24);
          }
        }
        v19 += 14;
        if (v19 == v18) {
          goto LABEL_101;
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232DC38);
      }
      uint64_t v71 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CMMobilityCalibrationManager: Max allowed number of bouts collected - terminate collection.", (uint8_t *)&__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_102419030 == -1) {
          goto LABEL_139;
        }
        goto LABEL_142;
      }
LABEL_101:
      uint64_t v73 = a3[1];
      if (v73 != *a3)
      {
        unsigned int v75 = *(void **)(v73 - 24);
        uint64_t v74 = *(void **)(v73 - 16);
        uint64_t v76 = v73 - 24;
        if (v74 == v75)
        {
          if (v74) {
            operator delete(v74);
          }
          a3[1] = v76;
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232DC38);
      }
      float v77 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        int v78 = -1227133513 * ((unint64_t)((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5);
        int v79 = 1227133513 * ((unint64_t)((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v20;
        LOWORD(v99) = 1024;
        *(_DWORD *)((char *)&v99 + 2) = v78;
        HIWORD(v99) = 1024;
        LODWORD(v100) = v79 - 1227133513 * ((unint64_t)((char *)v90 - (unsigned char *)v89) >> 5);
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "CMMobilityCalibrationManager: Queried %d gait metrics within %d walk bouts. %d bouts dropped.", (uint8_t *)&__p, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232DC38);
        }
        int v83 = -1227133513 * ((unint64_t)((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5);
        int v84 = 1227133513 * ((unint64_t)((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5);
        int v92 = 67109632;
        unsigned int v93 = v20;
        __int16 v94 = 1024;
        int v95 = v83;
        __int16 v96 = 1024;
        int v97 = v84 - 1227133513 * ((unint64_t)((char *)v90 - (unsigned char *)v89) >> 5);
        int v85 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v85);
        if (v85 != (char *)&__p) {
          free(v85);
        }
      }
      if (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5) == 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3))
      {
        uint64_t v67 = 100;
      }
      else
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232DC38);
        }
        float v80 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Expect number of gait vectors == number of bouts. Something went wrong unexpectedly.", (uint8_t *)&__p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_10232DC38);
          }
          LOWORD(v92) = 0;
          int v86 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v86);
          if (v86 != (char *)&__p) {
            free(v86);
          }
        }
        uint64_t v67 = 103;
      }
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232DC38);
      }
      uint64_t v68 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Error querying bout metrics.", (uint8_t *)&__p, 2u);
      }
      if (!sub_10013D1A0(115, 0))
      {
        uint64_t v67 = 108;
        if (!v14) {
          goto LABEL_83;
        }
LABEL_82:
        sub_1000DB0A0(v14);
        goto LABEL_83;
      }
      int v88 = v11;
      bzero(&__p, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232DC38);
      }
      LOWORD(v92) = 0;
      float v82 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v82);
      if (v82 != (char *)&__p) {
        free(v82);
      }
      uint64_t v67 = 108;
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232DC38);
    }
    id v65 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "CMMobilityCalibrationManager: Unable to reference gait metrics DB. Abort query.", (uint8_t *)&__p, 2u);
    }
    if (!sub_10013D1A0(115, 0))
    {
LABEL_81:
      uint64_t v67 = 112;
      if (!v14) {
        goto LABEL_83;
      }
      goto LABEL_82;
    }
    int v88 = v11;
    bzero(&__p, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232DC38);
    }
    LOWORD(v92) = 0;
    uint64_t v66 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const", "%s\n", v66);
    if (v66 != (char *)&__p) {
      free(v66);
    }
    uint64_t v67 = 112;
  }
  BOOL v11 = v88;
  if (v14) {
    goto LABEL_82;
  }
LABEL_83:
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v89)
  {
    unsigned int v90 = (__n128 *)v89;
    operator delete(v89);
  }
  return v67;
}

void sub_101572DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101572E44(void **a1, unint64_t a2)
{
  char v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x124924924924925) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    id v6 = (char *)sub_1001F0E60(v3, a2);
    id v7 = &v6[v5];
    BOOL v9 = &v6[224 * v8];
    BOOL v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 13);
        *((_OWORD *)v12 - 14) = *((_OWORD *)v10 - 14);
        *((_OWORD *)v12 - 13) = v13;
        long long v14 = *((_OWORD *)v10 - 12);
        long long v15 = *((_OWORD *)v10 - 11);
        long long v16 = *((_OWORD *)v10 - 9);
        *((_OWORD *)v12 - 10) = *((_OWORD *)v10 - 10);
        *((_OWORD *)v12 - 9) = v16;
        *((_OWORD *)v12 - 12) = v14;
        *((_OWORD *)v12 - 11) = v15;
        long long v17 = *((_OWORD *)v10 - 8);
        long long v18 = *((_OWORD *)v10 - 7);
        long long v19 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v19;
        *((_OWORD *)v12 - _Block_object_dispose(&STACK[0x310], 8) = v17;
        *((_OWORD *)v12 - 7) = v18;
        long long v20 = *((_OWORD *)v10 - 4);
        long long v21 = *((_OWORD *)v10 - 3);
        long long v22 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 19) = *(_OWORD *)(v10 - 19);
        *((_OWORD *)v12 - 3) = v21;
        *((_OWORD *)v12 - 2) = v22;
        *((_OWORD *)v12 - 4) = v20;
        v12 -= 224;
        v10 -= 224;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_101572F58(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_1000DA5D8(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    sub_10157317C(a1, v7);
    return sub_1001DD2D0((uint64_t)v7);
  }
  return result;
}

void sub_101572FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001DD2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10157300C(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    long long v13 = (char *)sub_1000DA5D8(result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    uint64_t v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_10157317C(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = sub_1001DD2D0((uint64_t)v16);
  }
  else
  {
    *id v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)id v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x310], 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_101573138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001DD2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10157314C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10157317C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1015731F4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1015731F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  _OWORD v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x310], 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&STACK[0x310], 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_101573298((uint64_t)v11);
  return v9;
}

uint64_t sub_101573298(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DD288(a1);
  }
  return a1;
}

void sub_1015732D0(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{