void sub_100C19038(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  operator delete();
}

void sub_100C190E4(unsigned __int8 *a1, uint64_t a2)
{
}

void sub_100C190F4(id a1, unint64_t a2, unint64_t a3)
{
  sub_10170140C(v6);
  sub_101725358((uint64_t)v6);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v8 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  uint64_t v5 = v7;
  *(unsigned char *)(v7 + 16) |= 1u;
  *(void *)(v5 + 8) = a2;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v6);
  }
  sub_101706914((PB::Base *)v6);
}

void sub_100C191A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C191B8(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v7 = [[-[BPSCompletion error](a2, "error") description] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Unregistering for focus modes user activity with an error: %s\n", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    [objc_msgSend(-[BPSCompletion error](a2, "error"), "description") UTF8String];
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v4);
    if (v4 == (char *)buf) {
      return;
    }
LABEL_20:
    free(v4);
    return;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Unregistering for focus modes user activity", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      goto LABEL_20;
    }
  }
}

void sub_100C194B0(id a1, BMStoreEvent *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  v3 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [[-[BMStoreEvent eventBody](a2, "eventBody") mode] UTF8String];
    id v5 = [[-[BMStoreEvent eventBody](a2, "eventBody") semanticModeIdentifier] UTF8String];
    id v6 = [[-[BMStoreEvent eventBody](a2, "eventBody") modeUpdateReason];
    id v7 = [[-[BMStoreEvent eventBody](a2, "eventBody") modeSemanticType];
    id v8 = [[-[BMStoreEvent eventBody](a2, "eventBody") modeUpdateSource];
    if (objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "isStarting")) {
      v9 = "1";
    }
    else {
      v9 = "0";
    }
    [(BMStoreEvent *)a2 timestamp];
    *(_DWORD *)buf = 136316674;
    id v37 = v4;
    __int16 v38 = 2080;
    id v39 = v5;
    __int16 v40 = 2048;
    id v41 = v6;
    __int16 v42 = 2048;
    id v43 = v7;
    __int16 v44 = 2048;
    id v45 = v8;
    __int16 v46 = 2080;
    v47 = v9;
    __int16 v48 = 2048;
    uint64_t v49 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Focus Mode] mode: %s | semanticModeIdentifier: %s | modeUpdateReason: %llu | modeSemanticType: %lld | modeUpdateSource: %lld | starting: %s | timestamp: %f", buf, 0x48u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    id v27 = [[-[BMStoreEvent eventBody](a2, "eventBody") mode] UTF8String];
    id v28 = [[-[BMStoreEvent eventBody](a2, "eventBody") semanticModeIdentifier] UTF8String];
    id v29 = [[-[BMStoreEvent eventBody](a2, "eventBody") modeUpdateReason];
    id v30 = [[-[BMStoreEvent eventBody](a2, "eventBody") modeSemanticType];
    id v31 = [[-[BMStoreEvent eventBody](a2, "eventBody") modeUpdateSource];
    if (objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "isStarting")) {
      v32 = "1";
    }
    else {
      v32 = "0";
    }
    [(BMStoreEvent *)a2 timestamp];
    *(_DWORD *)v53 = 136316674;
    *(void *)&v53[4] = v27;
    __int16 v54 = 2080;
    id v55 = v28;
    __int16 v56 = 2048;
    id v57 = v29;
    __int16 v58 = 2048;
    id v59 = v30;
    __int16 v60 = 2048;
    id v61 = v31;
    __int16 v62 = 2080;
    v63 = v32;
    __int16 v64 = 2048;
    uint64_t v65 = v33;
    v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  if (a2 && [(BMStoreEvent *)a2 eventBody])
  {
    sub_10170140C(buf);
    sub_1017253E8((uint64_t)buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v52 |= 1u;
    CFAbsoluteTime v50 = Current;
    uint64_t v12 = v51;
    sub_100134750(v53, (char *)[-[BMStoreEvent eventBody](a2, "eventBody") mode]);
    *(void *)&double v13 = sub_100AE44AC(v12, (__n128 *)v53).n128_u64[0];
    if (SHIBYTE(v56) < 0) {
      operator delete(*(void **)v53);
    }
    uint64_t v14 = v51;
    sub_100134750(v53, (char *)[-[BMStoreEvent eventBody](a2, "eventBody", v13) semanticModeIdentifier]);
    *(void *)&double v15 = sub_100C19AF0(v14, (__n128 *)v53).n128_u64[0];
    if (SHIBYTE(v56) < 0) {
      operator delete(*(void **)v53);
    }
    uint64_t v16 = v51;
    unsigned int v17 = [[-[BMStoreEvent eventBody](a2, "eventBody", v15) modeUpdateReason];
    *(unsigned char *)(v16 + 48) |= 4u;
    *(_DWORD *)(v16 + 36) = v17;
    uint64_t v18 = v51;
    unsigned int v19 = [[-[BMStoreEvent eventBody](a2, "eventBody") modeSemanticType];
    *(unsigned char *)(v18 + 48) |= 2u;
    *(_DWORD *)(v18 + 32) = v19;
    uint64_t v20 = v51;
    unsigned int v21 = [[-[BMStoreEvent eventBody](a2) eventBody] modeUpdateSource];
    *(unsigned char *)(v20 + 48) |= 8u;
    *(_DWORD *)(v20 + 40) = v21;
    uint64_t v22 = v51;
    unsigned __int8 v23 = [[-[BMStoreEvent eventBody](a2) eventBody] isStarting];
    *(unsigned char *)(v22 + 48) |= 0x10u;
    *(unsigned char *)(v22 + 44) = v23;
    uint64_t v24 = v51;
    [(BMStoreEvent *)a2 timestamp];
    *(unsigned char *)(v24 + 48) |= 1u;
    *(void *)(v24 + 24) = v25;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v26 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Corrupted data package for focus modes user activity event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)v53 = 0;
      v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
}

void sub_100C19AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

__n128 sub_100C19AF0(uint64_t a1, __n128 *a2)
{
  sub_100C31F08(a1);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  __n128 result = *a2;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

id sub_100C19B44(id result)
{
  if (!*((void *)result + 101))
  {
    id v1 = result;
    __n128 result = (id)+[CMActivityAlarmLocal activityAlarmAvailable];
    if (result)
    {
      int v2 = *((_DWORD *)v1 + 491);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      float v3 = (float)v2;
      uint64_t v4 = qword_1024192D8;
      if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        double v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "createActivityAlarmStatic,duration,%0.3f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192D0 != -1) {
          dispatch_once(&qword_1024192D0, &stru_1022EDE18);
        }
        double v5 = v3;
        int v10 = 134217984;
        double v11 = v5;
        id v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::createActivityAlarmStatic()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      else
      {
        double v5 = v3;
      }
      id v6 = [CMActivityAlarmLocal alloc];
      id v7 = [[*((id *)v1 + 31) silo] queue];
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100C235A4;
      v9[3] = &unk_1022B7B30;
      v9[4] = v1;
      __n128 result = [(CMActivityAlarmLocal *)v6 initWithTrigger:0 duration:v7 onQueue:v9 withHandler:v5];
      *((void *)v1 + 101) = result;
    }
  }
  return result;
}

NSDictionary *__cdecl sub_100C19DA0(id a1)
{
  return (NSDictionary *)&off_1023975E0;
}

NSDictionary *__cdecl sub_100C19DAC(id a1)
{
  return (NSDictionary *)&off_102397608;
}

uint64_t sub_100C19DB8(uint64_t *a1)
{
  uint64_t v12 = off_1022E66B0;
  int v16 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v14 = *a1;
  uint64_t v15 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_101282D9C();
  sub_10128431C(v3, (uint64_t)&v12);
  sub_10170140C(v8);
  sub_101726948((uint64_t)v8);
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v4 = v9;
  uint64_t v5 = *a1;
  char v6 = *(unsigned char *)(v9 + 32);
  *(unsigned char *)(v9 + 32) = v6 | 1;
  *(void *)(v4 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(unsigned char *)(v4 + 32) = v6 | 5;
  *(_DWORD *)(v4 + 20) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(unsigned char *)(v4 + 32) = v6 | 0xD;
  *(_DWORD *)(v4 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(unsigned char *)(v4 + 32) = v6 | 0x1D;
  *(_DWORD *)(v4 + 28) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C19EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C19F00(uint64_t *a1)
{
  sub_10170140C(v9);
  sub_1017245D8((uint64_t)v9);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  sub_101651C5C(v10);
  uint64_t v3 = *(void *)(v10 + 8);
  uint64_t v4 = *a1;
  *(unsigned char *)(v3 + 32) |= 1u;
  *(void *)(v3 + 8) = v4;
  uint64_t v5 = *(void *)(v10 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 2);
  *(unsigned char *)(v5 + 32) |= 4u;
  *(_DWORD *)(v5 + 20) = v4;
  uint64_t v6 = *(void *)(v10 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 3);
  *(unsigned char *)(v6 + 32) |= 8u;
  *(_DWORD *)(v6 + 24) = v4;
  uint64_t v7 = *(void *)(v10 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  *(unsigned char *)(v7 + 32) |= 0x10u;
  *(_DWORD *)(v7 + 28) = v4;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v9);
  }
  return sub_101706914((PB::Base *)v9);
}

void sub_100C1A010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1A028(uint64_t *a1)
{
  unsigned int v19 = off_1022E6718;
  int v23 = *((_DWORD *)a1 + 4);
  v24[0] = 0;
  *(_DWORD *)((char *)v24 + 3) = 0;
  uint64_t v2 = a1[1];
  uint64_t v21 = *a1;
  uint64_t v22 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_101282D9C();
  sub_10128431C(v3, (uint64_t)&v19);
  sub_10170140C(v16);
  sub_101726A68((uint64_t)v16);
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = Current;
  uint64_t v4 = v17;
  uint64_t v5 = *a1;
  *(_WORD *)(v17 + 44) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v17;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_WORD *)(v17 + 44) |= 0x10u;
  *(_DWORD *)(v6 + 28) = v5;
  uint64_t v7 = v17;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_WORD *)(v17 + 44) |= 0x20u;
  *(_DWORD *)(v7 + 32) = v5;
  uint64_t v8 = v17;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_WORD *)(v17 + 44) |= 0x40u;
  *(_DWORD *)(v8 + 36) = v5;
  uint64_t v9 = v17;
  *(_WORD *)(v17 + 44) |= 8u;
  *(_DWORD *)(v9 + 24) = 0;
  uint64_t v10 = v17;
  int v11 = HIWORD(*(_DWORD *)(v17 + 24));
  *(_WORD *)(v17 + 44) |= 4u;
  *(_DWORD *)(v10 + 20) = (unsigned __int16)v11 % 3u;
  uint64_t v12 = v17;
  LOBYTE(v11) = *(unsigned char *)(v17 + 25) & 1;
  *(_WORD *)(v17 + 44) |= 0x80u;
  *(unsigned char *)(v12 + 40) = v11;
  uint64_t v13 = v17;
  int v14 = (*(_DWORD *)(v17 + 24) >> 9) & 1;
  *(_WORD *)(v17 + 44) |= 0x100u;
  *(unsigned char *)(v13 + 41) = v14;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v16);
  }
  return sub_101706914((PB::Base *)v16);
}

void sub_100C1A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C1A208(uint64_t a1)
{
  uint64_t v9 = off_1022E67C8;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v11 = *(_DWORD *)(a1 + 8);
  uint64_t v2 = sub_101282D9C();
  sub_10128431C(v2, (uint64_t)&v9);
  sub_10170140C(v6);
  sub_101726B88((uint64_t)v6);
  v8 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  uint64_t v3 = v7;
  int v4 = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(v7 + 16) |= 2u;
  *(_DWORD *)(v3 + 12) = v4;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v6);
  }
  return sub_101706914((PB::Base *)v6);
}

void sub_100C1A2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C1A30C(uint64_t a1)
{
  __chkstk_darwin(a1);
  if (!*v2)
  {
    int v3 = *(_DWORD *)v1;
    if (*(_DWORD *)v1)
    {
      unsigned int v5 = *((_DWORD *)v1 + 8);
      unsigned int v4 = *((_DWORD *)v1 + 9);
      int v7 = *((_DWORD *)v1 + 10);
      unsigned int v6 = *((_DWORD *)v1 + 11);
      unsigned int v9 = *((_DWORD *)v1 + 12);
      int v8 = *((_DWORD *)v1 + 13);
      if (v3 == 2)
      {
        v19[2] = HIBYTE(*((_DWORD *)v1 + 8));
        *(_WORD *)unsigned int v19 = v5 >> 8;
        *(_DWORD *)&v19[3] = v4;
        *(_DWORD *)&v19[7] = v7;
        *(_DWORD *)&v19[11] = v6;
        *(_DWORD *)&v19[15] = v9;
        v20[0] = v8;
        memcpy(&v20[1], v1 + 7, 0x103uLL);
        __src = off_1022E6DF8;
        v22[0] = CFAbsoluteTimeGetCurrent();
        uint64_t v13 = &v23;
        unint64_t v14 = 4;
        do
        {
          uint64_t v15 = &v19[v14];
          *((void *)v13 - 13) = *(void *)&v19[v14];
          *(v13 - 24) = *(_DWORD *)&v19[v14 + 8];
          *((void *)v13 - 1) = *(void *)&v19[v14 + 12];
          *uint64_t v13 = *(_DWORD *)((char *)&v20[v14 / 4] + 1);
          v13 += 3;
          v14 += 24;
        }
        while (v15 + 24 != (char *)&v20[44] + 1);
        *(_OWORD *)uint64_t v24 = *(_OWORD *)((char *)&v20[44] + 1);
        *(_OWORD *)&v24[12] = *(_OWORD *)((char *)&v20[47] + 1);
        v26[0] = *(void *)((char *)&v20[52] + 1);
        *(void *)((char *)v26 + 5) = *(void *)((char *)&v20[53] + 2);
        int v25 = *(_DWORD *)((char *)&v20[51] + 1);
        uint64_t v16 = sub_101282D9C();
        sub_10128431C(v16, (uint64_t)&__src);
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_1022EDD18);
        }
        if (qword_10248AF90) {
          sub_1012F3924((uint64_t)&__src, (uint64_t)buf);
        }
      }
      else if (v3 == 1)
      {
        double v10 = v1[1];
        *(void *)unsigned int v19 = off_1022E6820;
        *(void *)&v19[8] = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)((char *)v20 + 1) = v5;
        *(_DWORD *)((char *)&v20[1] + 1) = v4;
        *(_DWORD *)((char *)&v20[2] + 1) = v7;
        *(_DWORD *)((char *)&v20[3] + 1) = v6;
        *(_DWORD *)((char *)&v20[4] + 1) = v9;
        *(_DWORD *)((char *)&v20[5] + 1) = v8;
        *(float *)&double v10 = v10;
        *(_DWORD *)((char *)&v20[6] + 1) = LODWORD(v10);
        uint64_t v11 = sub_101282D9C();
        sub_10128431C(v11, (uint64_t)v19);
        sub_10170140C(buf);
        sub_101726CA8((uint64_t)buf);
        v30 |= 1u;
        uint64_t v28 = *(void *)&v19[8];
        __src = (uint64_t (**)())__PAIR64__(v4, v5);
        LODWORD(v22[0]) = v7;
        sub_1000FB43C(v29 + 32, (char *)&__src, (uint64_t)v22 + 4, 3uLL);
        __src = (uint64_t (**)())__PAIR64__(v9, v6);
        LODWORD(v22[0]) = v8;
        sub_1000FB43C(v29 + 8, (char *)&__src, (uint64_t)v22 + 4, 3uLL);
        uint64_t v12 = v29;
        v29[60] |= 1u;
        *((_DWORD *)v12 + 14) = LODWORD(v10);
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_1022EDD18);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)buf);
        }
        sub_101706914((PB::Base *)buf);
      }
    }
    else
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EDE78);
      }
      uint64_t v17 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Invalid gyro bias fit type", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EDE78);
        }
        *(_WORD *)unsigned int v19 = 0;
        char v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLMotionLogger::onGyroCalibrationDatabase(int, const CLGyroCalibrationDatabase_Type::Notification &, const CLGyroCalibrationDatabase_Type::NotificationData &, void *)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
  }
}

void sub_100C1A9FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100C1AA40(uint64_t *a1)
{
  unint64_t v14 = off_1022E68D0;
  int v18 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_101282D9C();
  sub_10128431C(v3, (uint64_t)&v14);
  sub_10170140C(v11);
  sub_101726DC8((uint64_t)v11);
  v13 |= 1u;
  *(CFAbsoluteTime *)&v11[77] = Current;
  uint64_t v4 = v12;
  uint64_t v5 = *a1;
  *(unsigned char *)(v12 + 36) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(unsigned char *)(v12 + 36) |= 8u;
  *(_DWORD *)(v6 + 24) = v5;
  uint64_t v7 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(unsigned char *)(v12 + 36) |= 0x10u;
  *(_DWORD *)(v7 + 28) = v5;
  uint64_t v8 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(unsigned char *)(v12 + 36) |= 0x20u;
  *(_DWORD *)(v8 + 32) = v5;
  uint64_t v9 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 5);
  *(unsigned char *)(v12 + 36) |= 4u;
  *(_DWORD *)(v9 + 20) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v11);
  }
  return sub_101706914((PB::Base *)v11);
}

void sub_100C1AB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1ABAC(uint64_t *a1)
{
  sub_10170140C(v8);
  sub_101724C98((uint64_t)v8);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v10 |= 1u;
  *(CFAbsoluteTime *)&v8[77] = Current;
  sub_101797388(v9);
  uint64_t v3 = *(void *)(v9 + 8);
  uint64_t v4 = *a1;
  *(unsigned char *)(v3 + 24) |= 1u;
  *(void *)(v3 + 8) = v4;
  uint64_t v5 = *(void *)(v9 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 2);
  *(unsigned char *)(v5 + 24) |= 2u;
  *(_DWORD *)(v5 + 16) = v4;
  uint64_t v6 = *(void *)(v9 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 3);
  *(unsigned char *)(v6 + 24) |= 4u;
  *(_DWORD *)(v6 + 20) = v4;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C1ACA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1ACB8(uint64_t *a1, uint64_t a2)
{
  __int16 v48 = off_1022E6B38;
  int8x16_t v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 1)), *(float64x2_t *)(a1 + 3));
  int8x16_t v5 = vextq_s8(v4, v4, 4uLL);
  long long v6 = *(_OWORD *)(a1 + 5);
  int8x16_t v51 = v5;
  long long v52 = v6;
  long long v53 = *(_OWORD *)(a1 + 7);
  int v54 = *((_DWORD *)a1 + 18);
  char v55 = *((_DWORD *)a1 + 19);
  float v7 = *((float *)a1 + 21);
  float v56 = v7;
  int v58 = *((_DWORD *)a1 + 24);
  float v57 = -1.0;
  if (v7 >= 0.0)
  {
    double v8 = 0.0;
    if (*(double *)(a2 + 784) >= 0.0) {
      double v8 = *(double *)(a2 + 768);
    }
    float v9 = sub_1004BB1CC(v7, v8);
    float v57 = v9;
  }
  __int16 v62 = *((_WORD *)a1 + 55);
  int v10 = *((_DWORD *)a1 + 26);
  int v60 = *((unsigned __int8 *)a1 + 108);
  int v61 = v10;
  int v59 = *(_DWORD *)(a2 + 1712);
  uint64_t v50 = *a1;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v11 = sub_101282D9C();
  sub_10128431C(v11, (uint64_t)&v48);
  sub_10170140C(v45);
  sub_101727128((uint64_t)v45);
  v47 |= 1u;
  *(CFAbsoluteTime *)&v45[77] = Current;
  uint64_t v12 = v46;
  uint64_t v13 = *a1;
  *(_DWORD *)(v46 + 124) |= 0x10u;
  *(void *)(v12 + 40) = v13;
  uint64_t v14 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 2);
  *(_DWORD *)(v46 + 124) |= 2u;
  *(double *)(v14 + 16) = *(float *)&v13;
  uint64_t v15 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 3);
  *(_DWORD *)(v46 + 124) |= 4u;
  *(double *)(v15 + 24) = *(float *)&v13;
  uint64_t v16 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 4);
  *(_DWORD *)(v46 + 124) |= 8u;
  *(double *)(v16 + 32) = *(float *)&v13;
  uint64_t v17 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 1);
  *(_DWORD *)(v46 + 124) |= 1u;
  *(double *)(v17 + 8) = *(float *)&v13;
  uint64_t v18 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 10);
  *(_DWORD *)(v46 + 124) |= 0x40000u;
  *(_DWORD *)(v18 + 100) = v13;
  uint64_t v19 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 11);
  *(_DWORD *)(v46 + 124) |= 0x80000u;
  *(_DWORD *)(v19 + 104) = v13;
  uint64_t v20 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v46 + 124) |= 0x100000u;
  *(_DWORD *)(v20 + 108) = v13;
  uint64_t v21 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 13);
  *(_DWORD *)(v46 + 124) |= 0x2000u;
  *(_DWORD *)(v21 + 80) = v13;
  uint64_t v22 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 14);
  *(_DWORD *)(v46 + 124) |= 0x4000u;
  *(_DWORD *)(v22 + 84) = v13;
  uint64_t v23 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 15);
  *(_DWORD *)(v46 + 124) |= 0x8000u;
  *(_DWORD *)(v23 + 88) = v13;
  uint64_t v24 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 16);
  *(_DWORD *)(v46 + 124) |= 0x100u;
  *(_DWORD *)(v24 + 60) = v13;
  uint64_t v25 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 17);
  *(_DWORD *)(v46 + 124) |= 0x200u;
  *(_DWORD *)(v25 + 64) = v13;
  uint64_t v26 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 18);
  *(_DWORD *)(v46 + 124) |= 0x400u;
  *(_DWORD *)(v26 + 68) = v13;
  uint64_t v27 = v46;
  int v28 = *((_DWORD *)a1 + 19);
  *(_DWORD *)(v46 + 124) |= 0x80u;
  *(_DWORD *)(v27 + 56) = v28;
  uint64_t v29 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 21);
  *(_DWORD *)(v46 + 124) |= 0x800u;
  *(_DWORD *)(v29 + 72) = v13;
  uint64_t v30 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 24);
  *(_DWORD *)(v46 + 124) |= 0x20u;
  *(_DWORD *)(v30 + 48) = v13;
  uint64_t v31 = v46;
  *(_DWORD *)(v46 + 124) |= 0x20000u;
  *(_DWORD *)(v31 + 96) = -1082130432;
  if (*((float *)a1 + 21) >= 0.0)
  {
    double v32 = 0.0;
    if (*(double *)(a2 + 784) >= 0.0) {
      double v32 = *(double *)(a2 + 768);
    }
    uint64_t v33 = v46;
    float v34 = sub_1004BB1CC(v56, v32);
    *(_DWORD *)(v33 + 124) |= 0x20000u;
    *(float *)(v33 + 96) = v34;
  }
  uint64_t v35 = v46;
  int v36 = *((unsigned __int8 *)a1 + 108);
  *(_DWORD *)(v46 + 124) |= 0x1000u;
  *(_DWORD *)(v35 + 76) = v36;
  uint64_t v37 = v46;
  int v38 = *((_DWORD *)a1 + 26);
  *(_DWORD *)(v46 + 124) |= 0x40u;
  *(_DWORD *)(v37 + 52) = v38;
  uint64_t v39 = v46;
  int v40 = *((unsigned __int16 *)a1 + 55);
  *(_DWORD *)(v46 + 124) |= 0x10000u;
  *(_DWORD *)(v39 + 92) = v40;
  uint64_t v41 = v46;
  int v42 = *(_DWORD *)(a2 + 1712);
  *(_DWORD *)(v46 + 124) |= 0x200000u;
  *(_DWORD *)(v41 + 112) = v42;
  uint64_t v43 = v46;
  *(_DWORD *)(v46 + 124) |= 0x800000u;
  *(unsigned char *)(v43 + 120) = 1;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v45);
  }
  return sub_101706914((PB::Base *)v45);
}

void sub_100C1B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C1B0D4(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    int8x16_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100C243D8(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1B288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C1B2A8(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  unsigned int v3 = *(_DWORD *)(v1 + 25);
  unsigned int v4 = *(_DWORD *)(v1 + 29);
  int v5 = *(_DWORD *)(v1 + 33);
  __int16 v62 = off_1022E6820;
  uint64_t v65 = 0;
  int v64 = 0;
  unsigned int v66 = v3;
  unsigned int v67 = v4;
  int v68 = v5;
  int v69 = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v6 = sub_101282D9C();
  sub_10128431C(v6, (uint64_t)&v62);
  sub_10170140C(v59);
  sub_101726CA8((uint64_t)v59);
  v61 |= 1u;
  *(CFAbsoluteTime *)&v59[77] = Current;
  unint64_t __src = 0;
  int v71 = 0;
  sub_1000FB43C(v60 + 32, (char *)&__src, (uint64_t)v72, 3uLL);
  unint64_t __src = __PAIR64__(v4, v3);
  int v71 = v5;
  sub_1000FB43C(v60 + 8, (char *)&__src, (uint64_t)v72, 3uLL);
  float v7 = v60;
  v60[60] |= 1u;
  *((_DWORD *)v7 + 14) = 0;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v59);
  }
  float v8 = *(float *)(v2 + 37);
  float v9 = *(float *)(v2 + 53);
  float v10 = *(float *)(v2 + 69);
  float v11 = *(float *)(v2 + 81);
  int v12 = *(unsigned __int8 *)(v2 + 126);
  int v13 = *(_DWORD *)(v2 + 85);
  int v14 = *(_DWORD *)(v2 + 97);
  float v15 = *(float *)(v2 + 105);
  int v16 = *(_DWORD *)(v2 + 93);
  float v17 = (float)-*(float *)(v2 + 73) / v8;
  float v18 = (float)-*(float *)(v2 + 77) / v9;
  __int16 v44 = off_1022E6980;
  float v46 = v17;
  float v47 = v18;
  float v19 = (float)-v11 / v10;
  float v48 = v19;
  float v49 = v8;
  float v50 = v9;
  float v51 = v10;
  int v52 = v13;
  int v53 = v14;
  int v42 = v14;
  int v43 = v16;
  if (v12 == 2) {
    float v20 = 0.0;
  }
  else {
    float v20 = v15;
  }
  float v54 = v20;
  int v55 = v16;
  uint64_t v56 = 0;
  int v57 = 0;
  char v58 = 5;
  CFAbsoluteTime v45 = CFAbsoluteTimeGetCurrent();
  uint64_t v21 = sub_101282D9C();
  sub_10128431C(v21, (uint64_t)&v44);
  sub_10170140C(&__src);
  sub_101726F78((uint64_t)&__src);
  HIDWORD(v22) = HIDWORD(v45);
  v74 |= 1u;
  *(CFAbsoluteTime *)&v72[604] = v45;
  uint64_t v23 = v73;
  LODWORD(v22) = *(_DWORD *)(v2 + 17);
  *(_DWORD *)(v73 + 80) |= 1u;
  *(double *)(v23 + 8) = (double)v22;
  uint64_t v24 = v73;
  *(_DWORD *)(v73 + 80) |= 2u;
  *(float *)(v24 + 16) = v17;
  uint64_t v25 = v73;
  *(_DWORD *)(v73 + 80) |= 4u;
  *(float *)(v25 + 20) = v18;
  uint64_t v26 = v73;
  *(_DWORD *)(v73 + 80) |= 8u;
  *(float *)(v26 + 24) = v19;
  uint64_t v27 = v73;
  *(_DWORD *)(v73 + 80) |= 0x2000u;
  *(float *)(v27 + 64) = v8;
  uint64_t v28 = v73;
  *(_DWORD *)(v73 + 80) |= 0x4000u;
  *(float *)(v28 + 68) = v9;
  uint64_t v29 = v73;
  *(_DWORD *)(v73 + 80) |= 0x8000u;
  *(float *)(v29 + 72) = v10;
  uint64_t v30 = v73;
  *(_DWORD *)(v73 + 80) |= 0x1000u;
  *(_DWORD *)(v30 + 60) = v13;
  uint64_t v31 = v73;
  *(_DWORD *)(v73 + 80) |= 0x20u;
  *(_DWORD *)(v31 + 32) = v42;
  uint64_t v32 = v73;
  *(_DWORD *)(v73 + 80) |= 0x40u;
  *(float *)(v32 + 36) = v20;
  uint64_t v33 = v73;
  *(_DWORD *)(v73 + 80) |= 0x80u;
  *(_DWORD *)(v33 + 40) = v43;
  uint64_t v34 = v73;
  *(_DWORD *)(v73 + 80) |= 0x200u;
  *(_DWORD *)(v34 + 48) = 0;
  uint64_t v35 = v73;
  *(_DWORD *)(v73 + 80) |= 0x400u;
  *(_DWORD *)(v35 + 52) = 0;
  uint64_t v36 = v73;
  *(_DWORD *)(v73 + 80) |= 0x800u;
  *(_DWORD *)(v36 + 56) = 0;
  uint64_t v37 = v73;
  *(_DWORD *)(v73 + 80) |= 0x10u;
  *(_DWORD *)(v37 + 28) = 5;
  uint64_t v38 = v73;
  char v39 = *(unsigned char *)(v2 + 125);
  *(_DWORD *)(v73 + 80) |= 0x20000u;
  *(unsigned char *)(v38 + 77) = v39;
  uint64_t v40 = v73;
  *(_DWORD *)(v73 + 80) |= 0x100u;
  *(_DWORD *)(v40 + 44) = 0;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)&__src);
  }
  sub_101706914((PB::Base *)&__src);
  return sub_101706914((PB::Base *)v59);
}

void sub_100C1B6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_101706914((PB::Base *)&STACK[0xEC0]);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1B724(uint64_t a1)
{
  int v12 = off_1022E66B0;
  uint64_t v2 = *(void *)(a1 + 16);
  int v16 = *(_DWORD *)(a1 + 24);
  double v14 = (double)*(unint64_t *)a1 / 1000000.0;
  uint64_t v15 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_101282D9C();
  sub_10128431C(v3, (uint64_t)&v12);
  sub_10170140C(v8);
  sub_101726948((uint64_t)v8);
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v4 = v9;
  double v5 = (double)*(unint64_t *)a1 / 1000000.0;
  char v6 = *(unsigned char *)(v9 + 32);
  *(unsigned char *)(v9 + 32) = v6 | 1;
  *(double *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v4 + 32) = v6 | 5;
  *(_DWORD *)(v4 + 20) = LODWORD(v5);
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(v4 + 32) = v6 | 0xD;
  *(_DWORD *)(v4 + 24) = LODWORD(v5);
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v4 + 32) = v6 | 0x1D;
  *(_DWORD *)(v4 + 28) = LODWORD(v5);
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C1B878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1B890(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v27 = off_1022E6718;
  uint64_t v3 = *(void *)(v1 + 20);
  int v31 = *(_DWORD *)(v1 + 28);
  v32[0] = 0;
  *(_DWORD *)((char *)v32 + 3) = 0;
  double v29 = (double)*(unint64_t *)v1 / 1000000.0;
  uint64_t v30 = v3;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v4 = sub_101282D9C();
  sub_10128431C(v4, (uint64_t)&v27);
  sub_10170140C(v24);
  sub_101726A68((uint64_t)v24);
  v26 |= 1u;
  *(CFAbsoluteTime *)&v24[77] = Current;
  uint64_t v5 = v25;
  double v6 = (double)*(unint64_t *)v2 / 1000000.0;
  *(_WORD *)(v25 + 44) |= 1u;
  *(double *)(v5 + 8) = v6;
  uint64_t v7 = v25;
  LODWORD(v6) = *(_DWORD *)(v2 + 20);
  *(_WORD *)(v25 + 44) |= 0x10u;
  *(_DWORD *)(v7 + 28) = LODWORD(v6);
  uint64_t v8 = v25;
  LODWORD(v6) = *(_DWORD *)(v2 + 24);
  *(_WORD *)(v25 + 44) |= 0x20u;
  *(_DWORD *)(v8 + 32) = LODWORD(v6);
  uint64_t v9 = v25;
  LODWORD(v6) = *(_DWORD *)(v2 + 28);
  *(_WORD *)(v25 + 44) |= 0x40u;
  *(_DWORD *)(v9 + 36) = LODWORD(v6);
  uint64_t v10 = v25;
  *(_WORD *)(v25 + 44) |= 8u;
  *(_DWORD *)(v10 + 24) = 0;
  uint64_t v11 = v25;
  *(_WORD *)(v25 + 44) |= 4u;
  *(_DWORD *)(v11 + 20) = 0;
  uint64_t v12 = v25;
  *(_WORD *)(v25 + 44) |= 0x80u;
  *(unsigned char *)(v12 + 40) = 0;
  uint64_t v13 = v25;
  *(_WORD *)(v25 + 44) |= 0x100u;
  *(unsigned char *)(v13 + 41) = 0;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v24);
  }
  uint64_t v21 = off_1022E67C8;
  CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent();
  int v23 = *(_DWORD *)(v2 + 16);
  uint64_t v14 = sub_101282D9C();
  sub_10128431C(v14, (uint64_t)&v21);
  sub_10170140C(v18);
  sub_101726B88((uint64_t)v18);
  v20 |= 1u;
  *(CFAbsoluteTime *)&v18[77] = v22;
  uint64_t v15 = v19;
  int v16 = *(_DWORD *)(v2 + 16);
  *(unsigned char *)(v19 + 16) |= 2u;
  *(_DWORD *)(v15 + 12) = v16;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v18);
  }
  sub_101706914((PB::Base *)v18);
  return sub_101706914((PB::Base *)v24);
}

void sub_100C1BB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C1BB54(uint64_t a1)
{
  uint64_t v13 = off_1022E68D0;
  uint64_t v2 = *(void *)(a1 + 16);
  int v17 = *(_DWORD *)(a1 + 24);
  double v15 = (double)*(unint64_t *)a1 / 1000000.0;
  uint64_t v16 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_101282D9C();
  sub_10128431C(v3, (uint64_t)&v13);
  sub_10170140C(v10);
  sub_101726DC8((uint64_t)v10);
  v12 |= 1u;
  *(CFAbsoluteTime *)&v10[77] = Current;
  uint64_t v4 = v11;
  double v5 = (double)*(unint64_t *)a1 / 1000000.0;
  *(unsigned char *)(v11 + 36) |= 1u;
  *(double *)(v4 + 8) = v5;
  uint64_t v6 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v11 + 36) |= 8u;
  *(_DWORD *)(v6 + 24) = LODWORD(v5);
  uint64_t v7 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(v11 + 36) |= 0x10u;
  *(_DWORD *)(v7 + 28) = LODWORD(v5);
  uint64_t v8 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v11 + 36) |= 0x20u;
  *(_DWORD *)(v8 + 32) = LODWORD(v5);
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v10);
  }
  return sub_101706914((PB::Base *)v10);
}

void sub_100C1BCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1BCCC(uint64_t a1)
{
  uint64_t v35 = off_1022E6B38;
  int8x16_t v2 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a1), *(float64x2_t *)(a1 + 16));
  int8x16_t v3 = vextq_s8(v2, v2, 4uLL);
  v2.i64[0] = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 32);
  int8x16_t v38 = v3;
  long long v39 = v4;
  v2.i64[1] = *(void *)(a1 + 100);
  int8x16_t v40 = v2;
  int v41 = *(_DWORD *)(a1 + 108);
  unint64_t v43 = 0xBF80000000000000;
  int v44 = 1127481344;
  int v5 = *(unsigned __int8 *)(a1 + 114);
  int v6 = *(unsigned __int8 *)(a1 + 113) | (v5 << 8);
  __int16 v46 = *(unsigned __int8 *)(a1 + 113) | (unsigned __int16)((_WORD)v5 << 8);
  int v7 = (v5 << 29 >> 31) & 5;
  char v42 = (v5 << 29 >> 31) & 5;
  uint64_t v45 = 4;
  double v37 = (double)*(unint64_t *)(a1 + 80);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v8 = sub_101282D9C();
  sub_10128431C(v8, (uint64_t)&v35);
  sub_10170140C(v32);
  sub_101727128((uint64_t)v32);
  v34 |= 1u;
  *(CFAbsoluteTime *)&v32[77] = Current;
  uint64_t v9 = v33;
  double v10 = (double)*(unint64_t *)(a1 + 80);
  *(_DWORD *)(v33 + 124) |= 0x10u;
  *(double *)(v9 + 40) = v10;
  uint64_t v11 = v33;
  *(float *)&double v10 = *(double *)(a1 + 8);
  *(_DWORD *)(v33 + 124) |= 2u;
  *(double *)(v11 + 16) = *(float *)&v10;
  uint64_t v12 = v33;
  *(float *)&double v10 = *(double *)(a1 + 16);
  *(_DWORD *)(v33 + 124) |= 4u;
  *(double *)(v12 + 24) = *(float *)&v10;
  uint64_t v13 = v33;
  *(float *)&double v10 = *(double *)(a1 + 24);
  *(_DWORD *)(v33 + 124) |= 8u;
  *(double *)(v13 + 32) = *(float *)&v10;
  uint64_t v14 = v33;
  *(float *)&double v10 = *(double *)a1;
  *(_DWORD *)(v33 + 124) |= 1u;
  *(double *)(v14 + 8) = *(float *)&v10;
  uint64_t v15 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v33 + 124) |= 0x40000u;
  *(_DWORD *)(v15 + 100) = LODWORD(v10);
  uint64_t v16 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v33 + 124) |= 0x80000u;
  *(_DWORD *)(v16 + 104) = LODWORD(v10);
  uint64_t v17 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v33 + 124) |= 0x100000u;
  *(_DWORD *)(v17 + 108) = LODWORD(v10);
  uint64_t v18 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v33 + 124) |= 0x2000u;
  *(_DWORD *)(v18 + 80) = LODWORD(v10);
  uint64_t v19 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v33 + 124) |= 0x4000u;
  *(_DWORD *)(v19 + 84) = LODWORD(v10);
  uint64_t v20 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v33 + 124) |= 0x8000u;
  *(_DWORD *)(v20 + 88) = LODWORD(v10);
  uint64_t v21 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(v33 + 124) |= 0x100u;
  *(_DWORD *)(v21 + 60) = LODWORD(v10);
  uint64_t v22 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v33 + 124) |= 0x200u;
  *(_DWORD *)(v22 + 64) = LODWORD(v10);
  uint64_t v23 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v33 + 124) |= 0x400u;
  *(_DWORD *)(v23 + 68) = LODWORD(v10);
  uint64_t v24 = v33;
  *(_DWORD *)(v33 + 124) |= 0x80u;
  *(_DWORD *)(v24 + 56) = v7;
  uint64_t v25 = v33;
  *(_DWORD *)(v33 + 124) |= 0x800u;
  *(_DWORD *)(v25 + 72) = 0;
  uint64_t v26 = v33;
  *(_DWORD *)(v33 + 124) |= 0x20000u;
  *(_DWORD *)(v26 + 96) = -1082130432;
  uint64_t v27 = v33;
  *(_DWORD *)(v33 + 124) |= 0x20u;
  *(_DWORD *)(v27 + 48) = 1127481344;
  uint64_t v28 = v33;
  *(_DWORD *)(v33 + 124) |= 0x1000u;
  *(_DWORD *)(v28 + 76) = 4;
  uint64_t v29 = v33;
  *(_DWORD *)(v33 + 124) |= 0x40u;
  *(_DWORD *)(v29 + 52) = 0;
  uint64_t v30 = v33;
  *(_DWORD *)(v33 + 124) |= 0x10000u;
  *(_DWORD *)(v30 + 92) = v6;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v32);
  }
  return sub_101706914((PB::Base *)v32);
}

void sub_100C1C02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C1C044(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryAccelerometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v8 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryAccelerometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100C2AC80(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1C1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C1C21C(int *a1)
{
  sub_10170140C(v11);
  sub_101727F38((uint64_t)v11);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v14 |= 1u;
  CFAbsoluteTime v13 = Current;
  uint64_t v3 = v12;
  sub_100134750(&__p, (char *)a1 + 60);
  sub_100C19AF0(v3, &__p);
  if (v10 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_1016B817C(v12);
  uint64_t v4 = *(void *)(v12 + 24);
  int v5 = *a1;
  *(unsigned char *)(v4 + 32) |= 2u;
  *(_DWORD *)(v4 + 28) = v5;
  uint64_t v6 = *(void *)(v12 + 24);
  sub_100AE479C(v6);
  std::string::operator=(*(std::string **)(v6 + 8), (const std::string *)(a1 + 2));
  uint64_t v7 = *(void *)(v12 + 24);
  sub_100C31F08(v7);
  std::string::operator=(*(std::string **)(v7 + 16), (const std::string *)(a1 + 8));
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v11);
  }
  return sub_101706914((PB::Base *)v11);
}

void sub_100C1C344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100C1C378(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    int v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryMonitorLogEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryMonitorLogEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C2AE00(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1C528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1C548(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryProximityData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    char v8 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryProximityData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100C2ED68(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1C700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C1C720(int *a1)
{
  sub_10170140C(v12);
  sub_101727FC8((uint64_t)v12);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v15 |= 1u;
  CFAbsoluteTime v14 = Current;
  uint64_t v3 = v13;
  sub_100134750(&__p, (char *)a1 + 60);
  sub_100C2EF0C(v3, &__p);
  if (v11 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  uint64_t v4 = v13;
  sub_100134750(&__p, (char *)a1 + 135);
  sub_100C2EF60(v4, &__p);
  if (v11 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_1016BBA3C(v13);
  uint64_t v5 = *(void *)(v13 + 8);
  int v6 = *a1;
  *(unsigned char *)(v5 + 32) |= 2u;
  *(_DWORD *)(v5 + 28) = v6;
  uint64_t v7 = *(void *)(v13 + 8);
  sub_100AE479C(v7);
  std::string::operator=(*(std::string **)(v7 + 8), (const std::string *)(a1 + 2));
  uint64_t v8 = *(void *)(v13 + 8);
  sub_100C31F08(v8);
  std::string::operator=(*(std::string **)(v8 + 16), (const std::string *)(a1 + 8));
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v12);
  }
  return sub_101706914((PB::Base *)v12);
}

void sub_100C1C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100C1C8B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryGyroData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v8 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      CFAbsoluteTime v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryGyroData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100C2EFB4(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1CA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C1CA88(int *a1)
{
  sub_10170140C(v8);
  sub_101728058((uint64_t)v8);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  sub_1016BBA3C(v9);
  uint64_t v3 = *(void *)(v9 + 8);
  int v4 = *a1;
  *(unsigned char *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  uint64_t v5 = *(void *)(v9 + 8);
  sub_100AE479C(v5);
  std::string::operator=(*(std::string **)(v5 + 8), (const std::string *)(a1 + 2));
  uint64_t v6 = *(void *)(v9 + 8);
  sub_100C31F08(v6);
  std::string::operator=(*(std::string **)(v6 + 16), (const std::string *)(a1 + 8));
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C1CB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C1CB9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryHeartRateData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v8 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      CFAbsoluteTime v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryHeartRateData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100C2F14C(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1CD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1CD74(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryPPGData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v8 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      CFAbsoluteTime v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryPPGData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100C2F274(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1CF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1CF4C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryMagnetometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v8 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      CFAbsoluteTime v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryMagnetometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100C2F538(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1D104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C1D124(int *a1)
{
  sub_10170140C(v8);
  sub_1017280E8((uint64_t)v8);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  sub_1016BBA3C(v9);
  uint64_t v3 = *(void *)(v9 + 8);
  int v4 = *a1;
  *(unsigned char *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  uint64_t v5 = *(void *)(v9 + 8);
  sub_100AE479C(v5);
  std::string::operator=(*(std::string **)(v5 + 8), (const std::string *)(a1 + 2));
  uint64_t v6 = *(void *)(v9 + 8);
  sub_100C31F08(v6);
  std::string::operator=(*(std::string **)(v6 + 16), (const std::string *)(a1 + 8));
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C1D220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C1D238(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryDeviceMotionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v8 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      CFAbsoluteTime v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryDeviceMotionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100C2F6D4(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1D3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C1D410(int *a1)
{
  sub_10170140C(v11);
  sub_101728178((uint64_t)v11);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v14 |= 1u;
  CFAbsoluteTime v13 = Current;
  sub_1016BA840(v12);
  uint64_t v3 = *(void *)(v12 + 32);
  int v4 = *a1;
  *(unsigned char *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  uint64_t v5 = *(void *)(v12 + 32);
  sub_100AE479C(v5);
  std::string::operator=(*(std::string **)(v5 + 8), (const std::string *)(a1 + 2));
  uint64_t v6 = *(void *)(v12 + 32);
  sub_100C31F08(v6);
  std::string::operator=(*(std::string **)(v6 + 16), (const std::string *)(a1 + 8));
  uint64_t v7 = *(void *)(v12 + 32);
  int v8 = a1[14];
  *(unsigned char *)(v7 + 32) |= 1u;
  *(_DWORD *)(v7 + 24) = v8;
  uint64_t v9 = v12;
  LOBYTE(v8) = *((unsigned char *)a1 + 76);
  *(unsigned char *)(v12 + 44) |= 1u;
  *(unsigned char *)(v9 + 40) = v8;
  long long __src = *((_OWORD *)a1 + 5);
  sub_1000FB43C((char *)(v12 + 8), (char *)&__src, (uint64_t)&v16, 4uLL);
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v11);
  }
  return sub_101706914((PB::Base *)v11);
}

void sub_100C1D590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C1D5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onWifiScanNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onWifiScanNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C29A78(a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1D760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C1D780(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  int8x16_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Triggering wifi scan", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(*(void *)(v1 + 1200) + 16) syncgetStartScanWithType:8 lowPriority:0 passive:0 requester:"motionlog"];
}

uint64_t sub_100C1D938(uint64_t a1, uint64_t a2, void *a3)
{
  [a3 floatValue];

  return sub_100C1D964(v3);
}

uint64_t sub_100C1D964(float a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_10170140C(v5);
  v8 |= 1u;
  CFAbsoluteTime v7 = Current;
  sub_1017248A8((uint64_t)v5);
  uint64_t v3 = v6;
  *(unsigned char *)(v6 + 12) |= 1u;
  *(float *)(v3 + 8) = a1;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v5);
  }
  return sub_101706914((PB::Base *)v5);
}

void sub_100C1DA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C1DA34(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAveragedALSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAveragedALSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C2FCB8(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1DBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1DC04(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onSPL", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onSPL\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C304A8(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1DDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1DDD4(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onProxPDPData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onProxPDPData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C30588(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1DF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1DFA4(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onALSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onALSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C30728(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1E154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1E174(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onViewObstructedStateData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onViewObstructedStateData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C30910(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1E324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1E344(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onOrientationData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onOrientationData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C30AE0(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1E4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1E514(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onDeviceMotionAlwaysOnData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onDeviceMotionAlwaysOnData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C30BD0(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1E6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1E6E4(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onSignificantUserInteractionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    BOOL v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onSignificantUserInteractionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100C30E0C();
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1E884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1E8A4(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onHapticModuleStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    char v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onHapticModuleStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C29498(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1EA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1EA74(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v3 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    char v7 = 1;
    BOOL v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onKeyboardMotion", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v5 = qword_102419588;
    BOOL v3 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onKeyboardMotion\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100C30EB8(v3);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1EC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1EC44(char *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onKeyboardKeyPress", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    char v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onKeyboardKeyPress\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C310DC(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1EDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1EE14(char *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onTrackpad", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    char v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onTrackpad\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C311A4(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1EFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1EFE4(char *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onKeyboardAttach", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    char v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onKeyboardAttach\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C3126C(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1F194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100C1F1B4(uint64_t a1)
{
  *(void *)a1 = &off_1022EDB70;
  sub_100C1F75C(a1);
  sub_100C21D24(a1);

  *(void *)(a1 + 2048) = 0;
  *(void *)(a1 + 2056) = 0;

  *(void *)(a1 + 2040) = 0;
  if (*(void *)(a1 + 792)) {
    IOPMUnregisterNotification();
  }
  sub_100C21FFC(a1);
  sub_100C221B4(a1);

  *(void *)(a1 + 2072) = 0;
  uint64_t v2 = *(void *)(a1 + 1248);
  *(void *)(a1 + 1248) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1240);
  *(void *)(a1 + 1240) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 1232);
  *(void *)(a1 + 1232) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 1224);
  *(void *)(a1 + 1224) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 1216);
  *(void *)(a1 + 1216) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1208);
  *(void *)(a1 + 1208) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_1003C2C38((uint64_t *)(a1 + 1192), 0);
  uint64_t v9 = *(void *)(a1 + 1184);
  *(void *)(a1 + 1184) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 1176);
  *(void *)(a1 + 1176) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 1168);
  *(void *)(a1 + 1168) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 1160);
  *(void *)(a1 + 1160) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1128);
  *(void *)(a1 + 1128) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 1120);
  *(void *)(a1 + 1120) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 1112);
  *(void *)(a1 + 1112) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 1104);
  *(void *)(a1 + 1104) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 1096);
  *(void *)(a1 + 1096) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_100C0AB60(a1 + 904);
  uint64_t v20 = *(void *)(a1 + 896);
  *(void *)(a1 + 896) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 888);
  *(void *)(a1 + 888) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 880);
  *(void *)(a1 + 880) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_100EBBF9C(a1 + 256);

  return sub_10089C948((void *)a1);
}

BOOL sub_100C1F75C(uint64_t a1)
{
  if (*(void *)(a1 + 304))
  {
    uint64_t v2 = sub_10125D0BC();
    sub_10125DDA0(v2, *(void *)(a1 + 304));
    uint64_t v3 = *(void *)(a1 + 304);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *(void *)(a1 + 304) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 1176);
  if (v4) {
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:0];
  }
  if (*(void *)(a1 + 312))
  {
    uint64_t v5 = sub_1009EC0A8();
    sub_1009D26C4(v5, 0, *(void *)(a1 + 312));
    uint64_t v6 = *(void *)(a1 + 312);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 312) = 0;
  }
  if (*(void *)(a1 + 320))
  {
    uint64_t v7 = sub_1006518DC();
    sub_1009D26C4(v7, 0, *(void *)(a1 + 320));
    uint64_t v8 = *(void *)(a1 + 320);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *(void *)(a1 + 320) = 0;
  }
  if (*(void *)(a1 + 328))
  {
    uint64_t v9 = sub_100A08A84();
    sub_1009D26C4(v9, 0, *(void *)(a1 + 328));
    uint64_t v10 = *(void *)(a1 + 328);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    *(void *)(a1 + 328) = 0;
  }
  if (*(void *)(a1 + 336))
  {
    uint64_t v11 = sub_100A08A84();
    sub_1009D26C4(v11, 1, *(void *)(a1 + 336));
    uint64_t v12 = *(void *)(a1 + 336);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    *(void *)(a1 + 336) = 0;
  }
  if (*(void *)(a1 + 344))
  {
    uint64_t v13 = sub_100B0AEC4();
    sub_1009D26C4(v13, 0, *(void *)(a1 + 344));
    uint64_t v14 = *(void *)(a1 + 344);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    *(void *)(a1 + 344) = 0;
  }
  if (*(void *)(a1 + 352))
  {
    uint64_t v15 = sub_100862C50();
    sub_1009D26C4(v15, 0, *(void *)(a1 + 352));
    uint64_t v16 = *(void *)(a1 + 352);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    *(void *)(a1 + 352) = 0;
  }
  if (*(void *)(a1 + 1104))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022EDD58);
    }
    uint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#wigo,off,MotionLoggerLocal", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022EDD58);
      }
      __int16 v140 = 0;
      v119 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v119);
      if (v119 != (char *)buf) {
        free(v119);
      }
    }
    AnalyticsSendEventLazy();
    [*(id *)(*(void *)(a1 + 1104) + 16) unregister:*(void *)(*(void *)(a1 + 1104) + 8) forNotification:0];
  }
  if (*(void *)(a1 + 1096))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022EDD58);
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#wigo,off,MotionLoggerMediated", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022EDD58);
      }
      __int16 v140 = 0;
      v120 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v120);
      if (v120 != (char *)buf) {
        free(v120);
      }
    }
    AnalyticsSendEventLazy();
    [*(id *)(*(void *)(a1 + 1096) + 16) unregister:*(void *)(*(void *)(a1 + 1096) + 8) forNotification:0];
    if (*(_DWORD *)(a1 + 1740))
    {
      [*(id *)(*(void *)(a1 + 1096) + 16) register:*(void *)(*(void *)(a1 + 1096) + 8) forNotification:5 registrationInfo:0];
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Logging GPS: Mediated leech", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022EDD38);
        }
        __int16 v140 = 0;
        v128 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v128);
        if (v128 != (char *)buf) {
          free(v128);
        }
      }
    }
  }
  uint64_t v20 = *(void *)(a1 + 1184);
  if (v20) {
    [*(id *)(v20 + 16) unregister:*(void *)(v20 + 8) forNotification:0];
  }
  uint64_t v21 = *(void *)(a1 + 1120);
  if (v21) {
    [*(id *)(v21 + 16) unregister:*(void *)(v21 + 8) forNotification:36];
  }
  uint64_t v22 = *(void *)(a1 + 1128);
  if (v22) {
    [*(id *)(v22 + 16) unregister:*(void *)(v22 + 8) forNotification:5];
  }
  if (*(unsigned char *)(a1 + 1136))
  {
    uint64_t v23 = sub_1008B6998();
    sub_100134750(__p, "CLMotionLogger");
    sub_1008B7000(v23, (uint64_t *)__p);
    if (v139 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 1136) = 0;
  }
  if (*(void *)(a1 + 416))
  {
    uint64_t v24 = sub_1000D2E34(0);
    sub_1009D26C4(v24, 0, *(void *)(a1 + 416));
    uint64_t v25 = *(void *)(a1 + 416);
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    *(void *)(a1 + 416) = 0;
  }
  if (*(void *)(a1 + 360))
  {
    uint64_t v26 = sub_100521898();
    sub_1009D26C4(v26, 9, *(void *)(a1 + 360));
    uint64_t v27 = *(void *)(a1 + 360);
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    *(void *)(a1 + 360) = 0;
  }
  if (*(void *)(a1 + 368))
  {
    uint64_t v28 = sub_100521898();
    sub_1009D26C4(v28, 4, *(void *)(a1 + 368));
    uint64_t v29 = *(void *)(a1 + 368);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    *(void *)(a1 + 368) = 0;
  }
  if (*(void *)(a1 + 376))
  {
    uint64_t v30 = sub_100521898();
    sub_1009D26C4(v30, 5, *(void *)(a1 + 376));
    uint64_t v31 = *(void *)(a1 + 376);
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    *(void *)(a1 + 376) = 0;
  }
  if (*(void *)(a1 + 384))
  {
    uint64_t v32 = sub_100521898();
    sub_1009D26C4(v32, 6, *(void *)(a1 + 384));
    uint64_t v33 = *(void *)(a1 + 384);
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
    *(void *)(a1 + 384) = 0;
  }
  if (*(void *)(a1 + 392))
  {
    uint64_t v34 = sub_100521898();
    sub_1009D26C4(v34, 0, *(void *)(a1 + 392));
    uint64_t v35 = *(void *)(a1 + 392);
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
    *(void *)(a1 + 392) = 0;
  }
  if (*(void *)(a1 + 536))
  {
    uint64_t v36 = sub_101337DA8();
    sub_1009D26C4(v36, 0, *(void *)(a1 + 536));
    uint64_t v37 = *(void *)(a1 + 536);
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    *(void *)(a1 + 536) = 0;
  }
  if (*(void *)(a1 + 544))
  {
    uint64_t v38 = sub_101337DA8();
    sub_1009D26C4(v38, 1, *(void *)(a1 + 544));
    uint64_t v39 = *(void *)(a1 + 544);
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    *(void *)(a1 + 544) = 0;
  }
  if (*(void *)(a1 + 552))
  {
    uint64_t v40 = sub_10131AF44();
    sub_1009D26C4(v40, 0, *(void *)(a1 + 552));
    uint64_t v41 = *(void *)(a1 + 552);
    *(void *)(a1 + 552) = 0;
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    }
  }
  if (*(void *)(a1 + 560))
  {
    uint64_t v42 = sub_1007034F0();
    sub_1009D26C4(v42, 0, *(void *)(a1 + 560));
    uint64_t v43 = *(void *)(a1 + 560);
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
    }
    *(void *)(a1 + 560) = 0;
  }
  if (*(void *)(a1 + 568))
  {
    uint64_t v44 = sub_1007034F0();
    sub_1009D26C4(v44, 1, *(void *)(a1 + 568));
    uint64_t v45 = *(void *)(a1 + 568);
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    }
    *(void *)(a1 + 568) = 0;
  }
  if (*(void *)(a1 + 584))
  {
    uint64_t v46 = sub_100D4D820();
    sub_1009D26C4(v46, 0, *(void *)(a1 + 584));
    uint64_t v47 = *(void *)(a1 + 584);
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
    }
    *(void *)(a1 + 584) = 0;
  }
  if (*(void *)(a1 + 592))
  {
    uint64_t v48 = sub_100D4D820();
    sub_1009D26C4(v48, 1, *(void *)(a1 + 592));
    uint64_t v49 = *(void *)(a1 + 592);
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
    *(void *)(a1 + 592) = 0;
  }
  if (*(void *)(a1 + 632))
  {
    uint64_t v50 = sub_10062DDCC();
    sub_1009D26C4(v50, 0, *(void *)(a1 + 632));
    uint64_t v51 = *(void *)(a1 + 632);
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    }
    *(void *)(a1 + 632) = 0;
  }
  if (*(void *)(a1 + 640))
  {
    uint64_t v52 = sub_10076FDCC();
    sub_1009D26C4(v52, 0, *(void *)(a1 + 640));
    uint64_t v53 = *(void *)(a1 + 640);
    if (v53) {
      (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
    }
    *(void *)(a1 + 640) = 0;
  }
  if (*(void *)(a1 + 600))
  {
    uint64_t v54 = sub_100B60200();
    sub_1009D26C4(v54, 0, *(void *)(a1 + 600));
    uint64_t v55 = *(void *)(a1 + 600);
    if (v55) {
      (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    }
    *(void *)(a1 + 600) = 0;
  }
  if (*(void *)(a1 + 608))
  {
    uint64_t v56 = sub_100B60200();
    sub_1009D26C4(v56, 1, *(void *)(a1 + 608));
    uint64_t v57 = *(void *)(a1 + 608);
    if (v57) {
      (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
    }
    *(void *)(a1 + 608) = 0;
  }
  if (*(void *)(a1 + 616))
  {
    uint64_t v58 = sub_10150A86C();
    sub_1009D26C4(v58, 0, *(void *)(a1 + 616));
    uint64_t v59 = *(void *)(a1 + 616);
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
    }
    *(void *)(a1 + 616) = 0;
  }
  if (*(void *)(a1 + 624))
  {
    uint64_t v60 = sub_10150A86C();
    sub_1009D26C4(v60, 1, *(void *)(a1 + 624));
    uint64_t v61 = *(void *)(a1 + 624);
    if (v61) {
      (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
    }
    *(void *)(a1 + 624) = 0;
  }
  if (*(void *)(a1 + 400))
  {
    uint64_t v62 = sub_1012D0988();
    sub_1009D26C4(v62, 0, *(void *)(a1 + 400));
    uint64_t v63 = sub_1012D0988();
    sub_1009D26C4(v63, 1, *(void *)(a1 + 400));
    uint64_t v64 = sub_1012D0988();
    sub_1009D26C4(v64, 2, *(void *)(a1 + 400));
    uint64_t v65 = *(void *)(a1 + 400);
    if (v65) {
      (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
    }
    *(void *)(a1 + 400) = 0;
  }
  [*(id *)(a1 + 712) invalidate];

  [*(id *)(a1 + 2088) invalidate];
  *(void *)(a1 + 2088) = 0;
  [*(id *)(a1 + 2056) unregisterForMobilityBoutMetrics:*(void *)(a1 + 2040)];
  if (*(void *)(a1 + 448))
  {
    uint64_t v66 = sub_1000D2E34(0);
    sub_1009D26C4(v66, 27, *(void *)(a1 + 448));
    uint64_t v67 = *(void *)(a1 + 448);
    *(void *)(a1 + 448) = 0;
    if (v67) {
      (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
    }
  }
  if (*(void *)(a1 + 456))
  {
    uint64_t v68 = sub_1000D2E34(0);
    sub_1009D26C4(v68, 39, *(void *)(a1 + 456));
    uint64_t v69 = *(void *)(a1 + 456);
    *(void *)(a1 + 456) = 0;
    if (v69) {
      (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
    }
  }
  v70 = *(void **)(a1 + 576);
  if (v70)
  {

    *(void *)(a1 + 576) = 0;
  }
  if (*(void *)(a1 + 432))
  {
    BOOL v71 = *(unsigned char *)(a1 + 1865) == 0;
    uint64_t v72 = sub_1000D2E34(0);
    if (v71) {
      int v73 = 32;
    }
    else {
      int v73 = 31;
    }
    sub_1009D26C4(v72, v73, *(void *)(a1 + 432));
    uint64_t v74 = *(void *)(a1 + 432);
    if (v74) {
      (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
    }
    *(void *)(a1 + 432) = 0;
  }
  if (*(unsigned char *)(a1 + 1882))
  {
    v75 = *(void **)(a1 + 1256);
    if (v75)
    {
      [v75 cancel];
      *(void *)(a1 + 1256) = 0;
    }
    v76 = *(NSObject **)(a1 + 1264);
    if (v76)
    {
      dispatch_release(v76);
      *(void *)(a1 + 1264) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 1885))
  {
    [*(id *)(*(void *)(a1 + 1240) + 16) unregister:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:10];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v77 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Unregistering for display state notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v121 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v121);
      if (v121 != (char *)buf) {
        free(v121);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1888))
  {
    [*(id *)(*(void *)(a1 + 1240) + 16) unregister:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:2];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v78 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "Unregistering for AP sleep notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v122 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v122);
      if (v122 != (char *)buf) {
        free(v122);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1891))
  {
    [*(id *)(*(void *)(a1 + 1240) + 16) unregister:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:3];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v79 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_INFO, "Unregistering for AP wake notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v123 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v123);
      if (v123 != (char *)buf) {
        free(v123);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1870))
  {
    [*(id *)(*(void *)(a1 + 1240) + 16) unregister:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:7];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v80 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "Unregistering for battery status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v124 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v124);
      if (v124 != (char *)buf) {
        free(v124);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1873))
  {
    [*(id *)(*(void *)(a1 + 1240) + 16) unregister:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:11];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v81 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Unregistering for screen lock status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v125 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v125);
      if (v125 != (char *)buf) {
        free(v125);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1876))
  {
    [*(id *)(*(void *)(a1 + 1240) + 16) unregister:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:15];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v82 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "Unregistering for battery saver mode status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v126 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v126);
      if (v126 != (char *)buf) {
        free(v126);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1918) && *(void *)(a1 + 472))
  {
    uint64_t v83 = sub_1000D2E34(0);
    sub_1009D26C4(v83, 40, *(void *)(a1 + 472));
    uint64_t v84 = *(void *)(a1 + 472);
    if (v84) {
      (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
    }
    *(void *)(a1 + 472) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v85 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "Unregistering for prox PDP notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v129 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v129);
      if (v129 != (char *)buf) {
        free(v129);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1921) && *(void *)(a1 + 480))
  {
    uint64_t v86 = sub_1000D2E34(0);
    sub_1009D26C4(v86, 41, *(void *)(a1 + 480));
    uint64_t v87 = *(void *)(a1 + 480);
    if (v87) {
      (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
    }
    *(void *)(a1 + 480) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v88 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "Unregistering for ALS notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v130 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v130);
      if (v130 != (char *)buf) {
        free(v130);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1924) && sub_1000EB1B0())
  {
    [*(id *)(*(void *)(a1 + 1248) + 16) unregister:*(void *)(*(void *)(a1 + 1248) + 8) forNotification:0];
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_1022EDD98);
    }
    v89 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "Unregistering for backlight state notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_1022EDD98);
      }
      __int16 v140 = 0;
      v136 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v136);
      if (v136 != (char *)buf) {
        free(v136);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1927) && *(void *)(a1 + 488))
  {
    uint64_t v90 = sub_1000D2E34(0);
    sub_1009D26C4(v90, 42, *(void *)(a1 + 488));
    uint64_t v91 = *(void *)(a1 + 488);
    if (v91) {
      (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
    }
    *(void *)(a1 + 488) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v92 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "Unregistering for view obstructed state notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v131 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v131);
      if (v131 != (char *)buf) {
        free(v131);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1930) && *(void *)(a1 + 496))
  {
    uint64_t v93 = sub_1000D2E34(0);
    sub_1009D26C4(v93, 43, *(void *)(a1 + 496));
    uint64_t v94 = *(void *)(a1 + 496);
    if (v94) {
      (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
    }
    *(void *)(a1 + 496) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v95 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "Unregistering orientation notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v132 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v132);
      if (v132 != (char *)buf) {
        free(v132);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1933) && *(void *)(a1 + 504))
  {
    uint64_t v96 = sub_1000D2E34(0);
    sub_1009D26C4(v96, 44, *(void *)(a1 + 504));
    uint64_t v97 = *(void *)(a1 + 504);
    if (v97) {
      (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
    }
    *(void *)(a1 + 504) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v98 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "Unregistering ALS notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v133 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v133);
      if (v133 != (char *)buf) {
        free(v133);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1936) && *(void *)(a1 + 512))
  {
    uint64_t v99 = sub_1000D2E34(0);
    sub_1009D26C4(v99, 45, *(void *)(a1 + 512));
    uint64_t v100 = *(void *)(a1 + 512);
    if (v100) {
      (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
    }
    *(void *)(a1 + 512) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v101 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "Unregistering Significant User Interaction notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v134 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v134);
      if (v134 != (char *)buf) {
        free(v134);
      }
    }
  }
  uint64_t v102 = *(void *)(a1 + 1216);
  if (v102)
  {
    [*(id *)(v102 + 16) unregister:*(void *)(v102 + 8) forNotification:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v103 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_INFO, "Unregistering Fitness Machine notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v127 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v127);
      if (v127 != (char *)buf) {
        free(v127);
      }
    }
  }
  if (*(void *)(a1 + 520))
  {
    uint64_t v104 = sub_1010BF45C();
    sub_1009D26C4(v104, 0, *(void *)(a1 + 520));
    uint64_t v105 = *(void *)(a1 + 520);
    *(void *)(a1 + 520) = 0;
    if (v105) {
      (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
    }
  }
  if (*(unsigned char *)(a1 + 2028) && *(void *)(a1 + 528))
  {
    uint64_t v106 = sub_1000D2E34(0);
    sub_1009D26C4(v106, 50, *(void *)(a1 + 528));
    uint64_t v107 = *(void *)(a1 + 528);
    if (v107) {
      (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
    }
    *(void *)(a1 + 528) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v108 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_INFO, "Unregistering Haptic Module State notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v135 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v135);
      if (v135 != (char *)buf) {
        free(v135);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1945) && *(void *)(a1 + 840) && sub_100964720())
  {
    uint64_t v109 = sub_100964720();
    sub_1009D26C4(v109, 0, *(void *)(a1 + 840));
    uint64_t v110 = *(void *)(a1 + 840);
    if (v110) {
      (*(void (**)(uint64_t))(*(void *)v110 + 8))(v110);
    }
    *(void *)(a1 + 840) = 0;
    uint64_t v111 = sub_100964720();
    sub_1009D26C4(v111, 1, *(void *)(a1 + 848));
    uint64_t v112 = *(void *)(a1 + 848);
    if (v112) {
      (*(void (**)(uint64_t))(*(void *)v112 + 8))(v112);
    }
    *(void *)(a1 + 848) = 0;
    uint64_t v113 = sub_100964720();
    sub_1009D26C4(v113, 3, *(void *)(a1 + 856));
    uint64_t v114 = *(void *)(a1 + 856);
    if (v114) {
      (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
    }
    *(void *)(a1 + 856) = 0;
    uint64_t v115 = sub_100964720();
    sub_1009D26C4(v115, 2, *(void *)(a1 + 864));
    uint64_t v116 = *(void *)(a1 + 864);
    if (v116) {
      (*(void (**)(uint64_t))(*(void *)v116 + 8))(v116);
    }
    *(void *)(a1 + 864) = 0;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    v117 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_INFO, "Unregistering for keyboard notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      __int16 v140 = 0;
      v137 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v137);
      if (v137 != (char *)buf) {
        free(v137);
      }
    }
  }
  return sub_100EBC6AC(a1 + 256);
}

void sub_100C21D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C21D24(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 1144) + 16) unregister:*(void *)(*(void *)(a1 + 1144) + 8) forNotification:2];
  [*(id *)(*(void *)(a1 + 880) + 16) unregister:*(void *)(*(void *)(a1 + 880) + 8) forNotification:3];
  [*(id *)(*(void *)(a1 + 880) + 16) unregister:*(void *)(*(void *)(a1 + 880) + 8) forNotification:7];
  [*(id *)(*(void *)(a1 + 880) + 16) unregister:*(void *)(*(void *)(a1 + 880) + 8) forNotification:5];
  [*(id *)(*(void *)(a1 + 880) + 16) unregister:*(void *)(*(void *)(a1 + 880) + 8) forNotification:4];
  [*(id *)(*(void *)(a1 + 1096) + 16) unregister:*(void *)(*(void *)(a1 + 1096) + 8) forNotification:5];
  [*(id *)(*(void *)(a1 + 888) + 16) unregister:*(void *)(*(void *)(a1 + 888) + 8) forNotification:0];
  [*(id *)(*(void *)(a1 + 888) + 16) unregister:*(void *)(*(void *)(a1 + 888) + 8) forNotification:5];
  [*(id *)(*(void *)(a1 + 888) + 16) unregister:*(void *)(*(void *)(a1 + 888) + 8) forNotification:6];
  [*(id *)(*(void *)(a1 + 888) + 16) unregister:*(void *)(*(void *)(a1 + 888) + 8) forNotification:10];
  [*(id *)(*(void *)(a1 + 896) + 16) unregister:*(void *)(*(void *)(a1 + 896) + 8) forNotification:0];
  [*(id *)(*(void *)(a1 + 1152) + 16) unregister:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:5];
  [*(id *)(*(void *)(a1 + 1152) + 16) unregister:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:6];
  [*(id *)(*(void *)(a1 + 1160) + 16) unregister:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:4];
  [*(id *)(*(void *)(a1 + 1160) + 16) unregister:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:22];
  [*(id *)(*(void *)(a1 + 1160) + 16) unregister:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:33];
  [*(id *)(*(void *)(a1 + 1160) + 16) unregister:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:23];
  uint64_t v2 = *(void *)(a1 + 1112);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:41];
  }
  [*(id *)(*(void *)(a1 + 1168) + 16) unregister:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:0];
  [*(id *)(*(void *)(a1 + 1168) + 16) unregister:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:1];
  if (*(void *)(a1 + 424))
  {
    uint64_t v3 = sub_1000D2E34(0);
    sub_1009D26C4(v3, 12, *(void *)(a1 + 424));
    uint64_t v4 = *(void *)(a1 + 424);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 424) = 0;
  }
  [*(id *)(a1 + 2048) stopMonitoringVisitsForClient:*(void *)(a1 + 2040)];
  [*(id *)(a1 + 2048) stopLeechingLowConfidenceVisitsForClient:*(void *)(a1 + 2040)];
  [*(id *)(*(void *)(a1 + 1208) + 16) unregister:*(void *)(*(void *)(a1 + 1208) + 8) forNotification:0];
  [*(id *)(*(void *)(a1 + 1184) + 16) unregister:*(void *)(*(void *)(a1 + 1184) + 8) forNotification:0];
  uint64_t v5 = *(void *)(a1 + 1120);
  if (v5) {
    [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:36];
  }
  uint64_t v6 = *(void *)(a1 + 1128);
  if (v6) {
    [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:5];
  }
  if (*(unsigned char *)(a1 + 1136))
  {
    uint64_t v7 = sub_1008B6998();
    sub_100134750(__p, "CLMotionLogger");
    sub_1008B7000(v7, (uint64_t *)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 1136) = 0;
  }
  sub_100C22D4C(a1);
  if (*(void *)(a1 + 464))
  {
    uint64_t v8 = sub_1000D2E34(0);
    sub_1009D26C4(v8, 36, *(void *)(a1 + 464));
    uint64_t v9 = *(void *)(a1 + 464);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    *(void *)(a1 + 464) = 0;
  }
  return [*(id *)(*(void *)(a1 + 1224) + 16) unregister:*(void *)(*(void *)(a1 + 1224) + 8) forNotification:0];
}

void sub_100C21FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C21FFC(uint64_t a1)
{
  if (*(void *)(a1 + 808)
    && +[CMActivityAlarmLocal activityAlarmAvailable])
  {
    [*(id *)(a1 + 808) invalidate];

    *(void *)(a1 + 808) = 0;
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    uint64_t v2 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "clearActivityAlarmStatic", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::clearActivityAlarmStatic()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t sub_100C221B4(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  [*(id *)(v2 + 2064) clearFence:forClient:*(void *)(v3 + 824), *(void *)(v3 + 2040), v1];

  *(void *)(v3 + 2064) = 0;
  sub_10170140C(v10);
  sub_101728328((uint64_t)v10);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v12 |= 1u;
  *(CFAbsoluteTime *)&v10[77] = Current;
  uint64_t v5 = v11;
  *(unsigned char *)(v11 + 20) |= 1u;
  *(void *)(v5 + 8) = 0;
  uint64_t v6 = v11;
  *(unsigned char *)(v11 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = 0;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v10);
  }
  if (qword_1024192D0 != -1) {
    dispatch_once(&qword_1024192D0, &stru_1022EDE18);
  }
  uint64_t v7 = qword_1024192D8;
  if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "clearPedestrianFence", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::clearPedestrianFence()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return sub_101706914((PB::Base *)v10);
}

void sub_100C22410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C22430(uint64_t a1)
{
  sub_100C1F1B4(a1);

  operator delete();
}

NSDictionary *__cdecl sub_100C22468(id a1)
{
  return (NSDictionary *)&off_102397630;
}

NSDictionary *__cdecl sub_100C22474(id a1)
{
  return (NSDictionary *)&off_102397658;
}

void sub_100C22480(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onBasebandSpeedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onBasebandSpeedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C291F8(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C22630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C22650(uint64_t a1, uint64_t a2)
{
  return sub_100C2FA90(a2);
}

uint64_t sub_100C22660(uint64_t a1, uint64_t a2)
{
  return sub_100C2FBC0(a2, a1);
}

id sub_100C22670(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Registering for visual localizations", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::registerForVisualLocalizations()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 2080) registerForVisionNotifications:*(void *)(a1 + 2040)];
}

void sub_100C22810(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onBasebandCompassCoexNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v6 = qword_102419588;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onBasebandCompassCoexNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C29378(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C229C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100C229E0(uint64_t a1)
{
  __chkstk_darwin(a1);
  __n128 result = *(unsigned char **)(v1 + 8);
  if (*result == 2)
  {
    memset(v24, 0, 11);
    uint64_t v22 = &off_1022EDEA8;
    uint64_t v23 = 0;
    sub_1012EB948(result, (uint64_t)&v22);
    uint64_t v3 = v23;
    uint64_t v4 = v24[0];
    int v5 = LOBYTE(v24[1]);
    int v6 = BYTE1(v24[1]);
    int v7 = BYTE2(v24[1]);
    sub_10170140C(v19);
    sub_101725B38((uint64_t)v19);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v21 |= 1u;
    *(CFAbsoluteTime *)&v19[77] = Current;
    uint64_t v9 = v20;
    *(unsigned char *)(v20 + 44) |= 2u;
    *(void *)(v9 + 16) = v3;
    uint64_t v10 = v20;
    *(unsigned char *)(v20 + 44) |= 4u;
    *(void *)(v10 + 24) = v4;
    uint64_t v11 = v20;
    *(unsigned char *)(v20 + 44) |= 0x10u;
    *(_DWORD *)(v11 + 36) = v5;
    uint64_t v12 = v20;
    *(unsigned char *)(v20 + 44) |= 8u;
    *(_DWORD *)(v12 + 32) = v6;
    uint64_t v13 = v20;
    *(unsigned char *)(v20 + 44) |= 0x20u;
    *(unsigned char *)(v13 + 40) = v7 != 0;
    uint64_t v14 = v20;
    double v15 = sub_10016C458();
    *(unsigned char *)(v14 + 44) |= 1u;
    *(double *)(v14 + 8) = v15;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v19);
    }
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_1022EDDF8);
    }
    uint64_t v16 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      int v30 = v5;
      __int16 v31 = 2048;
      uint64_t v32 = v4;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CLMotionLogger] state,%d,timestampPossible,%llu", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_1022EDDF8);
      }
      int v25 = 67109376;
      int v26 = v5;
      __int16 v27 = 2048;
      uint64_t v28 = v4;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMotionLogger::onWakeGesture(const CMSPU::GestureReport::Sample *, void *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    sub_101706914((PB::Base *)v19);
    return (unsigned char *)nullsub_41(&v22, v17);
  }
  return result;
}

void sub_100C22D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101706914((PB::Base *)va);
  nullsub_41(&STACK[0xE40], v5);
  _Unwind_Resume(a1);
}

id sub_100C22D4C(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Un-registering for visual localizations", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::unregisterForVisualLocalizations()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 2080) deregisterForVisionNotifications:*(void *)(a1 + 2040)];
}

uint64_t sub_100C22EEC()
{
  if (qword_102480860 != -1) {
    dispatch_once(&qword_102480860, &stru_1022EDC88);
  }
  return qword_10248AA90;
}

void sub_100C22F30(id a1)
{
  if (sub_1007414F8())
  {
    +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:sub_1009E8E44()];
    operator new();
  }
  qword_10248AA90 = 0;
}

void sub_100C22FA4()
{
}

void sub_100C22FC8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  [*(id *)(a1 + 248) silo];
  if (*a3 == 2)
  {
    uint64_t v49 = off_1022E6EA8;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v53 = *(void *)a4;
    uint64_t v7 = *(void *)(a4 + 16);
    int v51 = *(void *)(a4 + 112);
    int v52 = v7;
    sub_10170140C(buf);
    sub_101727638((uint64_t)buf);
    v57 |= 1u;
    CFAbsoluteTime v55 = Current;
    uint64_t v8 = v56;
    uint64_t v9 = *(void *)(a4 + 24);
    *(_WORD *)(v56 + 64) |= 2u;
    *(void *)(v8 + 16) = v9;
    uint64_t v10 = v56;
    uint64_t v11 = *(void *)a4;
    *(_WORD *)(v56 + 64) |= 8u;
    *(void *)(v10 + 32) = v11;
    uint64_t v12 = v56;
    uint64_t v13 = *(void *)(a4 + 8);
    *(_WORD *)(v56 + 64) |= 1u;
    *(void *)(v12 + 8) = v13;
    uint64_t v14 = v56;
    uint64_t v15 = *(void *)(a4 + 16);
    *(_WORD *)(v56 + 64) |= 0x10u;
    *(_DWORD *)(v14 + 40) = v15;
    uint64_t v16 = v56;
    uint64_t v17 = *(void *)(a4 + 112);
    *(_WORD *)(v56 + 64) |= 0x200u;
    *(_DWORD *)(v16 + 60) = v17;
    uint64_t v18 = v56;
    uint64_t v19 = *(void *)(a4 + 120);
    *(_WORD *)(v56 + 64) |= 0x80u;
    *(_DWORD *)(v18 + 52) = v19;
    uint64_t v20 = v56;
    uint64_t v21 = *(void *)(a4 + 224);
    *(_WORD *)(v56 + 64) |= 0x100u;
    *(_DWORD *)(v20 + 56) = v21;
    uint64_t v22 = *(void *)(a4 + 112);
    if (v22 == 14)
    {
      uint64_t v29 = v56;
      uint64_t v30 = *(void *)(a4 + 128);
      *(_WORD *)(v56 + 64) |= 0x20u;
      *(_DWORD *)(v29 + 44) = v30;
    }
    else if (v22 == 19)
    {
      uint64_t v23 = v56;
      uint64_t v24 = *(void *)(a4 + 128);
      *(_WORD *)(v56 + 64) |= 0x40u;
      *(_DWORD *)(v23 + 48) = v24;
      uint64_t v25 = v56;
      uint64_t v26 = *(void *)(a4 + 136);
      *(_WORD *)(v56 + 64) |= 4u;
      *(void *)(v25 + 24) = v26;
    }
    BOOL v32 = *(void *)(a4 + 16) != 1 && *(void *)(a4 + 224) == 1;
    *(unsigned char *)(a1 + 800) = v32;
    int v33 = sub_10101439C(a4);
    if (v33 == 2)
    {
      if (*(unsigned char *)(a1 + 1279))
      {
        sub_1000D3E78();
        id v34 = sub_1009E8E44();
        double v35 = *(double *)(a1 + 1816);
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472;
        v48[2] = sub_100C2344C;
        v48[3] = &unk_1022A3020;
        v48[4] = a1;
        [v34 afterInterval:v48 async:v35];
      }
    }
    else
    {
      if (v33 != 1)
      {
LABEL_28:
        uint64_t v47 = sub_101282D9C();
        sub_10128431C(v47, (uint64_t)&v49);
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_1022EDD18);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)buf);
        }
        sub_101706914((PB::Base *)buf);
        return;
      }
      if (*(unsigned char *)(a1 + 1279)) {
        sub_100C11848(a1);
      }
    }
    long long v36 = *(_OWORD *)a4;
    long long v37 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 2120) = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 2136) = v37;
    *(_OWORD *)(a1 + 2104) = v36;
    long long v38 = *(_OWORD *)(a4 + 48);
    long long v39 = *(_OWORD *)(a4 + 64);
    long long v40 = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a1 + 2184) = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 2200) = v40;
    *(_OWORD *)(a1 + 2152) = v38;
    *(_OWORD *)(a1 + 2168) = v39;
    long long v41 = *(_OWORD *)(a4 + 112);
    long long v42 = *(_OWORD *)(a4 + 128);
    long long v43 = *(_OWORD *)(a4 + 160);
    *(_OWORD *)(a1 + 2248) = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a1 + 2264) = v43;
    *(_OWORD *)(a1 + 2216) = v41;
    *(_OWORD *)(a1 + 2232) = v42;
    long long v44 = *(_OWORD *)(a4 + 176);
    long long v45 = *(_OWORD *)(a4 + 192);
    long long v46 = *(_OWORD *)(a4 + 208);
    *(void *)(a1 + 2328) = *(void *)(a4 + 224);
    *(_OWORD *)(a1 + 2296) = v45;
    *(_OWORD *)(a1 + 2312) = v46;
    *(_OWORD *)(a1 + 2280) = v44;
    goto LABEL_28;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  __int16 v27 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    LOWORD(v49) = 0;
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
}

void sub_100C23424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2344C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (sub_10101439C((uint64_t)(v1 + 263)) == 1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[266];
      uint64_t v4 = v1[265];
      uint64_t v5 = v1[277];
      v6[0] = 68289795;
      v6[1] = 0;
      __int16 v7 = 2082;
      uint64_t v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = v3;
      __int16 v11 = 1025;
      int v12 = v4;
      __int16 v13 = 1025;
      int v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MotionLogger: Still in workout, not disabling runtime logging\", \"eventTime\":\"%{public}f\", \"eventType\":%{private}d, \"workoutType\":%{private}d}", (uint8_t *)v6, 0x28u);
    }
  }
  else
  {
    sub_100C1F75C((uint64_t)v1);
  }
}

void sub_100C235A4(uint64_t a1)
{
}

void sub_100C235AC(uint64_t a1)
{
  sub_100C21FFC(a1);
  sub_100C23748(a1, 1);
  if (qword_1024192D0 != -1) {
    dispatch_once(&qword_1024192D0, &stru_1022EDE18);
  }
  uint64_t v2 = qword_1024192D8;
  if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onActivityAlarmStaticNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onActivityAlarmStaticNotification()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

id sub_100C23748(uint64_t a1, int a2)
{
  if (!a2)
  {
    AudioServicesPlaySystemSound(0x60Bu);
    double Current = CFAbsoluteTimeGetCurrent();
    double v5 = *(double *)(a1 + 816);
    int v6 = *(_DWORD *)(a1 + 1976);
    while (*((void *)&xmmword_1024808B8 + 1))
    {
      uint64_t v7 = *(void *)(qword_1024808A0 + (((unint64_t)xmmword_1024808B8 >> 4) & 0xFFFFFFFFFFFFFF8))
         + 32 * (xmmword_1024808B8 & 0x7F);
      uint64_t v8 = *(__CFUserNotification **)v7;
      uint64_t v9 = *(void *)(v7 + 16);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      uint64_t v10 = qword_1024192D8;
      if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,popping pending notification,%f", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024192D0 != -1) {
          dispatch_once(&qword_1024192D0, &stru_1022EDE18);
        }
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v11);
        if (v11 != (char *)&buf) {
          free(v11);
        }
      }
      CFUserNotificationCancel(v8);
      CFRelease(v8);
      xmmword_1024808B8 = (__int128)vaddq_s64((int64x2_t)xmmword_1024808B8, (int64x2_t)xmmword_101D0A740);
      sub_1002D0514((uint64_t)&qword_102480898, 1);
    }
    int v12 = objc_opt_new();
    [v12 setDateStyle:1];
    [v12 setTimeStyle:2];
    [v12 setLocale:[objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US"]];
    id v13 = (id)objc_opt_new();
    [v13 appendString:@"(Response to be logged in MSL)"];
    [v13 appendString:@"\n\n"];
    int v14 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v5];
    [v13 appendString:@"Static:\n"];
    [v13 appendString:[v12 stringFromDate:v14]];
    [v13 appendString:@"\n\n"];
    uint64_t v15 = +[NSDate dateWithTimeIntervalSinceReferenceDate:Current];
    [v13 appendString:@"Pedestrian Fence Exit:\n"];
    [v13 appendString:[v12 stringFromDate:v15]];
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    uint64_t v16 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(double *)((char *)&buf + 4) = Current;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,creating notification,%f", (uint8_t *)&buf, 0xCu);
    }
    float v17 = (float)v6;
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v26);
      if (v26 != (char *)&buf) {
        free(v26);
      }
    }
    id v18 = objc_alloc_init((Class)NSMutableDictionary);
    [v18 setObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Are you >>%.0fm from your last static position?", v17), kCFUserNotificationAlertHeaderKey forKeyedSubscript];
    [v18 setObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Yes, >>%.0fm", v17), kCFUserNotificationAlternateButtonTitleKey forKeyedSubscript];
    [v18 setObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"No, <<%.0fm", v17), kCFUserNotificationOtherButtonTitleKey forKeyedSubscript];
    [v18 setObject:@"I'm not sure..." forKeyedSubscript:kCFUserNotificationDefaultButtonTitleKey];
    [v18 setObject:v13 forKeyedSubscript:kCFUserNotificationAlertMessageKey];
    CFUserNotificationRef v19 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, 0, (CFDictionaryRef)v18);

    if (v19)
    {
      *(void *)&long long buf = v19;
      *((double *)&buf + 1) = v5;
      double v30 = Current;
      float v31 = v17;
      sub_100C320CC(&qword_102480898, (uint64_t)&buf);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      uint64_t v20 = qword_1024192D8;
      if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = *((void *)&xmmword_1024808B8 + 1);
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,pending notifications count,%lu", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024192D0 != -1) {
          dispatch_once(&qword_1024192D0, &stru_1022EDE18);
        }
        __int16 v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v27);
        if (v27 != (char *)&buf) {
          free(v27);
        }
      }
      CFRetain(v19);
      CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v19, (CFUserNotificationCallBack)sub_100C3215C, 0);
      if (RunLoopSource)
      {
        uint64_t v22 = RunLoopSource;
        uint64_t v23 = (__CFRunLoop *)sub_1001C2710();
        CFRunLoopAddSource(v23, v22, kCFRunLoopCommonModes);
        CFRelease(v22);
        CFRelease(v19);
        return sub_100C19B44((id)a1);
      }
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      uint64_t v25 = qword_1024192D8;
      if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "PedestrianFenceNotification,could not create runloop source for notification", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return sub_100C19B44((id)a1);
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      uint64_t v24 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "PedestrianFenceNotification,could not create notification", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return sub_100C19B44((id)a1);
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
    }
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v28);
    if (v28 != (char *)&buf) {
      free(v28);
    }
    return sub_100C19B44((id)a1);
  }
  AudioServicesPlaySystemSound(0x596u);
  *(CFAbsoluteTime *)(a1 + 816) = CFAbsoluteTimeGetCurrent();

  return (id)sub_100C2412C(a1);
}

uint64_t sub_100C2412C(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  float v3 = (float)*(int *)(v2 + 1976);
  *(float *)&double v1 = v3;
  [*(id *)(v2 + 2064) setFence:*(void *)(v2 + 824) forClient:*(void *)(v2 + 2040) withRadius:v1];
  sub_10170140C(v11);
  sub_101728328((uint64_t)v11);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v13 |= 1u;
  *(CFAbsoluteTime *)&v11[77] = Current;
  uint64_t v5 = v12;
  *(unsigned char *)(v12 + 20) |= 1u;
  *(void *)(v5 + 8) = 0;
  uint64_t v6 = v12;
  *(unsigned char *)(v12 + 20) |= 2u;
  *(float *)(v6 + 16) = v3;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v11);
  }
  if (qword_1024192D0 != -1) {
    dispatch_once(&qword_1024192D0, &stru_1022EDE18);
  }
  double v7 = v3;
  uint64_t v8 = qword_1024192D8;
  if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    double v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PedestrianFence set with radius %.0f [m]", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    int v14 = 134217984;
    double v15 = v7;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::createPedestrianFence()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return sub_101706914((PB::Base *)v11);
}

void sub_100C243B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C243D8(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v78 = v1;
  double v4 = *v2;
  double v3 = v2[1];
  int v84 = *((_DWORD *)v2 + 6);
  int v5 = *((unsigned __int8 *)v2 + 28);
  int v6 = *((unsigned __int8 *)v2 + 29);
  int v7 = *((unsigned __int8 *)v2 + 30);
  int v8 = *((unsigned __int8 *)v2 + 31);
  char v9 = *((unsigned char *)v2 + 32);
  char v10 = *((unsigned char *)v2 + 33);
  int v11 = *((unsigned __int8 *)v2 + 35);
  uint64_t v12 = *((void *)v2 + 5);
  unsigned int v82 = *((unsigned __int8 *)v2 + 62);
  int v83 = *((unsigned __int8 *)v2 + 60);
  int v79 = *((unsigned __int8 *)v2 + 104);
  int v80 = *((unsigned __int8 *)v2 + 105);
  int v81 = *((unsigned __int8 *)v2 + 61);
  int v13 = *((_DWORD *)v2 + 29);
  int v15 = *((_DWORD *)v2 + 31);
  int v14 = *((_DWORD *)v2 + 32);
  int v17 = *((_DWORD *)v2 + 33);
  int v16 = *((_DWORD *)v2 + 34);
  char v18 = *((unsigned char *)v2 + 144);
  v88 = off_1022E6B90;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v90 = v84;
  char v91 = v5;
  char v92 = v6;
  char v93 = v7;
  char v95 = v8;
  int v19 = v9 & 1;
  char v96 = v9 & 1;
  int v20 = v10 & 1;
  char v97 = v10 & 1;
  char v94 = v11;
  double v98 = v3;
  double v99 = v4;
  uint64_t v100 = v12;
  int v101 = v13;
  int v103 = v15;
  int v104 = v14;
  int v105 = v17;
  int v106 = v16;
  int v21 = v18 & 1;
  char v102 = v18 & 1;
  uint64_t v22 = sub_101282D9C();
  sub_10128431C(v22, (uint64_t)&v88);
  sub_10170140C(v85);
  sub_1017271B8((uint64_t)v85);
  char v23 = v83;
  v87 |= 1u;
  *(CFAbsoluteTime *)&v85[77] = Current;
  uint64_t v24 = v86;
  *(void *)(v86 + 192) |= 0x8000uLL;
  *(_DWORD *)(v24 + 100) = v84;
  uint64_t v25 = v86;
  *(void *)(v86 + 192) |= 0x100uLL;
  *(_DWORD *)(v25 + 72) = v5;
  uint64_t v26 = v86;
  *(void *)(v86 + 192) |= 0x10000uLL;
  *(_DWORD *)(v26 + 104) = v6;
  uint64_t v27 = v86;
  *(void *)(v86 + 192) |= 0x20000uLL;
  *(_DWORD *)(v27 + 108) = v7;
  uint64_t v28 = v86;
  *(void *)(v86 + 192) |= 0x800uLL;
  *(_DWORD *)(v28 + 84) = v11;
  uint64_t v29 = v86;
  *(void *)(v86 + 192) |= 0x8000000uLL;
  *(_DWORD *)(v29 + 148) = v8;
  uint64_t v30 = v86;
  *(void *)(v86 + 192) |= 0x2000uLL;
  *(_DWORD *)(v30 + 92) = v19;
  uint64_t v31 = v86;
  *(void *)(v86 + 192) |= 0x1000uLL;
  *(_DWORD *)(v31 + 88) = v20;
  uint64_t v32 = v86;
  *(void *)(v86 + 192) |= 8uLL;
  *(double *)(v32 + 40) = v3;
  uint64_t v33 = v86;
  *(void *)(v86 + 192) |= 1uLL;
  *(double *)(v33 + 8) = v4;
  uint64_t v34 = v86;
  *(void *)(v86 + 192) |= 4uLL;
  *(void *)(v34 + 24) = v12;
  uint64_t v35 = v86;
  *(void *)(v86 + 192) |= 0x20000000uLL;
  *(_DWORD *)(v35 + 156) = v13;
  uint64_t v36 = v86;
  *(void *)(v86 + 192) |= 0x4000000uLL;
  *(_DWORD *)(v36 + 144) = v21;
  uint64_t v37 = v86;
  *(void *)(v86 + 192) |= 0x4000uLL;
  *(_DWORD *)(v37 + 96) = v15;
  uint64_t v38 = v86;
  *(void *)(v86 + 192) |= 0x400000uLL;
  *(_DWORD *)(v38 + 128) = v14;
  uint64_t v39 = v86;
  *(void *)(v86 + 192) |= 0x200000uLL;
  *(_DWORD *)(v39 + 124) = v17;
  uint64_t v40 = v86;
  *(void *)(v86 + 192) |= 0x800000uLL;
  *(_DWORD *)(v40 + 132) = v16;
  uint64_t v41 = v86;
  *(void *)(v86 + 192) |= 0x800000000uLL;
  *(_DWORD *)(v41 + 180) = v81;
  sub_1017784EC(v86);
  uint64_t v42 = *(void *)(v86 + 32);
  *(unsigned char *)(v42 + 20) |= 1u;
  *(_DWORD *)(v42 + 8) = v83;
  uint64_t v43 = v86;
  *(void *)(v86 + 192) |= 0x10000000uLL;
  *(_DWORD *)(v43 + 152) = v79;
  uint64_t v44 = v86;
  *(void *)(v86 + 192) |= 0x2000000000uLL;
  *(_DWORD *)(v44 + 188) = v80;
  uint64_t v45 = v86;
  *(void *)(v86 + 192) |= 0x400000000uLL;
  *(_DWORD *)(v45 + 176) = v82;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v85);
  }
  if (*(unsigned char *)(v78 + 1939))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EDE38);
    }
    long long v46 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = (v84 & 0x7300) != 0;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v4;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] motion state update: vehicular,%d timestamp,%f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      int v107 = 67109376;
      *(_DWORD *)v108 = (v84 & 0x7300) != 0;
      *(_WORD *)&v108[4] = 2048;
      *(double *)&v108[6] = v4;
      uint64_t v72 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onMotionStateNotification(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v72);
      if (v72 != buf) {
        free(v72);
      }
      char v23 = v83;
    }
    double v47 = CFAbsoluteTimeGetCurrent() - *(double *)&qword_1024808D0;
    int v48 = v84 & 0x7300;
    BOOL v49 = v48 != 0;
    if (byte_1024808C8) {
      BOOL v49 = 0;
    }
    BOOL v50 = v47 > 1800.0 && v49;
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EDE38);
    }
    int v51 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      CFAbsoluteTime v52 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v84;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v82;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&buf[16] = v52 - *(double *)&qword_1024808D0;
      __int16 v114 = 1024;
      int v115 = byte_1024808C8;
      __int16 v116 = 1024;
      BOOL v117 = v50;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] motion state update: motionState,%d,vehicleType,%d,timeSinceLastPopup,%f,wasVehicular,%d,shouldShowTTR,%d", buf, 0x24u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      CFAbsoluteTime v73 = CFAbsoluteTimeGetCurrent();
      int v107 = 67110144;
      *(_DWORD *)v108 = v84;
      *(_WORD *)&v108[4] = 1024;
      *(_DWORD *)&v108[6] = v82;
      *(_WORD *)&v108[10] = 2048;
      *(double *)&v108[12] = v73 - *(double *)&qword_1024808D0;
      __int16 v109 = 1024;
      int v110 = byte_1024808C8;
      __int16 v111 = 1024;
      BOOL v112 = v50;
      uint64_t v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onMotionStateNotification(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v74);
      if (v74 != buf) {
        free(v74);
      }
      char v23 = v83;
      if (!v50) {
        goto LABEL_75;
      }
    }
    else if (!v50)
    {
LABEL_75:
      byte_1024808C8 = v48 != 0;
      return sub_101706914((PB::Base *)v85);
    }
    qword_1024808D0 = CFAbsoluteTimeGetCurrent();
    uint64_t v53 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v3];
    uint64_t v54 = objc_opt_new();
    [v54 setDateStyle:1];
    [v54 setTimeStyle:2];
    [v54 setLocale:[objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US"]];
    id v55 = (id)objc_opt_new();
    [v55 appendString:@"(Response logged in MSL)\n\nVehicle State Detected:\n"];
    [v55 appendString:[v54 stringFromDate:v53]];
    if (v23) {
      [v55 appendString:@"\nmotion hint"];
    }
    if ((v23 & 2) != 0) {
      [v55 appendString:@"\ngps hint"];
    }
    if ((v23 & 4) != 0) {
      [v55 appendString:@"\nbaseband hint"];
    }
    if ((v23 & 8) != 0) {
      [v55 appendString:@"\nwifi hint"];
    }
    if ((v23 & 0x10) != 0) {
      [v55 appendString:@"\nbt hint"];
    }
    while (*((void *)&xmmword_102480888 + 1))
    {
      uint64_t v56 = *(void *)(qword_102480870 + (((unint64_t)xmmword_102480888 >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * xmmword_102480888;
      char v57 = *(__CFUserNotification **)v56;
      uint64_t v58 = *(void *)(v56 + 8);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      uint64_t v59 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v58;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] Popping pending notification: %f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022EDE38);
        }
        int v107 = 134217984;
        *(void *)v108 = v58;
        uint64_t v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v60);
        if (v60 != buf) {
          free(v60);
        }
      }
      CFUserNotificationCancel(v57);
      CFRelease(v57);
      xmmword_102480888 = (__int128)vaddq_s64((int64x2_t)xmmword_102480888, (int64x2_t)xmmword_101D0A740);
      sub_100096314((uint64_t)&qword_102480868, 1);
    }
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EDE38);
    }
    uint64_t v61 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v82;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] Creating vehicle notification,%f type:%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      int v107 = 134218240;
      *(double *)v108 = v3;
      *(_WORD *)&v108[8] = 1024;
      *(_DWORD *)&v108[10] = v82;
      v75 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v75);
      if (v75 != buf) {
        free(v75);
      }
    }
    id v62 = objc_alloc_init((Class)NSMutableDictionary);
    if (v82 == 3) {
      CFStringRef v63 = @"Are you riding a motorcycle? \n🏍️";
    }
    else {
      CFStringRef v63 = @"Are you in a vehicle? \n🚗";
    }
    [v62 setObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", v63), kCFUserNotificationAlertHeaderKey forKeyedSubscript];
    [v62 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v82)] forKeyedSubscript:@"vehicleType"];
    [v62 setObject:@"Yes" forKeyedSubscript:kCFUserNotificationAlternateButtonTitleKey];
    [v62 setObject:@"No" forKeyedSubscript:kCFUserNotificationOtherButtonTitleKey];
    [v62 setObject:@"File Radar" forKeyedSubscript:kCFUserNotificationDefaultButtonTitleKey];
    [v62 setObject:v55 forKeyedSubscript:kCFUserNotificationAlertMessageKey];
    CFUserNotificationRef v64 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, 0, (CFDictionaryRef)v62);

    if (v64)
    {
      *(void *)long long buf = v64;
      *(double *)&buf[8] = v3;
      sub_100C32D1C(&qword_102480868, (__n128 *)buf);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      uint64_t v65 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = *((void *)&xmmword_102480888 + 1);
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] pending notifications count: %lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022EDE38);
        }
        int v107 = 134217984;
        *(void *)v108 = *((void *)&xmmword_102480888 + 1);
        v76 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v76);
        if (v76 != buf) {
          free(v76);
        }
      }
      CFRetain(v64);
      if (v82 == 3) {
        uint64_t v66 = sub_100C32DA8;
      }
      else {
        uint64_t v66 = sub_100C32DB0;
      }
      CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v64, (CFUserNotificationCallBack)v66, 0);
      if (RunLoopSource)
      {
        uint64_t v68 = (__CFRunLoop *)sub_1001C2710();
        CFRunLoopAddSource(v68, RunLoopSource, kCFRunLoopCommonModes);
        CFRelease(RunLoopSource);
        CFRelease(v64);
        goto LABEL_75;
      }
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      v70 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, "[VehicleDetectionAlert] Could not create runloop source for Vehicle user notification", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_75;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419010 == -1)
      {
LABEL_97:
        LOWORD(v107) = 0;
        v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v77);
        if (v77 != buf) {
          free(v77);
        }
        int v48 = v84 & 0x7300;
        goto LABEL_75;
      }
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      uint64_t v69 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_FAULT, "[VehicleDetectionAlert] Could not create Vehicle user notification", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_75;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419010 == -1) {
        goto LABEL_97;
      }
    }
    dispatch_once(&qword_102419010, &stru_1022EDE38);
    goto LABEL_97;
  }
  return sub_101706914((PB::Base *)v85);
}

void sub_100C25528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C25570(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  switch(*a3)
  {
    case 3:
    case 7:
      long long v5 = a4[1];
      long long v59 = *a4;
      *(_OWORD *)uint64_t v60 = v5;
      long long v6 = a4[3];
      *(_OWORD *)&v60[16] = a4[2];
      *(_OWORD *)&v60[32] = v6;
      uint64_t v72 = off_1022E7770;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      long long v74 = v59;
      uint64_t v75 = *(void *)v60;
      int v76 = *(_DWORD *)&v60[24];
      uint64_t v7 = sub_101282D9C();
      sub_10128431C(v7, (uint64_t)&v72);
      sub_10170140C(v67);
      v71 |= 1u;
      CFAbsoluteTime v68 = Current;
      sub_10176341C((uint64_t)&v59, (uint64_t)v66);
      operator new();
    case 4:
      *(void *)&long long v59 = off_1022E75B8;
      *((void *)&v59 + 1) = CFAbsoluteTimeGetCurrent();
      long long v8 = a4[1];
      *(_OWORD *)&v60[8] = *a4;
      *(_OWORD *)&v60[24] = v8;
      long long v9 = a4[3];
      *(_OWORD *)&v60[40] = a4[2];
      long long v61 = v9;
      *(int32x2_t *)&long long v9 = vrev64_s32((int32x2_t)a4[5]);
      uint64_t v62 = *((void *)a4 + 8);
      uint64_t v63 = v9;
      long long v10 = a4[7];
      long long v64 = a4[6];
      long long v65 = v10;
      uint64_t v11 = sub_101282D9C();
      sub_10128431C(v11, (uint64_t)&v59);
      sub_10170140C(v67);
      sub_101727EA8((uint64_t)v67);
      v71 |= 1u;
      CFAbsoluteTime v68 = *((double *)&v59 + 1);
      sub_10177E2D0(v70);
      uint64_t v12 = *(void *)(v70 + 72);
      uint64_t v13 = *(void *)a4;
      *(_WORD *)(v12 + 100) |= 0x80u;
      *(void *)(v12 + 64) = v13;
      uint64_t v14 = *(void *)(v70 + 72);
      uint64_t v15 = *((void *)a4 + 1);
      *(_WORD *)(v14 + 100) |= 2u;
      *(void *)(v14 + 16) = v15;
      uint64_t v16 = *(void *)(v70 + 72);
      uint64_t v17 = *((void *)a4 + 2);
      *(_WORD *)(v16 + 100) |= 1u;
      *(void *)(v16 + 8) = v17;
      uint64_t v18 = *(void *)(v70 + 72);
      uint64_t v19 = *((void *)a4 + 3);
      *(_WORD *)(v18 + 100) |= 4u;
      *(void *)(v18 + 24) = v19;
      uint64_t v20 = *(void *)(v70 + 72);
      uint64_t v21 = *((void *)a4 + 4);
      *(_WORD *)(v20 + 100) |= 0x40u;
      *(void *)(v20 + 56) = v21;
      uint64_t v22 = *(void *)(v70 + 72);
      uint64_t v23 = *((void *)a4 + 5);
      *(_WORD *)(v22 + 100) |= 0x20u;
      *(void *)(v22 + 48) = v23;
      uint64_t v24 = *(void *)(v70 + 72);
      uint64_t v25 = *((void *)a4 + 6);
      *(_WORD *)(v24 + 100) |= 0x10u;
      *(void *)(v24 + 40) = v25;
      uint64_t v26 = *(void *)(v70 + 72);
      uint64_t v27 = *((void *)a4 + 7);
      *(_WORD *)(v26 + 100) |= 8u;
      *(void *)(v26 + 32) = v27;
      uint64_t v28 = *(void *)(v70 + 72);
      uint64_t v29 = *((void *)a4 + 8);
      *(_WORD *)(v28 + 100) |= 0x100u;
      *(void *)(v28 + 72) = v29;
      uint64_t v30 = *(void *)(v70 + 72);
      int v31 = *((_DWORD *)a4 + 21);
      *(_WORD *)(v30 + 100) |= 0x400u;
      *(_DWORD *)(v30 + 84) = v31;
      uint64_t v32 = *(void *)(v70 + 72);
      int v33 = *((_DWORD *)a4 + 20);
      *(_WORD *)(v32 + 100) |= 0x800u;
      *(_DWORD *)(v32 + 88) = v33;
      uint64_t v34 = *(void *)(v70 + 72);
      LOBYTE(v33) = *((unsigned char *)a4 + 168);
      *(_WORD *)(v34 + 100) |= 0x2000u;
      *(unsigned char *)(v34 + 96) = v33;
      uint64_t v35 = v70;
      uint64_t v36 = *((void *)a4 + 12);
      *(unsigned char *)(v70 + 80) |= 4u;
      *(void *)(v35 + 24) = v36;
      uint64_t v37 = v70;
      uint64_t v38 = *((void *)a4 + 13);
      *(unsigned char *)(v70 + 80) |= 8u;
      *(void *)(v37 + 32) = v38;
      uint64_t v39 = v70;
      uint64_t v40 = *((void *)a4 + 14);
      *(unsigned char *)(v70 + 80) |= 0x40u;
      *(void *)(v39 + 56) = v40;
      uint64_t v41 = v70;
      uint64_t v42 = *((void *)a4 + 15);
      *(unsigned char *)(v70 + 80) |= 0x80u;
      *(void *)(v41 + 64) = v42;
      uint64_t v43 = v70;
      uint64_t v44 = *((void *)a4 + 16);
      *(unsigned char *)(v70 + 80) |= 2u;
      *(void *)(v43 + 16) = v44;
      uint64_t v45 = v70;
      uint64_t v46 = *((void *)a4 + 17);
      *(unsigned char *)(v70 + 80) |= 1u;
      *(void *)(v45 + 8) = v46;
      uint64_t v47 = v70;
      uint64_t v48 = *((void *)a4 + 18);
      *(unsigned char *)(v70 + 80) |= 0x20u;
      *(void *)(v47 + 48) = v48;
      uint64_t v49 = v70;
      uint64_t v50 = *((void *)a4 + 19);
      *(unsigned char *)(v70 + 80) |= 0x10u;
      *(void *)(v49 + 40) = v50;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v51 = qword_10248AF90;
      if (qword_10248AF90) {
        goto LABEL_10;
      }
      goto LABEL_11;
    case 5:
      *(void *)&long long v59 = off_1022E77C8;
      CFAbsoluteTime v52 = CFAbsoluteTimeGetCurrent();
      uint64_t v53 = *(void *)a4;
      *((CFAbsoluteTime *)&v59 + 1) = v52;
      *(void *)&v60[8] = v53;
      *(_DWORD *)&v60[16] = *((_DWORD *)a4 + 2);
      uint64_t v54 = sub_101282D9C();
      sub_10128431C(v54, (uint64_t)&v59);
      sub_10170140C(v67);
      sub_1017277E8((uint64_t)v67);
      v71 |= 1u;
      CFAbsoluteTime v68 = *((double *)&v59 + 1);
      uint64_t v55 = v69;
      uint64_t v56 = *(void *)a4;
      *(unsigned char *)(v69 + 20) |= 1u;
      *(void *)(v55 + 8) = v56;
      uint64_t v57 = v69;
      int v58 = *((_DWORD *)a4 + 2);
      *(unsigned char *)(v69 + 20) |= 2u;
      *(_DWORD *)(v57 + 16) = v58;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v51 = qword_10248AF90;
      if (qword_10248AF90) {
LABEL_10:
      }
        sub_1019E5150(v51, (uint64_t)v67);
LABEL_11:
      sub_101706914((PB::Base *)v67);
      break;
    default:
      return;
  }
}

void sub_100C25AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_100C25B1C(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5 = *a3;
  if (*a3 == 10)
  {
    sub_10170140C(v52);
    sub_101726828((uint64_t)v52);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v57 |= 1u;
    CFAbsoluteTime v54 = Current;
    sub_10173E6B0(v56);
    uint64_t v26 = *(void *)(v56 + 8);
    int v27 = *a4;
    *(_WORD *)(v26 + 68) |= 0x40u;
    *(_DWORD *)(v26 + 52) = v27;
    uint64_t v28 = *(void *)(v56 + 8);
    int v29 = a4[1];
    *(_WORD *)(v28 + 68) |= 0x80u;
    *(_DWORD *)(v28 + 56) = v29;
    uint64_t v30 = *(void *)(v56 + 8);
    uint64_t v31 = *((void *)a4 + 1);
    *(_WORD *)(v30 + 68) |= 2u;
    *(void *)(v30 + 16) = v31;
    uint64_t v32 = *(void *)(v56 + 8);
    uint64_t v33 = *((void *)a4 + 2);
    *(_WORD *)(v32 + 68) |= 1u;
    *(void *)(v32 + 8) = v33;
    uint64_t v34 = *(void *)(v56 + 8);
    LOBYTE(v29) = *((unsigned char *)a4 + 24);
    *(_WORD *)(v34 + 68) |= 0x200u;
    *(unsigned char *)(v34 + 64) = v29;
    uint64_t v35 = *(void *)(v56 + 8);
    uint64_t v36 = *((void *)a4 + 4);
    *(_WORD *)(v35 + 68) |= 0x10u;
    *(void *)(v35 + 40) = v36;
    uint64_t v37 = *(void *)(v56 + 8);
    uint64_t v38 = *((void *)a4 + 5);
    *(_WORD *)(v37 + 68) |= 8u;
    *(void *)(v37 + 32) = v38;
    uint64_t v39 = *(void *)(v56 + 8);
    uint64_t v40 = *((void *)a4 + 6);
    *(_WORD *)(v39 + 68) |= 4u;
    *(void *)(v39 + 24) = v40;
    uint64_t v41 = *(void *)(v56 + 8);
    int v42 = a4[14];
    *(_WORD *)(v41 + 68) |= 0x20u;
    *(_DWORD *)(v41 + 48) = v42;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    uint64_t v24 = qword_10248AF90;
    if (!qword_10248AF90) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v5 == 6)
  {
    sub_10170140C(v52);
    CFAbsoluteTime v43 = CFAbsoluteTimeGetCurrent();
    v57 |= 1u;
    CFAbsoluteTime v54 = v43;
    sub_1017241E8((uint64_t)v52);
    uint64_t v44 = v53;
    uint64_t v45 = *(void *)a4;
    *(unsigned char *)(v53 + 36) |= 4u;
    *(void *)(v44 + 24) = v45;
    uint64_t v46 = v53;
    uint64_t v47 = *((void *)a4 + 1);
    *(unsigned char *)(v53 + 36) |= 1u;
    *(void *)(v46 + 8) = v47;
    uint64_t v48 = v53;
    uint64_t v49 = *((void *)a4 + 2);
    *(unsigned char *)(v53 + 36) |= 2u;
    *(void *)(v48 + 16) = v49;
    uint64_t v50 = v53;
    int v51 = a4[6];
    *(unsigned char *)(v53 + 36) |= 8u;
    *(_DWORD *)(v50 + 32) = v51;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    uint64_t v24 = qword_10248AF90;
    if (!qword_10248AF90) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v5 != 5) {
    return;
  }
  int v58 = off_1022E7878;
  CFAbsoluteTime v59 = CFAbsoluteTimeGetCurrent();
  uint64_t v60 = *(void *)a4;
  long long v61 = *(_OWORD *)(a4 + 2);
  char v62 = *((unsigned char *)a4 + 24);
  long long v63 = *((_OWORD *)a4 + 2);
  uint64_t v64 = *((void *)a4 + 6);
  BOOL v65 = a4[14] == 5;
  uint64_t v6 = sub_101282D9C();
  sub_10128431C(v6, (uint64_t)&v58);
  sub_10170140C(v52);
  sub_101727758((uint64_t)v52);
  v57 |= 1u;
  CFAbsoluteTime v54 = v59;
  sub_10173E6B0(v55);
  uint64_t v7 = *(void *)(v55 + 8);
  int v8 = *a4;
  *(_WORD *)(v7 + 68) |= 0x40u;
  *(_DWORD *)(v7 + 52) = v8;
  uint64_t v9 = *(void *)(v55 + 8);
  int v10 = a4[1];
  *(_WORD *)(v9 + 68) |= 0x80u;
  *(_DWORD *)(v9 + 56) = v10;
  uint64_t v11 = *(void *)(v55 + 8);
  uint64_t v12 = *((void *)a4 + 1);
  *(_WORD *)(v11 + 68) |= 2u;
  *(void *)(v11 + 16) = v12;
  uint64_t v13 = *(void *)(v55 + 8);
  uint64_t v14 = *((void *)a4 + 2);
  *(_WORD *)(v13 + 68) |= 1u;
  *(void *)(v13 + 8) = v14;
  uint64_t v15 = *(void *)(v55 + 8);
  LOBYTE(v10) = *((unsigned char *)a4 + 24);
  *(_WORD *)(v15 + 68) |= 0x200u;
  *(unsigned char *)(v15 + 64) = v10;
  uint64_t v16 = *(void *)(v55 + 8);
  uint64_t v17 = *((void *)a4 + 4);
  *(_WORD *)(v16 + 68) |= 0x10u;
  *(void *)(v16 + 40) = v17;
  uint64_t v18 = *(void *)(v55 + 8);
  uint64_t v19 = *((void *)a4 + 5);
  *(_WORD *)(v18 + 68) |= 8u;
  *(void *)(v18 + 32) = v19;
  uint64_t v20 = *(void *)(v55 + 8);
  uint64_t v21 = *((void *)a4 + 6);
  *(_WORD *)(v20 + 68) |= 4u;
  *(void *)(v20 + 24) = v21;
  uint64_t v22 = *(void *)(v55 + 8);
  int v23 = a4[14];
  *(_WORD *)(v22 + 68) |= 0x20u;
  *(_DWORD *)(v22 + 48) = v23;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  uint64_t v24 = qword_10248AF90;
  if (qword_10248AF90) {
LABEL_15:
  }
    sub_1019E5150(v24, (uint64_t)v52);
LABEL_16:
  sub_101706914((PB::Base *)v52);
}

void sub_100C25F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C25FB0(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if (!*a3)
  {
    uint64_t v20 = off_1022E6C98;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v6 = *a4;
    double v7 = a4[1];
    CFAbsoluteTime v21 = Current;
    double v22 = v6;
    double v23 = v7;
    BOOL v8 = v6 > 0.0;
    if (v7 >= 0.0) {
      BOOL v8 = 0;
    }
    BOOL v24 = v8;
    uint64_t v9 = sub_101282D9C();
    sub_10128431C(v9, (uint64_t)&v20);
    sub_10170140C(v16);
    sub_101727248((uint64_t)v16);
    v19 |= 1u;
    CFAbsoluteTime v18 = v21;
    uint64_t v10 = v17;
    double v11 = *a4;
    *(unsigned char *)(v17 + 28) |= 2u;
    *(double *)(v10 + 16) = v11;
    uint64_t v12 = v17;
    uint64_t v13 = *((void *)a4 + 1);
    *(unsigned char *)(v17 + 28) |= 1u;
    *(void *)(v12 + 8) = v13;
    uint64_t v14 = v17;
    BOOL v15 = *a4 > 0.0;
    if (a4[1] >= 0.0) {
      BOOL v15 = 0;
    }
    *(unsigned char *)(v17 + 28) |= 4u;
    *(unsigned char *)(v14 + 24) = v15;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v16);
    }
    sub_101706914((PB::Base *)v16);
  }
}

void sub_100C260F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C26110(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 5 || *a3 == 0)
  {
    double v8 = *(double *)(a4 + 4);
    double v9 = *(double *)(a4 + 12);
    if (*(unsigned char *)(a1 + 1748))
    {
      float v10 = __exp10((float)*(int *)(a1 + 1752));
      double v8 = round(v8 * v10) / v10;
      float v11 = __exp10((float)*(int *)(a1 + 1752));
      double v9 = round(v9 * v11) / v11;
    }
    CFAbsoluteTime v73 = off_1022E78D0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v13 = *(void *)(a4 + 76);
    CFAbsoluteTime v74 = Current;
    uint64_t v75 = v13;
    double v76 = v8;
    long long v78 = *(_OWORD *)(a4 + 44);
    uint64_t v79 = *(void *)(a4 + 20);
    long long v80 = *(_OWORD *)(a4 + 60);
    long long v81 = *(_OWORD *)(a4 + 28);
    uint64_t v14 = *(void *)(a4 + 176);
    uint64_t v83 = *(void *)(a4 + 184);
    int v84 = *(_DWORD *)(a4 + 476);
    uint64_t v86 = *(void *)(a4 + 200);
    int v87 = *(_DWORD *)(a4 + 208);
    long long v88 = *(_OWORD *)(a4 + 160);
    double v77 = v9;
    int v82 = *(_DWORD *)(a4 + 96);
    int v85 = *(_DWORD *)(a4 + 472);
    uint64_t v89 = v14;
    int v90 = *(_DWORD *)(a4 + 512);
    uint64_t v15 = sub_101282D9C();
    sub_10128431C(v15, (uint64_t)&v73);
    sub_10170140C(buf);
    sub_101727878((uint64_t)buf);
    v72 |= 1u;
    CFAbsoluteTime v70 = v74;
    uint64_t v16 = v71;
    uint64_t v17 = *(void *)(a4 + 76);
    *(_DWORD *)(v71 + 180) |= 0x800u;
    *(void *)(v16 + 96) = v17;
    uint64_t v18 = v71;
    *(_DWORD *)(v71 + 180) |= 0x40u;
    *(double *)(v18 + 56) = v8;
    uint64_t v19 = v71;
    *(_DWORD *)(v71 + 180) |= 0x80u;
    *(double *)(v19 + 64) = v9;
    uint64_t v20 = v71;
    uint64_t v21 = *(void *)(a4 + 44);
    *(_DWORD *)(v71 + 180) |= 0x200u;
    *(void *)(v20 + 80) = v21;
    uint64_t v22 = v71;
    uint64_t v23 = *(void *)(a4 + 52);
    *(_DWORD *)(v71 + 180) |= 0x400u;
    *(void *)(v22 + 88) = v23;
    uint64_t v24 = v71;
    uint64_t v25 = *(void *)(a4 + 20);
    *(_DWORD *)(v71 + 180) |= 0x20u;
    *(void *)(v24 + 48) = v25;
    uint64_t v26 = v71;
    uint64_t v27 = *(void *)(a4 + 60);
    *(_DWORD *)(v71 + 180) |= 2u;
    *(void *)(v26 + 16) = v27;
    uint64_t v28 = v71;
    uint64_t v29 = *(void *)(a4 + 68);
    *(_DWORD *)(v71 + 180) |= 4u;
    *(void *)(v28 + 24) = v29;
    uint64_t v30 = v71;
    uint64_t v31 = *(void *)(a4 + 28);
    *(_DWORD *)(v71 + 180) |= 1u;
    *(void *)(v30 + 8) = v31;
    uint64_t v32 = v71;
    uint64_t v33 = *(void *)(a4 + 36);
    *(_DWORD *)(v71 + 180) |= 0x2000u;
    *(void *)(v32 + 120) = v33;
    uint64_t v34 = v71;
    int v35 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)(v71 + 180) |= 0x800000u;
    *(_DWORD *)(v34 + 164) = v35;
    uint64_t v36 = v71;
    uint64_t v37 = *(void *)(a4 + 184);
    *(_DWORD *)(v71 + 180) |= 0x1000u;
    *(void *)(v36 + 104) = v37;
    uint64_t v38 = v71;
    LODWORD(v37) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(v71 + 180) |= 0x1000000u;
    *(_DWORD *)(v38 + 168) = v37;
    uint64_t v39 = v71;
    int v40 = *(_DWORD *)(a4 + 472);
    *(_DWORD *)(v71 + 180) |= 0x2000000u;
    *(_DWORD *)(v39 + 172) = v40;
    uint64_t v41 = v71;
    LODWORD(v37) = *(_DWORD *)(a4 + 200);
    *(_DWORD *)(v71 + 180) |= 0x20000u;
    *(_DWORD *)(v41 + 140) = v37;
    uint64_t v42 = v71;
    LODWORD(v37) = *(_DWORD *)(a4 + 204);
    *(_DWORD *)(v71 + 180) |= 0x80000u;
    *(_DWORD *)(v42 + 148) = v37;
    uint64_t v43 = v71;
    LODWORD(v37) = *(_DWORD *)(a4 + 208);
    *(_DWORD *)(v71 + 180) |= 0x40000u;
    *(_DWORD *)(v43 + 144) = v37;
    uint64_t v44 = v71;
    uint64_t v45 = *(void *)(a4 + 160);
    *(_DWORD *)(v71 + 180) |= 0x100u;
    *(void *)(v44 + 72) = v45;
    uint64_t v46 = v71;
    uint64_t v47 = *(void *)(a4 + 168);
    *(_DWORD *)(v71 + 180) |= 8u;
    *(void *)(v46 + 32) = v47;
    uint64_t v48 = v71;
    uint64_t v49 = *(void *)(a4 + 176);
    *(_DWORD *)(v71 + 180) |= 0x10u;
    *(void *)(v48 + 40) = v49;
    uint64_t v50 = v71;
    int v51 = *(_DWORD *)(a4 + 512);
    *(_DWORD *)(v71 + 180) |= 0x200000u;
    *(_DWORD *)(v50 + 156) = v51;
    uint64_t v52 = v71;
    uint64_t v53 = *(void *)(a1 + 2096);
    *(_DWORD *)(v71 + 180) |= 0x10000u;
    *(_DWORD *)(v52 + 136) = v53;
    uint64_t v54 = v71;
    LODWORD(v53) = *a3;
    *(_DWORD *)(v71 + 180) |= 0x100000u;
    *(_DWORD *)(v54 + 152) = v53;
    sub_101744918((uint64_t)v61);
    int v55 = *(_DWORD *)(a4 + 408);
    uint64_t v64 = *(void *)(a4 + 424);
    int v63 = *(_DWORD *)(a4 + 432);
    int v56 = *(_DWORD *)(a4 + 436);
    int v65 = v55;
    int v66 = v56;
    uint64_t v62 = *(void *)(a4 + 440);
    LOBYTE(v55) = *(unsigned char *)(a4 + 448);
    v68 |= 0x7Fu;
    char v67 = v55;
    operator new();
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  char v57 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
  {
    int v58 = *a3;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v58;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "MotionLogger: Unexpected LocationNotification=%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    int v59 = *a3;
    LODWORD(v73) = 67109120;
    HIDWORD(v73) = v59;
    uint64_t v60 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionLogger::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v60);
    if (v60 != (char *)buf) {
      free(v60);
    }
  }
}

void sub_100C26718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  PB::Base::~Base((PB::Base *)va);
  sub_101706914((PB::Base *)va1);
  _Unwind_Resume(a1);
}

void sub_100C26748(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v6 = v1;
  double v7 = *(double *)(v2 + 4);
  double v8 = *(double *)(v2 + 12);
  if (*(unsigned char *)(v1 + 1748))
  {
    float v9 = __exp10((float)*(int *)(v1 + 1752));
    double v7 = round(v7 * v9) / v9;
    float v10 = __exp10((float)*(int *)(v6 + 1752));
    double v8 = round(v8 * v10) / v10;
  }
  int v11 = *v5;
  if (*v5 <= 22)
  {
    if (v11 != 4)
    {
      if (v11 == 22)
      {
        uint64_t v12 = *(int **)(v3 + 800);
        if (v12)
        {
          if (sub_1010FB9FC(v12))
          {
            unint64_t v13 = 0;
            uint64_t v14 = 52;
            uint64_t v15 = 316;
            do
            {
              uint64_t v16 = sub_1002D4CD0(*(void *)(v3 + 800));
              uint64_t v17 = sub_1000E9360(*(void *)(v3 + 800));
              double v19 = *(double *)(v16 + v14 - 48);
              double v18 = *(double *)(v16 + v14 - 40);
              if (*(unsigned char *)(v6 + 1748))
              {
                float v20 = __exp10((float)*(int *)(v6 + 1752));
                double v19 = round(v19 * v20) / v20;
                float v21 = __exp10((float)*(int *)(v6 + 1752));
                double v18 = round(v18 * v21) / v21;
              }
              v208 = off_1022E7928;
              CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
              uint64_t v22 = v16 + v14;
              uint64_t v210 = *(void *)(v16 + v14 + 24);
              long long v211 = *(_OWORD *)(v16 + v14 - 48);
              long long v212 = *(_OWORD *)(v16 + v14 - 8);
              uint64_t v213 = *(void *)(v16 + v14 - 32);
              long long v214 = *(_OWORD *)(v16 + v14 + 8);
              long long v215 = *(_OWORD *)(v16 + v14 - 24);
              int v216 = *(_DWORD *)(v16 + v14 + 44);
              uint64_t v23 = (_DWORD *)(v17 + v15);
              uint64_t v24 = (uint64_t *)(v17 + v15 - 292);
              uint64_t v217 = *v24;
              int v218 = *(_DWORD *)(v17 + v15);
              int v219 = -1;
              uint64_t v25 = (uint64_t *)(v17 + v15 - 276);
              uint64_t v220 = *v25;
              uint64_t v26 = (int *)(v17 + v15 - 268);
              int v221 = *v26;
              uint64_t v27 = sub_101282D9C();
              sub_10128431C(v27, (uint64_t)&v208);
              sub_10170140C(v243);
              sub_101727908((uint64_t)v243);
              v248 |= 1u;
              CFAbsoluteTime v245 = Current;
              sub_101778C5C(v247);
              uint64_t v28 = *(void *)(v247 + 8);
              uint64_t v29 = *(void *)(v22 + 24);
              *(_DWORD *)(v28 + 180) |= 0x800u;
              *(void *)(v28 + 96) = v29;
              uint64_t v30 = *(void *)(v247 + 8);
              *(_DWORD *)(v30 + 180) |= 0x40u;
              *(double *)(v30 + 56) = v19;
              uint64_t v31 = *(void *)(v247 + 8);
              *(_DWORD *)(v31 + 180) |= 0x80u;
              *(double *)(v31 + 64) = v18;
              uint64_t v32 = *(void *)(v247 + 8);
              uint64_t v33 = *(void *)(v22 - 8);
              *(_DWORD *)(v32 + 180) |= 0x200u;
              *(void *)(v32 + 80) = v33;
              uint64_t v34 = *(void *)(v247 + 8);
              uint64_t v35 = *(void *)v22;
              *(_DWORD *)(v34 + 180) |= 0x400u;
              *(void *)(v34 + 88) = v35;
              uint64_t v36 = *(void *)(v247 + 8);
              uint64_t v37 = *(void *)(v22 - 32);
              *(_DWORD *)(v36 + 180) |= 0x20u;
              *(void *)(v36 + 48) = v37;
              uint64_t v38 = *(void *)(v247 + 8);
              uint64_t v39 = *(void *)(v22 + 8);
              *(_DWORD *)(v38 + 180) |= 2u;
              *(void *)(v38 + 16) = v39;
              uint64_t v40 = *(void *)(v247 + 8);
              uint64_t v41 = *(void *)(v22 + 16);
              *(_DWORD *)(v40 + 180) |= 4u;
              *(void *)(v40 + 24) = v41;
              uint64_t v42 = *(void *)(v247 + 8);
              uint64_t v43 = *(void *)(v22 - 24);
              *(_DWORD *)(v42 + 180) |= 1u;
              *(void *)(v42 + 8) = v43;
              uint64_t v44 = *(void *)(v247 + 8);
              uint64_t v45 = *(void *)(v22 - 16);
              *(_DWORD *)(v44 + 180) |= 0x2000u;
              *(void *)(v44 + 120) = v45;
              uint64_t v46 = *(void *)(v247 + 8);
              int v47 = *(_DWORD *)(v22 + 44);
              *(_DWORD *)(v46 + 180) |= 0x800000u;
              *(_DWORD *)(v46 + 164) = v47;
              uint64_t v48 = *(void *)(v247 + 8);
              uint64_t v49 = *v24;
              *(_DWORD *)(v48 + 180) |= 0x1000u;
              *(void *)(v48 + 104) = v49;
              uint64_t v50 = *(void *)(v247 + 8);
              LODWORD(v49) = *v23;
              *(_DWORD *)(v50 + 180) |= 0x1000000u;
              *(_DWORD *)(v50 + 168) = v49;
              uint64_t v51 = *(void *)(v247 + 8);
              *(_DWORD *)(v51 + 180) |= 0x2000000u;
              *(_DWORD *)(v51 + 172) = -1;
              uint64_t v52 = *(void *)(v247 + 8);
              LODWORD(v49) = *(_DWORD *)v25;
              *(_DWORD *)(v52 + 180) |= 0x20000u;
              *(_DWORD *)(v52 + 140) = v49;
              uint64_t v53 = *(void *)(v247 + 8);
              LODWORD(v49) = *(v23 - 68);
              *(_DWORD *)(v53 + 180) |= 0x80000u;
              *(_DWORD *)(v53 + 148) = v49;
              uint64_t v54 = *(void *)(v247 + 8);
              LODWORD(v49) = *v26;
              *(_DWORD *)(v54 + 180) |= 0x40000u;
              *(_DWORD *)(v54 + 144) = v49;
              if (qword_10248AF88 != -1) {
                dispatch_once(&qword_10248AF88, &stru_1022EDD18);
              }
              if (qword_10248AF90) {
                sub_1019E5150(qword_10248AF90, (uint64_t)v243);
              }
              sub_101706914((PB::Base *)v243);
              ++v13;
              v14 += 156;
              v15 += 560;
            }
            while (v13 < sub_1010FB9FC(*(int **)(v3 + 800)));
          }
        }
      }
      return;
    }
    sub_10170140C(v243);
    sub_101724AE8((uint64_t)v243);
    CFAbsoluteTime v113 = CFAbsoluteTimeGetCurrent();
    v248 |= 1u;
    CFAbsoluteTime v245 = v113;
    uint64_t v114 = v246;
    uint64_t v115 = *(void *)(v3 + 76);
    *(_DWORD *)(v246 + 220) |= 0x40000u;
    *(void *)(v114 + 152) = v115;
    uint64_t v116 = v246;
    *(_DWORD *)(v246 + 220) |= 0x100u;
    *(double *)(v116 + 72) = v7;
    uint64_t v117 = v246;
    *(_DWORD *)(v246 + 220) |= 0x200u;
    *(double *)(v117 + 80) = v8;
    uint64_t v118 = v246;
    uint64_t v119 = *(void *)(v3 + 44);
    *(_DWORD *)(v246 + 220) |= 0x10000u;
    *(void *)(v118 + 136) = v119;
    uint64_t v120 = v246;
    uint64_t v121 = *(void *)(v3 + 52);
    *(_DWORD *)(v246 + 220) |= 0x20000u;
    *(void *)(v120 + 144) = v121;
    uint64_t v122 = v246;
    uint64_t v123 = *(void *)(v3 + 20);
    *(_DWORD *)(v246 + 220) |= 0x80u;
    *(void *)(v122 + 64) = v123;
    uint64_t v124 = v246;
    uint64_t v125 = *(void *)(v3 + 60);
    *(_DWORD *)(v246 + 220) |= 2u;
    *(void *)(v124 + 16) = v125;
    uint64_t v126 = v246;
    uint64_t v127 = *(void *)(v3 + 68);
    *(_DWORD *)(v246 + 220) |= 4u;
    *(void *)(v126 + 24) = v127;
    uint64_t v128 = v246;
    uint64_t v129 = *(void *)(v3 + 28);
    *(_DWORD *)(v246 + 220) |= 1u;
    *(void *)(v128 + 8) = v129;
    uint64_t v130 = v246;
    uint64_t v131 = *(void *)(v3 + 36);
    *(_DWORD *)(v246 + 220) |= 0x100000u;
    *(void *)(v130 + 168) = v131;
    uint64_t v132 = v246;
    int v133 = *(_DWORD *)(v3 + 96);
    *(_DWORD *)(v246 + 220) |= 0x10000000u;
    *(_DWORD *)(v132 + 204) = v133;
    uint64_t v134 = v246;
    uint64_t v135 = *(void *)(v3 + 184);
    *(_DWORD *)(v246 + 220) |= 0x80000u;
    *(void *)(v134 + 160) = v135;
    uint64_t v136 = v246;
    LODWORD(v135) = *(_DWORD *)(v3 + 476);
    *(_DWORD *)(v246 + 220) |= 0x20000000u;
    *(_DWORD *)(v136 + 208) = v135;
    uint64_t v137 = v246;
    int v138 = *(_DWORD *)(v3 + 472);
    *(_DWORD *)(v246 + 220) |= 0x40000000u;
    *(_DWORD *)(v137 + 212) = v138;
    uint64_t v139 = v246;
    LODWORD(v135) = *(_DWORD *)(v3 + 200);
    *(_DWORD *)(v246 + 220) |= 0x200000u;
    *(_DWORD *)(v139 + 176) = v135;
    uint64_t v140 = v246;
    LODWORD(v135) = *(_DWORD *)(v3 + 204);
    *(_DWORD *)(v246 + 220) |= 0x800000u;
    *(_DWORD *)(v140 + 184) = v135;
    uint64_t v141 = v246;
    LODWORD(v135) = *(_DWORD *)(v3 + 208);
    *(_DWORD *)(v246 + 220) |= 0x400000u;
    *(_DWORD *)(v141 + 180) = v135;
    uint64_t v142 = v246;
    uint64_t v143 = *(void *)(v3 + 160);
    *(_DWORD *)(v246 + 220) |= 0x800u;
    *(void *)(v142 + 96) = v143;
    uint64_t v144 = v246;
    uint64_t v145 = *(void *)(v3 + 168);
    *(_DWORD *)(v246 + 220) |= 8u;
    *(void *)(v144 + 32) = v145;
    uint64_t v146 = v246;
    uint64_t v147 = *(void *)(v3 + 176);
    *(_DWORD *)(v246 + 220) |= 0x10u;
    *(void *)(v146 + 40) = v147;
    uint64_t v148 = v246;
    int v149 = *(_DWORD *)(v3 + 512);
    *(_DWORD *)(v246 + 220) |= 0x2000000u;
    *(_DWORD *)(v148 + 192) = v149;
    uint64_t v150 = v246;
    int v151 = *(_DWORD *)(v3 + 140);
    *(_DWORD *)(v246 + 220) |= 0x8000000u;
    *(_DWORD *)(v150 + 200) = v151;
    uint64_t v152 = v246;
    int v153 = *(_DWORD *)(v3 + 216);
    *(_DWORD *)(v246 + 220) |= 0x1000000u;
    *(_DWORD *)(v152 + 188) = v153;
    uint64_t v154 = v246;
    uint64_t v155 = *(void *)(v3 + 536);
    *(_DWORD *)(v246 + 220) |= 0x20u;
    *(void *)(v154 + 48) = v155;
    uint64_t v156 = v246;
    uint64_t v157 = *(void *)(v3 + 544);
    *(_DWORD *)(v246 + 220) |= 0x40u;
    *(void *)(v156 + 56) = v157;
    uint64_t v158 = v246;
    uint64_t v159 = *(void *)(v3 + 520);
    *(_DWORD *)(v246 + 220) |= 0x8000u;
    *(void *)(v158 + 128) = v159;
    uint64_t v160 = v246;
    uint64_t v161 = *(void *)(v3 + 528);
    *(_DWORD *)(v246 + 220) |= 0x400u;
    *(void *)(v160 + 88) = v161;
    uint64_t v162 = v246;
    *(_DWORD *)(v246 + 220) |= 0x80000000;
    *(unsigned char *)(v162 + 216) = 0;
    uint64_t v163 = v246;
    uint64_t v164 = *(void *)(v3 + 704);
    *(_DWORD *)(v246 + 220) |= 0x1000u;
    *(void *)(v163 + 104) = v164;
    uint64_t v165 = v246;
    uint64_t v166 = *(void *)(v3 + 712);
    *(_DWORD *)(v246 + 220) |= 0x4000u;
    *(void *)(v165 + 120) = v166;
    uint64_t v167 = v246;
    uint64_t v168 = *(void *)(v3 + 720);
    *(_DWORD *)(v246 + 220) |= 0x2000u;
    *(void *)(v167 + 112) = v168;
    uint64_t v169 = v246;
    int v170 = *(_DWORD *)(v3 + 728);
    *(_DWORD *)(v246 + 220) |= 0x4000000u;
    *(_DWORD *)(v169 + 196) = v170;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v243);
    }
    long long v171 = *(_OWORD *)(v3 + 112);
    v241[6] = *(_OWORD *)(v3 + 96);
    v241[7] = v171;
    v242[0] = *(_OWORD *)(v3 + 128);
    *(_OWORD *)((char *)v242 + 12) = *(_OWORD *)(v3 + 140);
    long long v172 = *(_OWORD *)(v3 + 48);
    v241[2] = *(_OWORD *)(v3 + 32);
    v241[3] = v172;
    long long v173 = *(_OWORD *)(v3 + 80);
    v241[4] = *(_OWORD *)(v3 + 64);
    v241[5] = v173;
    long long v174 = *(_OWORD *)(v3 + 16);
    v241[0] = *(_OWORD *)v3;
    v241[1] = v174;
    if (sub_1001AF22C((uint64_t)v241, *(double *)(v3 + 936)) == 2)
    {
      v225 = off_1022E7928;
      CFAbsoluteTime v175 = CFAbsoluteTimeGetCurrent();
      uint64_t v176 = *(void *)(v3 + 944);
      CFAbsoluteTime v226 = v175;
      uint64_t v227 = v176;
      double v228 = v7;
      double v229 = v8;
      uint64_t v177 = *(void *)(v3 + 952);
      uint64_t v230 = *(void *)(v3 + 936);
      uint64_t v231 = v177;
      uint64_t v232 = *(void *)(v3 + 20);
      long long v233 = *(_OWORD *)(v3 + 60);
      long long v234 = *(_OWORD *)(v3 + 28);
      int v235 = *(_DWORD *)(v3 + 96);
      uint64_t v236 = *(void *)(v3 + 184);
      int v237 = *(_DWORD *)(v3 + 476);
      int v238 = -1;
      uint64_t v239 = *(void *)(v3 + 200);
      int v240 = *(_DWORD *)(v3 + 208);
      uint64_t v178 = sub_101282D9C();
      sub_10128431C(v178, (uint64_t)&v225);
      sub_10170140C(&v208);
      sub_101727908((uint64_t)&v208);
      v224 |= 1u;
      CFAbsoluteTime v222 = v226;
      sub_101778C5C(v223);
      uint64_t v179 = *(void *)(v223 + 8);
      uint64_t v180 = *(void *)(v3 + 944);
      *(_DWORD *)(v179 + 180) |= 0x800u;
      *(void *)(v179 + 96) = v180;
      uint64_t v181 = *(void *)(v223 + 8);
      *(_DWORD *)(v181 + 180) |= 0x40u;
      *(double *)(v181 + 56) = v7;
      uint64_t v182 = *(void *)(v223 + 8);
      *(_DWORD *)(v182 + 180) |= 0x80u;
      *(double *)(v182 + 64) = v8;
      uint64_t v183 = *(void *)(v223 + 8);
      uint64_t v184 = *(void *)(v3 + 936);
      *(_DWORD *)(v183 + 180) |= 0x200u;
      *(void *)(v183 + 80) = v184;
      uint64_t v185 = *(void *)(v223 + 8);
      uint64_t v186 = *(void *)(v3 + 952);
      *(_DWORD *)(v185 + 180) |= 0x400u;
      *(void *)(v185 + 88) = v186;
      uint64_t v187 = *(void *)(v223 + 8);
      uint64_t v188 = *(void *)(v3 + 20);
      *(_DWORD *)(v187 + 180) |= 0x20u;
      *(void *)(v187 + 48) = v188;
      uint64_t v189 = *(void *)(v223 + 8);
      uint64_t v190 = *(void *)(v3 + 60);
      *(_DWORD *)(v189 + 180) |= 2u;
      *(void *)(v189 + 16) = v190;
      uint64_t v191 = *(void *)(v223 + 8);
      uint64_t v192 = *(void *)(v3 + 68);
      *(_DWORD *)(v191 + 180) |= 4u;
      *(void *)(v191 + 24) = v192;
      uint64_t v193 = *(void *)(v223 + 8);
      uint64_t v194 = *(void *)(v3 + 28);
      *(_DWORD *)(v193 + 180) |= 1u;
      *(void *)(v193 + 8) = v194;
      uint64_t v195 = *(void *)(v223 + 8);
      uint64_t v196 = *(void *)(v3 + 36);
      *(_DWORD *)(v195 + 180) |= 0x2000u;
      *(void *)(v195 + 120) = v196;
      uint64_t v197 = *(void *)(v223 + 8);
      int v198 = *(_DWORD *)(v3 + 96);
      *(_DWORD *)(v197 + 180) |= 0x800000u;
      *(_DWORD *)(v197 + 164) = v198;
      uint64_t v199 = *(void *)(v223 + 8);
      uint64_t v200 = *(void *)(v3 + 184);
      *(_DWORD *)(v199 + 180) |= 0x1000u;
      *(void *)(v199 + 104) = v200;
      uint64_t v201 = *(void *)(v223 + 8);
      LODWORD(v200) = *(_DWORD *)(v3 + 476);
      *(_DWORD *)(v201 + 180) |= 0x1000000u;
      *(_DWORD *)(v201 + 168) = v200;
      uint64_t v202 = *(void *)(v223 + 8);
      *(_DWORD *)(v202 + 180) |= 0x2000000u;
      *(_DWORD *)(v202 + 172) = -1;
      uint64_t v203 = *(void *)(v223 + 8);
      LODWORD(v200) = *(_DWORD *)(v3 + 200);
      *(_DWORD *)(v203 + 180) |= 0x20000u;
      *(_DWORD *)(v203 + 140) = v200;
      uint64_t v204 = *(void *)(v223 + 8);
      LODWORD(v200) = *(_DWORD *)(v3 + 204);
      *(_DWORD *)(v204 + 180) |= 0x80000u;
      *(_DWORD *)(v204 + 148) = v200;
      uint64_t v205 = *(void *)(v223 + 8);
      LODWORD(v200) = *(_DWORD *)(v3 + 208);
      *(_DWORD *)(v205 + 180) |= 0x40000u;
      *(_DWORD *)(v205 + 144) = v200;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)&v208);
      }
      sub_101706914((PB::Base *)&v208);
    }
LABEL_33:
    sub_101706914((PB::Base *)v243);
    return;
  }
  if (v11 != 23)
  {
    if (v11 != 33) {
      return;
    }
    sub_10170140C(v243);
    sub_101724AE8((uint64_t)v243);
    CFAbsoluteTime v55 = CFAbsoluteTimeGetCurrent();
    v248 |= 1u;
    CFAbsoluteTime v245 = v55;
    uint64_t v56 = v246;
    uint64_t v57 = *(void *)(v3 + 76);
    *(_DWORD *)(v246 + 220) |= 0x40000u;
    *(void *)(v56 + 152) = v57;
    uint64_t v58 = v246;
    *(_DWORD *)(v246 + 220) |= 0x100u;
    *(double *)(v58 + 72) = v7;
    uint64_t v59 = v246;
    *(_DWORD *)(v246 + 220) |= 0x200u;
    *(double *)(v59 + 80) = v8;
    uint64_t v60 = v246;
    uint64_t v61 = *(void *)(v3 + 44);
    *(_DWORD *)(v246 + 220) |= 0x10000u;
    *(void *)(v60 + 136) = v61;
    uint64_t v62 = v246;
    uint64_t v63 = *(void *)(v3 + 52);
    *(_DWORD *)(v246 + 220) |= 0x20000u;
    *(void *)(v62 + 144) = v63;
    uint64_t v64 = v246;
    uint64_t v65 = *(void *)(v3 + 20);
    *(_DWORD *)(v246 + 220) |= 0x80u;
    *(void *)(v64 + 64) = v65;
    uint64_t v66 = v246;
    uint64_t v67 = *(void *)(v3 + 60);
    *(_DWORD *)(v246 + 220) |= 2u;
    *(void *)(v66 + 16) = v67;
    uint64_t v68 = v246;
    uint64_t v69 = *(void *)(v3 + 68);
    *(_DWORD *)(v246 + 220) |= 4u;
    *(void *)(v68 + 24) = v69;
    uint64_t v70 = v246;
    uint64_t v71 = *(void *)(v3 + 28);
    *(_DWORD *)(v246 + 220) |= 1u;
    *(void *)(v70 + 8) = v71;
    uint64_t v72 = v246;
    uint64_t v73 = *(void *)(v3 + 36);
    *(_DWORD *)(v246 + 220) |= 0x100000u;
    *(void *)(v72 + 168) = v73;
    uint64_t v74 = v246;
    int v75 = *(_DWORD *)(v3 + 96);
    *(_DWORD *)(v246 + 220) |= 0x10000000u;
    *(_DWORD *)(v74 + 204) = v75;
    uint64_t v76 = v246;
    uint64_t v77 = *(void *)(v3 + 184);
    *(_DWORD *)(v246 + 220) |= 0x80000u;
    *(void *)(v76 + 160) = v77;
    uint64_t v78 = v246;
    LODWORD(v77) = *(_DWORD *)(v3 + 476);
    *(_DWORD *)(v246 + 220) |= 0x20000000u;
    *(_DWORD *)(v78 + 208) = v77;
    uint64_t v79 = v246;
    int v80 = *(_DWORD *)(v3 + 472);
    *(_DWORD *)(v246 + 220) |= 0x40000000u;
    *(_DWORD *)(v79 + 212) = v80;
    uint64_t v81 = v246;
    LODWORD(v77) = *(_DWORD *)(v3 + 200);
    *(_DWORD *)(v246 + 220) |= 0x200000u;
    *(_DWORD *)(v81 + 176) = v77;
    uint64_t v82 = v246;
    LODWORD(v77) = *(_DWORD *)(v3 + 204);
    *(_DWORD *)(v246 + 220) |= 0x800000u;
    *(_DWORD *)(v82 + 184) = v77;
    uint64_t v83 = v246;
    LODWORD(v77) = *(_DWORD *)(v3 + 208);
    *(_DWORD *)(v246 + 220) |= 0x400000u;
    *(_DWORD *)(v83 + 180) = v77;
    uint64_t v84 = v246;
    uint64_t v85 = *(void *)(v3 + 160);
    *(_DWORD *)(v246 + 220) |= 0x800u;
    *(void *)(v84 + 96) = v85;
    uint64_t v86 = v246;
    uint64_t v87 = *(void *)(v3 + 168);
    *(_DWORD *)(v246 + 220) |= 8u;
    *(void *)(v86 + 32) = v87;
    uint64_t v88 = v246;
    uint64_t v89 = *(void *)(v3 + 176);
    *(_DWORD *)(v246 + 220) |= 0x10u;
    *(void *)(v88 + 40) = v89;
    uint64_t v90 = v246;
    int v91 = *(_DWORD *)(v3 + 512);
    *(_DWORD *)(v246 + 220) |= 0x2000000u;
    *(_DWORD *)(v90 + 192) = v91;
    uint64_t v92 = v246;
    int v93 = *(_DWORD *)(v3 + 140);
    *(_DWORD *)(v246 + 220) |= 0x8000000u;
    *(_DWORD *)(v92 + 200) = v93;
    uint64_t v94 = v246;
    int v95 = *(_DWORD *)(v3 + 216);
    *(_DWORD *)(v246 + 220) |= 0x1000000u;
    *(_DWORD *)(v94 + 188) = v95;
    uint64_t v96 = v246;
    uint64_t v97 = *(void *)(v3 + 536);
    *(_DWORD *)(v246 + 220) |= 0x20u;
    *(void *)(v96 + 48) = v97;
    uint64_t v98 = v246;
    uint64_t v99 = *(void *)(v3 + 544);
    *(_DWORD *)(v246 + 220) |= 0x40u;
    *(void *)(v98 + 56) = v99;
    uint64_t v100 = v246;
    uint64_t v101 = *(void *)(v3 + 520);
    *(_DWORD *)(v246 + 220) |= 0x8000u;
    *(void *)(v100 + 128) = v101;
    uint64_t v102 = v246;
    uint64_t v103 = *(void *)(v3 + 528);
    *(_DWORD *)(v246 + 220) |= 0x400u;
    *(void *)(v102 + 88) = v103;
    uint64_t v104 = v246;
    *(_DWORD *)(v246 + 220) |= 0x80000000;
    *(unsigned char *)(v104 + 216) = 1;
    uint64_t v105 = v246;
    uint64_t v106 = *(void *)(v3 + 704);
    *(_DWORD *)(v246 + 220) |= 0x1000u;
    *(void *)(v105 + 104) = v106;
    uint64_t v107 = v246;
    uint64_t v108 = *(void *)(v3 + 712);
    *(_DWORD *)(v246 + 220) |= 0x4000u;
    *(void *)(v107 + 120) = v108;
    uint64_t v109 = v246;
    uint64_t v110 = *(void *)(v3 + 720);
    *(_DWORD *)(v246 + 220) |= 0x2000u;
    *(void *)(v109 + 112) = v110;
    uint64_t v111 = v246;
    int v112 = *(_DWORD *)(v3 + 728);
    *(_DWORD *)(v246 + 220) |= 0x4000000u;
    *(_DWORD *)(v111 + 196) = v112;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v243);
    }
    goto LABEL_33;
  }
  v206 = *(int **)(v3 + 800);
  if (v206 && (unint64_t)sub_1010FB9FC(v206) >= 2)
  {
    if (sub_1010FB9FC(*(int **)(v3 + 800)))
    {
      unint64_t v207 = 0;
      do
      {
        sub_1010FB258(*(void *)(v3 + 800), v207, (uint64_t)&v208);
        sub_1010FB770(*(void *)(v3 + 800), v207, (uint64_t)v243);
        sub_100C276FC(v6, (uint64_t)&v208, v243);
        if (v244) {
          sub_1000DB0A0(v244);
        }
        ++v207;
      }
      while (v207 < sub_1010FB9FC(*(int **)(v3 + 800)));
    }
  }
  else
  {
    sub_100C276FC(v6, v3, (uint64_t *)(v3 + 160));
  }
}

void sub_100C276A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  sub_101706914((PB::Base *)&STACK[0xF88]);
  _Unwind_Resume(a1);
}

uint64_t sub_100C276FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5 = *(double *)(a2 + 4);
  double v6 = *(double *)(a2 + 12);
  if (*(unsigned char *)(a1 + 1748))
  {
    float v8 = __exp10((float)*(int *)(a1 + 1752));
    double v5 = round(v5 * v8) / v8;
    float v9 = __exp10((float)*(int *)(a1 + 1752));
    double v6 = round(v6 * v9) / v9;
  }
  sub_10170140C(v50);
  sub_101725E08((uint64_t)v50);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v53 |= 1u;
  CFAbsoluteTime v52 = Current;
  uint64_t v11 = v51;
  int v12 = *((_DWORD *)a3 + 154);
  *(unsigned char *)(v51 + 20) |= 1u;
  *(_DWORD *)(v11 + 16) = v12;
  sub_1016CEA60(v51);
  uint64_t v13 = *(void *)(v51 + 8);
  uint64_t v14 = *(void *)(a2 + 76);
  *(_DWORD *)(v13 + 180) |= 0x800u;
  *(void *)(v13 + 96) = v14;
  uint64_t v15 = *(void *)(v51 + 8);
  *(_DWORD *)(v15 + 180) |= 0x40u;
  *(double *)(v15 + 56) = v5;
  uint64_t v16 = *(void *)(v51 + 8);
  *(_DWORD *)(v16 + 180) |= 0x80u;
  *(double *)(v16 + 64) = v6;
  uint64_t v17 = *(void *)(v51 + 8);
  uint64_t v18 = *(void *)(a2 + 44);
  *(_DWORD *)(v17 + 180) |= 0x200u;
  *(void *)(v17 + 80) = v18;
  uint64_t v19 = *(void *)(v51 + 8);
  uint64_t v20 = *(void *)(a2 + 52);
  *(_DWORD *)(v19 + 180) |= 0x400u;
  *(void *)(v19 + 88) = v20;
  uint64_t v21 = *(void *)(v51 + 8);
  uint64_t v22 = *(void *)(a2 + 20);
  *(_DWORD *)(v21 + 180) |= 0x20u;
  *(void *)(v21 + 48) = v22;
  uint64_t v23 = *(void *)(v51 + 8);
  uint64_t v24 = *(void *)(a2 + 60);
  *(_DWORD *)(v23 + 180) |= 2u;
  *(void *)(v23 + 16) = v24;
  uint64_t v25 = *(void *)(v51 + 8);
  uint64_t v26 = *(void *)(a2 + 68);
  *(_DWORD *)(v25 + 180) |= 4u;
  *(void *)(v25 + 24) = v26;
  uint64_t v27 = *(void *)(v51 + 8);
  uint64_t v28 = *(void *)(a2 + 28);
  *(_DWORD *)(v27 + 180) |= 1u;
  *(void *)(v27 + 8) = v28;
  uint64_t v29 = *(void *)(v51 + 8);
  uint64_t v30 = *(void *)(a2 + 36);
  *(_DWORD *)(v29 + 180) |= 0x2000u;
  *(void *)(v29 + 120) = v30;
  uint64_t v31 = *(void *)(v51 + 8);
  int v32 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v31 + 180) |= 0x800000u;
  *(_DWORD *)(v31 + 164) = v32;
  uint64_t v33 = *(void *)(v51 + 8);
  uint64_t v34 = a3[3];
  *(_DWORD *)(v33 + 180) |= 0x1000u;
  *(void *)(v33 + 104) = v34;
  uint64_t v35 = *(void *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 79);
  *(_DWORD *)(v35 + 180) |= 0x1000000u;
  *(_DWORD *)(v35 + 168) = v34;
  uint64_t v36 = *(void *)(v51 + 8);
  int v37 = *((_DWORD *)a3 + 78);
  *(_DWORD *)(v36 + 180) |= 0x2000000u;
  *(_DWORD *)(v36 + 172) = v37;
  uint64_t v38 = *(void *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 10);
  *(_DWORD *)(v38 + 180) |= 0x20000u;
  *(_DWORD *)(v38 + 140) = v34;
  uint64_t v39 = *(void *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 11);
  *(_DWORD *)(v39 + 180) |= 0x80000u;
  *(_DWORD *)(v39 + 148) = v34;
  uint64_t v40 = *(void *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 12);
  *(_DWORD *)(v40 + 180) |= 0x40000u;
  *(_DWORD *)(v40 + 144) = v34;
  uint64_t v41 = *(void *)(v51 + 8);
  uint64_t v42 = *a3;
  *(_DWORD *)(v41 + 180) |= 0x100u;
  *(void *)(v41 + 72) = v42;
  uint64_t v43 = *(void *)(v51 + 8);
  uint64_t v44 = a3[1];
  *(_DWORD *)(v43 + 180) |= 8u;
  *(void *)(v43 + 32) = v44;
  uint64_t v45 = *(void *)(v51 + 8);
  uint64_t v46 = a3[2];
  *(_DWORD *)(v45 + 180) |= 0x10u;
  *(void *)(v45 + 40) = v46;
  uint64_t v47 = *(void *)(v51 + 8);
  int v48 = *((_DWORD *)a3 + 88);
  *(_DWORD *)(v47 + 180) |= 0x200000u;
  *(_DWORD *)(v47 + 156) = v48;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v50);
  }
  return sub_101706914((PB::Base *)v50);
}

void sub_100C27A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C27A80(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 41)
  {
    int v4 = *(_DWORD *)(a4 + 1448);
    int v5 = *(unsigned __int8 *)(a4 + 1452);
    int v6 = *(_DWORD *)(a4 + 1456);
    uint64_t v7 = *(void *)(a4 + 1464);
    int v8 = *(unsigned __int8 *)(a4 + 1472);
    *(void *)(result + 2096) = v7;
    sub_10170140C(v15);
    sub_101725BC8((uint64_t)v15);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v17 |= 1u;
    *(CFAbsoluteTime *)&v15[77] = Current;
    uint64_t v10 = v16;
    *(unsigned char *)(v16 + 24) |= 2u;
    *(_DWORD *)(v10 + 12) = v4;
    uint64_t v11 = v16;
    *(unsigned char *)(v16 + 24) |= 8u;
    *(unsigned char *)(v11 + 20) = v5 != 0;
    uint64_t v12 = v16;
    *(unsigned char *)(v16 + 24) |= 4u;
    *(_DWORD *)(v12 + 16) = v6;
    uint64_t v13 = v16;
    *(unsigned char *)(v16 + 24) |= 1u;
    *(_DWORD *)(v13 + 8) = v7;
    uint64_t v14 = v16;
    *(unsigned char *)(v16 + 24) |= 0x10u;
    *(unsigned char *)(v14 + 21) = v8 != 0;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v15);
    }
    return sub_101706914((PB::Base *)v15);
  }
  return result;
}

void sub_100C27BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C27BD4(uint64_t result, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (*a3 == 2)
  {
    uint64_t v5 = result;
    int v6 = (_OWORD *)(result + 648);
    __n128 result = sub_101A2CBF8(result + 648, (uint64_t)a4);
    if ((result & 1) == 0)
    {
      long long v7 = *a4;
      long long v8 = a4[1];
      long long v9 = a4[2];
      *(_OWORD *)((char *)v6 + 44) = *(long long *)((char *)a4 + 44);
      v6[1] = v8;
      _DWORD v6[2] = v9;
      *int v6 = v7;
      uint64_t v45 = off_1022E6E50;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v10 = *(_DWORD *)(v5 + 648);
      long long v11 = *(_OWORD *)(v5 + 672);
      long long v48 = *(_OWORD *)(v5 + 656);
      long long v49 = v11;
      int v12 = *(_DWORD *)(v5 + 688);
      int v47 = v10;
      int v50 = v12;
      int v51 = *(_DWORD *)(v5 + 692);
      uint64_t v13 = sub_101282D9C();
      sub_10128431C(v13, (uint64_t)&v45);
      sub_10170140C(v41);
      sub_1017275A8((uint64_t)v41);
      v44 |= 1u;
      CFAbsoluteTime v43 = Current;
      uint64_t v14 = v42;
      int v15 = *(_DWORD *)(v5 + 648);
      *(_WORD *)(v42 + 64) |= 0x10u;
      *(_DWORD *)(v14 + 24) = v15;
      uint64_t v16 = v42;
      int v17 = *(_DWORD *)(v5 + 656);
      *(_WORD *)(v42 + 64) |= 0x20u;
      *(_DWORD *)(v16 + 28) = v17;
      uint64_t v18 = v42;
      int v19 = *(_DWORD *)(v5 + 660);
      *(_WORD *)(v42 + 64) |= 0x1000u;
      *(_DWORD *)(v18 + 56) = v19;
      uint64_t v20 = v42;
      int v21 = *(_DWORD *)(v5 + 664);
      *(_WORD *)(v42 + 64) |= 0x800u;
      *(_DWORD *)(v20 + 52) = v21;
      uint64_t v22 = v42;
      int v23 = *(_DWORD *)(v5 + 668);
      *(_WORD *)(v42 + 64) |= 2u;
      *(_DWORD *)(v22 + 12) = v23;
      uint64_t v24 = v42;
      int v25 = *(_DWORD *)(v5 + 672);
      *(_WORD *)(v42 + 64) |= 0x80u;
      *(_DWORD *)(v24 + 36) = v25;
      uint64_t v26 = v42;
      int v27 = *(_DWORD *)(v5 + 676);
      *(_WORD *)(v42 + 64) |= 0x40u;
      *(_DWORD *)(v26 + 32) = v27;
      uint64_t v28 = v42;
      int v29 = *(_DWORD *)(v5 + 680);
      *(_WORD *)(v42 + 64) |= 0x100u;
      *(_DWORD *)(v28 + 40) = v29;
      uint64_t v30 = v42;
      int v31 = *(_DWORD *)(v5 + 684);
      *(_WORD *)(v42 + 64) |= 0x200u;
      *(_DWORD *)(v30 + 44) = v31;
      uint64_t v32 = v42;
      int v33 = *(_DWORD *)(v5 + 688);
      *(_WORD *)(v42 + 64) |= 8u;
      *(_DWORD *)(v32 + 20) = v33;
      uint64_t v34 = v42;
      int v35 = *(_DWORD *)(v5 + 692);
      *(_WORD *)(v42 + 64) |= 0x400u;
      *(_DWORD *)(v34 + 48) = v35;
      uint64_t v36 = v42;
      LOBYTE(v33) = *(unsigned char *)(v5 + 696);
      *(_WORD *)(v42 + 64) |= 0x2000u;
      *(unsigned char *)(v36 + 60) = v33;
      uint64_t v37 = v42;
      int v38 = *(_DWORD *)(v5 + 652);
      *(_WORD *)(v42 + 64) |= 4u;
      *(_DWORD *)(v37 + 16) = v38;
      uint64_t v39 = v42;
      int v40 = *(_DWORD *)(v5 + 700);
      *(_WORD *)(v42 + 64) |= 1u;
      *(_DWORD *)(v39 + 8) = v40;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v41);
      }
      return sub_101706914((PB::Base *)v41);
    }
  }
  return result;
}

void sub_100C27E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C27E7C(uint64_t result, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a3 == 1)
  {
    sub_10170140C(v24);
    sub_101724158((uint64_t)v24);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v28 |= 1u;
    CFAbsoluteTime v25 = Current;
    uint64_t v13 = v26;
    int v14 = *a4;
    *(unsigned char *)(v26 + 40) |= 4u;
    *(_DWORD *)(v13 + 24) = v14;
    uint64_t v15 = v26;
    int v16 = a4[1];
    *(unsigned char *)(v26 + 40) |= 0x10u;
    *(_DWORD *)(v15 + 32) = v16;
    uint64_t v17 = v26;
    int v18 = a4[2];
    *(unsigned char *)(v26 + 40) |= 8u;
    *(_DWORD *)(v17 + 28) = v18;
    uint64_t v19 = v26;
    LOBYTE(v18) = *((unsigned char *)a4 + 24);
    *(unsigned char *)(v26 + 40) |= 0x40u;
    *(unsigned char *)(v19 + 37) = v18;
    uint64_t v20 = v26;
    LOBYTE(v18) = *((unsigned char *)a4 + 25);
    *(unsigned char *)(v26 + 40) |= 0x20u;
    *(unsigned char *)(v20 + 36) = v18;
    uint64_t v21 = v26;
    LOBYTE(v18) = *((unsigned char *)a4 + 26);
    *(unsigned char *)(v26 + 40) |= 0x80u;
    *(unsigned char *)(v21 + 38) = v18;
    uint64_t v22 = v26;
    uint64_t v23 = *((void *)a4 + 2);
    *(unsigned char *)(v26 + 40) |= 2u;
    *(void *)(v22 + 16) = v23;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    uint64_t v11 = qword_10248AF90;
    if (!qword_10248AF90) {
      return sub_101706914((PB::Base *)v24);
    }
LABEL_12:
    sub_1019E5150(v11, (uint64_t)v24);
    return sub_101706914((PB::Base *)v24);
  }
  if (!*a3)
  {
    uint64_t v5 = result;
    if (*(_DWORD *)(result + 720) != *a4 || *(_DWORD *)(result + 724) != a4[1])
    {
      *(void *)(result + 720) = *(void *)a4;
      int v29 = off_1022E74B0;
      CFAbsoluteTime v30 = CFAbsoluteTimeGetCurrent();
      char v31 = *(_DWORD *)(v5 + 720);
      char v32 = *(_DWORD *)(v5 + 724);
      uint64_t v6 = sub_101282D9C();
      sub_10128431C(v6, (uint64_t)&v29);
      sub_10170140C(v24);
      sub_101727CF8((uint64_t)v24);
      v28 |= 1u;
      CFAbsoluteTime v25 = v30;
      uint64_t v7 = v27;
      int v8 = *(_DWORD *)(v5 + 720);
      *(unsigned char *)(v27 + 16) |= 2u;
      *(_DWORD *)(v7 + 12) = v8;
      uint64_t v9 = v27;
      int v10 = *(_DWORD *)(v5 + 724);
      *(unsigned char *)(v27 + 16) |= 1u;
      *(_DWORD *)(v9 + 8) = v10;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v11 = qword_10248AF90;
      if (!qword_10248AF90) {
        return sub_101706914((PB::Base *)v24);
      }
      goto LABEL_12;
    }
  }
  return result;
}

void sub_100C280E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_100C28108(uint64_t a1, uint64_t a2, _DWORD *a3, __n128 *a4)
{
  if (!*a3)
  {
    __n128 v4 = a4[9];
    v13[8] = a4[8];
    v13[9] = v4;
    v13[10] = a4[10];
    __n128 v5 = a4[5];
    v13[4] = a4[4];
    v13[5] = v5;
    __n128 v6 = a4[7];
    v13[6] = a4[6];
    v13[7] = v6;
    __n128 v7 = a4[1];
    v13[0] = *a4;
    v13[1] = v7;
    __n128 result = a4[3];
    v13[2] = a4[2];
    v13[3] = result;
    if (*(unsigned char *)(a1 + 1839))
    {
      sub_10068D3E4((uint64_t)v13, v11);
      sub_10170140C(v9);
      v10 |= 1u;
      v9[77] = v12;
      operator new();
    }
  }
  return result;
}

void sub_100C28240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  sub_10173A4E4((PB::Base *)&STACK[0xE30]);
  _Unwind_Resume(a1);
}

void sub_100C28260(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    sub_10170140C(v8);
    sub_101724548((uint64_t)v8);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v10 |= 1u;
    *(CFAbsoluteTime *)&v8[77] = Current;
    uint64_t v6 = v9;
    int v7 = *a4;
    *(unsigned char *)(v9 + 12) |= 1u;
    *(_DWORD *)(v6 + 8) = v7;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v8);
    }
    sub_101706914((PB::Base *)v8);
  }
}

void sub_100C28318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C28330(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 36)
  {
    sub_10170140C(v14);
    sub_101725E98((uint64_t)v14);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    uint64_t v6 = v15;
    uint64_t v7 = *(void *)(a4 + 1344);
    *(unsigned char *)(v15 + 32) |= 2u;
    *(void *)(v6 + 16) = v7;
    uint64_t v8 = v15;
    int v9 = *(_DWORD *)(a4 + 1332);
    *(unsigned char *)(v15 + 32) |= 8u;
    *(_DWORD *)(v8 + 28) = v9;
    uint64_t v10 = v15;
    int v11 = *(_DWORD *)(a4 + 1328);
    *(unsigned char *)(v15 + 32) |= 4u;
    *(_DWORD *)(v10 + 24) = v11;
    uint64_t v12 = v15;
    uint64_t v13 = *(void *)(a4 + 1336);
    *(unsigned char *)(v15 + 32) |= 1u;
    *(void *)(v12 + 8) = v13;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v14);
    }
    sub_101706914((PB::Base *)v14);
  }
}

void sub_100C28434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2844C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  if (sub_100C287B0(a4, (uint64_t)&v23))
  {
    sub_10170140C(v20);
    sub_101725F28((uint64_t)v20);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v22 |= 1u;
    *(CFAbsoluteTime *)&v20[77] = Current;
    uint64_t v5 = v21;
    uint64_t v6 = *((void *)&v23 + 1);
    *(void *)(v21 + 144) = v23;
    *(unsigned char *)(v5 + 152) |= 4u;
    uint64_t v7 = v21;
    *(unsigned char *)(v21 + 152) |= 2u;
    *(void *)(v7 + 16) = v6;
    uint64_t v8 = v21;
    uint64_t v9 = v24;
    *(unsigned char *)(v21 + 152) |= 1u;
    *(void *)(v8 + 8) = v9;
    uint64_t v10 = (int32x2_t *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1) != (void)v25)
    {
      do
      {
        if (!v10->i32[0])
        {
          sub_10172D770((uint64_t)v26);
          int32x2_t v27 = vrev64_s32(v10[1]);
          __int32 v11 = v10[2].i32[0];
          v29 |= 7u;
          __int32 v28 = v11;
          sub_100C33EB4();
        }
        uint64_t v10 = (int32x2_t *)((char *)v10 + 28);
      }
      while (v10 != (int32x2_t *)v25);
      uint64_t v12 = (int32x2_t *)*((void *)&v24 + 1);
      if (*((void *)&v24 + 1) != (void)v25)
      {
        do
        {
          if (v12->i32[0] == 4)
          {
            sub_10172D770((uint64_t)v26);
            int32x2_t v27 = vrev64_s32(v12[1]);
            __int32 v13 = v12[2].i32[0];
            v29 |= 7u;
            __int32 v28 = v13;
            sub_100C33EB4();
          }
          uint64_t v12 = (int32x2_t *)((char *)v12 + 28);
        }
        while (v12 != (int32x2_t *)v25);
        int v14 = (int32x2_t *)*((void *)&v24 + 1);
        if (*((void *)&v24 + 1) != (void)v25)
        {
          do
          {
            if (v14->i32[0] == 1)
            {
              sub_10172D770((uint64_t)v26);
              int32x2_t v27 = vrev64_s32(v14[1]);
              __int32 v15 = v14[2].i32[0];
              v29 |= 7u;
              __int32 v28 = v15;
              sub_100C33EB4();
            }
            int v14 = (int32x2_t *)((char *)v14 + 28);
          }
          while (v14 != (int32x2_t *)v25);
          char v16 = (int32x2_t *)*((void *)&v24 + 1);
          if (*((void *)&v24 + 1) != (void)v25)
          {
            do
            {
              if (v16->i32[0] == 3)
              {
                sub_10172D770((uint64_t)v26);
                int32x2_t v27 = vrev64_s32(v16[1]);
                __int32 v17 = v16[2].i32[0];
                v29 |= 7u;
                __int32 v28 = v17;
                sub_100C33EB4();
              }
              char v16 = (int32x2_t *)((char *)v16 + 28);
            }
            while (v16 != (int32x2_t *)v25);
            for (i = (int32x2_t *)*((void *)&v24 + 1); i != (int32x2_t *)v25; i = (int32x2_t *)((char *)i + 28))
            {
              if (i->i32[0] == 2)
              {
                sub_10172D770((uint64_t)v26);
                int32x2_t v27 = vrev64_s32(i[1]);
                __int32 v19 = i[2].i32[0];
                v29 |= 7u;
                __int32 v28 = v19;
                sub_100C33EB4();
              }
            }
          }
        }
      }
    }
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v20);
    }
    sub_101706914((PB::Base *)v20);
  }
  if (*((void *)&v24 + 1))
  {
    *(void *)&long long v25 = *((void *)&v24 + 1);
    operator delete(*((void **)&v24 + 1));
  }
}

void sub_100C28760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  __n128 v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(void *)(v2 - 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C287B0(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if ((*(_DWORD *)(a1 + 96) & 0xFFFFFFF7) == 1)
  {
    double v4 = *(double *)(a1 + 88);
    if (v4 >= 0.0)
    {
      uint64_t v5 = *(uint64_t **)(a1 + 680);
      if (v5)
      {
        uint64_t v7 = *(void *)(a1 + 192);
        *(void *)a2 = *(void *)(a1 + 76);
        *(void *)(a2 + 8) = v7;
        *(double *)(a2 + 16) = v4;
        uint64_t v8 = *v5;
        uint64_t v9 = v5[1];
        if (v8 == v9)
        {
          unint64_t v10 = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            unint64_t v10 = v10 + *(unsigned __int8 *)(v8 + 24);
            v8 += 28;
          }
          while (v8 != v9);
        }
        __int32 v11 = (char **)(a2 + 24);
        *(void *)(a2 + 32) = *(void *)(a2 + 24);
        sub_100C33DB4((void **)(a2 + 24), v10);
        uint64_t v12 = *(long long ***)(a1 + 680);
        __int32 v13 = *v12;
        int v14 = v12[1];
        if (*v12 != v14)
        {
          do
          {
            if (*((unsigned char *)v13 + 24))
            {
              char v16 = *(_OWORD **)(a2 + 32);
              unint64_t v15 = *(void *)(a2 + 40);
              if ((unint64_t)v16 >= v15)
              {
                uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v16 - *v11) >> 2);
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) > 0x924924924924924) {
                  sub_1001D7FD4();
                }
                unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (void)*v11) >> 2);
                if (2 * v21 > v20) {
                  unint64_t v20 = 2 * v21;
                }
                if (v21 >= 0x492492492492492) {
                  unint64_t v22 = 0x924924924924924;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22) {
                  long long v23 = (char *)sub_100ADA48C(a2 + 40, v22);
                }
                else {
                  long long v23 = 0;
                }
                long long v24 = &v23[28 * v19];
                long long v25 = *v13;
                *(_OWORD *)(v24 + 12) = *(long long *)((char *)v13 + 12);
                *(_OWORD *)long long v24 = v25;
                int32x2_t v27 = *(char **)(a2 + 24);
                uint64_t v26 = *(char **)(a2 + 32);
                __int32 v28 = v24;
                if (v26 != v27)
                {
                  do
                  {
                    long long v29 = *(_OWORD *)(v26 - 28);
                    *(v28 - 1) = *((_OWORD *)v26 - 1);
                    *(_OWORD *)((char *)v28 - 28) = v29;
                    __int32 v28 = (_OWORD *)((char *)v28 - 28);
                    v26 -= 28;
                  }
                  while (v26 != v27);
                  uint64_t v26 = *v11;
                }
                int v18 = v24 + 28;
                *(void *)(a2 + 24) = v28;
                *(void *)(a2 + 32) = v24 + 28;
                *(void *)(a2 + 40) = &v23[28 * v22];
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                long long v17 = *v13;
                *(_OWORD *)((char *)v16 + 12) = *(long long *)((char *)v13 + 12);
                *char v16 = v17;
                int v18 = (char *)v16 + 28;
              }
              *(void *)(a2 + 32) = v18;
            }
            __int32 v13 = (long long *)((char *)v13 + 28);
          }
          while (v13 != v14);
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100C289BC(uint64_t a1, _DWORD *a2)
{
  double v3 = sub_10016C458();
  uint64_t result = sub_100178D5C((uint64_t)a2, v3, 6.0);
  if ((result & 1) == 0)
  {
    sub_10170140C(v31);
    sub_101725FB8((uint64_t)v31);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v33 |= 1u;
    *(CFAbsoluteTime *)&v31[77] = Current;
    uint64_t v6 = v32;
    BOOL v7 = *a2 == 1;
    *(_WORD *)(v32 + 20) |= 0x80u;
    *(unsigned char *)(v6 + 15) = v7;
    uint64_t v8 = v32;
    BOOL v9 = *a2 == 3;
    *(_WORD *)(v32 + 20) |= 2u;
    *(unsigned char *)(v8 + 9) = v9;
    uint64_t v10 = v32;
    BOOL v11 = *a2 == 0;
    *(_WORD *)(v32 + 20) |= 8u;
    *(unsigned char *)(v10 + 11) = v11;
    uint64_t v12 = v32;
    BOOL v13 = a2[1] == 3;
    *(_WORD *)(v32 + 20) |= 0x20u;
    *(unsigned char *)(v12 + 13) = v13;
    uint64_t v14 = v32;
    BOOL v15 = a2[1] == 0;
    *(_WORD *)(v32 + 20) |= 0x40u;
    *(unsigned char *)(v14 + 14) = v15;
    uint64_t v16 = v32;
    double v17 = sub_10016C458();
    char v18 = sub_100178D5C((uint64_t)a2, v17, 6.0);
    BOOL v19 = *a2 == 0;
    *(_WORD *)(v16 + 20) |= 0x10u;
    *(unsigned char *)(v16 + 12) = v19 & ~v18;
    uint64_t v20 = v32;
    double v21 = sub_10016C458();
    char v22 = sub_100178D5C((uint64_t)a2, v21, 6.0);
    BOOL v23 = *a2 == 1;
    *(_WORD *)(v20 + 20) |= 0x100u;
    *(unsigned char *)(v20 + 16) = v23 & ~v22;
    uint64_t v24 = v32;
    double v25 = sub_10016C458();
    char v26 = sub_100178D5C((uint64_t)a2, v25, 6.0);
    BOOL v27 = *a2 == 3;
    *(_WORD *)(v24 + 20) |= 4u;
    *(unsigned char *)(v24 + 10) = v27 & ~v26;
    uint64_t v28 = v32;
    double v29 = sub_10016C458();
    BOOL v30 = sub_100178CCC(a2, v29);
    *(_WORD *)(v28 + 20) |= 1u;
    *(unsigned char *)(v28 + 8) = v30;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v31);
    }
    return sub_101706914((PB::Base *)v31);
  }
  return result;
}

void sub_100C28BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C28BE4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  if (!*a3)
  {
    sub_10170140C(v47);
    sub_101726048((uint64_t)v47);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v49 |= 1u;
    *(CFAbsoluteTime *)&v47[77] = Current;
    uint64_t v6 = v48;
    uint64_t v7 = a4[17];
    *(_DWORD *)(v48 + 176) |= 8u;
    *(void *)(v6 + 32) = v7;
    uint64_t v8 = v48;
    uint64_t v9 = *a4;
    *(_DWORD *)(v48 + 176) |= 0x800u;
    *(void *)(v8 + 96) = v9;
    uint64_t v10 = v48;
    uint64_t v11 = a4[18];
    *(_DWORD *)(v48 + 176) |= 0x100u;
    *(void *)(v10 + 72) = v11;
    uint64_t v12 = v48;
    uint64_t v13 = a4[14];
    *(_DWORD *)(v48 + 176) |= 0x20u;
    *(void *)(v12 + 48) = v13;
    uint64_t v14 = v48;
    uint64_t v15 = a4[11];
    *(_DWORD *)(v48 + 176) |= 0x10u;
    *(void *)(v14 + 40) = v15;
    uint64_t v16 = v48;
    uint64_t v17 = a4[8];
    *(_DWORD *)(v48 + 176) |= 0x40u;
    *(void *)(v16 + 56) = v17;
    uint64_t v18 = v48;
    uint64_t v19 = a4[3];
    *(_DWORD *)(v48 + 176) |= 0x2000u;
    *(void *)(v18 + 112) = v19;
    uint64_t v20 = v48;
    uint64_t v21 = a4[4];
    *(_DWORD *)(v48 + 176) |= 0x4000u;
    *(void *)(v20 + 120) = v21;
    uint64_t v22 = v48;
    uint64_t v23 = a4[2];
    *(_DWORD *)(v48 + 176) |= 0x8000u;
    *(void *)(v22 + 128) = v23;
    uint64_t v24 = v48;
    uint64_t v25 = a4[5];
    *(_DWORD *)(v48 + 176) |= 0x20000u;
    *(void *)(v24 + 144) = v25;
    uint64_t v26 = v48;
    uint64_t v27 = a4[6];
    *(_DWORD *)(v48 + 176) |= 0x40000u;
    *(void *)(v26 + 152) = v27;
    uint64_t v28 = v48;
    uint64_t v29 = a4[7];
    *(_DWORD *)(v48 + 176) |= 0x10000u;
    *(void *)(v28 + 136) = v29;
    uint64_t v30 = v48;
    uint64_t v31 = a4[19];
    *(_DWORD *)(v48 + 176) |= 0x80000u;
    *(void *)(v30 + 160) = v31;
    uint64_t v32 = v48;
    LODWORD(v29) = *((_DWORD *)a4 + 40);
    *(_DWORD *)(v48 + 176) |= 0x100000u;
    *(_DWORD *)(v32 + 168) = v29;
    uint64_t v33 = v48;
    uint64_t v34 = a4[15];
    *(_DWORD *)(v48 + 176) |= 0x80u;
    *(void *)(v33 + 64) = v34;
    uint64_t v35 = v48;
    uint64_t v36 = a4[12];
    *(_DWORD *)(v48 + 176) |= 2u;
    *(void *)(v35 + 16) = v36;
    uint64_t v37 = v48;
    uint64_t v38 = a4[9];
    *(_DWORD *)(v48 + 176) |= 0x400u;
    *(void *)(v37 + 88) = v38;
    uint64_t v39 = v48;
    uint64_t v40 = a4[1];
    *(_DWORD *)(v48 + 176) |= 4u;
    *(void *)(v39 + 24) = v40;
    uint64_t v41 = v48;
    int v42 = *(_DWORD *)(v48 + 176) | 0x200000;
    *(_DWORD *)(v48 + 172) = *((_DWORD *)a4 + 32);
    *(_DWORD *)(v41 + 176) = v42;
    uint64_t v43 = v48;
    double v44 = (double)*((int *)a4 + 20);
    *(_DWORD *)(v48 + 176) |= 0x200u;
    *(double *)(v43 + 80) = v44;
    uint64_t v45 = v48;
    double v46 = (double)*((int *)a4 + 26);
    *(_DWORD *)(v48 + 176) |= 1u;
    *(double *)(v45 + 8) = v46;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v47);
    }
    sub_101706914((PB::Base *)v47);
  }
}

void sub_100C28E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C28E98(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    unsigned __int32 v5 = *(_DWORD *)a4;
    if (*(_DWORD *)a4 == 2)
    {
      sub_10170140C(buf);
      sub_101724DB8((uint64_t)buf);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v22 |= 1u;
      CFAbsoluteTime v19 = Current;
      uint64_t v12 = v21;
      char v13 = *(unsigned char *)(a4 + 4);
      *(unsigned char *)(v21 + 12) |= 1u;
      *(unsigned char *)(v12 + 8) = v13;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)buf);
      }
      goto LABEL_14;
    }
    if (v5 == 1)
    {
      sub_10170140C(buf);
      sub_101724D28((uint64_t)buf);
      CFAbsoluteTime v6 = CFAbsoluteTimeGetCurrent();
      v22 |= 1u;
      CFAbsoluteTime v19 = v6;
      uint64_t v7 = v20;
      sub_100134750(&__p, (char *)(a4 + 4));
      sub_100AE44AC(v7, &__p);
      if (v17 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      uint64_t v8 = v20;
      int v9 = *(unsigned __int8 *)(a4 + 260);
      *(unsigned char *)(v20 + 24) |= 1u;
      *(_DWORD *)(v8 + 16) = v9;
      uint64_t v10 = v20;
      LOBYTE(v9) = *(unsigned char *)(a4 + 261);
      *(unsigned char *)(v20 + 24) |= 2u;
      *(unsigned char *)(v10 + 20) = v9;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)buf);
      }
LABEL_14:
      sub_101706914((PB::Base *)buf);
      return;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022EDE58);
    }
    uint64_t v14 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Received unexpected event type: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      __p.n128_u32[0] = 67240192;
      __p.n128_u32[1] = v5;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionLogger::onMagneticAccessoryEvent(int, const CLMagneticAccessory_Type::Notification &, const CLMagneticAccessory_Type::NotificationData &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

void sub_100C291B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

uint64_t sub_100C291F8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 17);
  int v6 = *(unsigned __int8 *)(a2 + 18);
  int v7 = *(unsigned __int8 *)(a2 + 19);
  v19[0] = off_1022E73A8;
  v19[1] = v3;
  *(double *)&v19[3] = v2;
  char v20 = v4;
  char v21 = v5;
  char v22 = v6;
  char v23 = v7;
  uint64_t v8 = sub_101282D9C();
  sub_10128431C(v8, (uint64_t)v19);
  sub_10170140C(v15);
  sub_101727B48((uint64_t)v15);
  v18 |= 1u;
  uint64_t v17 = v3;
  uint64_t v9 = v16;
  *(unsigned char *)(v16 + 32) |= 1u;
  *(void *)(v9 + 8) = (unint64_t)v2;
  uint64_t v10 = v16;
  *(unsigned char *)(v16 + 32) |= 0x10u;
  *(_DWORD *)(v10 + 28) = v4;
  uint64_t v11 = v16;
  *(unsigned char *)(v16 + 32) |= 8u;
  *(_DWORD *)(v11 + 24) = v5;
  uint64_t v12 = v16;
  *(unsigned char *)(v16 + 32) |= 4u;
  *(_DWORD *)(v12 + 20) = v6;
  uint64_t v13 = v16;
  *(unsigned char *)(v16 + 32) |= 2u;
  *(_DWORD *)(v13 + 16) = v7;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v15);
  }
  return sub_101706914((PB::Base *)v15);
}

void sub_100C29360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C29378(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  int v4 = *((unsigned __int8 *)a2 + 16);
  int v5 = *((unsigned __int8 *)a2 + 17);
  int v6 = *((unsigned __int8 *)a2 + 18);
  sub_10170140C(v12);
  sub_101725748((uint64_t)v12);
  v15 |= 1u;
  uint64_t v14 = v3;
  uint64_t v7 = v13;
  *(unsigned char *)(v13 + 28) |= 1u;
  *(void *)(v7 + 8) = v2;
  uint64_t v8 = v13;
  *(unsigned char *)(v13 + 28) |= 4u;
  *(_DWORD *)(v8 + 20) = v4;
  uint64_t v9 = v13;
  *(unsigned char *)(v13 + 28) |= 8u;
  *(unsigned char *)(v9 + 24) = v5 != 0;
  uint64_t v10 = v13;
  *(unsigned char *)(v13 + 28) |= 2u;
  *(_DWORD *)(v10 + 16) = v6;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v12);
  }
  return sub_101706914((PB::Base *)v12);
}

void sub_100C29480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C29498(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  int v4 = *((unsigned __int8 *)a2 + 16);
  sub_10170140C(v8);
  sub_101726438((uint64_t)v8);
  v10 |= 1u;
  v8[77] = v3;
  uint64_t v5 = v9;
  *(unsigned char *)(v9 + 20) |= 1u;
  *(void *)(v5 + 8) = v2;
  uint64_t v6 = v9;
  *(unsigned char *)(v9 + 20) |= 2u;
  *(unsigned char *)(v6 + 16) = v4 != 0;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C29568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C29580(uint64_t a1, uint64_t a2, _DWORD *a3, char *a4)
{
  if (*a3 == 6)
  {
    uint64_t v14 = off_1022E6AE0;
    char v18 = *a4;
    uint64_t v17 = *((void *)a4 + 1);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v9 = sub_101282D9C();
    sub_10128431C(v9, (uint64_t)&v14);
    sub_10170140C(v19);
    sub_101727098((uint64_t)v19);
    v23 |= 1u;
    CFAbsoluteTime v20 = Current;
    uint64_t v10 = v21;
    uint64_t v11 = *((void *)a4 + 1);
    *(unsigned char *)(v21 + 20) |= 1u;
    *(void *)(v10 + 8) = v11;
    uint64_t v12 = v21;
    char v13 = *a4;
    *(unsigned char *)(v21 + 20) |= 2u;
    *(unsigned char *)(v12 + 16) = v13;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    uint64_t v8 = qword_10248AF90;
    if (!qword_10248AF90) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (*a3 != 5) {
    return;
  }
  uint64_t v14 = off_1022E7400;
  char v16 = *a4;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = sub_101282D9C();
  sub_10128431C(v5, (uint64_t)&v14);
  sub_10170140C(v19);
  sub_101727BD8((uint64_t)v19);
  v23 |= 1u;
  CFAbsoluteTime v20 = Current;
  uint64_t v6 = v22;
  char v7 = *a4;
  *(unsigned char *)(v22 + 12) |= 1u;
  *(unsigned char *)(v6 + 8) = v7;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  uint64_t v8 = qword_10248AF90;
  if (qword_10248AF90) {
LABEL_10:
  }
    sub_1019E5150(v8, (uint64_t)v19);
LABEL_11:
  sub_101706914((PB::Base *)v19);
}

void sub_100C29760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2978C(uint64_t a1)
{
  __chkstk_darwin(a1);
  if ((*v2 & 0xFFFFFFFE) == 6)
  {
    uint64_t v3 = v1;
    char v13 = off_1022E7508;
    BOOL v15 = sub_101576750(*(void *)(v1 + 1192));
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = sub_101282D9C();
    sub_10128431C(v4, (uint64_t)&v13);
    sub_10170140C(v11);
    v12 |= 1u;
    *(CFAbsoluteTime *)&v11[77] = Current;
    sub_101727D88((uint64_t)v11);
    uint64_t v5 = v11[257];
    BOOL v6 = sub_101576750(*(void *)(v3 + 1192));
    *(unsigned char *)(v5 + 12) |= 1u;
    *(unsigned char *)(v5 + 8) = v6;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v11);
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    char v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      BOOL v8 = sub_101576750(*(void *)(v3 + 1192));
      *(_DWORD *)long long buf = 67109120;
      BOOL v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WiFi association update %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      BOOL v9 = sub_101576750(*(void *)(v3 + 1192));
      int v16 = 67109120;
      BOOL v17 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_101706914((PB::Base *)v11);
  }
}

void sub_100C29A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C29A78(uint64_t a1)
{
  void (**v5)(_OWORD *__return_ptr);
  long long v6;
  long long v7;
  void v8[427];
  char v9;
  uint8_t buf[8];

  __chkstk_darwin(a1);
  if (*v2 == 3)
  {
    uint64_t v3 = v1;
    sub_10170140C(v8);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v9 |= 1u;
    *(CFAbsoluteTime *)&v8[77] = Current;
    sub_101724278((uint64_t)v8);
    uint64_t v5 = (void (**)(_OWORD *__return_ptr))[*(id *)(*(void *)(v3 + 1200) + 16) syncgetScanResult];
    if (v5)
    {
      v5[2](&v6);
      if (*((void *)&v6 + 1) != (void)v7) {
        sub_10175A80C();
      }
    }
    else
    {
      BOOL v6 = 0u;
      char v7 = 0u;
    }
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v8);
    }
    *(void *)long long buf = (char *)&v6 + 8;
    sub_1000D7F78((void ***)buf);
    sub_101706914((PB::Base *)v8);
  }
}

void sub_100C29E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  STACK[0xEB0] = a5;
  sub_1000D7F78((void ***)&STACK[0xEB0]);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C29E58(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (v4 == 2)
  {
    if (!*(unsigned char *)(a1 + 1833)) {
      return;
    }
    sub_10170140C(buf);
    sub_101723B28((uint64_t)buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v62 |= 1u;
    CFAbsoluteTime v61 = Current;
    uint64_t v23 = v59;
    *(unsigned char *)(v59 + 32) |= 2u;
    *(_DWORD *)(v23 + 24) = 0;
    sub_1016B604C(v59);
    uint64_t v24 = *(void *)(v59 + 8);
    uint64_t v25 = *((void *)a2 + 2);
    *(unsigned char *)(v24 + 32) |= 1u;
    *(void *)(v24 + 8) = v25;
    uint64_t v26 = *(void *)(v59 + 8);
    LODWORD(v25) = *((_DWORD *)a2 + 1);
    *(unsigned char *)(v26 + 32) |= 4u;
    *(_DWORD *)(v26 + 20) = v25;
    uint64_t v27 = *(void *)(v59 + 8);
    LODWORD(v25) = *((_DWORD *)a2 + 2);
    *(unsigned char *)(v27 + 32) |= 8u;
    *(_DWORD *)(v27 + 24) = v25;
    uint64_t v28 = *(void *)(v59 + 8);
    LODWORD(v25) = *((_DWORD *)a2 + 3);
    *(unsigned char *)(v28 + 32) |= 0x10u;
    *(_DWORD *)(v28 + 28) = v25;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    uint64_t v21 = qword_10248AF90;
    if (!qword_10248AF90) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v4 == 1)
  {
    if (!*(unsigned char *)(a1 + 1833)) {
      return;
    }
    sub_10170140C(buf);
    sub_101723B28((uint64_t)buf);
    CFAbsoluteTime v29 = CFAbsoluteTimeGetCurrent();
    v62 |= 1u;
    CFAbsoluteTime v61 = v29;
    uint64_t v30 = v59;
    *(unsigned char *)(v59 + 32) |= 2u;
    *(_DWORD *)(v30 + 24) = 0;
    sub_1016B604C(v59);
    uint64_t v31 = *(void *)(v59 + 8);
    uint64_t v32 = *((void *)a2 + 2);
    *(unsigned char *)(v31 + 32) |= 1u;
    *(void *)(v31 + 8) = v32;
    uint64_t v33 = *(void *)(v59 + 8);
    LODWORD(v32) = *((_DWORD *)a2 + 1);
    *(unsigned char *)(v33 + 32) |= 4u;
    *(_DWORD *)(v33 + 20) = v32;
    uint64_t v34 = *(void *)(v59 + 8);
    LODWORD(v32) = *((_DWORD *)a2 + 2);
    *(unsigned char *)(v34 + 32) |= 8u;
    *(_DWORD *)(v34 + 24) = v32;
    uint64_t v35 = *(void *)(v59 + 8);
    LODWORD(v32) = *((_DWORD *)a2 + 3);
    *(unsigned char *)(v35 + 32) |= 0x10u;
    *(_DWORD *)(v35 + 28) = v32;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    uint64_t v21 = qword_10248AF90;
    if (!qword_10248AF90) {
      goto LABEL_24;
    }
LABEL_23:
    sub_1019E5150(v21, (uint64_t)buf);
LABEL_24:
    sub_101706914((PB::Base *)buf);
    return;
  }
  if (*a2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v36 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      int v37 = *a2;
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v48) = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Unexpected PencilDebug data type %{public}u", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      int v45 = *a2;
      int __src = 67240192;
      LODWORD(v64) = v45;
      double v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionLogger::onPencilDebug(const CLPencilDebug::Data *)", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022EDE58);
    }
    uint64_t v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *((void *)a2 + 2);
      int v7 = a2[4];
      int v8 = a2[5];
      int v9 = *((__int16 *)a2 + 3);
      int v10 = *((__int16 *)a2 + 4);
      int v11 = *((__int16 *)a2 + 5);
      *(_DWORD *)long long buf = 134350336;
      uint64_t v48 = v6;
      __int16 v49 = 1026;
      int v50 = v7;
      __int16 v51 = 1026;
      int v52 = v8;
      __int16 v53 = 1026;
      int v54 = v9;
      __int16 v55 = 1026;
      int v56 = v10;
      __int16 v57 = 1026;
      int v58 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "onPencilDebug::Wake,MachAbs,%{public}f,sensor,%{public}u,host,%{public}u,%{public}d,%{public}d,%{public}d", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      uint64_t v38 = *((void *)a2 + 2);
      int v39 = a2[4];
      int v40 = a2[5];
      int v41 = *((__int16 *)a2 + 3);
      int v42 = *((__int16 *)a2 + 4);
      int v43 = *((__int16 *)a2 + 5);
      int __src = 134350336;
      uint64_t v64 = v38;
      __int16 v65 = 1026;
      int v66 = v39;
      __int16 v67 = 1026;
      int v68 = v40;
      __int16 v69 = 1026;
      int v70 = v41;
      __int16 v71 = 1026;
      int v72 = v42;
      __int16 v73 = 1026;
      int v74 = v43;
      double v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onPencilDebug(const CLPencilDebug::Data *)", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    if (*(unsigned char *)(a1 + 1833))
    {
      sub_10170140C(buf);
      sub_101724308((uint64_t)buf);
      CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
      v62 |= 1u;
      CFAbsoluteTime v61 = v12;
      uint64_t v13 = v60;
      *(unsigned char *)(v60 + 52) |= 4u;
      *(_DWORD *)(v13 + 44) = 0;
      uint64_t v14 = v60;
      uint64_t v15 = *((void *)a2 + 2);
      *(unsigned char *)(v60 + 52) |= 1u;
      *(void *)(v14 + 32) = v15;
      uint64_t v16 = v60;
      int v17 = a2[4];
      *(unsigned char *)(v60 + 52) |= 8u;
      *(_DWORD *)(v16 + 48) = v17;
      uint64_t v18 = v60;
      int v19 = a2[5];
      *(unsigned char *)(v60 + 52) |= 2u;
      *(_DWORD *)(v18 + 40) = v19;
      int v20 = *((__int16 *)a2 + 4);
      int __src = *((__int16 *)a2 + 3);
      LODWORD(v64) = v20;
      HIDWORD(v64) = *((__int16 *)a2 + 5);
      sub_1000FB43C((char *)(v60 + 8), (char *)&__src, (uint64_t)&v65, 3uLL);
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v21 = qword_10248AF90;
      if (!qword_10248AF90) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }
}

void sub_100C2A504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2A538(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v35 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error retrieving LOIs. %{public}@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    int v32 = 138543362;
    uint64_t v33 = a3;
    uint64_t v26 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)_block_invoke", "%s\n");
LABEL_30:
    if (v26 != buf) {
      free(v26);
    }
    return;
  }
  if ([a2 count])
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v7 = [a2 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v28;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v28 != v9) {
            objc_enumerationMutation(a2);
          }
          int v11 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          if ([v11 type] != (id)-1)
          {
            uint64_t v12 = *(void *)(a1 + 2080);
            [objc_msgSend(v11, "location") horizontalUncertainty];
            *(_WORD *)(v12 + 92) |= 0x80u;
            *(void *)(v12 + 64) = v13;
            uint64_t v14 = *(void *)(a1 + 2080);
            [v11 confidence];
            *(_WORD *)(v14 + 92) |= 2u;
            *(void *)(v14 + 16) = v15;
            uint64_t v16 = *(void *)(a1 + 2080);
            unsigned int v17 = [v11 type];
            *(_WORD *)(v16 + 92) |= 0x400u;
            *(_DWORD *)(v16 + 84) = v17;
            id v18 = objc_alloc((Class)CLLocation);
            [objc_msgSend(v11, "location") latitude];
            double v20 = v19;
            [objc_msgSend(v11, "location") longitude];
            id v22 = [v18 initWithLatitude:v20 longitude:v21];
            uint64_t v23 = *(void *)(a1 + 2080);
            [*(id *)(a1 + 32) distanceFromLocation:v22];
            *(_WORD *)(v23 + 92) |= 8u;
            *(void *)(v23 + 32) = v24;

            return;
          }
        }
        id v8 = [a2 countByEnumeratingWithState:&v27 objects:v31 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v25 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "No LOIs near", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v32) = 0;
      uint64_t v26 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)_block_invoke", "%s\n");
      goto LABEL_30;
    }
  }
}

uint64_t sub_100C2A97C(uint64_t a1, uint64_t a2)
{
  return sub_101710B90(a1 + 40, a2 + 40);
}

uint64_t sub_100C2A988(uint64_t a1)
{
  return sub_101706914((PB::Base *)(a1 + 40));
}

id sub_100C2A990(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  if (*(double *)(a1 + 1440) > 0.0 || *(double *)(a1 + 1480) > 0.0 || *(unsigned char *)(a1 + 1469))
  {
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90)
    {
      id v3 = sub_100F54954(qword_10248AF90);
      if (v3) {
        [v2 addObject:v3];
      }
      return v2;
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to access Motion Logger.  Maybe it is not enabled?", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_23:
        id v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "NSArray<NSString *> *CLMotionLogger::onTapToRadarAccessoryRequest()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return v2;
      }
LABEL_25:
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Accessory Logging is not enabled.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
  }
  return v2;
}

void sub_100C2AC80(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a2 + 16;
    do
    {
      sub_10170140C(v15);
      sub_101723B28((uint64_t)v15);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v18 |= 1u;
      CFAbsoluteTime v17 = Current;
      uint64_t v6 = v16;
      int v7 = *(unsigned __int16 *)(v4 + 16);
      *(unsigned char *)(v16 + 32) |= 4u;
      *(_DWORD *)(v6 + 28) = v7;
      sub_1016B604C(v16);
      uint64_t v8 = *(void *)(v16 + 8);
      uint64_t v9 = *(void *)(v4 - 16);
      *(unsigned char *)(v8 + 32) |= 1u;
      *(void *)(v8 + 8) = v9;
      uint64_t v10 = *(void *)(v16 + 8);
      LODWORD(v9) = *(_DWORD *)(v4 - 8);
      *(unsigned char *)(v10 + 32) |= 4u;
      *(_DWORD *)(v10 + 20) = v9;
      uint64_t v11 = *(void *)(v16 + 8);
      LODWORD(v9) = *(_DWORD *)(v4 - 4);
      *(unsigned char *)(v11 + 32) |= 8u;
      *(_DWORD *)(v11 + 24) = v9;
      uint64_t v12 = *(void *)(v16 + 8);
      LODWORD(v9) = *(_DWORD *)v4;
      *(unsigned char *)(v12 + 32) |= 0x10u;
      *(_DWORD *)(v12 + 28) = v9;
      uint64_t v13 = v16;
      uint64_t v14 = *(void *)(v4 + 8);
      *(unsigned char *)(v16 + 32) |= 1u;
      *(void *)(v13 + 16) = v14;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v15);
      }
      sub_101706914((PB::Base *)v15);
      v4 += 40;
      --v3;
    }
    while (v3);
  }
}

void sub_100C2ADE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2AE00(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 9) >= 0x10u) {
    sub_101A8725C();
  }
  switch(*(unsigned char *)(a2 + 9))
  {
    case 0:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      uint64_t v3 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(unsigned __int8 *)(a2 + 12);
        int v5 = *(unsigned __int8 *)(a2 + 16);
        *(_DWORD *)long long buf = 67240963;
        *(_DWORD *)&uint8_t buf[4] = v4;
        __int16 v247 = 1026;
        *(_DWORD *)char v248 = v5;
        *(_WORD *)&v248[4] = 1040;
        *(_DWORD *)&v248[6] = 10;
        *(_WORD *)&v248[10] = 2097;
        *(void *)&v248[12] = a2 + 17;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_GENERAL sequenceNumber,%{public}u,id,%{public}hhu,data,%{private}.*P", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v6 = *(unsigned __int8 *)(a2 + 12);
        int v7 = *(unsigned __int8 *)(a2 + 16);
        LODWORD(__p) = 67240963;
        HIDWORD(__p) = v6;
        __int16 v251 = 1026;
        *(_DWORD *)v252 = v7;
        *(_WORD *)&v252[4] = 1040;
        *(_DWORD *)&v252[6] = 10;
        *(_WORD *)&v252[10] = 2097;
        *(void *)&v252[12] = a2 + 17;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      break;
    case 1:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      int v52 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v53 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v54 = *(unsigned __int8 *)(a2 + 16);
        if (v54 >= 5) {
          __int16 v55 = +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)];
        }
        else {
          __int16 v55 = off_1022EEA30[(char)v54];
        }
        uint64_t v89 = *(void *)(a2 + 24);
        int v90 = *(unsigned __int8 *)(a2 + 17);
        int v91 = *(unsigned __int8 *)(a2 + 18);
        int v92 = *(unsigned __int8 *)(a2 + 19);
        int v93 = *(unsigned __int8 *)(a2 + 20);
        int v94 = *(unsigned __int8 *)(a2 + 21);
        int v95 = *(unsigned __int8 *)(a2 + 22);
        int v96 = *(unsigned __int8 *)(a2 + 23);
        *(_DWORD *)long long buf = 67242498;
        *(_DWORD *)&uint8_t buf[4] = v53;
        __int16 v247 = 2114;
        *(void *)char v248 = v55;
        *(_WORD *)&v248[8] = 2050;
        *(void *)&v248[10] = v89;
        *(_WORD *)&v248[18] = 1026;
        *(_DWORD *)&v248[20] = v90;
        *(_WORD *)&v248[24] = 1026;
        *(_DWORD *)&v248[26] = v91;
        *(_WORD *)&v248[30] = 1026;
        *(_DWORD *)&v248[32] = v92;
        *(_WORD *)&v248[36] = 1026;
        *(_DWORD *)&v248[38] = v93;
        *(_WORD *)&v248[42] = 1026;
        *(_DWORD *)&v248[44] = v94;
        *(_WORD *)&v248[48] = 1026;
        *(_DWORD *)&v248[50] = v95;
        *(_WORD *)&v248[54] = 1026;
        *(_DWORD *)&v248[56] = v96;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_INEAR_EVENT sequenceNumber,%{public}u,inEarState,%{public}@,timestamp,%{public}llu,status,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u", buf, 0x46u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v158 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v159 = *(unsigned __int8 *)(a2 + 16);
        if (v159 >= 5) {
          uint64_t v160 = +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)];
        }
        else {
          uint64_t v160 = off_1022EEA30[(char)v159];
        }
        uint64_t v183 = *(void *)(a2 + 24);
        int v184 = *(unsigned __int8 *)(a2 + 17);
        int v185 = *(unsigned __int8 *)(a2 + 18);
        int v186 = *(unsigned __int8 *)(a2 + 19);
        int v187 = *(unsigned __int8 *)(a2 + 20);
        int v188 = *(unsigned __int8 *)(a2 + 21);
        int v189 = *(unsigned __int8 *)(a2 + 22);
        int v190 = *(unsigned __int8 *)(a2 + 23);
        LODWORD(__p) = 67242498;
        HIDWORD(__p) = v158;
        __int16 v251 = 2114;
        *(void *)v252 = v160;
        *(_WORD *)&v252[8] = 2050;
        *(void *)&v252[10] = v183;
        *(_WORD *)&v252[18] = 1026;
        *(_DWORD *)&v252[20] = v184;
        *(_WORD *)&v252[24] = 1026;
        *(_DWORD *)&v252[26] = v185;
        *(_WORD *)&v252[30] = 1026;
        *(_DWORD *)&v252[32] = v186;
        *(_WORD *)&v252[36] = 1026;
        *(_DWORD *)&v252[38] = v187;
        *(_WORD *)&v252[42] = 1026;
        *(_DWORD *)&v252[44] = v188;
        *(_WORD *)&v252[48] = 1026;
        *(_DWORD *)&v252[50] = v189;
        *(_WORD *)&v252[54] = 1026;
        *(_DWORD *)&v252[56] = v190;
        uint64_t v191 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v191);
        if (v191 != (char *)buf) {
          free(v191);
        }
      }
      operator new();
    case 2:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      long long v29 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = *(unsigned __int8 *)(a2 + 12);
        uint64_t v31 = *(void *)(a2 + 16);
        int v32 = *(unsigned __int8 *)(a2 + 24);
        int v33 = *(unsigned __int8 *)(a2 + 25);
        int v34 = *(unsigned __int8 *)(a2 + 26);
        int v35 = *(unsigned __int8 *)(a2 + 27);
        int v36 = *(unsigned __int8 *)(a2 + 28);
        int v37 = *(unsigned __int8 *)(a2 + 29);
        int v38 = *(unsigned __int8 *)(a2 + 30);
        int v39 = *(unsigned __int8 *)(a2 + 31);
        *(_DWORD *)long long buf = 67242496;
        *(_DWORD *)&uint8_t buf[4] = v30;
        __int16 v247 = 2050;
        *(void *)char v248 = v31;
        *(_WORD *)&v248[8] = 1026;
        *(_DWORD *)&v248[10] = v32;
        *(_WORD *)&v248[14] = 1026;
        *(_DWORD *)&v248[16] = v33;
        *(_WORD *)&v248[20] = 1026;
        *(_DWORD *)&v248[22] = v34;
        *(_WORD *)&v248[26] = 1026;
        *(_DWORD *)&v248[28] = v35;
        *(_WORD *)&v248[32] = 1026;
        *(_DWORD *)&v248[34] = v36;
        *(_WORD *)&v248[38] = 1026;
        *(_DWORD *)&v248[40] = v37;
        *(_WORD *)&v248[44] = 1026;
        *(_DWORD *)&v248[46] = v38;
        *(_WORD *)&v248[50] = 1026;
        *(_DWORD *)&v248[52] = v39;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_DOUBLE_TAP_EVENT sequenceNumber,%{public}u,timestamp,%{public}llu,status,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u", buf, 0x42u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v132 = *(unsigned __int8 *)(a2 + 12);
        uint64_t v133 = *(void *)(a2 + 16);
        int v134 = *(unsigned __int8 *)(a2 + 24);
        int v135 = *(unsigned __int8 *)(a2 + 25);
        int v136 = *(unsigned __int8 *)(a2 + 26);
        int v137 = *(unsigned __int8 *)(a2 + 27);
        int v138 = *(unsigned __int8 *)(a2 + 28);
        int v139 = *(unsigned __int8 *)(a2 + 29);
        int v140 = *(unsigned __int8 *)(a2 + 30);
        int v141 = *(unsigned __int8 *)(a2 + 31);
        LODWORD(__p) = 67242496;
        HIDWORD(__p) = v132;
        __int16 v251 = 2050;
        *(void *)v252 = v133;
        *(_WORD *)&v252[8] = 1026;
        *(_DWORD *)&v252[10] = v134;
        *(_WORD *)&v252[14] = 1026;
        *(_DWORD *)&v252[16] = v135;
        *(_WORD *)&v252[20] = 1026;
        *(_DWORD *)&v252[22] = v136;
        *(_WORD *)&v252[26] = 1026;
        *(_DWORD *)&v252[28] = v137;
        *(_WORD *)&v252[32] = 1026;
        *(_DWORD *)&v252[34] = v138;
        *(_WORD *)&v252[38] = 1026;
        *(_DWORD *)&v252[40] = v139;
        *(_WORD *)&v252[44] = 1026;
        *(_DWORD *)&v252[46] = v140;
        *(_WORD *)&v252[50] = 1026;
        *(_DWORD *)&v252[52] = v141;
        uint64_t v142 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v142);
        if (v142 != (char *)buf) {
          free(v142);
        }
      }
      operator new();
    case 3:
      sub_100C2E21C((uint64_t)"eEL_IED_TRANSITION", (unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 12));
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_100C2E974();
      }
      return;
    case 4:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      uint64_t v10 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v12 = *(unsigned __int8 *)(a2 + 16);
        if (v12 >= 0xA) {
          uint64_t v13 = +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)];
        }
        else {
          uint64_t v13 = off_1022EEB18[(char)v12];
        }
        int v85 = *(__int16 *)(a2 + 17);
        int v86 = *(__int16 *)(a2 + 19);
        int v87 = *(__int16 *)(a2 + 21);
        int v88 = *(__int16 *)(a2 + 23);
        *(_DWORD *)long long buf = 67241474;
        *(_DWORD *)&uint8_t buf[4] = v11;
        __int16 v247 = 2114;
        *(void *)char v248 = v13;
        *(_WORD *)&v248[8] = 1026;
        *(_DWORD *)&v248[10] = v85;
        *(_WORD *)&v248[14] = 1026;
        *(_DWORD *)&v248[16] = v86;
        *(_WORD *)&v248[20] = 1026;
        *(_DWORD *)&v248[22] = v87;
        *(_WORD *)&v248[26] = 1026;
        *(_DWORD *)&v248[28] = v88;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_SESSION sequenceNumber,%{public}u,state,%{public}@,conchaMin,%{public}d,conchaMax,%{public}d,tragusMin,%{public}d,tragusMax,%{public}d", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v143 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v144 = *(unsigned __int8 *)(a2 + 16);
        if (v144 >= 0xA) {
          uint64_t v145 = +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)];
        }
        else {
          uint64_t v145 = off_1022EEB18[(char)v144];
        }
        int v178 = *(__int16 *)(a2 + 17);
        int v179 = *(__int16 *)(a2 + 19);
        int v180 = *(__int16 *)(a2 + 21);
        int v181 = *(__int16 *)(a2 + 23);
        LODWORD(__p) = 67241474;
        HIDWORD(__p) = v143;
        __int16 v251 = 2114;
        *(void *)v252 = v145;
        *(_WORD *)&v252[8] = 1026;
        *(_DWORD *)&v252[10] = v178;
        *(_WORD *)&v252[14] = 1026;
        *(_DWORD *)&v252[16] = v179;
        *(_WORD *)&v252[20] = 1026;
        *(_DWORD *)&v252[22] = v180;
        *(_WORD *)&v252[26] = 1026;
        *(_DWORD *)&v252[28] = v181;
        uint64_t v182 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v182);
        if (v182 != (char *)buf) {
          free(v182);
        }
      }
      operator new();
    case 5:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      int v56 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v57 = *(unsigned __int8 *)(a2 + 12);
        int v58 = *(unsigned __int8 *)(a2 + 16);
        unsigned int v59 = *(char *)(a2 + 17) + 1;
        if (v59 >= 9) {
          uint64_t v60 = +[NSString stringWithFormat:@"(unknown: %i)", *(char *)(a2 + 17)];
        }
        else {
          uint64_t v60 = off_1022EEA58[v59];
        }
        uint64_t v97 = *(void *)(a2 + 18);
        int v98 = *(__int16 *)(a2 + 26);
        double v99 = *(float *)(a2 + 28);
        double v100 = *(float *)(a2 + 32);
        double v101 = *(float *)(a2 + 36);
        double v102 = *(float *)(a2 + 40);
        *(_DWORD *)long long buf = 67242242;
        *(_DWORD *)&uint8_t buf[4] = v57;
        __int16 v247 = 1026;
        *(_DWORD *)char v248 = v58;
        *(_WORD *)&v248[4] = 2114;
        *(void *)&v248[6] = v60;
        *(_WORD *)&v248[14] = 2050;
        *(void *)&v248[16] = v97;
        *(_WORD *)&v248[24] = 1026;
        *(_DWORD *)&v248[26] = v98;
        *(_WORD *)&v248[30] = 2050;
        *(double *)&v248[32] = v99;
        *(_WORD *)&v248[40] = 2050;
        *(double *)&v248[42] = v100;
        *(_WORD *)&v248[50] = 2050;
        *(double *)&v248[52] = v101;
        *(_WORD *)v249 = 2050;
        *(double *)&v249[2] = v102;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_DOUBLE_TAP_STATUS sequenceNumber,%{public}u,id,%{public}u,detectionStatus,%{public}@,statusTime,%{public}llu,tapInterval,%{public}d,meanAngleY,%{public}f,deltaAngleY,%{public}f,entropyConcha,%{public}f,entropyTragus,%{public}f", buf, 0x50u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v161 = *(unsigned __int8 *)(a2 + 12);
        int v162 = *(unsigned __int8 *)(a2 + 16);
        unsigned int v163 = *(char *)(a2 + 17) + 1;
        if (v163 >= 9) {
          uint64_t v164 = +[NSString stringWithFormat:@"(unknown: %i)", *(char *)(a2 + 17)];
        }
        else {
          uint64_t v164 = off_1022EEA58[v163];
        }
        uint64_t v192 = *(void *)(a2 + 18);
        int v193 = *(__int16 *)(a2 + 26);
        double v194 = *(float *)(a2 + 28);
        double v195 = *(float *)(a2 + 32);
        double v196 = *(float *)(a2 + 36);
        double v197 = *(float *)(a2 + 40);
        LODWORD(__p) = 67242242;
        HIDWORD(__p) = v161;
        __int16 v251 = 1026;
        *(_DWORD *)v252 = v162;
        *(_WORD *)&v252[4] = 2114;
        *(void *)&v252[6] = v164;
        *(_WORD *)&v252[14] = 2050;
        *(void *)&v252[16] = v192;
        *(_WORD *)&v252[24] = 1026;
        *(_DWORD *)&v252[26] = v193;
        *(_WORD *)&v252[30] = 2050;
        *(double *)&v252[32] = v194;
        *(_WORD *)&v252[40] = 2050;
        *(double *)&v252[42] = v195;
        *(_WORD *)&v252[50] = 2050;
        *(double *)&v252[52] = v196;
        *(_WORD *)v253 = 2050;
        *(double *)&v253[2] = v197;
        int v198 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v198);
        if (v198 != (char *)buf) {
          free(v198);
        }
      }
      operator new();
    case 6:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      int v68 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v69 = *(unsigned __int8 *)(a2 + 12);
        int v70 = *(unsigned __int8 *)(a2 + 16);
        unsigned int v71 = *(char *)(a2 + 17) + 1;
        if (v71 >= 9) {
          int v72 = +[NSString stringWithFormat:@"(unknown: %i)", *(char *)(a2 + 17)];
        }
        else {
          int v72 = off_1022EEAA0[v71];
        }
        uint64_t v103 = *(void *)(a2 + 18);
        double v104 = *(float *)(a2 + 26);
        double v105 = *(float *)(a2 + 30);
        *(_DWORD *)long long buf = 67241474;
        *(_DWORD *)&uint8_t buf[4] = v69;
        __int16 v247 = 1026;
        *(_DWORD *)char v248 = v70;
        *(_WORD *)&v248[4] = 2114;
        *(void *)&v248[6] = v72;
        *(_WORD *)&v248[14] = 2050;
        *(void *)&v248[16] = v103;
        *(_WORD *)&v248[24] = 2050;
        *(double *)&v248[26] = v104;
        *(_WORD *)&v248[34] = 2050;
        *(double *)&v248[36] = v105;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_TAP_ACCEPT_STATUS sequenceNumber,%{public}u,id,%{public}u,acceptanceStatus,%{public}@,statusTime,%{public}llu,peakMagnitude,%{public}f,peakWidth,%{public}f", buf, 0x36u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v165 = *(unsigned __int8 *)(a2 + 12);
        int v166 = *(unsigned __int8 *)(a2 + 16);
        unsigned int v167 = *(char *)(a2 + 17) + 1;
        if (v167 >= 9) {
          uint64_t v168 = +[NSString stringWithFormat:@"(unknown: %i)", *(char *)(a2 + 17)];
        }
        else {
          uint64_t v168 = off_1022EEAA0[v167];
        }
        uint64_t v199 = *(void *)(a2 + 18);
        double v200 = *(float *)(a2 + 26);
        double v201 = *(float *)(a2 + 30);
        LODWORD(__p) = 67241474;
        HIDWORD(__p) = v165;
        __int16 v251 = 1026;
        *(_DWORD *)v252 = v166;
        *(_WORD *)&v252[4] = 2114;
        *(void *)&v252[6] = v168;
        *(_WORD *)&v252[14] = 2050;
        *(void *)&v252[16] = v199;
        *(_WORD *)&v252[24] = 2050;
        *(double *)&v252[26] = v200;
        *(_WORD *)&v252[34] = 2050;
        *(double *)&v252[36] = v201;
        uint64_t v202 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v202);
        if (v202 != (char *)buf) {
          free(v202);
        }
      }
      operator new();
    case 7:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      int v40 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = *(unsigned __int8 *)(a2 + 12);
        int v42 = *(_DWORD *)(a2 + 16);
        int v43 = *(_DWORD *)(a2 + 20);
        int v44 = *(__int16 *)(a2 + 24);
        int v45 = *(__int16 *)(a2 + 26);
        int v46 = *(_DWORD *)(a2 + 28);
        int v47 = *(_DWORD *)(a2 + 32);
        int v48 = *(_DWORD *)(a2 + 36);
        int v49 = *(_DWORD *)(a2 + 44);
        int v50 = *(_DWORD *)(a2 + 48);
        int v51 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)long long buf = 67243008;
        *(_DWORD *)&uint8_t buf[4] = v41;
        __int16 v247 = 1026;
        *(_DWORD *)char v248 = v42;
        *(_WORD *)&v248[4] = 1026;
        *(_DWORD *)&v248[6] = v43;
        *(_WORD *)&v248[10] = 1026;
        *(_DWORD *)&v248[12] = v44;
        *(_WORD *)&v248[16] = 1026;
        *(_DWORD *)&v248[18] = v45;
        *(_WORD *)&v248[22] = 1026;
        *(_DWORD *)&v248[24] = v46;
        *(_WORD *)&v248[28] = 1026;
        *(_DWORD *)&v248[30] = v47;
        *(_WORD *)&v248[34] = 1026;
        *(_DWORD *)&v248[36] = v48;
        *(_WORD *)&v248[40] = 1026;
        *(_DWORD *)&v248[42] = v47;
        *(_WORD *)&v248[46] = 1026;
        *(_DWORD *)&v248[48] = v49;
        *(_WORD *)&v248[52] = 1026;
        *(_DWORD *)&v248[54] = v50;
        *(_WORD *)&v248[58] = 1026;
        *(_DWORD *)v249 = v51;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_CALIBRATION sequenceNumber,%{public}u,conchaGain,%{public}d,tragusGain,%{public}d,conchaOffset,%{public}d,tragusOffset,%{public}d,conchaTempCalA,%{public}d,conchaTempCalB,%{public}d,tragusTempCalA,%{public}d,tragusTempCalB,%{public}d,conchaTempCalT0,%{public}d,tragusTempCalT0,%{public}d,isTempCalEnabled,%{public}u", buf, 0x4Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v146 = *(unsigned __int8 *)(a2 + 12);
        int v147 = *(_DWORD *)(a2 + 16);
        int v148 = *(_DWORD *)(a2 + 20);
        int v149 = *(__int16 *)(a2 + 24);
        int v150 = *(__int16 *)(a2 + 26);
        int v151 = *(_DWORD *)(a2 + 28);
        int v152 = *(_DWORD *)(a2 + 32);
        int v153 = *(_DWORD *)(a2 + 36);
        int v154 = *(_DWORD *)(a2 + 44);
        int v155 = *(_DWORD *)(a2 + 48);
        int v156 = *(unsigned __int8 *)(a2 + 52);
        LODWORD(__p) = 67243008;
        HIDWORD(__p) = v146;
        __int16 v251 = 1026;
        *(_DWORD *)v252 = v147;
        *(_WORD *)&v252[4] = 1026;
        *(_DWORD *)&v252[6] = v148;
        *(_WORD *)&v252[10] = 1026;
        *(_DWORD *)&v252[12] = v149;
        *(_WORD *)&v252[16] = 1026;
        *(_DWORD *)&v252[18] = v150;
        *(_WORD *)&v252[22] = 1026;
        *(_DWORD *)&v252[24] = v151;
        *(_WORD *)&v252[28] = 1026;
        *(_DWORD *)&v252[30] = v152;
        *(_WORD *)&v252[34] = 1026;
        *(_DWORD *)&v252[36] = v153;
        *(_WORD *)&v252[40] = 1026;
        *(_DWORD *)&v252[42] = v152;
        *(_WORD *)&v252[46] = 1026;
        *(_DWORD *)&v252[48] = v154;
        *(_WORD *)&v252[52] = 1026;
        *(_DWORD *)&v252[54] = v155;
        *(_WORD *)&v252[58] = 1026;
        *(_DWORD *)v253 = v156;
        uint64_t v157 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v157);
        if (v157 != (char *)buf) {
          free(v157);
        }
      }
      operator new();
    case 8:
      sub_100C2E21C((uint64_t)"eEL_IED_STATUS", (unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 12));
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_100C2E974();
      }
      return;
    case 9:
      sub_10010F274((uint64_t)&__p);
      sub_100132EFC(&v252[6], (uint64_t)"concha", 6);
      for (uint64_t i = 17; i != 57; i += 2)
      {
        sub_100132EFC(&v252[6], (uint64_t)",", 1);
        std::ostream::operator<<();
      }
      sub_100132EFC(&v252[6], (uint64_t)",tragus", 7);
      for (uint64_t j = 0; j != 40; j += 2)
      {
        sub_100132EFC(&v252[6], (uint64_t)",", 1);
        std::ostream::operator<<();
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      uint64_t v25 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v27 = *(unsigned __int8 *)(a2 + 16);
        long long v28 = v27 >= 0xA
            ? +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)]: (NSString *)off_1022EEB18[(char)v27];
        std::stringbuf::str();
        uint64_t v106 = SBYTE3(v225) >= 0 ? v221 : *(uint8_t **)v221;
        int v107 = *(_DWORD *)(a2 + 97);
        int v108 = *(_DWORD *)(a2 + 101);
        int v109 = *(_DWORD *)(a2 + 105);
        int v110 = *(_DWORD *)(a2 + 109);
        int v111 = *(char *)(a2 + 113);
        int v112 = *(char *)(a2 + 114);
        *(_DWORD *)long long buf = 67242242;
        *(_DWORD *)&uint8_t buf[4] = v26;
        __int16 v247 = 2114;
        *(void *)char v248 = v28;
        *(_WORD *)&v248[8] = 2082;
        *(void *)&v248[10] = v106;
        *(_WORD *)&v248[18] = 1026;
        *(_DWORD *)&v248[20] = v107;
        *(_WORD *)&v248[24] = 1026;
        *(_DWORD *)&v248[26] = v108;
        *(_WORD *)&v248[30] = 1026;
        *(_DWORD *)&v248[32] = v109;
        *(_WORD *)&v248[36] = 1026;
        *(_DWORD *)&v248[38] = v110;
        *(_WORD *)&v248[42] = 1026;
        *(_DWORD *)&v248[44] = v111;
        *(_WORD *)&v248[48] = 1026;
        *(_DWORD *)&v248[50] = v112;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_BASELINING sequenceNumber,%{public}u,state,%{public}@,%{public}s,oldConchaOpenLidResp,%{public}d,oldTragusOpenLidResp,%{public}d,newConchaOpenLidResp,%{public}d,newTragusOpenLidResp,%{public}d,conchaMinAccepted,%{public}d,tragusMinAccepted,%{public}d", buf, 0x40u);
        if (SBYTE3(v225) < 0) {
          operator delete(*(void **)v221);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v172 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v173 = *(unsigned __int8 *)(a2 + 16);
        if (v173 >= 0xA) {
          long long v174 = +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)];
        }
        else {
          long long v174 = off_1022EEB18[(char)v173];
        }
        std::stringbuf::str();
        if (v245 >= 0) {
          uint64_t v203 = &v242;
        }
        else {
          uint64_t v203 = v242;
        }
        int v204 = *(_DWORD *)(a2 + 97);
        int v205 = *(_DWORD *)(a2 + 101);
        int v206 = *(_DWORD *)(a2 + 105);
        int v207 = *(_DWORD *)(a2 + 109);
        int v208 = *(char *)(a2 + 113);
        int v209 = *(char *)(a2 + 114);
        *(_DWORD *)int v221 = 67242242;
        *(_DWORD *)&v221[4] = v172;
        __int16 v222 = 2114;
        uint64_t v223 = v174;
        __int16 v224 = 2082;
        v225 = v203;
        __int16 v226 = 1026;
        int v227 = v204;
        __int16 v228 = 1026;
        int v229 = v205;
        __int16 v230 = 1026;
        int v231 = v206;
        __int16 v232 = 1026;
        int v233 = v207;
        __int16 v234 = 1026;
        int v235 = v208;
        __int16 v236 = 1026;
        int v237 = v209;
        uint64_t v210 = (char *)_os_log_send_and_compose_impl();
        if (v245 < 0) {
          operator delete(v242);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v210);
        if (v210 != (char *)buf) {
          free(v210);
        }
      }
      operator new();
    case 0xA:
      sub_10010F274((uint64_t)&__p);
      sub_100132EFC(&v252[6], (uint64_t)"concha", 6);
      for (uint64_t k = 0; k != 30; k += 2)
      {
        sub_100132EFC(&v252[6], (uint64_t)",", 1);
        std::ostream::operator<<();
      }
      sub_100132EFC(&v252[6], (uint64_t)",tragus", 7);
      for (uint64_t m = 0; m != 30; m += 2)
      {
        sub_100132EFC(&v252[6], (uint64_t)",", 1);
        std::ostream::operator<<();
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      int v75 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v76 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v77 = *(unsigned __int8 *)(a2 + 16);
        uint64_t v78 = v77 >= 0xA
            ? +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)]: (NSString *)off_1022EEB18[(char)v77];
        std::stringbuf::str();
        CFAbsoluteTime v113 = SBYTE3(v225) >= 0 ? v221 : *(uint8_t **)v221;
        int v114 = *(_DWORD *)(a2 + 77);
        int v115 = *(_DWORD *)(a2 + 81);
        int v116 = *(_DWORD *)(a2 + 85);
        int v117 = *(_DWORD *)(a2 + 89);
        int v118 = *(unsigned __int8 *)(a2 + 93);
        int v119 = *(unsigned __int8 *)(a2 + 94);
        int v120 = *(unsigned __int8 *)(a2 + 95);
        int v121 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)long long buf = 67242754;
        *(_DWORD *)&uint8_t buf[4] = v76;
        __int16 v247 = 2114;
        *(void *)char v248 = v78;
        *(_WORD *)&v248[8] = 2082;
        *(void *)&v248[10] = v113;
        *(_WORD *)&v248[18] = 1026;
        *(_DWORD *)&v248[20] = v114;
        *(_WORD *)&v248[24] = 1026;
        *(_DWORD *)&v248[26] = v115;
        *(_WORD *)&v248[30] = 1026;
        *(_DWORD *)&v248[32] = v116;
        *(_WORD *)&v248[36] = 1026;
        *(_DWORD *)&v248[38] = v117;
        *(_WORD *)&v248[42] = 1026;
        *(_DWORD *)&v248[44] = v118;
        *(_WORD *)&v248[48] = 1026;
        *(_DWORD *)&v248[50] = v119;
        *(_WORD *)&v248[54] = 1026;
        *(_DWORD *)&v248[56] = v120;
        *(_WORD *)v249 = 1026;
        *(_DWORD *)&v249[2] = v121;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_SENSOR_DROP sequenceNumber,%{public}u,state,%{public}@,%{public}s,xMean,%{public}d,yMean,%{public}d,xVariance,%{public}d,yVariance,%{public}d,conchaDropped,%{public}u,tragusDropped,%{public}u,conchaRecovered,%{public}u,tragusRecovered,%{public}u", buf, 0x4Cu);
        if (SBYTE3(v225) < 0) {
          operator delete(*(void **)v221);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v175 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v176 = *(unsigned __int8 *)(a2 + 16);
        if (v176 >= 0xA) {
          uint64_t v177 = +[NSString stringWithFormat:@"(unknown: %i)", *(unsigned __int8 *)(a2 + 16)];
        }
        else {
          uint64_t v177 = off_1022EEB18[(char)v176];
        }
        std::stringbuf::str();
        if (v245 >= 0) {
          long long v211 = &v242;
        }
        else {
          long long v211 = v242;
        }
        int v212 = *(_DWORD *)(a2 + 77);
        int v213 = *(_DWORD *)(a2 + 81);
        int v214 = *(_DWORD *)(a2 + 85);
        int v215 = *(_DWORD *)(a2 + 89);
        int v216 = *(unsigned __int8 *)(a2 + 93);
        int v217 = *(unsigned __int8 *)(a2 + 94);
        int v218 = *(unsigned __int8 *)(a2 + 95);
        int v219 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)int v221 = 67242754;
        *(_DWORD *)&v221[4] = v175;
        __int16 v222 = 2114;
        uint64_t v223 = v177;
        __int16 v224 = 2082;
        v225 = v211;
        __int16 v226 = 1026;
        int v227 = v212;
        __int16 v228 = 1026;
        int v229 = v213;
        __int16 v230 = 1026;
        int v231 = v214;
        __int16 v232 = 1026;
        int v233 = v215;
        __int16 v234 = 1026;
        int v235 = v216;
        __int16 v236 = 1026;
        int v237 = v217;
        __int16 v238 = 1026;
        int v239 = v218;
        __int16 v240 = 1026;
        int v241 = v219;
        uint64_t v220 = (char *)_os_log_send_and_compose_impl();
        if (v245 < 0) {
          operator delete(v242);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v220);
        if (v220 != (char *)buf) {
          free(v220);
        }
      }
      operator new();
    case 0xB:
      if (*(unsigned __int8 *)(a2 + 16) >= 0xFu) {
        int v9 = 15;
      }
      else {
        int v9 = *(unsigned __int8 *)(a2 + 16);
      }
      sub_10010F274((uint64_t)&__p);
      sub_100132EFC(&v252[6], (uint64_t)"history", 7);
      if (v9) {
        operator new();
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      uint64_t v79 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v80 = *(unsigned __int8 *)(a2 + 12);
        std::stringbuf::str();
        uint64_t v81 = v248[13] >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)int v221 = 67240450;
        *(_DWORD *)&v221[4] = v80;
        __int16 v222 = 2082;
        uint64_t v223 = v81;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] sequenceNumber,%{public}u,eEL_IED_FSM_TRANSITION_HISTORY %{public}s", v221, 0x12u);
        if ((v248[13] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v82 = *(unsigned __int8 *)(a2 + 12);
        std::stringbuf::str();
        if (SBYTE3(v225) >= 0) {
          uint64_t v83 = v221;
        }
        else {
          uint64_t v83 = *(uint8_t **)v221;
        }
        LODWORD(v242) = 67240450;
        HIDWORD(v242) = v82;
        __int16 v243 = 2082;
        v244 = v83;
        uint64_t v84 = (char *)_os_log_send_and_compose_impl();
        if (SBYTE3(v225) < 0) {
          operator delete(*(void **)v221);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v84);
        if (v84 != (char *)buf) {
          free(v84);
        }
      }
      *(void **)((char *)&__p
      *(void *)&v252[6] = v122;
      if (v255 < 0) {
        operator delete(v254);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      std::ios::~ios();
      break;
    case 0xC:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      uint64_t v14 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(unsigned __int8 *)(a2 + 12);
        int v16 = *(unsigned __int8 *)(a2 + 16);
        int v17 = *(unsigned __int8 *)(a2 + 17);
        int v18 = *(unsigned __int16 *)(a2 + 18);
        int v19 = *(_DWORD *)(a2 + 20);
        int v20 = *(_DWORD *)(a2 + 24);
        int v21 = *(_DWORD *)(a2 + 28);
        uint64_t v22 = *(void *)(a2 + 32);
        *(_DWORD *)long long buf = 67241984;
        *(_DWORD *)&uint8_t buf[4] = v15;
        __int16 v247 = 1026;
        *(_DWORD *)char v248 = v16;
        *(_WORD *)&v248[4] = 1026;
        *(_DWORD *)&v248[6] = v17;
        *(_WORD *)&v248[10] = 1026;
        *(_DWORD *)&v248[12] = v18;
        *(_WORD *)&v248[16] = 1026;
        *(_DWORD *)&v248[18] = v19;
        *(_WORD *)&v248[22] = 1026;
        *(_DWORD *)&v248[24] = v20;
        *(_WORD *)&v248[28] = 1026;
        *(_DWORD *)&v248[30] = v21;
        *(_WORD *)&v248[34] = 2050;
        *(void *)&v248[36] = v22;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_TEMP_COMP sequenceNumber,%{public}u,isValid,%{public}u,pwrState,%{public}u,prescalar,%{public}d,wdtPeriod_ms,%{public}d,conchaDegreeC,%{public}d,tragusDegreeC,%{public}d,timestamp,%{public}llu", buf, 0x36u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        int v123 = *(unsigned __int8 *)(a2 + 12);
        int v124 = *(unsigned __int8 *)(a2 + 16);
        int v125 = *(unsigned __int8 *)(a2 + 17);
        int v126 = *(unsigned __int16 *)(a2 + 18);
        int v127 = *(_DWORD *)(a2 + 20);
        int v128 = *(_DWORD *)(a2 + 24);
        int v129 = *(_DWORD *)(a2 + 28);
        uint64_t v130 = *(void *)(a2 + 32);
        LODWORD(__p) = 67241984;
        HIDWORD(__p) = v123;
        __int16 v251 = 1026;
        *(_DWORD *)v252 = v124;
        *(_WORD *)&v252[4] = 1026;
        *(_DWORD *)&v252[6] = v125;
        *(_WORD *)&v252[10] = 1026;
        *(_DWORD *)&v252[12] = v126;
        *(_WORD *)&v252[16] = 1026;
        *(_DWORD *)&v252[18] = v127;
        *(_WORD *)&v252[22] = 1026;
        *(_DWORD *)&v252[24] = v128;
        *(_WORD *)&v252[28] = 1026;
        *(_DWORD *)&v252[30] = v129;
        *(_WORD *)&v252[34] = 2050;
        *(void *)&v252[36] = v130;
        uint64_t v131 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v131);
        if (v131 != (char *)buf) {
          free(v131);
        }
      }
      operator new();
    case 0xD:
      int v61 = *(unsigned __int8 *)(a2 + 12);
      sub_10010F274((uint64_t)&__p);
      sub_100132EFC(&v252[6], (uint64_t)"conchaSlow", 10);
      for (uint64_t n = 0; n != 30; n += 2)
      {
        sub_100132EFC(&v252[6], (uint64_t)",", 1);
        std::ostream::operator<<();
      }
      sub_100132EFC(&v252[6], (uint64_t)",tragusSlow", 11);
      for (iuint64_t i = 0; ii != 30; ii += 2)
      {
        sub_100132EFC(&v252[6], (uint64_t)",", 1);
        std::ostream::operator<<();
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022EDE58);
      }
      uint64_t v64 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        __int16 v65 = SBYTE3(v225) >= 0 ? v221 : *(uint8_t **)v221;
        int v66 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)long long buf = 67240706;
        *(_DWORD *)&uint8_t buf[4] = v61;
        __int16 v247 = 2082;
        *(void *)char v248 = v65;
        *(_WORD *)&v248[8] = 1026;
        *(_DWORD *)&v248[10] = v66;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_ADDITIONAL_STATE sequenceNumber,%{public}u,%{public}s,lastSampleId,%{public}d", buf, 0x18u);
        if (SBYTE3(v225) < 0) {
          operator delete(*(void **)v221);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022EDE58);
        }
        std::stringbuf::str();
        if (v245 >= 0) {
          uint64_t v169 = &v242;
        }
        else {
          uint64_t v169 = v242;
        }
        int v170 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)int v221 = 67240706;
        *(_DWORD *)&v221[4] = v61;
        __int16 v222 = 2082;
        uint64_t v223 = v169;
        __int16 v224 = 1026;
        LODWORD(v225) = v170;
        long long v171 = (char *)_os_log_send_and_compose_impl();
        if (v245 < 0) {
          operator delete(v242);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void (anonymous namespace)::logIEDAdditionalState(const sLog_IEDAdditionalState_t &, uint8_t)", "%s\n", v171);
        if (v171 != (char *)buf) {
          free(v171);
        }
      }
      *(void **)((char *)&__p
      *(void *)&v252[6] = v67;
      if (v255 < 0) {
        operator delete(v254);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      std::ios::~ios();
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        operator new();
      }
      return;
    case 0xE:
      operator new();
    case 0xF:
      operator new();
    default:
      return;
  }
}

void sub_100C2DEF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100C2E21C(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  sub_10010F274((uint64_t)v44);
  sub_100132EFC(v45, (uint64_t)"concha", 6);
  for (uint64_t i = 1; i != 31; i += 2)
  {
    sub_100132EFC(v45, (uint64_t)",", 1);
    std::ostream::operator<<();
  }
  sub_100132EFC(v45, (uint64_t)",tragus", 7);
  for (uint64_t j = 31; j != 61; j += 2)
  {
    sub_100132EFC(v45, (uint64_t)",", 1);
    std::ostream::operator<<();
  }
  if (a3 > 0xE)
  {
    sub_100132EFC(v45, (uint64_t)",concha temperature", 19);
    for (uint64_t k = 0; k != 30; k += 2)
    {
      sub_100132EFC(v45, (uint64_t)",", 1);
      std::ostream::operator<<();
    }
    sub_100132EFC(v45, (uint64_t)",tragus temperature", 19);
    for (uint64_t m = 0; m != 30; m += 2)
    {
      sub_100132EFC(v45, (uint64_t)",", 1);
      std::ostream::operator<<();
    }
  }
  sub_100132EFC(v45, (uint64_t)",tip", 4);
  for (uint64_t n = 61; n != 76; ++n)
  {
    uint64_t v13 = sub_100132EFC(v45, (uint64_t)",", 1);
    std::to_string((std::string *)v66, (char)a2[n]);
    if (v66[23] >= 0) {
      uint64_t v14 = v66;
    }
    else {
      uint64_t v14 = *(unsigned char **)v66;
    }
    if (v66[23] >= 0) {
      uint64_t v15 = v66[23];
    }
    else {
      uint64_t v15 = *(void *)&v66[8];
    }
    sub_100132EFC(v13, (uint64_t)v14, v15);
    if ((v66[23] & 0x80000000) != 0) {
      operator delete(*(void **)v66);
    }
  }
  sub_100132EFC(v45, (uint64_t)",tilt", 5);
  for (iuint64_t i = 76; ii != 91; ++ii)
  {
    int v17 = sub_100132EFC(v45, (uint64_t)",", 1);
    std::to_string((std::string *)v66, (char)a2[ii]);
    if (v66[23] >= 0) {
      int v18 = v66;
    }
    else {
      int v18 = *(unsigned char **)v66;
    }
    if (v66[23] >= 0) {
      uint64_t v19 = v66[23];
    }
    else {
      uint64_t v19 = *(void *)&v66[8];
    }
    sub_100132EFC(v17, (uint64_t)v18, v19);
    if ((v66[23] & 0x80000000) != 0) {
      operator delete(*(void **)v66);
    }
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022EDE58);
  }
  int v20 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v21 = *a2;
    uint64_t v22 = v21 >= 0xA
        ? +[NSString stringWithFormat:@"(unknown: %i)", *a2]
        : (NSString *)off_1022EEB18[(char)v21];
    std::stringbuf::str();
    uint64_t v23 = SBYTE3(v51) >= 0 ? __p : *(unsigned char **)__p;
    double v24 = *(float *)(a2 + 91);
    double v25 = *(float *)(a2 + 95);
    double v26 = *(float *)(a2 + 99);
    double v27 = *(float *)(a2 + 103);
    int v28 = (char)a2[107];
    int v29 = (char)a2[108];
    *(_DWORD *)int v66 = 136448514;
    *(void *)&v66[4] = a1;
    *(_WORD *)&v66[12] = 1026;
    *(_DWORD *)&v66[14] = a4;
    *(_WORD *)&v66[18] = 2114;
    *(void *)&v66[20] = v22;
    __int16 v67 = 2082;
    int v68 = v23;
    __int16 v69 = 2050;
    double v70 = v24;
    __int16 v71 = 2050;
    double v72 = v25;
    __int16 v73 = 2050;
    double v74 = v26;
    __int16 v75 = 2050;
    double v76 = v27;
    __int16 v77 = 1026;
    int v78 = v28;
    __int16 v79 = 1026;
    int v80 = v29;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] %{public}s sequenceNumber,%{public}u,state,%{public}@,%{public}s,conchaRunningMin,%{public}f,tragusRunningMin,%{public}f,conchaBaseline,%{public}f,tragusBaseline,%{public}f,runningMinAccepted,%{public}d,ringBufferUpdated,%{public}d", v66, 0x5Au);
    if (SBYTE3(v51) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v66, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022EDE58);
    }
    unsigned int v32 = *a2;
    if (v32 >= 0xA) {
      int v33 = +[NSString stringWithFormat:@"(unknown: %i)", *a2];
    }
    else {
      int v33 = off_1022EEB18[(char)v32];
    }
    std::stringbuf::str();
    if (v43 >= 0) {
      int v34 = &v42;
    }
    else {
      int v34 = v42;
    }
    double v35 = *(float *)(a2 + 91);
    double v36 = *(float *)(a2 + 95);
    double v37 = *(float *)(a2 + 99);
    double v38 = *(float *)(a2 + 103);
    int v39 = (char)a2[107];
    int v40 = (char)a2[108];
    *(_DWORD *)__n128 __p = 136448514;
    *(void *)&__p[4] = a1;
    __int16 v48 = 1026;
    int v49 = a4;
    __int16 v50 = 2114;
    int v51 = v33;
    __int16 v52 = 2082;
    int v53 = v34;
    __int16 v54 = 2050;
    double v55 = v35;
    __int16 v56 = 2050;
    double v57 = v36;
    __int16 v58 = 2050;
    double v59 = v37;
    __int16 v60 = 2050;
    double v61 = v38;
    __int16 v62 = 1026;
    int v63 = v39;
    __int16 v64 = 1026;
    int v65 = v40;
    int v41 = (char *)_os_log_send_and_compose_impl();
    if (v43 < 0) {
      operator delete(v42);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void (anonymous namespace)::logIEDData(const char *, const _sLog_IEDData_t &, uint8_t, uint8_t)", "%s\n", v41);
    if (v41 != v66) {
      free(v41);
    }
  }
  *(void *)((char *)v44
  v45[0] = v30;
  if (v46 < 0) {
    operator delete((void *)v45[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100C2E908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C2E974()
{
}

void sub_100C2EBC0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_100C2EC20()
{
}

void sub_100C2ED24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C341AC((void **)va);
  _Unwind_Resume(a1);
}

void sub_100C2ED68(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    int v4 = (unsigned __int8 *)(a2 + 16);
    do
    {
      sub_10170140C(v19);
      sub_101723C48((uint64_t)v19);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v22 |= 1u;
      CFAbsoluteTime v21 = Current;
      uint64_t v6 = v20;
      *(float *)&CFAbsoluteTime Current = (float)*((__int16 *)v4 + 2);
      *(_WORD *)(v20 + 56) |= 4u;
      *(_DWORD *)(v6 + 24) = LODWORD(Current);
      uint64_t v7 = v20;
      *(float *)&CFAbsoluteTime Current = (float)*((__int16 *)v4 + 1);
      *(_WORD *)(v20 + 56) |= 0x20u;
      *(_DWORD *)(v7 + 36) = LODWORD(Current);
      uint64_t v8 = v20;
      *(float *)&CFAbsoluteTime Current = (float)*((__int16 *)v4 + 3);
      *(_WORD *)(v20 + 56) |= 0x200u;
      *(_DWORD *)(v8 + 52) = LODWORD(Current);
      uint64_t v9 = v20;
      uint64_t v10 = *((void *)v4 - 2);
      *(_WORD *)(v20 + 56) |= 2u;
      *(void *)(v9 + 16) = v10;
      uint64_t v11 = v20;
      int v12 = v4[1];
      *(_WORD *)(v20 + 56) |= 0x100u;
      *(_DWORD *)(v11 + 48) = v12;
      uint64_t v13 = v20;
      int v14 = *((unsigned __int16 *)v4 + 4);
      *(_WORD *)(v20 + 56) |= 0x80u;
      *(_DWORD *)(v13 + 44) = v14;
      uint64_t v15 = v20;
      int v16 = *v4;
      *(_WORD *)(v20 + 56) |= 0x40u;
      *(_DWORD *)(v15 + 40) = v16;
      uint64_t v17 = v20;
      uint64_t v18 = *((void *)v4 - 1);
      *(_WORD *)(v20 + 56) |= 1u;
      *(void *)(v17 + 8) = v18;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v19);
      }
      sub_101706914((PB::Base *)v19);
      v4 += 32;
      --v3;
    }
    while (v3);
  }
}

void sub_100C2EEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

__n128 sub_100C2EF0C(uint64_t a1, __n128 *a2)
{
  sub_100C34734(a1);
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  __n128 result = *a2;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

__n128 sub_100C2EF60(uint64_t a1, __n128 *a2)
{
  sub_100C347A8(a1);
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  __n128 result = *a2;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void sub_100C2EFB4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = (uint64_t *)(a2 + 24);
    do
    {
      sub_10170140C(v16);
      sub_101723BB8((uint64_t)v16);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v19 |= 1u;
      CFAbsoluteTime v18 = Current;
      uint64_t v6 = v17;
      int v7 = *((unsigned __int16 *)v4 + 4);
      *(unsigned char *)(v17 + 36) |= 4u;
      *(_DWORD *)(v6 + 28) = v7;
      uint64_t v8 = v17;
      LODWORD(Current) = *((_DWORD *)v4 + 3);
      *(unsigned char *)(v17 + 36) |= 8u;
      *(_DWORD *)(v8 + 32) = LODWORD(Current);
      sub_1016BB1E0(v17);
      uint64_t v9 = *(void *)(v17 + 8);
      uint64_t v10 = *(v4 - 3);
      *(_WORD *)(v9 + 44) |= 1u;
      *(void *)(v9 + 8) = v10;
      uint64_t v11 = *(void *)(v17 + 8);
      LODWORD(v10) = *((_DWORD *)v4 - 4);
      *(_WORD *)(v11 + 44) |= 0x10u;
      *(_DWORD *)(v11 + 28) = v10;
      uint64_t v12 = *(void *)(v17 + 8);
      LODWORD(v10) = *((_DWORD *)v4 - 3);
      *(_WORD *)(v12 + 44) |= 0x20u;
      *(_DWORD *)(v12 + 32) = v10;
      uint64_t v13 = *(void *)(v17 + 8);
      LODWORD(v10) = *((_DWORD *)v4 - 2);
      *(_WORD *)(v13 + 44) |= 0x40u;
      *(_DWORD *)(v13 + 36) = v10;
      uint64_t v14 = v17;
      uint64_t v15 = *v4;
      *(unsigned char *)(v17 + 36) |= 1u;
      *(void *)(v14 + 16) = v15;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v16);
      }
      sub_101706914((PB::Base *)v16);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
}

void sub_100C2F134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2F14C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = (unint64_t *)(a2 + 16);
    do
    {
      sub_10170140C(v12);
      sub_101726558((uint64_t)v12);
      uint64_t v5 = v13;
      uint64_t v6 = *(v4 - 2);
      *(unsigned char *)(v13 + 36) |= 2u;
      *(void *)(v5 + 16) = v6;
      uint64_t v7 = v13;
      int v8 = *((_DWORD *)v4 - 2);
      *(unsigned char *)(v13 + 36) |= 8u;
      *(_DWORD *)(v7 + 28) = v8;
      uint64_t v9 = v13;
      LODWORD(v6) = *((_DWORD *)v4 - 1);
      *(unsigned char *)(v13 + 36) |= 4u;
      *(_DWORD *)(v9 + 24) = v6;
      uint64_t v10 = v13;
      double v11 = (double)*v4;
      *(unsigned char *)(v13 + 36) |= 1u;
      *(double *)(v10 + 8) = v11;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v12);
      }
      sub_101706914((PB::Base *)v12);
      v4 += 4;
      --v3;
    }
    while (v3);
  }
}

void sub_100C2F25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2F274(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = (unsigned __int8 *)(a2 + 19);
    do
    {
      sub_10170140C(v16);
      sub_1017265E8((uint64_t)v16);
      uint64_t v5 = v17;
      uint64_t v6 = *(void *)(v4 - 19);
      char v7 = v17[224];
      v17[224] = v7 | 2;
      *((void *)v5 + 26) = v6;
      uint64_t v8 = *(void *)(v4 - 11);
      v5[224] = v7 | 3;
      *((void *)v5 + 25) = v8;
      LODWORD(v8) = *(v4 - 3);
      v5[224] = v7 | 0xB;
      *((_DWORD *)v5 + 55) = v8;
      LODWORD(v8) = *(v4 - 2);
      v5[224] = v7 | 0xF;
      *((_DWORD *)v5 + 54) = v8;
      LODWORD(v8) = *v4;
      int __src = *(v4 - 1);
      int v19 = v8;
      int v20 = v4[1];
      sub_1000FB43C(v5 + 8, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v9 = v4[6];
      int __src = v4[5];
      int v19 = v9;
      int v20 = v4[7];
      sub_1000FB43C(v17 + 32, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v10 = v4[9];
      int __src = v4[8];
      int v19 = v10;
      int v20 = v4[10];
      sub_1000FB43C(v17 + 56, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v11 = v4[15];
      int __src = v4[14];
      int v19 = v11;
      int v20 = v4[16];
      sub_1000FB43C(v17 + 80, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v12 = v4[3];
      int __src = v4[2];
      int v19 = v12;
      int v20 = v4[4];
      sub_1000FB43C(v17 + 128, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v13 = v4[12];
      int __src = v4[11];
      int v19 = v13;
      int v20 = v4[13];
      sub_1000FB43C(v17 + 152, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v14 = v4[18];
      int __src = v4[17];
      int v19 = v14;
      sub_1000FB43C(v17 + 176, (char *)&__src, (uint64_t)&v20, 2uLL);
      int v15 = v4[20];
      int __src = v4[19];
      int v19 = v15;
      sub_1000FB43C(v17 + 104, (char *)&__src, (uint64_t)&v20, 2uLL);
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v16);
      }
      sub_101706914((PB::Base *)v16);
      v4 += 40;
      --v3;
    }
    while (v3);
  }
}

void sub_100C2F500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C2F538(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = (uint64_t *)(a2 + 24);
    do
    {
      sub_10170140C(v16);
      sub_101725118((uint64_t)v16);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v19 |= 1u;
      CFAbsoluteTime v18 = Current;
      uint64_t v6 = v17;
      int v7 = *((unsigned __int16 *)v4 + 4);
      *(unsigned char *)(v17 + 32) |= 4u;
      *(_DWORD *)(v6 + 28) = v7;
      sub_1016BD1E4(v17);
      uint64_t v8 = *(void *)(v17 + 8);
      uint64_t v9 = *(v4 - 3);
      *(unsigned char *)(v8 + 36) |= 1u;
      *(void *)(v8 + 8) = v9;
      uint64_t v10 = *(void *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 - 4);
      *(unsigned char *)(v10 + 36) |= 8u;
      *(_DWORD *)(v10 + 24) = v9;
      uint64_t v11 = *(void *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 - 3);
      *(unsigned char *)(v11 + 36) |= 0x10u;
      *(_DWORD *)(v11 + 28) = v9;
      uint64_t v12 = *(void *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 - 2);
      *(unsigned char *)(v12 + 36) |= 0x20u;
      *(_DWORD *)(v12 + 32) = v9;
      uint64_t v13 = *(void *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 + 3);
      *(unsigned char *)(v13 + 36) |= 4u;
      *(_DWORD *)(v13 + 20) = v9;
      uint64_t v14 = v17;
      uint64_t v15 = *v4;
      *(unsigned char *)(v17 + 32) |= 1u;
      *(void *)(v14 + 16) = v15;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v16);
      }
      sub_101706914((PB::Base *)v16);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
}

void sub_100C2F6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2F6D4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 144 * a3;
    do
    {
      sub_10170140C(v33);
      sub_101724788((uint64_t)v33);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v36 |= 1u;
      CFAbsoluteTime v35 = Current;
      sub_1016CA3F4(v34);
      uint64_t v7 = *(void *)(v34 + 72);
      uint64_t v8 = *(void *)(a2 + v4 + 64);
      *(unsigned char *)(v7 + 152) |= 2u;
      *(void *)(v7 + 136) = v8;
      long long __src = *(_OWORD *)(a2 + v4);
      sub_1000FB43C((char *)(*(void *)(v34 + 72) + 56), (char *)&__src, (uint64_t)&v38, 4uLL);
      *(void *)&long long __src = *(void *)(a2 + v4 + 16);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 24);
      sub_1000FB43C((char *)(*(void *)(v34 + 72) + 80), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(void *)&long long __src = *(void *)(a2 + v4 + 28);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 36);
      sub_1000FB43C((char *)(*(void *)(v34 + 72) + 32), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(void *)&long long __src = *(void *)(a2 + v4 + 40);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 48);
      sub_1000FB43C((char *)(*(void *)(v34 + 72) + 104), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      uint64_t v9 = *(void *)(v34 + 72);
      uint64_t v10 = a2 + v4;
      int v11 = *(unsigned __int16 *)(a2 + v4 + 52);
      *(unsigned char *)(v9 + 152) |= 4u;
      *(_DWORD *)(v9 + 144) = v11;
      uint64_t v12 = *(void *)(v34 + 72);
      uint64_t v13 = *(void *)(a2 + v4 + 56);
      *(unsigned char *)(v12 + 152) |= 1u;
      *(void *)(v12 + 128) = v13;
      *(void *)&long long __src = *(void *)(a2 + v4 + 80);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 88);
      sub_1000FB43C((char *)(v34 + 8), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      uint64_t v14 = v34;
      int v15 = *(_DWORD *)(a2 + v4 + 92);
      *(_WORD *)(v34 + 116) |= 0x40u;
      *(_DWORD *)(v14 + 96) = v15;
      uint64_t v16 = v34;
      int v17 = *(_DWORD *)(a2 + v4 + 96);
      *(_WORD *)(v34 + 116) |= 0x20u;
      *(_DWORD *)(v16 + 92) = v17;
      uint64_t v18 = v34;
      int v19 = *(_DWORD *)(a2 + v4 + 100);
      *(_WORD *)(v34 + 116) |= 0x100u;
      *(_DWORD *)(v18 + 104) = v19;
      uint64_t v20 = v34;
      if (*(_DWORD *)(a2 + v4 + 104) == 2) {
        int v21 = 1;
      }
      else {
        int v21 = 2;
      }
      *(_WORD *)(v34 + 116) |= 0x10u;
      *(_DWORD *)(v20 + 88) = v21;
      uint64_t v22 = v34;
      int v23 = *(_DWORD *)(v10 + 108);
      *(_WORD *)(v34 + 116) |= 0x200u;
      *(_DWORD *)(v22 + 108) = v23;
      uint64_t v24 = v34;
      uint64_t v25 = *(void *)(v10 + 112);
      *(_WORD *)(v34 + 116) |= 1u;
      *(void *)(v24 + 56) = v25;
      uint64_t v26 = v34;
      float v27 = *(double *)(v10 + 72);
      *(_WORD *)(v34 + 116) |= 8u;
      *(float *)(v26 + 84) = v27;
      uint64_t v28 = v34;
      float v29 = *(double *)(v10 + 120);
      *(_WORD *)(v34 + 116) |= 0x80u;
      *(float *)(v28 + 100) = v29;
      uint64_t v30 = v34;
      LOBYTE(v25) = *(unsigned char *)(v10 + 143);
      *(_WORD *)(v34 + 116) |= 0x400u;
      *(unsigned char *)(v30 + 112) = v25;
      if (*(unsigned char *)(v10 + 140))
      {
        *(void *)&long long __src = *(void *)(a2 + v4 + 128);
        DWORD2(__src) = *(_DWORD *)(a2 + v4 + 136);
        sub_1000FB43C((char *)(v34 + 32), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      }
      if (*(unsigned char *)(a2 + v4 + 142))
      {
        uint64_t v31 = v34;
        int v32 = *(unsigned __int8 *)(a2 + v4 + 141);
        *(_WORD *)(v34 + 116) |= 4u;
        *(_DWORD *)(v31 + 80) = v32;
      }
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v33);
      }
      sub_101706914((PB::Base *)v33);
      v4 += 144;
    }
    while (v5 != v4);
  }
}

void sub_100C2FA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C2FA90(uint64_t result)
{
  if (*(unsigned char *)(result + 1857)) {
    sub_101763084();
  }
  return result;
}

void sub_100C2FB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_101706914((PB::Base *)&a9);
  uint64_t v11 = *(void *)(v9 - 24);
  *(void *)(v9 - 24) = 0;
  if (v11) {
    sub_101A87228();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C2FBC0(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 1915))
  {
    sub_10170140C(v8);
    uint64_t v3 = *(void *)(a2 + 16);
    v10 |= 1u;
    v8[77] = v3;
    sub_1017257D8((uint64_t)v8);
    uint64_t v4 = v9;
    double v5 = (double)*(unint64_t *)a2 / 1000000.0;
    *(unsigned char *)(v9 + 20) |= 1u;
    *(double *)(v4 + 8) = v5;
    uint64_t v6 = v9;
    char v7 = *(unsigned char *)(a2 + 8);
    *(unsigned char *)(v9 + 20) |= 2u;
    *(unsigned char *)(v6 + 16) = v7;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v8);
    }
    return sub_101706914((PB::Base *)v8);
  }
  return result;
}

void sub_100C2FCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C2FCB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *((_DWORD *)a2 + 2);
  sub_10170140C(v8);
  sub_101724F68((uint64_t)v8);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v5 = v9;
  *(unsigned char *)(v9 + 20) |= 1u;
  *(void *)(v5 + 8) = v2;
  uint64_t v6 = v9;
  *(unsigned char *)(v9 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = v3;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C2FD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C2FD9C(uint64_t a1, float *a2)
{
  sub_10170140C(v22);
  sub_1017261F8((uint64_t)v22);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v24 |= 1u;
  *(CFAbsoluteTime *)&v22[77] = Current;
  uint64_t v5 = v23;
  uint64_t v6 = *(void *)a2;
  *(_WORD *)(v23 + 68) |= 1u;
  *(void *)(v5 + 8) = v6;
  uint64_t v7 = v23;
  float v8 = a2[2];
  if (!*((unsigned char *)a2 + 20)) {
    float v8 = NAN;
  }
  *(_WORD *)(v23 + 68) |= 2u;
  *(float *)(v7 + 16) = v8;
  uint64_t v9 = v23;
  float v10 = a2[3];
  if (!*((unsigned char *)a2 + 21)) {
    float v10 = NAN;
  }
  *(_WORD *)(v23 + 68) |= 4u;
  *(float *)(v9 + 20) = v10;
  uint64_t v11 = v23;
  float v12 = a2[4];
  if (!*((unsigned char *)a2 + 22)) {
    float v12 = NAN;
  }
  *(_WORD *)(v23 + 68) |= 8u;
  *(float *)(v11 + 24) = v12;
  uint64_t v13 = v23;
  float v14 = a2[6];
  if (!*((unsigned char *)a2 + 36)) {
    float v14 = NAN;
  }
  *(_WORD *)(v23 + 68) |= 0x10u;
  *(float *)(v13 + 28) = v14;
  uint64_t v15 = v23;
  float v16 = a2[7];
  if (!*((unsigned char *)a2 + 37)) {
    float v16 = NAN;
  }
  *(_WORD *)(v23 + 68) |= 0x20u;
  *(float *)(v15 + 32) = v16;
  uint64_t v17 = v23;
  float v18 = a2[8];
  if (!*((unsigned char *)a2 + 38)) {
    float v18 = NAN;
  }
  *(_WORD *)(v23 + 68) |= 0x40u;
  *(float *)(v17 + 36) = v18;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v22);
  }
  if (*(unsigned char *)(a1 + 1957))
  {
    int v19 = *((unsigned __int8 *)a2 + 39);
    if (*(unsigned __int8 *)(a1 + 832) != v19)
    {
      if (v19 == 1)
      {
        SystemSoundID v20 = 1430;
      }
      else
      {
        if (v19 != 2)
        {
LABEL_24:
          *(unsigned char *)(a1 + 832) = *((unsigned char *)a2 + 39);
          return sub_101706914((PB::Base *)v22);
        }
        SystemSoundID v20 = 1547;
      }
      AudioServicesPlaySystemSound(v20);
      goto LABEL_24;
    }
  }
  return sub_101706914((PB::Base *)v22);
}

void sub_100C2FF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C2FF90(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  switch(*a3)
  {
    case 2:
      sub_10170140C(v34);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = Current;
      sub_101725508((uint64_t)v34);
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v6 = qword_10248AF90;
      if (!qword_10248AF90) {
        goto LABEL_31;
      }
      goto LABEL_30;
    case 3:
      sub_10170140C(v34);
      CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v7;
      sub_101725598((uint64_t)v34);
      uint64_t v8 = v35;
      sub_100134750(&__p, "Unknown");
      sub_100AE44AC(v8, &__p);
      if (v43 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      size_t v33 = 0;
      if ((sysctlbyname("kern.wakereason", &__p, &v33, 0, 0) & 0x80000000) == 0)
      {
        uint64_t v9 = v35;
        sub_100134750(&v31, (char *)&__p);
        sub_100AE44AC(v9, &v31);
        if (v32 < 0) {
          operator delete((void *)v31.n128_u64[0]);
        }
      }
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)v34);
      }
      goto LABEL_31;
    case 7:
      sub_10170140C(v34);
      CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v10;
      sub_1017251A8((uint64_t)v34);
      uint64_t v11 = v37;
      uint64_t v12 = *a4;
      *(unsigned char *)(v37 + 28) |= 1u;
      *(void *)(v11 + 8) = v12;
      uint64_t v13 = v37;
      char v14 = *((unsigned char *)a4 + 8);
      *(unsigned char *)(v37 + 28) |= 8u;
      *(unsigned char *)(v13 + 24) = v14;
      uint64_t v15 = v37;
      char v16 = *((unsigned char *)a4 + 9);
      *(unsigned char *)(v37 + 28) |= 0x10u;
      *(unsigned char *)(v15 + 25) = v16;
      uint64_t v17 = v37;
      int v18 = *((_DWORD *)a4 + 3);
      *(unsigned char *)(v37 + 28) |= 4u;
      *(_DWORD *)(v17 + 20) = v18;
      uint64_t v19 = v37;
      LOBYTE(v18) = *((unsigned char *)a4 + 16);
      *(unsigned char *)(v37 + 28) |= 0x20u;
      *(unsigned char *)(v19 + 26) = v18;
      uint64_t v20 = v37;
      int v21 = *((_DWORD *)a4 + 5);
      *(unsigned char *)(v37 + 28) |= 2u;
      *(_DWORD *)(v20 + 16) = v21;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v6 = qword_10248AF90;
      if (qword_10248AF90) {
        goto LABEL_30;
      }
      goto LABEL_31;
    case 0xA:
      sub_10170140C(v34);
      CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v22;
      sub_101725478((uint64_t)v34);
      uint64_t v23 = v39;
      char v24 = *(unsigned char *)a4;
      *(unsigned char *)(v39 + 12) |= 1u;
      *(unsigned char *)(v23 + 8) = v24;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v6 = qword_10248AF90;
      if (qword_10248AF90) {
        goto LABEL_30;
      }
      goto LABEL_31;
    case 0xB:
      sub_10170140C(v34);
      CFAbsoluteTime v25 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v25;
      sub_101725238((uint64_t)v34);
      uint64_t v26 = v40;
      char v27 = *(unsigned char *)a4;
      *(unsigned char *)(v40 + 12) |= 1u;
      *(unsigned char *)(v26 + 8) = v27;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v6 = qword_10248AF90;
      if (qword_10248AF90) {
        goto LABEL_30;
      }
      goto LABEL_31;
    case 0xF:
      sub_10170140C(v34);
      CFAbsoluteTime v28 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v28;
      sub_1017252C8((uint64_t)v34);
      uint64_t v29 = v36;
      char v30 = *(unsigned char *)a4;
      *(unsigned char *)(v36 + 12) |= 1u;
      *(unsigned char *)(v29 + 8) = v30;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022EDD18);
      }
      uint64_t v6 = qword_10248AF90;
      if (qword_10248AF90) {
LABEL_30:
      }
        sub_1019E5150(v6, (uint64_t)v34);
LABEL_31:
      sub_101706914((PB::Base *)v34);
      break;
    default:
      return;
  }
}

void sub_100C303F8(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C304A8(uint64_t a1, uint64_t *a2)
{
  sub_10170140C(v8);
  sub_101724A58((uint64_t)v8);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v10 |= 1u;
  *(CFAbsoluteTime *)&v8[77] = Current;
  uint64_t v4 = v9;
  LODWORD(Current) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(v9 + 20) |= 2u;
  *(_DWORD *)(v4 + 16) = LODWORD(Current);
  uint64_t v5 = v9;
  uint64_t v6 = *a2;
  *(unsigned char *)(v9 + 20) |= 1u;
  *(void *)(v5 + 8) = v6;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C30570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C30588(uint64_t a1, uint64_t a2)
{
  sub_10170140C(v16);
  sub_1017258F8((uint64_t)v16);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = Current;
  uint64_t v4 = v17;
  uint64_t v5 = *(void *)(a2 + 9);
  *(_WORD *)(v17 + 48) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 23);
  *(_WORD *)(v17 + 48) |= 8u;
  *(_DWORD *)(v6 + 24) = LODWORD(Current);
  uint64_t v7 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 27);
  *(_WORD *)(v17 + 48) |= 0x20u;
  *(_DWORD *)(v7 + 32) = LODWORD(Current);
  uint64_t v8 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 31);
  *(_WORD *)(v17 + 48) |= 0x10u;
  *(_DWORD *)(v8 + 28) = LODWORD(Current);
  uint64_t v9 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 35);
  *(_WORD *)(v17 + 48) |= 2u;
  *(_DWORD *)(v9 + 16) = LODWORD(Current);
  uint64_t v10 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 39);
  *(_WORD *)(v17 + 48) |= 0x40u;
  *(_DWORD *)(v10 + 36) = LODWORD(Current);
  uint64_t v11 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 43);
  *(_WORD *)(v17 + 48) |= 4u;
  *(_DWORD *)(v11 + 20) = LODWORD(Current);
  uint64_t v12 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 19);
  *(_WORD *)(v17 + 48) |= 0x80u;
  *(_DWORD *)(v12 + 40) = LODWORD(Current);
  uint64_t v13 = v17;
  LOBYTE(v5) = *(unsigned char *)(a2 + 17);
  *(_WORD *)(v17 + 48) |= 0x200u;
  *(unsigned char *)(v13 + 45) = v5;
  uint64_t v14 = v17;
  LOBYTE(v5) = *(unsigned char *)(a2 + 18);
  *(_WORD *)(v17 + 48) |= 0x100u;
  *(unsigned char *)(v14 + 44) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v16);
  }
  return sub_101706914((PB::Base *)v16);
}

void sub_100C30710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C30728(uint64_t a1, uint64_t a2)
{
  sub_10170140C(v8);
  sub_101725A18((uint64_t)v8);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v4 = v9;
  uint64_t v5 = *(void *)(a2 + 12);
  *(unsigned char *)(v9 + 20) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v9;
  LODWORD(Current) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(v9 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = LODWORD(Current);
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v8);
  }
  return sub_101706914((PB::Base *)v8);
}

void sub_100C307F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C30808(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    sub_10170140C(v10);
    sub_101725D78((uint64_t)v10);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v13 |= 1u;
    CFAbsoluteTime v12 = Current;
    uint64_t v6 = v11;
    int v7 = *a4;
    *(unsigned char *)(v11 + 28) |= 1u;
    *(_DWORD *)(v6 + 24) = v7;
    uint64_t v8 = v11;
    sub_100AE479C(v11);
    std::string::operator=(*(std::string **)(v8 + 8), (const std::string *)(a4 + 2));
    uint64_t v9 = v11;
    sub_100C31F08(v11);
    std::string::operator=(*(std::string **)(v9 + 16), (const std::string *)(a4 + 8));
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v10);
    }
    sub_101706914((PB::Base *)v10);
  }
}

void sub_100C308F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C30910(uint64_t a1, uint64_t a2)
{
  sub_10170140C(v18);
  sub_101725628((uint64_t)v18);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v20 |= 1u;
  *(CFAbsoluteTime *)&v18[77] = Current;
  uint64_t v4 = v19;
  uint64_t v5 = *(void *)(a2 + 9);
  *(_DWORD *)(v19 + 84) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v19;
  LOBYTE(v5) = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(v19 + 84) |= 0x20000u;
  *(unsigned char *)(v6 + 80) = v5;
  uint64_t v7 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 18);
  *(_DWORD *)(v19 + 84) |= 4u;
  *(_DWORD *)(v7 + 20) = v5;
  uint64_t v8 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 20);
  *(_DWORD *)(v19 + 84) |= 0x2000u;
  *(_DWORD *)(v8 + 64) = v5;
  uint64_t v9 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 21);
  *(_DWORD *)(v19 + 84) |= 0x1000u;
  *(_DWORD *)(v9 + 60) = v5;
  uint64_t v10 = v19;
  LOBYTE(v5) = *(unsigned char *)(a2 + 22);
  *(_DWORD *)(v19 + 84) |= 0x40000u;
  *(unsigned char *)(v10 + 81) = v5;
  uint64_t v11 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 23);
  *(_DWORD *)(v19 + 84) |= 0x200u;
  *(_DWORD *)(v11 + 48) = LODWORD(Current);
  uint64_t v12 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 35);
  *(_DWORD *)(v19 + 84) |= 0x10000u;
  *(_DWORD *)(v12 + 76) = LODWORD(Current);
  uint64_t v13 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 39);
  *(_DWORD *)(v19 + 84) |= 0x4000u;
  *(_DWORD *)(v13 + 68) = LODWORD(Current);
  uint64_t v14 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 43);
  *(_DWORD *)(v19 + 84) |= 0x8000u;
  *(_DWORD *)(v14 + 72) = LODWORD(Current);
  uint64_t v15 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 47);
  *(_DWORD *)(v19 + 84) |= 0x40u;
  *(_DWORD *)(v15 + 36) = LODWORD(Current);
  uint64_t v16 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 19);
  *(_DWORD *)(v19 + 84) |= 2u;
  *(_DWORD *)(v16 + 16) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v18);
  }
  return sub_101706914((PB::Base *)v18);
}

void sub_100C30AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C30AE0(uint64_t a1, uint64_t a2)
{
  sub_10170140C(v9);
  sub_101728298((uint64_t)v9);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  uint64_t v4 = v10;
  double v5 = (double)*(unint64_t *)(a2 + 10) / 1000000.0;
  *(unsigned char *)(v10 + 20) |= 1u;
  *(double *)(v4 + 8) = v5;
  uint64_t v6 = v10;
  int v7 = *(unsigned __int8 *)(a2 + 9);
  *(unsigned char *)(v10 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v9);
  }
  return sub_101706914((PB::Base *)v9);
}

void sub_100C30BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C30BD0(uint64_t a1, uint64_t a2)
{
  sub_10170140C(v25);
  sub_101728208((uint64_t)v25);
  sub_1016E5590(v26);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v27 |= 1u;
  *(CFAbsoluteTime *)&v25[77] = Current;
  uint64_t v4 = *(void *)(v26 + 8);
  double v5 = (double)*(unint64_t *)(a2 + 49) / 1000000.0;
  *(_DWORD *)(v4 + 124) |= 0x10u;
  *(double *)(v4 + 40) = v5;
  uint64_t v6 = *(void *)(v26 + 8);
  double v7 = *(float *)(a2 + 9);
  *(_DWORD *)(v6 + 124) |= 2u;
  *(double *)(v6 + 16) = v7;
  uint64_t v8 = *(void *)(v26 + 8);
  double v9 = *(float *)(a2 + 13);
  *(_DWORD *)(v8 + 124) |= 4u;
  *(double *)(v8 + 24) = v9;
  uint64_t v10 = *(void *)(v26 + 8);
  double v11 = *(float *)(a2 + 17);
  *(_DWORD *)(v10 + 124) |= 8u;
  *(double *)(v10 + 32) = v11;
  uint64_t v12 = *(void *)(v26 + 8);
  double v13 = *(float *)(a2 + 21);
  *(_DWORD *)(v12 + 124) |= 1u;
  *(double *)(v12 + 8) = v13;
  uint64_t v14 = *(void *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 37);
  *(_DWORD *)(v14 + 124) |= 0x40000u;
  *(_DWORD *)(v14 + 100) = LODWORD(v13);
  uint64_t v15 = *(void *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 41);
  *(_DWORD *)(v15 + 124) |= 0x80000u;
  *(_DWORD *)(v15 + 104) = LODWORD(v13);
  uint64_t v16 = *(void *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 45);
  *(_DWORD *)(v16 + 124) |= 0x100000u;
  *(_DWORD *)(v16 + 108) = LODWORD(v13);
  uint64_t v17 = *(void *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 25);
  *(_DWORD *)(v17 + 124) |= 0x2000u;
  *(_DWORD *)(v17 + 80) = LODWORD(v13);
  uint64_t v18 = *(void *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 29);
  *(_DWORD *)(v18 + 124) |= 0x4000u;
  *(_DWORD *)(v18 + 84) = LODWORD(v13);
  uint64_t v19 = *(void *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 33);
  *(_DWORD *)(v19 + 124) |= 0x8000u;
  *(_DWORD *)(v19 + 88) = LODWORD(v13);
  uint64_t v20 = v26;
  char v21 = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(v26 + 20) |= 1u;
  *(unsigned char *)(v20 + 16) = v21;
  uint64_t v22 = v26;
  char v23 = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(v26 + 20) |= 2u;
  *(unsigned char *)(v22 + 17) = v23;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v25);
  }
  return sub_101706914((PB::Base *)v25);
}

void sub_100C30DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C30E0C()
{
  sub_10170140C(v2);
  sub_101724668((uint64_t)v2);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v3 |= 1u;
  *(CFAbsoluteTime *)&v2[77] = Current;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v2);
  }
  return sub_101706914((PB::Base *)v2);
}

void sub_100C30EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C30EB8(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  sub_10170140C(v19);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v22 |= 1u;
  CFAbsoluteTime v21 = Current;
  sub_101723B28((uint64_t)v19);
  uint64_t v4 = v20;
  *(unsigned char *)(v20 + 32) |= 2u;
  *(_DWORD *)(v4 + 24) = 995511;
  sub_1016B604C(v20);
  uint64_t v5 = *(void *)(v20 + 8);
  double v6 = (double)*(unint64_t *)v2 * 0.000001;
  *(unsigned char *)(v5 + 32) |= 1u;
  *(double *)(v5 + 8) = v6;
  uint64_t v7 = *(void *)(v20 + 8);
  LODWORD(v6) = *(_DWORD *)(v2 + 8);
  *(unsigned char *)(v7 + 32) |= 4u;
  *(_DWORD *)(v7 + 20) = LODWORD(v6);
  uint64_t v8 = *(void *)(v20 + 8);
  LODWORD(v6) = *(_DWORD *)(v2 + 12);
  *(unsigned char *)(v8 + 32) |= 8u;
  *(_DWORD *)(v8 + 24) = LODWORD(v6);
  uint64_t v9 = *(void *)(v20 + 8);
  LODWORD(v6) = *(_DWORD *)(v2 + 16);
  *(unsigned char *)(v9 + 32) |= 0x10u;
  *(_DWORD *)(v9 + 28) = LODWORD(v6);
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v19);
  }
  sub_10170140C(v16);
  sub_101725988((uint64_t)v16);
  CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = v10;
  uint64_t v11 = v17;
  double v12 = (double)*(unint64_t *)v2;
  *(unsigned char *)(v17 + 20) |= 1u;
  *(double *)(v11 + 8) = v12;
  uint64_t v13 = v17;
  int v14 = *(unsigned __int8 *)(v2 + 22);
  *(unsigned char *)(v17 + 20) |= 2u;
  *(_DWORD *)(v13 + 16) = v14;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v16);
  }
  sub_101706914((PB::Base *)v16);
  return sub_101706914((PB::Base *)v19);
}

void sub_100C310B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C310DC(uint64_t a1, char *a2)
{
  sub_10170140C(v7);
  sub_101725AA8((uint64_t)v7);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  uint64_t v4 = v8;
  char v5 = *a2;
  *(unsigned char *)(v8 + 20) |= 2u;
  *(unsigned char *)(v4 + 16) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v7);
  }
  return sub_101706914((PB::Base *)v7);
}

void sub_100C3118C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C311A4(uint64_t a1, char *a2)
{
  sub_10170140C(v7);
  sub_101725C58((uint64_t)v7);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  uint64_t v4 = v8;
  char v5 = *a2;
  *(unsigned char *)(v8 + 20) |= 2u;
  *(unsigned char *)(v4 + 16) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v7);
  }
  return sub_101706914((PB::Base *)v7);
}

void sub_100C31254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3126C(uint64_t a1, char *a2)
{
  sub_10170140C(v7);
  sub_101725CE8((uint64_t)v7);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  uint64_t v4 = v8;
  char v5 = *a2;
  *(unsigned char *)(v8 + 20) |= 2u;
  *(unsigned char *)(v4 + 16) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v7);
  }
  return sub_101706914((PB::Base *)v7);
}

void sub_100C3131C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100C31334(unsigned __int8 *a1)
{
  LOBYTE(v6) = 0;
  uint64_t v2 = sub_10006ACBC(a1, "MotionLoggerHoldPowerAssertion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(v2 + 3, "MotionLoggerHoldIndependenceAssertion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 6, "MotionLoggerOnlyLogSensorsInSession", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 9, "MotionLoggerLogWorkoutEvents", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 16, "MotionLoggerAccelerometerLoggingInterval", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 40, "MotionLoggerHALoggingInterval", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 64, "MotionLoggerGyroLoggingInterval", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 88, "MotionLoggerMagnetometerLoggingInterval", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 112, "MotionLoggerPressureLoggingInterval", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 136, "MotionLoggerDeviceMotionLoggingInterval", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 160, "MotionLoggerAccessoryAccelerometerLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101A21DA8(a1 + 184, "MotionLoggerAccessoryAccelerometerBufferSize", &v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 196, "MotionLoggerAccessoryMonitor", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 200, "MotionLoggerAccessoryProximityLoggingInterval", &v6, 0);
  LODWORD(v6) = 20;
  sub_101A21DA8(a1 + 224, "MotionLoggerAccessoryProximityBufferSize", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 240, "MotionLoggerAccessoryGyroLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101A21DA8(a1 + 264, "MotionLoggerAccessoryGyroBufferSize", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 280, "MotionLoggerAccessoryMagnetometerLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101A21DA8(a1 + 304, "MotionLoggerAccessoryMagnetometerBufferSize", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 320, "MotionLoggerAccessoryDeviceMotionLoggingInterval", &v6, 0);
  LODWORD(v6) = 20;
  sub_101A21DA8(a1 + 344, "MotionLoggerAccessoryDeviceMotionBufferSize", &v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 356, "MotionLoggerAccessoryDeviceMotionLowLatency", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 360, "MotionLoggerAccessoryHeartRateLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101A21DA8(a1 + 384, "MotionLoggerAccessoryHeartRateBufferSize", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 400, "MotionLoggerAccessoryPPGLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101A21DA8(a1 + 424, "MotionLoggerAccessoryPPGBufferSize", &v6, 0);
  LODWORD(v6) = 0;
  sub_10044FD20(a1 + 436, "MotionLoggerLogDeviceMotionVariant", &v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 448, "MotionLoggerLogElevationChangeEntryActive", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 451, "MotionLoggerLogElevationChangeEntrySpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 454, "MotionLoggerLogCoarseElevationChange", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 457, "MotionLoggerLogHeartRateSpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 460, "MotionLoggerLogBTVehicleConnections", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 0;
  sub_10044FD20(a1 + 464, "MotionLoggerLogRawGPS", &v6, 0);
  LODWORD(v6) = 6;
  sub_10044FD20(a1 + 476, "MotionLoggerCoarseGPSScalingFactor", &v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 488, "MotionLoggerLogWifiLocation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 491, "MotionLoggerLogSourceAgnosticLocations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 494, "MotionLogBufferedOdometerLocations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 497, "MotionLoggerLogBodyMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 500, "MotionLoggerLogOdometerSpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 503, "MotionLoggerLogMotionState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 506, "MotionLoggerLogBasebandSpeed", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 509, "MotionLoggerLogMotionStateHints", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 512, "MotionLoggerLogWatchOrientationSettings", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 515, "MotionLoggerLogATVRemoteDebug", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 518, "MotionLoggerLogWifiAssociation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 521, "MotionLoggerLogWifiScan", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 524, "MotionLoggerEnableActiveWifiScans", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 527, "MotionLoggerLogLois", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 530, "MotionLoggerHashLois", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 536, "MotionLoggerPostWorkoutLoggingInterval", &v6, 0);
  LOBYTE(v6) = 1;
  sub_10006ACBC(a1 + 560, "MotionLoggerLogPencilDebug", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 563, "MotionLoggerLogPencilMotion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 566, "MotionLoggerLogPedometer", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 569, "MotionLoggerLogSignalEnvironment", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 572, "MotionLoggerLogGnssAvailabilityPredictor", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 575, "MotionLoggerLogGnssLeechLocation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 578, "MotionLoggerLogMapsRouteHint", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 581, "MotionLoggerLogMobilityBoutMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 584, "MotionLoggerLogSPUGaitMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 587, "MotionLoggerLogVisualLocalizations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 590, "MotionLoggerLogALSUpdates", (unsigned __int8 *)&v6, 0);
  unsigned __int8 v5 = 0;
  sub_10006ACBC((unsigned __int8 *)&v6, "MotionLoggerEnableALSActiveScansAOP", &v5, 0);
  if (BYTE1(v6))
  {
    sub_100103240();
    unsigned __int8 v3 = sub_100743004();
  }
  else
  {
    unsigned __int8 v3 = 0;
  }
  a1[593] = v3;
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 594, "MotionLoggerLogALSUpdatesAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 597, "MotionLoggerLogBatteryUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 600, "MotionLoggerLogScreenLockUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 603, "MotionLoggerLogBatterySaverModeUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 606, "MotionLoggerLogPowerManagementUserActivity", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 609, "MotionLoggerLogFocusModes", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 612, "MotionLoggerLogDisplayState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 615, "MotionLoggerLogAPSleeps", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 618, "MotionLoggerLogAPWakes", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 621, "MotionLoggerLogBasebandCompassCoex", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 624, "MotionLoggerLogGaitEvents", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 627, "MotionLoggerLogMagneticAccessories", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 630, "MotionLoggerLogWalkingSteadinessClassification", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 633, "MotionLoggerLogRunningForm", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 636, "MotionLoggerSPLLoggingInterval", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 639, "MotionLoggerLogRunningPower", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 642, "MotionLoggerLogFaceCovered", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 645, "MotionLoggerLogProxPDP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 648, "MotionLoggerLogALSAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 651, "MotionLoggerLogBacklightState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 654, "MotionLoggerLogViewObstructedState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 657, "MotionLoggerLogOrientation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 660, "MotionLoggerLogDeviceMotionAlwaysOn", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 663, "MotionLoggerLogSignificantUserInteraction", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 666, "EnableVehicleDetectionAlerts", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 669, "MotionLoggerLogAverageALSAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 672, "MotionLoggerLogKeyboardMotion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 675, "MotionLoggerLogGnssModeOfOperation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 678, "MotionLoggerFitnessMachineData", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 681, "EnablePedestrianFenceNotifications", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 684, "EnableDisplacingStateNotifications", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 5;
  sub_10044FD20(a1 + 688, "DurationActivityAlarmStatic", &v6, 0);
  LODWORD(v6) = 3;
  sub_10044FD20(a1 + 700, "RadiusPedestrianFence", &v6, 0);
  uint64_t v6 = 0;
  sub_101A1F180(a1 + 712, "MotionLoggerInertialOdometryLoggingInterval", &v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 736, "MotionLoggerLogBackgroundInertialOdometry", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 1;
  sub_10044FD20(a1 + 740, "MotionLoggerBackgroundInertialOdometryReferenceFrame", &v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 752, "MotionLoggerLogWakeGesture", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 755, "MotionLoggerLogHapticModuleState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_10006ACBC(a1 + 758, "MotionLoggerLogPostureSkeleton", (unsigned __int8 *)&v6, 0);
  return a1;
}

void sub_100C31EA4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C31ED8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100C31F08(uint64_t result)
{
  if (!*(void *)(result + 16)) {
    operator new();
  }
  return result;
}

void sub_100C31F7C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100C31FAC(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100C31FDC(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_100C3200C(id a1)
{
  qword_1024192E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_100C3203C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100C3206C(id a1)
{
  qword_102419068 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WakeGesture");
}

void sub_100C3209C(id a1)
{
  qword_1024192D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

__n128 sub_100C320CC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100C327FC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *uint64_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100C3215C(const void *a1, char a2)
{
  CFTypeRef cf = a1;
  unsigned __int8 v3 = (void *)(qword_1024808A0 + 8 * ((unint64_t)xmmword_1024808B8 >> 7));
  if (unk_1024808A8 == qword_1024808A0)
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = (void **)(qword_1024808A0 + 8 * ((*((void *)&xmmword_1024808B8 + 1) + (void)xmmword_1024808B8) >> 7));
  }
  else
  {
    uint64_t v4 = (void *)(*v3 + 32 * (xmmword_1024808B8 & 0x7F));
    uint64_t v5 = (void **)(qword_1024808A0 + 8 * ((*((void *)&xmmword_1024808B8 + 1) + (void)xmmword_1024808B8) >> 7));
    uint64_t v6 = &(*v5)[4 * ((*((void *)&xmmword_1024808B8 + 1) + xmmword_1024808B8) & 0x7F)];
  }
  sub_100C32BAC(v3, v4, v5, v6, &cf);
  uint64_t v8 = v7;
  if (unk_1024808A8 == qword_1024808A0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(qword_1024808A0
  }
                   + (((*((void *)&xmmword_1024808B8 + 1) + (void)xmmword_1024808B8) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*((void *)&xmmword_1024808B8 + 1) + xmmword_1024808B8) & 0x7F);
  if (v9 == v7)
  {
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    uint64_t v15 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "PedestrianFenceNotification,no timestamp", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      LOWORD(v39) = 0;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  else
  {
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    long long v10 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v35 = *((void *)&xmmword_1024808B8 + 1);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping PedestrianFencePendingNotification, queue size, %lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      int v39 = 134217984;
      uint64_t v40 = *((void *)&xmmword_1024808B8 + 1);
      __n128 v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    CFRelease(cf);
    uint64_t v11 = (void *)(qword_1024808A0 + 8 * ((unint64_t)xmmword_1024808B8 >> 7));
    if (unk_1024808A8 == qword_1024808A0)
    {
      double v12 = 0;
      int v14 = 0;
      uint64_t v13 = (void **)(qword_1024808A0 + 8 * ((*((void *)&xmmword_1024808B8 + 1) + (void)xmmword_1024808B8) >> 7));
    }
    else
    {
      double v12 = (void *)(*v11 + 32 * (xmmword_1024808B8 & 0x7F));
      uint64_t v13 = (void **)(qword_1024808A0 + 8 * ((*((void *)&xmmword_1024808B8 + 1) + (void)xmmword_1024808B8) >> 7));
      int v14 = &(*v13)[4 * ((*((void *)&xmmword_1024808B8 + 1) + xmmword_1024808B8) & 0x7F)];
    }
    char v18 = (char *)sub_100C32B14(v11, v12, v13, v14, &cf);
    uint64_t v19 = (char *)(qword_1024808A0 + 8 * (((void)xmmword_1024808B8 + *((void *)&xmmword_1024808B8 + 1)) >> 7));
    if (unk_1024808A8 == qword_1024808A0) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = *(void *)v19 + 32 * (((_BYTE)xmmword_1024808B8 + BYTE8(xmmword_1024808B8)) & 0x7F);
    }
    sub_100173080(&qword_102480898, v18, v17, v19, v20);
    if ((a2 & 3) == 2) {
      int v21 = 0;
    }
    else {
      int v21 = -1;
    }
    if ((a2 & 3) == 1) {
      int v22 = 1;
    }
    else {
      int v22 = v21;
    }
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    char v23 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v35) = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,Exit,user response,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022EDE18);
      }
      int v39 = 67109120;
      LODWORD(v40) = v22;
      char v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    sub_10170140C(buf);
    sub_101726168((uint64_t)buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v38 |= 1u;
    CFAbsoluteTime v36 = Current;
    uint64_t v25 = v37;
    uint64_t v26 = *(void *)(v8 + 8);
    *(unsigned char *)(v37 + 32) |= 2u;
    *(void *)(v25 + 16) = v26;
    uint64_t v27 = v37;
    uint64_t v28 = *(void *)(v8 + 16);
    *(unsigned char *)(v37 + 32) |= 1u;
    *(void *)(v27 + 8) = v28;
    uint64_t v29 = v37;
    LODWORD(v28) = *(_DWORD *)(v8 + 24);
    *(unsigned char *)(v37 + 32) |= 4u;
    *(_DWORD *)(v29 + 24) = v28;
    uint64_t v30 = v37;
    *(unsigned char *)(v37 + 32) |= 8u;
    *(_DWORD *)(v30 + 28) = v22;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022EDD18);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
}

void sub_100C327DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C327FC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100C32AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100C32B14(void *a1, void *a2, void **a3, void *a4, void *a5)
{
  __n128 result = sub_100C32BAC(a1, a2, a3, a4, a5);
  if (v8 != (_OWORD *)a4)
  {
    uint64_t v9 = v8;
    uint64_t v10 = result;
    while (1)
    {
      v9 += 2;
      if ((_OWORD *)((char *)v9 - *v10) == (_OWORD *)4096)
      {
        uint64_t v11 = (_OWORD *)v10[1];
        ++v10;
        uint64_t v9 = v11;
      }
      if (v9 == (_OWORD *)a4) {
        break;
      }
      if (*(void *)v9 != *a5)
      {
        long long v12 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v12;
        v8 += 2;
        if ((_OWORD *)((char *)v8 - *result) == (_OWORD *)4096)
        {
          uint64_t v13 = (_OWORD *)result[1];
          ++result;
          uint64_t v8 = v13;
        }
      }
    }
  }
  return result;
}

void *sub_100C32BAC(void *result, void *a2, void **a3, void *a4, void *a5)
{
  if (result == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        a2 += 4;
        if (a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }
    if (result && (void *)(*result + 4096) == a2) {
      ++result;
    }
  }
  else
  {
    uint64_t v5 = *result + 4096;
    if ((void *)v5 == a2) {
      goto LABEL_14;
    }
    while (*a2 != *a5)
    {
      a2 += 4;
      if (a2 == (void *)v5) {
        goto LABEL_14;
      }
    }
    if (a2 == (void *)v5)
    {
LABEL_14:
      uint64_t v6 = result + 1;
      if (result + 1 == a3)
      {
        uint64_t v8 = result;
      }
      else
      {
        do
        {
          uint64_t v7 = 0;
          uint64_t v8 = v6;
          uint64_t v9 = *v6;
          do
          {
            if (*(void *)(v9 + v7) == *a5) {
              return v8;
            }
            v7 += 32;
          }
          while (v7 != 4096);
          uint64_t v6 = v8 + 1;
        }
        while (v8 + 1 != a3);
      }
      if (*a3 == a4)
      {
        return a3;
      }
      else
      {
        uint64_t v10 = *a3;
        while (*v10 != *a5)
        {
          v10 += 4;
          if (v10 == a4)
          {
            uint64_t v10 = a4;
            break;
          }
        }
        __n128 result = a3;
        if (*a3 + 512 == v10) {
          return v8 + 2;
        }
      }
    }
  }
  return result;
}

void sub_100C32CEC(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

__n128 sub_100C32D1C(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100C32DB8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100C32DA8(uint64_t a1)
{
}

void sub_100C32DB0(uint64_t a1)
{
}

void sub_100C32DB8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100C33084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C330D0(uint64_t a1)
{
  __chkstk_darwin(a1);
  int v2 = v1;
  char v4 = v3;
  CFTypeRef cf = v5;
  uint64_t v6 = (void *)(qword_102480870 + 8 * ((unint64_t)xmmword_102480888 >> 8));
  if (unk_102480878 == qword_102480870)
  {
    unint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = (void **)(qword_102480870 + 8 * ((*((void *)&xmmword_102480888 + 1) + (void)xmmword_102480888) >> 8));
  }
  else
  {
    unint64_t v7 = (void *)(*v6 + 16 * xmmword_102480888);
    uint64_t v8 = (void **)(qword_102480870 + 8 * ((*((void *)&xmmword_102480888 + 1) + (void)xmmword_102480888) >> 8));
    uint64_t v9 = &(*v8)[2 * (BYTE8(xmmword_102480888) + xmmword_102480888)];
  }
  sub_100C33C74(v6, v7, v8, v9, &cf);
  uint64_t v11 = v10;
  if (unk_102480878 == qword_102480870) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(qword_102480870
  }
                    + (((*((void *)&xmmword_102480888 + 1) + (void)xmmword_102480888) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (BYTE8(xmmword_102480888) + xmmword_102480888);
  if (v12 != v10)
  {
    sub_10170140C(v49);
    sub_1017246F8((uint64_t)v49);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v52 |= 1u;
    CFAbsoluteTime v50 = Current;
    uint64_t v14 = v51;
    uint64_t v15 = *(void *)(v11 + 8);
    *(unsigned char *)(v51 + 24) |= 1u;
    *(void *)(v14 + 16) = v15;
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EDE38);
    }
    uint64_t v16 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      buf.n128_u32[0] = 134217984;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = *((void *)&xmmword_102480888 + 1);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] removing notification, size of pending deque, %lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      int v45 = 134217984;
      uint64_t v46 = *((void *)&xmmword_102480888 + 1);
      uint64_t v40 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", (const char *)v40);
      if (v40 != &buf) {
        free(v40);
      }
    }
    CFRelease(cf);
    uint64_t v17 = (void *)(qword_102480870 + 8 * ((unint64_t)xmmword_102480888 >> 8));
    if (unk_102480878 == qword_102480870)
    {
      uint64_t v18 = 0;
      int64_t v20 = 0;
      uint64_t v19 = (void **)(qword_102480870 + 8 * ((*((void *)&xmmword_102480888 + 1) + (void)xmmword_102480888) >> 8));
    }
    else
    {
      uint64_t v18 = (void *)(*v17 + 16 * xmmword_102480888);
      uint64_t v19 = (void **)(qword_102480870 + 8 * ((*((void *)&xmmword_102480888 + 1) + (void)xmmword_102480888) >> 8));
      int64_t v20 = &(*v19)[2 * (BYTE8(xmmword_102480888) + xmmword_102480888)];
    }
    uint64_t v24 = (char *)sub_100C33BDC(v17, v18, v19, v20, &cf);
    unint64_t v25 = (char *)(qword_102480870 + 8 * (((void)xmmword_102480888 + *((void *)&xmmword_102480888 + 1)) >> 8));
    if (unk_102480878 == qword_102480870) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *(void *)v25 + 16 * (xmmword_102480888 + BYTE8(xmmword_102480888));
    }
    sub_100065154(&qword_102480868, v24, v23, v25, v26);
    if (v2 == 3) {
      CFStringRef v27 = @"motorcycle";
    }
    else {
      CFStringRef v27 = @"vehicle";
    }
    id v28 = (id)objc_opt_new();
    uint64_t v29 = v4 & 3;
    if ((v4 & 3) == 0)
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      uint64_t v34 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        buf.n128_u16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] user chose to file radar", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022EDE38);
        }
        LOWORD(v45) = 0;
        char v43 = (__n128 *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", (const char *)v43);
        if (v43 != &buf) {
          free(v43);
        }
      }
      [v28 appendString:@"ttr_user_not_in_"];
      [v28 appendString:v27];
      uint64_t v35 = v51;
      sub_100134750(&buf, (char *)[v28 cStringUsingEncoding:1]);
      *(void *)&double v36 = sub_100AE44AC(v35, &buf).n128_u64[0];
      if (v48 < 0) {
        operator delete((void *)buf.n128_u64[0]);
      }
      id v37 = [@"tap-to-radar://new" mutableCopy:v36];
      [v37 appendString:@"?Title="];
      [v37 appendString:@"iOS%20"];
      char v38 = (const void *)MGCopyAnswer();
      [v37 appendString:v38];
      [v37 appendString:@"%20-%20Motion%20Activity:%20Vehicular%20detection%20TTR"];
      [v37 appendString:@"&Classification=Other%20Bug"];
      [v37 appendString:@"&ComponentID=954151&ComponentName=CoreMotionVehicularDetection&ComponentVersion=All"];
      [v37 appendString:@"&Reproducibility=I%20Didn't%20Try"];
      [v37 appendFormat:@"&Description=%@", [@"Additional Information:" stringByAddingPercentEncodingWithAllowedCharacters:+[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")]];
      uint64_t v39 = +[NSURL URLWithString:v37];

      CFRelease(v38);
      [+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace") openURL:v39 configuration:0 completionHandler:0];
      goto LABEL_56;
    }
    if (v29 == 1)
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      long long v32 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        buf.n128_u16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] user confirmed in vehicle", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022EDE38);
        }
        LOWORD(v45) = 0;
        char v41 = (__n128 *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", (const char *)v41);
        if (v41 != &buf) {
          free(v41);
        }
      }
      [v28 appendString:@"user_in_"];
      [v28 appendString:v27];
      uint64_t v33 = v51;
      sub_100134750(&buf, (char *)[v28 cStringUsingEncoding:1]);
      sub_100AE44AC(v33, &buf);
    }
    else
    {
      if (v29 != 2)
      {
LABEL_56:
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_1022EDD18);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)v49);
        }
        sub_101706914((PB::Base *)v49);
        return;
      }
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EDE38);
      }
      long long v30 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        buf.n128_u16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] user said not in vehicle", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022EDE38);
        }
        LOWORD(v45) = 0;
        uint64_t v42 = (__n128 *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", (const char *)v42);
        if (v42 != &buf) {
          free(v42);
        }
      }
      [v28 appendString:@"user_not_in_"];
      [v28 appendString:v27];
      uint64_t v31 = v51;
      sub_100134750(&buf, (char *)[v28 cStringUsingEncoding:1]);
      sub_100AE44AC(v31, &buf);
    }
    if (v48 < 0) {
      operator delete((void *)buf.n128_u64[0]);
    }
    goto LABEL_56;
  }
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_1022EDE38);
  }
  uint64_t v21 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[VehicleDetectionAlert] - Vehicle notification didn't have a timestamp", v49, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(v49, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EDE38);
    }
    buf.n128_u16[0] = 0;
    unint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", v22);
    if (v22 != (char *)v49) {
      free(v22);
    }
  }
}

void sub_100C33B74(_Unwind_Exception *a1)
{
}

void *sub_100C33BDC(void *a1, void *a2, void **a3, void *a4, void *a5)
{
  __n128 result = sub_100C33C74(a1, a2, a3, a4, a5);
  if (v8 != (_OWORD *)a4)
  {
    uint64_t v9 = v8;
    uint64_t v10 = result;
    while (1)
    {
      if ((_OWORD *)((char *)++v9 - *v10) == (_OWORD *)4096)
      {
        uint64_t v11 = (_OWORD *)v10[1];
        ++v10;
        uint64_t v9 = v11;
      }
      if (v9 == (_OWORD *)a4) {
        break;
      }
      if (*(void *)v9 != *a5)
      {
        *v8++ = *v9;
        if ((_OWORD *)((char *)v8 - *result) == (_OWORD *)4096)
        {
          uint64_t v12 = (_OWORD *)result[1];
          ++result;
          uint64_t v8 = v12;
        }
      }
    }
  }
  return result;
}

void *sub_100C33C74(void *result, void *a2, void **a3, void *a4, void *a5)
{
  if (result == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        a2 += 2;
        if (a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }
    if (result && (void *)(*result + 4096) == a2) {
      ++result;
    }
  }
  else
  {
    uint64_t v5 = *result + 4096;
    if ((void *)v5 == a2) {
      goto LABEL_14;
    }
    while (*a2 != *a5)
    {
      a2 += 2;
      if (a2 == (void *)v5) {
        goto LABEL_14;
      }
    }
    if (a2 == (void *)v5)
    {
LABEL_14:
      uint64_t v6 = result + 1;
      if (result + 1 == a3)
      {
        uint64_t v8 = result;
      }
      else
      {
        do
        {
          uint64_t v7 = 0;
          uint64_t v8 = v6;
          uint64_t v9 = *v6;
          do
          {
            if (*(void *)(v9 + v7) == *a5) {
              return v8;
            }
            v7 += 16;
          }
          while (v7 != 4096);
          uint64_t v6 = v8 + 1;
        }
        while (v8 + 1 != a3);
      }
      if (*a3 == a4)
      {
        return a3;
      }
      else
      {
        uint64_t v10 = *a3;
        while (*v10 != *a5)
        {
          v10 += 2;
          if (v10 == a4)
          {
            uint64_t v10 = a4;
            break;
          }
        }
        __n128 result = a3;
        if (*a3 + 512 == v10) {
          return v8 + 2;
        }
      }
    }
  }
  return result;
}

void sub_100C33DB4(void **a1, unint64_t a2)
{
  char v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x924924924924925) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 28;
    uint64_t v6 = (char *)sub_100ADA48C(v3, a2);
    uint64_t v7 = &v6[28 * v5];
    uint64_t v9 = &v6[28 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 28);
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        *(_OWORD *)(v12 - 28) = v13;
        v12 -= 28;
        v10 -= 28;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_100C33EB4()
{
}

void sub_100C33FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C341AC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C33FFC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C34074((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C34074(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100C3410C((uint64_t)v13);
  return v11;
}

uint64_t sub_100C3410C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100C34144((void *)a1);
  }
  return a1;
}

void *sub_100C34144(void *result)
{
  int v1 = *(void ***)(result[2] + 8);
  int v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *int v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_100C341AC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_100C341E4(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    char v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_100C34258(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_100C34288(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100C342B8(uint64_t a1, uint64_t a2)
{
  nullsub_41(a1, a2);

  operator delete();
}

void sub_100C342F0(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = *(void *)(a2 + 8);
  __int16 v6 = *(_WORD *)(a2 + 1);
  BOOL v7 = *(unsigned char *)(a2 + 3) != 0;
  *(CFAbsoluteTime *)(a1 + 8) = Current;
  *(void *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 26) = v7;
}

void sub_100C3433C()
{
}

void sub_100C34440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C341AC((void **)va);
  _Unwind_Resume(a1);
}

char *sub_100C34484(void *a1, char *a2, char *a3, unint64_t a4)
{
  __int16 v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    uint64_t v18 = (char *)a1[1];
    long long v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v25 = (uint64_t)result;
      }
      else
      {
        uint64_t v25 = (uint64_t)&result[4 * (void)a3 + -4 * (void)a2];
        uint64_t v26 = (float *)result;
        do
        {
          int v27 = *v6++;
          *v26++ = (float)v27;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v25 - (void)result);
      uint64_t v12 = result;
    }
    else
    {
      int64_t v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          int v21 = *v6++;
          *(float *)uint64_t result = (float)v21;
          result += 4;
          --v19;
        }
        while (v19);
      }
      unint64_t v22 = v12;
      if (v20 != a3)
      {
        uint64_t v23 = (float *)v12;
        do
        {
          int v24 = *v20++;
          *v23++ = (float)v24;
          v22 += 4;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v22 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10017C6FC(a1, v11);
    char v14 = (float *)a1[1];
    long long v13 = a1 + 1;
    uint64_t v12 = (char *)v14;
    long long v15 = v14;
    if (v6 != a3)
    {
      long long v15 = (float *)v12;
      do
      {
        int v16 = *v6++;
        *v15++ = (float)v16;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)((char *)v15 - v12);
  }
  *long long v13 = &v17[(void)v12];
  return result;
}

uint64_t sub_100C345EC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C34664((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C34664(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100C346FC((uint64_t)v13);
  return v11;
}

uint64_t sub_100C346FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100C34144((void *)a1);
  }
  return a1;
}

uint64_t sub_100C34734(uint64_t result)
{
  if (!*(void *)(result + 24)) {
    operator new();
  }
  return result;
}

uint64_t sub_100C347A8(uint64_t result)
{
  if (!*(void *)(result + 40)) {
    operator new();
  }
  return result;
}

uint64_t sub_100C3481C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C34894((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C34894(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100C3492C((uint64_t)v13);
  return v11;
}

uint64_t sub_100C3492C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100C34144((void *)a1);
  }
  return a1;
}

void sub_100C34964(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022EE210;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C34AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100C34B1C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C34B30(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C34B4C(uint64_t a1)
{
  sub_100C34C6C(a1);

  operator delete();
}

__n128 sub_100C34B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  __n128 result = *(__n128 *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  *(void *)(v3 + 32) = *(void *)(a3 + 32);
  *(__n128 *)uint64_t v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  unsigned int v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100C34D04;
    void v13[3] = &unk_1022CCC40;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    operator new[]();
  }
  return result;
}

uint64_t sub_100C34C6C(uint64_t a1)
{
  *(void *)a1 = off_1022EE210;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100C34D04(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void *sub_100C34D7C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022EE2B0;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100C34F04;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C34F18;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100C34EDC(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C34F04(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C34F18(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C34F34(uint64_t a1)
{
  sub_100C352B0(a1);

  operator delete();
}

id sub_100C34F6C(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0xC0) {
    size_t v8 = 192;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0xC1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 136315906;
      unint64_t v39 = 0x8000000101D8943ELL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v40 = 2048;
      uint64_t v41 = 192;
      __int16 v42 = 2048;
      unint64_t v43 = a4;
      __int16 v44 = 1024;
      int v45 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      int v30 = 136315906;
      unint64_t v31 = 0x8000000101D8943ELL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 192;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLAccessoryMonitor::LogEvent>::dispatchData(int, const void *, size_t) [T = CLAccessoryMonitor::LogEvent]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  long long v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100C3532C;
  v16[3] = &unk_1022EE2F8;
  v16[4] = v12;
  v16[5] = v11;
  long long v25 = __dst[8];
  long long v26 = __dst[9];
  long long v27 = __dst[10];
  long long v28 = __dst[11];
  long long v21 = __dst[4];
  long long v22 = __dst[5];
  long long v23 = __dst[6];
  long long v24 = __dst[7];
  long long v17 = __dst[0];
  long long v18 = __dst[1];
  long long v19 = __dst[2];
  long long v20 = __dst[3];
  uint64_t v29 = v10;
  return [v13 async:v16];
}

uint64_t sub_100C352B0(uint64_t a1)
{
  *(void *)a1 = off_1022EE2B0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100C3532C(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[30];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_100C35388(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022EE328;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C35514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3553C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C35550(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C3556C(uint64_t a1)
{
  sub_100C3567C(a1);

  operator delete();
}

__n128 sub_100C355A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (_OWORD *)(*(void *)(a1 + 56) + 32 * *(unsigned int *)(a1 + 64));
  __n128 result = *(__n128 *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  _OWORD *v3 = *(_OWORD *)a3;
  v3[1] = v5;
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  unsigned int v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100C35714;
    void v13[3] = &unk_1022CCC40;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    operator new[]();
  }
  return result;
}

uint64_t sub_100C3567C(uint64_t a1)
{
  *(void *)a1 = off_1022EE328;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100C35714(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100C3578C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022EE3C8;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C3591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100C35944(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C35958(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C35974(uint64_t a1)
{
  sub_100C35A94(a1);

  operator delete();
}

__n128 sub_100C359AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  __n128 result = *(__n128 *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  *(void *)(v3 + 32) = *(void *)(a3 + 32);
  *(__n128 *)uint64_t v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  unsigned int v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100C35B2C;
    void v13[3] = &unk_1022CCC40;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    operator new[]();
  }
  return result;
}

uint64_t sub_100C35A94(uint64_t a1)
{
  *(void *)a1 = off_1022EE3C8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100C35B2C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100C35BA4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022EE468;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C35D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100C35D58(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C35D6C(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C35D88(uint64_t a1)
{
  sub_100C35E98(a1);

  operator delete();
}

__n128 sub_100C35DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (_OWORD *)(*(void *)(a1 + 56) + 32 * *(unsigned int *)(a1 + 64));
  __n128 result = *(__n128 *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  _OWORD *v3 = *(_OWORD *)a3;
  v3[1] = v5;
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  unsigned int v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100C35F30;
    void v13[3] = &unk_1022CCC40;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    operator new[]();
  }
  return result;
}

uint64_t sub_100C35E98(uint64_t a1)
{
  *(void *)a1 = off_1022EE468;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100C35F30(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100C35FA8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022EE4B8;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C36138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100C36160(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C36174(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C36190(uint64_t a1)
{
  sub_100C362B0(a1);

  operator delete();
}

__n128 sub_100C361C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  __n128 result = *(__n128 *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  *(void *)(v3 + 32) = *(void *)(a3 + 32);
  *(__n128 *)uint64_t v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  unsigned int v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100C36348;
    void v13[3] = &unk_1022CCC40;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    operator new[]();
  }
  return result;
}

uint64_t sub_100C362B0(uint64_t a1)
{
  *(void *)a1 = off_1022EE4B8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100C36348(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100C363C0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022EE508;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100C36550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100C36578(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C3658C(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C365A8(uint64_t a1)
{
  sub_100C366C8(a1);

  operator delete();
}

__n128 sub_100C365E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  __n128 result = *(__n128 *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  *(void *)(v3 + 32) = *(void *)(a3 + 32);
  *(__n128 *)uint64_t v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  unsigned int v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100C36760;
    void v13[3] = &unk_1022CCC40;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    operator new[]();
  }
  return result;
}

uint64_t sub_100C366C8(uint64_t a1)
{
  *(void *)a1 = off_1022EE508;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100C36760(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100C367DC()
{
}

void *sub_100C367F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022EE610;
  result[1] = v3;
  return result;
}

uint64_t sub_100C36838(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022EE610;
  a2[1] = v2;
  return result;
}

uint64_t sub_100C36868(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C368A8()
{
}

void *sub_100C368B4(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022EE690;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100C36A3C;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C36A50;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100C36A14(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C36A3C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C36A50(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C36A6C(uint64_t a1)
{
  sub_100C36D68(a1);

  operator delete();
}

id sub_100C36AA4(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x17) {
    size_t v8 = 23;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x18)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 136315906;
      unint64_t v27 = 0x8000000101D898A1 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v28 = 2048;
      uint64_t v29 = 23;
      __int16 v30 = 2048;
      unint64_t v31 = a4;
      __int16 v32 = 1024;
      int v33 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      int v18 = 136315906;
      unint64_t v19 = 0x8000000101D898A1 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v20 = 2048;
      uint64_t v21 = 23;
      __int16 v22 = 2048;
      unint64_t v23 = a4;
      __int16 v24 = 1024;
      int v25 = a2;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardMotionData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardMotionData]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100C36DE4;
  void v14[3] = &unk_1022EE6D8;
  v14[4] = v10;
  *(_OWORD *)long long v16 = *(_OWORD *)__dst;
  *(void *)&v16[15] = *(void *)&__dst[15];
  long long v15 = *(_OWORD *)(a1 + 16);
  return [v11 async:v14];
}

uint64_t sub_100C36D68(uint64_t a1)
{
  *(void *)a1 = off_1022EE690;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100C36DE4(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v3 = a1[6];
    return v4(a1 + 7, v3);
  }
  return result;
}

void *sub_100C36E3C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022EE708;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100C36FC4;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C36FD8;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100C36F9C(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C36FC4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C36FD8(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C36FF4(uint64_t a1)
{
  sub_100C372E0(a1);

  operator delete();
}

id sub_100C3702C(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    unsigned int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 136315906;
      unint64_t v25 = 0x8000000101D8992BLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 1;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      int v16 = 136315906;
      unint64_t v17 = 0x8000000101D8992BLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v18 = 2048;
      uint64_t v19 = 1;
      __int16 v20 = 2048;
      unint64_t v21 = a4;
      __int16 v22 = 1024;
      int v23 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardKeyPressData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardKeyPressData]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C3735C;
  v12[3] = &unk_1022EE750;
  v12[4] = v8;
  char v14 = __dst;
  long long v13 = *(_OWORD *)(a1 + 16);
  return [v9 async:v12];
}

uint64_t sub_100C372E0(uint64_t a1)
{
  *(void *)a1 = off_1022EE708;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100C3735C(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v3 = a1[6];
    return v4(a1 + 7, v3);
  }
  return result;
}

void *sub_100C373B4(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022EE780;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100C3753C;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C37550;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100C37514(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3753C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C37550(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C3756C(uint64_t a1)
{
  sub_100C37858(a1);

  operator delete();
}

id sub_100C375A4(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    unsigned int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 136315906;
      unint64_t v25 = 0x8000000101D899AFLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 1;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      int v16 = 136315906;
      unint64_t v17 = 0x8000000101D899AFLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v18 = 2048;
      uint64_t v19 = 1;
      __int16 v20 = 2048;
      unint64_t v21 = a4;
      __int16 v22 = 1024;
      int v23 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::TrackpadData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::TrackpadData]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C378D4;
  v12[3] = &unk_1022EE750;
  v12[4] = v8;
  char v14 = __dst;
  long long v13 = *(_OWORD *)(a1 + 16);
  return [v9 async:v12];
}

uint64_t sub_100C37858(uint64_t a1)
{
  *(void *)a1 = off_1022EE780;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100C378D4(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v3 = a1[6];
    return v4(a1 + 7, v3);
  }
  return result;
}

void *sub_100C3792C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022EE7D0;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100C37AB4;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C37AC8;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100C37A8C(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C37AB4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C37AC8(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C37AE4(uint64_t a1)
{
  sub_100C37DD0(a1);

  operator delete();
}

id sub_100C37B1C(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    unsigned int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 136315906;
      unint64_t v25 = 0x8000000101D89A33 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 1;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      int v16 = 136315906;
      unint64_t v17 = 0x8000000101D89A33 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v18 = 2048;
      uint64_t v19 = 1;
      __int16 v20 = 2048;
      unint64_t v21 = a4;
      __int16 v22 = 1024;
      int v23 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardAttachedData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardAttachedData]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C37E4C;
  v12[3] = &unk_1022EE750;
  v12[4] = v8;
  char v14 = __dst;
  long long v13 = *(_OWORD *)(a1 + 16);
  return [v9 async:v12];
}

uint64_t sub_100C37DD0(uint64_t a1)
{
  *(void *)a1 = off_1022EE7D0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100C37E4C(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v3 = a1[6];
    return v4(a1 + 7, v3);
  }
  return result;
}

__n128 sub_100C37EA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022EE820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C37EF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EE820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C37F30(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_100C37F7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C37FBC()
{
}

uint64_t sub_100C37FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_100C3804C()
{
}

void *sub_100C38060(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1022EE8B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100C380A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022EE8B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100C380D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C38118()
{
}

void *sub_100C38124(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022EE938;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100C382AC;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C382C0;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100C38284(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C382AC(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100C382C0(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100C382DC(uint64_t a1)
{
  sub_100C385E8(a1);

  operator delete();
}

id sub_100C38314(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x50) {
    size_t v8 = 80;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x51)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 136315906;
      unint64_t v33 = 0x8000000101D98CC4 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 80;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      int v24 = 136315906;
      unint64_t v25 = 0x8000000101D98CC4 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 80;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>::dispatchData(int, const void *, size_t) [T = CLMobility::SPUGaitMetrics]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  long long v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100C38664;
  v16[3] = &unk_1022EE980;
  v16[4] = v12;
  v16[5] = v11;
  long long v19 = __dst[2];
  long long v20 = __dst[3];
  long long v21 = __dst[4];
  long long v18 = __dst[1];
  long long v17 = __dst[0];
  uint64_t v22 = v10;
  return [v13 async:v16];
}

uint64_t sub_100C385E8(uint64_t a1)
{
  *(void *)a1 = off_1022EE938;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100C38664(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[16];
    return v3(a1 + 6, v4);
  }
  return result;
}

uint64_t sub_100C386C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C38738((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C38738(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    id v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100C387D0((uint64_t)v13);
  return v11;
}

uint64_t sub_100C387D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100C34144((void *)a1);
  }
  return a1;
}

void sub_100C38808()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100C38888()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100C38918(_Unwind_Exception *a1)
{
}

void sub_100C38930()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100C389E8(_Unwind_Exception *a1)
{
}

void sub_100C38A00()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100C38AA8(_Unwind_Exception *a1)
{
}

void sub_100C38AC0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D88EB0;
      v0[3] = unk_101D88EC0;
      v0[4] = xmmword_101D88ED0;
      v0[0] = xmmword_101D88E90;
      v0[1] = unk_101D88EA0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100C38BA0(_Unwind_Exception *a1)
{
}

uint64_t sub_100C38BB8()
{
  sub_100134750(qword_102480848, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480848, (void *)&_mh_execute_header);
  *(_OWORD *)&qword_102480868 = 0u;
  unk_102480878 = 0u;
  xmmword_102480888 = 0u;
  __cxa_atexit((void (*)(void *))sub_100C235A0, &qword_102480868, (void *)&_mh_execute_header);
  *(_OWORD *)&qword_102480898 = 0u;
  unk_1024808A8 = 0u;
  xmmword_1024808B8 = 0u;

  return __cxa_atexit((void (*)(void *))sub_100C243D4, &qword_102480898, (void *)&_mh_execute_header);
}

void *sub_100C38F68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v12, a3);
  sub_10065AB34((uint64_t)v11, a4);
  sub_10065AC50((uint64_t)v10, a5);
  sub_100DD5888((uint64_t)a1, a2, @"MotionCues", 0, 1, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10);
  sub_10065ACE8(v10);
  sub_10065ABCC(v11);
  sub_10065AAB0(v12);
  *a1 = off_1022EEB78;
  sub_1000E9354(a1 + 17);
  return a1;
}

void sub_100C3905C(_Unwind_Exception *a1)
{
  sub_100DD5960(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C390AC(void *a1)
{
  *a1 = off_1022EEB78;
  sub_10013F3C4(a1 + 17);

  return sub_100DD5960((uint64_t)a1);
}

void sub_100C39100(void *a1)
{
  *a1 = off_1022EEB78;
  sub_10013F3C4(a1 + 17);
  sub_100DD5960((uint64_t)a1);

  operator delete();
}

uint64_t sub_100C39168(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022EEC18);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)__n128 buf = 136446210;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022EEC18);
    }
    [*(id *)(a1 + 16) UTF8String];
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCuesConfigAsset::clearOutAssetData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000E9354(buf);
  sub_1004CE798(a1 + 136, (uint64_t)buf);
  return sub_10013F3C4(buf);
}

void sub_100C39344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100C39360(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022EEC18);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    int v4 = sub_1007E72D8(*(void **)(a1 + 128));
    int v5 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationMotionCuesSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022EEC18);
    }
    id v15 = [*(id *)(a1 + 16) UTF8String];
    int v16 = sub_1007E72D8(*(void **)(a1 + 128));
    int v17 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(v25.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(v25.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v16;
    WORD1(v25.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v25.__r_.__value_.__r.__words[2]) = v17;
    long long v18 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCuesConfigAsset::sendNotifications()", "%s\n", (const char *)v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  sub_100134750(&v25, "#CLConfig,");
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(__p, ",kNotificationMotionCuesSettings,");
  if ((v23 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v9 = v23;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  uint64_t v11 = (void *)v10->__r_.__value_.__r.__words[0];
  unint64_t size = v10->__r_.__value_.__l.__size_;
  v24[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(void *)&long long __dst = v11;
    *((void *)&__dst + 1) = size;
    *(_DWORD *)long long v20 = v24[0];
    *(_DWORD *)&v20[3] = *(_DWORD *)((char *)v24 + 3);
    char v21 = v13;
    goto LABEL_21;
  }
  sub_1000DC48C(&__dst, v11, size);
LABEL_21:
  char v14 = (void *)sub_1000E9358(a1 + 136);
  sub_1007E7320(&__dst, v14);
  if (v21 < 0) {
    operator delete((void *)__dst);
  }
  sub_100DD8718(a1, 9, a1 + 136);
  if (v13 < 0) {
    operator delete(v11);
  }
}

void sub_100C396BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C39738(uint64_t a1)
{
  sub_100DD6DC0(a1, @"settings.plist", a1 + 136);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 120);

  return v2(a1);
}

void sub_100C3979C(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

double sub_100C397CC(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

double sub_100C397D4(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

double sub_100C397DC(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

void sub_100C397E4(uint64_t *a1, double *a2)
{
}

void sub_100C397EC(uint64_t a1, double *a2, uint64_t *a3)
{
  int v5 = operator new(0x20uLL);
  v5[1] = *(_OWORD *)a2;
  uint64_t v6 = *a3;
  *(void *)int v5 = *a3;
  *((void *)v5 + 1) = a3;
  *(void *)(v6 + 8) = v5;
  *a3 = (uint64_t)v5;
  uint64_t v7 = a3[2];
  BOOL v8 = __CFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  a3[2] = v9;
  if (!v8)
  {
    do
    {
      uint64_t v10 = (double *)a3[1];
      if (vabdd_f64(v10[2], *a2) <= 3.0) {
        break;
      }
      double v11 = *v10;
      *(double *)(*(void *)&v11 + 8) = v10[1];
      **((double **)v10 + 1) = v11;
      a3[2] = v9 - 1;
      operator delete(v10);
      uint64_t v9 = a3[2];
    }
    while (v9);
  }
  uint64_t v12 = a3[1];
  if ((uint64_t *)v12 != a3)
  {
    int v13 = 0;
    double v14 = 0.0;
    do
    {
      double v14 = v14 + *(double *)(v12 + 24);
      ++v13;
      uint64_t v12 = *(void *)(v12 + 8);
    }
    while ((uint64_t *)v12 != a3);
  }
}

void sub_100C398C8(uint64_t a1, double *a2)
{
}

void sub_100C398D0(uint64_t a1, double *a2)
{
}

double sub_100C398D8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DBC34(a2);
  v11[0] = 0.0;
  if (sub_10014933C(v11, *(double *)(a1 + 4), *(double *)(a1 + 12)))
  {
    *(float *)(a2 + 316) = v11[0];
    *(_DWORD *)(a2 + 312) = 1;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022EEC38);
  }
  int v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float *)(a2 + 316);
    int v6 = *(_DWORD *)(a2 + 312);
    *(_DWORD *)__n128 buf = 134349312;
    double v16 = v5;
    __int16 v17 = 1026;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Wifi,undulation,%{public}lf, model, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022EEC38);
    }
    double v8 = *(float *)(a2 + 316);
    int v9 = *(_DWORD *)(a2 + 312);
    v11[1] = 3.9123e-34;
    double v12 = v8;
    __int16 v13 = 1026;
    int v14 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLDaemonLocationPrivate CL::Wifi1::Policies::LocationPrivateCalculation::populateLocationPrivate(const CL::Wifi1::Types::ComputedLocation &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(double *)(a2 + 32) = sub_1000D3E50();
  *(double *)(a2 + 344) = sub_10016C458();
  *(void *)(a2 + 24) = 0;
  double result = *(double *)(a1 + 168);
  *(double *)(a2 + 600) = result;
  *(unsigned char *)(a2 + 608) = *(unsigned char *)(a1 + 180);
  *(_DWORD *)(a2 + 620) = *(_DWORD *)(a1 + 176);
  return result;
}

void sub_100C39B14(_Unwind_Exception *exception_object)
{
  id v3 = *(std::__shared_weak_count **)(v1 + 528);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C39B30(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100C39B60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100C39C18(_Unwind_Exception *a1)
{
}

void sub_100C39C30()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100C39CD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100C39CF0()
{
  uint64_t result = qword_10248AA98;
  if (qword_10248AA98) {
    return (*(uint64_t (**)(void))(*(void *)qword_10248AA98 + 8))();
  }
  return result;
}

void sub_100C39D24(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1024808D8 & 1) == 0)
  {
    byte_1024808D8 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionLogEntry.pb.cc", a4);
    sub_100B66710(v4, v5, v6, v7);
    operator new();
  }
}

double sub_100C39E08(uint64_t a1)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)a1 = off_1022EEC68;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  return result;
}

void sub_100C39E38(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      int v5 = *(_DWORD *)(a2 + 32);
      if (!sub_10016E674(v5)) {
        sub_101A87444();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v5;
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 2u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248AA98 + 8);
      }
      sub_100B6B17C(v6, v7);
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 4u;
      double v8 = *(_DWORD **)(a1 + 16);
      if (!v8) {
        operator new();
      }
      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_10248AA98 + 16);
      }
      sub_100B6F9BC(v8, v9);
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 8) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 8u;
      uint64_t v10 = *(void *)(a1 + 24);
      if (!v10) {
        operator new();
      }
      uint64_t v11 = *(void *)(a2 + 24);
      if (!v11) {
        uint64_t v11 = *(void *)(qword_10248AA98 + 24);
      }
      sub_100B74674(v10, v11);
    }
  }
}

void sub_100C39FF4()
{
}

void *sub_100C3A05C(void *result)
{
  if ((void *)qword_10248AA98 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    double result = (void *)v1[3];
    if (result)
    {
      int v4 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v4();
    }
  }
  return result;
}

void sub_100C3A128(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022EEC68;
  sub_100C3A05C(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100C3A17C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022EEC68;
  sub_100C3A05C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_100C3A1E4(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248AA98;
  if (!qword_10248AA98)
  {
    sub_100C39D24(0, a2, a3, a4);
    return qword_10248AA98;
  }
  return result;
}

void sub_100C3A214()
{
}

uint64_t sub_100C3A26C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 40);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 32) = -1;
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_100B6B9B4(result);
        int v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_100B6FCCC(result);
        int v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(v1 + 24);
      if (result) {
        uint64_t result = sub_100B74BE8(result);
      }
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_100C3A2D8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v39 = 0;
        double v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
          goto LABEL_22;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
        if (result)
        {
          unsigned int v9 = v39;
LABEL_22:
          if (sub_10016E674(v9))
          {
            if (!sub_10016E674(v9)) {
              sub_101A87444();
            }
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }
          uint64_t v11 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
          {
            *((void *)this + 1) = v11 + 1;
            goto LABEL_28;
          }
          continue;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
LABEL_28:
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v12 = *(void *)(a1 + 8);
        if (!v12) {
          operator new();
        }
        unsigned int v39 = 0;
        __int16 v13 = (char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0; {
        }
          }
        else
        {
          unsigned int v39 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_100B6BB80(v12, this, v17) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        char v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 26) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_42:
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v22 = *(int **)(a1 + 16);
        if (!v22) {
          operator new();
        }
        unsigned int v39 = 0;
        unsigned __int8 v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0; {
        }
          }
        else
        {
          unsigned int v39 = *v23;
          *((void *)this + 1) = v23 + 1;
        }
        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25) {
          return 0;
        }
        int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_100B6FD0C(v22, this, v27) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        int v28 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v28, 1);
        int v29 = v28 - 1;
        if (v29 < 0 == v19) {
          *((_DWORD *)this + 14) = v29;
        }
        __int16 v30 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 != 34) {
          continue;
        }
        *((void *)this + 1) = v30 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v31 = *(void *)(a1 + 24);
        if (!v31) {
          operator new();
        }
        unsigned int v39 = 0;
        __int16 v32 = (char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0; {
        }
          }
        else
        {
          unsigned int v39 = *v32;
          *((void *)this + 1) = v32 + 1;
        }
        int v33 = *((_DWORD *)this + 14);
        int v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34) {
          return 0;
        }
        int v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_100B74CCC(v31, this, v36) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        int v37 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v37, 1);
        int v38 = v37 - 1;
        if (v38 < 0 == v19) {
          *((_DWORD *)this + 14) = v38;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        continue;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_42;
        }
        goto LABEL_17;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        goto LABEL_56;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
    return result;
  }
}

void sub_100C3A73C()
{
}

uint64_t sub_100C3A7A0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AA98 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AA98 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_13:
    uint64_t v9 = *(void *)(v5 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248AA98 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return result;
}

uint64_t sub_100C3A878(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      goto LABEL_19;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248AA98 + 8);
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6C7B8(v6, a2);
  int v8 = (int)v7;
  if (v7 >= 0x80) {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  }
  else {
    int v9 = 1;
  }
  uint64_t v4 = (v4 + v8 + v9 + 1);
  int v3 = *(_DWORD *)(a1 + 40);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AA98 + 16);
  }
  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B70118(v10, a2);
  int v12 = (int)v11;
  if (v11 >= 0x80) {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
  }
  else {
    int v13 = 1;
  }
  uint64_t v4 = (v4 + v12 + v13 + 1);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_28:
    uint64_t v14 = *(void *)(a1 + 24);
    if (!v14) {
      uint64_t v14 = *(void *)(qword_10248AA98 + 24);
    }
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B754DC(v14, a2);
    int v17 = (int)v15;
    if (v15 >= 0x80) {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, v16);
    }
    else {
      int v18 = 1;
    }
    uint64_t v4 = (v4 + v17 + v18 + 1);
  }
LABEL_34:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

void sub_100C3A9D8(uint64_t a1, void *lpsrc)
{
  sub_100C39E38(a1, (uint64_t)lpsrc);
}

uint64_t sub_100C3AA60()
{
  return 1;
}

void *sub_100C3AA68@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.LogEntry");
}

char *sub_100C3AA7C(char *a1)
{
  *a1 = 0;
  int v2 = a1 + 8;
  bzero(a1 + 8, 0x104A0uLL);
  *(_OWORD *)(a1 + 124) = 0u;
  *((void *)a1 + 2) = 0xBFF0000000000000;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 4) = 0;
  *((_WORD *)a1 + 24) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(void *)(a1 + 113) = 0;
  a1[121] = 1;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 313) = 0u;
  *((_DWORD *)a1 + 83) = 2139095039;
  *((int32x2_t *)a1 + 42) = vdup_n_s32(0x7F7FFFFFu);
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *(_DWORD *)(v2 + 383) = 0;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_DWORD *)(a1 + 443) = 0;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *(void *)(a1 + 511) = 0;
  *((_OWORD *)v2 + 32) = 0u;
  *((_OWORD *)v2 + 33) = 0u;
  *((_OWORD *)v2 + 34) = 0u;
  *((_OWORD *)v2 + 35) = 0u;
  *(void *)(v2 + 575) = 0;
  bzero(a1 + 592, 0x10003uLL);
  a1[66520] = 0;
  *(_OWORD *)(a1 + 66488) = 0u;
  *(_OWORD *)(a1 + 66504) = 0u;
  *(_OWORD *)(a1 + 66456) = 0u;
  *(_OWORD *)(a1 + 66472) = 0u;
  *(_OWORD *)(a1 + 66424) = 0u;
  *(_OWORD *)(a1 + 66440) = 0u;
  *(_OWORD *)(a1 + 66392) = 0u;
  *(_OWORD *)(a1 + 66408) = 0u;
  *(_OWORD *)(a1 + 66360) = 0u;
  *(_OWORD *)(a1 + 66376) = 0u;
  *(_OWORD *)(a1 + 66328) = 0u;
  *(_OWORD *)(a1 + 66344) = 0u;
  *(_OWORD *)(a1 + 66296) = 0u;
  *(_OWORD *)(a1 + 66312) = 0u;
  *(_OWORD *)(a1 + 66264) = 0u;
  *(_OWORD *)(a1 + 66280) = 0u;
  *(_OWORD *)(a1 + 66232) = 0u;
  *(_OWORD *)(a1 + 66248) = 0u;
  *(_OWORD *)(a1 + 66200) = 0u;
  *(_OWORD *)(a1 + 66216) = 0u;
  *(_OWORD *)(a1 + 66168) = 0u;
  *(_OWORD *)(a1 + 66184) = 0u;
  *(_OWORD *)(a1 + 66136) = 0u;
  *(_OWORD *)(a1 + 66152) = 0u;
  *((_DWORD *)a1 + 16680) = 0;
  *((_OWORD *)a1 + 4168) = 0u;
  *((_OWORD *)a1 + 4169) = 0u;
  *((_OWORD *)a1 + 4166) = 0u;
  *((_OWORD *)a1 + 4167) = 0u;
  *((_OWORD *)a1 + 4164) = 0u;
  *((_OWORD *)a1 + 4165) = 0u;
  *((_OWORD *)a1 + 4162) = 0u;
  *((_OWORD *)a1 + 4163) = 0u;
  *((_OWORD *)a1 + 4160) = 0u;
  *((_OWORD *)a1 + 4161) = 0u;
  *((_OWORD *)a1 + 4158) = 0u;
  *((_OWORD *)a1 + 4159) = 0u;
  *(_OWORD *)(a1 + 66728) = 0u;
  *(_OWORD *)(a1 + 66744) = 0u;
  *(_OWORD *)(a1 + 66760) = 0u;
  *(_OWORD *)(a1 + 66776) = 0u;
  *(_OWORD *)(a1 + 66792) = 0u;
  *(_OWORD *)(a1 + 66808) = 0u;
  sub_100513074(a1 + 66824, "CLFitnessTrackingAllDayAWD", 1, 1);
  if (&MCEffectiveSettingsChangedNotification)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_100C3AC88, MCEffectiveSettingsChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  sub_100C3AC90((uint64_t)a1);
  return a1;
}

void sub_100C3AC64(_Unwind_Exception *a1)
{
  sub_100C3D3A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3AC88(uint64_t a1, uint64_t a2)
{
  return sub_100C3AC90(a2);
}

uint64_t sub_100C3AC90(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  uint64_t v8 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  __int16 v9 = 256;
  if (objc_opt_class())
  {
    unsigned int v3 = [[+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection") isWheelchairDataSubmissionAllowed];
    *(unsigned char *)a1 = v3;
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
    }
  }
  else if (*(unsigned char *)a1)
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v4 = sub_1000D3E78();
  sub_10006B564(v4, &v6);
  sub_1000D2988(v6, "EnableWheelchairAWDCollection", (BOOL *)a1);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100C3AD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    sub_1000DB0A0(a4);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C3ADB4()
{
}

void sub_100C3ADFC()
{
}

uint64_t sub_100C3AE20()
{
  if (qword_1024808F8 != -1) {
    dispatch_once(&qword_1024808F8, &stru_1022EECE8);
  }
  return qword_10248AAA0;
}

uint64_t sub_100C3AE68(uint64_t a1, int a2, double a3)
{
  uint64_t v5 = (double *)(a1 + 66736);
  uint64_t v6 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  if (a2)
  {
    if (a2 == 2)
    {
      ++v5;
    }
    else if (a2 != 1)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
  }
  else
  {
    v5 += 2;
  }
  *uint64_t v5 = *v5 + a3;
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

uint64_t sub_100C3AF2C(uint64_t a1, int a2, uint64_t a3, float a4, float a5)
{
  __int16 v9 = (float *)(a1 + 66760);
  uint64_t v10 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  int v11 = *(_DWORD *)(a3 + 8);
  if (v11 == 90603)
  {
    float *v9 = *v9 + a4;
  }
  else if (*(unsigned char *)(a3 + 208))
  {
    if ((CLMotionActivity::isTypePedestrian() & 1) != 0 || (*(_DWORD *)(a3 + 8) - 61) <= 1)
    {
      v9[1] = v9[1] + a4;
    }
    else if (CLMotionActivity::isTypeSwimming())
    {
      v9[2] = v9[2] + a4;
    }
    else if (CLMotionActivity::isTypeCycling())
    {
      v9[3] = v9[3] + a4;
    }
    else
    {
      v9[4] = v9[4] + a4;
    }
  }
  else if (v11 == 7)
  {
    if (a5 <= 1.6)
    {
      v9[8] = v9[8] + a4;
    }
    else if (a2)
    {
      v9[7] = v9[7] + a4;
    }
    else
    {
      v9[6] = v9[6] + a4;
    }
  }
  else if (v11 == 11805)
  {
    void v9[5] = v9[5] + a4;
  }
  else if (CLMotionActivity::isStatic((CLMotionActivity *)(a3 + 8)))
  {
    v9[9] = v9[9] + a4;
  }
  else
  {
    v9[10] = v9[10] + a4;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
}

void sub_100C3B108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3B120(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 104);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100C3B1A8(uint64_t a1, int a2)
{
  unsigned int v3 = (_DWORD *)(a1 + 66808);
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*v3;
  if (a2) {
    ++v3[1];
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

uint64_t sub_100C3B24C(uint64_t a1, float a2, float a3)
{
  uint64_t v5 = (float *)(a1 + 66816);
  uint64_t v6 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  float v7 = v5[1] + a3;
  *uint64_t v5 = *v5 + a2;
  v5[1] = v7;
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

uint64_t sub_100C3B2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  v5.n128_u32[0] = *(_DWORD *)(a2 + 27);
  v6.n128_u32[0] = *(_DWORD *)(a2 + 31);
  float v7 = *(float *)(a2 + 35);
  float v8 = *(float *)(a2 + 39);
  float v9 = *(float *)(a2 + 43);
  float v10 = *(float *)(a2 + 47);
  ++*(_DWORD *)(a1 + 116);
  uint64_t v11 = *(void *)(a1 + 184);
  int v12 = *(float **)(a1 + 192);
  uint64_t v13 = (uint64_t)v12 - v11;
  if ((unint64_t)v12 - v11 <= 0x18F)
  {
    float v14 = v6.n128_f32[0] - v5.n128_f32[0];
    unint64_t v15 = *(void *)(a1 + 200);
    if ((unint64_t)v12 >= v15)
    {
      uint64_t v17 = v13 >> 2;
      uint64_t v18 = v15 - v11;
      if (v18 >> 1 <= (unint64_t)((v13 >> 2) + 1)) {
        uint64_t v19 = v17 + 1;
      }
      else {
        uint64_t v19 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      char v21 = (char *)sub_10017EA34(a1 + 200, v20);
      uint64_t v22 = *(char **)(a1 + 184);
      unsigned __int8 v23 = *(char **)(a1 + 192);
      int v24 = (float *)&v21[4 * v17];
      int v26 = &v21[4 * v25];
      *int v24 = v14;
      unsigned int v16 = v24 + 1;
      while (v23 != v22)
      {
        unsigned __int32 v27 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        v5.n128_u32[0] = v27;
        *((_DWORD *)v24-- - 1) = v27;
      }
      *(void *)(a1 + 184) = v24;
      *(void *)(a1 + 192) = v16;
      *(void *)(a1 + 200) = v26;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *int v12 = v14;
      unsigned int v16 = v12 + 1;
    }
    unint64_t v28 = *(void *)(a1 + 224);
    *(void *)(a1 + 192) = v16;
    float v29 = v8 - v7;
    __int16 v30 = *(float **)(a1 + 216);
    if ((unint64_t)v30 >= v28)
    {
      __int16 v32 = *(float **)(a1 + 208);
      uint64_t v33 = v30 - v32;
      if ((unint64_t)(v33 + 1) >> 62) {
        sub_1001D7FD4();
      }
      unint64_t v34 = v28 - (void)v32;
      unint64_t v35 = (uint64_t)(v28 - (void)v32) >> 1;
      if (v35 <= v33 + 1) {
        unint64_t v35 = v33 + 1;
      }
      if (v34 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36)
      {
        int v37 = (char *)sub_10017EA34(a1 + 224, v36);
        __int16 v32 = *(float **)(a1 + 208);
        __int16 v30 = *(float **)(a1 + 216);
      }
      else
      {
        int v37 = 0;
      }
      int v38 = (float *)&v37[4 * v33];
      unsigned int v39 = &v37[4 * v36];
      *int v38 = v29;
      uint64_t v31 = v38 + 1;
      while (v30 != v32)
      {
        unsigned __int32 v40 = *((_DWORD *)v30-- - 1);
        v5.n128_u32[0] = v40;
        *((_DWORD *)v38-- - 1) = v40;
      }
      *(void *)(a1 + 208) = v38;
      *(void *)(a1 + 216) = v31;
      *(void *)(a1 + 224) = v39;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *__int16 v30 = v29;
      uint64_t v31 = v30 + 1;
    }
    unint64_t v41 = *(void *)(a1 + 248);
    *(void *)(a1 + 216) = v31;
    float v42 = v10 - v9;
    unint64_t v43 = *(float **)(a1 + 240);
    if ((unint64_t)v43 >= v41)
    {
      int v45 = *(float **)(a1 + 232);
      uint64_t v46 = v43 - v45;
      if ((unint64_t)(v46 + 1) >> 62) {
        sub_1001D7FD4();
      }
      unint64_t v47 = v41 - (void)v45;
      unint64_t v48 = (uint64_t)(v41 - (void)v45) >> 1;
      if (v48 <= v46 + 1) {
        unint64_t v48 = v46 + 1;
      }
      if (v47 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49)
      {
        CFAbsoluteTime v50 = (char *)sub_10017EA34(a1 + 248, v49);
        int v45 = *(float **)(a1 + 232);
        unint64_t v43 = *(float **)(a1 + 240);
      }
      else
      {
        CFAbsoluteTime v50 = 0;
      }
      uint64_t v51 = (float *)&v50[4 * v46];
      char v52 = &v50[4 * v49];
      *uint64_t v51 = v42;
      __int16 v44 = v51 + 1;
      while (v43 != v45)
      {
        unsigned __int32 v53 = *((_DWORD *)v43-- - 1);
        v5.n128_u32[0] = v53;
        *((_DWORD *)v51-- - 1) = v53;
      }
      *(void *)(a1 + 232) = v51;
      *(void *)(a1 + 240) = v44;
      *(void *)(a1 + 248) = v52;
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      *unint64_t v43 = v42;
      __int16 v44 = v43 + 1;
    }
    *(void *)(a1 + 240) = v44;
  }
  return (*(uint64_t (**)(uint64_t, __n128, __n128))(*(void *)v4 + 24))(v4, v5, v6);
}

void sub_100C3B5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3B5F4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 121) = a2;
  *(unsigned char *)(result + 120) = 1;
  return result;
}

uint64_t sub_100C3B604(void *a1, float a2)
{
  uint64_t v4 = a1 + 8353;
  (*(void (**)(void *))(a1[8353] + 16))(a1 + 8353);
  unint64_t v5 = a1[22];
  __n128 v6 = (float *)a1[21];
  if ((unint64_t)v6 >= v5)
  {
    float v8 = (float *)a1[20];
    uint64_t v9 = v6 - v8;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_1001D7FD4();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_10017EA34((uint64_t)(a1 + 22), v12);
      float v8 = (float *)a1[20];
      __n128 v6 = (float *)a1[21];
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = (float *)&v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *float v14 = a2;
    float v7 = v14 + 1;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6-- - 1);
      *((_DWORD *)v14-- - 1) = v16;
    }
    a1[20] = v14;
    a1[21] = v7;
    a1[22] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *__n128 v6 = a2;
    float v7 = v6 + 1;
  }
  a1[21] = v7;
  return (*(uint64_t (**)(void *))(*v4 + 24))(v4);
}

void sub_100C3B760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3B778(uint64_t a1, float a2)
{
  uint64_t v3 = a1 + 66688;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  unint64_t v5 = *(float **)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(float **)v3;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v3) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_10017EA34(v3 + 16, v12);
      float v8 = *(float **)v3;
      unint64_t v5 = *(float **)(v3 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = (float *)&v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *float v14 = a2;
    float v7 = v14 + 1;
    while (v5 != v8)
    {
      int v16 = *((_DWORD *)v5-- - 1);
      *((_DWORD *)v14-- - 1) = v16;
    }
    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + 8) = v7;
    *(void *)(v3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    float v7 = v5 + 1;
  }
  *(void *)(v3 + 8) = v7;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 136) + 24))(v4);
}

void sub_100C3B8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3B8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66136;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  unint64_t v5 = *(void **)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v3;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v3) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000DA54C(v3 + 16, v12);
      float v8 = *(void **)v3;
      unint64_t v5 = *(void **)(v3 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + 8) = v7;
    *(void *)(v3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    float v7 = v5 + 1;
  }
  *(void *)(v3 + 8) = v7;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022EED08);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    uint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating impact cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EED08);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateImpactCancelationReason(const uint64_t)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100C3BBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3BBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66824;
  uint64_t v4 = a1 + 66160;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  unint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000DA54C(v4 + 16, v12);
      float v8 = *(void **)v4;
      unint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    float v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022EED08);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    uint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating outdoor cycling cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EED08);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOutdoorCyclingWorkoutImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_100C3BEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3BED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66184;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  unint64_t v5 = *(void **)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v3;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v3) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000DA54C(v3 + 16, v12);
      float v8 = *(void **)v3;
      unint64_t v5 = *(void **)(v3 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + 8) = v7;
    *(void *)(v3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    float v7 = v5 + 1;
  }
  *(void *)(v3 + 8) = v7;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022EED08);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    uint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating outdoor walking cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EED08);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOutdoorWalkingImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100C3C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3C1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66824;
  uint64_t v4 = a1 + 66208;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  unint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000DA54C(v4 + 16, v12);
      float v8 = *(void **)v4;
      unint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    float v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022EED08);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    uint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating outdoor running cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EED08);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOutdoorRunningImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_100C3C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3C4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66232;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  unint64_t v5 = *(void **)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v3;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v3) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000DA54C(v3 + 16, v12);
      float v8 = *(void **)v3;
      unint64_t v5 = *(void **)(v3 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + 8) = v7;
    *(void *)(v3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    float v7 = v5 + 1;
  }
  *(void *)(v3 + 8) = v7;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022EED08);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    uint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating hiking cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EED08);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateHikingWorkoutImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100C3C78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3C7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66824;
  uint64_t v4 = a1 + 66256;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  unint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000DA54C(v4 + 16, v12);
      float v8 = *(void **)v4;
      unint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v5 = a2;
    float v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022EED08);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134217984;
    uint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating other workout cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EED08);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOtherWorkoutImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_100C3CA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3CAAC(uint64_t a1, float a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  *(float *)(a1 + 332) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

float sub_100C3CB38(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  float v3 = *(float *)(a1 + 332);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100C3CBC4(uint64_t a1, float a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  *(float *)(a1 + 336) = a2;
  *(unsigned char *)(a1 + 328) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

float sub_100C3CC58(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  if (*(unsigned char *)(a1 + 328)) {
    float v3 = *(float *)(a1 + 336);
  }
  else {
    float v3 = -1.0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100C3CCF4(uint64_t a1, float a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  *(float *)(a1 + 340) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

float sub_100C3CD80(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  float v3 = *(float *)(a1 + 340);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100C3CE0C(uint64_t a1, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v7 = a1 + 66824;
  float v8 = (void **)(a1 + 66448);
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v9 = v8[1];
  uint64_t v10 = (char *)v9 - (unsigned char *)*v8;
  if ((unint64_t)v10 <= 0xC7)
  {
    unint64_t v11 = (unint64_t)v8[2];
    if ((unint64_t)v9 >= v11)
    {
      uint64_t v13 = v10 >> 1;
      unint64_t v14 = v11 - (void)*v8;
      if (v14 <= (v10 >> 1) + 1) {
        uint64_t v15 = v13 + 1;
      }
      else {
        uint64_t v15 = v11 - (void)*v8;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = (char *)sub_100C3D5E0((uint64_t)(v8 + 2), v16);
      uint64_t v18 = (char *)*v8;
      uint64_t v19 = (char *)v8[1];
      unint64_t v20 = &v17[2 * v13];
      uint64_t v22 = &v17[2 * v21];
      *(_WORD *)unint64_t v20 = a2;
      unint64_t v12 = v20 + 2;
      while (v19 != v18)
      {
        __int16 v23 = *((_WORD *)v19 - 1);
        v19 -= 2;
        *((_WORD *)v20 - 1) = v23;
        v20 -= 2;
      }
      *float v8 = v20;
      v8[1] = v12;
      v8[2] = v22;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      _WORD *v9 = a2;
      unint64_t v12 = v9 + 1;
    }
    unint64_t v24 = (unint64_t)v8[5];
    v8[1] = v12;
    uint64_t v25 = (char *)v8[4];
    if ((unint64_t)v25 >= v24)
    {
      unsigned __int32 v27 = (char *)v8[3];
      uint64_t v28 = v25 - v27;
      if (v25 - v27 <= -3) {
        sub_1001D7FD4();
      }
      uint64_t v29 = v28 >> 1;
      unint64_t v30 = v24 - (void)v27;
      if (v30 <= (v28 >> 1) + 1) {
        unint64_t v31 = v29 + 1;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v32 = v31;
      }
      if (v32)
      {
        uint64_t v33 = (char *)sub_100C3D5E0((uint64_t)(v8 + 5), v32);
        unsigned __int32 v27 = (char *)v8[3];
        uint64_t v25 = (char *)v8[4];
      }
      else
      {
        uint64_t v33 = 0;
      }
      unint64_t v34 = &v33[2 * v29];
      unint64_t v35 = &v33[2 * v32];
      *(_WORD *)unint64_t v34 = a3;
      int v26 = v34 + 2;
      while (v25 != v27)
      {
        __int16 v36 = *((_WORD *)v25 - 1);
        v25 -= 2;
        *((_WORD *)v34 - 1) = v36;
        v34 -= 2;
      }
      void v8[3] = v34;
      v8[4] = v26;
      v8[5] = v35;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *(_WORD *)uint64_t v25 = a3;
      int v26 = v25 + 2;
    }
    unint64_t v37 = (unint64_t)v8[8];
    v8[4] = v26;
    int v38 = (char *)v8[7];
    if ((unint64_t)v38 >= v37)
    {
      unsigned __int32 v40 = (char *)v8[6];
      uint64_t v41 = v38 - v40;
      if (v38 - v40 <= -3) {
        sub_1001D7FD4();
      }
      uint64_t v42 = v41 >> 1;
      unint64_t v43 = v37 - (void)v40;
      if (v43 <= (v41 >> 1) + 1) {
        unint64_t v44 = v42 + 1;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v43 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v45 = v44;
      }
      if (v45)
      {
        uint64_t v46 = (char *)sub_100C3D5E0((uint64_t)(v8 + 8), v45);
        unsigned __int32 v40 = (char *)v8[6];
        int v38 = (char *)v8[7];
      }
      else
      {
        uint64_t v46 = 0;
      }
      unint64_t v47 = &v46[2 * v42];
      unint64_t v48 = &v46[2 * v45];
      *(_WORD *)unint64_t v47 = a4;
      unsigned int v39 = v47 + 2;
      while (v38 != v40)
      {
        __int16 v49 = *((_WORD *)v38 - 1);
        v38 -= 2;
        *((_WORD *)v47 - 1) = v49;
        v47 -= 2;
      }
      v8[6] = v47;
      v8[7] = v39;
      v8[8] = v48;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *(_WORD *)int v38 = a4;
      unsigned int v39 = v38 + 2;
    }
    v8[7] = v39;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_100C3D0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3D0D8(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v7 = a1 + 66824;
  uint64_t v8 = a1 + 66528;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v9 = *(_DWORD **)(v8 + 8);
  unint64_t v10 = *(void *)(v8 + 16);
  if ((unint64_t)v9 >= v10)
  {
    unint64_t v12 = *(_DWORD **)v8;
    uint64_t v13 = ((uint64_t)v9 - *(void *)v8) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)sub_10017EA34(v8 + 16, v16);
      unint64_t v12 = *(_DWORD **)v8;
      uint64_t v9 = *(_DWORD **)(v8 + 8);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *(_DWORD *)uint64_t v18 = a2;
    unint64_t v11 = v18 + 4;
    while (v9 != v12)
    {
      int v20 = *--v9;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    *(void *)uint64_t v8 = v18;
    *(void *)(v8 + 8) = v11;
    *(void *)(v8 + 16) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    _DWORD *v9 = a2;
    unint64_t v11 = v9 + 1;
  }
  unint64_t v21 = *(void *)(v8 + 40);
  *(void *)(v8 + 8) = v11;
  float v22 = a4 - a3;
  __int16 v23 = *(float **)(v8 + 32);
  if ((unint64_t)v23 >= v21)
  {
    uint64_t v25 = *(float **)(v8 + 24);
    uint64_t v26 = v23 - v25;
    if ((unint64_t)(v26 + 1) >> 62) {
      sub_1001D7FD4();
    }
    unint64_t v27 = v21 - (void)v25;
    unint64_t v28 = (uint64_t)(v21 - (void)v25) >> 1;
    if (v28 <= v26 + 1) {
      unint64_t v28 = v26 + 1;
    }
    if (v27 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29)
    {
      unint64_t v30 = (char *)sub_10017EA34(v8 + 40, v29);
      uint64_t v25 = *(float **)(v8 + 24);
      __int16 v23 = *(float **)(v8 + 32);
    }
    else
    {
      unint64_t v30 = 0;
    }
    unint64_t v31 = (float *)&v30[4 * v26];
    uint64_t v32 = &v30[4 * v29];
    *unint64_t v31 = v22;
    unint64_t v24 = v31 + 1;
    while (v23 != v25)
    {
      int v33 = *((_DWORD *)v23-- - 1);
      *((_DWORD *)v31-- - 1) = v33;
    }
    *(void *)(v8 + 24) = v31;
    *(void *)(v8 + 32) = v24;
    *(void *)(v8 + 40) = v32;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *__int16 v23 = v22;
    unint64_t v24 = v23 + 1;
  }
  *(void *)(v8 + 32) = v24;
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_100C3D300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3D31C(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 66520;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  *(unsigned char *)uint64_t v3 = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 304) + 24))(v4);
}

uint64_t sub_100C3D3A8(uint64_t a1)
{
  uint64_t v2 = a1 + 66440;
  uint64_t v3 = *(void **)(a1 + 66680);
  if (v3)
  {
    *(void *)(v2 + 248) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v2 + 104);
  if (v4)
  {
    *(void *)(v2 + 112) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(v2 + 80);
  if (v5)
  {
    *(void *)(v2 + 88) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(v2 + 48);
  if (v6)
  {
    *(void *)(v2 + 56) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void **)(a1 + 66128);
  uint64_t v8 = *(void **)(v2 + 24);
  if (v8)
  {
    *(void *)(v2 + 32) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v9;
    operator delete(v9);
  }
  unint64_t v10 = *(void **)(a1 + 66248);
  if (v10)
  {
    *(void *)(a1 + 66256) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 66224);
  if (v11)
  {
    *(void *)(a1 + 66232) = v11;
    operator delete(v11);
  }
  unint64_t v12 = *(void **)(a1 + 66200);
  if (v12)
  {
    *(void *)(a1 + 66208) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 66176);
  if (v13)
  {
    *(void *)(a1 + 66184) = v13;
    operator delete(v13);
  }
  unint64_t v14 = *(void **)(a1 + 66152);
  if (v14)
  {
    *(void *)(a1 + 66160) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *v7;
  if (*v7)
  {
    *(void *)(a1 + 66136) = v15;
    operator delete(v15);
  }
  unint64_t v16 = *(void **)(a1 + 296);
  if (v16)
  {
    *(void *)(a1 + 304) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 272);
  if (v17)
  {
    *(void *)(a1 + 280) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 248);
  if (v18)
  {
    *(void *)(a1 + 256) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 224);
  if (v19)
  {
    *(void *)(a1 + 232) = v19;
    operator delete(v19);
  }
  int v20 = *(void **)(a1 + 200);
  if (v20)
  {
    *(void *)(a1 + 208) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *(void **)(a1 + 176);
  if (v21)
  {
    *(void *)(a1 + 184) = v21;
    operator delete(v21);
  }
  float v22 = *(void **)(a1 + 152);
  if (v22)
  {
    *(void *)(a1 + 160) = v22;
    operator delete(v22);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void *sub_100C3D524(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_100C3D5A0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100C3D584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100C3D5A0(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_100C3D5E0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_100C3D5E0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1001D7FA0();
  }
  return operator new(2 * a2);
}

void sub_100C3D614(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_100C3D644()
{
  sub_100134750(qword_1024808E0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024808E0, (void *)&_mh_execute_header);
}

void sub_100C3D754(id a1)
{
  qword_102480918 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSimulationControllerSilo"];
}

void sub_100C3D9EC()
{
}

void sub_100C3DB74(uint64_t a1, int a2)
{
  char v2 = a2;
  if (a2 && !*(unsigned char *)(a1 + 1745) && sub_100743FCC()) {
    sub_100C3DCA4(a1);
  }
  *(unsigned char *)(a1 + 1745) = v2;
}

void sub_100C3DCA4(uint64_t a1)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  char v2 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    unint64_t v6 = "";
    __int16 v7 = 1026;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulation stop request received\", \"fSimulationRunning\":%{public}hhd}", (uint8_t *)v4, 0x18u);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 72) = 0;
    sub_100C41B40(a1);
    [*(id *)(a1 + 1680) setNextFireDelay:1.79769313e308];
  }
}

void sub_100C3DEA0(uint64_t a1)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  char v2 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    int v4 = *(unsigned __int8 *)(a1 + 1745);
    v5[0] = 68289538;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 1026;
    int v9 = v3;
    __int16 v10 = 1026;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulation start request received\", \"fSimulationRunning\":%{public}hhd, \"fIsInEmergencyState\":%{public}hhd}", (uint8_t *)v5, 0x1Eu);
  }
  if (!*(unsigned char *)(a1 + 72) && (!*(unsigned char *)(a1 + 1745) || (sub_100743FCC() & 1) == 0))
  {
    *(unsigned char *)(a1 + 72) = 1;
    sub_100C41B40(a1);
    sub_100C416B8((id *)a1);
  }
}

void sub_100C3DFDC(uint64_t a1, const void *a2)
{
  sub_100C413D4(a1, 1);
  int v4 = *(const void **)(a1 + 1736);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 1736) = a2;
  if (a2)
  {
    CFRetain(a2);
    sub_100C4034C(a1);
  }
}

void sub_100C3E278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1003B2350((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100C3E2C4(unsigned __int8 *result, unsigned int a2)
{
  if (result[1728] != a2)
  {
    uint64_t v3 = (uint64_t)result;
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    int v4 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int16 v7 = "";
      __int16 v8 = 2050;
      uint64_t v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationDeliveryBehavior\":%{public, location:CLSimulationLocationDeliveryBehavior}lld}", (uint8_t *)v5, 0x1Cu);
    }
    *(unsigned char *)(v3 + 1728) = a2;
    return (unsigned __int8 *)sub_100C41B40(v3);
  }
  return result;
}

void sub_100C3E3E8(uint64_t a1, unsigned int a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  int v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 2050;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationRepeatBehavior\":%{public, location:CLSimulationLocationRepeatBehavior}lld}", (uint8_t *)v5, 0x1Cu);
  }
  *(unsigned char *)(a1 + 1729) = a2;
}

double sub_100C3E518(uint64_t a1, double *a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  int v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    double v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"intermediateLocationDistance\":\"%{public}f\"}", (uint8_t *)v7, 0x1Cu);
  }
  double result = *a2;
  *(double *)(a1 + 1688) = *a2;
  return result;
}

double sub_100C3E64C(uint64_t a1, double *a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  int v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    double v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationInterval_s\":\"%{public}.09f\"}", (uint8_t *)v7, 0x1Cu);
  }
  double result = *a2;
  *(double *)(a1 + 1696) = *a2;
  return result;
}

double sub_100C3E780(uint64_t a1, double *a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  int v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    double v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Travelling speed changed\", \"travellingSpeed\":\"%{public}f\"}", (uint8_t *)v7, 0x1Cu);
  }
  double result = *a2;
  *(double *)(a1 + 1704) = *a2;
  return result;
}

id sub_100C3E894(id *a1, uint64_t a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  int v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Simulating a visit event\"}", (uint8_t *)v6, 0x12u);
  }
  return [[[objc_msgSend(*a1, "vendor") proxyForService:@"CLSignificantVisitManager"] simulateVisit:a2];
}

id sub_100C3E9AC(id *a1, void *a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  int v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 2082;
    id v10 = [[objc_msgSend(a2, "description") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slc Simulating an SLC event\", \"location\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  return [objc_msgSend(objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLSignificantChangeManager"), "simulateSignificantLocationChange:", a2];
}

id sub_100C3EADC(id *a1, void *a2, uint64_t a3)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  __int16 v6 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    id v15 = [a2 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Returning fences for bundleID\", \"bundleID\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  id v7 = [objc_msgSend(*a1, "vendor") proxyForService:@"CLFenceManager" forClient:@"CLSimulationController"];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100C41BA4;
  v9[3] = &unk_1022EED50;
  v9[4] = a3;
  return [v7 getFencesForBundleID:a2 withReply:v9];
}

id sub_100C3EC68(id *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  id v10 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289538;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    id v16 = [a2 UTF8String];
    __int16 v17 = 2082;
    id v18 = [a3 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulating a fence entry/exit for fence\", \"bundleID\":%{public, location:escape_only}s, \"fenceID\":%{public, location:escape_only}s}", (uint8_t *)v12, 0x26u);
  }
  return [objc_msgSend(objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLFenceManager"), "simulateFenceWithBundleID:andFenceID:eventType:atLocation:", a2, a3, a4, a5];
}

id sub_100C3EDD8(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  id v10 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289794;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    id v16 = [a2 UTF8String];
    __int16 v17 = 1026;
    int v18 = a3;
    __int16 v19 = 1026;
    int v20 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulating beacon region entry/exit.\", \"proximityUUID: \":%{public, location:escape_only}s, \"major: \":%{public}d, \"minor: \":%{public}d}", (uint8_t *)v12, 0x28u);
  }
  return [objc_msgSend(objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLBTLEFenceManager"), "simulateBeaconWithProximityUUID:major:minor:eventType:", a2, a3, a4, a5);
}

uint64_t sub_100C3F260(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a1 + 48;
  *(void *)(a1 + 56) = a1 + 48;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 88) = 0xFFFF;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 108) = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 124) = _Q1;
  *(_OWORD *)(a1 + 140) = _Q1;
  *(_OWORD *)(a1 + 156) = _Q1;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 244) = 0xFFFF;
  uint64_t v9 = a1 + 244;
  *(void *)(a1 + 204) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 212) = 0x7FFFFFFF;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 272) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 288) = _Q1;
  *(_OWORD *)(a1 + 304) = _Q1;
  *(void *)(a1 + 320) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 340) = 0;
  *(void *)(a1 + 348) = 0;
  *(void *)(a1 + 332) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 356) = 0;
  *(void *)(a1 + 360) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 368) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 396) = 0;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 400) = 0xFFFF;
  *(void *)(a1 + 404) = 0;
  *(void *)(a1 + 412) = 0;
  long long v25 = _Q1;
  *(_OWORD *)(a1 + 420) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 436) = _Q1;
  *(_OWORD *)(a1 + 452) = _Q1;
  *(_OWORD *)(a1 + 468) = _Q1;
  *(_DWORD *)(a1 + 484) = 0;
  *(void *)(a1 + 488) = 0xBFF0000000000000;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 516) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  memcpy((void *)(a1 + 560), &unk_101D216A0, 0x230uLL);
  memcpy((void *)(v9 + 876), &unk_101D216A0, 0x230uLL);
  *(void *)(v9 + 1492) = 0;
  *(_WORD *)(v9 + 1500) = 0;
  [a2 silo];
  sub_100C413D4(a1, 1);
  id v10 = [objc_msgSend(*(id *)a1, "silo") newTimer];
  *(void *)(a1 + 1680) = v10;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100C3FA88;
  v29[3] = &unk_1022A3020;
  v29[4] = a1;
  [v10 setHandler:v29];
  *(_DWORD *)unint64_t v27 = 0xFFFF;
  *(_OWORD *)&v27[4] = 0uLL;
  *(_OWORD *)&v27[36] = v25;
  *(_OWORD *)&v27[52] = v25;
  *(void *)&v27[68] = v25;
  *(_DWORD *)&v27[84] = 0;
  *(_OWORD *)&v28[4] = 0uLL;
  *(void *)&v28[20] = 0xBFF0000000000000;
  memset(&v28[40], 0, 17);
  *(_DWORD *)unint64_t v28 = 1;
  *(void *)&v28[28] = 0x327FFFFFFFLL;
  *(_OWORD *)&v27[20] = xmmword_101D89EC0;
  *(void *)&v27[76] = CFAbsoluteTimeGetCurrent();
  *(void *)&v27[88] = 0xBFF0000000000000;
  *(_DWORD *)&v28[36] = 1;
  sub_1000C7F88(&buf);
  if (sub_1000A699C(buf, "SimulatedLocationLatitude", &v27[4]))
  {
    sub_1000C7F88(&v34);
    int v11 = sub_1000A699C(v34, "SimulatedLocationLongitude", &v27[12]);
    if (v35) {
      sub_1000DB0A0(v35);
    }
  }
  else
  {
    int v11 = 0;
  }
  if ((void)v31) {
    sub_1000DB0A0((std::__shared_weak_count *)v31);
  }
  if (v11)
  {
    sub_1000C7F88(&buf);
    sub_1000A699C(buf, "SimulatedLocationAccuracy", &v27[20]);
    if ((void)v31) {
      sub_1000DB0A0((std::__shared_weak_count *)v31);
    }
    sub_1000C7F88(&buf);
    sub_10006EF84(buf, "SimulatedLocationType", v28);
    if ((void)v31) {
      sub_1000DB0A0((std::__shared_weak_count *)v31);
    }
    sub_1000C7F88(&buf);
    sub_1000A699C(buf, "SimulatedLocationAltitude", &v27[28]);
    if ((void)v31) {
      sub_1000DB0A0((std::__shared_weak_count *)v31);
    }
    sub_1000C7F88(&buf);
    sub_1000A699C(buf, "SimulatedLocationAltitudeAccuracy", &v27[36]);
    if ((void)v31) {
      sub_1000DB0A0((std::__shared_weak_count *)v31);
    }
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    __int16 v12 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289539;
      LOWORD(v31) = 2082;
      *(void *)((char *)&v31 + 2) = "";
      WORD5(v31) = 1040;
      HIDWORD(v31) = 156;
      __int16 v32 = 2097;
      int v33 = v27;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Using simulated location from defaults\", \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x22u);
    }
  }
  else
  {
    memset(v28, 0, 20);
    memset(&v28[32], 0, 25);
    *(_DWORD *)unint64_t v27 = 0xFFFF;
    *(void *)&v27[4] = 0;
    *(void *)&v27[12] = 0;
    *(_OWORD *)&v27[20] = xmmword_101D1C320;
    *(_OWORD *)&v27[36] = v25;
    *(_OWORD *)&v27[52] = v25;
    *(_OWORD *)&v27[68] = v25;
    *(_DWORD *)&v27[84] = 0;
    *(void *)&v27[88] = 0xBFF0000000000000;
    *(void *)&v28[20] = 0xBFF0000000000000;
    *(_DWORD *)&v28[28] = 0x7FFFFFFF;
  }
  double v13 = *(double *)&v27[20];
  if (*(double *)&v27[20] > 0.0)
  {
    uint64_t buf = (uint64_t)&buf;
    *(void *)&long long v31 = &buf;
    *((void *)&v31 + 1) = 0;
    __int16 v14 = operator new(0xB0uLL);
    long long v15 = *(_OWORD *)&v28[16];
    v14[7] = *(_OWORD *)v28;
    v14[8] = v15;
    v14[9] = *(_OWORD *)&v28[32];
    *(_OWORD *)((char *)v14 + 156) = *(_OWORD *)&v28[44];
    long long v16 = *(_OWORD *)&v27[48];
    void v14[3] = *(_OWORD *)&v27[32];
    v14[4] = v16;
    long long v17 = *(_OWORD *)&v27[80];
    void v14[5] = *(_OWORD *)&v27[64];
    v14[6] = v17;
    long long v18 = *(_OWORD *)&v27[16];
    v14[1] = *(_OWORD *)v27;
    v14[2] = v18;
    *(void *)__int16 v14 = &buf;
    *((void *)v14 + 1) = &buf;
    *(void *)&long long v31 = v14;
    uint64_t buf = (uint64_t)v14;
    *((void *)&v31 + 1) = 1;
    sub_100C41AEC(a1);
    sub_100C41644((uint64_t *)a1, (uint64_t)&buf);
    sub_100C3E2C4((unsigned __int8 *)a1, 0);
    sub_100C3DEA0(a1);
    sub_1003B2350(&buf);
  }
  *(void *)(a1 + 8) = [objc_msgSend(*(id *)a1, "vendor", v13) proxyForService:@"CLSimulatedLocationProvider"];
  [(*(id *)a1) vendor] proxyForService:@"CLWifiLocationProvider"];
  [*(id *)a1 vendor] proxyForService:@"CLAccessoryLocationProvider"];
  *(void *)(a1 + 32) = [objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLGnssProvider"];
  [*(id *)a1 vendor] proxyForService:@"CLUnifiedCellLocationProvider"];
  BOOL v26 = 0;
  *(unsigned char *)(a1 + 1744) = 0;
  sub_1000C7F88(&buf);
  int v19 = sub_1000D2988(buf, "InterpretLifeSpanAsCourseAccuracyInSimulation", &v26);
  if ((void)v31) {
    sub_1000DB0A0((std::__shared_weak_count *)v31);
  }
  if (v19) {
    *(unsigned char *)(a1 + 1744) = v26;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022EED90);
  }
  int v20 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *(unsigned __int8 *)(a1 + 1744);
    LODWORD(buf) = 67240192;
    HIDWORD(buf) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "SimulationController,InterpretLifeSpanAsCourseAccuracyInSimulation,%{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022EED90);
    }
    int v23 = *(unsigned __int8 *)(a1 + 1744);
    LODWORD(v34) = 67240192;
    HIDWORD(v34) = v23;
    unint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSimulationController::CLSimulationController(id<CLIntersiloUniverse>)", "%s\n", v24);
    if (v24 != (char *)&buf) {
      free(v24);
    }
  }
  return a1;
}

void sub_100C3FA00(_Unwind_Exception *a1)
{
  sub_1003B2350(v1);
  _Unwind_Resume(a1);
}

void sub_100C3FA88(uint64_t a1)
{
}

void sub_100C3FA90(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    char v2 = (double *)(a1 + 404);
    if (*(double *)(a1 + 420) >= 0.0) {
      goto LABEL_8;
    }
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    uint64_t v3 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Nowhere to go; not preparing next location\"}",
        buf,
        0x12u);
    }
    sub_100C41DB4(a1);
    if (v2[2] >= 0.0)
    {
LABEL_8:
      *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 384);
      long long v4 = *(_OWORD *)(a1 + 356);
      long long v5 = *(_OWORD *)(a1 + 372);
      long long v6 = *(_OWORD *)(a1 + 324);
      long long v61 = *(_OWORD *)(a1 + 340);
      long long v62 = v4;
      v63[0] = v5;
      long long v7 = *(_OWORD *)(a1 + 292);
      long long v8 = *(_OWORD *)(a1 + 308);
      long long v9 = *(_OWORD *)(a1 + 260);
      *(_OWORD *)__int16 v60 = *(_OWORD *)(a1 + 276);
      *(_OWORD *)&v60[16] = v7;
      id v10 = (_OWORD *)(a1 + 400);
      *(_OWORD *)&v60[32] = v8;
      *(_OWORD *)&v60[48] = v6;
      *(_OWORD *)double v59 = *(_OWORD *)(a1 + 244);
      *(_OWORD *)&v59[16] = v9;
      long long v11 = *(_OWORD *)(a1 + 200);
      long long v56 = *(_OWORD *)(a1 + 184);
      long long v57 = v11;
      v58[0] = *(_OWORD *)(a1 + 216);
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(a1 + 228);
      long long v12 = *(_OWORD *)(a1 + 136);
      long long v52 = *(_OWORD *)(a1 + 120);
      long long v53 = v12;
      long long v13 = *(_OWORD *)(a1 + 168);
      long long v54 = *(_OWORD *)(a1 + 152);
      long long v55 = v13;
      long long v14 = *(_OWORD *)(a1 + 104);
      long long v50 = *(_OWORD *)(a1 + 88);
      long long v51 = v14;
      memcpy(buf, (const void *)(a1 + 1120), 0x230uLL);
      memcpy((void *)(a1 + 560), (const void *)(a1 + 1120), 0x230uLL);
      double v15 = *(double *)(a1 + 1696);
      if (v15 <= 0.0 && *(double *)(a1 + 1688) <= 0.0 && *(double *)(a1 + 1704) <= 0.0)
      {
        long long v16 = *(_OWORD *)(a1 + 512);
        long long v61 = *(_OWORD *)(a1 + 496);
        long long v62 = v16;
        v63[0] = *(_OWORD *)(a1 + 528);
        *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 540);
        long long v17 = *(_OWORD *)(a1 + 448);
        *(_OWORD *)__int16 v60 = *(_OWORD *)(a1 + 432);
        *(_OWORD *)&v60[16] = v17;
        long long v18 = *(_OWORD *)(a1 + 480);
        *(_OWORD *)&v60[32] = *(_OWORD *)(a1 + 464);
        *(_OWORD *)&v60[48] = v18;
        long long v19 = *(_OWORD *)(a1 + 416);
        *(_OWORD *)double v59 = *v10;
        *(_OWORD *)&v59[16] = v19;
        if (*(double *)&v60[44] <= 0.0)
        {
          double Current = CFAbsoluteTimeGetCurrent();
        }
        else
        {
          if (qword_1024195A0 != -1) {
            dispatch_once(&qword_1024195A0, &stru_1022EED70);
          }
          int v20 = qword_1024195A8;
          if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = *(void *)(a1 + 80);
            *(_DWORD *)__int16 v64 = 68289538;
            int v65 = 0;
            __int16 v66 = 2082;
            __int16 v67 = "";
            __int16 v68 = 2050;
            *(void *)__int16 v69 = *(void *)&v60[44];
            *(_WORD *)&v69[8] = 2050;
            *(void *)&v69[10] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Adjust next location timestamp\", \"originalTimestamp_s\":\"%{public}.09f\", \"delta_s\":\"%{public}.09f\"}", v64, 0x26u);
          }
          double Current = *(double *)(a1 + 80) + *(double *)&v60[44];
        }
        *(double *)&v60[44] = Current;
        *(double *)&unsigned char buf[24] = Current;
        if (*(double *)((char *)&v51 + 4) > 0.0
          && (*(void *)((unsigned char *)&v51 + 4) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          sub_100C42130((uint64_t)&v50, (uint64_t)v59, (double *)(a1 + 560), (double *)buf);
        }
        sub_100C41848(a1);
        double v15 = *(double *)(a1 + 1696);
      }
      if (v15 > 0.0 || *(double *)(a1 + 1688) > 0.0 || *(double *)(a1 + 1704) > 0.0)
      {
        double v24 = CFAbsoluteTimeGetCurrent();
        double v25 = *(double *)(a1 + 1704);
        if (v25 <= 0.0)
        {
          if (*(double *)(a1 + 1712) <= 0.0) {
            double v25 = 10.0;
          }
          else {
            double v25 = *(double *)(a1 + 1712);
          }
        }
        double v26 = *(double *)(a1 + 1720);
        double v27 = sub_1000A3D9C(*v2, v2[1], *(double *)(a1 + 248), *(double *)(a1 + 256));
        if (qword_1024195A0 != -1) {
          dispatch_once(&qword_1024195A0, &stru_1022EED70);
        }
        double v28 = v24 - v26;
        unint64_t v29 = qword_1024195A8;
        if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int16 v64 = 68290818;
          int v65 = 0;
          __int16 v66 = 2082;
          __int16 v67 = "";
          __int16 v68 = 2050;
          *(double *)__int16 v69 = v25;
          *(_WORD *)&v69[8] = 2050;
          *(double *)&v69[10] = v28;
          __int16 v70 = 2050;
          double v71 = v27;
          __int16 v72 = 1040;
          int v73 = 156;
          __int16 v74 = 2098;
          uint64_t v75 = a1 + 244;
          __int16 v76 = 1040;
          int v77 = 156;
          __int16 v78 = 2098;
          uint64_t v79 = a1 + 400;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"snl\", \"speed\":\"%{public}f\", \"timeElapsed_s\":\"%{public}.09f\", \"distance\":\"%{public}f\", \"currentLocation\":%{public, location:CLDaemonLocation}.*P, \"nextLocation\":%{public, location:CLDaemonLocation}.*P}", v64, 0x50u);
        }
        if (*(double *)(a1 + 264) < 0.0 || v28 * v25 > v27)
        {
          if (qword_1024195A0 != -1) {
            dispatch_once(&qword_1024195A0, &stru_1022EED70);
          }
          long long v31 = qword_1024195A8;
          if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
          {
            double v32 = *v2;
            uint64_t v33 = *((void *)v2 + 1);
            *(_DWORD *)__int16 v64 = 68289538;
            int v65 = 0;
            __int16 v66 = 2082;
            __int16 v67 = "";
            __int16 v68 = 2050;
            *(double *)__int16 v69 = v32;
            *(_WORD *)&v69[8] = 2050;
            *(void *)&v69[10] = v33;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reached location, preparing next\", \"reachedLat\":\"%{public}f\", \"reachedLon\":\"%{public}f\"}", v64, 0x26u);
          }
          long long v34 = *(_OWORD *)(a1 + 512);
          long long v61 = *(_OWORD *)(a1 + 496);
          long long v62 = v34;
          v63[0] = *(_OWORD *)(a1 + 528);
          *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 540);
          long long v35 = *(_OWORD *)(a1 + 448);
          *(_OWORD *)__int16 v60 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)&v60[16] = v35;
          long long v36 = *(_OWORD *)(a1 + 480);
          *(_OWORD *)&v60[32] = *(_OWORD *)(a1 + 464);
          *(_OWORD *)&v60[48] = v36;
          long long v37 = *(_OWORD *)(a1 + 416);
          *(_OWORD *)double v59 = *v10;
          *(_OWORD *)&v59[16] = v37;
          sub_100C41848(a1);
          double v30 = -1.0;
          if (v2[2] >= 0.0) {
            double v30 = sub_1004BDC30(*v2, v2[1], *(double *)&v59[4], *(double *)&v59[12]);
          }
        }
        else
        {
          double v30 = sub_1004BDC30(*v2, v2[1], *(double *)(a1 + 248), *(double *)(a1 + 256));
          sub_1004BDB54((double *)&v59[4], (double *)((unint64_t)v59 | 0xC), *(double *)(a1 + 248), *(double *)(a1 + 256), v28, v25, v30);
        }
        *(double *)&v60[12] = v25;
        *(double *)&v60[28] = v30;
        if (*(double *)((char *)&v51 + 4) > 0.0
          && (*(void *)((unsigned char *)&v51 + 4) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          sub_100C42130((uint64_t)&v50, (uint64_t)v59, (double *)(a1 + 560), (double *)buf);
        }
      }
      if (qword_1024195A0 != -1) {
        dispatch_once(&qword_1024195A0, &stru_1022EED70);
      }
      int v38 = qword_1024195A8;
      if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v64 = 68289539;
        int v65 = 0;
        __int16 v66 = 2082;
        __int16 v67 = "";
        __int16 v68 = 1040;
        *(_DWORD *)__int16 v69 = 156;
        *(_WORD *)&v69[4] = 2097;
        *(void *)&v69[6] = v59;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Notify location is\", \"location\":%{private, location:CLClientLocation}.*P}", v64, 0x22u);
      }
      long long v39 = v62;
      *(_OWORD *)(a1 + 340) = v61;
      *(_OWORD *)(a1 + 356) = v39;
      *(_OWORD *)(a1 + 372) = v63[0];
      *(_OWORD *)(a1 + 384) = *(_OWORD *)((char *)v63 + 12);
      long long v40 = *(_OWORD *)&v60[16];
      *(_OWORD *)(a1 + 276) = *(_OWORD *)v60;
      *(_OWORD *)(a1 + 292) = v40;
      long long v41 = *(_OWORD *)&v60[48];
      *(_OWORD *)(a1 + 308) = *(_OWORD *)&v60[32];
      *(_OWORD *)(a1 + 324) = v41;
      long long v42 = *(_OWORD *)&v59[16];
      *(_OWORD *)(a1 + 244) = *(_OWORD *)v59;
      *(_OWORD *)(a1 + 260) = v42;
      memcpy((void *)(a1 + 1120), buf, 0x230uLL);
      v48[6] = v61;
      v48[7] = v62;
      v49[0] = v63[0];
      *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)((char *)v63 + 12);
      v48[2] = *(_OWORD *)v60;
      v48[3] = *(_OWORD *)&v60[16];
      v48[4] = *(_OWORD *)&v60[32];
      void v48[5] = *(_OWORD *)&v60[48];
      v48[0] = *(_OWORD *)v59;
      v48[1] = *(_OWORD *)&v59[16];
      memcpy(v47, buf, sizeof(v47));
      sub_100C4224C(a1, (uint64_t)v48, v47);
      *(CFAbsoluteTime *)(a1 + 1720) = CFAbsoluteTimeGetCurrent();
      sub_100C41D08((double *)a1);
      double v44 = v43;
      if (qword_1024195A0 != -1) {
        dispatch_once(&qword_1024195A0, &stru_1022EED70);
      }
      uint64_t v45 = qword_1024195A8;
      if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v64 = 68289282;
        int v65 = 0;
        __int16 v66 = 2082;
        __int16 v67 = "";
        __int16 v68 = 2050;
        *(double *)__int16 v69 = v44;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Notification delay\", \"notificationDelay_s\":\"%{public}.09f\"}", v64, 0x1Cu);
      }
      double v46 = 1.79769313e308;
      if (v44 >= 0.0) {
        double v46 = v44;
      }
      [*(id *)(a1 + 1680) setNextFireDelay:v46];
    }
  }
  else
  {
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    int v23 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"SimulationController is trying to sendNextLocation, but simulation is not running\"}", buf, 0x12u);
    }
  }
}

uint64_t sub_100C402E0(uint64_t a1)
{
  [*(id *)(a1 + 1680) invalidate];
  *(void *)(a1 + 1680) = 0;
  sub_1003B2350((void *)(a1 + 48));
  return a1;
}

void sub_100C4034C(uint64_t a1)
{
  if (*(void *)(a1 + 1736))
  {
    char v2 = +[NSInputStream inputStreamWithURL:](NSInputStream, "inputStreamWithURL:");
    if (v2)
    {
      uint64_t v3 = v2;
      [(NSInputStream *)v2 open];
      id v4 = +[NSMutableData data];
      if ([(NSInputStream *)v3 hasBytesAvailable])
      {
        do
        {
          uint64_t v5 = [(NSInputStream *)v3 read:buf maxLength:1024];
          if (v5 >= 1) {
            [v4 appendBytes:buf length:v5];
          }
          unsigned __int8 v6 = [(NSInputStream *)v3 hasBytesAvailable];
          if (v5 >= 0) {
            unsigned __int8 v7 = v6;
          }
          else {
            unsigned __int8 v7 = 0;
          }
        }
        while ((v7 & 1) != 0);
      }
      [(NSInputStream *)v3 close];
    }
    else
    {
      if (qword_1024195A0 != -1) {
        dispatch_once(&qword_1024195A0, &stru_1022EED70);
      }
      id v10 = qword_1024195A8;
      if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = *(void *)(a1 + 1736);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to read simulation from url\", \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1024195A0 != -1) {
          dispatch_once(&qword_1024195A0, &stru_1022EED70);
        }
      }
      long long v12 = qword_1024195A8;
      if (os_signpost_enabled((os_log_t)qword_1024195A8))
      {
        uint64_t v13 = *(void *)(a1 + 1736);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v13;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to read simulation from url", "{\"msg%{public}.0s\":\"Failed to read simulation from url\", \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      id v4 = 0;
    }
    CFDictionaryRef v14 = (const __CFDictionary *)CFPropertyListCreateWithData(kCFAllocatorDefault, (CFDataRef)v4, 0, 0, 0);
    CFDictionaryRef v15 = v14;
    if (v14 && (CFTypeID v16 = CFGetTypeID(v14), v16 == CFDictionaryGetTypeID()))
    {
      Value = CFDictionaryGetValue(v15, @"Locations");
      CFTypeRef cf = CFDictionaryGetValue(v15, @"Options");
      if (cf) {
        CFRetain(cf);
      }
      if (Value)
      {
        CFRetain(Value);
        CFRelease(v15);
        CFTypeID v18 = CFGetTypeID(Value);
        if (v18 == CFArrayGetTypeID())
        {
          if (!cf || (CFTypeID v19 = CFGetTypeID(cf), v19 == CFDictionaryGetTypeID()))
          {
            if (qword_1024195A0 != -1) {
              dispatch_once(&qword_1024195A0, &stru_1022EED70);
            }
            int v20 = qword_1024195A8;
            if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
            {
              CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
              uint64_t v22 = *(void *)(a1 + 1736);
              *(_DWORD *)uint64_t buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2050;
              *(void *)&buf[20] = Count;
              *(_WORD *)&buf[28] = 2114;
              *(void *)&buf[30] = v22;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Applying new simulation scenario\", \"locationCount\":%{public}ld, \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x26u);
            }
            int v68 = *(unsigned __int8 *)(a1 + 72);
            if (*(unsigned char *)(a1 + 72)) {
              sub_100C3DCA4(a1);
            }
            sub_100C413D4(a1, 0);
            CFIndex v23 = 0;
            v73[0] = v73;
            v73[1] = v73;
            uint64_t v74 = 0;
            while (1)
            {
              if (CFArrayGetCount((CFArrayRef)Value) <= v23)
              {
                CFRelease(Value);
                sub_100C41644((uint64_t *)a1, (uint64_t)v73);
                __int16 valuePtr = 0;
                *(void *)uint64_t v75 = 0;
                uint64_t v70 = 0;
                double v71 = 0.0;
                if (cf)
                {
                  long long v54 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationDeliveryBehavior");
                  long long v55 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationRepeatBehavior");
                  long long v56 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationInterval");
                  long long v57 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationSpeed");
                  __int16 v58 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationIntermediateDistance");
                  if (v54)
                  {
                    CFTypeID v59 = CFGetTypeID(v54);
                    if (v59 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v54, kCFNumberSInt8Type, (char *)&valuePtr + 1)) {
                        sub_100C3E2C4((unsigned __int8 *)a1, HIBYTE(valuePtr));
                      }
                    }
                  }
                  if (v55)
                  {
                    CFTypeID v60 = CFGetTypeID(v55);
                    if (v60 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v55, kCFNumberSInt8Type, &valuePtr))
                      {
                        if (qword_1024195A0 != -1) {
                          dispatch_once(&qword_1024195A0, &stru_1022EED70);
                        }
                        long long v61 = qword_1024195A8;
                        if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(void *)&buf[20] = valuePtr;
                          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationRepeatBehavior\":%{public, location:CLSimulationLocationRepeatBehavior}lld}", buf, 0x1Cu);
                        }
                        sub_100C3E3E8(a1, valuePtr);
                      }
                    }
                  }
                  if (v56)
                  {
                    CFTypeID v62 = CFGetTypeID(v56);
                    if (v62 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v56, kCFNumberDoubleType, v75))
                      {
                        if (qword_1024195A0 != -1) {
                          dispatch_once(&qword_1024195A0, &stru_1022EED70);
                        }
                        int v63 = qword_1024195A8;
                        if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(void *)&buf[20] = *(void *)v75;
                          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationInterval\":\"%{public}f\"}", buf, 0x1Cu);
                        }
                        sub_100C3E64C(a1, (double *)v75);
                      }
                    }
                  }
                  if (v57)
                  {
                    CFTypeID v64 = CFGetTypeID(v57);
                    if (v64 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v57, kCFNumberDoubleType, &v71))
                      {
                        if (qword_1024195A0 != -1) {
                          dispatch_once(&qword_1024195A0, &stru_1022EED70);
                        }
                        int v65 = qword_1024195A8;
                        if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(double *)&buf[20] = v71;
                          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationTravellingSpeed\":\"%{public}f\"}", buf, 0x1Cu);
                        }
                        sub_100C3E780(a1, &v71);
                      }
                    }
                  }
                  if (v58)
                  {
                    CFTypeID v66 = CFGetTypeID(v58);
                    if (v66 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v58, kCFNumberDoubleType, &v70))
                      {
                        if (qword_1024195A0 != -1) {
                          dispatch_once(&qword_1024195A0, &stru_1022EED70);
                        }
                        __int16 v67 = qword_1024195A8;
                        if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(void *)&buf[20] = v70;
                          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"intermediateDistance\":\"%{public}f\"}", buf, 0x1Cu);
                        }
                        sub_100C3E518(a1, (double *)&v70);
                      }
                    }
                  }
                  CFRelease(cf);
                }
                if (v68) {
                  sub_100C3DEA0(a1);
                }
                sub_1003B2350(v73);
                return;
              }
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v23);
              double v25 = ValueAtIndex;
              if (ValueAtIndex && (CFTypeID v26 = CFGetTypeID(ValueAtIndex), v26 == CFDataGetTypeID()))
              {
                id v27 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v25 error:0];
                if (v27 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                {
                  [v27 clientLocation];
                  long long v86 = v79;
                  long long v87 = v80;
                  v88[0] = v81[0];
                  *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)((char *)v81 + 12);
                  *(_OWORD *)&buf[32] = *(_OWORD *)&v75[32];
                  long long v83 = v76;
                  long long v84 = v77;
                  long long v85 = v78;
                  *(_OWORD *)uint64_t buf = *(_OWORD *)v75;
                  *(_OWORD *)&buf[16] = *(_OWORD *)&v75[16];
                  if (*(unsigned char *)(a1 + 1744))
                  {
                    *(void *)((char *)&v84 + 4) = *((void *)&v85 + 1);
                    *((void *)&v85 + 1) = 0x4014000000000000;
                  }
                  if (qword_1024195A0 != -1) {
                    dispatch_once(&qword_1024195A0, &stru_1022EED70);
                  }
                  double v28 = qword_1024195A8;
                  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)uint64_t v75 = 68289539;
                    *(_DWORD *)&v75[4] = 0;
                    *(_WORD *)&v75[8] = 2082;
                    *(void *)&v75[10] = "";
                    *(_WORD *)&v75[18] = 1040;
                    *(_DWORD *)&v75[20] = 156;
                    *(_WORD *)&v75[24] = 2097;
                    *(void *)&v75[26] = buf;
                    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Appending location\", \"location\":%{private, location:CLClientLocation}.*P}", v75, 0x22u);
                  }
                  unint64_t v29 = operator new(0xB0uLL);
                  long long v30 = v87;
                  v29[7] = v86;
                  v29[8] = v30;
                  v29[9] = v88[0];
                  *(_OWORD *)((char *)v29 + 156) = *(_OWORD *)((char *)v88 + 12);
                  long long v31 = v83;
                  v29[3] = *(_OWORD *)&buf[32];
                  v29[4] = v31;
                  long long v32 = v85;
                  void v29[5] = v84;
                  v29[6] = v32;
                  long long v33 = *(_OWORD *)&buf[16];
                  v29[1] = *(_OWORD *)buf;
                  v29[2] = v33;
                  uint64_t v34 = v73[0];
                  *(void *)unint64_t v29 = v73[0];
                  *((void *)v29 + 1) = v73;
                  *(void *)(v34 + 8) = v29;
                  v73[0] = v29;
                  ++v74;
                }
                else
                {
                  if (qword_1024195A0 != -1) {
                    dispatch_once(&qword_1024195A0, &stru_1022EED70);
                  }
                  long long v42 = qword_1024195A8;
                  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_FAULT))
                  {
                    double v43 = (objc_class *)objc_opt_class();
                    double v44 = [NSStringFromClass(v43) UTF8String];
                    uint64_t v45 = *(void *)(a1 + 1736);
                    *(_DWORD *)uint64_t buf = 68289794;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v23;
                    *(_WORD *)&unsigned char buf[24] = 2082;
                    *(void *)&buf[26] = v44;
                    *(_WORD *)&buf[34] = 2114;
                    *(void *)&buf[36] = v45;
                    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{public}d, \"incorrectType\":%{public, location:escape_only}s, \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x2Cu);
                    if (qword_1024195A0 != -1) {
                      dispatch_once(&qword_1024195A0, &stru_1022EED70);
                    }
                  }
                  uint64_t v46 = qword_1024195A8;
                  if (os_signpost_enabled((os_log_t)qword_1024195A8))
                  {
                    unint64_t v47 = (objc_class *)objc_opt_class();
                    unint64_t v48 = [NSStringFromClass(v47) UTF8String];
                    uint64_t v49 = *(void *)(a1 + 1736);
                    *(_DWORD *)uint64_t buf = 68289794;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v23;
                    *(_WORD *)&unsigned char buf[24] = 2082;
                    *(void *)&buf[26] = v48;
                    *(_WORD *)&buf[34] = 2114;
                    *(void *)&buf[36] = v49;
                    long long v39 = v46;
                    long long v40 = "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{pu"
                          "blic}d, \"incorrectType\":%{public, location:escape_only}s, \"scenarioURL\":%{public, location:escape_only}@}";
                    uint32_t v41 = 44;
                    goto LABEL_67;
                  }
                }
              }
              else
              {
                if (qword_1024195A0 != -1) {
                  dispatch_once(&qword_1024195A0, &stru_1022EED70);
                }
                long long v35 = qword_1024195A8;
                if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_FAULT))
                {
                  uint64_t v36 = *(void *)(a1 + 1736);
                  *(_DWORD *)uint64_t buf = 68289538;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v23;
                  *(_WORD *)&unsigned char buf[24] = 2114;
                  *(void *)&buf[26] = v36;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{public}d, \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x22u);
                  if (qword_1024195A0 != -1) {
                    dispatch_once(&qword_1024195A0, &stru_1022EED70);
                  }
                }
                uint64_t v37 = qword_1024195A8;
                if (os_signpost_enabled((os_log_t)qword_1024195A8))
                {
                  uint64_t v38 = *(void *)(a1 + 1736);
                  *(_DWORD *)uint64_t buf = 68289538;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v23;
                  *(_WORD *)&unsigned char buf[24] = 2114;
                  *(void *)&buf[26] = v38;
                  long long v39 = v37;
                  long long v40 = "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{publ"
                        "ic}d, \"scenarioURL\":%{public, location:escape_only}@}";
                  uint32_t v41 = 34;
LABEL_67:
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "location from scenario is of incorrect format", v40, buf, v41);
                }
              }
              ++v23;
            }
          }
        }
      }
      else
      {
        CFRelease(v15);
      }
      if (qword_1024195A0 != -1) {
        dispatch_once(&qword_1024195A0, &stru_1022EED70);
      }
      long long v52 = qword_1024195A8;
      if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get locations array for simulation scenario\"}", buf, 0x12u);
        if (qword_1024195A0 != -1) {
          dispatch_once(&qword_1024195A0, &stru_1022EED70);
        }
      }
      long long v53 = qword_1024195A8;
      if (os_signpost_enabled((os_log_t)qword_1024195A8))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get locations array for simulation scenario", "{\"msg%{public}.0s\":\"Couldn't get locations array for simulation scenario\"}", buf, 0x12u);
      }
      if (Value) {
        CFRelease(Value);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      if (qword_1024195A0 != -1) {
        dispatch_once(&qword_1024195A0, &stru_1022EED70);
      }
      long long v50 = qword_1024195A8;
      if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't parse simulation scenario data\"}", buf, 0x12u);
        if (qword_1024195A0 != -1) {
          dispatch_once(&qword_1024195A0, &stru_1022EED70);
        }
      }
      long long v51 = qword_1024195A8;
      if (os_signpost_enabled((os_log_t)qword_1024195A8))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't parse simulation scenario data", "{\"msg%{public}.0s\":\"Couldn't parse simulation scenario data\"}", buf, 0x12u);
      }
      if (v15) {
        CFRelease(v15);
      }
    }
  }
  else
  {
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    long long v8 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempt to start scenario, but no scenario is loaded!\"}", buf, 0x12u);
      if (qword_1024195A0 != -1) {
        dispatch_once(&qword_1024195A0, &stru_1022EED70);
      }
    }
    long long v9 = qword_1024195A8;
    if (os_signpost_enabled((os_log_t)qword_1024195A8))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempt to start scenario, but no scenario is loaded!", "{\"msg%{public}.0s\":\"Attempt to start scenario, but no scenario is loaded!\"}", buf, 0x12u);
    }
  }
}

void sub_100C41398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1003B2350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100C413D4(uint64_t a1, int a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  id v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    CFDictionaryRef v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Clearing all pending locations and settings\"}", buf, 0x12u);
  }
  sub_1003B2350((void *)(a1 + 48));
  *(_DWORD *)(a1 + 88) = 0xFFFF;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 108) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 140) = _Q0;
  *(_OWORD *)(a1 + 156) = _Q0;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 204) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 212) = 0x7FFFFFFF;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = 0xFFFF;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 272) = xmmword_101D1C570;
  long long v11 = _Q0;
  *(_OWORD *)(a1 + 288) = _Q0;
  *(_OWORD *)(a1 + 304) = _Q0;
  *(void *)(a1 + 320) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 332) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 356) = 0;
  *(void *)(a1 + 340) = 0;
  *(void *)(a1 + 348) = 0;
  *(void *)(a1 + 360) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 368) = 0x7FFFFFFF;
  *(void *)(a1 + 380) = 0;
  *(void *)(a1 + 388) = 0;
  *(void *)(a1 + 372) = 0;
  *(unsigned char *)(a1 + 396) = 0;
  memcpy((void *)(a1 + 1120), &unk_101D216A0, 0x230uLL);
  memcpy((void *)(a1 + 560), &unk_101D216A0, 0x230uLL);
  *(_DWORD *)(a1 + 400) = 0xFFFF;
  *(void *)(a1 + 404) = 0;
  *(void *)(a1 + 412) = 0;
  *(_OWORD *)(a1 + 420) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 436) = v11;
  *(_OWORD *)(a1 + 452) = v11;
  *(_OWORD *)(a1 + 468) = v11;
  *(_DWORD *)(a1 + 484) = 0;
  *(void *)(a1 + 488) = 0xBFF0000000000000;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 516) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(void *)(a1 + 1688) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1696) = v11;
  *(void *)(a1 + 1720) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 1728) = 256;
  if (a2)
  {
    id v10 = *(const void **)(a1 + 1736);
    if (v10) {
      CFRelease(v10);
    }
    *(void *)(a1 + 1736) = 0;
  }
}

uint64_t *sub_100C41644(uint64_t *result, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    char v2 = result;
    double result = sub_100C429EC((uint64_t)(result + 6), result + 6, *(void *)(a2 + 8), a2);
    if (*((unsigned char *)v2 + 72))
    {
      if (*(double *)((char *)v2 + 420) < 0.0)
      {
        return (uint64_t *)sub_100C416B8((id *)v2);
      }
    }
  }
  return result;
}

id *sub_100C416B8(id *result)
{
  if (*((unsigned char *)result + 72))
  {
    uint64_t v1 = (uint64_t)result;
    [objc_msgSend(objc_msgSend(objc_msgSend(*result, "vendor"), "proxyForService:", @"CLLocationController"), "syncgetLocation:", result + 50];
    long long v2 = *(_OWORD *)(v1 + 496);
    long long v3 = *(_OWORD *)(v1 + 528);
    *(_OWORD *)(v1 + 356) = *(_OWORD *)(v1 + 512);
    *(_OWORD *)(v1 + 372) = v3;
    *(_OWORD *)(v1 + 384) = *(_OWORD *)(v1 + 540);
    long long v4 = *(_OWORD *)(v1 + 432);
    long long v5 = *(_OWORD *)(v1 + 464);
    long long v6 = *(_OWORD *)(v1 + 480);
    *(_OWORD *)(v1 + 292) = *(_OWORD *)(v1 + 448);
    *(_OWORD *)(v1 + 308) = v5;
    *(_OWORD *)(v1 + 324) = v6;
    *(_OWORD *)(v1 + 340) = v2;
    long long v7 = *(_OWORD *)(v1 + 416);
    *(_OWORD *)(v1 + 244) = *(_OWORD *)(v1 + 400);
    *(_OWORD *)(v1 + 260) = v7;
    *(_OWORD *)(v1 + 276) = v4;
    *(CFAbsoluteTime *)(v1 + 1720) = CFAbsoluteTimeGetCurrent();
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    long long v8 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289539;
      v9[1] = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 1040;
      int v13 = 156;
      __int16 v14 = 2097;
      uint64_t v15 = v1 + 400;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"next location\", \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)v9, 0x22u);
    }
    *(void *)(v1 + 80) = 0;
    sub_100C41848(v1);
    *(CFAbsoluteTime *)(v1 + 80) = CFAbsoluteTimeGetCurrent() - *(double *)(v1 + 476);
    return (id *)[*(id *)(v1 + 1680) setNextFireDelay:0.0];
  }
  return result;
}

void sub_100C41848(uint64_t a1)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  long long v2 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
  {
    int v25 = 68289026;
    int v26 = 0;
    __int16 v27 = 2082;
    double v28 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Preparing next location\"}", (uint8_t *)&v25, 0x12u);
  }
  long long v3 = *(_OWORD *)(a1 + 512);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 496);
  *(_OWORD *)(a1 + 200) = v3;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 528);
  long long v4 = *(_OWORD *)(a1 + 448);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 432);
  *(_OWORD *)(a1 + 136) = v4;
  long long v5 = *(_OWORD *)(a1 + 480);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 464);
  *(_OWORD *)(a1 + 168) = v5;
  long long v6 = *(_OWORD *)(a1 + 416);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 400);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a1 + 540);
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7)
  {
    long long v8 = *(_OWORD **)(a1 + 56);
    long long v9 = v8[2];
    *(_OWORD *)(a1 + 400) = v8[1];
    *(_OWORD *)(a1 + 416) = v9;
    long long v10 = v8[3];
    long long v11 = v8[4];
    long long v12 = v8[6];
    *(_OWORD *)(a1 + 464) = v8[5];
    *(_OWORD *)(a1 + 480) = v12;
    *(_OWORD *)(a1 + 432) = v10;
    *(_OWORD *)(a1 + 448) = v11;
    long long v13 = v8[7];
    long long v14 = v8[8];
    long long v15 = v8[9];
    *(_OWORD *)(a1 + 540) = *(_OWORD *)((char *)v8 + 156);
    *(_OWORD *)(a1 + 512) = v14;
    *(_OWORD *)(a1 + 528) = v15;
    *(_OWORD *)(a1 + 496) = v13;
    uint64_t v16 = *(void *)v8;
    *(void *)(v16 + 8) = *((void *)v8 + 1);
    **((void **)v8 + 1) = v16;
    *(void *)(a1 + 64) = v7 - 1;
    operator delete(v8);
    double v17 = sub_1000A3D9C(*(double *)(a1 + 92), *(double *)(a1 + 100), *(double *)(a1 + 404), *(double *)(a1 + 412));
    double v18 = *(double *)(a1 + 476) - *(double *)(a1 + 164);
    if (v18 <= 0.0) {
      *(void *)(a1 + 1712) = 0xBFF0000000000000;
    }
    else {
      *(double *)(a1 + 1712) = v17 / v18;
    }
  }
  else
  {
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    CFTypeID v19 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
    {
      int v25 = 68289026;
      int v26 = 0;
      __int16 v27 = 2082;
      double v28 = "";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"No more pending locations\"}", (uint8_t *)&v25, 0x12u);
    }
    *(_DWORD *)(a1 + 400) = 0xFFFF;
    *(void *)(a1 + 412) = 0;
    *(void *)(a1 + 404) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 420) = xmmword_101D1C320;
    *(_OWORD *)(a1 + 436) = _Q1;
    *(_OWORD *)(a1 + 452) = _Q1;
    *(_OWORD *)(a1 + 468) = _Q1;
    *(_DWORD *)(a1 + 484) = 0;
    *(void *)(a1 + 496) = 0;
    *(void *)(a1 + 504) = 0;
    *(void *)(a1 + 488) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 512) = 0;
    *(void *)(a1 + 516) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
    *(void *)(a1 + 528) = 0;
    *(void *)(a1 + 544) = 0;
    *(void *)(a1 + 536) = 0;
    *(unsigned char *)(a1 + 552) = 0;
  }
}

void sub_100C41AEC(uint64_t a1)
{
  long long v2 = *(const void **)(a1 + 1736);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1736) = 0;
    sub_100C413D4(a1, 1);
  }
}

id sub_100C41B40(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLLocationController"), "setSimulationEnabled:", *(unsigned __int8 *)(a1 + 72)];
  id v2 = [[objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLFenceManager"];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);

  return _[v2 setIsSimulatingLocation:v3];
}

void sub_100C41BA4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v13, a2);
  sub_1000E9354(v12);
  sub_1000E9354(v11);
  if (v13 != v14)
  {
    uint64_t v3 = v13 + 24;
    do
    {
      uint64_t v4 = v3 - 24;
      sub_100914C54(v3 - 24, (uint64_t)v10);
      long long v5 = (const char *)v3;
      if (*(char *)(v3 + 23) < 0) {
        long long v5 = *(const char **)v3;
      }
      uint64_t v6 = sub_1000E9358((uint64_t)v10);
      sub_1000EA8A4((uint64_t)v11, v5, v6);
      sub_10013F3C4(v10);
      v3 += 248;
    }
    while (v4 + 248 != v14);
  }
  uint64_t v7 = sub_1000E9358((uint64_t)v11);
  sub_1000EA8A4((uint64_t)v12, "kCLConnectionMessageCircularRegionKey", v7);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = sub_1000E9358((uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, v9);
  sub_10013F3C4(v11);
  sub_10013F3C4(v12);
  v12[0] = (void **)&v13;
  sub_10008DF5C(v12);
}

void sub_100C41CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  a14 = (void **)&a16;
  sub_10008DF5C(&a14);
  _Unwind_Resume(a1);
}

void sub_100C41D08(double *a1)
{
  if (a1[212] <= 0.0 && a1[211] <= 0.0 && a1[213] <= 0.0 && *(double *)((char *)a1 + 420) >= 0.0) {
    CFAbsoluteTimeGetCurrent();
  }
}

CFAbsoluteTime sub_100C41DB4(uint64_t a1)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  id v2 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 1729);
    uint64_t buf = 68289282;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2050;
    uint64_t v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Dealing with no more locations\", \"repeatBehavior\":%{public, location:CLSimulationLocationRepeatBehavior}lld}", (uint8_t *)&buf, 0x1Cu);
  }
  int v5 = *(unsigned __int8 *)(a1 + 1729);
  if (v5 == 2)
  {
    if (*(void *)(a1 + 1736))
    {
      id v12 = [*(id *)a1 silo];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100C42128;
      v17[3] = &unk_1022A3020;
      v17[4] = a1;
      [v12 async:v17];
    }
  }
  else if (v5 == 1)
  {
    long long v13 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 512) = v13;
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 540) = *(_OWORD *)(a1 + 228);
    long long v14 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 448) = v14;
    long long v15 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 480) = v15;
    long long v16 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a1 + 416) = v16;
    CFAbsoluteTime result = CFAbsoluteTimeGetCurrent() + 1.0;
    *(CFAbsoluteTime *)(a1 + 476) = result;
  }
  else if (!*(unsigned char *)(a1 + 1729))
  {
    *(_DWORD *)(a1 + 400) = 0xFFFF;
    *(void *)(a1 + 412) = 0;
    *(void *)(a1 + 404) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 420) = xmmword_101D1C320;
    *(_OWORD *)(a1 + 436) = _Q1;
    *(_OWORD *)(a1 + 452) = _Q1;
    *(_OWORD *)(a1 + 468) = _Q1;
    *(_DWORD *)(a1 + 484) = 0;
    *(void *)(a1 + 496) = 0;
    *(void *)(a1 + 504) = 0;
    *(void *)(a1 + 488) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 512) = 0;
    *(void *)(a1 + 516) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
    *(void *)(a1 + 528) = 0;
    *(void *)(a1 + 544) = 0;
    *(void *)(a1 + 536) = 0;
    *(unsigned char *)(a1 + 552) = 0;
    id v11 = [*(id *)a1 silo];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100C4202C;
    v18[3] = &unk_1022A3020;
    v18[4] = a1;
    [v11 afterInterval:v18 async:10.0];
  }
  return result;
}

void sub_100C4202C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022EED70);
  }
  id v2 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    int v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sending appropriate location unavailable notification\"}", (uint8_t *)v3, 0x12u);
  }
  if (*(double *)(v1 + 420) < 0.0 && !*(unsigned char *)(v1 + 1728)) {
    [*(id *)(v1 + 8) sendSimulatedLocationUnavailable];
  }
}

void sub_100C42128(uint64_t a1)
{
}

double sub_100C42130(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  a4[1] = sub_1000A3D9C(*(double *)(a1 + 4), *(double *)(a1 + 12), *(double *)(a2 + 4), *(double *)(a2 + 12));
  double v8 = *(double *)(a1 + 76);
  long long v28 = *(_OWORD *)(a1 + 4);
  double v9 = *(double *)(a1 + 20);
  double v27 = v8;
  double v29 = v9;
  uint64_t v10 = *(void *)(a1 + 60);
  uint64_t v30 = *(void *)(a1 + 44);
  uint64_t v31 = v10;
  long long v32 = *(_OWORD *)(a1 + 28);
  uint64_t v11 = *(void *)(a1 + 68);
  uint64_t v33 = *(void *)(a1 + 52);
  uint64_t v34 = v11;
  double v35 = v9 * (v9 * 2.99573227);
  double v36 = v35;
  uint64_t v37 = 0;
  double v16 = *(double *)(a2 + 76);
  long long v17 = *(_OWORD *)(a2 + 4);
  uint64_t v12 = *(void *)(a2 + 44);
  double v18 = *(double *)(a2 + 20);
  uint64_t v13 = *(void *)(a2 + 60);
  uint64_t v19 = v12;
  uint64_t v20 = v13;
  long long v21 = *(_OWORD *)(a2 + 28);
  uint64_t v14 = *(void *)(a2 + 68);
  uint64_t v22 = *(void *)(a2 + 52);
  uint64_t v23 = v14;
  double v24 = v18 * (v18 * 2.99573227);
  double v25 = v24;
  uint64_t v26 = 0;
  a4[2] = sub_1010A0588(&v27, &v16, v16 - v8);
  double result = *a3 + a4[1];
  *a4 = result;
  return result;
}

id sub_100C4224C(uint64_t a1, uint64_t a2, CFAbsoluteTime *a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022EEDB0);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a2 + 4);
    uint64_t v8 = *(void *)(a2 + 12);
    uint64_t v9 = *(void *)(a2 + 20);
    uint64_t v10 = *(void *)(a2 + 76);
    CFAbsoluteTime v12 = *a3;
    uint64_t v11 = *((void *)a3 + 1);
    uint64_t v13 = *((void *)a3 + 2);
    uint64_t v14 = *((void *)a3 + 3);
    *(_DWORD *)uint64_t buf = 134285313;
    *(void *)long long v61 = v7;
    *(_WORD *)&unsigned char v61[8] = 2049;
    *(void *)&v61[10] = v8;
    __int16 v62 = 2050;
    uint64_t v63 = v9;
    __int16 v64 = 2050;
    uint64_t v65 = v10;
    __int16 v66 = 2050;
    uint64_t v67 = v11;
    __int16 v68 = 2050;
    uint64_t v69 = v13;
    __int16 v70 = 2050;
    CFAbsoluteTime v71 = v12;
    __int16 v72 = 2050;
    uint64_t v73 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@ClxSimulated, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, time, %{public}.1f, deltaDistance, %{public}.1f, deltaDistanceAccuracy, %{public}.1f, odometer, %{public}.1f, timestampGps, %{public}.1f", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022EEDB0);
    }
    uint64_t v30 = *(void *)(a2 + 4);
    uint64_t v31 = *(void *)(a2 + 12);
    uint64_t v32 = *(void *)(a2 + 20);
    uint64_t v33 = *(void *)(a2 + 76);
    uint64_t v35 = *(void *)a3;
    uint64_t v34 = *((void *)a3 + 1);
    uint64_t v36 = *((void *)a3 + 2);
    uint64_t v37 = *((void *)a3 + 3);
    int v44 = 134285313;
    uint64_t v45 = v30;
    __int16 v46 = 2049;
    uint64_t v47 = v31;
    __int16 v48 = 2050;
    uint64_t v49 = v32;
    __int16 v50 = 2050;
    uint64_t v51 = v33;
    __int16 v52 = 2050;
    uint64_t v53 = v34;
    __int16 v54 = 2050;
    uint64_t v55 = v36;
    __int16 v56 = 2050;
    uint64_t v57 = v35;
    __int16 v58 = 2050;
    uint64_t v59 = v37;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  if (*(unsigned char *)(a1 + 1728) == 1)
  {
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    uint64_t v20 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Considering location type for location delivery", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195A0 != -1) {
        dispatch_once(&qword_1024195A0, &stru_1022EED70);
      }
      LOWORD(v44) = 0;
      long long v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    CFStringRef v19 = @"CLNmeaProvider";
    switch(*(_DWORD *)(a2 + 96))
    {
      case 1:
      case 9:
        if (qword_1024195A0 != -1) {
          dispatch_once(&qword_1024195A0, &stru_1022EED70);
        }
        long long v21 = qword_1024195A8;
        if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "CLGnssProvider will be use as location provider", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024195A0 != -1) {
            dispatch_once(&qword_1024195A0, &stru_1022EED70);
          }
          LOWORD(v44) = 0;
          long long v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)", "%s\n", v40);
          if (v40 != (char *)buf) {
            free(v40);
          }
        }
        CFStringRef v19 = @"CLGnssProvider";
        goto LABEL_29;
      case 2:
        goto LABEL_29;
      case 3:
        CFStringRef v19 = @"CLAccessoryLocationProvider";
        goto LABEL_29;
      case 4:
        CFStringRef v19 = @"CLWifiLocationProvider";
        goto LABEL_29;
      case 6:
      case 7:
      case 8:
        CFStringRef v19 = @"CLCellLocationProvider";
        goto LABEL_29;
      default:
        goto LABEL_30;
    }
  }
  if (*(unsigned char *)(a1 + 1728)) {
    goto LABEL_30;
  }
  *(_DWORD *)(a2 + 84) = 100;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a2 + 76) = Current;
  a3[3] = Current;
  if (*(double *)(a1 + 1696) > 0.0 || *(double *)(a1 + 1688) > 0.0 || *(double *)(a1 + 1704) > 0.0)
  {
    double v16 = *(double *)(a2 + 88);
    sub_100C41D08((double *)a1);
    if (v16 < v17)
    {
      sub_100C41D08((double *)a1);
      *(double *)(a2 + 88) = v18 + 1.0;
    }
  }
  CFStringRef v19 = @"CLSimulatedLocationProvider";
LABEL_29:
  id v22 = [[[*(id *)a1 vendor] proxyForService:v19];
  if (!v22)
  {
LABEL_30:
    if (qword_1024195A0 != -1) {
      dispatch_once(&qword_1024195A0, &stru_1022EED70);
    }
    uint64_t v23 = qword_1024195A8;
    if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)long long v61 = 0;
      *(_WORD *)&v61[4] = 2082;
      *(void *)&v61[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"No location provider found. Defaulting to SimulatedLocationProvider\"}", buf, 0x12u);
    }
    id v22 = [objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLSimulatedLocationProvider"];
  }
  *(unsigned char *)(a2 + 152) = 1;
  id v24 = objc_alloc((Class)CLLocation);
  long long v25 = *(_OWORD *)(a2 + 112);
  v42[6] = *(_OWORD *)(a2 + 96);
  v42[7] = v25;
  v43[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)(a2 + 140);
  long long v26 = *(_OWORD *)(a2 + 48);
  v42[2] = *(_OWORD *)(a2 + 32);
  v42[3] = v26;
  long long v27 = *(_OWORD *)(a2 + 80);
  v42[4] = *(_OWORD *)(a2 + 64);
  v42[5] = v27;
  long long v28 = *(_OWORD *)(a2 + 16);
  v42[0] = *(_OWORD *)a2;
  v42[1] = v28;
  memcpy(__dst, a3, sizeof(__dst));
  return [v22 sendSimulatedLocation:[v24 initWithClientLocation:v42 clientLocationPrivate:__dst]];
}

void sub_100C4295C(id a1)
{
  qword_1024195A8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

void sub_100C4298C(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100C429BC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t *sub_100C429EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = (char *)operator new(0xB0uLL);
    uint64_t v9 = v8;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    long long v10 = *(_OWORD *)(a3 + 112);
    long long v11 = *(_OWORD *)(a3 + 128);
    long long v12 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(v8 + 156) = *(_OWORD *)(a3 + 156);
    *((_OWORD *)v8 + 8) = v11;
    *((_OWORD *)v8 + 9) = v12;
    *((_OWORD *)v8 + 7) = v10;
    long long v13 = *(_OWORD *)(a3 + 48);
    long long v14 = *(_OWORD *)(a3 + 64);
    long long v15 = *(_OWORD *)(a3 + 96);
    *((_OWORD *)v8 + 5) = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v8 + 6) = v15;
    *((_OWORD *)v8 + 3) = v13;
    *((_OWORD *)v8 + 4) = v14;
    long long v16 = *(_OWORD *)(a3 + 32);
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v8 + 2) = v16;
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v18 = 1;
    if (v17 != a4)
    {
      CFStringRef v19 = v8;
      do
      {
        uint64_t v8 = (char *)operator new(0xB0uLL);
        *(void *)uint64_t v8 = v19;
        *((void *)v8 + 1) = 0;
        long long v20 = *(_OWORD *)(v17 + 32);
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v17 + 16);
        *((_OWORD *)v8 + 2) = v20;
        long long v21 = *(_OWORD *)(v17 + 48);
        long long v22 = *(_OWORD *)(v17 + 64);
        long long v23 = *(_OWORD *)(v17 + 96);
        *((_OWORD *)v8 + 5) = *(_OWORD *)(v17 + 80);
        *((_OWORD *)v8 + 6) = v23;
        *((_OWORD *)v8 + 3) = v21;
        *((_OWORD *)v8 + 4) = v22;
        long long v24 = *(_OWORD *)(v17 + 112);
        long long v25 = *(_OWORD *)(v17 + 128);
        long long v26 = *(_OWORD *)(v17 + 144);
        *(_OWORD *)(v8 + 156) = *(_OWORD *)(v17 + 156);
        *((_OWORD *)v8 + 8) = v25;
        *((_OWORD *)v8 + 9) = v26;
        *((_OWORD *)v8 + 7) = v24;
        *((void *)v19 + 1) = v8;
        ++v18;
        uint64_t v17 = *(void *)(v17 + 8);
        CFStringRef v19 = v8;
      }
      while (v17 != a4);
    }
    uint64_t v27 = *a2;
    *(void *)(v27 + 8) = v9;
    void *v9 = v27;
    *a2 = (uint64_t)v8;
    *((void *)v8 + 1) = a2;
    *(void *)(a1 + 16) += v18;
    return v9;
  }
  return a2;
}

void sub_100C42B10(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    id v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_100C42B30(_Unwind_Exception *a1)
{
}

void sub_100C42B44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100C42BC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100C42C54(_Unwind_Exception *a1)
{
}

void sub_100C42C6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D89EF0;
      v0[3] = unk_101D89F00;
      v0[4] = xmmword_101D89F10;
      v0[0] = xmmword_101D89ED0;
      v0[1] = unk_101D89EE0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100C42D4C(_Unwind_Exception *a1)
{
}

void sub_100C42D64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100C42E1C(_Unwind_Exception *a1)
{
}

void sub_100C42E34()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100C42EDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100C42EF4()
{
  sub_100134750(qword_102480900, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480900, (void *)&_mh_execute_header);
}

double sub_100C42F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_1022EEDE0;
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 72) = 0;
  return result;
}

void **sub_100C42F90(void **a1)
{
  *a1 = off_1022EEDE0;
  if (*((char *)a1 + 47) < 0) {
    id v2 = a1[4];
  }
  else {
    id v2 = (void *)*((unsigned __int8 *)a1 + 47);
  }
  uint64_t v3 = a1 + 3;
  if (v2)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EEE20);
    }
    __int16 v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      (*((void (**)(void **__return_ptr, void **))*a1 + 3))(__p, a1);
      if (v22 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      uint64_t v6 = a1 + 3;
      if (*((char *)a1 + 47) < 0) {
        uint64_t v6 = *v3;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v14 = 2082;
      long long v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s", buf, 0x16u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EEE20);
      }
      (*((void (**)(unsigned char *__return_ptr, void **))*a1 + 3))(buf, a1);
      if (v16 >= 0) {
        long long v10 = buf;
      }
      else {
        long long v10 = *(unsigned char **)buf;
      }
      long long v11 = a1 + 3;
      if (*((char *)a1 + 47) < 0) {
        long long v11 = *v3;
      }
      int v17 = 136446466;
      uint64_t v18 = v10;
      __int16 v19 = 2082;
      long long v20 = v11;
      long long v12 = (char *)_os_log_send_and_compose_impl();
      if (v16 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLDaemonEmergencyEnablementAssertion::~CLDaemonEmergencyEnablementAssertion()", "%s\n", v12);
      if (v12 != (char *)__p) {
        free(v12);
      }
    }
    id v7 = [objc_msgSend(a1[2], "vendor") proxyForService:@"CLClientManager"];
    uint64_t v8 = a1 + 6;
    if (*((char *)a1 + 71) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    [v7 markClientEmergencyEnablementTransition:0 shouldOverrideDeauthorization:*((unsigned __int8 *)a1 + 72) != 0 forBeneficiary:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8)];
  }
  [a1[10] invalidate];

  a1[10] = 0;
  if (*((char *)a1 + 71) < 0) {
    operator delete(a1[6]);
  }
  if (*((char *)a1 + 47) < 0) {
    operator delete(*v3);
  }
  sub_100426880(a1);
  return a1;
}

void sub_100C432E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100C432F8(void **a1)
{
  sub_100C42F90(a1);

  operator delete();
}

void sub_100C43330(uint64_t a1, uint64_t a2)
{
  __int16 v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 49)
    {
LABEL_7:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EEE20);
      }
      uint64_t v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v7 + 23) >= 0) {
          uint64_t v8 = (const char *)v7;
        }
        else {
          uint64_t v8 = *(const char **)v7;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        __int16 v19 = 2082;
        long long v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning unrecognized message\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    __int16 v4 = (void *)*v4;
  }
  else if (v5 != 49)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "EmergencyEnablementAssertion/kCLConnectionMessage", 0x31uLL)) {
    goto LABEL_7;
  }
  uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: EmergencyEnablementAssertion/kCLConnectionMessage", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EEE20);
  }
  long long v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2082;
    long long v20 = "activity";
    __int16 v21 = 2050;
    uint64_t v22 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"EmergencyEnablementAssertion/kCLConnectionMessage\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  long long v11 = *(CLConnectionMessage **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  v13[0] = v11;
  v13[1] = (CLConnectionMessage *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100C435B0(a1, v13);
  if (v12) {
    sub_1000DB0A0((std::__shared_weak_count *)v12);
  }
  os_activity_scope_leave(&state);
}

void sub_100C43588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11) {
    sub_1000DB0A0(v11);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100C435B0(uint64_t a1, CLConnectionMessage **a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_5;
    }
LABEL_6:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EEE20);
    }
    __int16 v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      int v5 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#warning EmergencyEnablementAssertion already taken by %{public}s", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EEE20);
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
    if (SHIBYTE(v46[0]) >= 0) {
      long long v42 = buf;
    }
    else {
      long long v42 = *(uint8_t **)buf;
    }
    LODWORD(v44.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v46[0]) < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_168;
  }
  if (*(unsigned char *)(a1 + 47)) {
    goto LABEL_6;
  }
LABEL_5:
  if (*(void *)(a1 + 80)) {
    goto LABEL_6;
  }
  sub_100134750(__p, "com.apple.locationd.emergency_enabler");
  char v6 = sub_100C4477C(a1, (uint64_t *)__p);
  char v7 = v6;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v7) {
      goto LABEL_18;
    }
LABEL_25:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EEE20);
    }
    long long v15 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      int v16 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EEE20);
      }
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
      if (SHIBYTE(v46[0]) >= 0) {
        __int16 v17 = buf;
      }
      else {
        __int16 v17 = *(uint8_t **)buf;
      }
      LODWORD(v44.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(*(void **)buf);
      }
LABEL_168:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
LABEL_169:
      if (v18 != __p) {
        free(v18);
      }
      return;
    }
    return;
  }
  if ((v6 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_18:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v9 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  id v10 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
  id v11 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
  if (v10 && (uint64_t v12 = v11) != 0 && v9)
  {
    if ([v9 length])
    {
      long long v13 = (const std::string::value_type *)[v9 UTF8String];
      __int16 v14 = (std::string::size_type *)(a1 + 24);
      std::string::assign((std::string *)(a1 + 24), v13);
      *(unsigned char *)(a1 + 72) = [[Dictionary objectForKeyedSubscript:@"kCLConnectionMessageOverrideDeauthorizationKey"] BOOLValue];
      *(_OWORD *)uint64_t v49 = 0u;
      memset(v50, 0, 19);
      long long v47 = 0u;
      *(_OWORD *)__int16 v48 = 0u;
      *(_OWORD *)uint64_t buf = 0u;
      *(_OWORD *)__int16 v46 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      memset(v54, 0, 27);
      if ([v10 length])
      {
        sub_100134750(&v44, (char *)[v10 UTF8String]);
        sub_1000B7144(&v44, (uint64_t)__p);
      }
      else
      {
        if (![v12 length])
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EEE20);
          }
          uint64_t v37 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v44, a1);
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v38 = &v44;
            }
            else {
              uint64_t v38 = (std::string *)v44.__r_.__value_.__r.__words[0];
            }
            long long v39 = (std::string::size_type *)(a1 + 24);
            if (*(char *)(a1 + 47) < 0) {
              long long v39 = (std::string::size_type *)*v14;
            }
            *(void *)__n128 __p = 68289538;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(void *)&__p[20] = v38;
            __int16 v56 = 2082;
            uint64_t v57 = (void **)v39;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring #CLEEA Assertion requested without explicit beneficiary\", \"RequestedBy\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x26u);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44.__r_.__value_.__l.__data_);
            }
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EEE20);
            }
          }
          long long v40 = qword_102419528;
          if (os_signpost_enabled((os_log_t)qword_102419528))
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v44, a1);
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint32_t v41 = &v44;
            }
            else {
              uint32_t v41 = (std::string *)v44.__r_.__value_.__r.__words[0];
            }
            if (*(char *)(a1 + 47) < 0) {
              __int16 v14 = (std::string::size_type *)*v14;
            }
            *(void *)__n128 __p = 68289538;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(void *)&__p[20] = v41;
            __int16 v56 = 2082;
            uint64_t v57 = (void **)v14;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Ignoring #CLEEA Assertion requested without explicit beneficiary", "{\"msg%{public}.0s\":\"Ignoring #CLEEA Assertion requested without explicit beneficiary\", \"RequestedBy\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x26u);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44.__r_.__value_.__l.__data_);
            }
          }
          if (*(char *)(a1 + 47) < 0)
          {
            **(unsigned char **)(a1 + 24) = 0;
            *(void *)(a1 + 32) = 0;
          }
          else
          {
            *(unsigned char *)(a1 + 24) = 0;
            *(unsigned char *)(a1 + 47) = 0;
          }
          goto LABEL_100;
        }
        sub_100134750(&v44, (char *)[v12 UTF8String]);
        sub_1000B6F5C(&v44, (uint64_t)__p);
      }
      sub_1000B6DC8((uint64_t)buf, (long long *)__p);
      sub_1000064D0((uint64_t)__p);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      CLConnection::getUserName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      sub_1001A5B7C((std::string *)buf, (const std::string *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1000A7FBC((uint64_t)buf, (uint64_t)__p);
      long long v25 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        operator delete(*v25);
      }
      *(_OWORD *)long long v25 = *(_OWORD *)__p;
      *(void *)(a1 + 64) = *(void *)&__p[16];
      if (*(unsigned char *)(a1 + 72)
        && (sub_10000FF54((std::string *)(a1 + 48), (uint64_t)__p), int v26 = v60, sub_1000064D0((uint64_t)__p), !v26))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EEE20);
        }
        uint64_t v31 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v44, a1);
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v32 = &v44;
          }
          else {
            uint64_t v32 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          uint64_t v33 = (void **)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            uint64_t v33 = (void **)*v25;
          }
          uint64_t v34 = a1 + 24;
          if (*(char *)(a1 + 47) < 0) {
            uint64_t v34 = *v14;
          }
          *(void *)__n128 __p = 68289794;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = v32;
          __int16 v56 = 2082;
          uint64_t v57 = v33;
          __int16 v58 = 2082;
          uint64_t v59 = (std::string::size_type *)v34;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLEPTO Assertion requested for a Non SystemService client, not supported\", \"RequestedBy\":%{public, location:escape_only}s, \"BeneficiaryClientKey\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x30u);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EEE20);
          }
        }
        uint64_t v35 = qword_102419528;
        if (os_signpost_enabled((os_log_t)qword_102419528))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v44, a1);
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v36 = &v44;
          }
          else {
            uint64_t v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(a1 + 71) < 0) {
            long long v25 = (void **)*v25;
          }
          if (*(char *)(a1 + 47) < 0) {
            __int16 v14 = (std::string::size_type *)*v14;
          }
          *(void *)__n128 __p = 68289794;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = v36;
          __int16 v56 = 2082;
          uint64_t v57 = v25;
          __int16 v58 = 2082;
          uint64_t v59 = v14;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLEPTO Assertion requested for a Non SystemService client, not supported", "{\"msg%{public}.0s\":\"#CLEPTO Assertion requested for a Non SystemService client, not supported\", \"RequestedBy\":%{public, location:escape_only}s, \"BeneficiaryClientKey\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x30u);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        *(void *)(a1 + 80) = [(CLStreamedLocationProviderAssertion *)[CLStreamedLocationProviderEmergencyEnablementAssertion alloc] initInUniverse:*(void *)(a1 + 16)];
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EEE20);
        }
        uint64_t v27 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
          if (__p[23] >= 0) {
            long long v28 = __p;
          }
          else {
            long long v28 = *(unsigned char **)__p;
          }
          std::string::size_type v29 = a1 + 24;
          if (*(char *)(a1 + 47) < 0) {
            std::string::size_type v29 = *v14;
          }
          LODWORD(v44.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
          WORD2(v44.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s", (uint8_t *)&v44, 0x16u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EEE20);
          }
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v44, a1);
          double v43 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v43);
          if (v43 != __p) {
            free(v43);
          }
        }
        id v30 = [[objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLClientManager"];
        if (*(char *)(a1 + 71) < 0) {
          long long v25 = (void **)*v25;
        }
        [v30 markClientEmergencyEnablementTransition:1 shouldOverrideDeauthorization:*(unsigned __int8 *)(a1 + 72) != 0 forBeneficiary:[NSString stringWithUTF8String:v25]];
      }
LABEL_100:
      if (SHIBYTE(v54[2]) < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v53) < 0) {
        operator delete(*((void **)&v52 + 1));
      }
      if (SBYTE7(v52) < 0) {
        operator delete((void *)v51);
      }
      if ((v50[15] & 0x80000000) != 0) {
        operator delete(v49[1]);
      }
      if (SHIBYTE(v49[0]) < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(v46[1]);
      }
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(*(void **)buf);
      }
      return;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EEE20);
    }
    uint64_t v22 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      long long v23 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "#CLEEA Assertion requested with no reason... ignoring EmergencyEnablementAssertion taken by %{public}s", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EEE20);
      }
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
      if (SHIBYTE(v46[0]) >= 0) {
        long long v24 = buf;
      }
      else {
        long long v24 = *(uint8_t **)buf;
      }
      LODWORD(v44.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(*(void **)buf);
      }
LABEL_58:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
      goto LABEL_169;
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EEE20);
    }
    __int16 v19 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      long long v20 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#CLEEA EmergencyEnablementAssertion taken by %{public}s malformed: lacking required argument(s)", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EEE20);
      }
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(buf, a1);
      if (SHIBYTE(v46[0]) >= 0) {
        __int16 v21 = buf;
      }
      else {
        __int16 v21 = *(uint8_t **)buf;
      }
      LODWORD(v44.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_58;
    }
  }
}

void sub_100C446E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
}

uint64_t sub_100C4477C(uint64_t a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EEE20);
  }
  int v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
    char v6 = *(unsigned char **)__p;
    char v7 = "not entitled";
    if (v19 >= 0) {
      char v6 = __p;
    }
    if (isEntitled) {
      char v7 = "entitled";
    }
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    uint64_t v22 = v6;
    __int16 v23 = 2080;
    long long v24 = v7;
    __int16 v25 = 2080;
    int v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EEE20);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(v14, a1);
    id v10 = (void **)v14[0];
    id v11 = "not entitled";
    if (v15 >= 0) {
      id v10 = v14;
    }
    if (isEntitled) {
      id v11 = "entitled";
    }
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = (uint64_t *)*a2;
    }
    *(_DWORD *)__n128 __p = 136315650;
    *(void *)&__p[4] = v10;
    __int16 v17 = 2080;
    uint64_t v18 = v11;
    __int16 v19 = 2080;
    long long v20 = v12;
    long long v13 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonEmergencyEnablementAssertion::isEntitled(const std::string &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return isEntitled;
}

id sub_100C44A64(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  uint64_t v3 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  [v2 setObject:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3)) forKeyedSubscript:+[CLClientKeyPath clientKey](CLClientKeyPath, "clientKey")];
  CLConnection::getAuditToken(v6, *(CLConnection **)(a1 + 8));
  [v2 setObject:-[CLClientKeyPath clientKey](sub_1000B5784(), "clientKey") forKeyedSubscript:@"NaturalConnectedIdentity"];
  __int16 v4 = (void *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    __int16 v4 = (void *)*v4;
  }
  [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4) forKeyedSubscript:@"Reason"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72))] forKeyedSubscript:@"OverrideDeauthorization"];
  return v2;
}

void sub_100C44B6C(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100C44B9C(uint64_t a1)
{
  if (a1) {
    sub_100C47DFC(a1 - 128);
  }
  else {
    sub_100C47DFC(0);
  }
}

id sub_100C44BAC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100C47F98(v2, a2);
}

void sub_100C44BBC(uint64_t a1, float *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100C48324(v2, a2);
}

void sub_100C44BCC(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = a1 - 128;
  }
  else {
    uint64_t v1 = 0;
  }
  if (*(unsigned char *)(v1 + 146)) {
    sub_100C46570(v1);
  }
}

id sub_100C44BE8(uint64_t a1)
{
  if (a1) {
    return sub_100C48758(a1 - 128);
  }
  else {
    return sub_100C48758(0);
  }
}

id sub_100C44BF8(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100C489C0(v2, a2);
}

id sub_100C44C08(uint64_t a1)
{
  if (a1) {
    return sub_100C48B64(a1 - 128);
  }
  else {
    return sub_100C48B64(0);
  }
}

void sub_100C44C18(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100C48D08(v2, a2);
}

void sub_100C44C28(uint64_t a1, void *a2)
{
}

void sub_100C45138(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[27];
  v1[27] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[26];
  v1[26] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[25];
  v1[25] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1011735FC((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_100C45264(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    int v3 = sub_1011740D8(*(void **)(v1 + 168));
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Timer fired on companion,currentMotionCalsVersion,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    sub_1011740D8(*(void **)(v1 + 168));
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100C4542C(v1);
}

void sub_100C4542C(uint64_t a1)
{
  if ((sub_1011740D8(*(void **)(a1 + 168)) & 0x80000000) == 0 && *(int *)(a1 + 148) >= 1)
  {
    uint64_t v2 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 168)];
    int v3 = v2;
    if (*(int *)(a1 + 148) <= 3)
    {
      if ([(NSMutableDictionary *)v2 objectForKeyedSubscript:@"RawSpeedToKValueTable"])
      {
        [(NSMutableDictionary *)v3 setObject:+[CMPedometerTable convertToCMStrideCalibrationData:[(NSMutableDictionary *)v3 objectForKeyedSubscript:@"RawSpeedToKValueTable"]] forKeyedSubscript:@"StrideCalibrationDataBins"];
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_1022EF0B8);
        }
        uint64_t v4 = qword_102419128;
        if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
        {
          int v5 = *(_DWORD *)(a1 + 148);
          int v6 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)uint64_t buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v5;
          __int16 v22 = 1024;
          int v23 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Phone converted RawSpeedToKValueTable to StrideCalibrationBins to comply with Watch (Major:%d Minor:%d).", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419120 != -1) {
            dispatch_once(&qword_102419120, &stru_1022EF0B8);
          }
          int v13 = *(_DWORD *)(a1 + 148);
          int v14 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)__int16 v17 = 67109376;
          *(_DWORD *)&v17[4] = v13;
          *(_WORD *)&v17[8] = 1024;
          *(_DWORD *)&v17[10] = v14;
          char v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      [(NSMutableDictionary *)v3 removeObjectForKey:@"RawSpeedToKValueTable"];
      [(NSMutableDictionary *)v3 removeObjectForKey:@"StepCadenceToStrideLengthTable"];
    }
    uint64_t v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:v3], 1, 0);
    id v8 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100C46380;
    v16[3] = &unk_1022CA588;
    v16[4] = v7;
    [v8 doAsync:v16];
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    id v9 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      sub_101173A50(v3);
      id v10 = v24 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__int16 v17 = 136315138;
      *(void *)&v17[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Companion sent calibrations to watch: %s", v17, 0xCu);
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      sub_101173A50(v3);
      if (v18 >= 0) {
        id v11 = v17;
      }
      else {
        id v11 = *(unsigned char **)v17;
      }
      int v19 = 136315138;
      long long v20 = v11;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(*(void **)v17);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100C458DC(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF0D8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreCompanion::onPalUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF0D8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreCompanion::onPalUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C45E6C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C45A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C45AB8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF0D8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreCompanion::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF0D8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreCompanion::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C46048(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C45C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C45C98(uint64_t a1)
{
  *(void *)a1 = off_1022EEF70;
  uint64_t v2 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;

  *(void *)(a1 + 176) = 0;
  uint64_t v4 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return sub_1011735FC(a1);
}

void sub_100C45E34(uint64_t a1)
{
  sub_100C45C98(a1);

  operator delete();
}

uint64_t sub_100C45E6C(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v7 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    int v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::onPalUpdateNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(_DWORD *)uint64_t buf = *a4;
  return sub_1001A34E0(a1 + 128, 5, (uint64_t)buf);
}

void sub_100C46048(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v7 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v15) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notification, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (*a3 == 6)
  {
    if (*(unsigned char *)a4)
    {
      *(_DWORD *)uint64_t buf = 0;
      buf[0] = sub_101174434(*(_DWORD *)(a4 + 4), *(_DWORD *)(a4 + 8));
      uint64_t v15 = *(void *)(a4 + 4);
      uint64_t v9 = a1 + 128;
      int v10 = 2;
    }
    else
    {
      uint64_t v9 = a1 + 128;
      int v10 = 3;
    }
    sub_1001A34E0(v9, v10, (uint64_t)buf);
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    char v11 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Unhandled notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

id sub_100C46380(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(120.0, a2, 14, *(void **)(a1 + 32), 300, 0, 0, 0, 1, 0);
}

uint64_t sub_100C463CC(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Device is now unlocked.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreCompanion::deviceUnlocked()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1001A34E0(a1 + 128, 1, (uint64_t)buf);
}

void sub_100C46570(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    int v3 = sub_1011740D8(*(void **)(a1 + 168));
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v3;
    LOWORD(v40) = 1024;
    *(_DWORD *)((char *)&v40 + 2) = sub_101173814(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    int v27 = sub_1011740D8(*(void **)(a1 + 168));
    *(_DWORD *)uint64_t v34 = 67109376;
    *(_DWORD *)&v34[4] = v27;
    *(_WORD *)&v34[8] = 1024;
    *(_DWORD *)&v34[10] = sub_101173814(a1);
    long long v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  uint64_t v4 = sub_1000A6958();
  *(_DWORD *)uint64_t buf = sub_1011740D8(*(void **)(a1 + 168));
  sub_1000EA2A4(v4, @"CalibrationVersion", buf);
  uint64_t v5 = sub_1000A6958();
  *(double *)uint64_t buf = sub_1011741A4(*(void **)(a1 + 168));
  sub_100163398(v5, @"CalibrationTimestamp", buf);
  uint64_t v6 = sub_1000A6958();
  sub_101174138(*(void **)(a1 + 168), buf);
  sub_1004D3820(v6, @"CalibrationUDID", (char *)buf);
  if (SHIBYTE(v41) < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v7 = sub_1000A6958();
  buf[0] = sub_1011743D8(*(void **)(a1 + 168));
  sub_1000EA52C(v7, @"CalibrationResetRequested", buf);
  uint64_t v8 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v8 + 944))(v8);
  *(unsigned char *)(a1 + 146) = 1;
  if (sub_101173814(a1))
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v9 = CMNatalimeterSetUserVo2max;
    *(double *)uint64_t buf = CMNatalimeterSetUserPal;
    uint64_t v40 = CMNatalimeterSetUserVo2max;
    uint64_t v41 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    int v10 = +[NSArray arrayWithObjects:buf count:3];
    id v11 = [(NSArray *)v10 countByEnumeratingWithState:&v30 objects:v38 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v12) {
            objc_enumerationMutation(v10);
          }
          CFStringRef v14 = *(const __CFString **)(*((void *)&v30 + 1) + 8 * i);
          if ([*(id *)(a1 + 168) objectForKeyedSubscript:v14])
          {
            uint64_t v15 = *(void *)(a1 + 192);
            [objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v14) floatValue];
            *(double *)uint64_t buf = v16;
            sub_100163398(v15, v14, buf);
          }
        }
        id v11 = [(NSArray *)v10 countByEnumeratingWithState:&v30 objects:v38 count:16];
      }
      while (v11);
    }
    if (![*(id *)(a1 + 168) objectForKeyedSubscript:v9]) {
      sub_1004CF870(*(void *)(a1 + 192));
    }
    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"])
    {
      +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", [*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"], 1, 0);
      sub_1004D258C(*(void *)(a1 + 192));
    }
    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"])
    {
      +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", [*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"], 1, 0);
      sub_1004D258C(*(void *)(a1 + 192));
    }
    uint64_t v17 = *(void *)(a1 + 192);
    *(_DWORD *)uint64_t buf = sub_1011740D8(*(void **)(a1 + 168));
    sub_1000EA2A4(v17, @"CalibrationVersion", buf);
    uint64_t v18 = *(void *)(a1 + 192);
    sub_101174138(*(void **)(a1 + 168), buf);
    sub_1004D3820(v18, @"CalibrationUDID", (char *)buf);
    if (SHIBYTE(v41) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v19 = *(void *)(a1 + 192);
    *(double *)uint64_t buf = sub_1011741A4(*(void **)(a1 + 168));
    sub_100163398(v19, @"CalibrationTimestamp", buf);
    (*(void (**)(void))(**(void **)(a1 + 192) + 944))(*(void *)(a1 + 192));
    *(unsigned char *)(a1 + 146) = 0;
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    long long v20 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      sub_101173A50(*(void **)(a1 + 168));
      __int16 v21 = v41 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)uint64_t v34 = 136315138;
      *(void *)&v34[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Companion persisted calibrations to disk, fMotionCals = %s", v34, 0xCu);
      if (SHIBYTE(v41) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    sub_101173A50(*(void **)(a1 + 168));
    __int16 v22 = v35 >= 0 ? v34 : *(unsigned char **)v34;
    int v36 = 136315138;
    uint64_t v37 = v22;
    int v23 = (char *)_os_log_send_and_compose_impl();
    if (v35 < 0) {
      operator delete(*(void **)v34);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v23);
    if (v23 == (char *)buf) {
      return;
    }
LABEL_57:
    free(v23);
    return;
  }
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  char v24 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    int v25 = sub_1011740D8(*(void **)(a1 + 168));
    int v26 = sub_101173814(a1);
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v25;
    LOWORD(v40) = 1024;
    *(_DWORD *)((char *)&v40 + 2) = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    int v29 = sub_1011740D8(*(void **)(a1 + 168));
    *(_DWORD *)uint64_t v34 = 67109376;
    *(_DWORD *)&v34[4] = v29;
    *(_WORD *)&v34[8] = 1024;
    *(_DWORD *)&v34[10] = sub_101173814(a1);
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v23);
    if (v23 != (char *)buf) {
      goto LABEL_57;
    }
  }
}

void sub_100C46E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C46E2C(uint64_t a1)
{
  [*(id *)(a1 + 168) removeAllObjects];
  (*(void (**)(void))(**(void **)(a1 + 192) + 936))();
  (*(void (**)(void))(**(void **)(a1 + 200) + 936))();
  sub_10053BF90(&v55);
  uint64_t v2 = std::string::append(&v55, "user.plist");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v46 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (v46 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (sub_1000A569C((const char *)v4))
  {
    uint64_t v44 = 0;
    if (sub_1004D01D8(*(void *)(a1 + 192), @"RawSpeedToKValueTable", (CFTypeRef *)&v44)) {
      [*(id *)(a1 + 168) setObject:sub_101173324(v44) forKeyedSubscript:@"RawSpeedToKValueTable"];
    }
    uint64_t v43 = 0;
    if (sub_1004D01D8(*(void *)(a1 + 192), @"StepCadenceToStrideLengthTable", (CFTypeRef *)&v43))[*(id *)(a1 + 168) setObject:sub_101173324(v43) forKeyedSubscript:@"StepCadenceToStrideLengthTable"]; {
    int v42 = 0x800000;
    }
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v5 = CMNatalimeterSetUserVo2max;
    v55.__r_.__value_.__r.__words[0] = CMNatalimeterSetUserPal;
    v55.__r_.__value_.__l.__size_ = CMNatalimeterSetUserVo2max;
    v55.__r_.__value_.__r.__words[2] = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v6 = +[NSArray arrayWithObjects:&v55 count:3];
    id v7 = [(NSArray *)v6 countByEnumeratingWithState:&v38 objects:v57 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = *(void *)(*((void *)&v38 + 1) + 8 * i);
          *(float *)&double v11 = sub_1004D123C(*(void *)(a1 + 192), v10, (float *)&v42);
          if (v12)
          {
            LODWORD(v11) = v42;
            [*(id *)(a1 + 168) setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11) forKeyedSubscript:v10];
          }
        }
        id v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v38, v57, 16, v11);
      }
      while (v7);
    }
    unsigned int v37 = 0;
    sub_10013E418(*(void *)(a1 + 192), @"CalibrationVersion", &v37);
    uint64_t v13 = sub_1000A6958();
    sub_10013E418(v13, @"CalibrationVersion", &v37);
    [*(id *)(a1 + 168) setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v37) forKeyedSubscript:@"CalibrationVersion"];
    sub_100103240();
    sub_10073BB0C((uint64_t)&v56);
    sub_1000A7CF8(*(void *)(a1 + 192), @"CalibrationUDID", &v56);
    uint64_t v14 = sub_1000A6958();
    sub_1000A7CF8(v14, @"CalibrationUDID", &v56);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v56;
    }
    else {
      uint64_t v15 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    [*(id *)(a1 + 168) setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15) forKeyedSubscript:@"CalibrationUDID"];
    BOOL v36 = 0;
    uint64_t v16 = sub_1000A6958();
    sub_1000D29FC(v16, @"CalibrationResetRequested", &v36);
    [*(id *)(a1 + 168) setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v36) forKeyedSubscript:@"CalibrationResetRequested"];
    if ((sub_1011743D8(*(void **)(a1 + 168)) & 1) == 0)
    {
      if ([*(id *)(a1 + 168) objectForKeyedSubscript:v5])
      {
        [objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v5) floatValue];
        if (v17 == 0.0)
        {
          if (qword_102419120 != -1) {
            dispatch_once(&qword_102419120, &stru_1022EF0B8);
          }
          uint64_t v18 = qword_102419128;
          if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v55.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Clearing a stale vo2max of 0 value.", (uint8_t *)&v55, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&v55, 0x65CuLL);
            if (qword_102419120 != -1) {
              dispatch_once(&qword_102419120, &stru_1022EF0B8);
            }
            *(_WORD *)uint64_t buf = 0;
            uint64_t v34 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()", "%s\n", (const char *)v34);
            if (v34 != &v55) {
              free(v34);
            }
          }
          [*(id *)(a1 + 168) removeObjectForKey:v5];
          sub_1004CF870(*(void *)(a1 + 192));
          (*(void (**)(void))(**(void **)(a1 + 192) + 944))(*(void *)(a1 + 192));
        }
      }
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1000A6A10(*(void *)(a1 + 192), @"CalibrationTimestamp", &Current);
    uint64_t v19 = sub_1000A6958();
    sub_1000A6A10(v19, @"CalibrationTimestamp", &Current);
    [*(id *)(a1 + 168) setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current) forKeyedSubscript:@"CalibrationTimestamp"];
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    long long v20 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      sub_101173A50(*(void **)(a1 + 168));
      int v21 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
      std::string::size_type v22 = v55.__r_.__value_.__r.__words[0];
      int v23 = sub_1011740D8(*(void **)(a1 + 168));
      char v24 = &v55;
      if (v21 < 0) {
        char v24 = (std::string *)v22;
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v24;
      __int16 v48 = 1024;
      int v49 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Loaded Motion Cals from backup: fMotionCals, %s, current version, %d", buf, 0x12u);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v55, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      sub_101173A50(*(void **)(a1 + 168));
      int v27 = v50;
      long long v28 = *(unsigned char **)buf;
      int v29 = sub_1011740D8(*(void **)(a1 + 168));
      long long v30 = buf;
      if (v27 < 0) {
        long long v30 = v28;
      }
      int v51 = 136315394;
      long long v52 = v30;
      __int16 v53 = 1024;
      int v54 = v29;
      long long v31 = (std::string *)_os_log_send_and_compose_impl();
      if (v50 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()", "%s\n", (const char *)v31);
      if (v31 != &v55) {
        free(v31);
      }
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    int v25 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      int v26 = __p;
      if (v46 < 0) {
        int v26 = (void **)__p[0];
      }
      LODWORD(v55.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "No motion cal backup file was found at path: %s. Restore PAL.", (uint8_t *)&v55, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v55, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      long long v32 = __p;
      if (v46 < 0) {
        long long v32 = (void **)__p[0];
      }
      LODWORD(v56.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      long long v33 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()", "%s\n", (const char *)v33);
      if (v33 != &v55) {
        free(v33);
      }
    }
    sub_100C4781C(a1);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C47768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (*(char *)(v48 - 217) < 0) {
    operator delete(*(void **)(v48 - 240));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C4781C(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore pal", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    LOWORD(__p[0]) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupPal()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  int v20 = 0x800000;
  uint64_t v3 = CMNatalimeterSetUserPal;
  sub_1004D123C(*(void *)(a1 + 200), CMNatalimeterSetUserPal, (float *)&v20);
  if (v5)
  {
    LODWORD(v4) = v20;
    [*(id *)(a1 + 168) setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4) forKeyedSubscript:v3];
  }
  sub_101174204(*(void **)(a1 + 168), 1);
  sub_100103240();
  sub_10073BB0C((uint64_t)__p);
  if (v19 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  [*(id *)(a1 + 168) setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6) forKeyedSubscript:@"CalibrationUDID"];
  [*(id *)(a1 + 168) setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent())] forKeyedSubscript:@"CalibrationTimestamp"];
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  id v7 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    sub_101173A50(*(void **)(a1 + 168));
    int v8 = v30;
    uint64_t v9 = *(uint8_t **)buf;
    int v10 = sub_1011740D8(*(void **)(a1 + 168));
    double v11 = buf;
    if (v8 < 0) {
      double v11 = v9;
    }
    *(_DWORD *)int v21 = 136315394;
    *(void *)&v21[4] = v11;
    __int16 v22 = 1024;
    int v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.", v21, 0x12u);
    if (v30 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    sub_101173A50(*(void **)(a1 + 168));
    int v13 = v24;
    uint64_t v14 = *(unsigned char **)v21;
    int v15 = sub_1011740D8(*(void **)(a1 + 168));
    uint64_t v16 = v21;
    if (v13 < 0) {
      uint64_t v16 = v14;
    }
    int v25 = 136315394;
    int v26 = v16;
    __int16 v27 = 1024;
    int v28 = v15;
    float v17 = (char *)_os_log_send_and_compose_impl();
    if (v24 < 0) {
      operator delete(*(void **)v21);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupPal()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_100C46570(a1);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C47C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSArray *sub_100C47CB4(uint64_t a1)
{
  double result = (NSArray *)[*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  if (result)
  {
    id v3 = [*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"];
    return +[NSArray arrayWithArray:v3];
  }
  return result;
}

NSArray *sub_100C47D24(uint64_t a1)
{
  double result = (NSArray *)[*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
  if (result)
  {
    id v3 = [*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
    return +[NSArray arrayWithArray:v3];
  }
  return result;
}

NSDate *sub_100C47D94(uint64_t a1)
{
  if (sub_1011741A4(*(void **)(a1 + 168)) < 1.0) {
    return 0;
  }
  double v3 = sub_1011741A4(*(void **)(a1 + 168));

  return +[NSDate dateWithTimeIntervalSinceReferenceDate:v3];
}

void sub_100C47DFC(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restoring backup motion cals", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    double v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doRestoreBackupMotionCals(const EDeviceUnlocked *)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100C46E2C(a1);
}

id sub_100C47F98(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 147) = *(unsigned char *)a2;
  *(void *)(a1 + 148) = *(void *)(a2 + 4);
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  double v3 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 147);
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "quickswitch protocol %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doConnected(const EWatchConnected *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 147)) {
    [*(id *)(a1 + 184) setFireInterval:*(double *)(a1 + 160)];
  }
  return sub_100C48178(a1);
}

id sub_100C48178(uint64_t a1)
{
  id result = sub_100C49E58(a1);
  if (result)
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    double v3 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Scheduled send to watch.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::scheduleFastSendToWatch()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return [*(id *)(a1 + 184) setNextFireDelay:2.56];
  }
  return result;
}

void sub_100C48324(uint64_t a1, float *a2)
{
  float v3 = *a2;
  uint64_t v4 = CMNatalimeterSetUserPal;
  if ([*(id *)(a1 + 168) objectForKeyedSubscript:CMNatalimeterSetUserPal])
  {
    [objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v4) floatValue];
    float v6 = v5;
  }
  else
  {
    float v6 = 0.0;
  }
  if (vabds_f32(v6, v3) <= 0.5)
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    int v12 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PAL not loaded or changed.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doUpdatePAL(const EPalUpdated *)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    id v7 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)&uint8_t buf[4] = v6;
      __int16 v16 = 2048;
      double v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "PAL is updated from %f to %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doUpdatePAL(const EPalUpdated *)", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
    *(float *)&double v8 = v3;
    [*(id *)(a1 + 168) setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8) forKeyedSubscript:v4];
    sub_100103240();
    sub_10073BB0C((uint64_t)buf);
    if (v18 >= 0) {
      uint64_t v9 = buf;
    }
    else {
      uint64_t v9 = *(unsigned char **)buf;
    }
    [*(id *)(a1 + 168) setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9) forKeyedSubscript:@"CalibrationUDID"];
    [*(id *)(a1 + 168) setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent())] forKeyedSubscript:@"CalibrationTimestamp"];
    int v10 = *(void **)(a1 + 168);
    int v11 = sub_1011740D8(v10);
    sub_101174204(v10, (v11 + 1));
    sub_100C46570(a1);
    sub_100C48178(a1);
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100C48730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C48758(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Restore & Arbitrate", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doRestoreBackupArbitrate(const EDeviceUnlocked *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100C46E2C(a1);
  sub_100C48904(a1);
  return sub_100C48178(a1);
}

void sub_100C48904(uint64_t a1)
{
  uint64_t v2 = sub_100C497B8(a1, *(void **)(a1 + 168), *(void **)(a1 + 176));
  int v3 = v2;
  sub_100C49D24(v2, *(void **)(a1 + 168), *(void **)(a1 + 176), v2);
  switch(v3)
  {
    case 2:
    case 4:
      sub_100C46570(a1);
      break;
    case 3:
      sub_100C46570(a1);
      goto LABEL_6;
    case 5:
LABEL_6:
      sub_100C48178(a1);
      break;
    default:
      return;
  }
}

id sub_100C489C0(uint64_t a1, void *a2)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "processing motion cals received from watch", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    float v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doBufferMotionCalsFromWatch(const ECalibrationFromWatch *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
}

id sub_100C48B64(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disconnected", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doDisconnected(const EWatchDisconnected *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 184) setNextFireDelay:1.79769313e308];
}

void sub_100C48D08(uint64_t a1, void *a2)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "arbitration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doArbitrateMotionCals(const ECalibrationFromWatch *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
  sub_100C48904(a1);
}

uint64_t sub_100C48EB4(uint64_t a1, void *a2)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    sub_101173A50(a2);
    float v5 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Companion received calibrations from watch: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    sub_101173A50(a2);
    if (v10 >= 0) {
      id v7 = buf;
    }
    else {
      id v7 = *(unsigned char **)buf;
    }
    int v11 = 136315138;
    int v12 = v7;
    double v8 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreCompanion::receiveMotionCals(NSDictionary *)", "%s\n", v8);
    if (v8 != (char *)__p) {
      free(v8);
    }
  }
  __p[0] = a2;
  return sub_1001A34E0(a1 + 128, 4, (uint64_t)__p);
}

id sub_100C490E8(uint64_t a1)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  uint64_t v2 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "clearing motion calibrations", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    __int16 v24 = 0;
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  id v3 = +[NSMutableDictionary dictionary];
  id v4 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLNatalimetryNotifier"] syncgetUserProfileInternal];
  if (v4)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v5 = CMNatalimeterSetUserVo2max;
    *(void *)uint64_t buf = CMNatalimeterSetUserPal;
    uint64_t v27 = CMNatalimeterSetUserVo2max;
    uint64_t v6 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v28 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    id v7 = +[NSArray arrayWithObjects:buf count:3];
    id v8 = [(NSArray *)v7 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v7);
          }
          [v3 setObject:[v4 objectForKeyedSubscript:*(void *)(*((void *)&v20 + 1) + 8 * i)] forKeyedSubscript:*(void *)(*((void *)&v20 + 1) + 8 * i)];
        }
        id v8 = [(NSArray *)v7 countByEnumeratingWithState:&v20 objects:v25 count:16];
      }
      while (v8);
    }
    [v3 setObject:&off_102398248 forKeyedSubscript:v5];
    [v3 setObject:&off_102398258 forKeyedSubscript:v6];
  }
  id v11 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLStepCountNotifier"] syncgetRawSpeedToKValueDefaultBins];
  if (v11)
  {
    [v3 setObject:v11 forKeyedSubscript:@"RawSpeedToKValueTable"];
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    int v12 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Failed to retreive default raw speed to kValue bins.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      __int16 v24 = 0;
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  id v13 = [objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier") syncgetStepCadenceToStrideLengthDefaultBins];
  if (v13)
  {
    [v3 setObject:v13 forKeyedSubscript:@"StepCadenceToStrideLengthTable"];
  }
  else
  {
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    char v14 = qword_102419128;
    if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Failed to retreive default step cadence to stride length bins.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      __int16 v24 = 0;
      char v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  [*(id *)(a1 + 168) addEntriesFromDictionary:v3];
  sub_100103240();
  sub_10073BB0C((uint64_t)buf);
  if (v28 >= 0) {
    int v15 = buf;
  }
  else {
    int v15 = *(uint8_t **)buf;
  }
  [*(id *)(a1 + 168) setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15) forKeyedSubscript:@"CalibrationUDID"];
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  [*(id *)(a1 + 168) setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()) forKeyedSubscript:@"CalibrationTimestamp"];
  return [*(id *)(a1 + 168) setObject:&__kCFBooleanTrue forKeyedSubscript:@"CalibrationResetRequested"];
}

void sub_100C4973C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C49760(uint64_t a1)
{
  sub_100C490E8(a1);
  uint64_t v2 = *(void **)(a1 + 168);
  int v3 = sub_1011740D8(v2);
  sub_101174204(v2, (v3 + 1));
  sub_100C46570(a1);

  return sub_100C48178(a1);
}

uint64_t sub_100C497B8(uint64_t a1, void *a2, void *a3)
{
  if ([a3 count])
  {
    sub_101174138(a3, &__s1);
    double v5 = sub_1011741A4(a3);
    int v6 = sub_1011740D8(a3);
    sub_101174138(a2, __p);
    double v7 = sub_1011741A4(a2);
    int v8 = sub_1011740D8(a2);
    if (sub_101174450(a3))
    {
      if ([objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", @"HasSavedInitialMotionCalsToDisk"), "BOOLValue"]) uint64_t v9 = 2; {
      else
      }
        uint64_t v9 = 5;
LABEL_40:
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_1022EF0B8);
      }
      char v18 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEFAULT))
      {
        p_s1 = &__s1;
        if ((v30 & 0x80u) != 0) {
          p_s1 = __s1;
        }
        long long v20 = __p;
        if ((v27 & 0x80u) != 0) {
          long long v20 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 67110658;
        int v46 = v6;
        __int16 v47 = 2080;
        uint64_t v48 = p_s1;
        __int16 v49 = 2048;
        double v50 = v5;
        __int16 v51 = 1024;
        int v52 = v8;
        __int16 v53 = 2080;
        int v54 = v20;
        __int16 v55 = 2048;
        double v56 = v7;
        __int16 v57 = 1024;
        int v58 = v9;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d", buf, 0x3Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_1022EF0B8);
        }
        long long v22 = &__s1;
        if ((v30 & 0x80u) != 0) {
          long long v22 = __s1;
        }
        long long v23 = __p;
        if ((v27 & 0x80u) != 0) {
          long long v23 = (void **)__p[0];
        }
        int v31 = 67110658;
        int v32 = v6;
        __int16 v33 = 2080;
        uint64_t v34 = v22;
        __int16 v35 = 2048;
        double v36 = v5;
        __int16 v37 = 1024;
        int v38 = v8;
        __int16 v39 = 2080;
        long long v40 = v23;
        __int16 v41 = 2048;
        double v42 = v7;
        __int16 v43 = 1024;
        int v44 = v9;
        __int16 v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      if ((char)v27 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v30 < 0) {
        operator delete(__s1);
      }
      return v9;
    }
    uint64_t v11 = v30;
    if ((v30 & 0x80u) == 0) {
      size_t v12 = v30;
    }
    else {
      size_t v12 = __n;
    }
    unint64_t v13 = v27;
    if ((v27 & 0x80u) != 0) {
      unint64_t v13 = (unint64_t)__p[1];
    }
    if (v12 == v13)
    {
      if ((v27 & 0x80u) == 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      if ((v30 & 0x80) == 0)
      {
        if (v30)
        {
          int v15 = &__s1;
          while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
          {
            int v15 = (void **)((char *)v15 + 1);
            char v14 = (void **)((char *)v14 + 1);
            if (!--v11) {
              goto LABEL_34;
            }
          }
          goto LABEL_28;
        }
LABEL_34:
        if (v5 <= v7) {
          unsigned int v17 = 5;
        }
        else {
          unsigned int v17 = 3;
        }
        if (v5 == v7) {
          uint64_t v9 = 1;
        }
        else {
          uint64_t v9 = v17;
        }
        goto LABEL_40;
      }
      if (!memcmp(__s1, v14, __n)) {
        goto LABEL_34;
      }
    }
LABEL_28:
    if (v6 == v8) {
      unsigned int v16 = 3;
    }
    else {
      unsigned int v16 = 4;
    }
    if (v6 >= v8) {
      uint64_t v9 = v16;
    }
    else {
      uint64_t v9 = 5;
    }
    goto LABEL_40;
  }
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_1022EF0B8);
  }
  char v10 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "No buffered Motion Cals, no arbitration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_1022EF0B8);
    }
    LOWORD(v31) = 0;
    int v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  return 1;
}

void sub_100C49CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C49D24(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = [a3 objectForKeyedSubscript:@"CalibrationResetRequested"];
  sub_1011744A0(a3);
  switch(a4)
  {
    case 4:
      [a2 setDictionary:a3];
      goto LABEL_10;
    case 3:
      [a2 setDictionary:a3];
      [a2 setObject:&__kCFBooleanFalse forKeyedSubscript:@"CalibrationResetRequested"];
      int v9 = sub_1011740D8(a2);
      sub_101174204(a2, (v9 + 1));
      break;
    case 2:
      uint64_t v8 = CMNatalimeterSetUserVo2max;
      if ([a3 objectForKeyedSubscript:CMNatalimeterSetUserVo2max]
        && !objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", v8), "intValue"))
      {
        [a3 removeObjectForKey:v8];
        [a2 removeObjectForKey:v8];
      }
      [a2 addEntriesFromDictionary:a3];
      if (v7) {
LABEL_10:
      }
        [a2 setObject:&__kCFBooleanFalse forKeyedSubscript:@"CalibrationResetRequested"];
      break;
  }

  return [a3 removeAllObjects];
}

id sub_100C49E58(uint64_t a1)
{
  uint64_t v2 = [(objc_class *)off_102473358() sharedInstance];
  id result = [[-[objc_class getAllDevicesWithArchivedDevicesMatching:](v2, "getAllDevicesWithArchivedDevicesMatching:", -[objc_class activeDeviceSelectorBlock](off_102473358(), "activeDeviceSelectorBlock")) firstObject];
  if (result) {
    return (id)(*(unsigned char *)(a1 + 147) != 0);
  }
  return result;
}

void sub_100C49EC0(id a1)
{
  qword_102419128 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

void sub_100C49EF0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_100C49F20()
{
  if (qword_102480948 != -1) {
    dispatch_once(&qword_102480948, &stru_1022EF0F8);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_102480940 = (uint64_t)result;
  off_102473358 = sub_100C49F84;
  return result;
}

uint64_t sub_100C49F84()
{
  return qword_102480940;
}

void sub_100C49F90(id a1)
{
  qword_102480950 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_100C49FBC()
{
  sub_100134750(qword_102480928, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480928, (void *)&_mh_execute_header);
}

uint64_t sub_100C4A650(int a1, int a2)
{
  id v4 = sub_100C4B384(&v12);
  std::random_device::result_type v5 = std::random_device::operator()(v4);
  v10[0] = v5;
  for (uint64_t i = 1; i != 624; ++i)
  {
    std::random_device::result_type v5 = i + 1812433253 * (v5 ^ (v5 >> 30));
    v10[i] = v5;
  }
  uint64_t v11 = 0;
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v7 = sub_1019E9AF4((uint64_t)v9, (uint64_t)v10, v9);
  std::random_device::~random_device(&v12);
  return v7;
}

void sub_100C4A6E4(_Unwind_Exception *a1)
{
  std::random_device::~random_device((std::random_device *)(v1 - 36));
  _Unwind_Resume(a1);
}

double sub_100C4A6FC(double a1, double a2)
{
  sub_100C4B384(&v9);
  std::random_device::result_type v4 = std::random_device::operator()(&v9);
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  unsigned int v8 = v5;
  double v6 = a1 + (a2 - a1) * sub_100C4B3F8(&v8);
  std::random_device::~random_device(&v9);
  return v6;
}

void sub_100C4A788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
}

std::random_device *sub_100C4B384(std::random_device *a1)
{
  sub_100134750(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_100C4B3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100C4B3F8(unsigned int *a1)
{
  unsigned int v1 = 48271 * (*a1 % 0xADC8);
  unsigned int v2 = 3399 * (*a1 / 0xADC8);
  BOOL v3 = v1 >= v2;
  unsigned int v4 = v1 - v2;
  if (v3) {
    int v5 = 0;
  }
  else {
    int v5 = 0x7FFFFFFF;
  }
  unsigned int v6 = v5 + v4;
  unsigned int v7 = v6 - 1;
  unsigned int v8 = v6 / 0xADC8;
  unsigned int v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  BOOL v3 = v9 >= v8;
  unsigned int v10 = v9 - v8;
  if (v3) {
    int v11 = 0;
  }
  else {
    int v11 = 0x7FFFFFFF;
  }
  unsigned int v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

uint64_t sub_100C4B484(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

void sub_100C4BBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100C4C18C(uint64_t a1)
{
  v3[0] = @"ageGroup";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v3[1] = @"distancePercentageErrorBin";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  _DWORD v3[2] = @"gender";
  _DWORD v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v3[3] = @"speedBin";
  v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  v3[4] = @"userBmiBin";
  v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  v3[5] = @"userHeightBin";
  v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v3[6] = @"countPerBin";
  v4[6] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 336 * *(int *)(a1 + 52) + 24 * *(int *)(a1 + 44) + 448)];
  v3[7] = @"sumRatioGPStoRawDist";
  v4[7] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 336 * *(int *)(a1 + 52) + 24 * *(int *)(a1 + 44) + 456)];
  v3[8] = @"sumRatioMobilitytoRawDist";
  v4[8] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 336 * *(int *)(a1 + 52) + 24 * *(int *)(a1 + 44) + 464)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:9];
}

void sub_100C4C3A4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100C4C3D4()
{
  qword_102480958 = 0;
  qword_102480960 = 0;
  qword_102480968 = 0;
  v0 = operator new(0x38uLL);
  qword_102480960 = (uint64_t)v0 + 56;
  qword_102480968 = (uint64_t)v0 + 56;
  _OWORD *v0 = xmmword_101D89FB8;
  v0[1] = unk_101D89FC8;
  v0[2] = xmmword_101D89FD8;
  *((void *)v0 + 6) = 0x4003333333333333;
  qword_102480958 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_102480958, (void *)&_mh_execute_header);
  qword_102480978 = 0;
  unk_102480980 = 0;
  qword_102480970 = 0;
  uint64_t v1 = operator new(0x68uLL);
  qword_102480978 = (uint64_t)v1 + 104;
  unk_102480980 = (char *)v1 + 104;
  v1[4] = xmmword_101D8A030;
  v1[5] = unk_101D8A040;
  *((void *)v1 + 12) = 0x4049000000000000;
  *uint64_t v1 = xmmword_101D89FF0;
  v1[1] = unk_101D8A000;
  v1[2] = xmmword_101D8A010;
  v1[3] = unk_101D8A020;
  qword_102480970 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_102480970, (void *)&_mh_execute_header);
}

void sub_100C4C57C(id a1)
{
  qword_102480988 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBluetoothServiceSilo"];
}

uint64_t sub_100C4C63C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100C4CE34;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024809A8 != -1) {
    dispatch_once(&qword_1024809A8, block);
  }
  return qword_10248AAA8;
}

void sub_100C4C830(id a1)
{
  if (sub_100740FA4()) {
    byte_102480998 = 1;
  }
}

BOOL sub_100C4C884(uint64_t a1)
{
  uint64_t v6 = -1;
  __int16 v7 = 0x7FFF;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022EF358);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Clearing AFH map.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBluetoothService::clearAFHSettings()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_100C52B4C(a1, (uint64_t)&v6);
}

BOOL sub_100C4CA9C(uint64_t a1, int *a2, unsigned int a3)
{
  BOOL result = sub_100C52F14((uint64_t)v5, a2, a3);
  if (result) {
    return sub_100C52B4C(a1, (uint64_t)v5);
  }
  return result;
}

uint64_t sub_100C4CB54(uint64_t a1)
{
  if (*(void *)(a1 + 112) && *(void *)(a1 + 120))
  {
    if (!BTDiscoveryAgentStartScan()) {
      return 1;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v1 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "BTDiscoveryAgentStartScan failed", buf, 2u);
    }
    BOOL v2 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v2)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    unsigned int v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "no session or agent available - cannot scan", buf, 2u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_19:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBluetoothService::scan()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
LABEL_22:
      dispatch_once(&qword_102419630, &stru_1022EF358);
      goto LABEL_19;
    }
  }
  return result;
}

void sub_100C4CE34()
{
}

void sub_100C4CE80()
{
}

id *sub_100C4CEA4(id *a1, void *a2)
{
  uint64_t v3 = sub_100C4CF6C((uint64_t)a1, "CLBluetoothService", a2);
  *(void *)uint64_t v3 = &off_1022EF1B0;
  *(unsigned char *)(v3 + 109) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 136) = v3 + 144;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 160) = v3 + 168;
  *(void *)(v3 + 176) = 0;
  if (*(void *)(v3 + 40)) {
    sub_100C4D018(a1);
  }
  return a1;
}

void sub_100C4CF40(_Unwind_Exception *a1)
{
  sub_100C54F50(v3, *(void **)(v1 + 168));
  sub_100C54F50(v2, *(void **)(v1 + 144));
  sub_100C4D340(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C4CF6C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022EF388;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100C4CFFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C4D018(id *a1)
{
  pid_t v2 = getpid();
  snprintf(__str, 0x40uLL, "com.apple.locationd-%d-%p\n", v2, a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022EF358);
  }
  uint64_t v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    unsigned int v8 = __str;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "attach to bluetooth server with session name %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::attach()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [a1[5] queue];
  if (BTSessionAttachWithQueue())
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    unsigned int v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not attach bluetooth session", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBluetoothService::attach()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

uint64_t sub_100C4D340(uint64_t a1)
{
  *(void *)a1 = off_1022EF388;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100C4D3C4(uint64_t a1)
{
  *(void *)a1 = &off_1022EF1B0;
  *(unsigned char *)(a1 + 108) = 1;
  pid_t v2 = (void *)(a1 + 112);
  if (*(void *)(a1 + 112))
  {
    BTSessionDetachWithQueue();
    *pid_t v2 = 0;
    v2[1] = 0;
  }
  sub_100C54F50(a1 + 160, *(void **)(a1 + 168));
  sub_100C54F50(a1 + 136, *(void **)(a1 + 144));

  return sub_100C4D340(a1);
}

void sub_100C4D454(uint64_t a1)
{
  sub_100C4D3C4(a1);

  operator delete();
}

void sub_100C4D48C(void *a1, int a2, int a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothSession", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    unsigned int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      unsigned int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothSession\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C4E3CC((const void ***)a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C4D658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C4D678(uint64_t result)
{
  pid_t v2 = (void *)(result + 112);
  uint64_t v1 = *(void *)(result + 112);
  *(unsigned char *)(result + 108) = 1;
  if (v1)
  {
    uint64_t result = BTSessionDetachWithQueue();
    *pid_t v2 = 0;
    v2[1] = 0;
  }
  return result;
}

void sub_100C4D6B4(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  sub_100C4D730(a1, (uint64_t **)(a1 + 136), a1 + 160, a2, a3);

  sub_100C4DDB0(a1, a2, a3, a4);
}

void sub_100C4D730(uint64_t a1, uint64_t **a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  if (*(_DWORD *)(a5 + 100) != -1 && *(_DWORD *)(a5 + 120) == 0)
  {
    switch(*a4)
    {
      case 4:
        *(void *)uint64_t buf = a5 + 16;
        __int16 v16 = sub_100C56370(a2, (const void **)(a5 + 16), (uint64_t)&unk_101D0B290, (long long **)buf);
        v16[7] = *(void *)(a5 + 8);
        std::string::operator=((std::string *)(v16 + 8), (const std::string *)(a5 + 16));
        std::string::operator=((std::string *)(v16 + 11), (const std::string *)(a5 + 40));
        std::string::operator=((std::string *)(v16 + 14), (const std::string *)(a5 + 64));
        char v17 = *(unsigned char *)(a5 + 104);
        *(_OWORD *)(v16 + 17) = *(_OWORD *)(a5 + 88);
        *((unsigned char *)v16 + 152) = v17;
        break;
      case 5:
      case 0xB:
        sub_100C564CC(a2, (const void **)(a5 + 16));
        if (a3 + 8 != sub_10012FFE0(a3, (const void **)(a5 + 16)))
        {
          int v8 = *(_DWORD *)(a5 + 116);
          *(void *)uint64_t buf = a5 + 16;
          unsigned int v9 = sub_100C56370((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101D0B290, (long long **)buf);
          *((_DWORD *)v9 + 37) &= ~v8;
          *(void *)uint64_t buf = a5 + 16;
          if (!*((_DWORD *)sub_100C56370((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101D0B290, (long long **)buf)+ 37))
          {
            sub_100C564CC((uint64_t **)a3, (const void **)(a5 + 16));
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022EF358);
            }
            unsigned int v10 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = *(void *)(a5 + 64);
              if (*(char *)(a5 + 63) >= 0) {
                uint64_t v12 = a5 + 40;
              }
              else {
                uint64_t v12 = *(void *)(a5 + 40);
              }
              if (*(char *)(a5 + 87) >= 0) {
                uint64_t v11 = a5 + 64;
              }
              if (*(char *)(a5 + 39) >= 0) {
                uint64_t v13 = a5 + 16;
              }
              else {
                uint64_t v13 = *(void *)(a5 + 16);
              }
              int v14 = *(_DWORD *)(a5 + 92);
              uint64_t v15 = *(void *)(a3 + 16);
              *(_DWORD *)uint64_t buf = 136316162;
              *(void *)&uint8_t buf[4] = v12;
              __int16 v31 = 2080;
              uint64_t v32 = v11;
              __int16 v33 = 2080;
              uint64_t v34 = v13;
              __int16 v35 = 1024;
              int v36 = v14;
              __int16 v37 = 2048;
              uint64_t v38 = v15;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "disconnected from %s/%s @ %s of type %d - currently %lu connected device(s)", buf, 0x30u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                goto LABEL_44;
              }
              goto LABEL_42;
            }
          }
        }
        break;
      case 0xA:
        __int16 v18 = (const void **)(a5 + 16);
        if (a3 + 8 == sub_10012FFE0(a3, (const void **)(a5 + 16)))
        {
          *(void *)uint64_t buf = a5 + 16;
          long long v21 = sub_100C56370((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101D0B290, (long long **)buf);
          v21[7] = *(void *)(a5 + 8);
          std::string::operator=((std::string *)(v21 + 8), (const std::string *)(a5 + 16));
          std::string::operator=((std::string *)(v21 + 11), (const std::string *)(a5 + 40));
          std::string::operator=((std::string *)(v21 + 14), (const std::string *)(a5 + 64));
          long long v22 = *(_OWORD *)(a5 + 88);
          *((unsigned char *)v21 + 152) = *(unsigned char *)(a5 + 104);
          *(_OWORD *)(v21 + 17) = v22;
          LODWORD(v21) = *(_DWORD *)(a5 + 116);
          *(void *)uint64_t buf = a5 + 16;
          *((_DWORD *)sub_100C56370((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101D0B290, (long long **)buf)
          + 37) = v21;
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022EF358);
          }
          long long v23 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(a5 + 63) >= 0) {
              uint64_t v24 = a5 + 40;
            }
            else {
              uint64_t v24 = *(void *)(a5 + 40);
            }
            if (*(char *)(a5 + 87) >= 0) {
              uint64_t v25 = a5 + 64;
            }
            else {
              uint64_t v25 = *(void *)(a5 + 64);
            }
            if (*(char *)(a5 + 39) >= 0) {
              uint64_t v26 = a5 + 16;
            }
            else {
              uint64_t v26 = *(void *)(a5 + 16);
            }
            int v27 = *(_DWORD *)(a5 + 92);
            uint64_t v28 = *(void *)(a3 + 16);
            *(_DWORD *)uint64_t buf = 136316162;
            *(void *)&uint8_t buf[4] = v24;
            __int16 v31 = 2080;
            uint64_t v32 = v25;
            __int16 v33 = 2080;
            uint64_t v34 = v26;
            __int16 v35 = 1024;
            int v36 = v27;
            __int16 v37 = 2048;
            uint64_t v38 = v28;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "connected to %s/%s @ %s of type %d - currently %lu connected device(s)", buf, 0x30u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
LABEL_44:
            }
              dispatch_once(&qword_102419630, &stru_1022EF358);
LABEL_42:
            int v29 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::updateStatusOfConnectedDevices(std::map<std::string, CLBluetoothService_Type::Device> &, std::map<std::string, CLBluetoothService_Type::Device> &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v29);
            if (v29 != buf) {
              free(v29);
            }
          }
        }
        else
        {
          int v19 = *(_DWORD *)(a5 + 116);
          *(void *)uint64_t buf = v18;
          long long v20 = sub_100C56370((uint64_t **)a3, v18, (uint64_t)&unk_101D0B290, (long long **)buf);
          *((_DWORD *)v20 + 37) |= v19;
        }
        break;
      default:
        return;
    }
  }
}

void sub_100C4DDB0(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  unsigned int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unsigned int v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v10;
    __int16 v25 = 2050;
    uint64_t v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  int v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      char v17 = (uint64_t *)v12;
    }
    else {
      char v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      int v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    int v27 = v28;
    memset(v28, 0, sizeof(v28));
    int v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    int v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    long long v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_100C555F8(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)uint64_t buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    long long v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_100C55024();
  }
  os_activity_scope_leave(&state);
}

void sub_100C4E380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100C4E3CC(const void ***a1, void *a2, int a3, int a4)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022EF358);
  }
  int v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240704;
    int v32 = a3;
    __int16 v33 = 1026;
    int v34 = a4;
    __int16 v35 = 2048;
    int v36 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "bluetooth session event %{public}d result %{public}d session %p", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    v20[0] = 67240704;
    v20[1] = a3;
    LOWORD(v21[0]) = 1026;
    *(_DWORD *)((char *)v21 + 2) = a4;
    HIWORD(v21[0]) = 2048;
    v21[1] = a2;
    char v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  LOBYTE(v20[0]) = 0;
  __int16 v28 = 0;
  int v29 = 0;
  int v30 = 0;
  *(_OWORD *)long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)__int16 v23 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  char v27 = 0;
  if ((a3 - 1) < 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    unsigned int v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v32 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning bluetooth session disconnected - event %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_12;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    long long v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v18);
    if (v18 == (char *)buf) {
      goto LABEL_12;
    }
    goto LABEL_73;
  }
  if (a3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v32 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "bluetooth session event %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v12);
      goto LABEL_49;
    }
  }
  else
  {
    if (a4)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      unsigned int v10 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67109376;
        int v32 = a4;
        __int16 v33 = 1024;
        int v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning bluetooth session attached with error %d - event %d", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_12;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      long long v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v18);
      if (v18 == (char *)buf) {
        goto LABEL_12;
      }
LABEL_73:
      free(v18);
LABEL_12:
      a1[14] = 0;
      a1[15] = 0;
      LOBYTE(v20[0]) = 0;
      *(_DWORD *)uint64_t buf = 0;
      ((void (*)(const void ***, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*a1)[19])(a1, buf, v20, 1, 0xFFFFFFFFLL, 0);
      sub_100C4D018(a1);
      goto LABEL_59;
    }
    a1[14] = (const void **)a2;
    if (BTDiscoveryAgentCreate() || !a1[15])
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      int v13 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "could not create discovery agent", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    if (!BTLocalDeviceGetDefault() && a1[16])
    {
      if (BTServiceAddCallbacks())
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        BOOL v16 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "could not register for service event callbacks", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022EF358);
          }
          int v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
      sub_100C4F4E4(a1);
      LOBYTE(v20[0]) = 1;
      *(_DWORD *)uint64_t buf = 0;
      ((void (*)(const void ***, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*a1)[19])(a1, buf, v20, 1, 0xFFFFFFFFLL, 0);
      goto LABEL_59;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    int v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v12);
LABEL_49:
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
LABEL_59:
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[1]);
  }
}

void sub_100C4EEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100997A28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C4EF1C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a5 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  BOOL v8 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    char v14 = 1;
    uint64_t v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v11, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    uint64_t v12 = qword_102419588;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v8)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      long long v18 = "";
      __int16 v19 = 2082;
      long long v20 = "activity";
      __int16 v21 = 2050;
      uint64_t v22 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v14 = 0;
  }
  sub_100C5102C(v8, v9, a2, v10, a4);
  if (v14) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C4F0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C4F0F4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a5 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothDiscoveryAgentDiscoveryEventCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    uint64_t v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothDiscoveryAgentDiscoveryEventCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v13 = 0;
  }
  sub_100C511F4(a5, v9, a2, a3, a4);
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C4F2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C4F2E0(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a6 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v12 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothService", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v12, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    char v13 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothService\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  sub_100C4FB2C(a6, a1, a2, a3, a4, a5);
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C4F4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C4F4E4(const void ***a1)
{
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  sub_100C51A00((uint64_t)a1, &v46);
  sub_100C55DAC((uint64_t *)&v44, a1 + 20);
  pid_t v2 = v44;
  if (v44 != (long long *)v45)
  {
    do
    {
      sub_100C54ED8(&v37, v2 + 2);
      uint64_t v4 = v46;
      uint64_t v3 = v47;
      sub_100C54ED8(&v29, &v37);
      if (v4 == v3)
      {
        int v13 = 1;
      }
      else
      {
        if ((v32 & 0x80u) == 0) {
          size_t v5 = v32;
        }
        else {
          size_t v5 = (size_t)v31[1];
        }
        if ((v32 & 0x80u) == 0) {
          uint64_t v6 = v31;
        }
        else {
          uint64_t v6 = (void **)v31[0];
        }
        uint64_t v7 = v4 + 104;
        do
        {
          int v8 = *(char *)(v7 - 73);
          if (v8 >= 0) {
            size_t v9 = *(unsigned __int8 *)(v7 - 73);
          }
          else {
            size_t v9 = *(void *)(v7 - 88);
          }
          if (v8 >= 0) {
            uint64_t v10 = (const void *)(v7 - 96);
          }
          else {
            uint64_t v10 = *(const void **)(v7 - 96);
          }
          if (v9 >= v5) {
            size_t v11 = v5;
          }
          else {
            size_t v11 = v9;
          }
          BOOL v12 = memcmp(v6, v10, v11) != 0;
          int v13 = v9 != v5 || v12;
          BOOL v14 = v13 != 1 || v7 == v3;
          v7 += 104;
        }
        while (!v14);
      }
      if (v36 < 0) {
        operator delete(v35);
      }
      if (v34 < 0) {
        operator delete(v33);
      }
      if ((char)v32 < 0) {
        operator delete(v31[0]);
      }
      if (v30 < 0)
      {
        operator delete(v29);
        if (v13)
        {
LABEL_39:
          LOBYTE(v20) = 0;
          *(void *)uint64_t v21 = *((void *)&v38 + 1);
          if ((v39[23] & 0x80000000) != 0)
          {
            sub_1000DC48C(&v21[8], *(void **)v39, *(unint64_t *)&v39[8]);
          }
          else
          {
            *(_OWORD *)&v21[8] = *(_OWORD *)v39;
            *(void *)__int16 v22 = *(void *)&v39[16];
          }
          if ((v40[23] & 0x80000000) != 0)
          {
            sub_1000DC48C(&v22[8], *(void **)v40, *(unint64_t *)&v40[8]);
          }
          else
          {
            *(_OWORD *)&v22[8] = *(_OWORD *)v40;
            *(void *)uint64_t v23 = *(void *)&v40[16];
          }
          if ((v41[23] & 0x80000000) != 0)
          {
            sub_1000DC48C(&v23[8], *(void **)v41, *(unint64_t *)&v41[8]);
          }
          else
          {
            *(_OWORD *)&v23[8] = *(_OWORD *)v41;
            *(void *)uint64_t v24 = *(void *)&v41[16];
          }
          *(_OWORD *)&v24[8] = v42;
          char v25 = v43;
          __int16 v26 = 0;
          int v27 = HIDWORD(v42);
          int v28 = 0;
          int v19 = 11;
          ((void (*)(const void ***, int *, uint64_t *, uint64_t, uint64_t, void))(*a1)[19])(a1, &v19, &v20, 1, 0xFFFFFFFFLL, 0);
          if ((v24[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v23[8]);
          }
          if ((v23[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v22[8]);
          }
          if ((v22[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v21[8]);
          }
        }
      }
      else if (v13)
      {
        goto LABEL_39;
      }
      if ((v41[23] & 0x80000000) != 0) {
        operator delete(*(void **)v41);
      }
      if ((v40[23] & 0x80000000) != 0) {
        operator delete(*(void **)v40);
      }
      if ((v39[23] & 0x80000000) != 0) {
        operator delete(*(void **)v39);
      }
      if (SBYTE7(v38) < 0) {
        operator delete((void *)v37);
      }
      char v15 = (long long *)*((void *)v2 + 1);
      if (v15)
      {
        do
        {
          __int16 v16 = v15;
          char v15 = *(long long **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          __int16 v16 = (long long *)*((void *)v2 + 2);
          BOOL v14 = *(void *)v16 == (void)v2;
          pid_t v2 = v16;
        }
        while (!v14);
      }
      pid_t v2 = v16;
    }
    while (v16 != (long long *)v45);
  }
  uint64_t v17 = v46;
  for (uint64_t i = v47; v17 != i; v17 += 104)
  {
    sub_100997A7C((uint64_t)&v20, v17);
    LOBYTE(v37) = 0;
    *((void *)&v37 + 1) = v20;
    if ((v21[23] & 0x80000000) != 0)
    {
      sub_1000DC48C(&v38, *(void **)v21, *(unint64_t *)&v21[8]);
    }
    else
    {
      long long v38 = *(_OWORD *)v21;
      *(void *)__int16 v39 = *(void *)&v21[16];
    }
    if ((v22[23] & 0x80000000) != 0)
    {
      sub_1000DC48C(&v39[8], *(void **)v22, *(unint64_t *)&v22[8]);
    }
    else
    {
      *(_OWORD *)&v39[8] = *(_OWORD *)v22;
      *(void *)long long v40 = *(void *)&v22[16];
    }
    if ((v23[23] & 0x80000000) != 0)
    {
      sub_1000DC48C(&v40[8], *(void **)v23, *(unint64_t *)&v23[8]);
    }
    else
    {
      *(_OWORD *)&v40[8] = *(_OWORD *)v23;
      *(void *)__int16 v41 = *(void *)&v23[16];
    }
    *(_OWORD *)&v41[8] = *(_OWORD *)v24;
    LOBYTE(v42) = v24[16];
    WORD4(v42) = 0;
    HIDWORD(v42) = *(_DWORD *)&v24[12];
    int v43 = 0;
    int v19 = 4;
    ((void (*)(const void ***, int *, long long *, uint64_t, uint64_t, void))(*a1)[19])(a1, &v19, &v37, 1, 0xFFFFFFFFLL, 0);
    int v19 = 10;
    ((void (*)(const void ***, int *, long long *, uint64_t, uint64_t, void))(*a1)[19])(a1, &v19, &v37, 1, 0xFFFFFFFFLL, 0);
    if ((v41[7] & 0x80000000) != 0) {
      operator delete(*(void **)&v40[8]);
    }
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(*(void **)&v39[8]);
    }
    if ((v39[7] & 0x80000000) != 0) {
      operator delete((void *)v38);
    }
    if ((v23[23] & 0x80000000) != 0) {
      operator delete(*(void **)v23);
    }
    if ((v22[23] & 0x80000000) != 0) {
      operator delete(*(void **)v22);
    }
    if ((v21[23] & 0x80000000) != 0) {
      operator delete(*(void **)v21);
    }
  }
  sub_100C523C8((uint64_t)a1);
  sub_100C54F50((uint64_t)&v44, v45[0]);
  *(void *)&long long v37 = &v46;
  sub_100C55CAC((void ***)&v37);
}

void sub_100C4FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52)
{
  sub_100C54F50(v53 - 136, *(void **)(v52 + 264));
  *(void *)(v52 + 128) = v53 - 112;
  sub_100C55CAC(&a52);
  _Unwind_Resume(a1);
}

void sub_100C4FB2C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022EF358);
  }
  BOOL v12 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240960;
    int v35 = a3;
    __int16 v36 = 1026;
    int v37 = a4;
    __int16 v38 = 1026;
    int v39 = a5;
    __int16 v40 = 1026;
    int v41 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "service mask 0x%{public}x event type %{public}d event %{public}d result %{public}d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    v24[0] = 67240960;
    v24[1] = a3;
    LOWORD(v25[0]) = 1026;
    *(_DWORD *)((char *)v25 + 2) = a4;
    HIWORD(v25[0]) = 1026;
    LODWORD(v25[1]) = a5;
    WORD2(v25[1]) = 1026;
    *(_DWORD *)((char *)&v25[1] + 6) = a6;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  LOBYTE(v24[0]) = 0;
  __int16 v31 = 0;
  memset(v25, 0, sizeof(v25));
  *(_OWORD *)__int16 v26 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  char v30 = 0;
  int v32 = a3;
  int v33 = a6;
  switch(a4)
  {
    case 2:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      char v15 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v35 = a5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      switch(a5)
      {
        case 'e':
        case 'g':
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022EF358);
          }
          __int16 v16 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 67109120;
            int v35 = a5;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_CONNECTED|START_VOICE_COMMAND", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022EF358);
            }
            __int16 v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
          }
          if (sub_100C5063C(a2, (uint64_t)v25))
          {
            *(_DWORD *)uint64_t buf = 6;
            (*(void (**)(uint64_t, uint8_t *, _DWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v24, 0, 0xFFFFFFFFLL, 0);
          }
          break;
        case 'f':
        case 'h':
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022EF358);
          }
          uint64_t v17 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 67109120;
            int v35 = a5;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_DISCONNECTED|END_VOICE_COMMAND", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022EF358);
            }
            uint64_t v23 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v23);
            if (v23 != (char *)buf) {
              free(v23);
            }
          }
          if (sub_100C5063C(a2, (uint64_t)v25))
          {
            *(_DWORD *)uint64_t buf = 7;
            (*(void (**)(uint64_t, uint8_t *, _DWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v24, 0, 0xFFFFFFFFLL, 0);
          }
          break;
        default:
          goto LABEL_48;
      }
      break;
    case 1:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      BOOL v14 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v35 = a5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DISCONNECT, event, %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      if (a5 == 12 && sub_100C5063C(a2, (uint64_t)v25))
      {
        *(_DWORD *)uint64_t buf = 5;
        (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, buf, v24, 1, 0xFFFFFFFFLL, 1);
      }
      break;
    case 0:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      int v13 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v35 = a5;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_CONNECT, event, %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      if (a5 == 11)
      {
        if (sub_100C5063C(a2, (uint64_t)v25))
        {
          *(_DWORD *)uint64_t buf = 10;
          (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v24, 1, 0xFFFFFFFFLL, 0);
        }
      }
      else if (a5 == 1 && sub_100C5063C(a2, (uint64_t)v25))
      {
        *(_DWORD *)uint64_t buf = 4;
        (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, buf, v24, 1, 0xFFFFFFFFLL, 1);
      }
      break;
  }
LABEL_48:
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v25[3]) < 0) {
    operator delete(v25[1]);
  }
}

void sub_100C505E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100997A28((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100C5063C(uint64_t a1, uint64_t a2)
{
  *(CFAbsoluteTime *)a2 = CFAbsoluteTimeGetCurrent();
  int AddressString = BTDeviceGetAddressString();
  if (AddressString)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "BTDeviceGetAddressString failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      size_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    std::string::assign((std::string *)(a2 + 8), __s);
    if (BTDeviceGetDefaultName())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v6 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetDefaultName failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      if (*(char *)(a2 + 79) < 0)
      {
        **(unsigned char **)(a2 + 56) = 0;
        *(void *)(a2 + 64) = 0;
      }
      else
      {
        *(unsigned char *)(a2 + 56) = 0;
        *(unsigned char *)(a2 + 79) = 0;
      }
    }
    else
    {
      std::string::assign((std::string *)(a2 + 56), __s);
    }
    if (BTDeviceGetName())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v7 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetName failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        BOOL v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      if (*(char *)(a2 + 55) < 0)
      {
        **(unsigned char **)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
      }
      else
      {
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 55) = 0;
      }
    }
    else
    {
      std::string::assign((std::string *)(a2 + 32), __s);
    }
    if (BTDeviceGetDeviceType())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      int v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetDeviceType failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      *(_DWORD *)(a2 + 84) = 0;
    }
    if (BTDeviceGetDeviceClass())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      size_t v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetDeviceClass failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      *(_DWORD *)(a2 + 80) = 0;
    }
    if (BTDeviceGetConnectedServices())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v10 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetConnectedServices failed.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    *(_DWORD *)(a2 + 92) = 0;
    if (BTDeviceIsAppleAudioDevice())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      size_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceIsAppleAudioDevice failed.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
    *(unsigned char *)(a2 + 96) = 0;
    *(_DWORD *)(a2 + 88) = 0;
  }
  return AddressString == 0;
}

void sub_100C5102C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022EF358);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    int v10 = a3;
    __int16 v11 = 1024;
    int v12 = a5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "discovery status %d result %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback(BTDiscoveryAgent, BTDiscoveryStatus, BTDevice, BTResult)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_100C511F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v8[0] = 0;
  __int16 v16 = 0;
  int v17 = 0;
  int v18 = 0;
  *(_OWORD *)size_t v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)__int16 v11 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  char v15 = 0;
  if (a3 == 2)
  {
    if (sub_100C5063C(a4, (uint64_t)v9))
    {
      DWORD2(v14) = a5;
      int v7 = 2;
      (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v7, v8, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else if (a3 == 1)
  {
    if (sub_100C5063C(a4, (uint64_t)v9))
    {
      DWORD2(v14) = a5;
      int v7 = 3;
      (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v7, v8, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else if (!a3 && sub_100C5063C(a4, (uint64_t)v9))
  {
    DWORD2(v14) = a5;
    int v7 = 1;
    (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v7, v8, 1, 0xFFFFFFFFLL, 0);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
}

void sub_100C5139C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100997A28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C513BC(uint64_t a1)
{
  if (*(void *)(a1 + 112))
  {
    if (*(void *)(a1 + 128))
    {
      int v25 = 0;
      if (BTLocalDeviceGetModulePower())
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        pid_t v2 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "could not get module power", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 == -1) {
            goto LABEL_24;
          }
          goto LABEL_42;
        }
      }
      else
      {
        BOOL v6 = v25 == -1;
        *(unsigned char *)(a1 + 109) = v25 == -1;
        LOBYTE(v13) = 0;
        char v21 = 0;
        *(_OWORD *)long long v14 = 0u;
        long long v15 = 0u;
        *(_OWORD *)__int16 v16 = 0u;
        *(_OWORD *)__n128 __p = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        char v20 = 0;
        BOOL v22 = v6;
        int v23 = 0;
        int v24 = 0;
        *(_DWORD *)uint64_t buf = 9;
        (*(void (**)(uint64_t, uint8_t *, __int16 *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, buf, &v13, 1, 0xFFFFFFFFLL, 1);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        int v7 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = *(void *)(a1 + 112);
          int v9 = *(unsigned __int8 *)(a1 + 109);
          *(_DWORD *)uint64_t buf = 134218240;
          uint64_t v31 = v8;
          __int16 v32 = 1024;
          int v33 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BluetoothSession, %p, power, %d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022EF358);
          }
          uint64_t v10 = *(void *)(a1 + 112);
          int v11 = *(unsigned __int8 *)(a1 + 109);
          int v26 = 134218240;
          uint64_t v27 = v10;
          __int16 v28 = 1024;
          int v29 = v11;
          int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::updatePowerState()", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v16[0]);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(v14[1]);
        }
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_24;
        }
        goto LABEL_42;
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "no bluetooth session", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_24:
        __int16 v13 = 0;
        size_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLBluetoothService::updatePowerState()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_42:
      dispatch_once(&qword_102419630, &stru_1022EF358);
      goto LABEL_24;
    }
  }
}

void sub_100C519DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100997A28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C51A00(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 104;
      sub_100C55D44((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  if (*(void *)(a1 + 112))
  {
    if (*(void *)(a1 + 128))
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v14 = 0u;
      if (BTLocalDeviceGetConnectedDevices())
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        BOOL v6 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "BTLocalDeviceGetConnectedDevices failed", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 == -1) {
            goto LABEL_33;
          }
          goto LABEL_39;
        }
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        int v9 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          uint64_t v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "received %{public}zu connected devices", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022EF358);
          }
          int v12 = 134349056;
          uint64_t v13 = 0;
          int v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_33;
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "no session available - cannot get connected devices", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_33:
        LOWORD(v12) = 0;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return;
      }
LABEL_39:
      dispatch_once(&qword_102419630, &stru_1022EF358);
      goto LABEL_33;
    }
  }
}

void sub_100C522AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C52310(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100C52374(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100C523C8(uint64_t a1)
{
  if (*(void *)(a1 + 112))
  {
    if (*(void *)(a1 + 128))
    {
      if (!BTLocalDeviceAddCallbacks())
      {
        sub_100C513BC(a1);
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      pid_t v2 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "BTLocalDeviceAddCallbacks failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_24;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_24;
        }
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "no session available - cannot get connected devices", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_24:
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLBluetoothService::initializePowerState()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_28:
      dispatch_once(&qword_102419630, &stru_1022EF358);
      goto LABEL_24;
    }
  }
}

uint64_t sub_100C5273C(const char *a1)
{
  uint64_t v1 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (sscanf(a1, "%x:%x:%x:%x:%x:%x", v9, &v9[4], &v9[8], &v9[12], &v9[16], &v9[20]) == 6)
  {
    uint64_t v2 = 0;
    LODWORD(result) = 0;
    do
    {
      uint64_t result = v9[v2] | (result << 8);
      v2 += 4;
    }
    while (v2 != 12);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v1 + 23) >= 0) {
        uint64_t v5 = v1;
      }
      else {
        uint64_t v5 = (uint64_t *)*v1;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Input BT MAC address %s is malformed.", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static uint32_t CLBluetoothService::getOuiFromBtMacAddress(const std::string &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  return result;
}

void sub_100C52974(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  if (!os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 0;
    if (a2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  char v9 = 1;
  BOOL v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothLocalDeviceStatusEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  int v7 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    long long v15 = "activity";
    __int16 v16 = 2050;
    uint64_t v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothLocalDeviceStatusEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  if (!a2) {
LABEL_11:
  }
    sub_100C513BC(a4);
LABEL_12:
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C52B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C52B4C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 112)) {
    return 0;
  }
  if (!*(void *)(a1 + 128))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning could not get local device", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      LOWORD(v13.__r_.__value_.__l.__data_) = 0;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBluetoothService::setAFHChannelAvoidance(uint8_t *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
  int v3 = BTLocalDeviceSetAFHMap();
  uint64_t v4 = 0;
  memset(&v13, 0, sizeof(v13));
  do
  {
    snprintf(__str, 0xAuLL, "%02x ", *(unsigned __int8 *)(a2 + v4));
    std::string::append(&v13, __str);
    ++v4;
  }
  while (v4 != 10);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022EF358);
  }
  uint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    BOOL v6 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 136315394;
    uint64_t v20 = v6;
    __int16 v21 = 1024;
    int v22 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Setting AFH map: %s - result: %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    uint64_t v10 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    int v14 = 136315394;
    long long v15 = v10;
    __int16 v16 = 1024;
    int v17 = v3;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBluetoothService::setAFHChannelAvoidance(uint8_t *)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  BOOL v7 = v3 != 202;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_100C52EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C52F14(uint64_t a1, int *a2, unsigned int a3)
{
  *(void *)a1 = -1;
  *(_WORD *)(a1 + 8) = 0x7FFF;
  if (a3 > 0xA)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EF358);
    }
    int v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240448;
      int v15 = 10;
      __int16 v16 = 1026;
      int v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Max AFH channels cannot exceed %{public}d - input %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EF358);
      }
      std::string v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLBluetoothService::getAFHBitmapFromIntArray(uint8_t *, const unsigned int *, const unsigned int)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else if (a3)
  {
    uint64_t v6 = a3;
    do
    {
      unint64_t v7 = *a2;
      if (v7 > 0x4E)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EF358);
        }
        uint64_t v8 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          int v9 = *a2;
          *(_DWORD *)uint64_t buf = 67240448;
          int v15 = v9;
          __int16 v16 = 1026;
          int v17 = 78;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "AFH channel %{public}d cannot exceed %{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022EF358);
          }
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLBluetoothService::getAFHBitmapFromIntArray(uint8_t *, const unsigned int *, const unsigned int)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
      }
      else
      {
        *(unsigned char *)(a1 + (v7 >> 3)) &= ~(1 << (v7 & 7));
      }
      ++a2;
      --v6;
    }
    while (v6);
  }
  return a3 < 0xB;
}

void *sub_100C532DC@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100C53358()
{
  return 1;
}

uint64_t sub_100C53360()
{
  return 1;
}

void sub_100C53368()
{
}

void sub_100C53424(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100C53460()
{
}

void sub_100C53520(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100C5355C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022EF4D8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100C53640(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022EF338);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022EF338);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::removeClient(int) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100C538D0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100C53984(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100C539CC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100C53A14(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100C53A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102473420);
}

BOOL sub_100C53A88(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          int v23 = (uint64_t *)v17;
        }
        else {
          int v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          __int16 v28 = (uint64_t *)v24;
        }
        else {
          __int16 v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)int v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        __int16 v51 = 0;
        int v52 = 0;
        int v53 = 0;
        *(_OWORD *)&uint8_t buf[8] = 0u;
        long long v45 = 0u;
        *(_OWORD *)uint64_t v46 = 0u;
        *(_OWORD *)__n128 __p = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        char v50 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100C56598();
        }
        if (SHIBYTE(v48) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v46[0]);
        }
        if (SHIBYTE(v45) < 0) {
          operator delete(*(void **)&buf[16]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)int v41 = a1 + 64;
        char v29 = byte_102473421;
        int v38 = v16;
        *(void *)uint64_t buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        char v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        int v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    __int16 v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v36 = (void *)*v36;
    }
    *(_DWORD *)int v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = v40;
    int v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_100C53F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100997A28((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100C53FAC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022EF338);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100C54230(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022EF338);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  __int16 v28 = __p;
                }
                else {
                  __int16 v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022EF338);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100C54604(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  *(unsigned char *)a3 = *(unsigned char *)v12;
  *(void *)(a3 + 8) = *(void *)(v12 + 8);
  std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v12 + 16));
  std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v12 + 40));
  std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v12 + 64));
  long long v13 = *(_OWORD *)(v12 + 88);
  *(unsigned char *)(a3 + 104) = *(unsigned char *)(v12 + 104);
  *(_OWORD *)(a3 + 88) = v13;
  int v14 = *(_DWORD *)(v12 + 120);
  *(void *)(a3 + 112) = *(void *)(v12 + 112);
  *(_DWORD *)(a3 + 120) = v14;
  return 1;
}

uint64_t sub_100C546CC(uint64_t a1, int *a2, uint64_t a3)
{
  sub_100C555F8(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_100C54760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C54778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  __int16 v12 = 0;
  int v13 = 0;
  int v14 = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)int v7 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  char v11 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
}

void sub_100C5482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C54840(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022EF338);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF338);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022EF338);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022EF338);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              char v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                char v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022EF338);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            int v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                int v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100C54DF0(uint64_t a1)
{
  sub_100C56528(a1);

  operator delete();
}

id sub_100C54E28(uint64_t a1, int a2, void *a3)
{
  id result = sub_100C5585C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100C54E78(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C54EA8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_100C54ED8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100997A7C((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100C54F34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C54F50(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100C54F50(a1, *a2);
    sub_100C54F50(a1, a2[1]);
    sub_100C54FAC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100C54FAC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100C55024()
{
}

void sub_100C550EC()
{
}

void sub_100C55110(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_100C5585C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_100C55500(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022EF338);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                __int16 v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022EF338);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                __int16 v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100C55500(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100C5585C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_100C555F8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x98uLL);
  uint64_t result = sub_100C55654((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100C55640(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C55654(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022EF468;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)a2;
  sub_100997A7C(a1 + 32, a2 + 8);
  uint64_t v4 = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v4;
  return a1;
}

void sub_100C556BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100C556D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022EF468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C556F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022EF468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C55744(uint64_t a1)
{
  sub_100C55770((uint64_t)&v1, a1 + 24);
}

void sub_100C55770(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 16);
    operator delete(v3);
  }
}

uint64_t sub_100C557D8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 87) < 0) {
      operator delete(*(void **)(v1 + 64));
    }
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

id sub_100C5585C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100C558BC(a1);
}

id sub_100C558BC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022EF4A8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8A1A3 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBluetoothService_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022EF4A8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8A1A3 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022EF4A8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100C55C7C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100C55CAC(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_100C55D44((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100C55D44(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

uint64_t *sub_100C55DAC(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100C55E04(a1, *a2, a2 + 1);
  return a1;
}

void sub_100C55DEC(_Unwind_Exception *a1)
{
  sub_100C54F50(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100C55E04(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = sub_100C55E90(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          id v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          id v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100C55E90(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  int v6 = sub_100645F1C(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    id v8 = (uint64_t **)v6;
    sub_100C55F28((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100C55F94((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_100C55F28@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0xA0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100C54ED8(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100C55F7C(_Unwind_Exception *a1)
{
  sub_100C55F94(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100C55F94(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100C54FAC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_100C55FEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100644404(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = &v10[104 * v4];
  BOOL v16 = &v10[104 * v9];
  sub_100997A7C((uint64_t)v14, a2);
  int v15 = v14 + 104;
  sub_100C5610C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100C562F4(&v13);
  return v11;
}

void sub_100C560F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C562F4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C5610C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C56184((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C56184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 104);
      a3 -= 104;
      *(void *)(v8 - 104) = v9;
      v8 -= 104;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      long long v11 = *(_OWORD *)(a3 + 32);
      *(void *)(v8 + 48) = *(void *)(a3 + 48);
      *(_OWORD *)(v8 + 32) = v11;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 32) = 0;
      long long v12 = *(_OWORD *)(a3 + 56);
      *(void *)(v8 + 72) = *(void *)(a3 + 72);
      *(_OWORD *)(v8 + 56) = v12;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 56) = 0;
      long long v13 = *(_OWORD *)(a3 + 80);
      *(unsigned char *)(v8 + 96) = *(unsigned char *)(a3 + 96);
      *(_OWORD *)(v8 + 80) = v13;
      v7 -= 104;
    }
    while (a3 != a5);
    *((void *)&v19 + 1) = v8;
    uint64_t v14 = v19;
  }
  char v17 = 1;
  sub_100C56268((uint64_t)v16);
  return v14;
}

uint64_t sub_100C56268(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100C562A0((uint64_t *)a1);
  }
  return a1;
}

void sub_100C562A0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100C55D44(v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **sub_100C562F4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100C56328(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    sub_100C55D44(v4, i - 104);
  }
}

uint64_t *sub_100C56370(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100C5641C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100C55F94((uint64_t)v10, 0);
  }
  return v7;
}

double sub_100C5641C@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0xA0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1000DC48C(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }
  *((void *)v6 + 19) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100C564B4(_Unwind_Exception *a1)
{
  sub_100C55F94(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100C564CC(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_10012FFE0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_1000F0A30(a1, v3);
  sub_100C54FAC((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_100C56528(uint64_t a1)
{
  *(void *)a1 = off_1022EF4D8;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *uint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100C56598()
{
}

void sub_100C56660()
{
}

uint64_t sub_100C56684(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 87) < 0) {
      operator delete(*(void **)(v1 + 64));
    }
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100C56708(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = off_1022EF500;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  [*(void *)(a1 + 32) = objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:", @"CLRoutineMonitor")];
  [*(id *)(a1 + 8) silo];
  [*(id *)(a1 + 32) registerDelegate:a3 inSilo:[*(id *)(a1 + 8) silo]];
  [*(id *)(a1 + 32) setDelegateEntityName:"CLSubHarvesterAppExternal"];
  return a1;
}

void sub_100C567A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    sub_101A62790(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C567C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100C56800(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MaxHarvestApps", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_100C5685C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C56874()
{
}

void sub_100C5692C(uint64_t a1, unsigned int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EF5D0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAppExternal::onAppNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EF5D0);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAppExternal::onAppNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1013B182C(*(void *)(a4 + 24), a1, *a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C56AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C56B18(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2 registrationInfo:0];
}

id sub_100C56B2C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2];
}

id sub_100C56B3C(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = +[NSString stringWithUTF8String:v3];
  id v5 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLAppMonitor"];

  return _[v5 syncgetAppType:v4];
}

BOOL sub_100C56BA4(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

id sub_100C56BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_alloc((Class)CLLocation) initWithLatitude:*(double *)(a2 + 4) longitude:*(double *)(a2 + 12)];
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100C56C60;
  void v8[3] = &unk_1022EF560;
  v8[4] = a3;
  return [v6 fetchRoutineModeFromLocation:v5 withReply:v8];
}

uint64_t sub_100C56C60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100C56C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_alloc((Class)CLLocation) initWithLatitude:*(double *)(a2 + 4) longitude:*(double *)(a2 + 12)];
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100C56D24;
  void v8[3] = &unk_1022EF588;
  v8[4] = a3;
  return [v6 fetchLocationsOfInterestWithinDistance:v5 ofLocation:v8 withReply:200.0];
}

uint64_t sub_100C56D24(uint64_t a1, void *a2)
{
  if ([a2 count]) {
    [objc_msgSend(a2, "firstObject") type];
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v4();
}

void *sub_100C56D88(void *a1)
{
  *a1 = off_1022EF500;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100C56DF8(void *a1)
{
  *a1 = off_1022EF500;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete();
}

void sub_100C56E88(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C56EB8(uint64_t a1, void *a2, uint64_t a3, double *a4, char a5)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = off_1022EF600;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 9) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_OWORD *)(a1 + 184) = _Q0;
  *(void *)(a1 + 200) = 0xBFF0000000000000;
  uint64_t v10 = (int)(0.100000001 / *a4);
  *(void *)(a1 + 208) = off_1022AD0A0;
  *(void *)(a1 + 216) = v10;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  uint64_t v11 = (int)(0.100000001 / *a4);
  *(void *)(a1 + 280) = off_1022AD0A0;
  *(void *)(a1 + 288) = v11;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 472) = a5;
  *(void *)(a1 + 480) = *a2;
  *(double *)(a1 + 488) = *a4;
  *(_DWORD *)(a1 + 496) = 4;
  *(void *)(a1 + 504) = 0x3FA0A3D70A3D70A4;
  *(unsigned char *)(a1 + 512) = 1;
  *(void *)(a1 + 520) = off_1022AD0A0;
  *(void *)(a1 + 528) = 100;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = off_1022DE6C0;
  *(void *)(a1 + 600) = 20;
  *(void *)(a1 + 608) = off_1022DE6F0;
  *(void *)(a1 + 616) = 20;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 688) = off_1022DE6F0;
  *(void *)(a1 + 696) = 20;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 768) = off_1022DE6F0;
  *(void *)(a1 + 776) = 20;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 904) = 0;
  operator new[]();
}

void sub_100C57738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100B0AC5C(v15);
  v14[65] = a12;
  sub_1003A7340(v14 + 68);
  v14[35] = a13;
  sub_1003A7340(v14 + 38);
  v14[26] = a14;
  sub_1003A7340(v14 + 29);
  _Unwind_Resume(a1);
}

void *sub_100C5778C(void *a1)
{
  *a1 = off_1022EF600;
  if (a1[16]) {
    operator delete[]();
  }
  sub_100B0AC5C(a1 + 74);
  a1[65] = off_1022AD0A0;
  sub_1003A7340(a1 + 68);
  a1[35] = off_1022AD0A0;
  sub_1003A7340(a1 + 38);
  a1[26] = off_1022AD0A0;
  sub_1003A7340(a1 + 29);
  return a1;
}

void sub_100C5786C(void *a1)
{
  sub_100C5778C(a1);

  operator delete();
}

uint64_t sub_100C578A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_100C578AC(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 11) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  uint64_t v2 = *(void *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_101D73800, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_101D73810, 0xCuLL);
  *(unsigned char *)(a1 + 12) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(void *)(a1 + 184) = 0xBFF0000000000000;
  bzero((void *)(a1 + 352), 0xCuLL);
  bzero((void *)(a1 + 364), 0xCuLL);
  bzero((void *)(a1 + 376), 0x18uLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 448), 0x18uLL);
  bzero((void *)(a1 + 400), 0x18uLL);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  bzero((void *)(a1 + 848), 0xCuLL);
  bzero((void *)(a1 + 864), 0x18uLL);
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 904) = 0;
  sub_100B0AD14((void *)(a1 + 608));
  sub_100B0AD14((void *)(a1 + 688));
  sub_100B0AD14((void *)(a1 + 768));
  sub_1003A7544((void *)(a1 + 520));
  sub_1003A7544((void *)(a1 + 208));
  sub_1003A7544((void *)(a1 + 280));
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022EF6C8);
  }
  uint64_t v8 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 600);
    *(_DWORD *)uint64_t buf = 134217984;
    uint64_t v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "fAccelBuffer,size,%zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::reset()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

BOOL sub_100C57B94(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(unsigned __int8 *)(a1 + 9);
  if (*(unsigned char *)(a1 + 9))
  {
    *(float32x2_t *)a2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 376));
    float v3 = *(double *)(a1 + 392);
    *(float *)(a2 + 8) = v3;
  }
  return v2 != 0;
}

void sub_100C57BCC(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, void *a5)
{
  *(void *)(a1 + 168) = *a5;
  ++*(_DWORD *)(a1 + 152);
  float v7 = *a4;
  float32x2_t v8 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))), *(float64x2_t *)(a1 + 88)));
  float32x2_t v50 = v8;
  float v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  float v51 = v9;
  *(float *)(a1 + 164) = v9;
  *(float32x2_t *)(a1 + 156) = v50;
  float v10 = v8.f32[1];
  float32x2_t v28 = v8;
  float v29 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v8.f32[1], v8, 1), v8.f32[0], v8.f32[0]) + (float)(v9 * v9));
  sub_1001A44F4(a1 + 520, &v29);
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
    }
    uint64_t v11 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134218752;
      double v41 = (float)(v29 / 0.017453);
      __int16 v42 = 2048;
      double v43 = (float)(v28.f32[0] / 0.017453);
      __int16 v44 = 2048;
      double v45 = (float)(v10 / 0.017453);
      __int16 v46 = 2048;
      double v47 = (float)(v9 / 0.017453);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "omegaMag9, %.3f, omega, %.3f, %.3f, %.3f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      int v30 = 134218752;
      double v31 = (float)(v29 / 0.017453);
      __int16 v32 = 2048;
      double v33 = (float)(v28.f32[0] / 0.017453);
      __int16 v34 = 2048;
      double v35 = (float)(v10 / 0.017453);
      __int16 v36 = 2048;
      double v37 = (float)(v9 / 0.017453);
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  sub_100C580E4(a1 + 16, &v50, (double *)(a1 + 480));
  float32x2_t v12 = vadd_f32(*(float32x2_t *)(a1 + 136), v28);
  *(float32x2_t *)(a1 + 136) = v12;
  float v13 = *(float *)(a1 + 144) + v9;
  *(float *)(a1 + 144) = v13;
  ++*(_DWORD *)(a1 + 148);
  double v14 = *(double *)(a1 + 480)
      * (*(double *)(a1 + 480)
       * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v12, v12).i32[1]), v12.f32[0], v12.f32[0]) + (float)(v13 * v13)));
  if (v14 > 0.122500002) {
    sub_100C58180(a1, v14, (int32x2_t)0x3FBF5C2900000000);
  }
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    int v15 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *(double *)(a1 + 16);
      double v17 = *(double *)(a1 + 24);
      double v18 = *(double *)(a1 + 32);
      double v19 = *(double *)(a1 + 40);
      uint64_t v20 = *a5;
      *(_DWORD *)uint64_t buf = 134219008;
      double v41 = v16;
      __int16 v42 = 2048;
      double v43 = v17;
      __int16 v44 = 2048;
      double v45 = v18;
      __int16 v46 = 2048;
      double v47 = v19;
      __int16 v48 = 2048;
      uint64_t v49 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v22 = *(double *)(a1 + 16);
      double v23 = *(double *)(a1 + 24);
      double v24 = *(double *)(a1 + 32);
      double v25 = *(double *)(a1 + 40);
      uint64_t v26 = *a5;
      int v30 = 134219008;
      double v31 = v22;
      __int16 v32 = 2048;
      double v33 = v23;
      __int16 v34 = 2048;
      double v35 = v24;
      __int16 v36 = 2048;
      double v37 = v25;
      __int16 v38 = 2048;
      uint64_t v39 = v26;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
}

double sub_100C580E4(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v4 = *a3;
  float64x2_t v9 = vmulq_n_f64(vcvtq_f64_f32(*a2), *a3);
  double v10 = v4 * a2[1].f32[0];
  sub_100C5870C(v8, v9.f64);
  sub_100A1D6D4((double *)v7, v8, (double *)a1);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_100C58180(uint64_t result, double a2, int32x2_t a3)
{
  int v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    uint64_t v4 = result;
    id v5 = (void *)(result + 136);
    *(float *)a3.i32 = (float)v3;
    int32x2_t v22 = a3;
    float v6 = *(float *)(result + 136) / (float)v3;
    double v26 = *(double *)(result + 480) * (double)v3;
    double v7 = v26;
    *(_DWORD *)(result + 148) = 0;
    double v20 = exp(v7 / -5000.0);
    float32x2_t v21 = vdiv_f32(*(float32x2_t *)(v4 + 140), (float32x2_t)vdup_lane_s32(v22, 0));
    bzero(v5, 0xCuLL);
    float32x2_t v8 = v21;
    *(float64x2_t *)(v4 + 88) = vmulq_n_f64(*(float64x2_t *)(v4 + 88), v20);
    *(double *)(v4 + 104) = v20 * *(double *)(v4 + 104);
    v41[0] = 0;
    v41[1] = v21.i32[1];
    _S9 = v21.i32[1];
    float32x2_t v42 = vneg_f32(v21);
    int v43 = 0;
    float v44 = v6;
    __int32 v45 = v21.i32[0];
    float v46 = -v6;
    int v47 = 0;
    float v10 = vmul_f32(v8, v8).f32[0];
    float v11 = vmuls_lane_f32(v21.f32[1], v21, 1);
    v33[0] = -(float)(v10 + v11);
    v33[1] = v6 * v21.f32[0];
    float v34 = vmuls_lane_f32(v6, v21, 1);
    float v35 = v6 * v21.f32[0];
    float v36 = -(float)((float)(v6 * v6) + v11);
    float v37 = vmuls_lane_f32(v8.f32[0], v8, 1);
    float v38 = v34;
    float v39 = v37;
    float v40 = -(float)((float)(v6 * v6) + v10);
    sub_100B07FDC((uint64_t)v32, &v26, (uint64_t)v41, (uint64_t)v33);
    uint64_t v12 = *(void *)(v4 + 112);
    v4 += 112;
    sub_100B081E0(v32, v12, 6);
    v25[0] = &v30;
    v25[1] = &v29;
    _V1.S[1] = v21.i32[1];
    __asm { FMLA            S0, S9, V1.S[1] }
    double v23 = (float)(*(float *)v22.i32 * 0.00000021323) * 0.5;
    double v24 = 2.76135698e-10 / (7.0 / (exp((0.11 - sqrtf(_S0)) / 0.012) + 1.0) + 1.0);
    sub_100B08274(v31, &v26, (uint64_t)v41, &v23, &v24);
    sub_100B084B8(v25, (uint64_t)v31, 6);
    double result = sub_100B08650((uint64_t)&v27, (uint64_t *)v4, (uint64_t)v32, (uint64_t *)v25, 6);
    uint64_t v19 = *(void *)(v4 + 8);
    *(_OWORD *)uint64_t v19 = v27;
    *(void *)(v19 + 16) = v28;
  }
  return result;
}

double sub_100C583D4(uint64_t a1, float32x2_t *a2, float *a3)
{
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    float v6 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v7 = a2->f32[0];
      double v8 = a2->f32[1];
      double v9 = a2[1].f32[0];
      double v10 = *a3;
      double v11 = a3[1];
      double v12 = a3[2];
      *(_DWORD *)uint64_t buf = 134219264;
      *(double *)&uint8_t buf[4] = v7;
      __int16 v38 = 2048;
      double v39 = v8;
      __int16 v40 = 2048;
      double v41 = v9;
      __int16 v42 = 2048;
      double v43 = v10;
      __int16 v44 = 2048;
      double v45 = v11;
      __int16 v46 = 2048;
      double v47 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v19 = a2->f32[0];
      double v20 = a2->f32[1];
      double v21 = a2[1].f32[0];
      double v22 = *a3;
      double v23 = a3[1];
      double v24 = a3[2];
      *(_DWORD *)double v26 = 134219264;
      *(double *)&v26[4] = v19;
      __int16 v27 = 2048;
      double v28 = v20;
      __int16 v29 = 2048;
      double v30 = v21;
      __int16 v31 = 2048;
      double v32 = v22;
      __int16 v33 = 2048;
      double v34 = v23;
      __int16 v35 = 2048;
      double v36 = v24;
      double v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
  }
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v13 = 0;
    double result = *(double *)a3;
    *(void *)uint64_t buf = *(void *)a3;
    *(float *)&uint8_t buf[8] = a3[2];
    LODWORD(result) = 897988541;
    do
    {
      float v15 = *(float *)&buf[v13];
      if (v15 < 0.000001) {
        float v15 = 0.000001;
      }
      *(float *)&buf[v13] = v15;
      v13 += 4;
    }
    while (v13 != 12);
    int v16 = *(_DWORD *)(a1 + 152);
    if (v16 >= 1)
    {
      if (v16 >= 50) {
        int v17 = 50;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 152);
      }
      do
      {
        *(float32x2_t *)double v26 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        float v18 = a2[1].f32[0] - *(double *)(a1 + 104);
        *(float *)&char v26[8] = v18;
        double result = sub_100B07870(a1, (uint64_t)v26, (uint64_t *)buf);
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a1 + 152) = 0;
  }
  else
  {
    *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(*a2);
    double result = a2[1].f32[0];
    *(double *)(a1 + 104) = result;
    *(unsigned char *)(a1 + 12) = 1;
  }
  return result;
}

void sub_100C5870C(double *a1, double *a2)
{
  double v4 = *a2;
  double v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    __double2 v13 = __sincos_stret(v5 * 0.5);
    double cosval = v13.__cosval;
    *a1 = v4 * (v13.__sinval / v5);
    a1[1] = v13.__sinval / v5 * a2[1];
    double v11 = v13.__sinval / v5 * a2[2];
  }
  else
  {
    *a1 = v4 * 0.5;
    double v6 = a2[1] * 0.5;
    a1[1] = v6;
    double v7 = a2[2] * 0.5;
    double v8 = v5 * v5 * 0.125;
    double v9 = 1.0 - v8;
    double v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    double v11 = v7 / v10;
    double cosval = v9 / v10;
  }
  a1[2] = v11;
  a1[3] = cosval;
}

double sub_100C587E4(double *a1)
{
  sub_100C588E0(a1 + 2, a1 + 47, v20);
  double v2 = a1[5];
  double v3 = a1[4] + a1[4];
  double v4 = a1[2];
  double v5 = a1[3];
  double v6 = v2 * (v5 + v5) - v4 * v3;
  double v7 = -(v2 * (v4 + v4)) - v5 * v3;
  double v8 = -1.0;
  double v9 = v4 * (v4 + v4) + -1.0 + v5 * (v5 + v5);
  uint64_t v19 = 0x3F8000003F800000;
  v17.i64[0] = 0;
  v17.i64[1] = 0x3F80000000000000;
  *(float *)&double v3 = v20[0];
  *(float *)&double v2 = v20[1];
  *(float *)&double v4 = v20[2];
  *(float *)&double v5 = v6;
  float v10 = v7;
  *(float *)&double v6 = v9;
  if (sub_100B9BF10((float *)&v19, &v17, (uint64_t)v18, *(float *)&v3, *(float *)&v2, *(float *)&v4, *(float *)&v5, v10, *(float *)&v6, v9, v7, v11, v12, v13, v14, v15, 0x3F800000uLL, 0.0))
  {
    return sub_100B9D07C(v17.f32);
  }
  return v8;
}

double sub_100C588E0(double *a1, double *a2, double *a3)
{
  double v4 = a1[2];
  double v3 = a1[3];
  double v5 = v3 + v3;
  double v6 = a1[1];
  double v7 = *a1 + *a1;
  double v8 = v6 + v6;
  double v9 = v3 * (v3 + v3);
  double v10 = (v6 + v6) * v6 + -1.0;
  double v11 = (v4 + v4) * v4 + -1.0;
  double v12 = v7 * v6;
  double v13 = v7 * v4;
  double v14 = v3 * v7;
  double v15 = v8 * v4;
  double v16 = v3 * v8;
  double v17 = v5 * v4;
  *a3 = (v12 + v17) * a2[1] + (v9 + (*a1 + *a1) * *a1 + -1.0) * *a2 + (v13 - v16) * a2[2];
  a3[1] = (v9 + v10) * a2[1] + (v12 - v17) * *a2 + (v14 + v15) * a2[2];
  double result = (v15 - v14) * a2[1] + (v13 + v16) * *a2 + (v9 + v11) * a2[2];
  a3[2] = result;
  return result;
}

void sub_100C58994(uint64_t a1, double *a2, double *a3, double *a4, void *a5)
{
  v10.f64[0] = *a2;
  float v11 = *a2;
  *(float *)(a1 + 352) = v11;
  double v12 = *a3;
  float v13 = *a3;
  *(float *)(a1 + 356) = v13;
  double v14 = *a4;
  float v15 = *a4;
  *(float *)(a1 + 360) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_100A1D5EC(a1 + 16, a2, a3, a4);
    *(void *)(a1 + 176) = *a5;
    float v16 = *a2;
    *(float *)(a1 + 848) = v16;
    float v17 = *a3;
    *(float *)(a1 + 852) = v17;
    float v18 = *a4;
    *(float *)(a1 + 856) = v18;
    *(_DWORD *)(a1 + 888) = 0;
    sub_100B07F84((double *)(a1 + 864), (double *)(a1 + 16));
    *(unsigned char *)(a1 + 8) = 1;
    return;
  }
  v10.f64[1] = v12;
  float32x2_t v19 = vcvt_f32_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 848)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), v10));
  *(float32x2_t *)(a1 + 848) = v19;
  float v20 = *(float *)(a1 + 856) * 0.1 + v14 * 0.9;
  *(float *)(a1 + 856) = v20;
  *(double *)uint64_t buf = v19.f32[0];
  *(double *)int v138 = v19.f32[1];
  double v134 = v20;
  sub_100B0AD90(a1 + 608, (double *)buf);
  sub_100B0AD90(a1 + 688, (double *)v138);
  sub_100B0AD90(a1 + 768, &v134);
  *(void *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148)) {
    return;
  }
  double v21 = *(double *)a5;
  double v22 = *(double *)(a1 + 168);
  if (*(double *)a5 < v22) {
    return;
  }
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v23 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v24 = *a2;
      double v25 = *a3;
      double v26 = *a4;
      double v27 = *(double *)a5;
      *(_DWORD *)uint64_t buf = 134218752;
      *(double *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      double v151 = v26;
      __int16 v152 = 2048;
      double v153 = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v92 = *a2;
      double v93 = *a3;
      double v94 = *a4;
      double v95 = *(double *)a5;
      *(_DWORD *)int v138 = 134218752;
      *(double *)&v138[4] = v92;
      *(_WORD *)&v138[12] = 2048;
      *(double *)&v138[14] = v93;
      *(_WORD *)&v138[22] = 2048;
      double v139 = v94;
      __int16 v140 = 2048;
      double v141 = v95;
      int v96 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v96);
      if (v96 != buf) {
        free(v96);
      }
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v28 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v29 = *(float *)(a1 + 156);
      double v30 = *(float *)(a1 + 160);
      double v31 = *(float *)(a1 + 164);
      unint64_t v32 = *(void *)(a1 + 584);
      if (v32) {
        float v33 = *(float *)(a1 + 536) / (float)v32;
      }
      else {
        float v33 = 0.0;
      }
      *(_DWORD *)uint64_t buf = 134218752;
      *(double *)&uint8_t buf[4] = v29;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2048;
      double v151 = v31;
      __int16 v152 = 2048;
      double v153 = v33;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[RotationRate9] %.3f, %.3f, %.3f, %.3f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v97 = *(float *)(a1 + 156);
      double v98 = *(float *)(a1 + 160);
      double v99 = *(float *)(a1 + 164);
      unint64_t v100 = *(void *)(a1 + 584);
      if (v100) {
        float v101 = *(float *)(a1 + 536) / (float)v100;
      }
      else {
        float v101 = 0.0;
      }
      *(_DWORD *)int v138 = 134218752;
      *(double *)&v138[4] = v97;
      *(_WORD *)&v138[12] = 2048;
      *(double *)&v138[14] = v98;
      *(_WORD *)&v138[22] = 2048;
      double v139 = v99;
      __int16 v140 = 2048;
      double v141 = v101;
      int v108 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v108);
      if (v108 != buf) {
        free(v108);
      }
    }
  }
  double v35 = *a3;
  *(double *)&long long v148 = *a2;
  double v34 = *(double *)&v148;
  *((double *)&v148 + 1) = v35;
  double v149 = *a4;
  double v36 = v149;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  float v129 = *(float *)(a1 + 140);
  float v130 = *(float *)&v22;
  LODWORD(v21) = *(_DWORD *)(a1 + 144);
  int v37 = *(_DWORD *)(a1 + 148);
  float v128 = *(float *)&v21;
  sub_100C58180(a1, v21, *(int32x2_t *)&v22);
  double v38 = sqrt(v35 * v35 + v34 * v34 + v36 * v36);
  double v39 = fabs(v38 + -1.0) / v38;
  if (v39 > 0.1) {
    return;
  }
  if (!*(unsigned char *)(a1 + 512) || *(_DWORD *)(a1 + 904)) {
    goto LABEL_22;
  }
  float v63 = fabsf(*(float *)(a1 + 156));
  if (v63 > 10.0) {
    goto LABEL_82;
  }
  float v64 = fabsf(*(float *)(a1 + 160));
  if (v64 > 10.0) {
    goto LABEL_82;
  }
  float v65 = fabsf(*(float *)(a1 + 164));
  if (v65 > 10.0) {
    goto LABEL_82;
  }
  unint64_t v66 = *(void *)(a1 + 584);
  if (v66)
  {
    if ((float)(*(float *)(a1 + 536) / (float)v66) > 10.0) {
      goto LABEL_82;
    }
  }
  if (v63 > 3.14159265
    || v64 > 3.14159265
    || v65 > 3.14159265
    || (!v66 ? (float v67 = 0.0) : (float v67 = *(float *)(a1 + 536) / (float)v66), v67 > 3.14159265))
  {
    if (v66 < 2
      || (float v68 = (float)((float)v66 * *(float *)(a1 + 540)) - (float)(*(float *)(a1 + 536) * *(float *)(a1 + 536)),
          v68 < 0.0)
      || (float)(v68 / (float)((v66 - 1) * v66)) < 1.25)
    {
      sub_100B07F84((double *)(a1 + 864), (double *)(a1 + 16));
      if (!*(unsigned char *)(a1 + 472))
      {
        *(_DWORD *)(a1 + 888) = 0;
        goto LABEL_28;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      uint64_t v69 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        *(_WORD *)int v138 = 0;
        __int16 v70 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v70);
        if (v70 != buf) {
          free(v70);
        }
      }
LABEL_22:
      int v40 = *(unsigned __int8 *)(a1 + 472);
      *(_DWORD *)(a1 + 888) = 0;
      if (v40)
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        double v41 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134218752;
          *(double *)&uint8_t buf[4] = v34;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2048;
          double v151 = v36;
          __int16 v152 = 2048;
          double v153 = v38;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "accM, (%.4f, %.4f, %.4f), mag, %.3f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022EF6C8);
          }
          *(_DWORD *)int v138 = 134218752;
          *(double *)&v138[4] = v34;
          *(_WORD *)&v138[12] = 2048;
          *(double *)&v138[14] = v35;
          *(_WORD *)&v138[22] = 2048;
          double v139 = v36;
          __int16 v140 = 2048;
          double v141 = v38;
          int v107 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v107);
          if (v107 != buf) {
            free(v107);
          }
        }
      }
LABEL_28:
      double v42 = v39
          * (0.015
           / (exp((0.9- sqrtf((float)((float)((float)(v129 / (float)v37) * (float)(v129 / (float)v37))+ (float)((float)(v130 / (float)v37) * (float)(v130 / (float)v37)))+ (float)((float)(v128 / (float)v37) * (float)(v128 / (float)v37))))/ 0.08)+ 1.0))+ 0.00000900000032;
      if (*(unsigned char *)(a1 + 512) && !*(_DWORD *)(a1 + 904)) {
        double v42 = v42 * 0.85;
      }
      *(double *)&long long v148 = v34 / v38;
      *((double *)&v148 + 1) = v35 / v38;
      double v149 = v36 / v38;
      sub_100C5A65C(a1, (double *)&v148, v42);
      if (*(unsigned char *)(a1 + 512)) {
        sub_100B07F84((double *)(a1 + 864), (double *)(a1 + 16));
      }
      *(void *)(a1 + 896) = *a5;
      int v43 = *(_DWORD *)(a1 + 904);
      BOOL v44 = __OFSUB__(v43, 1);
      int v45 = v43 - 1;
      if (v45 < 0 == v44)
      {
        *(_DWORD *)(a1 + 904) = v45;
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        __int16 v46 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Doing some crude updates to catch up.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022EF6C8);
          }
          *(_WORD *)int v138 = 0;
          uint64_t v106 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v106);
          if (v106 != buf) {
            free(v106);
          }
        }
      }
      if (*(unsigned char *)(a1 + 472))
      {
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_1022EF708);
        }
        double v47 = qword_102419098;
        if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v48 = *(void *)(a1 + 64);
          uint64_t v49 = *(void *)(a1 + 72);
          double v50 = *(double *)(a1 + 80);
          double v51 = *(double *)(a1 + 88);
          double v52 = *(double *)(a1 + 96);
          double v53 = *(double *)(a1 + 104);
          uint64_t v54 = *a5;
          *(_DWORD *)uint64_t buf = 134219520;
          *(void *)&uint8_t buf[4] = v48;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v49;
          *(_WORD *)&buf[22] = 2048;
          double v151 = v50;
          __int16 v152 = 2048;
          double v153 = v51;
          __int16 v154 = 2048;
          double v155 = v52;
          __int16 v156 = 2048;
          double v157 = v53;
          __int16 v158 = 2048;
          uint64_t v159 = v54;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419090 != -1) {
            dispatch_once(&qword_102419090, &stru_1022EF708);
          }
          uint64_t v55 = *(void *)(a1 + 64);
          uint64_t v56 = *(void *)(a1 + 72);
          double v57 = *(double *)(a1 + 80);
          double v58 = *(double *)(a1 + 88);
          double v59 = *(double *)(a1 + 96);
          double v60 = *(double *)(a1 + 104);
          uint64_t v61 = *a5;
          *(_DWORD *)int v138 = 134219520;
          *(void *)&v138[4] = v55;
          *(_WORD *)&v138[12] = 2048;
          *(void *)&v138[14] = v56;
          *(_WORD *)&v138[22] = 2048;
          double v139 = v57;
          __int16 v140 = 2048;
          double v141 = v58;
          __int16 v142 = 2048;
          double v143 = v59;
          __int16 v144 = 2048;
          double v145 = v60;
          __int16 v146 = 2048;
          uint64_t v147 = v61;
          __int16 v62 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v62);
LABEL_48:
          if (v62 != buf) {
            free(v62);
          }
          return;
        }
      }
      return;
    }
  }
  sub_100B0A640(a1 + 592, (uint64_t)&v134);
  double v127 = sqrt(v136 * v136 + v135 * v135 + v137 * v137);
  double v71 = *(double *)(a1 + 896);
  if (v71 > 0.0 && *(double *)(a1 + 176) - v71 > 15.0 && v127 < 0.3)
  {
    sub_100B0A720(a1 + 592, (uint64_t)buf);
    if (fabs(sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v151 * v151)+ -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 904) = 10;
      if (!*(unsigned char *)(a1 + 472)) {
        goto LABEL_178;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      int v90 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_178;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419080 == -1) {
        goto LABEL_115;
      }
      goto LABEL_210;
    }
  }
  if (*(_DWORD *)(a1 + 680) <= (int)((double)*(unint64_t *)(a1 + 600) * 0.5))
  {
LABEL_82:
    sub_100B07F84((double *)(a1 + 864), (double *)(a1 + 16));
    return;
  }
  uint64_t v72 = *(void *)(a1 + 584);
  if (v72) {
    float v73 = *(float *)(*(void *)(*(void *)(a1 + 552)
  }
                               + (((unint64_t)(v72 + *(void *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v72 + *(void *)(a1 + 576) - 1) & 0x3FF));
  else {
    float v73 = 0.0;
  }
  if (v73 > 0.2)
  {
    sub_100B07F84((double *)(a1 + 864), (double *)(a1 + 16));
    if (*(unsigned char *)(a1 + 472))
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      uint64_t v74 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v75 = *(void *)(a1 + 864);
        uint64_t v76 = *(void *)(a1 + 872);
        double v77 = *(double *)(a1 + 880);
        *(_DWORD *)uint64_t buf = 134218496;
        *(void *)&uint8_t buf[4] = v75;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v76;
        *(_WORD *)&buf[22] = 2048;
        double v151 = v77;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "grabing gravity, %.4f, %.4f, %.4f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        uint64_t v116 = *(void *)(a1 + 864);
        uint64_t v117 = *(void *)(a1 + 872);
        double v118 = *(double *)(a1 + 880);
        *(_DWORD *)int v138 = 134218496;
        *(void *)&v138[4] = v116;
        *(_WORD *)&v138[12] = 2048;
        *(void *)&v138[14] = v117;
        *(_WORD *)&v138[22] = 2048;
        double v139 = v118;
        int v119 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v119);
        if (v119 != buf) {
          free(v119);
        }
      }
    }
  }
  if (v127 <= *(double *)(a1 + 504) * 0.75) {
    goto LABEL_178;
  }
  double v78 = *(double *)(a1 + 864);
  double v79 = *(double *)(a1 + 872);
  double v80 = *(double *)(a1 + 880);
  double v81 = fabs(v136 * v79 + v135 * v78 + v137 * v80);
  double v126 = v127 - v81;
  double v82 = *(double *)(a1 + 624);
  double v83 = *(double *)(a1 + 704);
  double v84 = *(double *)(a1 + 784);
  double v85 = v79 * v83 + v82 * v78 + v84 * v80;
  double v131 = v82 - v85 * v78;
  double v132 = v83 - v85 * v79;
  double v133 = v84 - v85 * v80;
  double v124 = v85;
  double v125 = fabs(v133) + fabs(v131) + fabs(v132);
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
    }
    long long v86 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134219264;
      *(double *)&uint8_t buf[4] = v135;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v136;
      *(_WORD *)&buf[22] = 2048;
      double v151 = v137;
      __int16 v152 = 2048;
      double v153 = v127;
      __int16 v154 = 2048;
      double v155 = v81;
      __int16 v156 = 2048;
      double v157 = v127 - v81;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      *(_DWORD *)int v138 = 134219264;
      *(double *)&v138[4] = v135;
      *(_WORD *)&v138[12] = 2048;
      *(double *)&v138[14] = v136;
      *(_WORD *)&v138[22] = 2048;
      double v139 = v137;
      __int16 v140 = 2048;
      double v141 = v127;
      __int16 v142 = 2048;
      double v143 = v81;
      __int16 v144 = 2048;
      double v145 = v127 - v81;
      int v120 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v120);
      if (v120 != buf) {
        free(v120);
      }
    }
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
    }
    long long v87 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134219008;
      *(double *)&uint8_t buf[4] = v131;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v132;
      *(_WORD *)&buf[22] = 2048;
      double v151 = v133;
      __int16 v152 = 2048;
      double v153 = v124;
      __int16 v154 = 2048;
      double v155 = v125;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      *(_DWORD *)int v138 = 134219008;
      *(double *)&v138[4] = v131;
      *(_WORD *)&v138[12] = 2048;
      *(double *)&v138[14] = v132;
      *(_WORD *)&v138[22] = 2048;
      double v139 = v133;
      __int16 v140 = 2048;
      double v141 = v124;
      __int16 v142 = 2048;
      double v143 = v125;
      int v121 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v121);
      if (v121 != buf) {
        free(v121);
      }
    }
  }
  if (v126 > *(double *)(a1 + 504)) {
    goto LABEL_129;
  }
  unint64_t v88 = *(void *)(a1 + 584);
  if (v88) {
    float v89 = *(float *)(a1 + 536) / (float)v88;
  }
  else {
    float v89 = 0.0;
  }
  BOOL v102 = v89 <= 1.57079633;
  double v103 = 0.0;
  if (!v102) {
    double v103 = 1.0;
  }
  if (v125 > (v103 * 0.5 + 1.0) * 6.0)
  {
LABEL_129:
    *(_DWORD *)(a1 + 888) = 0;
    return;
  }
  if (v126 >= 0.01 || v125 >= 0.6)
  {
    int v109 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v109;
    if (!v88) {
      goto LABEL_168;
    }
    int v110 = (int *)(a1 + 888);
    float v104 = *(float *)(a1 + 536) / (float)v88;
  }
  else
  {
    if (!v88)
    {
      int v109 = *(_DWORD *)(a1 + 888) + 1;
      *(_DWORD *)(a1 + 888) = v109;
      goto LABEL_168;
    }
    float v104 = *(float *)(a1 + 536) / (float)v88;
    if (v104 > 0.5)
    {
      if (!*(unsigned char *)(a1 + 472)) {
        goto LABEL_178;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      double v105 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_178;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419080 == -1) {
        goto LABEL_115;
      }
LABEL_210:
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
LABEL_115:
      *(_WORD *)int v138 = 0;
      int v91 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v91);
      if (v91 != buf) {
        free(v91);
      }
      goto LABEL_178;
    }
    int v110 = (int *)(a1 + 888);
    int v109 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v109;
  }
  if (v104 > 1.0
    && *(float *)(*(void *)(*(void *)(a1 + 552) + (((v88 + *(void *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                + 4 * ((v88 + *(void *)(a1 + 576) - 1) & 0x3FF)) < 0.2)
  {
    sub_100B0A720(a1 + 592, (uint64_t)buf);
    double v111 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v151 * v151);
    if (fabs(v111 + -1.0) / v111 >= 0.025)
    {
      int v109 = *v110;
    }
    else
    {
      if (*(unsigned char *)(a1 + 472))
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        int v112 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022EF6C8);
          }
          *(_WORD *)int v138 = 0;
          int v123 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v123);
          if (v123 != buf) {
            free(v123);
          }
        }
      }
      int v109 = *v110 + 2;
      *int v110 = v109;
    }
  }
LABEL_168:
  if (v109 >= *(_DWORD *)(a1 + 496))
  {
LABEL_178:
    if (*(unsigned char *)(a1 + 512))
    {
      if (v127 > 0.2)
      {
        unint64_t v114 = *(void *)(a1 + 584);
        if (!v114
          || *(float *)(*(void *)(*(void *)(a1 + 552)
                                  + (((v114 + *(void *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v114 + *(void *)(a1 + 576) - 1) & 0x3FF)) < 0.75
          && (float)(*(float *)(a1 + 536) / (float)v114) < 1.0)
        {
          sub_100B0A720(a1 + 592, (uint64_t)v138);
          double v35 = *(double *)&v138[16];
          double v34 = *(double *)&v138[8];
          double v36 = v139;
          long long v148 = *(_OWORD *)&v138[8];
          double v149 = v139;
          if (*(unsigned char *)(a1 + 472))
          {
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022EF6C8);
            }
            int v115 = qword_102419088;
            if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "using mean accel", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419080 != -1) {
                dispatch_once(&qword_102419080, &stru_1022EF6C8);
              }
              LOWORD(v134) = 0;
              uint64_t v122 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v122);
              if (v122 != buf) {
                free(v122);
              }
            }
          }
          double v38 = sqrt(v35 * v35 + v34 * v34 + v36 * v36);
          double v39 = fabs(v38 + -1.0) / v38;
        }
      }
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
    }
    CFAbsoluteTime v113 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "Taking another look.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      *(_WORD *)int v138 = 0;
      __int16 v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v62);
      goto LABEL_48;
    }
  }
}

void sub_100C5A65C(uint64_t a1, double *a2, double a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  double v8 = *(double *)(a1 + 40);
  double v9 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v10 = *(double *)(a1 + 16);
  double v11 = *(double *)(a1 + 24);
  double v12 = v8 * (v11 + v11) - v10 * v9;
  double v13 = -(v8 * (v10 + v10)) - v11 * v9;
  double v14 = v10 * (v10 + v10) + -1.0 + v11 * (v11 + v11);
  *(float *)&double v9 = v13;
  *(float *)&double v8 = v14;
  v52[0] = 0;
  v52[1] = LODWORD(v8);
  *(float *)&v52[2] = -*(float *)&v9;
  *(float *)&double v10 = v12;
  *(float *)&v52[3] = -*(float *)&v8;
  v52[4] = 0;
  v52[5] = LODWORD(v10);
  v52[6] = LODWORD(v9);
  *(float *)&v52[7] = -*(float *)&v10;
  v52[8] = 0;
  do
  {
    for (uint64_t i = 0; i != 9; i += 3)
      *(_DWORD *)&v50[v6 * 4 + i * 4] = v52[v6 + i];
    ++v7;
    ++v6;
  }
  while (v7 != 3);
  bzero(&v51, 0x24uLL);
  float v16 = a3;
  *(float *)uint64_t v49 = v16;
  *(float *)&v49[1] = v16;
  *(float *)&_OWORD v49[2] = v16;
  float v17 = *a2 - v12;
  float v18 = a2[1] - v13;
  *(float *)uint64_t v48 = v17;
  *(float *)&v48[1] = v18;
  float v19 = a2[2] - v14;
  *(float *)&v48[2] = v19;
  sub_100B079B8(&v45, (uint64_t *)(a1 + 112), (uint64_t)v50, (uint64_t)v49, (uint64_t)v48, 6, 3, (uint64_t)v44);
  double v20 = v13 * v46 + v45 * v12 + v47 * v14;
  double v21 = v45 - v20 * v12;
  double v22 = v46 - v20 * v13;
  double v45 = v21;
  double v46 = v22;
  double v23 = v47 - v20 * v14;
  double v47 = v23;
  sub_100C5A9F8(a1, &v45);
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v24 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(a1 + 88);
      uint64_t v26 = *(void *)(a1 + 96);
      uint64_t v27 = *(void *)(a1 + 104);
      uint64_t v28 = *(void *)(a1 + 176);
      *(_DWORD *)uint64_t buf = 134219520;
      double v31 = v21;
      __int16 v32 = 2048;
      double v33 = v22;
      __int16 v34 = 2048;
      double v35 = v23;
      __int16 v36 = 2048;
      uint64_t v37 = v25;
      __int16 v38 = 2048;
      uint64_t v39 = v26;
      __int16 v40 = 2048;
      uint64_t v41 = v27;
      __int16 v42 = 2048;
      uint64_t v43 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorFusion9AxisMekf::doAccelerometerMeasurementUpdate(double *, double)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
  }
}

double sub_100C5A9F8(uint64_t a1, double *a2)
{
  sub_100C5870C(v9, a2);
  sub_100A1D6D4((double *)v8, v9, (double *)(a1 + 16));
  uint64_t v4 = 0;
  long long v5 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = a1 + 88;
  do
  {
    double result = a2[v4 + 3] + *(double *)(v6 + v4 * 8);
    *(double *)(v6 + v4 * 8) = result;
    ++v4;
  }
  while (v4 != 3);
  return result;
}

void sub_100C5AA6C(uint64_t a1)
{
  *(_WORD *)(a1 + 440) = 256;
  *(_DWORD *)(a1 + 436) = 0;
}

BOOL sub_100C5AAA8(uint64_t a1, uint64_t *a2, unsigned char *a3, unsigned char *a4, double *a5)
{
  *(unsigned char *)(a1 + 9) = 0;
  int v10 = *((_DWORD *)a2 + 9);
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v11 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v12 = *a5;
      int v13 = *a3;
      int v14 = *a4;
      *(_DWORD *)uint64_t buf = 134218752;
      double v150 = v12;
      __int16 v151 = 1024;
      *(_DWORD *)__int16 v152 = v10;
      *(_WORD *)&v152[4] = 1024;
      *(_DWORD *)&v152[6] = v13;
      LOWORD(v153) = 1024;
      *(_DWORD *)((char *)&v153 + 2) = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v101 = *a5;
      int v102 = *a3;
      int v103 = *a4;
      *(_DWORD *)int v138 = 134218752;
      *(double *)&v138[4] = v101;
      *(_WORD *)&v138[12] = 1024;
      *(_DWORD *)&v138[14] = v10;
      *(_WORD *)&v138[18] = 1024;
      *(_DWORD *)&v138[20] = v102;
      LOWORD(v139) = 1024;
      *(_DWORD *)((char *)&v139 + 2) = v103;
      float v104 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v104);
      if (v104 != (char *)buf) {
        free(v104);
      }
    }
  }
  if (v10 <= 2)
  {
    if (v10 <= 0)
    {
      BOOL v15 = 0;
      *(void *)(a1 + 184) = 0xBFF0000000000000;
      *(unsigned char *)(a1 + 441) = 1;
      *(unsigned char *)(a1 + 11) = 0;
      return v15;
    }
    return 0;
  }
  if (*a4 && !*(unsigned char *)(a1 + 11) || *(double *)(a1 + 184) < 0.0) {
    *(unsigned char *)(a1 + 441) = 1;
  }
  if (*(double *)(a1 + 176) < 0.0)
  {
    if (!*(unsigned char *)(a1 + 472)) {
      return 0;
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    float v16 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v17 = *(double *)(a1 + 176);
      *(_DWORD *)uint64_t buf = 134217984;
      double v150 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] fLastAccelTime,%f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    uint64_t v105 = *(void *)(a1 + 176);
    *(_DWORD *)int v138 = 134217984;
    *(void *)&v138[4] = v105;
    goto LABEL_175;
  }
  if (*a3)
  {
    if (*(unsigned char *)(a1 + 472))
    {
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      float v18 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] magneticFieldAdjusted!", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_1022EF708);
        }
        *(_WORD *)int v138 = 0;
        int v107 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v107);
        if (v107 != (char *)buf) {
          free(v107);
        }
      }
    }
    BOOL v15 = 0;
    *(_WORD *)(a1 + 440) = 1;
    *(_DWORD *)(a1 + 432) = 0;
    return v15;
  }
  double v20 = *(double *)(a1 + 16);
  double v21 = *(double *)(a1 + 24);
  double v22 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v23 = *(double *)(a1 + 40);
  double v24 = v23 * (v21 + v21) - v20 * v22;
  double v25 = -(v23 * (v20 + v20)) - v21 * v22;
  v148[0] = v24;
  v148[1] = v25;
  double v26 = v20 * (v20 + v20) + -1.0 + v21 * (v21 + v21);
  v148[2] = v26;
  float v27 = v25 * *(float *)(a1 + 160) + *(float *)(a1 + 156) * v24 + *(float *)(a1 + 164) * v26;
  *(float *)&double v20 = *(float *)(a1 + 436) + (float)(v27 * 57.296) * *(double *)(a1 + 488);
  *(_DWORD *)(a1 + 436) = LODWORD(v20);
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
    }
    uint64_t v28 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      double v29 = *(float *)(a1 + 436);
      *(_DWORD *)uint64_t buf = 134218240;
      double v150 = v27;
      __int16 v151 = 2048;
      *(double *)__int16 v152 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "rotAroundGrav, %.3f, sum, %.3f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      double v108 = *(float *)(a1 + 436);
      *(_DWORD *)int v138 = 134218240;
      *(double *)&v138[4] = v27;
      *(_WORD *)&v138[12] = 2048;
      *(double *)&v138[14] = v108;
      int v109 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v109);
      if (v109 != (char *)buf) {
        free(v109);
      }
    }
  }
  unint64_t v30 = *(void *)(a1 + 584);
  float v31 = 0.0;
  if (v30)
  {
    float v32 = *(float *)(a1 + 536);
    float v33 = v32 / (float)v30;
    if (v30 != 1)
    {
      float v34 = (float)((float)v30 * *(float *)(a1 + 540)) - (float)(v32 * v32);
      if (v34 >= 0.0) {
        float v31 = v34 / (float)((v30 - 1) * v30);
      }
    }
  }
  else
  {
    float v33 = 0.0;
  }
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v35 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      double v150 = v33;
      __int16 v151 = 2048;
      *(double *)__int16 v152 = v31;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      *(_DWORD *)int v138 = 134218240;
      *(double *)&v138[4] = v33;
      *(_WORD *)&v138[12] = 2048;
      *(double *)&v138[14] = v31;
      int v110 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v110);
      if (v110 != (char *)buf) {
        free(v110);
      }
    }
  }
  *(_DWORD *)(a1 + 364) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 368) = *((_DWORD *)a2 + 1);
  *(_DWORD *)(a1 + 372) = *((_DWORD *)a2 + 2);
  if (!*a4 && *(unsigned char *)(a1 + 440))
  {
    BOOL v15 = 0;
    if (v31 >= 2.25 || fabsf(*(float *)(a1 + 436)) <= 90.0 || v33 >= 1.57079633) {
      return v15;
    }
    sub_1001A44F4(a1 + 208, (float *)a2 + 11);
    sub_1001A44F4(a1 + 280, (float *)a2 + 12);
    unint64_t v60 = *(void *)(a1 + 272);
    if (v60 < *(void *)(a1 + 216)) {
      return 0;
    }
    float v61 = 0.0;
    float v62 = 0.0;
    if (v60) {
      float v62 = *(float *)(a1 + 224) / (float)v60;
    }
    unint64_t v63 = *(void *)(a1 + 344);
    if (v63) {
      float v61 = *(float *)(a1 + 296) / (float)v63;
    }
    float v64 = *(float *)(a1 + 424);
    float v65 = 0.0;
    float v66 = 0.0;
    if (v60 >= 2)
    {
      float v67 = (float)((float)v60 * *(float *)(a1 + 228)) - (float)(*(float *)(a1 + 224) * *(float *)(a1 + 224));
      if (v67 >= 0.0) {
        float v66 = v67 / (float)((v60 - 1) * v60);
      }
    }
    float v68 = vabds_f32(v62, v64);
    if (v63 >= 2)
    {
      float v69 = (float)((float)v63 * *(float *)(a1 + 300)) - (float)(*(float *)(a1 + 296) * *(float *)(a1 + 296));
      uint64_t v70 = (v63 - 1) * v63;
      if (v69 >= 0.0) {
        float v65 = v69 / (float)(unint64_t)v70;
      }
      else {
        float v65 = 0.0;
      }
    }
    float v71 = vabds_f32(v61, *(float *)(a1 + 428));
    float v72 = v68 / v64;
    if (*(unsigned char *)(a1 + 472))
    {
      float v133 = v71;
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      float v73 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134218752;
        double v150 = v72;
        __int16 v151 = 2048;
        *(double *)__int16 v152 = v133;
        *(_WORD *)&v152[8] = 2048;
        double v153 = v66;
        __int16 v154 = 2048;
        *(double *)double v155 = v65;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "FieldDiff, %.3f, %.3f, %.3f, %.3f", buf, 0x2Au);
      }
      BOOL v74 = sub_10013D1A0(115, 2);
      float v71 = v133;
      if (v74)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        *(_DWORD *)int v138 = 134218752;
        *(double *)&v138[4] = v72;
        *(_WORD *)&v138[12] = 2048;
        *(double *)&v138[14] = v133;
        *(_WORD *)&v138[22] = 2048;
        double v139 = v66;
        __int16 v140 = 2048;
        *(double *)double v141 = v65;
        double v131 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v131);
        if (v131 != (char *)buf) {
          free(v131);
        }
        float v71 = v133;
      }
    }
    if (v72 < 0.07 && v71 < 4.0 && v66 < 2.25 && v65 < 4.0)
    {
      *(_DWORD *)(a1 + 432) = 0;
    }
    else
    {
      int v78 = *(_DWORD *)(a1 + 432);
      *(_DWORD *)(a1 + 432) = v78 + 1;
      if (v78 < 2)
      {
        sub_1003A7544((void *)(a1 + 208));
        sub_1003A7544((void *)(a1 + 280));
        if (!*(unsigned char *)(a1 + 472)) {
          return 0;
        }
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        double v97 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          int v98 = *(_DWORD *)(a1 + 432);
          *(_DWORD *)uint64_t buf = 67109120;
          LODWORD(v150) = v98;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "Checking again for magField. checkcount, %d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        int v99 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)int v138 = 67109120;
        *(_DWORD *)&v138[4] = v99;
        goto LABEL_175;
      }
      if (*(unsigned char *)(a1 + 472))
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        double v79 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Aborted yawUpdate.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022EF6C8);
          }
          *(_WORD *)int v138 = 0;
          double v132 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v132);
          if (v132 != (char *)buf) {
            free(v132);
          }
        }
      }
      sub_100C5AA6C(a1);
    }
  }
  __int16 v36 = (float32x2_t *)(a1 + 364);
  if (*(unsigned char *)(a1 + 441))
  {
    if (!*a4)
    {
      *(void *)(a1 + 424) = *(uint64_t *)((char *)a2 + 44);
      *(float64x2_t *)__int16 v142 = vcvtq_f64_f32(*v36);
      *(double *)&v142[16] = *(float *)(a1 + 372);
      sub_100A1D6B8((uint64_t)v138, a1 + 16);
      sub_100C588E0((double *)v138, (double *)v142, (double *)(a1 + 400));
      double v81 = *(double *)(a1 + 400);
      double v80 = *(double *)(a1 + 408);
      double v82 = *(double *)(a1 + 416);
      double v83 = sqrt(v80 * v80 + v81 * v81 + v82 * v82);
      if (v83 <= 0.0)
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        double v95 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "Warning: Compass outputs field magnitude 0.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022EF6C8);
          }
          *(_WORD *)__int16 v146 = 0;
          int v121 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v121);
          if (v121 != (char *)buf) {
            free(v121);
          }
        }
        *(void *)(a1 + 184) = 0xBFF0000000000000;
      }
      else
      {
        *(double *)(a1 + 448) = v81 / v83;
        *(double *)(a1 + 456) = v80 / v83;
        *(double *)(a1 + 464) = v82 / v83;
        if (*(unsigned char *)(a1 + 472))
        {
          if (qword_102419090 != -1) {
            dispatch_once(&qword_102419090, &stru_1022EF708);
          }
          double v84 = qword_102419098;
          if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
          {
            double v85 = *(double *)(a1 + 448);
            uint64_t v86 = *(void *)(a1 + 456);
            double v87 = *(double *)(a1 + 464);
            *(_DWORD *)uint64_t buf = 134218496;
            double v150 = v85;
            __int16 v151 = 2048;
            *(void *)__int16 v152 = v86;
            *(_WORD *)&v152[8] = 2048;
            double v153 = v87;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "[!!!CompassInertialReference] x,%f,y,%f,z,%f", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419090 != -1) {
              dispatch_once(&qword_102419090, &stru_1022EF708);
            }
            uint64_t v122 = *(void *)(a1 + 448);
            uint64_t v123 = *(void *)(a1 + 456);
            uint64_t v124 = *(void *)(a1 + 464);
            *(_DWORD *)__int16 v146 = 134218496;
            *(void *)&v146[4] = v122;
            *(_WORD *)&v146[12] = 2048;
            *(void *)&v146[14] = v123;
            *(_WORD *)&v146[22] = 2048;
            uint64_t v147 = v124;
            double v125 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v125);
            if (v125 != (char *)buf) {
              free(v125);
            }
          }
        }
        *(double *)(a1 + 184) = *a5;
        *(double *)(a1 + 200) = *a5;
      }
      return 0;
    }
    if (!*(unsigned char *)(a1 + 11))
    {
      float v88 = sub_100A1D598((double *)(a1 + 16));
      v137[0] = -v88;
      float v89 = sub_100A1D5B4((double *)(a1 + 16));
      v137[1] = -v89;
      float v90 = sub_100A1D5D0((double *)(a1 + 16));
      v137[2] = -v90;
      sub_100A1D790(v137);
      uint64_t v135 = *a2;
      int v136 = *((_DWORD *)a2 + 2);
      sub_100A1D750(v134, v137, (float *)&v135);
      sub_100A1D790(v134);
      sub_100A1D750((float *)&v135, v134, v137);
      sub_100A1D8D8((double *)v138, (float *)&v135, v134, v137);
      sub_100A1D4D8(a1 + 16, (uint64_t *)v138);
      *(unsigned char *)(a1 + 11) = 1;
      *(double *)(a1 + 184) = *a5;
      *(unsigned char *)(a1 + 441) = 0;
      sub_100A1D6B8((uint64_t)v146, a1 + 16);
      float64x2_t v144 = vcvtq_f64_f32(*v36);
      double v145 = *(float *)(a1 + 372);
      sub_100C588E0((double *)v146, v144.f64, (double *)(a1 + 376));
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      int v91 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        double v92 = *(double *)(a1 + 376);
        uint64_t v93 = *(void *)(a1 + 384);
        double v94 = *(double *)(a1 + 392);
        *(_DWORD *)uint64_t buf = 134218496;
        double v150 = v92;
        __int16 v151 = 2048;
        *(void *)__int16 v152 = v93;
        *(_WORD *)&v152[8] = 2048;
        double v153 = v94;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "fCorrected, %.3f, %.3f, %.3f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022EF6C8);
        }
        uint64_t v117 = *(void *)(a1 + 376);
        uint64_t v118 = *(void *)(a1 + 384);
        uint64_t v119 = *(void *)(a1 + 392);
        *(_DWORD *)__int16 v142 = 134218496;
        *(void *)&v142[4] = v117;
        *(_WORD *)&v142[12] = 2048;
        *(void *)&v142[14] = v118;
        *(_WORD *)&v142[22] = 2048;
        uint64_t v143 = v119;
        int v120 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v120);
        if (v120 != (char *)buf) {
          free(v120);
        }
      }
      BOOL v15 = 1;
      *(unsigned char *)(a1 + 9) = 1;
      *(void *)(a1 + 456) = 0;
      *(void *)(a1 + 464) = 0;
      *(void *)(a1 + 448) = 0x3FF0000000000000;
      *(double *)(a1 + 200) = *a5;
      return v15;
    }
    if (*(unsigned char *)(a1 + 472))
    {
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      uint64_t v37 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
      {
        double v38 = *(double *)(a1 + 448);
        uint64_t v39 = *(void *)(a1 + 456);
        double v40 = *(double *)(a1 + 464);
        double v41 = *a5;
        *(_DWORD *)uint64_t buf = 134219008;
        double v150 = v38;
        __int16 v151 = 2048;
        *(void *)__int16 v152 = v39;
        *(_WORD *)&v152[8] = 2048;
        double v153 = v40;
        __int16 v154 = 1024;
        *(_DWORD *)double v155 = v10;
        *(_WORD *)&v155[4] = 2048;
        *(double *)&v155[6] = v41;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_1022EF708);
        }
        uint64_t v112 = *(void *)(a1 + 448);
        uint64_t v113 = *(void *)(a1 + 456);
        double v114 = *(double *)(a1 + 464);
        double v115 = *a5;
        *(_DWORD *)int v138 = 134219008;
        *(void *)&v138[4] = v112;
        *(_WORD *)&v138[12] = 2048;
        *(void *)&v138[14] = v113;
        *(_WORD *)&v138[22] = 2048;
        double v139 = v114;
        __int16 v140 = 1024;
        *(_DWORD *)double v141 = v10;
        *(_WORD *)&v141[4] = 2048;
        *(double *)&v141[6] = v115;
        uint64_t v116 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v116);
        if (v116 != (char *)buf) {
          free(v116);
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 440)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022EF6C8);
    }
    __int16 v42 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "UpdatingYaw!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      *(_WORD *)int v138 = 0;
      double v111 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v111);
      if (v111 != (char *)buf) {
        free(v111);
      }
    }
  }
  BOOL v15 = 0;
  if (v33 <= 5.0 && v31 <= 8.0)
  {
    if (*a5 < *(double *)(a1 + 168)) {
      return 0;
    }
    *(double *)(a1 + 184) = *a5;
    if (*(unsigned char *)(a1 + 472))
    {
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      uint64_t v43 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
      {
        double v44 = *(float *)(a1 + 364);
        double v45 = *(float *)(a1 + 368);
        double v46 = *(float *)(a1 + 372);
        double v47 = *a5;
        *(_DWORD *)uint64_t buf = 134218752;
        double v150 = v44;
        __int16 v151 = 2048;
        *(double *)__int16 v152 = v45;
        *(_WORD *)&v152[8] = 2048;
        double v153 = v46;
        __int16 v154 = 2048;
        *(double *)double v155 = v47;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_1022EF708);
        }
        double v126 = *(float *)(a1 + 364);
        double v127 = *(float *)(a1 + 368);
        double v128 = *(float *)(a1 + 372);
        double v129 = *a5;
        *(_DWORD *)int v138 = 134218752;
        *(double *)&v138[4] = v126;
        *(_WORD *)&v138[12] = 2048;
        *(double *)&v138[14] = v127;
        *(_WORD *)&v138[22] = 2048;
        double v139 = v128;
        __int16 v140 = 2048;
        *(double *)double v141 = v129;
        float v130 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v130);
        if (v130 != (char *)buf) {
          free(v130);
        }
      }
    }
    double v48 = *(float *)(a1 + 364);
    double v49 = *(float *)(a1 + 368);
    double v50 = *(float *)(a1 + 372);
    double v51 = sqrt(v49 * v49 + v48 * v48 + v50 * v50);
    if (v51 <= 0.0)
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      int v96 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_INFO, "Warning: Hey! Compass outputs field magnitude 0.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      *(_WORD *)int v138 = 0;
    }
    else
    {
      double v52 = v48 / v51;
      double v53 = v49 / v51;
      *(double *)int v138 = v52;
      *(double *)&v138[8] = v53;
      double v54 = v50 / v51;
      *(double *)&v138[16] = v54;
      int v55 = *a4;
      if (!*a4) {
        goto LABEL_80;
      }
      uint64_t v56 = 0;
      double v57 = -(v53 * v25 + v52 * v24 + v54 * v26);
      do
      {
        *(double *)&v138[v56 * 8] = *(double *)&v138[v56 * 8] + v57 * v148[v56];
        ++v56;
      }
      while (v56 != 3);
      double v58 = sqrt(*(double *)&v138[8] * *(double *)&v138[8]+ *(double *)v138 * *(double *)v138+ *(double *)&v138[16] * *(double *)&v138[16]);
      if (v58 > 0.001)
      {
        *(double *)int v138 = *(double *)v138 / v58;
        *(double *)&v138[8] = *(double *)&v138[8] / v58;
        *(double *)&v138[16] = *(double *)&v138[16] / v58;
LABEL_80:
        float v59 = sub_100C5C73C(a1, (double *)v138, v10, v55 != 0, 0.00000399999999);
        sub_100A1D6B8((uint64_t)buf, a1 + 16);
        *(float64x2_t *)__int16 v146 = vcvtq_f64_f32(*v36);
        *(double *)&v146[16] = *(float *)(a1 + 372);
        sub_100C588E0((double *)buf, (double *)v146, (double *)(a1 + 376));
        BOOL v15 = v59 >= 0.1;
        if (v59 < 0.1)
        {
          sub_100C5AA6C(a1);
          *(unsigned char *)(a1 + 440) = 0;
        }
        return v15;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      unint64_t v100 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_INFO, "Warning: Hey! Compass outputs field magnitude 0.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022EF6C8);
      }
      *(_WORD *)__int16 v146 = 0;
    }
LABEL_175:
    uint64_t v106 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v106);
    if (v106 != (char *)buf) {
      free(v106);
    }
    return 0;
  }
  return v15;
}

float sub_100C5C73C(uint64_t a1, double *a2, int a3, int a4, double a5)
{
  *(unsigned char *)(a1 + 9) = 1;
  sub_100C588E0((double *)(a1 + 16), (double *)(a1 + 448), &v87);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  double v12 = *(double *)(a1 + 40);
  double v13 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v15 = *(double *)(a1 + 16);
  double v14 = *(double *)(a1 + 24);
  double v16 = v12 * (v14 + v14) - v15 * v13;
  double v17 = -(v12 * (v15 + v15));
  double v18 = v15 * (v15 + v15) + -1.0;
  double v19 = v87;
  double v20 = v88;
  float v21 = v87;
  float v22 = v88;
  double v23 = v89;
  float v24 = v89;
  v86[0] = 0;
  *(float *)&v86[1] = v24;
  *(float *)&v86[2] = -v22;
  float v56 = -v22;
  *(float *)&v86[3] = -v24;
  v86[4] = 0;
  *(float *)&v86[5] = v21;
  *(float *)&v86[6] = v22;
  float v58 = v21;
  float v59 = v22;
  float v57 = -v21;
  *(float *)&v86[7] = -v21;
  v86[8] = 0;
  do
  {
    for (uint64_t i = 0; i != 9; i += 3)
      *(_DWORD *)&v84[v10 * 4 + i * 4] = v86[v10 + i];
    ++v11;
    ++v10;
  }
  while (v11 != 3);
  double v26 = v17 - v14 * v13;
  double v27 = v18 + v14 * (v14 + v14);
  bzero(&v85, 0x24uLL);
  float v28 = a5;
  *(float *)double v83 = v28;
  *(float *)&v83[1] = v28;
  *(float *)&v83[2] = v28;
  float v29 = *a2 - v19;
  float v30 = a2[1] - v20;
  *(float *)double v82 = v29;
  *(float *)&v82[1] = v30;
  float v31 = a2[2] - v23;
  *(float *)&v82[2] = v31;
  sub_100B079B8(&v79, (uint64_t *)(a1 + 112), (uint64_t)v84, (uint64_t)v83, (uint64_t)v82, 6, 3, (uint64_t)v78);
  double v32 = v26 * v80 + v79 * v16 + v81 * v27;
  double v33 = v26 * v32;
  double v34 = v16 * v32;
  double v79 = v34;
  double v80 = v33;
  double v35 = v27 * v32;
  double v36 = v33;
  double v81 = v35;
  float v37 = sqrt(v33 * v33 + v34 * v34 + v35 * v35) * 57.2957802;
  if (*(unsigned char *)(a1 + 472))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v38 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = *(void *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 134218752;
      double v61 = v19;
      __int16 v62 = 2048;
      double v63 = v20;
      __int16 v64 = 2048;
      double v65 = v23;
      __int16 v66 = 2048;
      *(void *)float v67 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "[ExpectedCompass] %f,%f,%f,%f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v40 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v41 = *a2;
      double v42 = a2[1];
      double v43 = a2[2];
      uint64_t v44 = *(void *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 134219008;
      double v61 = v41;
      __int16 v62 = 2048;
      double v63 = v42;
      __int16 v64 = 2048;
      double v65 = v43;
      __int16 v66 = 1024;
      *(_DWORD *)float v67 = a3;
      *(_WORD *)&v67[4] = 2048;
      *(void *)&v67[6] = v44;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "[TrueCompass] %f,%f,%f,%d,%f", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v53);
      if (v53 != (char *)buf) {
        free(v53);
      }
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v45 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v46 = *(void *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 134220288;
      double v61 = 0.0;
      __int16 v62 = 2048;
      double v63 = v24;
      __int16 v64 = 2048;
      double v65 = v56;
      __int16 v66 = 2048;
      *(double *)float v67 = (float)-v24;
      *(_WORD *)&v67[8] = 2048;
      *(void *)&v67[10] = 0;
      __int16 v68 = 2048;
      double v69 = v58;
      __int16 v70 = 2048;
      double v71 = v59;
      __int16 v72 = 2048;
      double v73 = v57;
      __int16 v74 = 2048;
      uint64_t v75 = 0;
      __int16 v76 = 2048;
      uint64_t v77 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f", buf, 0x66u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      double v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v54);
      if (v54 != (char *)buf) {
        free(v54);
      }
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022EF708);
    }
    double v47 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v48 = fabsf(*(float *)(a1 + 436));
      double v49 = *(double *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 134219264;
      double v61 = v34;
      __int16 v62 = 2048;
      double v63 = v36;
      __int16 v64 = 2048;
      double v65 = v35;
      __int16 v66 = 2048;
      *(double *)float v67 = v37;
      *(_WORD *)&v67[8] = 2048;
      *(double *)&v67[10] = v48;
      __int16 v68 = 2048;
      double v69 = v49;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022EF708);
      }
      int v55 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v55);
      if (v55 != (char *)buf) {
        free(v55);
      }
    }
  }
  if (a4 && v37 > 3.0)
  {
    double v50 = (float)(sqrtf(v37) / v37);
    double v79 = v34 * v50;
    double v80 = v36 * v50;
    double v81 = v35 * v50;
  }
  sub_100C5A9F8(a1, &v79);
  return v37;
}

BOOL sub_100C5D0E4(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(void *)a2 = 0;
    float v10 = 0.0;
  }
  else
  {
    double v3 = *(double *)(a1 + 40);
    double v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    double v5 = *(double *)(a1 + 16);
    double v6 = *(double *)(a1 + 24);
    double v7 = v3 * (v6 + v6) - v5 * v4;
    double v8 = -(v3 * (v5 + v5)) - v6 * v4;
    double v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&double v5 = *(float *)(a1 + 352) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&double v8 = *(float *)(a1 + 356) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    float v10 = *(float *)(a1 + 360) - v9;
  }
  BOOL result = v2 > 0.0;
  *(float *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_100C5D174(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

void sub_100C5D17C(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100C5D1AC(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100C5F5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    sub_1000DB0A0(a25);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C5F618(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
    double v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      double v14 = "";
      __int16 v15 = 2082;
      id v16 = [[objc_msgSend(a3, "description") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,read error\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022EF748);
      }
    }
    double v6 = qword_1024193E8;
    if (os_signpost_enabled((os_log_t)qword_1024193E8))
    {
      id v7 = [[objc_msgSend(a3, "description") UTF8String];
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      double v14 = "";
      __int16 v15 = 2082;
      id v16 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#nilr,#supl,#udp,read error", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,read error\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
    }
    id result = [*(id *)(a1 + 32) statusHandler];
    if (result)
    {
      double v9 = (uint64_t (*)(void))*((void *)[*(id *)(a1 + 32) statusHandler] + 2);
      return (id)v9();
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
    float v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      double v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,received udp packet\"}", (uint8_t *)&v11, 0x12u);
    }
    id result = [*(id *)(a1 + 32) readHandler];
    if (result)
    {
      double v9 = (uint64_t (*)(void))*((void *)[*(id *)(a1 + 32) readHandler] + 2);
      return (id)v9();
    }
  }
  return result;
}

uint64_t sub_100C5F924(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 76) = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022EF748);
  }
  double v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,#udp,instance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLUdpListener::CLUdpListener(SimInstance, int)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return a1;
}

void sub_100C5FAEC(_Unwind_Exception *a1)
{
  sub_100C608D0((void *)(v1 + 40));
  sub_100C6084C((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_100C5FB14(uint64_t a1, uint64_t a2)
{
  return sub_100C5FB1C((void *)(a1 + 8), a2);
}

void *sub_100C5FB1C(void *a1, uint64_t a2)
{
  sub_100C60954((uint64_t)v4, a2);
  sub_100C609EC(v4, a1);
  sub_100C6084C(v4);
  return a1;
}

void sub_100C5FB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 72) <= 0)
  {
    sub_101A8858C();
    goto LABEL_17;
  }
  if (*(void *)a1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
    double v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289026;
      __int16 v14 = 2082;
      __int16 v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,udp helper already instantiated\"}", (uint8_t *)&buf, 0x12u);
    }
    return;
  }
  double v6 = [[CLUDPListenerHelper alloc] initWith:*(unsigned int *)(a1 + 72) conformanceMode:a2];
  *(void *)a1 = v6;
  if (!v6)
  {
    sub_101A886FC();
LABEL_17:
    __break(1u);
  }
  id v7 = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100C5FDE0;
  v12[3] = &unk_1022EF728;
  void v12[4] = a1;
  [(CLUDPListenerHelper *)v6 setReadHandler:v12];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  float v11[2] = sub_100C601E8;
  v11[3] = &unk_1022A5348;
  void v11[4] = a1;
  [(CLUDPListenerHelper *)v7 setStatusHandler:v11];
  double v8 = *(void **)a1;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__n128 __p = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
  }
  [v8 start:__p];
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  [*(id *)a1 startUDPListner:__p[0] port:__p[1] error:v10];
}

void sub_100C5FDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C5FDE0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    __n128 __p = 0;
    long long __dst = 0;
    uint64_t v29 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    size_t v4 = 0;
    id v5 = [a2 countByEnumeratingWithState:&v23 objects:v38 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v6) {
            objc_enumerationMutation(a2);
          }
          v4 += (size_t)[*(id *)(*((void *)&v23 + 1) + 8 * i) length];
        }
        id v5 = [a2 countByEnumeratingWithState:&v23 objects:v38 count:16];
      }
      while (v5);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
    double v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = [a2 count];
      uint64_t buf = 68289538;
      __int16 v32 = 2082;
      double v33 = "";
      __int16 v34 = 2050;
      id v35 = v9;
      __int16 v36 = 2050;
      size_t v37 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,datagrams\", \"datagrams\":%{public}lu, \"bytes\":%{public}lu}", (uint8_t *)&buf, 0x26u);
    }
    sub_10008AB10((unint64_t *)&__p, v4);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v10 = [a2 countByEnumeratingWithState:&v19 objects:v30 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v20;
      do
      {
        for (uint64_t j = 0; j != v10; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v20 != v11) {
            objc_enumerationMutation(a2);
          }
          __int16 v13 = *(void **)(*((void *)&v19 + 1) + 8 * (void)j);
          __int16 v14 = (char *)[v13 bytes];
          __int16 v15 = (char *)[v13 length];
          sub_100C60C58((uint64_t)&__p, (char *)__dst, v14, &v15[(void)v14], (int64_t)v15);
        }
        id v10 = [a2 countByEnumeratingWithState:&v19 objects:v30 count:16];
      }
      while (v10);
    }
    uint64_t v16 = *(void *)(v2 + 32);
    if (!v16) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &__p);
    if (__p)
    {
      long long __dst = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
    double v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      uint64_t buf = 68289026;
      __int16 v32 = 2082;
      double v33 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,no read handler registered\"}", (uint8_t *)&buf, 0x12u);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022EF748);
      }
    }
    double v18 = qword_1024193E8;
    if (os_signpost_enabled((os_log_t)qword_1024193E8))
    {
      uint64_t buf = 68289026;
      __int16 v32 = 2082;
      double v33 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#nilr,#supl,#udp,no read handler registered", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,no read handler registered\"}", (uint8_t *)&buf, 0x12u);
    }
  }
}

void sub_100C601A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C601E8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
    size_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      unsigned int v20 = 0;
      __int16 v21 = 2082;
      long long v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,statusNotNull\"}", buf, 0x12u);
    }
    if ([a2 code])
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022EF748);
      }
      id v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        id v6 = [[objc_msgSend(a2, "description") UTF8String];
        *(_DWORD *)uint64_t buf = 68289282;
        unsigned int v20 = 0;
        __int16 v21 = 2082;
        long long v22 = "";
        __int16 v23 = 2082;
        id v24 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,#udp,status\", \"badStatus\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022EF748);
        }
      }
      id v7 = qword_1024193E8;
      if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
        goto LABEL_16;
      }
      id v8 = [[objc_msgSend(a2, "description") UTF8String];
      *(_DWORD *)uint64_t buf = 68289282;
      unsigned int v20 = 0;
      __int16 v21 = 2082;
      long long v22 = "";
      __int16 v23 = 2082;
      id v24 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#nilr,#supl,#udp,status", "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,#udp,status\", \"badStatus\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
LABEL_16:
    id v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [[objc_msgSend(a2, "description") UTF8String];
      *(_DWORD *)uint64_t buf = 68289282;
      unsigned int v20 = 0;
      __int16 v21 = 2082;
      long long v22 = "";
      __int16 v23 = 2082;
      id v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,status\", \"goodStatus\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (*(void *)(v3 + 64))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022EF748);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = [a2 code];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,#udp,statusCode,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022EF748);
        }
        [a2 code];
        double v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLUdpListener::start(BOOL, std::string)_block_invoke", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if ([a2 code])
      {
        uint64_t v13 = v3 + 40;
        int v14 = 1;
      }
      else
      {
        uint64_t v13 = v3 + 40;
        int v14 = 0;
      }
      sub_100C607C8(v13, v14);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022EF748);
      }
      double v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        unsigned int v20 = 0;
        __int16 v21 = 2082;
        long long v22 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,no event handler registered\"}", buf, 0x12u);
      }
    }
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022EF748);
  }
  __int16 v15 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    unsigned int v20 = 0;
    __int16 v21 = 2082;
    long long v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,statusNull\"}", buf, 0x12u);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
  }
  uint64_t v16 = qword_1024193E8;
  if (os_signpost_enabled((os_log_t)qword_1024193E8))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    unsigned int v20 = 0;
    __int16 v21 = 2082;
    long long v22 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#nilr,#supl,#udp,statusNull", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,statusNull\"}", buf, 0x12u);
  }
}

uint64_t sub_100C607C8(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100C6081C(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void *sub_100C6084C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100C608D0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100C60954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100C609EC(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    id v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        id result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        id result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      id result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100C60C4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

char *sub_100C60C58(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  id v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  id v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_1001D7FD4();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      double v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      double v17 = 0;
    }
    double v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    float v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      id v10 = *(char **)(a1 + 8);
      float v28 = v17;
    }
    float v30 = &v27[a5];
    float v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    __int16 v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    long long v19 = &__src[a5];
    __int16 v21 = *(char **)(a1 + 8);
LABEL_17:
    long long v22 = &v5[a5];
    __int16 v23 = &v21[-a5];
    id v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      id v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  long long v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  __int16 v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

BOOL sub_100C60E44()
{
  uint64_t v1 = qword_1024193E8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_100C60E64()
{
  uint64_t v2 = *(NSObject **)(v0 + 1000);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_100C60E80()
{
  uint64_t v2 = *(NSObject **)(v0 + 1000);
  return os_signpost_enabled(v2);
}

BOOL sub_100C60EC0()
{
  return (sub_1000A16E8() & 3) != 0;
}

void sub_100C60EE0()
{
  if ((sub_1000A16E8() & 2) != 0)
  {
    qword_10248AAB0 = sub_10058D9A0(0);
  }
  else if ((sub_1000A16E8() & 3) != 0)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EFD48);
    }
    uint64_t v0 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "CLMotionCoprocessorInterface supported but not created.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EFD48);
      }
      uint64_t v1 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLMotionCoprocessorInterface::create(BOOL)", "%s\n", v1);
      if (v1 != (char *)buf) {
        free(v1);
      }
    }
  }
}

void sub_100C6108C()
{
  if (!qword_10248AAB0) {
    sub_100C60EE0();
  }
}

void sub_100C610A4(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100C61318(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C61320(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100C61350(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000DF4C4(v18, v1);
  if (*(unsigned char *)(v2 + 6376) && (*(int *)(v2 + 6400) > 0 || *(int *)(v2 + 6404) > 0 || *(int *)(v2 + 6408) > 0))
  {
    long long v14 = *(_OWORD *)(v2 + 3332);
    _DWORD v12[2] = *(_OWORD *)(v2 + 3424);
    int v13 = *(_DWORD *)(v2 + 3440);
    v12[0] = *(_OWORD *)(v2 + 3456);
    *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(v2 + 3465);
    __int16 v10 = *(_WORD *)(v2 + 3481);
    char v11 = *(unsigned char *)(v2 + 3483);
    v9[0] = sub_100C6162C(v2 + 3208);
    v9[1] = v5;
    memset(v7, 0, sizeof(v7));
    int v8 = 1065353216;
    for (uint64_t i = *(void **)(v2 + 1120); i; uint64_t i = (void *)*i)
      sub_1000E34E4((uint64_t)v7, i + 2, i + 2);
    sub_100C6172C(v2, v7, (uint64_t)v9, 0, 1, (uint64_t)v15);
    sub_100C61688((void *)(v2 + 1144), v15, v4);
    sub_1000D7DCC((uint64_t)&v17);
    sub_1000D7C60((uint64_t)&v16);
    sub_1000D7B80((uint64_t)v15);
    sub_1000D7D80((uint64_t)v7);
  }
  else
  {
    sub_1000DF9A4(v4, (uint64_t)v18);
  }
  sub_1000D7DCC((uint64_t)&v20);
  sub_1000D7C60((uint64_t)&v19);
  sub_1000D7B80((uint64_t)v18);
}

void sub_100C615E4(_Unwind_Exception *a1)
{
}

unint64_t sub_100C6162C(uint64_t a1)
{
  if (sub_100F91E80(a1) && (sub_100F91E88(a1) & 1) == 0)
  {
    uint64_t v4 = sub_1000D8908(a1);
    unint64_t v3 = v4 & 0xFFFFFFFFFFFFFF00;
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
  }
  return v3 | v2;
}

uint64_t sub_100C61688@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  for (uint64_t i = (void *)a2[150]; i; uint64_t i = (void *)*i)
  {
    uint64_t v10 = i[2];
    id v7 = sub_10087B05C(a1, &v10);
    if (!v7) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    sub_10106EAFC((uint64_t)(i + 3), *((_DWORD *)v7 + 14), *((_DWORD *)v7 + 16), *((double *)v7 + 10));
  }
  uint64_t v8 = a2[399];
  uint64_t v10 = a2[798];
  sub_100C63640(v8, (double *)&v10);
  return sub_1000DF9A4(a3, (uint64_t)a2);
}

void sub_100C6172C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X8>)
{
  sub_1000DF4C4((_DWORD *)a6, a1);
  if (a2[3]) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = *(unsigned char *)(a3 + 8) == 0;
  }
  if (v11) {
    return;
  }
  uint64_t v12 = (void *)a2[2];
  int v98 = 0;
  unint64_t v99 = 0;
  __n128 __p = 0;
  unint64_t v13 = 0;
  if (v12)
  {
    long long v14 = v12;
    do
    {
      ++v13;
      long long v14 = (void *)*v14;
    }
    while (v14);
  }
  sub_10068CEF0((char *)&__p, v12, 0, v13);
  if (*(unsigned char *)(a3 + 8) && !sub_10087B05C(a2, (void *)a3))
  {
    size_t v15 = v98;
    if ((unint64_t)v98 >= v99)
    {
      uint64_t v17 = (char *)__p;
      uint64_t v18 = (v98 - (unsigned char *)__p) >> 3;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v20 = v99 - (void)__p;
      if ((uint64_t)(v99 - (void)__p) >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        long long v22 = (char *)sub_1000DA54C((uint64_t)&v99, v21);
        uint64_t v17 = (char *)__p;
        size_t v15 = v98;
      }
      else
      {
        long long v22 = 0;
      }
      __int16 v23 = &v22[8 * v18];
      id v24 = &v22[8 * v21];
      *(void *)__int16 v23 = *(void *)a3;
      uint64_t v16 = v23 + 8;
      while (v15 != v17)
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v23 - 1) = v25;
        v23 -= 8;
      }
      __n128 __p = v23;
      int v98 = v16;
      unint64_t v99 = (unint64_t)v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)int v98 = *(void *)a3;
      uint64_t v16 = v15 + 8;
    }
    int v98 = v16;
  }
  double v95 = 0;
  uint64_t v96 = 0;
  double v94 = &v95;
  if (a4 == 1)
  {
    (*(void (**)(unsigned char *__return_ptr, double))(**(void **)(a1 + 6472) + 24))(buf, *(double *)(a1 + 6384));
    goto LABEL_31;
  }
  if (!a4)
  {
    (*(void (**)(unsigned char *__return_ptr, double))(**(void **)(a1 + 6472) + 16))(buf, *(double *)(a1 + 6384));
LABEL_31:
    sub_1000F5BB0((uint64_t)&v94, v95);
    char v26 = *(void **)&buf[8];
    double v94 = *(void ***)buf;
    double v95 = *(void **)&buf[8];
    uint64_t v96 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      *(void *)(*(void *)&buf[8] + 16) = &v95;
      *(void *)uint64_t buf = &buf[8];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      char v26 = 0;
    }
    else
    {
      double v94 = &v95;
    }
    sub_1000F5BB0((uint64_t)buf, v26);
  }
  if (a5)
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 6472) + 48))(buf);
    sub_1000F5BB0((uint64_t)&v94, v95);
    double v27 = *(void **)&buf[8];
    double v94 = *(void ***)buf;
    double v95 = *(void **)&buf[8];
    uint64_t v96 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      *(void *)(*(void *)&buf[8] + 16) = &v95;
      *(void *)uint64_t buf = &buf[8];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      double v27 = 0;
    }
    else
    {
      double v94 = &v95;
    }
    sub_1000F5BB0((uint64_t)buf, v27);
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022EFD68);
    }
    float v28 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "MovingApDetector, skip cross-checking centroids with GPS/Cell as requested", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022EFD68);
      }
      LOWORD(v100.__r_.__value_.__l.__data_) = 0;
      size_t v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const", "%s\n", v29);
      if (v29 != buf) {
        free(v29);
      }
    }
  }
  sub_100134750(&v93, "default");
  uint64_t v87 = a3;
  int v86 = a4;
  uint64_t v85 = a1;
  float v30 = (void *)a2[2];
  if (v30)
  {
    int v90 = 0;
    int v31 = 0;
    std::string::size_type v89 = a2[3];
    unint64_t v32 = 1;
    while (1)
    {
      uint64_t v92 = v30[2];
      double v33 = (double *)sub_100529674((uint64_t)&v94, &v92);
      __int16 v34 = v33;
      if (&v95 == (void **)v33) {
        break;
      }
      if (!sub_10106EB1C(v33 + 5))
      {
        sub_1000E34E4(a6 + 1264, &v92, &v92);
        id v35 = "unknown";
        goto LABEL_57;
      }
      sub_1009463BC(a6 + 1184, (void *)v34 + 4, (void *)v34 + 4, v34 + 5);
      if (*((unsigned char *)v34 + 128))
      {
        std::string::assign(&v93, "tile");
        ++v31;
      }
      else
      {
        std::string::assign(&v93, "als");
        ++v90;
      }
LABEL_58:
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v36 = v93.__r_.__value_.__l.__size_ == 3
           && *(_WORD *)v93.__r_.__value_.__l.__data_ == 27745
           && *(unsigned char *)(v93.__r_.__value_.__r.__words[0] + 2) == 115;
        if (v93.__r_.__value_.__l.__size_ != 4)
        {
          BOOL v37 = 0;
          goto LABEL_80;
        }
        double v40 = (std::string *)v93.__r_.__value_.__r.__words[0];
        goto LABEL_78;
      }
      BOOL v36 = 0;
      if (HIBYTE(v93.__r_.__value_.__r.__words[2]) == 4)
      {
        double v40 = &v93;
LABEL_78:
        BOOL v37 = LODWORD(v40->__r_.__value_.__l.__data_) == 1701603700;
        goto LABEL_79;
      }
      BOOL v37 = 0;
      if (HIBYTE(v93.__r_.__value_.__r.__words[2]) == 3)
      {
        BOOL v37 = 0;
        BOOL v36 = LOWORD(v93.__r_.__value_.__l.__data_) == 27745 && v93.__r_.__value_.__s.__data_[2] == 115;
        goto LABEL_80;
      }
LABEL_79:
      if (v37) {
        goto LABEL_102;
      }
LABEL_80:
      if (v36)
      {
LABEL_102:
        double Current = CFAbsoluteTimeGetCurrent();
        double v48 = v34[13];
        int v49 = rand();
        double v50 = (Current - v48) / 86400.0;
        float v51 = v50;
        HIDWORD(v52) = -1030792151 * v49 + 85899344;
        LODWORD(v52) = HIDWORD(v52);
        if ((v52 >> 2) <= 0x28F5C28)
        {
          v117[0] = @"age";
          *(float *)&double v50 = v50;
          v118[0] = +[NSNumber numberWithFloat:v50];
          v117[1] = @"fromAppleLocationServices";
          v118[1] = +[NSNumber numberWithBool:v36];
          v117[2] = @"fromTiles";
          v118[2] = +[NSNumber numberWithBool:v37];
          v117[3] = @"horizontalAccuracy";
          v118[3] = +[NSNumber numberWithDouble:v34[9]];
          v117[4] = @"reach";
          v118[4] = +[NSNumber numberWithInt:*((unsigned int *)v34 + 22)];
          v117[5] = @"verticalAccuracy";
          v118[5] = +[NSNumber numberWithDouble:v34[10]];
          +[NSDictionary dictionaryWithObjects:v118 forKeys:v117 count:6];
          AnalyticsSendEvent();
        }
        if (v32 > (int)sub_100F85DC4()) {
          goto LABEL_115;
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022EFD68);
        }
        double v53 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278(&v100);
          double v54 = &v100;
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            double v54 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          uint64_t v55 = *((void *)v34 + 6);
          uint64_t v56 = *((void *)v34 + 7);
          int v57 = *((_DWORD *)v34 + 22);
          uint64_t v59 = *((void *)v34 + 8);
          uint64_t v58 = *((void *)v34 + 9);
          uint64_t v60 = *((void *)v34 + 10);
          double v61 = &v93;
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            double v61 = (std::string *)v93.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t buf = 134351619;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = v89;
          *(_WORD *)&buf[22] = 2081;
          int v120 = v54;
          *(_WORD *)int v121 = 2049;
          *(void *)&v121[2] = v55;
          __int16 v122 = 2049;
          uint64_t v123 = v56;
          __int16 v124 = 2050;
          uint64_t v125 = v58;
          __int16 v126 = 1026;
          int v127 = v57;
          __int16 v128 = 2049;
          uint64_t v129 = v59;
          __int16 v130 = 2050;
          uint64_t v131 = v60;
          __int16 v132 = 2082;
          float v133 = v61;
          __int16 v134 = 2050;
          double v135 = v51;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}1.f, reach, %{public}d, altitude, %{private}.1f, vacc, %{public}.1f, src, %{public}s, query age, %{public}.6f days", buf, 0x6Cu);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_115;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022EFD68);
        }
        sub_100B39278(&v91);
        __int16 v62 = &v91;
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v62 = (std::string *)v91.__r_.__value_.__r.__words[0];
        }
        uint64_t v63 = *((void *)v34 + 6);
        uint64_t v64 = *((void *)v34 + 7);
        int v65 = *((_DWORD *)v34 + 22);
        uint64_t v67 = *((void *)v34 + 8);
        uint64_t v66 = *((void *)v34 + 9);
        uint64_t v68 = *((void *)v34 + 10);
        double v69 = &v93;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v69 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        LODWORD(v100.__r_.__value_.__l.__data_) = 134351619;
        *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = v32;
        WORD2(v100.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = v89;
        HIWORD(v100.__r_.__value_.__r.__words[2]) = 2081;
        double v101 = v62;
        *(_WORD *)int v102 = 2049;
        *(void *)&v102[2] = v63;
        __int16 v103 = 2049;
        uint64_t v104 = v64;
        __int16 v105 = 2050;
        uint64_t v106 = v66;
        __int16 v107 = 1026;
        int v108 = v65;
        __int16 v109 = 2049;
        uint64_t v110 = v67;
        __int16 v111 = 2050;
        uint64_t v112 = v68;
        __int16 v113 = 2082;
        double v114 = v69;
        __int16 v115 = 2050;
        double v116 = v51;
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        goto LABEL_126;
      }
      if (v32 > (int)sub_100F85DC4()) {
        goto LABEL_115;
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022EFD68);
      }
      double v41 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100B39278(&v100);
        double v42 = &v100;
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v42 = (std::string *)v100.__r_.__value_.__r.__words[0];
        }
        double v43 = &v93;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v43 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 134349827;
        *(void *)&uint8_t buf[4] = v32;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v89;
        *(_WORD *)&buf[22] = 2081;
        int v120 = v42;
        *(_WORD *)int v121 = 2082;
        *(void *)&v121[2] = v43;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{public}s", buf, 0x2Au);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_115;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022EFD68);
      }
      sub_100B39278(&v91);
      uint64_t v44 = &v91;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v44 = (std::string *)v91.__r_.__value_.__r.__words[0];
      }
      double v45 = &v93;
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v45 = (std::string *)v93.__r_.__value_.__r.__words[0];
      }
      LODWORD(v100.__r_.__value_.__l.__data_) = 134349827;
      *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = v32;
      WORD2(v100.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = v89;
      HIWORD(v100.__r_.__value_.__r.__words[2]) = 2081;
      double v101 = v44;
      *(_WORD *)int v102 = 2082;
      *(void *)&v102[2] = v45;
      uint64_t v46 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
LABEL_126:
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const", "%s\n", v46);
      if (v46 != buf) {
        free(v46);
      }
LABEL_115:
      float v30 = (void *)*v30;
      ++v32;
      if (!v30) {
        goto LABEL_129;
      }
    }
    sub_1000E34E4(a6 + 1224, &v92, &v92);
    id v35 = "notindb";
LABEL_57:
    std::string::assign(&v93, v35);
    goto LABEL_58;
  }
  int v31 = 0;
  int v90 = 0;
LABEL_129:
  if (*(unsigned char *)(v87 + 8))
  {
    __int16 v70 = sub_100529674((uint64_t)&v94, (void *)v87);
    if (&v95 != v70)
    {
      int v71 = *(unsigned __int8 *)(a6 + 1400);
      long long v72 = *(_OWORD *)(v70 + 7);
      *(_OWORD *)(a6 + 1304) = *(_OWORD *)(v70 + 5);
      *(_OWORD *)(a6 + 1320) = v72;
      long long v73 = *(_OWORD *)(v70 + 11);
      long long v74 = *(_OWORD *)(v70 + 15);
      long long v75 = *(_OWORD *)(v70 + 9);
      *(_OWORD *)(a6 + 1368) = *(_OWORD *)(v70 + 13);
      *(_OWORD *)(a6 + 1384) = v74;
      *(_OWORD *)(a6 + 1336) = v75;
      *(_OWORD *)(a6 + 1352) = v73;
      if (!v71) {
        *(unsigned char *)(a6 + 1400) = 1;
      }
    }
  }
  int v76 = *((_DWORD *)a2 + 6);
  if (v76 >= 1)
  {
    if (v76 == 1)
    {
      int v77 = 1;
    }
    else if (v76 >= 5)
    {
      if (v76 >= 9)
      {
        if (v76 >= 0x11)
        {
          if (v76 >= 0x21)
          {
            if (v76 < 0x41) {
              int v77 = 64;
            }
            else {
              int v77 = 65;
            }
          }
          else
          {
            int v77 = 32;
          }
        }
        else
        {
          int v77 = 16;
        }
      }
      else
      {
        int v77 = 8;
      }
    }
    else
    {
      int v77 = 4;
    }
    int v78 = 100 * *(_DWORD *)(a6 + 1288);
    int v79 = 100 * *(_DWORD *)(a6 + 1248);
    if (v86) {
      double v80 = "alsonly";
    }
    else {
      double v80 = "tilesals";
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022EFD68);
    }
    int v81 = v78 / v76;
    double v82 = qword_1024193B8;
    int v83 = v79 / v76;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67241730;
      *(_DWORD *)&uint8_t buf[4] = v76;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v77;
      *(_WORD *)&buf[14] = 2082;
      *(void *)&uint8_t buf[16] = v80;
      LOWORD(v120) = 1026;
      *(_DWORD *)((char *)&v120 + 2) = 100 * v90 / v76;
      HIWORD(v120) = 1026;
      *(_DWORD *)int v121 = 100 * v31 / v76;
      *(_WORD *)&v121[4] = 1026;
      *(_DWORD *)&v121[6] = v81;
      __int16 v122 = 1026;
      LODWORD(v123) = v83;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "WlpMetric, aplookup, %{public}d, %{public}d, sources, %{public}s, als, %{public}d, tiles, %{public}d, invalid, %{public}d, unknown, %{public}d", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022EFD68);
      }
      LODWORD(v100.__r_.__value_.__l.__data_) = 67241730;
      HIDWORD(v100.__r_.__value_.__r.__words[0]) = v76;
      LOWORD(v100.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v100.__r_.__value_.__r.__words[1] + 2) = v77;
      HIWORD(v100.__r_.__value_.__r.__words[1]) = 2082;
      v100.__r_.__value_.__r.__words[2] = (std::string::size_type)v80;
      LOWORD(v101) = 1026;
      *(_DWORD *)((char *)&v101 + 2) = 100 * v90 / v76;
      HIWORD(v101) = 1026;
      *(_DWORD *)int v102 = 100 * v31 / v76;
      *(_WORD *)&v102[4] = 1026;
      *(_DWORD *)&v102[6] = v81;
      __int16 v103 = 1026;
      LODWORD(v104) = v83;
      double v84 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const", "%s\n", v84);
      if (v84 != buf) {
        free(v84);
      }
    }
    if ((*(unsigned char *)(v85 + 6440) & 0xF) == 0) {
      AnalyticsSendEventLazy();
    }
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  sub_1000F5BB0((uint64_t)&v94, v95);
  if (__p)
  {
    int v98 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100C62704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *a43,uint64_t a44,void *__p,uint64_t a46)
{
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10050BAA0(a19);
  _Unwind_Resume(a1);
}

void sub_100C627A4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000DF4C4(v18, v1);
  if (*(unsigned char *)(v2 + 809))
  {
    long long v14 = *(_OWORD *)(v2 + 3332);
    _DWORD v12[2] = *(_OWORD *)(v2 + 3424);
    int v13 = *(_DWORD *)(v2 + 3440);
    v12[0] = *(_OWORD *)(v2 + 3456);
    *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(v2 + 3465);
    __int16 v10 = *(_WORD *)(v2 + 3481);
    char v11 = *(unsigned char *)(v2 + 3483);
    v9[0] = sub_100C6162C(v2 + 3208);
    v9[1] = v5;
    memset(v7, 0, sizeof(v7));
    int v8 = 1065353216;
    for (uint64_t i = *(void **)(v2 + 1120); i; uint64_t i = (void *)*i)
      sub_1000E34E4((uint64_t)v7, i + 2, i + 2);
    sub_100C6172C(v2, v7, (uint64_t)v9, 0, 1, (uint64_t)v15);
    sub_100C61688((void *)(v2 + 1144), v15, v4);
    sub_1000D7DCC((uint64_t)&v17);
    sub_1000D7C60((uint64_t)&v16);
    sub_1000D7B80((uint64_t)v15);
    sub_1000D7D80((uint64_t)v7);
  }
  else
  {
    sub_1000DF9A4(v4, (uint64_t)v18);
  }
  sub_1000D7DCC((uint64_t)&v20);
  sub_1000D7C60((uint64_t)&v19);
  sub_1000D7B80((uint64_t)v18);
}

void sub_100C62A14(_Unwind_Exception *a1)
{
}

void sub_100C62A5C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000DF4C4(v18, v1);
  if (*(unsigned char *)(v2 + 6376) && *(unsigned char *)(v2 + 808))
  {
    long long v14 = *(_OWORD *)(v2 + 3332);
    _DWORD v12[2] = *(_OWORD *)(v2 + 3424);
    int v13 = *(_DWORD *)(v2 + 3440);
    v12[0] = *(_OWORD *)(v2 + 3456);
    *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(v2 + 3465);
    __int16 v10 = *(_WORD *)(v2 + 3481);
    char v11 = *(unsigned char *)(v2 + 3483);
    v9[0] = sub_100C6162C(v2 + 3208);
    v9[1] = v5;
    memset(v7, 0, sizeof(v7));
    int v8 = 1065353216;
    for (uint64_t i = *(void **)(v2 + 1120); i; uint64_t i = (void *)*i)
      sub_1000E34E4((uint64_t)v7, i + 2, i + 2);
    sub_100C6172C(v2, v7, (uint64_t)v9, 0, 1, (uint64_t)v15);
    sub_100C61688((void *)(v2 + 1144), v15, v4);
    sub_1000D7DCC((uint64_t)&v17);
    sub_1000D7C60((uint64_t)&v16);
    sub_1000D7B80((uint64_t)v15);
    sub_1000D7D80((uint64_t)v7);
  }
  else
  {
    sub_1000DF9A4(v4, (uint64_t)v18);
  }
  sub_1000D7DCC((uint64_t)&v20);
  sub_1000D7C60((uint64_t)&v19);
  sub_1000D7B80((uint64_t)v18);
}

void sub_100C62CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_100C62D1C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000DF4C4(v17, v3);
  if (*(unsigned char *)(v4 + 6376))
  {
    long long v15 = *(_OWORD *)(v4 + 3332);
    v13[2] = *(_OWORD *)(v4 + 3424);
    int v14 = *(_DWORD *)(v4 + 3440);
    v13[0] = *(_OWORD *)(v4 + 3456);
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)(v4 + 3465);
    __int16 v11 = *(_WORD *)(v4 + 3481);
    char v12 = *(unsigned char *)(v4 + 3483);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022EFD68);
    }
    id v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling WSB event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022EFD68);
      }
      __int16 v9 = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_1009C4A4C(v2, (uint64_t)buf);
    LOBYTE(v9) = 0;
    char v10 = 0;
    sub_100C6172C(v4, buf, (uint64_t)&v9, 0, 0, v6);
    sub_1000D7D80((uint64_t)buf);
  }
  else
  {
    sub_1000DF9A4(v6, (uint64_t)v17);
  }
  sub_1000D7DCC((uint64_t)&v19);
  sub_1000D7C60((uint64_t)&v18);
  sub_1000D7B80((uint64_t)v17);
}

void sub_100C63044(_Unwind_Exception *a1)
{
}

void sub_100C6307C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000DF4C4(v19, v3);
  if ((*v2 | 2) == 2)
  {
    (*(void (**)(void))(**(void **)(v4 + 6472) + 32))(*(void *)(v4 + 6472));
    sub_1000DF9A4(v6, (uint64_t)v19);
  }
  else
  {
    v15[0] = sub_100C6162C(v4 + 3208);
    v15[1] = v7;
    memset(v13, 0, sizeof(v13));
    int v14 = 1065353216;
    __asm { FMOV            V0.2D, #-1.0 }
    sub_100C6172C(v4, v13, (uint64_t)v15, 1, 1, (uint64_t)v16);
    sub_100C61688((void *)(v4 + 1144), v16, v6);
    sub_1000D7DCC((uint64_t)&v18);
    sub_1000D7C60((uint64_t)&v17);
    sub_1000D7B80((uint64_t)v16);
    sub_1000D7D80((uint64_t)v13);
  }
  sub_1000D7DCC((uint64_t)&v21);
  sub_1000D7C60((uint64_t)&v20);
  sub_1000D7B80((uint64_t)v19);
}

void sub_100C6324C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_100C63290(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000DF4C4(v19, v1);
  uint64_t v5 = *(void *)(v2 + 6280);
  uint64_t v6 = *(void *)(v2 + 6288);
  if (v5 == v6)
  {
    sub_1000DF9A4(v4, (uint64_t)v19);
  }
  else
  {
    long long v17 = *(_OWORD *)(v2 + 3332);
    void v15[2] = *(_OWORD *)(v2 + 3424);
    int v16 = *(_DWORD *)(v2 + 3440);
    v15[0] = *(_OWORD *)(v2 + 3456);
    *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v2 + 3465);
    __int16 v13 = *(_WORD *)(v2 + 3481);
    char v14 = *(unsigned char *)(v2 + 3483);
    memset(v11, 0, sizeof(v11));
    int v12 = 1065353216;
    do
    {
      int v8 = *(void **)v5;
      uint64_t v7 = *(void **)(v5 + 8);
      while (v8 != v7)
      {
        *(void *)uint64_t buf = *v8;
        sub_1000E34E4((uint64_t)v11, buf, buf);
        v8 += 11;
      }
      v5 += 24;
    }
    while (v5 != v6);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022EFD68);
    }
    __int16 v9 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling ReprocessWifiScanBuffer event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022EFD68);
      }
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    buf[0] = 0;
    uint8_t buf[8] = 0;
    sub_100C6172C(v2, v11, (uint64_t)buf, 0, 0, v4);
    sub_1000D7D80((uint64_t)v11);
  }
  sub_1000D7DCC((uint64_t)&v21);
  sub_1000D7C60((uint64_t)&v20);
  sub_1000D7B80((uint64_t)v19);
}

void sub_100C63608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t sub_100C63640(uint64_t result, double *a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    double v4 = *a2 + -30.0;
    uint64_t v5 = result + 8;
    do
    {
      unint64_t v6 = v3[5];
      if (*(double *)(*(void *)(v3[2] + ((v6 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v6 + 8) >= v4) {
        break;
      }
      v3[5] = v6 + 1;
      v3[6] = v2 - 1;
      id result = sub_100096314(v5, 1);
      uint64_t v2 = v3[6];
    }
    while (v2);
  }
  return result;
}

NSDictionary *sub_100C636C4(uint64_t a1)
{
  v3[0] = @"sources";
  v4[0] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v3[1] = @"scanApsBin";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  _DWORD v3[2] = @"als";
  _DWORD v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v3[3] = @"tiles";
  v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v3[4] = @"invalid";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  v3[5] = @"unknown";
  v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

void sub_100C637E0(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100C638B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100C63968(_Unwind_Exception *a1)
{
}

void sub_100C63980()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100C63A28(_Unwind_Exception *a1)
{
}

uint64_t sub_100C63A40(uint64_t a1, uint64_t a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = objc_alloc_init((Class)NSMutableDictionary);
  *(void *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  return a1;
}

void sub_100C63AC4(_Unwind_Exception *a1)
{
  sub_1002220F0(v2);
  double v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C63AE8(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = *(void **)(a1 + 64);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        [objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", *(void *)(*((void *)&v8 + 1) + 8 * i)) invalidate];
      }
      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }

  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_100C6480C(a1 + 120);
  sub_100C6480C(a1 + 80);
  sub_1002220F0(a1 + 16);
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_100C63C18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100C63C34(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  sub_10009AFB0(&v15, a1);
  *(_OWORD *)__int16 v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)__n128 __p = *(_OWORD *)a3;
  uint64_t v12 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_100098C1C(a6, &v15, (long long *)v13, (long long *)__p, a4, a5);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  if (v16) {
    sub_1000DB0A0(v16);
  }
}

void sub_100C63D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A88A70((uint64_t)&a16, (uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100C63D40(uint64_t a1, void **a2, uint64_t a3)
{
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *a2;
  }
  uint64_t v7 = +[NSString stringWithUTF8String:v6];
  id v8 = [[objc_msgSend(*(id *)(a1 + 72), "silo") newTimer];
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x8012000000;
  void v14[3] = sub_100177D58;
  v14[4] = sub_10017747C;
  void v14[5] = "";
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    __int16 v13 = a2[2];
  }
  if (*(char *)(a3 + 23) < 0) {
    sub_1000DC48C(&__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  sub_100098B10(&__p, (void *)a1, (uint64_t)__dst, 3, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100C6455C;
  v10[3] = &unk_1022EFD90;
  v10[6] = v14;
  v10[7] = a1;
  void v10[4] = v8;
  v10[5] = v7;
  v10[8] = a2;
  v10[9] = a3;
  [v8 setHandler:v10];
  [v8 setNextFireDelay:10.0];
  sub_1001AB2D0(a1, (uint64_t *)a2);
  [*(id *)(a1 + 64) setObject:v8 forKeyedSubscript:v7];
  _Block_object_dispose(v14, 8);
  return sub_1001AB240((uint64_t)v15);
}

void sub_100C63F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C63F78(void *a1, void *a2, int a3)
{
  if (a2)
  {
    [a2 cppClientKey];
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v15 = 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = v14;
    if (v15 < 0) {
      unint64_t v6 = (void **)v14[0];
    }
    uint64_t buf = 68289538;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = v6;
    __int16 v21 = 1026;
    int v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA LiveActivity update\", \"ClientKey\":%{public, location:escape_only}s, \"coming\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
  }
  if (a3)
  {
    if (sub_100103284(a1 + 15, (unsigned __int8 *)v14))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
      uint64_t v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = v14;
        if (v15 < 0) {
          id v8 = (void **)v14[0];
        }
        uint64_t buf = 68289282;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        __int16 v19 = 2082;
        uint64_t v20 = v8;
        long long v9 = "{\"msg%{public}.0s\":\"skip taking #CLIUA for LiveActivity. Already exists\", \"ClientKey\":%{public, locat"
             "ion:escape_only}s}";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      if (SHIBYTE(v15) < 0)
      {
        sub_1000DC48C(__dst, v14[0], (unint64_t)v14[1]);
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)v14;
        uint64_t v13 = v15;
      }
      sub_100134750(&__p, "LiveActivity");
      sub_100098B10(&__p, a1, (uint64_t)__dst, 4, &buf);
      sub_10017F694((uint64_t)(a1 + 15), (unsigned __int8 *)v14, (long long *)v14, (long long *)&buf);
      sub_1001AB240((uint64_t)&buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  else
  {
    if (sub_100103284(a1 + 15, (unsigned __int8 *)v14))
    {
      sub_100C648DC(a1 + 15, (unsigned __int8 *)v14);
      goto LABEL_34;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EFDD0);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      long long v10 = v14;
      if (v15 < 0) {
        long long v10 = (void **)v14[0];
      }
      uint64_t buf = 68289282;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      uint64_t v20 = v10;
      long long v9 = "{\"msg%{public}.0s\":\"skip erasing #CLIUA for LiveActivity. Does not exists\", \"ClientKey\":%{public, locat"
           "ion:escape_only}s}";
      goto LABEL_28;
    }
  }
LABEL_34:
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_100C642AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C6431C(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  for (uint64_t i = *(uint64_t **)(a1 + 32); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      sub_1000DC48C(__p, (void *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)i + 1);
      uint64_t v10 = i[4];
    }
    long long v11 = *(_OWORD *)(i + 5);
    uint64_t v12 = i[7];
    if (v10 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    uint64_t v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4, __p[0], __p[1], v10);
    v14[0] = @"ActiveAssertionLevel";
    uint64_t v6 = &dword_100000014;
    while (v6 != -4)
    {
      uint64_t v7 = *(unsigned int *)((char *)&unk_101D8A3E8 + v6);
      if (v7 >= 6) {
        sub_10000EDDC("array::at");
      }
      v6 -= 4;
      if (*((_DWORD *)&v11 + v7)) {
        goto LABEL_14;
      }
    }
    uint64_t v7 = 0;
LABEL_14:
    v15[0] = +[NSNumber numberWithUnsignedInt:v7];
    v14[1] = @"AssertionCounts";
    v13[0] = +[NSNumber numberWithInt:v11];
    v13[1] = +[NSNumber numberWithInt:DWORD1(v11)];
    v13[2] = +[NSNumber numberWithInt:DWORD2(v11)];
    _OWORD v13[3] = +[NSNumber numberWithInt:HIDWORD(v11)];
    void v13[4] = +[NSNumber numberWithInt:v12];
    v13[5] = +[NSNumber numberWithInt:HIDWORD(v12)];
    v15[1] = +[NSArray arrayWithObjects:v13 count:6];
    [v2 setObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 2) forKeyedSubscript:v5];
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

void sub_100C64534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100C6455C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  [*(id *)(a1 + 32) invalidate];
  if ([*(id *)(v2 + 64) objectForKeyedSubscript:*(void *)(a1 + 40)] == *(id *)(a1 + 32))
  {
    long long v9 = *(void **)(v2 + 64);
    uint64_t v10 = *(void *)(a1 + 40);
    [v9 setObject:0 forKeyedSubscript:v10];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EFDD0);
    }
    id v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v4 = *(uint64_t **)(a1 + 64);
      if (*((char *)v4 + 23) < 0) {
        uint64_t v4 = (uint64_t *)*v4;
      }
      uint64_t v5 = *(uint64_t **)(a1 + 72);
      if (*((char *)v5 + 23) < 0) {
        uint64_t v5 = (uint64_t *)*v5;
      }
      int v11 = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      int v16 = v4;
      __int16 v17 = 2082;
      uint64_t v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Inconsistent state detected.  An unknown decay timer fired!\", \"clientKey\":%{public, location:escape_only}s, \"originalReason\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    uint64_t v6 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v7 = *(uint64_t **)(a1 + 64);
      if (*((char *)v7 + 23) < 0) {
        uint64_t v7 = (uint64_t *)*v7;
      }
      id v8 = *(uint64_t **)(a1 + 72);
      if (*((char *)v8 + 23) < 0) {
        id v8 = (uint64_t *)*v8;
      }
      int v11 = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      int v16 = v7;
      __int16 v17 = 2082;
      uint64_t v18 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Inconsistent state detected.  An unknown decay timer fired!", "{\"msg%{public}.0s\":\"#CLIUA Inconsistent state detected.  An unknown decay timer fired!\", \"clientKey\":%{public, location:escape_only}s, \"originalReason\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x26u);
    }
  }
}

uint64_t sub_100C6479C(uint64_t result, unsigned int a2)
{
  if (a2 >= 6) {
    sub_10000EDDC("array::at");
  }
  int v2 = *(_DWORD *)(result + 4 * a2);
  *(_DWORD *)(result + 4 * a2) = v2 - 1;
  if (v2 <= 0) {
    sub_101A88C74();
  }
  return result;
}

void sub_100C647DC(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100C6480C(uint64_t a1)
{
  sub_100C64848(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100C64848(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      sub_100C6488C((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void sub_100C6488C(uint64_t a1)
{
  sub_1001AB240(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *sub_100C648DC(void *a1, unsigned __int8 *a2)
{
  id result = sub_100103284(a1, a2);
  if (result)
  {
    sub_10017FA3C(a1, result, (uint64_t)v4);
    sub_10017FCC0((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void sub_100C64964(id a1)
{
  qword_102418FE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_100C64AA8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 20 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100C64D90(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x14)) + 200 * (v7 % 0x14);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  long long v12 = *(_OWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 96) = v13;
  long long v15 = *(_OWORD *)(a2 + 144);
  long long v16 = *(_OWORD *)(a2 + 160);
  long long v17 = *(_OWORD *)(a2 + 176);
  *(void *)(v8 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 144) = v15;
  uint64_t v18 = a1[4];
  uint64_t v19 = a1[5] + 1;
  a1[5] = v19;
  unint64_t v20 = v18 + v19;
  uint64_t v21 = a1[1];
  int v22 = (void *)(v21 + 8 * (v20 / 0x14));
  uint64_t v23 = *v22 + 200 * (v20 % 0x14);
  if (a1[2] == v21) {
    uint64_t v23 = 0;
  }
  if (v23 == *v22) {
    uint64_t v23 = *(v22 - 1) + 4000;
  }
  return v23 - 200;
}

uint64_t sub_100C64D30(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x14) {
    a2 = 1;
  }
  if (v2 < 0x28) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 20;
  }
  return v4 ^ 1u;
}

void sub_100C64D90(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x14;
  unint64_t v4 = v2 - 20;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      id v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFA0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFA0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      id v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFA0uLL);
  sub_1000DA434(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  size_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100C6505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C6519C(uint64_t a1, void *a2)
{
  *(void *)a1 = off_1022EFE20;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(void *)(a1 + 96) = objc_alloc_init((Class)SPFinderStateManager);
  *(void *)(a1 + 72) = [[CLSubHarvesterAvengerExternalAdapter alloc] initWithHarvesterExternal:a1];
  if (_os_feature_enabled_impl())
  {
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    id v4 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLAvengerScanner"];
    *(void *)(a1 + 64) = v4;
    [v4 registerDelegate:*(void *)(a1 + 72) inSilo:objc_msgSend(*(id *)(a1 + 8), "silo")];
  }
  id v5 = [[[a2 vendor] proxyForService:@"CLRoutineMonitor"];
  *(void *)(a1 + 112) = v5;
  [v5 registerDelegate:*(void *)(a1 + 72) inSilo:[*(id *)(a1 + 8) silo]];
  [*(id *)(a1 + 112) setDelegateEntityName:"CLSubHarvesterAvengerExternal"];
  return a1;
}

void sub_100C652F0(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  if (v7) {
    sub_101A62790(v7);
  }
  sub_101A88E44(v5, v4, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C65324(uint64_t a1)
{
  *(void *)a1 = off_1022EFE20;

  if (_os_feature_enabled_impl())
  {

    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
  }
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_100C654B0(uint64_t a1)
{
  sub_100C65324(a1);

  operator delete();
}

void sub_100C654E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    if ([v4 getOptedIn] == a2)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022EFF68);
      }
      uint64_t v6 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 68289026;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal scanner does not need to be updated\"}", (uint8_t *)&v7, 0x12u);
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022EFF68);
      }
      uint64_t v5 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 68289026;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal updating scanner\"}", (uint8_t *)&v7, 0x12u);
      }
      [*(id *)(a1 + 80) setOptedIn:a2];
    }
  }
  else
  {
    *(void *)(a1 + 88) = [[CLSubHarvesterAvengerExternalAdapter alloc] initWithHarvesterExternal:a1];
    *(void *)(a1 + 80) = [[CLAvengerScannerClient alloc] initWithDelegate:*(void *)(a1 + 88) queue:objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue") optedIn:a2];
  }
}

uint64_t sub_100C656C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2);
}

id sub_100C656F8(uint64_t a1)
{
  id v1 = [objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLClientManager"];

  return [v1 syncgetLocationClientKeys];
}

void sub_100C65730(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = a2;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022EFF68);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLSubHarvesterAvengerExternal::setupClients", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022EFF68);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterAvengerExternal::setupClients(CLAvengerHarvestInterface::Receiver *)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100681630();
}

void sub_100C65BCC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EFF88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EFF88);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  if (*a2 == 22) {
    (*(void (**)(void, uint64_t, _DWORD *, uint64_t))(**(void **)(a4 + 56) + 72))(*(void *)(a4 + 56), a1, a2, a3);
  }
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C65DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C65DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EFF88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EFF88);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a4 + 56) + 24))(*(void *)(a4 + 56), a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C65FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C65FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EFF88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EFF88);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a4 + 56) + 88))(*(void *)(a4 + 56), a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C661DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C661FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EFF88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EFF88);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a4 + 56) + 16))(*(void *)(a4 + 56), a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C663E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C66408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EFF88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onSignalEnvironmentProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EFF88);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onSignalEnvironmentProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a4 + 56) + 56))(*(void *)(a4 + 56), a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C665F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C66614(void *a1)
{
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = a1[5];
  a1[5] = 0;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

id sub_100C6670C(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:*a2 registrationInfo:0];
}

id sub_100C66720(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:*a2];
}

void sub_100C66730()
{
}

id sub_100C66778(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 24) + 16) register:*(void *)(*(void *)(a1 + 24) + 8) forNotification:*a2 registrationInfo:0];
}

id sub_100C6678C(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 24) + 16) unregister:*(void *)(*(void *)(a1 + 24) + 8) forNotification:*a2];
}

id sub_100C6679C(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:*a2 registrationInfo:0];
}

id sub_100C667B0(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:*a2];
}

id sub_100C667C0(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) register:*(void *)(*(void *)(a1 + 32) + 8) forNotification:*a2 registrationInfo:0];
}

id sub_100C667D4(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) unregister:*(void *)(*(void *)(a1 + 32) + 8) forNotification:*a2];
}

id sub_100C667E4(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:*a2 registrationInfo:0];
}

id sub_100C667F8(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:*a2];
}

void sub_100C66808(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    sub_100C654E8(a1, 0);
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 64);
    uint64_t v3 = CLISP_ME_TOKEN;
    [v2 startMonitoringAvengerAdvertisementsForClient:v3 clientName:@"CLSubHarvesterAvengerExternal"];
  }
}

void sub_100C6688C(uint64_t a1, uint64_t a2)
{
  if (_os_feature_enabled_impl())
  {
    sub_100C654E8(a1, a2);
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 64);
    uint64_t v5 = CLISP_ME_TOKEN;
    _[v4 startMonitoringAvengerAdvertisementsForClient:v5 optedIn:a2 clientName:@"CLSubHarvesterAvengerExternal"];
  }
}

void sub_100C66918(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {

    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 64);
    uint64_t v3 = CLISP_ME_TOKEN;
    [v2 stopMonitoringAvengerAdvertisementsForClient:v3];
  }
}

uint64_t sub_100C66994(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 32))();
}

uint64_t sub_100C669BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 40))();
}

uint64_t sub_100C669E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 48))();
}

id sub_100C66A0C(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v2 = *(void **)(a1 + 80);
    if (v2)
    {
      return [v2 isScanning];
    }
    return 0;
  }
  uint64_t v4 = *(void **)(a1 + 64);
  if (!v4) {
    return 0;
  }

  return _[v4 syncgetIsScanning];
}

void sub_100C66A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = [objc_msgSend(*(id *)(v3 + 8), "silo") queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100C66B18;
  v5[3] = &unk_1022A56E0;
  v5[4] = a2;
  v5[5] = v3;
  dispatch_async(v4, v5);
}

uint64_t sub_100C66B18(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 40) + 56) + 64))(*(void *)(*(void *)(a1 + 40) + 56), *(void *)(a1 + 32));
}

uint64_t sub_100C66B44(uint64_t result)
{
  id v1 = (int *)(result + 104);
  if (*(_DWORD *)(result + 104) == -1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (const char *)GEOCountryConfigurationCountryCodeChangedDarwinNotification;
    uint64_t v4 = [objc_msgSend(*(id *)(result + 8), "silo") queue];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100C66BF8;
    handler[3] = &unk_1022BA9F0;
    handler[4] = v2;
    return notify_register_dispatch(v3, v1, v4, handler);
  }
  return result;
}

uint64_t sub_100C66BF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration") countryCode];
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 56) + 80);

  return v2();
}

uint64_t sub_100C66C60(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 104);
  if (result != -1) {
    return notify_cancel(result);
  }
  return result;
}

id sub_100C66C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)(a1 + 112);
  if (v6)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100C66D70;
    v9[3] = &unk_1022EFF20;
    double v9[4] = a4;
    void v9[5] = a1;
    return [v6 fetchEstimatedLocationAtDate:a2 options:a3 withReply:v9];
  }
  else
  {
    id v8 = [*(id *)(a1 + 8) silo];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100C66D5C;
    v10[3] = &unk_1022D7BF0;
    void v10[4] = a4;
    return [v8 async:v10];
  }
}

uint64_t sub_100C66D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100C66D70(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(*(void *)(a1 + 40) + 8) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_100C66DFC;
  v7[3] = &unk_1022B30F8;
  uint64_t v5 = *(void *)(a1 + 32);
  void v7[4] = a2;
  v7[5] = v5;
  return [v4 async:v7];
}

uint64_t sub_100C66DFC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100C66E10(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100C66E40(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C66E70()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100C66F28(_Unwind_Exception *a1)
{
}

void sub_100C66F40()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100C66FE8(_Unwind_Exception *a1)
{
}

void sub_100C67000()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D8A434;
      v0[3] = unk_101D8A444;
      v0[4] = xmmword_101D8A454;
      v0[0] = xmmword_101D8A414;
      v0[1] = unk_101D8A424;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100C670E0(_Unwind_Exception *a1)
{
}

uint64_t sub_100C670F8()
{
  sub_100134750(qword_1024809B0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024809B0, (void *)&_mh_execute_header);
}

void sub_100C67208(id a1)
{
  qword_1024809C8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLOnBodyNotifierSilo"];
}

uint64_t sub_100C672C8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100C67554;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024809E8 != -1) {
    dispatch_once(&qword_1024809E8, block);
  }
  return qword_10248AAB8;
}

void sub_100C6752C(id a1)
{
  if ((sub_1000A16E8() & 0x800) != 0) {
    byte_1024809D8 = 1;
  }
}

void sub_100C67554()
{
  BOOL v5 = 0;
  uint64_t v0 = sub_1000D3E78();
  sub_10006B564(v0, &v3);
  char v1 = sub_1000D2988(v3, "ForceAPOnBodyDetection", &v5);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if ((v1 & 1) == 0) {
    BOOL v5 = 0;
  }
  __int16 v2 = sub_1000A16E8();
  if (!v5 && (v2 & 0x1000) != 0) {
    operator new();
  }
  operator new();
}

void sub_100C67620()
{
}

uint64_t sub_100C67674(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100C67740(a1, "CLOnBodyNotifier", a2);
  *(void *)uint64_t v3 = off_1022EFFF8;
  *(unsigned char *)(v3 + 109) = 0;
  id v4 = (BOOL *)(v3 + 109);
  uint64_t v5 = sub_1000D3E78();
  sub_10006B564(v5, &v8);
  char v6 = sub_1000D2988(v8, "LogOnBody", v4);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if ((v6 & 1) == 0) {
    BOOL *v4 = 0;
  }
  return a1;
}

void sub_100C67718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_100C677EC(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100C67740(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022F0198;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100C677D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C677EC(uint64_t a1)
{
  *(void *)a1 = off_1022F0198;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100C6787C(unsigned char *a1)
{
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 224))(a1);
  a1[108] = 1;
  return result;
}

void *sub_100C678C8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100C67944(uint64_t a1)
{
  int v3 = 0;
  if (sub_1001072EC(a1, &v3, 1)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
  }
  return 1;
}

uint64_t sub_100C679AC(uint64_t a1)
{
  int v3 = 0;
  if (!sub_1001072EC(a1, &v3, 1)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
  }
  return 1;
}

uint64_t sub_100C67A14(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1022F0278;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_100C67AF8()
{
}

void sub_100C67BB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

id sub_100C67BF0(uint64_t a1)
{
  id v2 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLOnBodyNotifier"];

  return [v2 syncgetDoSync:a1];
}

void sub_100C67C3C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        __int16 v9 = (uint64_t *)v4;
      }
      else {
        __int16 v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F0168);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        char v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          char v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F0168);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100C67ECC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100C67F80(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100C67FC8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100C68010(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100C68058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102473548);
}

uint64_t sub_100C68084(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          size_t v29 = (uint64_t *)v25;
        }
        else {
          size_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100C699D4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102473549;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        __int16 v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F0168);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F0168);
    }
    BOOL v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100C68528(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F0168);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F0168);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100C687AC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F0168);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F0168);
                }
                size_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  size_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                double v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100C68B80(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x28uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *uint64_t v6 = (uint64_t)off_1022F02C0;
  *(_OWORD *)(v6 + 3) = *a3;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100C68C34(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C68C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = 0;
  v5[1] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100C68C9C(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F0168);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    size_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    long long v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x28uLL);
    v18[1] = 0;
    v18[2] = 0;
    *BOOL v18 = (uint64_t)off_1022F02C0;
    *(_OWORD *)(v18 + 3) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_100C6A484();
  }
  os_activity_scope_leave(&state);
}

void sub_100C69280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100C692CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F0168);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F0168);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F0168);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F0168);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022F0168);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F0168);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100C6987C(uint64_t a1)
{
  sub_100C69934(a1);

  operator delete();
}

id sub_100C698B4(uint64_t a1, int a2, void *a3)
{
  id result = sub_100C69B98(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100C69904(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100C69934(uint64_t a1)
{
  *(void *)a1 = &off_1022F0278;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100C699A4(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100C699D4()
{
}

unsigned char *sub_100C69A80(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100C69B98(a4);
    uint64_t v10 = *(void *)a3 + 80;
    int v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_100C69B78(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100C69B98(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100C69C34(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100C69FC0(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100C69C34(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100C6A380((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022F0290);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D8A5A2 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022F0290);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D8A5A2 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022F0290);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D8A5A2 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOnBodyNotifier_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_100C69FC0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F0290);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8A5A2 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOnBodyNotifier_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F0290);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8A5A2 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022F0290);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100C6A380(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102393248))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)16) {
      sub_101A890D8();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes")]];
  }

  return [a2 cppObjectPtr];
}

void sub_100C6A408(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F02C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C6A428(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F02C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C6A484()
{
}

void sub_100C6A530(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_100C69B98(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              double v48 = v19;
              sub_100C69A80(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              size_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  size_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              double v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F0168);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F0168);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                float v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_100C6A920(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_100C6A940(uint64_t a1)
{
  *(void *)a1 = off_1022F0310;
  sub_100C73854(a1 + 8);
  sub_100C73854(a1 + 880);
  sub_101171D90(a1 + 1752);
  *(unsigned char *)(a1 + 832) = 1;
  return a1;
}

void sub_100C6A9B0(_Unwind_Exception *a1)
{
  v1[110] = off_1022F0370;
  sub_100C73780(v1 + 111);
  v1[1] = off_1022F0370;
  sub_100C73780(v1 + 2);
  _Unwind_Resume(a1);
}

void *sub_100C6AA10(void *a1)
{
  *a1 = off_1022F0370;
  sub_100C73780(a1 + 1);
  return a1;
}

void *sub_100C6AA58(void *a1)
{
  *a1 = off_1022F0310;
  a1[110] = off_1022F0370;
  sub_100C73780(a1 + 111);
  a1[1] = off_1022F0370;
  sub_100C73780(a1 + 2);
  return a1;
}

void sub_100C6AAEC(void *a1)
{
  sub_100C6AA58(a1);

  operator delete();
}

void sub_100C6AB24(uint64_t a1)
{
  sub_100C6AB60(a1 + 8);

  sub_100C6AB60(a1 + 880);
}

void sub_100C6AB60(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_100C72070(a1);
  *(_DWORD *)(v1 + 420) = 0xFFFF;
  *(void *)(v1 + 424) = 0;
  *(void *)(v1 + 432) = 0;
  *(void *)(v1 + 440) = 0xBFF0000000000000;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v1 + 448) = xmmword_101D1C570;
  *(_OWORD *)(v1 + 464) = _Q1;
  *(_OWORD *)(v1 + 480) = _Q1;
  *(void *)(v1 + 496) = 0xBFF0000000000000;
  *(_DWORD *)(v1 + 504) = 0;
  *(void *)(v1 + 516) = 0;
  *(void *)(v1 + 524) = 0;
  *(void *)(v1 + 508) = 0xBFF0000000000000;
  *(_DWORD *)(v1 + 532) = 0;
  *(void *)(v1 + 536) = 0xBFF0000000000000;
  *(_DWORD *)(v1 + 544) = 0x7FFFFFFF;
  *(void *)(v1 + 556) = 0;
  *(void *)(v1 + 564) = 0;
  *(void *)(v1 + 548) = 0;
  *(unsigned char *)(v1 + 572) = 0;
  uint64_t v7 = *(void *)(v1 + 112);
  v1 += 112;
  *(void *)(v1 + 8) = v7;
  uint64_t v8 = 0;
  sub_10027D0DC(v1, 4uLL, &v8);
  *(_DWORD *)(v1 + 472) = 0;
}

uint64_t sub_100C6AC04(uint64_t a1, double *a2, int *a3, int *a4)
{
  int v8 = sub_100C6AC64(a1 + 8, a2, a3, a4);
  return v8 & sub_100C6AC64(a1 + 880, a2, a3, a4);
}

uint64_t sub_100C6AC64(uint64_t a1, double *a2, int *a3, int *a4)
{
  if (!*(unsigned char *)(a1 + 824)
    || !*(unsigned char *)(a1 + 249)
    || *(unsigned char *)(a1 + 825)
    || (double v8 = *(double *)(a1 + 340), *a2 - v8 <= 60.0))
  {
    sub_100C749FC(a1, *a2);
    *(_DWORD *)(a1 + 624) = *(_DWORD *)(a1 + 628);
    *(_DWORD *)(a1 + 628) = *a3;
    if (*(unsigned char *)(a1 + 249))
    {
      if ((sub_1001BD27C((double *)(a1 + 832), (double *)(a1 + 208), (double *)(a1 + 200), **(double **)(a1 + 112) * 57.2957795, *(float *)(a1 + 584)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        uint64_t v14 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
        }
        BOOL v15 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (v15)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F03E0);
          }
          *(_WORD *)uint64_t v35 = 0;
          goto LABEL_36;
        }
        return result;
      }
      if ((sub_100C74B28(a1, a2) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        __int16 v16 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "KF:Prediction failed", buf, 2u);
        }
        BOOL v17 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (v17)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F03E0);
          }
          *(_WORD *)uint64_t v35 = 0;
          goto LABEL_36;
        }
        return result;
      }
      sub_100C750BC(a1, (uint64_t)"propagation for motion", -1.0);
      *(unsigned char *)(a1 + 248) = 0;
      switch(*a3)
      {
        case 1:
        case 10:
          goto LABEL_14;
        case 2:
        case 11:
          if (*a4 < 1) {
            goto LABEL_50;
          }
LABEL_14:
          *(unsigned char *)(a1 + 248) = 1;
          if ((sub_100C755D0(a1) & 1) == 0)
          {
            sub_100C72070(a1);
            *(unsigned char *)(a1 + 248) = 0;
            *(void *)(a1 + 624) = 0;
          }
          long long v11 = *(_OWORD *)(a1 + 656);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 640);
          *(_OWORD *)(a1 + 40) = v11;
          uint64_t v12 = *(void *)(a1 + 672);
LABEL_49:
          *(void *)(a1 + 56) = v12;
LABEL_50:
          if (*(unsigned char *)(a1 + 249)
            && sqrt(**(double **)(a1 + 88) + *(double *)(*(void *)(a1 + 88) + 40)) > 900000.0)
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022F03E0);
            }
            uint64_t v27 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t buf = 134349056;
              uint64_t v37 = 0x412B774000000000;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "KF:re-init,uncertainty growth>%{public}.0lf", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_1022F03E0);
              }
              *(_DWORD *)uint64_t v35 = 134349056;
              *(void *)&v35[4] = 0x412B774000000000;
              int v32 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotionActivity::Confidence &)", "%s\n", v32);
              if (v32 != (char *)buf) {
                free(v32);
              }
            }
            sub_100C72070(a1);
          }
          sub_100C750BC(a1, (uint64_t)"motion update", -1.0);
          break;
        case 4:
          long long v25 = *(_OWORD *)(a1 + 704);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 688);
          *(_OWORD *)(a1 + 40) = v25;
          uint64_t v12 = *(void *)(a1 + 720);
          goto LABEL_49;
        case 8:
          long long v26 = *(_OWORD *)(a1 + 752);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 736);
          *(_OWORD *)(a1 + 40) = v26;
          uint64_t v12 = *(void *)(a1 + 768);
          goto LABEL_49;
        default:
          long long v23 = *(_OWORD *)(a1 + 800);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
          *(_OWORD *)(a1 + 40) = v23;
          uint64_t v12 = *(void *)(a1 + 816);
          goto LABEL_49;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 248) = 0;
      int v13 = *a3;
      if (*a3 <= 40)
      {
        switch(v13)
        {
          case 1:
          case 10:
            uint64_t result = 1;
            goto LABEL_42;
          case 2:
          case 11:
            uint64_t result = 1;
            if (*a4 >= 1)
            {
LABEL_42:
              *(unsigned char *)(a1 + 248) = 1;
              long long v21 = *(_OWORD *)(a1 + 656);
              *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 640);
              *(_OWORD *)(a1 + 40) = v21;
              *(void *)(a1 + 56) = *(void *)(a1 + 672);
            }
            break;
          case 4:
            goto LABEL_43;
          case 8:
            long long v24 = *(_OWORD *)(a1 + 752);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 736);
            *(_OWORD *)(a1 + 40) = v24;
            uint64_t v20 = *(void *)(a1 + 768);
            goto LABEL_46;
          default:
            goto LABEL_40;
        }
        return result;
      }
      if (v13 == 41)
      {
LABEL_43:
        long long v22 = *(_OWORD *)(a1 + 704);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 688);
        *(_OWORD *)(a1 + 40) = v22;
        uint64_t v20 = *(void *)(a1 + 720);
      }
      else
      {
LABEL_40:
        long long v19 = *(_OWORD *)(a1 + 800);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
        *(_OWORD *)(a1 + 40) = v19;
        uint64_t v20 = *(void *)(a1 + 816);
      }
LABEL_46:
      *(void *)(a1 + 56) = v20;
    }
    return 1;
  }
  uint64_t result = 1;
  if (*(unsigned char *)(a1 + 577)) {
    return result;
  }
  *(double *)uint64_t v35 = v8 + 60.0;
  *(unsigned char *)(a1 + 825) = 1;
  int v10 = *a3;
  int v33 = *a4;
  int v34 = v10;
  if (sub_100C6AC64(a1, v35, &v34, &v33))
  {
    int v33 = 2;
    int v34 = 2;
    if (sub_100C6AC64(a1, v35, &v34, &v33))
    {
      *(unsigned char *)(a1 + 825) = 0;
      uint64_t result = 1;
      *(unsigned char *)(a1 + 577) = 1;
      return result;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v30 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
    }
    BOOL v31 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v31)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_36;
      }
LABEL_79:
      dispatch_once(&qword_102419380, &stru_1022F03E0);
LABEL_36:
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotionActivity::Confidence &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v28 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
    }
    BOOL v29 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v29)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_36;
      }
      goto LABEL_79;
    }
  }
  return result;
}

BOOL sub_100C6B540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000EF668(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,null island", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      *(_WORD *)uint64_t v85 = 0;
LABEL_87:
      int v34 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n");
LABEL_88:
      if (v34 != buf) {
        free(v34);
      }
      return 0;
    }
    return result;
  }
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v30 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,hunc<=0", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      *(_WORD *)uint64_t v85 = 0;
      goto LABEL_87;
    }
    return result;
  }
  double v8 = *(double *)(a1 + 1164);
  *(_OWORD *)&v85[4] = 0uLL;
  *(_OWORD *)&v85[20] = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v85[36] = _Q1;
  *(_OWORD *)&v85[52] = _Q1;
  *(_OWORD *)&v85[68] = _Q1;
  *(_DWORD *)uint64_t v85 = 0xFFFF;
  *(_DWORD *)&v85[84] = 0;
  long long v86 = 0uLL;
  *(void *)&v85[88] = 0xBFF0000000000000;
  *(void *)((char *)&v87 + 4) = 0xBFF0000000000000;
  LODWORD(v87) = 0;
  HIDWORD(v87) = 0x7FFFFFFF;
  memset(v88, 0, 25);
  __int16 v89 = 0;
  *(_DWORD *)double v80 = 0xFFFF;
  *(_OWORD *)&v80[4] = 0uLL;
  *(_OWORD *)&v80[20] = xmmword_101D1C320;
  *(_OWORD *)&v80[36] = _Q1;
  *(_OWORD *)&v80[52] = _Q1;
  *(_OWORD *)&v80[68] = _Q1;
  *(_DWORD *)&v80[84] = 0;
  long long v81 = 0uLL;
  *(void *)&v80[88] = 0xBFF0000000000000;
  LODWORD(v82) = 0;
  *(void *)((char *)&v82 + 4) = 0xBFF0000000000000;
  HIDWORD(v82) = 0x7FFFFFFF;
  memset(v83, 0, 25);
  v84[0] = 0;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  uint64_t v14 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(_DWORD *)(a2 + 96);
    uint64_t v16 = *(void *)(a2 + 4);
    uint64_t v17 = *(void *)(a2 + 12);
    uint64_t v18 = *(void *)(a2 + 20);
    uint64_t v19 = *(void *)(a2 + 28);
    uint64_t v20 = *(void *)(a2 + 36);
    int v21 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)uint64_t buf = 67241729;
    *(_DWORD *)double v101 = v15;
    *(_WORD *)&v101[4] = 2049;
    *(void *)&v101[6] = v16;
    *(_WORD *)&v101[14] = 2049;
    *(void *)&v101[16] = v17;
    __int16 v102 = 2050;
    uint64_t v103 = v18;
    __int16 v104 = 2049;
    uint64_t v105 = v19;
    __int16 v106 = 2050;
    uint64_t v107 = v20;
    __int16 v108 = 1026;
    int v109 = v21;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "KF:Attempting update,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.1f,alt,%{private}.3f,vunc,%{public}.3f,conf,%{public}d", buf, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v71 = *(_DWORD *)(a2 + 96);
    uint64_t v72 = *(void *)(a2 + 4);
    uint64_t v73 = *(void *)(a2 + 12);
    uint64_t v74 = *(void *)(a2 + 20);
    uint64_t v75 = *(void *)(a2 + 28);
    uint64_t v76 = *(void *)(a2 + 36);
    int v77 = *(_DWORD *)(a2 + 84);
    int v90 = 67241729;
    *(_DWORD *)std::string v91 = v71;
    *(_WORD *)&v91[4] = 2049;
    *(void *)&v91[6] = v72;
    *(_WORD *)&v91[14] = 2049;
    *(void *)&v91[16] = v73;
    __int16 v92 = 2050;
    uint64_t v93 = v74;
    __int16 v94 = 2049;
    uint64_t v95 = v75;
    __int16 v96 = 2050;
    uint64_t v97 = v76;
    __int16 v98 = 1026;
    int v99 = v77;
    int v78 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n", v78);
    if (v78 != (char *)buf) {
      free(v78);
    }
  }
  double v22 = -1.0;
  if (*(double *)(a2 + 20) > 0.0 && *(double *)(a1 + 1164) > 0.0) {
    double v22 = *(double *)(a2 + 76) - *(double *)(a1 + 1220);
  }
  int v23 = sub_100C6C28C(a1 + 880, a2, (uint64_t)v80, v84, 0);
  BOOL result = 0;
  HIBYTE(v84[0]) = v23;
  if (!v23) {
    return result;
  }
  int v24 = *(_DWORD *)(a2 + 96);
  if (!LOBYTE(v84[0]))
  {
    if (v24 == 4 && *(int *)(a2 + 84) > 72 || (sub_100C724F4(v24) & 1) != 0 || v22 < 600.0)
    {
      sub_100C7241C(a1);
      long long v41 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v41;
      *(_OWORD *)(a3 + 128) = *(_OWORD *)v83;
      *(_OWORD *)(a3 + 140) = *(_OWORD *)&v83[12];
      long long v42 = *(_OWORD *)&v80[48];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v80[32];
      *(_OWORD *)(a3 + 48) = v42;
      long long v43 = *(_OWORD *)&v80[80];
      *(_OWORD *)(a3 + 64) = *(_OWORD *)&v80[64];
      *(_OWORD *)(a3 + 80) = v43;
      long long v44 = *(_OWORD *)&v80[16];
      *(_OWORD *)a3 = *(_OWORD *)v80;
      *(_OWORD *)(a3 + 16) = v44;
      int v40 = "intervalOfInterest,ltn";
    }
    else if (sub_100C6C28C(a1 + 8, a2, (uint64_t)v85, &v89, 0))
    {
      if ((_BYTE)v89)
      {
        sub_100C7241C(a1);
        long long v36 = v82;
        *(_OWORD *)(a3 + 96) = v81;
        *(_OWORD *)(a3 + 112) = v36;
        *(_OWORD *)(a3 + 128) = *(_OWORD *)v83;
        *(_OWORD *)(a3 + 140) = *(_OWORD *)&v83[12];
        long long v37 = *(_OWORD *)&v80[48];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v80[32];
        *(_OWORD *)(a3 + 48) = v37;
        long long v38 = *(_OWORD *)&v80[80];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v80[64];
        *(_OWORD *)(a3 + 80) = v38;
        long long v39 = *(_OWORD *)&v80[16];
        *(_OWORD *)a3 = *(_OWORD *)v80;
        *(_OWORD *)(a3 + 16) = v39;
        int v40 = "notStatic,ltn";
      }
      else
      {
        *(void *)(a1 + 64) = *(void *)(a1 + 936);
        long long v61 = *(_OWORD *)(a1 + 920);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 904);
        *(_OWORD *)(a1 + 48) = v61;
        *(unsigned char *)(a1 + 256) = *(unsigned char *)(a1 + 1128);
        *(void *)(a1 + 632) = *(void *)(a1 + 1504);
        uint64_t v35 = sub_100C728B8(a1 + 888, a1 + 16);
        long long v62 = *(_OWORD *)&v85[80];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v85[64];
        *(_OWORD *)(a3 + 80) = v62;
        long long v63 = *(_OWORD *)&v85[48];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v85[32];
        *(_OWORD *)(a3 + 48) = v63;
        *(_OWORD *)(a3 + 140) = *(_OWORD *)&v88[12];
        long long v64 = *(_OWORD *)v88;
        long long v65 = v86;
        *(_OWORD *)(a3 + 112) = v87;
        *(_OWORD *)(a3 + 128) = v64;
        *(_OWORD *)(a3 + 96) = v65;
        long long v66 = *(_OWORD *)&v85[16];
        *(_OWORD *)a3 = *(_OWORD *)v85;
        *(_OWORD *)(a3 + 16) = v66;
        if (v8 > 0.0 && *(double *)(a2 + 20) > 0.0)
        {
          sub_1000F1268((double *)(a1 + 1752), a3, a2);
          if (v67 > *(double *)(a3 + 20))
          {
            double v68 = fmax(v67, 1.0);
            uint64_t v69 = *(void *)(a1 + 968);
            double v70 = v68 * v68 * 0.5;
            *(double *)uint64_t v69 = v70;
            *(_OWORD *)(v69 + 8) = 0u;
            *(_OWORD *)(v69 + 24) = 0u;
            *(double *)(v69 + 40) = v70;
            *(_OWORD *)(v69 + 48) = 0u;
            *(_OWORD *)(v69 + 64) = 0u;
            *(void *)(v69 + 96) = 0;
            *(void *)(v69 + 104) = 0;
          }
        }
        int v40 = "staticAssumed,lts";
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      __int16 v52 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#Warning,KF:longTermStatic should not fail if longTermNormal succeeded", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        LOWORD(v90) = 0;
        int v79 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n", v79);
        if (v79 != (char *)buf) {
          free(v79);
        }
      }
      sub_100C7241C(a1);
      long long v53 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v53;
      *(_OWORD *)(a3 + 128) = *(_OWORD *)v83;
      *(_OWORD *)(a3 + 140) = *(_OWORD *)&v83[12];
      long long v54 = *(_OWORD *)&v80[48];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v80[32];
      *(_OWORD *)(a3 + 48) = v54;
      long long v55 = *(_OWORD *)&v80[80];
      *(_OWORD *)(a3 + 64) = *(_OWORD *)&v80[64];
      *(_OWORD *)(a3 + 80) = v55;
      long long v56 = *(_OWORD *)&v80[16];
      *(_OWORD *)a3 = *(_OWORD *)v80;
      *(_OWORD *)(a3 + 16) = v56;
      int v40 = "unexpected,ltn";
    }
    sub_100C720F0(v35, a2, a3, (uint64_t)v40);
    return 1;
  }
  if (v24 != 4 || *(_DWORD *)(a2 + 84) != 65 || v22 >= 36000.0)
  {
    if (v22 <= 7200.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      uint64_t v45 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        int v46 = *(_DWORD *)(a2 + 96);
        uint64_t v47 = *(void *)(a2 + 4);
        uint64_t v48 = *(void *)(a2 + 12);
        *(_DWORD *)uint64_t buf = 67240705;
        *(_DWORD *)double v101 = v46;
        *(_WORD *)&v101[4] = 2049;
        *(void *)&v101[6] = v47;
        *(_WORD *)&v101[14] = 2049;
        *(void *)&v101[16] = v48;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "KF:Dual rejection,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,blunder detected", buf, 0x1Cu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        int v49 = *(_DWORD *)(a2 + 96);
        uint64_t v50 = *(void *)(a2 + 4);
        uint64_t v51 = *(void *)(a2 + 12);
        int v90 = 67240705;
        *(_DWORD *)std::string v91 = v49;
        *(_WORD *)&v91[4] = 2049;
        *(void *)&v91[6] = v50;
        *(_WORD *)&v91[14] = 2049;
        *(void *)&v91[16] = v51;
        goto LABEL_87;
      }
      return result;
    }
    sub_100C72070(a1 + 8);
    sub_100C72070(a1 + 880);
    int v31 = sub_100C6C28C(a1 + 880, a2, (uint64_t)v80, v84, 0);
    BOOL result = 0;
    if (!v31) {
      return result;
    }
    if (LOBYTE(v84[0]))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      int v32 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "KF:input should not be rejected after a hard reset", buf, 2u);
      }
      BOOL v33 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v33)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        LOWORD(v90) = 0;
        int v34 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n");
        goto LABEL_88;
      }
      return result;
    }
    long long v57 = v82;
    *(_OWORD *)(a3 + 96) = v81;
    *(_OWORD *)(a3 + 112) = v57;
    *(_OWORD *)(a3 + 128) = *(_OWORD *)v83;
    *(_OWORD *)(a3 + 140) = *(_OWORD *)&v83[12];
    long long v58 = *(_OWORD *)&v80[48];
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v80[32];
    *(_OWORD *)(a3 + 48) = v58;
    long long v59 = *(_OWORD *)&v80[80];
    *(_OWORD *)(a3 + 64) = *(_OWORD *)&v80[64];
    *(_OWORD *)(a3 + 80) = v59;
    long long v60 = *(_OWORD *)&v80[16];
    *(_OWORD *)a3 = *(_OWORD *)v80;
    *(_OWORD *)(a3 + 16) = v60;
    sub_100C720F0(0, a2, a3, (uint64_t)"airTravelMode,ltn");
    sub_100C7241C(a1);
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  long long v25 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *(void *)(a2 + 4);
    uint64_t v27 = *(void *)(a2 + 12);
    *(_DWORD *)uint64_t buf = 134283777;
    *(void *)double v101 = v26;
    *(_WORD *)&v101[8] = 2049;
    *(void *)&v101[10] = v27;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "KF:Single AP,Dual input rejection,lat,%{private}.7f,lon,%{private}.7f", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v28 = *(void *)(a2 + 4);
    uint64_t v29 = *(void *)(a2 + 12);
    int v90 = 134283777;
    *(void *)std::string v91 = v28;
    *(_WORD *)&v91[8] = 2049;
    *(void *)&v91[10] = v29;
    goto LABEL_87;
  }
  return result;
}

uint64_t sub_100C6C28C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, char a5)
{
  double v308 = 0.0;
  double v307 = 0.0;
  double v10 = *(double *)(a1 + 256);
  *a4 = 0;
  if (!sub_1000EF668(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (*(double *)(a2 + 20) <= 0.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      long long v36 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,hunc<=0", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_312;
      }
      goto LABEL_492;
    }
    double v12 = *(double *)(a2 + 4);
    double v13 = *(double *)(a2 + 12);
    double v14 = *(double *)(a2 + 60);
    double v15 = *(double *)(a2 + 76);
    double v306 = v15;
    double v16 = *(double *)(a2 + 44);
    double v17 = *(double *)(a2 + 52);
    int v18 = *(_DWORD *)(a2 + 84);
    sub_100C7353C((uint64_t)v305);
    uint64_t v303 = a3;
    sub_100C728B8((uint64_t)v305, a1 + 8);
    uint64_t v19 = (_OWORD *)(a1 + 420);
    long long v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 420) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 436) = v20;
    long long v21 = *(_OWORD *)(a2 + 32);
    long long v22 = *(_OWORD *)(a2 + 48);
    long long v23 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 500) = v23;
    *(_OWORD *)(a1 + 452) = v21;
    *(_OWORD *)(a1 + 468) = v22;
    long long v24 = *(_OWORD *)(a2 + 96);
    long long v25 = *(_OWORD *)(a2 + 112);
    long long v26 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 532) = v25;
    *(_OWORD *)(a1 + 548) = v26;
    *(_OWORD *)(a1 + 516) = v24;
    double v27 = *(double *)(a1 + 456);
    if (v27 > 0.0 && *(double *)(a1 + 448) < -450.0)
    {
      *(void *)(a1 + 448) = 0xC07C200000000000;
      if (v27 < 300.0) {
        *(void *)(a1 + 456) = 0x4072C00000000000;
      }
    }
    uint64_t v28 = a1 + 88;
    if (*(void *)(a1 + 96) - *(void *)(a1 + 88) == 128)
    {
      v301 = (double **)(a1 + 112);
      if (*(void *)(a1 + 120) - *(void *)(a1 + 112) == 32)
      {
        double v299 = v13;
        uint64_t v29 = (double *)(a1 + 284);
        double v30 = *(double *)(a1 + 440);
        if (!*(unsigned char *)(a1 + 824) || *v29 <= 0.0 || *(double *)(a1 + 496) - *(double *)(a1 + 340) <= 60.0) {
          goto LABEL_72;
        }
        sub_1000F1268((double *)(a1 + 832), a1 + 264, a1 + 420);
        double v32 = *(double *)(a1 + 440);
        unsigned int v33 = *(_DWORD *)(a2 + 96);
        if (((v33 < 9) & (0x1C1u >> v33) & (v32 < 1500.0)) != 0) {
          double v32 = 1500.0;
        }
        double v34 = 6.0;
        if (v33 == 7) {
          double v34 = 2.5;
        }
        if (v31 >= v34 * v32)
        {
          uint64_t v35 = 1;
          *a4 = 1;
          sub_100C750BC(a1, (uint64_t)"lts rejected by distance check", -1.0);
LABEL_44:
          sub_100C73780(v305);
          return v35;
        }
        *(double *)v316 = *(double *)(a1 + 340) + 60.0;
        v309[0] = 2;
        int v304 = 2;
        if (*(double *)v316 <= *(double *)(a1 + 184))
        {
          if ((sub_100C6AC64(a1, (double *)(a1 + 184), v309, &v304) & 1) == 0)
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022F03E0);
            }
            uint64_t v48 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_191;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419380 == -1) {
              goto LABEL_54;
            }
            goto LABEL_675;
          }
        }
        else if ((sub_100C6AC64(a1, (double *)v316, v309, &v304) & 1) == 0)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F03E0);
          }
          int v40 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_191;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419380 == -1) {
            goto LABEL_54;
          }
LABEL_675:
          dispatch_once(&qword_102419380, &stru_1022F03E0);
LABEL_54:
          long long v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v41);
          goto LABEL_387;
        }
        uint64_t v42 = *(void *)(a1 + 88);
        double v43 = *(double *)(a1 + 440);
        if (*(double *)v42 + *(double *)(v42 + 40) <= v43 * v43 * 0.5625)
        {
LABEL_72:
          v302 = (double *)(a1 + 284);
          uint64_t v298 = a1 + 8;
          if (v10 >= 3.9)
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022F03E0);
            }
            uint64_t v50 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "KF:too many consecutive update rejections,KF reset", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_1022F03E0);
              }
              *(_WORD *)v316 = 0;
              int v175 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v175);
              if (v175 != (char *)buf) {
                free(v175);
              }
            }
            sub_100C72070(a1);
            uint64_t v29 = (double *)(a1 + 284);
          }
          if (*(unsigned char *)(a1 + 249))
          {
            if (*(_DWORD *)(a1 + 516) == 6)
            {
              if (*(unsigned char *)(a1 + 576) && (a5 & 1) == 0)
              {
                sub_1000F1268((double *)(a1 + 832), a1 + 264, a1 + 420);
                if (v51 >= 50.0 || *(double *)(a2 + 76) - v29[7] >= 30.0)
                {
                  if (v51 < *(double *)(a2 + 20) * 3.0 + *v29 * 3.0) {
                    sub_100C749FC(a1, v15);
                  }
                }
                else
                {
                  if (qword_102419380 != -1) {
                    dispatch_once(&qword_102419380, &stru_1022F03E0);
                  }
                  __int16 v52 = qword_102419388;
                  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)uint64_t buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "KF:update with same cell location ignored", buf, 2u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_1022F03E0);
                    }
                    *(_WORD *)v316 = 0;
                    long long v53 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v53);
                    if (v53 != (char *)buf) {
                      free(v53);
                    }
                  }
                }
              }
            }
            else if (*(unsigned char *)(a1 + 576))
            {
              *(unsigned char *)(a1 + 576) = 0;
            }
          }
          double v54 = 42.25;
          if (*(_DWORD *)(a1 + 516) == 4)
          {
            if (v18 <= 66)
            {
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_1022F03E0);
              }
              long long v55 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "KF:increment num rejections by half", buf, 2u);
              }
              double v54 = 26.2;
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_1022F03E0);
                }
                *(_WORD *)v316 = 0;
                uint64_t v177 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v177);
                if (v177 != (char *)buf) {
                  free(v177);
                }
              }
              int v56 = 1;
LABEL_109:
              unsigned int v57 = *(_DWORD *)(a2 + 96);
              if (v57 <= 8 && ((1 << v57) & 0x1C1) != 0)
              {
                if (*(unsigned char *)(a1 + 824)) {
                  double v54 = 225.0;
                }
                if (v30 < 1500.0 && *(_DWORD *)(a1 + 516) != 6) {
                  double v30 = 1500.0;
                }
              }
              if (!*(unsigned char *)(a1 + 249))
              {
                *(void *)(a1 + 192) = 0;
                goto LABEL_140;
              }
              double v59 = v15 - *(double *)(a1 + 184);
              if (v59 < 0.0) {
                double v59 = 0.0;
              }
              *(double *)(a1 + 192) = v59;
              double v60 = v15 - *(double *)(a1 + 340);
              if (v60 < 0.0) {
                double v60 = 0.0;
              }
              if (*(unsigned char *)(a1 + 248) && v60 > 172800.0)
              {
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_1022F03E0);
                }
                long long v61 = qword_102419388;
                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint64_t buf = 134349056;
                  *(void *)v326 = 0x4105180000000000;
                  _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "KF:re-init,dT>%{public}.0lf", buf, 0xCu);
                }
                if (!sub_10013D1A0(115, 2)) {
                  goto LABEL_139;
                }
                bzero(buf, 0x65CuLL);
                if (qword_102419380 == -1) {
                  goto LABEL_419;
                }
              }
              else
              {
                if (v60 <= 172800.0) {
                  goto LABEL_140;
                }
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_1022F03E0);
                }
                long long v62 = qword_102419388;
                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)uint64_t buf = 134349056;
                  *(void *)v326 = 0x4105180000000000;
                  _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "KF:re-init,dT>%{public}.0lf", buf, 0xCu);
                }
                if (!sub_10013D1A0(115, 2))
                {
LABEL_139:
                  sub_100C72070(a1);
                  long long v63 = *(_OWORD *)(a1 + 800);
                  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                  *(_OWORD *)(a1 + 40) = v63;
                  *(void *)(a1 + 56) = *(void *)(a1 + 816);
                  *(unsigned char *)(a1 + 248) = 0;
                  *(void *)(a1 + 624) = 0;
LABEL_140:
                  if (sub_100C724F4(*(_DWORD *)(a2 + 96)))
                  {
                    sub_100C72070(a1);
                  }
                  else
                  {
                    if (!*(unsigned char *)(a1 + 249)) {
                      goto LABEL_177;
                    }
                    double v297 = v10;
                    double v64 = v12;
                    double v65 = v54;
                    double v66 = v14;
                    double v67 = v17;
                    double v68 = v16;
                    double v69 = v30;
                    double v70 = *(double *)(a1 + 496);
                    double v71 = *(double *)(a1 + 340);
                    int v72 = sub_100C724F4(*(_DWORD *)(a1 + 360));
                    if (vabdd_f64(v70, v71) < 4.0) {
                      int v73 = v72;
                    }
                    else {
                      int v73 = 0;
                    }
                    double v30 = v69;
                    double v16 = v68;
                    double v17 = v67;
                    double v14 = v66;
                    double v54 = v65;
                    double v12 = v64;
                    double v10 = v297;
                    if (v73 == 1 && *(_DWORD *)(a1 + 516) != 9)
                    {
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_1022F03E0);
                      }
                      long long v86 = qword_102419388;
                      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)uint64_t buf = 134349056;
                        *(void *)v326 = 0x4010000000000000;
                        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "KF:non-GPS within %{public}.1f of GPS,ignoring.", buf, 0xCu);
                      }
                      if (!sub_10013D1A0(115, 2)) {
                        goto LABEL_43;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_1022F03E0);
                      }
                      *(_DWORD *)v316 = 134349056;
                      *(void *)&v316[4] = 0x4010000000000000;
                      long long v87 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v87);
                      goto LABEL_361;
                    }
                  }
                  if (*(unsigned char *)(a1 + 249))
                  {
                    if (*(_DWORD *)(a1 + 516) != 4) {
                      goto LABEL_161;
                    }
                    if (*(int *)(a1 + 504) >= 73)
                    {
                      double v74 = 0.0;
                      if (*(double *)(a1 + 456) > 0.0) {
                        double v74 = *(double *)(a1 + 448);
                      }
                      if (sub_1000F1648((double *)(a1 + 832), **(double **)(a1 + 112) * 57.2957795, *(double *)(*(void *)(a1 + 112) + 8) * 57.2957795, *(double *)(a1 + 424), *(double *)(a1 + 432), v74) > *(double *)(a1 + 440) * 5.0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        uint64_t v75 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "KF:diverged compared to med/high conf WiFi,resetting", buf, 2u);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          *(_WORD *)v316 = 0;
                          uint64_t v203 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v203);
                          if (v203 != (char *)buf) {
                            free(v203);
                          }
                        }
                        sub_100C72070(a1);
                      }
                    }
                    if (*(unsigned char *)(a1 + 249))
                    {
LABEL_161:
                      uint64_t v76 = (double *)(a1 + 832);
                      if ((sub_1001BD27C((double *)(a1 + 832), (double *)(a1 + 208), (double *)(a1 + 200), **(double **)(a1 + 112) * 57.2957795, *(float *)(a1 + 584)) & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v83 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      if ((sub_100C74B28(a1, &v306) & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        uint64_t v85 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_FAULT, "KF:Prediction failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_43;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_440;
                        }
                        goto LABEL_717;
                      }
                      uint64_t v77 = sub_100C750BC(a1, (uint64_t)"prediction", -1.0);
                      double v78 = **(double **)v28 + *(double *)(*(void *)v28 + 40);
                      if (v78 > 8.1e11)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v79 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)uint64_t buf = 134349056;
                          *(void *)v326 = 0x412B774000000000;
                          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "KF:re-init,uncertainty growth>%{public}.0lf", buf, 0xCu);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          *(_DWORD *)v316 = 134349056;
                          *(void *)&v316[4] = 0x412B774000000000;
                          uint64_t v210 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v210);
                          if (v210 != (char *)buf) {
                            free(v210);
                          }
                        }
                        sub_100C72070(a1);
                        long long v80 = *(_OWORD *)(a1 + 800);
                        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                        *(_OWORD *)(a1 + 40) = v80;
                        *(void *)(a1 + 56) = *(void *)(a1 + 816);
                        *(unsigned char *)(a1 + 248) = 0;
                        *(void *)(a1 + 624) = 0;
                        if ((sub_100C77120(a1, v303) & 1) == 0)
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          long long v81 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                          }
                          if (!sub_10013D1A0(115, 0)) {
                            goto LABEL_43;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 == -1) {
                            goto LABEL_440;
                          }
LABEL_717:
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
LABEL_440:
                          *(_WORD *)v316 = 0;
                          long long v87 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v87);
LABEL_361:
                          if (v87 != (char *)buf) {
                            free(v87);
                          }
                          goto LABEL_43;
                        }
                        goto LABEL_178;
                      }
                      double v296 = v54;
                      double v88 = v12 * 0.0174532925;
                      double v295 = **(double **)v28 + *(double *)(*(void *)v28 + 40);
                      double v89 = v299 * 0.0174532925;
                      unsigned int v90 = *(_DWORD *)(a2 + 96);
                      double v294 = *(double *)(a1 + 440) * *(double *)(a1 + 440);
                      if (v90 <= 8
                        && ((1 << v90) & 0x1C1) != 0
                        && v78 * 9.0 < *(double *)(a1 + 440) * *(double *)(a1 + 440))
                      {
                        double v91 = sub_1000F1648((double *)(a1 + 832), v88 * 57.2957795, v89 * 57.2957795, **v301 * 57.2957795, (*v301)[1] * 57.2957795, 0.0);
                        if (v91 > 0.0 && v91 < *(double *)(a1 + 440) + *(double *)(a1 + 440))
                        {
                          double v88 = **v301;
                          double v89 = (*v301)[1];
                        }
                      }
                      if (*(_DWORD *)(a1 + 516) == 4
                        && *(_DWORD *)(a1 + 360) == 9
                        && *(int *)(a1 + 580) >= 11
                        && *(int *)(a1 + 504) >= 66
                        && *(double *)(a1 + 440) < 100.0)
                      {
                        uint64_t v92 = *(void *)(a1 + 88);
                        double v93 = *v302;
                        if (*(double *)v92 + *(double *)(v92 + 40) < v93 * v93)
                        {
                          double v94 = fmax(v93, 1.0);
                          double v95 = v94 * v94 * 0.5;
                          *(double *)uint64_t v92 = v95;
                          *(_OWORD *)(v92 + 8) = 0u;
                          *(_OWORD *)(v92 + 24) = 0u;
                          *(double *)(v92 + 40) = v95;
                          *(_OWORD *)(v92 + 48) = 0u;
                          *(_OWORD *)(v92 + 64) = 0u;
                          *(void *)(v92 + 96) = 0;
                          *(void *)(v92 + 104) = 0;
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          __int16 v96 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            double v97 = *v302;
                            *(_DWORD *)uint64_t buf = 134349056;
                            *(double *)v326 = v97;
                            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "KF:Transition,coarse GPS to WiFi,hunc bumped,%{public}.1f", buf, 0xCu);
                          }
                          uint64_t v77 = sub_10013D1A0(115, 2);
                          uint64_t v76 = (double *)(a1 + 832);
                          if (v77)
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            double v266 = *v302;
                            *(_DWORD *)v316 = 134349056;
                            *(double *)&v316[4] = v266;
                            v267 = (char *)_os_log_send_and_compose_impl();
                            uint64_t v77 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v267);
                            if (v267 != (char *)buf) {
                              free(v267);
                            }
                            uint64_t v76 = (double *)(a1 + 832);
                          }
                        }
                      }
                      v300 = (double **)(a1 + 160);
                      uint64_t v98 = sub_100C75F38(v77, (uint64_t *)(a1 + 88), &dword_101D8A750, (void *)(a1 + 160), &v307);
                      if ((v98 & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        __int16 v132 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      double v99 = v30 * v30 * 0.5;
                      double v100 = v99 + v307;
                      __int16 v102 = (double **)(a1 + 136);
                      double v101 = *(double **)(a1 + 136);
                      uint64_t v103 = *(double **)(a1 + 160);
                      double *v101 = *v103 / (v99 + v307);
                      v101[1] = v103[1] / v100;
                      v101[2] = v103[2] / v100;
                      v101[3] = v103[3] / v100;
                      double v104 = (v88 - **(double **)(a1 + 112)) * *(double *)(a1 + 208);
                      double v308 = v104;
                      if (v100 <= 0.0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        float v133 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_43;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_440;
                        }
                        goto LABEL_717;
                      }
                      double v105 = v104 * v104 / v100;
                      if (v105 > v296)
                      {
                        if (!*(unsigned char *)(a1 + 592))
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          unsigned int v163 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEBUG, "KF:Input is not consistent with prior input. Filter reseeding.", buf, 2u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            *(_WORD *)v316 = 0;
                            int v216 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v216);
                            if (v216 != (char *)buf) {
                              free(v216);
                            }
                          }
                          sub_100C72070(a1);
                          if ((sub_100C77120(a1, v303) & 1) == 0)
                          {
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            uint64_t v164 = qword_102419388;
                            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_43;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 == -1) {
                              goto LABEL_440;
                            }
                            goto LABEL_717;
                          }
                          goto LABEL_178;
                        }
                        sub_100C728B8(v298, (uint64_t)v305);
                        uint64_t v106 = a1 + 600;
                        if (*(void *)(a1 + 616)
                          && *(double *)(*(void *)v106 + 20) == *(double *)(a2 + 4)
                          && *(double *)(*(void *)v106 + 28) == *(double *)(a2 + 12))
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          uint64_t v107 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "KF:increment num rejections by half", buf, 2u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            *(_WORD *)v316 = 0;
                            v264 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v264);
                            if (v264 != (char *)buf) {
                              free(v264);
                            }
                          }
                          int v56 = 1;
                        }
                        __int16 v108 = operator new(0xB0uLL);
                        long long v109 = *(_OWORD *)(a2 + 112);
                        v108[7] = *(_OWORD *)(a2 + 96);
                        v108[8] = v109;
                        v108[9] = *(_OWORD *)(a2 + 128);
                        *(_OWORD *)((char *)v108 + 156) = *(_OWORD *)(a2 + 140);
                        long long v110 = *(_OWORD *)(a2 + 48);
                        v108[3] = *(_OWORD *)(a2 + 32);
                        v108[4] = v110;
                        long long v111 = *(_OWORD *)(a2 + 80);
                        v108[5] = *(_OWORD *)(a2 + 64);
                        v108[6] = v111;
                        long long v112 = *(_OWORD *)(a2 + 16);
                        v108[1] = *(_OWORD *)a2;
                        v108[2] = v112;
                        uint64_t v113 = *(void *)(a1 + 600);
                        *(void *)__int16 v108 = v113;
                        *((void *)v108 + 1) = v106;
                        *(void *)(v113 + 8) = v108;
                        *(void *)(a1 + 600) = v108;
                        ++*(void *)(a1 + 616);
                        if (sub_100C77778(a1))
                        {
                          long long v114 = *(_OWORD *)(a2 + 16);
                          *uint64_t v19 = *(_OWORD *)a2;
                          *(_OWORD *)(a1 + 436) = v114;
                          long long v115 = *(_OWORD *)(a2 + 32);
                          long long v116 = *(_OWORD *)(a2 + 48);
                          long long v117 = *(_OWORD *)(a2 + 80);
                          *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
                          *(_OWORD *)(a1 + 500) = v117;
                          *(_OWORD *)(a1 + 452) = v115;
                          *(_OWORD *)(a1 + 468) = v116;
                          long long v118 = *(_OWORD *)(a2 + 96);
                          long long v119 = *(_OWORD *)(a2 + 112);
                          long long v120 = *(_OWORD *)(a2 + 128);
                          *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
                          *(_OWORD *)(a1 + 532) = v119;
                          *(_OWORD *)(a1 + 548) = v120;
                          *(_OWORD *)(a1 + 516) = v118;
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          int v121 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            int v122 = *(_DWORD *)(a2 + 96);
                            *(_DWORD *)uint64_t buf = 134349568;
                            *(double *)v326 = v306;
                            *(_WORD *)&v326[8] = 1026;
                            *(_DWORD *)&v326[10] = v122;
                            __int16 v327 = 2050;
                            *(double *)v328 = v105;
                            _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lat,v2,%{public}.1lf", buf, 0x1Cu);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            int v217 = *(_DWORD *)(a2 + 96);
                            *(_DWORD *)v316 = 134349568;
                            *(double *)&v316[4] = v306;
                            *(_WORD *)&v316[12] = 1026;
                            *(_DWORD *)&v316[14] = v217;
                            __int16 v317 = 2050;
                            *(double *)v318 = v105;
                            int v218 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v218);
                            if (v218 != (char *)buf) {
                              free(v218);
                            }
                          }
                          sub_100C72070(a1);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          uint64_t v123 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            int v124 = *(_DWORD *)(a2 + 96);
                            uint64_t v125 = *(void *)(a2 + 4);
                            uint64_t v126 = *(void *)(a2 + 12);
                            uint64_t v127 = *(void *)(a2 + 28);
                            uint64_t v128 = *(void *)(a2 + 20);
                            uint64_t v129 = *(void *)(a2 + 36);
                            int v130 = *(_DWORD *)(a2 + 84);
                            *(_DWORD *)uint64_t buf = 67241729;
                            *(_DWORD *)v326 = v124;
                            *(_WORD *)&v326[4] = 2049;
                            *(void *)&v326[6] = v125;
                            __int16 v327 = 2049;
                            *(void *)v328 = v126;
                            *(_WORD *)&v328[8] = 2049;
                            *(void *)&v328[10] = v127;
                            __int16 v329 = 2050;
                            uint64_t v330 = v128;
                            __int16 v331 = 2050;
                            uint64_t v332 = v129;
                            __int16 v333 = 1026;
                            int v334 = v130;
                            _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "KF:reseed,type,%{public}d,%{private}.7lf,%{private}.7lf,%{private}.3lf,hunc,%{public}.1lf,vunc,%{public}.1lf,conf,%{public}d", buf, 0x40u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            int v219 = *(_DWORD *)(a2 + 96);
                            uint64_t v220 = *(void *)(a2 + 4);
                            uint64_t v221 = *(void *)(a2 + 12);
                            uint64_t v222 = *(void *)(a2 + 28);
                            uint64_t v223 = *(void *)(a2 + 20);
                            uint64_t v224 = *(void *)(a2 + 36);
                            int v225 = *(_DWORD *)(a2 + 84);
                            *(_DWORD *)v316 = 67241729;
                            *(_DWORD *)&v316[4] = v219;
                            *(_WORD *)&v316[8] = 2049;
                            *(void *)&v316[10] = v220;
                            __int16 v317 = 2049;
                            *(void *)v318 = v221;
                            *(_WORD *)&v318[8] = 2049;
                            *(void *)&v318[10] = v222;
                            __int16 v319 = 2050;
                            uint64_t v320 = v223;
                            __int16 v321 = 2050;
                            uint64_t v322 = v224;
                            __int16 v323 = 1026;
                            int v324 = v225;
                            __int16 v226 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v226);
                            if (v226 != (char *)buf) {
                              free(v226);
                            }
                          }
                          if ((sub_100C77120(a1, v303) & 1) == 0)
                          {
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            uint64_t v131 = qword_102419388;
                            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_43;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 == -1) {
                              goto LABEL_440;
                            }
                            goto LABEL_717;
                          }
LABEL_178:
                          uint64_t v35 = 1;
                          goto LABEL_44;
                        }
                        *a4 = 1;
                        double v165 = 1.0;
                        if (v56) {
                          double v165 = 0.5;
                        }
                        *(double *)(a1 + 256) = v10 + v165;
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v166 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                        {
                          if (*(unsigned char *)(a1 + 824)) {
                            int v167 = 115;
                          }
                          else {
                            int v167 = 110;
                          }
                          int v168 = *(_DWORD *)(a2 + 96);
                          *(_DWORD *)uint64_t buf = 67240960;
                          *(_DWORD *)v326 = v167;
                          *(_WORD *)&v326[4] = 2050;
                          *(double *)&v326[6] = v306;
                          __int16 v327 = 1026;
                          *(_DWORD *)v328 = v168;
                          *(_WORD *)&v328[4] = 2050;
                          *(double *)&v328[6] = v105;
                          _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lat,v2,%{public}.1lf", buf, 0x22u);
                        }
                        if (!sub_10013D1A0(115, 2)) {
                          goto LABEL_178;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        if (*(unsigned char *)(a1 + 824)) {
                          int v169 = 115;
                        }
                        else {
                          int v169 = 110;
                        }
                        int v170 = *(_DWORD *)(a2 + 96);
                        *(_DWORD *)v316 = 67240960;
                        *(_DWORD *)&v316[4] = v169;
                        *(_WORD *)&v316[8] = 2050;
                        *(double *)&v316[10] = v306;
                        __int16 v317 = 1026;
                        *(_DWORD *)v318 = v170;
                        *(_WORD *)&v318[4] = 2050;
                        *(double *)&v318[6] = v105;
                        long long v171 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v171);
LABEL_343:
                        if (v171 != (char *)buf) {
                          free(v171);
                        }
                        goto LABEL_178;
                      }
                      uint64_t v134 = sub_100C76370(v98, &v308, (void *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v301);
                      if ((v134 & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v161 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_FAULT, "KF:lat innovation update failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      if (!sub_100C76A30(v134, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101D8A750))
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v172 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      sub_100C750BC(a1, (uint64_t)"lat update", v105);
                      sub_100C76F24(a1);
                      if ((v135 & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        unsigned int v173 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      uint64_t v136 = sub_100C75F38(v135, (uint64_t *)(a1 + 88), &dword_101D8A754, v300, &v307);
                      if ((v136 & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        long long v174 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      double v137 = v99 + v307;
                      int v138 = *v300;
                      double v139 = *v102;
                      *double v139 = **v300 / (v99 + v307);
                      v139[1] = v138[1] / v137;
                      v139[2] = v138[2] / v137;
                      v139[3] = v138[3] / v137;
                      double v140 = v89 - (*v301)[1];
                      if (v140 < -3.14159265) {
                        double v140 = v140 + 6.28318531;
                      }
                      if (v140 > 3.14159265) {
                        double v140 = v140 + -6.28318531;
                      }
                      double v141 = *(double *)(a1 + 200) * v140;
                      double v308 = v141;
                      if (v137 <= 0.0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        unsigned int v176 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_43;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_440;
                        }
                        goto LABEL_717;
                      }
                      double v142 = v141 * v141 / v137;
                      if (v142 > v296)
                      {
                        if (!*(unsigned char *)(a1 + 592))
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          double v201 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_DEBUG, "KF:Input is not consistent with prior input,filter reseeding", buf, 2u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            *(_WORD *)v316 = 0;
                            v277 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v277);
                            if (v277 != (char *)buf) {
                              free(v277);
                            }
                          }
                          sub_100C72070(a1);
                          if ((sub_100C77120(a1, v303) & 1) == 0)
                          {
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            uint64_t v202 = qword_102419388;
                            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_43;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 == -1) {
                              goto LABEL_440;
                            }
                            goto LABEL_717;
                          }
                          goto LABEL_178;
                        }
                        sub_100C728B8(v298, (uint64_t)v305);
                        uint64_t v143 = a1 + 600;
                        if (*(void *)(a1 + 616)
                          && *(double *)(*(void *)v143 + 20) == *(double *)(a2 + 4)
                          && *(double *)(*(void *)v143 + 28) == *(double *)(a2 + 12))
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          float64x2_t v144 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEBUG, "KF:increment num rejections by half", buf, 2u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            *(_WORD *)v316 = 0;
                            v283 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v283);
                            if (v283 != (char *)buf) {
                              free(v283);
                            }
                          }
                          int v56 = 1;
                        }
                        double v145 = operator new(0xB0uLL);
                        long long v146 = *(_OWORD *)(a2 + 112);
                        v145[7] = *(_OWORD *)(a2 + 96);
                        v145[8] = v146;
                        v145[9] = *(_OWORD *)(a2 + 128);
                        *(_OWORD *)((char *)v145 + 156) = *(_OWORD *)(a2 + 140);
                        long long v147 = *(_OWORD *)(a2 + 48);
                        v145[3] = *(_OWORD *)(a2 + 32);
                        v145[4] = v147;
                        long long v148 = *(_OWORD *)(a2 + 80);
                        v145[5] = *(_OWORD *)(a2 + 64);
                        v145[6] = v148;
                        long long v149 = *(_OWORD *)(a2 + 16);
                        v145[1] = *(_OWORD *)a2;
                        v145[2] = v149;
                        uint64_t v150 = *(void *)(a1 + 600);
                        *(void *)double v145 = v150;
                        *((void *)v145 + 1) = v143;
                        *(void *)(v150 + 8) = v145;
                        *(void *)(a1 + 600) = v145;
                        ++*(void *)(a1 + 616);
                        if (sub_100C77778(a1))
                        {
                          long long v151 = *(_OWORD *)(a2 + 16);
                          *uint64_t v19 = *(_OWORD *)a2;
                          *(_OWORD *)(a1 + 436) = v151;
                          long long v152 = *(_OWORD *)(a2 + 32);
                          long long v153 = *(_OWORD *)(a2 + 48);
                          long long v154 = *(_OWORD *)(a2 + 80);
                          *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
                          *(_OWORD *)(a1 + 500) = v154;
                          *(_OWORD *)(a1 + 452) = v152;
                          *(_OWORD *)(a1 + 468) = v153;
                          long long v155 = *(_OWORD *)(a2 + 96);
                          long long v156 = *(_OWORD *)(a2 + 112);
                          long long v157 = *(_OWORD *)(a2 + 128);
                          *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
                          *(_OWORD *)(a1 + 532) = v156;
                          *(_OWORD *)(a1 + 548) = v157;
                          *(_OWORD *)(a1 + 516) = v155;
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          __int16 v158 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            int v159 = *(_DWORD *)(a2 + 96);
                            *(_DWORD *)uint64_t buf = 134349568;
                            *(double *)v326 = v306;
                            *(_WORD *)&v326[8] = 1026;
                            *(_DWORD *)&v326[10] = v159;
                            __int16 v327 = 2050;
                            *(double *)v328 = v142;
                            _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEBUG, "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lon,v2,%{public}.1lf", buf, 0x1Cu);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            int v278 = *(_DWORD *)(a2 + 96);
                            *(_DWORD *)v316 = 134349568;
                            *(double *)&v316[4] = v306;
                            *(_WORD *)&v316[12] = 1026;
                            *(_DWORD *)&v316[14] = v278;
                            __int16 v317 = 2050;
                            *(double *)v318 = v142;
                            v279 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v279);
                            if (v279 != (char *)buf) {
                              free(v279);
                            }
                          }
                          sub_100C72070(a1);
                          if ((sub_100C77120(a1, v303) & 1) == 0)
                          {
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            uint64_t v160 = qword_102419388;
                            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_43;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 == -1) {
                              goto LABEL_440;
                            }
                            goto LABEL_717;
                          }
                          goto LABEL_178;
                        }
                        *a4 = 1;
                        double v204 = 1.0;
                        if (v56) {
                          double v204 = 0.5;
                        }
                        *(double *)(a1 + 256) = v10 + v204;
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v205 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                        {
                          if (*(unsigned char *)(a1 + 824)) {
                            int v206 = 115;
                          }
                          else {
                            int v206 = 110;
                          }
                          int v207 = *(_DWORD *)(a2 + 96);
                          *(_DWORD *)uint64_t buf = 67240960;
                          *(_DWORD *)v326 = v206;
                          *(_WORD *)&v326[4] = 2050;
                          *(double *)&v326[6] = v306;
                          __int16 v327 = 1026;
                          *(_DWORD *)v328 = v207;
                          *(_WORD *)&v328[4] = 2050;
                          *(double *)&v328[6] = v142;
                          _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lon,v2,%{public}.1lf", buf, 0x22u);
                        }
                        if (!sub_10013D1A0(115, 2)) {
                          goto LABEL_178;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        if (*(unsigned char *)(a1 + 824)) {
                          int v208 = 115;
                        }
                        else {
                          int v208 = 110;
                        }
                        int v209 = *(_DWORD *)(a2 + 96);
                        *(_DWORD *)v316 = 67240960;
                        *(_DWORD *)&v316[4] = v208;
                        *(_WORD *)&v316[8] = 2050;
                        *(double *)&v316[10] = v306;
                        __int16 v317 = 1026;
                        *(_DWORD *)v318 = v209;
                        *(_WORD *)&v318[4] = 2050;
                        *(double *)&v318[6] = v142;
                        long long v171 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v171);
                        goto LABEL_343;
                      }
                      uint64_t v178 = sub_100C76370(v136, &v308, (void *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v301);
                      if ((v178 & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        double v200 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_FAULT, "KF:lon innovation update failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      if (!sub_100C76A30(v178, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101D8A754))
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        long long v211 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v211, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      sub_100C750BC(a1, (uint64_t)"lon update", v142);
                      sub_100C76F24(a1);
                      if ((v179 & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v212 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v212, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_191;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_386;
                        }
                        goto LABEL_719;
                      }
                      if (v16 < 0.0 || v17 <= 0.0)
                      {
LABEL_514:
                        if (!*(unsigned char *)(a1 + 249)) {
                          goto LABEL_538;
                        }
                        double v230 = **(double **)(a1 + 88) + *(double *)(*(void *)(a1 + 88) + 40);
                        double v231 = *(double *)(a1 + 440) * *(double *)(a1 + 440);
                        if (v295 >= v294)
                        {
                          if (v230 >= v231) {
                            goto LABEL_522;
                          }
                          sub_100C750BC(a1, (uint64_t)"Applying uncertainty floor to stop averaging", -1.0);
                          double v235 = fmax(*(double *)(a1 + 440), 1.0);
                          double v233 = v235 * v235 * 0.5;
                          uint64_t v234 = *(void *)(a1 + 88);
                        }
                        else
                        {
                          if (v295 >= v231 || v230 >= v295)
                          {
LABEL_522:
                            if (sub_100C724F4(*(_DWORD *)(a1 + 360)))
                            {
                              int v236 = *(_DWORD *)(a1 + 516);
                              if (*v302 < 50.0 && v236 != 9 && *(double *)(a1 + 496) - *(double *)(a1 + 340) < 4.0)
                              {
                                if (qword_102419380 != -1) {
                                  dispatch_once(&qword_102419380, &stru_1022F03E0);
                                }
                                int v237 = qword_102419388;
                                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_WORD *)uint64_t buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v237, OS_LOG_TYPE_DEBUG, "KF:Not applying the uncertainty floor", buf, 2u);
                                }
                                if (sub_10013D1A0(115, 2))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_102419380 != -1) {
                                    dispatch_once(&qword_102419380, &stru_1022F03E0);
                                  }
                                  *(_WORD *)v316 = 0;
                                  __int16 v238 = (char *)_os_log_send_and_compose_impl();
                                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v238);
                                  if (v238 != (char *)buf) {
                                    free(v238);
                                  }
                                }
                                goto LABEL_538;
                              }
                            }
                            else
                            {
                              int v236 = *(_DWORD *)(a1 + 516);
                            }
                            if (v230 < dbl_101D8A640[v236 == 9])
                            {
                              uint64_t v239 = qword_101D8A650[v236 == 9];
                              uint64_t v240 = *(void *)v28;
                              *(void *)uint64_t v240 = v239;
                              *(_OWORD *)(v240 + 8) = 0u;
                              *(_OWORD *)(v240 + 24) = 0u;
                              *(void *)(v240 + 40) = v239;
                              *(_OWORD *)(v240 + 48) = 0u;
                              *(_OWORD *)(v240 + 64) = 0u;
                              *(void *)(v240 + 96) = 0;
                              *(void *)(v240 + 104) = 0;
                            }
LABEL_538:
                            double v241 = *(double *)(a1 + 456);
                            if (v241 <= 0.0) {
                              goto LABEL_558;
                            }
                            if (*(float *)(a1 + 588) < 0.0)
                            {
                              float v242 = *(double *)(a1 + 448);
                              *(float *)(a1 + 584) = v242;
                              float v243 = v241 * v241;
                              goto LABEL_541;
                            }
                            uint64_t v244 = *(void *)(a1 + 584);
                            int v245 = sub_100C724F4(*(_DWORD *)(a1 + 360));
                            float v246 = v241;
                            if (v245 && *(double *)(a1 + 192) < 4.0) {
                              float v246 = 3000.0;
                            }
                            float v247 = *(float *)(a1 + 588);
                            if (v247 > 9000000.0)
                            {
                              *(_DWORD *)(a1 + 588) = 1258902592;
                              float v247 = *(float *)"@T\tK";
                            }
                            float v248 = v247 + (float)(v246 * v246);
                            if (v248 > 0.0)
                            {
                              float v249 = *(float *)(a1 + 584);
                              float v250 = *(double *)(a1 + 448) - v249;
                              float v251 = (float)(v250 * v250) / v248;
                              if (v251 <= 81.0)
                              {
                                float v265 = v247 / v248;
                                *(float *)(a1 + 584) = v249 + (float)(v265 * v250);
                                float v243 = v247 - (float)(v265 * v247);
LABEL_541:
                                *(float *)(a1 + 588) = v243;
                                if (v243 < 1.0) {
                                  *(_DWORD *)(a1 + 588) = 1065353216;
                                }
                                goto LABEL_558;
                              }
                              *(void *)(a1 + 584) = v244;
                              if (qword_102419380 != -1) {
                                dispatch_once(&qword_102419380, &stru_1022F03E0);
                              }
                              double v252 = v251;
                              v253 = qword_102419388;
                              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                              {
                                if (*(unsigned char *)(a1 + 824)) {
                                  int v254 = 115;
                                }
                                else {
                                  int v254 = 110;
                                }
                                int v255 = *(_DWORD *)(a2 + 96);
                                *(_DWORD *)uint64_t buf = 67240960;
                                *(_DWORD *)v326 = v254;
                                *(_WORD *)&v326[4] = 2050;
                                *(double *)&v326[6] = v306;
                                __int16 v327 = 1026;
                                *(_DWORD *)v328 = v255;
                                *(_WORD *)&v328[4] = 2048;
                                *(double *)&v328[6] = v252;
                                _os_log_impl((void *)&_mh_execute_header, v253, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,alt,v2,%.1lf", buf, 0x22u);
                              }
                              if (sub_10013D1A0(115, 2))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_102419380 != -1) {
                                  dispatch_once(&qword_102419380, &stru_1022F03E0);
                                }
                                if (*(unsigned char *)(a1 + 824)) {
                                  int v290 = 115;
                                }
                                else {
                                  int v290 = 110;
                                }
                                int v291 = *(_DWORD *)(a2 + 96);
                                *(_DWORD *)v316 = 67240960;
                                *(_DWORD *)&v316[4] = v290;
                                *(_WORD *)&v316[8] = 2050;
                                *(double *)&v316[10] = v306;
                                __int16 v317 = 1026;
                                *(_DWORD *)v318 = v291;
                                *(_WORD *)&v318[4] = 2048;
                                *(double *)&v318[6] = v252;
                                v292 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v292);
                                if (v292 != (char *)buf) {
                                  free(v292);
                                }
                              }
                            }
LABEL_558:
                            if (*(_DWORD *)(a1 + 516) == 9) {
                              int v256 = *(_DWORD *)(a1 + 580) + 1;
                            }
                            else {
                              int v256 = 0;
                            }
                            *(_DWORD *)(a1 + 580) = v256;
                            if (sub_100C77D74(a1, v303, 0))
                            {
                              unsigned int v257 = *(_DWORD *)(a1 + 516);
                              *(unsigned char *)(a1 + 576) = v257 == 6;
                              *(unsigned char *)(a1 + 577) = 0;
                              *(void *)(a1 + 256) = 0;
                              if (*(unsigned char *)(a1 + 592)) {
                                goto LABEL_565;
                              }
                              unsigned int v258 = *(_DWORD *)(a1 + 360);
                              if (v258 <= 8 && ((1 << v258) & 0x181) != 0) {
                                goto LABEL_565;
                              }
                              if (v257 <= 8 && ((1 << v257) & 0x181) != 0) {
                                goto LABEL_565;
                              }
                              if (v257 == v258)
                              {
                                sub_1000F1268(v76, a1 + 420, a1 + 264);
                                double v270 = *(double *)(a1 + 440);
                                if (v270 > *v302) {
                                  double v270 = *v302;
                                }
                                if (v269 <= v270) {
                                  goto LABEL_565;
                                }
                                if (qword_102419380 != -1) {
                                  dispatch_once(&qword_102419380, &stru_1022F03E0);
                                }
                                v271 = qword_102419388;
                                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_WORD *)uint64_t buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v271, OS_LOG_TYPE_DEBUG, "KF:Filter corrobarated by position,rejects now allowed", buf, 2u);
                                }
                                if (!sub_10013D1A0(115, 2)) {
                                  goto LABEL_635;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_102419380 == -1) {
                                  goto LABEL_713;
                                }
                              }
                              else
                              {
                                if (qword_102419380 != -1) {
                                  dispatch_once(&qword_102419380, &stru_1022F03E0);
                                }
                                v275 = qword_102419388;
                                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_WORD *)uint64_t buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_DEBUG, "KF:Filter corrobarated by type,rejects now allowed", buf, 2u);
                                }
                                if (!sub_10013D1A0(115, 2)) {
                                  goto LABEL_635;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_102419380 == -1)
                                {
LABEL_713:
                                  *(_WORD *)v316 = 0;
                                  v293 = (char *)_os_log_send_and_compose_impl();
                                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v293);
                                  if (v293 != (char *)buf) {
                                    free(v293);
                                  }
LABEL_635:
                                  *(unsigned char *)(a1 + 592) = 1;
LABEL_565:
                                  sub_1003B2350((void *)(a1 + 600));
                                  long long v259 = *(_OWORD *)(a1 + 532);
                                  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 516);
                                  *(_OWORD *)(a1 + 376) = v259;
                                  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 548);
                                  *(_OWORD *)(a1 + 404) = *(_OWORD *)(a1 + 560);
                                  long long v260 = *(_OWORD *)(a1 + 468);
                                  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 452);
                                  *(_OWORD *)(a1 + 312) = v260;
                                  long long v261 = *(_OWORD *)(a1 + 500);
                                  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 484);
                                  *(_OWORD *)(a1 + 344) = v261;
                                  long long v262 = *(_OWORD *)(a1 + 436);
                                  uint64_t v35 = 1;
                                  *(_OWORD *)(a1 + 264) = *v19;
                                  *(_OWORD *)(a1 + 280) = v262;
                                  goto LABEL_44;
                                }
                              }
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                              goto LABEL_713;
                            }
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            v263 = qword_102419388;
                            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v263, OS_LOG_TYPE_FAULT, "KF:getResult failed", buf, 2u);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_191;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 == -1)
                            {
LABEL_386:
                              *(_WORD *)v316 = 0;
                              long long v41 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v41);
LABEL_387:
                              if (v41 != (char *)buf) {
                                free(v41);
                              }
LABEL_191:
                              sub_100C72070(a1);
                              uint64_t v35 = 0;
                              long long v84 = *(_OWORD *)(a1 + 800);
                              *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                              *(_OWORD *)(a1 + 40) = v84;
                              *(void *)(a1 + 56) = *(void *)(a1 + 816);
                              *(unsigned char *)(a1 + 248) = 0;
                              *(void *)(a1 + 624) = 0;
                              goto LABEL_44;
                            }
LABEL_719:
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                            goto LABEL_386;
                          }
                          sub_100C750BC(a1, (uint64_t)"Applying uncertainty floor to stop averaging", -1.0);
                          double v232 = fmax(sqrt(v295), 1.0);
                          double v233 = v232 * v232 * 0.5;
                          uint64_t v234 = *(void *)v28;
                        }
                        *(double *)uint64_t v234 = v233;
                        *(_OWORD *)(v234 + 24) = 0u;
                        *(_OWORD *)(v234 + 8) = 0u;
                        *(double *)(v234 + 40) = v233;
                        *(_OWORD *)(v234 + 48) = 0u;
                        *(_OWORD *)(v234 + 64) = 0u;
                        *(void *)(v234 + 96) = 0;
                        *(void *)(v234 + 104) = 0;
                        double v230 = **(double **)v28 + *(double *)(*(void *)v28 + 40);
                        goto LABEL_522;
                      }
                      sub_100C7353C((uint64_t)v316);
                      sub_100C728B8((uint64_t)v316, v298);
                      __double2 v181 = __sincos_stret(v14 * 0.0174532925);
                      if (v17 < 0.5) {
                        double v17 = 0.5;
                      }
                      uint64_t v182 = sub_100C75F38(v180, (uint64_t *)(a1 + 88), &dword_101D8A748, v300, &v307);
                      if ((v182 & 1) == 0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v213 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v213, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_484;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_686;
                        }
                        goto LABEL_722;
                      }
                      double v183 = v307 + v17 * v17;
                      int v184 = *v300;
                      int v185 = *v102;
                      *int v185 = **v300 / v183;
                      v185[1] = v184[1] / v183;
                      v185[2] = v184[2] / v183;
                      v185[3] = v184[3] / v183;
                      double v186 = v181.__cosval * v16 - (*v301)[2];
                      double v308 = v186;
                      if (v183 <= 0.0)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        int v215 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_491;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1) {
                          goto LABEL_690;
                        }
                      }
                      else
                      {
                        double v187 = v186 * v186 / v183;
                        if (v187 > v296)
                        {
                          sub_100C728B8(v298, (uint64_t)v316);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          int v227 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                          {
                            if (*(unsigned char *)(a1 + 824)) {
                              int v228 = 115;
                            }
                            else {
                              int v228 = 110;
                            }
                            int v229 = *(_DWORD *)(a2 + 96);
                            *(_DWORD *)uint64_t buf = 67240960;
                            *(_DWORD *)v326 = v228;
                            *(_WORD *)&v326[4] = 2050;
                            *(double *)&v326[6] = v306;
                            __int16 v327 = 1026;
                            *(_DWORD *)v328 = v229;
                            *(_WORD *)&v328[4] = 2050;
                            *(double *)&v328[6] = v187;
                            _os_log_impl((void *)&_mh_execute_header, v227, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,vn,v2,%{public}.1lf", buf, 0x22u);
                          }
                          if (!sub_10013D1A0(115, 2)) {
                            goto LABEL_513;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          if (*(unsigned char *)(a1 + 824)) {
                            int v198 = 115;
                          }
                          else {
                            int v198 = 110;
                          }
LABEL_698:
                          int v288 = *(_DWORD *)(a2 + 96);
                          v309[0] = 67240960;
                          v309[1] = v198;
                          __int16 v310 = 2050;
                          double v311 = v306;
                          __int16 v312 = 1026;
                          int v313 = v288;
                          __int16 v314 = 2050;
                          double v315 = v187;
                          v289 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v289);
                          if (v289 != (char *)buf) {
                            free(v289);
                          }
                          goto LABEL_513;
                        }
                        uint64_t v188 = sub_100C76370(v182, &v308, (void *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v301);
                        if ((v188 & 1) == 0)
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          v268 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v268, OS_LOG_TYPE_FAULT, "KF:vn innovation update failed", buf, 2u);
                          }
                          if (!sub_10013D1A0(115, 0)) {
                            goto LABEL_484;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 == -1) {
                            goto LABEL_686;
                          }
                          goto LABEL_722;
                        }
                        if (!sub_100C76A30(v188, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101D8A748))
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          v272 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v272, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                          }
                          if (!sub_10013D1A0(115, 0)) {
                            goto LABEL_484;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 == -1) {
                            goto LABEL_686;
                          }
                          goto LABEL_722;
                        }
                        sub_100C750BC(a1, (uint64_t)"vn update", -1.0);
                        sub_100C76F24(a1);
                        if ((v189 & 1) == 0)
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          v273 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v273, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                          }
                          if (!sub_10013D1A0(115, 0)) {
                            goto LABEL_484;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 == -1) {
                            goto LABEL_686;
                          }
                          goto LABEL_722;
                        }
                        uint64_t v190 = sub_100C75F38(v189, (uint64_t *)(a1 + 88), &dword_101D8A74C, v300, &v307);
                        if ((v190 & 1) == 0)
                        {
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022F03E0);
                          }
                          v274 = qword_102419388;
                          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)uint64_t buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v274, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                          }
                          if (!sub_10013D1A0(115, 0)) {
                            goto LABEL_484;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 == -1) {
                            goto LABEL_686;
                          }
                          goto LABEL_722;
                        }
                        double v191 = v307 + v17 * v17;
                        uint64_t v192 = *v300;
                        int v193 = *v102;
                        *int v193 = **v300 / v191;
                        v193[1] = v192[1] / v191;
                        v193[2] = v192[2] / v191;
                        v193[3] = v192[3] / v191;
                        double v194 = v181.__sinval * v16 - (*v301)[3];
                        double v308 = v194;
                        if (v191 > 0.0)
                        {
                          double v187 = v194 * v194 / v191;
                          if (v187 > v296)
                          {
                            sub_100C728B8(v298, (uint64_t)v316);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            double v195 = qword_102419388;
                            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                            {
                              if (*(unsigned char *)(a1 + 824)) {
                                int v196 = 115;
                              }
                              else {
                                int v196 = 110;
                              }
                              int v197 = *(_DWORD *)(a2 + 96);
                              *(_DWORD *)uint64_t buf = 67240960;
                              *(_DWORD *)v326 = v196;
                              *(_WORD *)&v326[4] = 2050;
                              *(double *)&v326[6] = v306;
                              __int16 v327 = 1026;
                              *(_DWORD *)v328 = v197;
                              *(_WORD *)&v328[4] = 2050;
                              *(double *)&v328[6] = v187;
                              _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,ve,v2,%{public}.1lf", buf, 0x22u);
                            }
                            if (!sub_10013D1A0(115, 2)) {
                              goto LABEL_513;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            if (*(unsigned char *)(a1 + 824)) {
                              int v198 = 115;
                            }
                            else {
                              int v198 = 110;
                            }
                            goto LABEL_698;
                          }
                          uint64_t v280 = sub_100C76370(v190, &v308, (void *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v301);
                          if (v280)
                          {
                            if (sub_100C76A30(v280, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101D8A74C))
                            {
                              sub_100C750BC(a1, (uint64_t)"ve update", -1.0);
                              sub_100C76F24(a1);
                              if (v281)
                              {
LABEL_513:
                                sub_100C73780(v316);
                                goto LABEL_514;
                              }
                              if (qword_102419380 != -1) {
                                dispatch_once(&qword_102419380, &stru_1022F03E0);
                              }
                              v282 = qword_102419388;
                              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)uint64_t buf = 0;
                                _os_log_impl((void *)&_mh_execute_header, v282, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                              }
                              if (!sub_10013D1A0(115, 0)) {
                                goto LABEL_484;
                              }
                              bzero(buf, 0x65CuLL);
                              if (qword_102419380 == -1) {
                                goto LABEL_686;
                              }
                            }
                            else
                            {
                              if (qword_102419380 != -1) {
                                dispatch_once(&qword_102419380, &stru_1022F03E0);
                              }
                              v285 = qword_102419388;
                              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)uint64_t buf = 0;
                                _os_log_impl((void *)&_mh_execute_header, v285, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                              }
                              if (!sub_10013D1A0(115, 0)) {
                                goto LABEL_484;
                              }
                              bzero(buf, 0x65CuLL);
                              if (qword_102419380 == -1)
                              {
LABEL_686:
                                LOWORD(v309[0]) = 0;
                                v286 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v286);
                                if (v286 != (char *)buf) {
                                  free(v286);
                                }
LABEL_484:
                                sub_100C72070(a1);
                                long long v214 = *(_OWORD *)(a1 + 800);
                                *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                                *(_OWORD *)(a1 + 40) = v214;
                                *(void *)(a1 + 56) = *(void *)(a1 + 816);
                                *(unsigned char *)(a1 + 248) = 0;
                                *(void *)(a1 + 624) = 0;
LABEL_491:
                                sub_100C73780(v316);
LABEL_43:
                                uint64_t v35 = 0;
                                goto LABEL_44;
                              }
                            }
                          }
                          else
                          {
                            if (qword_102419380 != -1) {
                              dispatch_once(&qword_102419380, &stru_1022F03E0);
                            }
                            v284 = qword_102419388;
                            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                            {
                              *(_WORD *)uint64_t buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v284, OS_LOG_TYPE_FAULT, "KF:ve innovation update failed", buf, 2u);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_484;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419380 == -1) {
                              goto LABEL_686;
                            }
                          }
LABEL_722:
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                          goto LABEL_686;
                        }
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022F03E0);
                        }
                        v276 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)uint64_t buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_491;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 == -1)
                        {
LABEL_690:
                          LOWORD(v309[0]) = 0;
                          v287 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v287);
                          if (v287 != (char *)buf) {
                            free(v287);
                          }
                          goto LABEL_491;
                        }
                      }
                      dispatch_once(&qword_102419380, &stru_1022F03E0);
                      goto LABEL_690;
                    }
                  }
LABEL_177:
                  if ((sub_100C77120(a1, v303) & 1) == 0)
                  {
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_1022F03E0);
                    }
                    long long v82 = qword_102419388;
                    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)uint64_t buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                    }
                    if (!sub_10013D1A0(115, 0)) {
                      goto LABEL_43;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_102419380 == -1) {
                      goto LABEL_440;
                    }
                    goto LABEL_717;
                  }
                  goto LABEL_178;
                }
                bzero(buf, 0x65CuLL);
                if (qword_102419380 == -1)
                {
LABEL_419:
                  *(_DWORD *)v316 = 134349056;
                  *(void *)&v316[4] = 0x4105180000000000;
                  uint64_t v199 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v199);
                  if (v199 != (char *)buf) {
                    free(v199);
                  }
                  goto LABEL_139;
                }
              }
              dispatch_once(&qword_102419380, &stru_1022F03E0);
              goto LABEL_419;
            }
            if (v18 >= 0x4D)
            {
              int v56 = 0;
              double v54 = dbl_101D8A630[*(unsigned char *)(a1 + 824) == 0];
              goto LABEL_109;
            }
          }
          int v56 = 0;
          goto LABEL_109;
        }
        unsigned int v44 = *(_DWORD *)(a1 + 360);
        if (v44 <= 8 && ((1 << v44) & 0x1C1) != 0)
        {
          double v45 = *v29;
          double v46 = v43 * 0.75;
          if (*v29 >= 500.0 && v45 < v46)
          {
            double v47 = fmax(v45, 1.0);
LABEL_71:
            double v49 = v47 * v47 * 0.5;
            *(double *)uint64_t v42 = v49;
            *(_OWORD *)(v42 + 8) = 0u;
            *(_OWORD *)(v42 + 24) = 0u;
            *(double *)(v42 + 40) = v49;
            *(_OWORD *)(v42 + 48) = 0u;
            *(_OWORD *)(v42 + 64) = 0u;
            *(void *)(v42 + 96) = 0;
            *(void *)(v42 + 104) = 0;
            goto LABEL_72;
          }
        }
        else
        {
          double v46 = v43 * 0.75;
        }
        double v47 = fmax(v46, 1.0);
        goto LABEL_71;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      long long v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_43;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_360:
        *(_WORD *)v316 = 0;
        long long v87 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v87);
        goto LABEL_361;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      long long v37 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_43;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_360;
      }
    }
    dispatch_once(&qword_102419380, &stru_1022F03E0);
    goto LABEL_360;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  long long v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,null island", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419380 != -1) {
LABEL_492:
  }
    dispatch_once(&qword_102419380, &stru_1022F03E0);
LABEL_312:
  LOWORD(v305[0]) = 0;
  int v162 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v162);
  if (v162 != (char *)buf) {
    free(v162);
  }
  return 0;
}

void sub_100C71F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100C73780(&STACK[0x330]);
  sub_100C73780(va);
  _Unwind_Resume(a1);
}

void *sub_100C72070(uint64_t a1)
{
  *(unsigned char *)(a1 + 249) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 264) = 0xFFFF;
  *(void *)(a1 + 276) = 0;
  *(void *)(a1 + 268) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 284) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 300) = _Q1;
  *(_OWORD *)(a1 + 316) = _Q1;
  *(_OWORD *)(a1 + 332) = _Q1;
  *(_DWORD *)(a1 + 348) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 380) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 388) = 0x7FFFFFFF;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 588) = -1082130432;
  return sub_1003B2350((void *)(a1 + 600));
}

uint64_t sub_100C720F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = *(double *)(a3 + 44);
  if (v7 >= 0.0) {
    double v8 = v7 * 3.6;
  }
  else {
    double v8 = *(double *)(a3 + 44);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  __int16 v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a3 + 76);
    int v11 = *(_DWORD *)(a2 + 96);
    int v12 = *(_DWORD *)(a3 + 96);
    uint64_t v13 = *(void *)(a3 + 4);
    uint64_t v14 = *(void *)(a3 + 12);
    uint64_t v15 = *(void *)(a3 + 28);
    uint64_t v16 = *(void *)(a3 + 60);
    uint64_t v17 = *(void *)(a3 + 20);
    uint64_t v18 = *(void *)(a3 + 36);
    uint64_t v19 = *(void *)(a3 + 52);
    uint64_t v20 = *(void *)(a3 + 68);
    *(_DWORD *)uint64_t buf = 134352387;
    uint64_t v24 = v10;
    __int16 v25 = 1026;
    int v26 = v11;
    __int16 v27 = 1026;
    int v28 = v12;
    __int16 v29 = 1026;
    int v30 = 0;
    __int16 v31 = 2049;
    uint64_t v32 = v13;
    __int16 v33 = 2049;
    uint64_t v34 = v14;
    __int16 v35 = 2049;
    uint64_t v36 = v15;
    __int16 v37 = 2050;
    double v38 = v8;
    __int16 v39 = 2050;
    uint64_t v40 = v16;
    __int16 v41 = 2050;
    uint64_t v42 = v17;
    __int16 v43 = 2050;
    uint64_t v44 = v18;
    __int16 v45 = 2050;
    uint64_t v46 = v19;
    __int16 v47 = 2050;
    uint64_t v48 = v20;
    __int16 v49 = 2082;
    uint64_t v50 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "KF:Dual,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.8f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s", buf, 0x82u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    long long v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::debugPrint(const CLDaemonLocation &, const CLDaemonLocation &, const char *)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  return 1;
}

double sub_100C7241C(uint64_t a1)
{
  *(void *)(a1 + 64) = *(void *)(a1 + 936);
  long long v2 = *(_OWORD *)(a1 + 920);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 904);
  *(_OWORD *)(a1 + 48) = v2;
  sub_1002DD194((char *)(a1 + 72), *(char **)(a1 + 944), *(void *)(a1 + 952), (uint64_t)(*(void *)(a1 + 952) - *(void *)(a1 + 944)) >> 3);
  sub_1002DD194((char *)(a1 + 96), *(char **)(a1 + 968), *(void *)(a1 + 976), (uint64_t)(*(void *)(a1 + 976) - *(void *)(a1 + 968)) >> 3);
  sub_1002DD194((char *)(a1 + 120), *(char **)(a1 + 992), *(void *)(a1 + 1000), (uint64_t)(*(void *)(a1 + 1000) - *(void *)(a1 + 992)) >> 3);
  sub_1002DD194((char *)(a1 + 144), *(char **)(a1 + 1016), *(void *)(a1 + 1024), (uint64_t)(*(void *)(a1 + 1024) - *(void *)(a1 + 1016)) >> 3);
  sub_1002DD194((char *)(a1 + 168), *(char **)(a1 + 1040), *(void *)(a1 + 1048), (uint64_t)(*(void *)(a1 + 1048) - *(void *)(a1 + 1040)) >> 3);
  memcpy((void *)(a1 + 192), (const void *)(a1 + 1064), 0x199uLL);
  sub_100C78CEC((uint64_t *)(a1 + 608), *(void *)(a1 + 1488), a1 + 1480);
  double result = *(double *)(a1 + 1504);
  *(double *)(a1 + 632) = result;
  return result;
}

uint64_t sub_100C724F4(int a1)
{
  char v1 = a1 - 1;
  if ((a1 - 1) >= 0xB || ((0x7EFu >> v1) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v10 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "unsupported location type,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLKalmanFilter::isLocationTypeNotFiltered(CLLocationType)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      uint64_t v16 = "false";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed - unsupported location type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
    }
    int v6 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      uint64_t v16 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed - unsupported location type", "{\"msg%{public}.0s\":\"Assertion failed - unsupported location type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
    }
    double v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "assert";
      __int16 v15 = 2081;
      uint64_t v16 = "false";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed - unsupported location type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  return (0x617u >> v1) & 1;
}

uint64_t sub_100C728B8(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  if (a1 == a2)
  {
    memcpy((void *)(a1 + 176), (const void *)(a2 + 176), 0x199uLL);
  }
  else
  {
    sub_1002DD194((char *)(a1 + 56), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_1002DD194((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1002DD194((char *)(a1 + 104), *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_1002DD194((char *)(a1 + 128), *(char **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
    sub_1002DD194((char *)(a1 + 152), *(char **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
    memcpy((void *)(a1 + 176), (const void *)(a2 + 176), 0x199uLL);
    sub_100C78CEC((uint64_t *)(a1 + 592), *(void *)(a2 + 600), a2 + 592);
  }
  return a1;
}

uint64_t sub_100C72990(uint64_t a1, double *a2)
{
  sub_100C749FC(a1 + 8, *a2);
  *(unsigned char *)(a1 + 584) = 0;
  uint64_t result = sub_100C749FC(a1 + 880, *a2);
  *(unsigned char *)(a1 + 1456) = 0;
  return result;
}

uint64_t sub_100C729D4(uint64_t a1, double *a2, uint64_t a3)
{
  return sub_100C729DC(a1 + 880, a2, a3);
}

uint64_t sub_100C729DC(uint64_t a1, double *a2, uint64_t a3)
{
  double v3 = *a2 - *(double *)(a1 + 184);
  double v57 = v3;
  double v55 = 0.0;
  double v56 = 0.0;
  double v53 = 0.0;
  double v54 = 0.0;
  double v51 = 0.0;
  double v52 = 0.0;
  char v50 = 0;
  unint64_t v49 = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 12) = 0;
  *(void *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(void *)(a3 + 88) = 0xBFF0000000000000;
  *(void *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  if (!*(unsigned char *)(a1 + 249)) {
    return 0;
  }
  __int16 v11 = *(const void **)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 - (void)v11 != 128)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    __int16 v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = 16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning,KF:fKalman.P.size() != %{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    long long v58 = (void *)0x1004020100;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v14);
LABEL_81:
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  if (*(void *)(a1 + 120) - *(void *)(a1 + 112) != 32)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    __int16 v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = 4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning,KF:fKalman.x.size() != %{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    long long v58 = (void *)0x404020100;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v14);
    goto LABEL_81;
  }
  if (*(double *)(a1 + 184) <= 0.0) {
    return 0;
  }
  long long v58 = 0;
  double v59 = 0;
  uint64_t v60 = 0;
  sub_1001DD364(&v58, v11, v12, 0x10uLL);
  sub_1001DCFA4(__p, 0x10uLL);
  if (v3 >= 0.0)
  {
    if (!*(unsigned char *)(a1 + 248) && v3 > 600.0 && !*(unsigned char *)(a1 + 824)) {
      char v50 = 1;
    }
  }
  else
  {
    double v57 = 0.0;
  }
  if ((sub_100C73A8C(a1, &v57, &v50, (uint64_t *)__p, (double **)&v58, a1 + 16, &v52, &v51) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v36 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "KF:calcTPTQ failed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_64;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_84;
    }
    goto LABEL_86;
  }
  uint64_t v18 = sub_1001BD27C((double *)(a1 + 832), &v54, &v53, **(double **)(a1 + 112) * 57.2957795, *(float *)(a1 + 584));
  if ((v18 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    __int16 v37 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_64;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_84;
    }
    goto LABEL_86;
  }
  uint64_t v19 = *(double **)(a1 + 112);
  double v20 = v51;
  double v21 = v19[2];
  double v22 = v19[3];
  double v23 = *v19 + v52 * v21 / v54;
  double v55 = v19[1] + v52 * v22 / v53;
  double v56 = v23;
  BOOL v24 = sub_100C7449C(v18, &v56);
  if (!v24)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    double v38 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_64;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_84;
    }
LABEL_86:
    dispatch_once(&qword_102419380, &stru_1022F03E0);
LABEL_84:
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v47);
    if (v47 != (char *)buf) {
      free(v47);
    }
    goto LABEL_64;
  }
  uint64_t v25 = sub_100C746BC(v24, &v55);
  if (v25)
  {
    double v26 = v21 * v20;
    double v27 = v22 * v20;
    double v28 = v56 * 57.2957795;
    double v29 = v55 * 57.2957795;
    int v30 = (double *)v58;
    double v31 = sqrt(*(double *)v58 + *((double *)v58 + 5));
    double v32 = sqrt(*((double *)v58 + 10) + *((double *)v58 + 15));
    if (v32 >= 0.001 || v32 < 0.0) {
      double v34 = v32;
    }
    else {
      double v34 = 0.001;
    }
    if (v34 > 30.0)
    {
      unint64_t v49 = 0xBFF0000000000000;
      double v35 = -1.0;
LABEL_74:
      *(_DWORD *)(a3 + 96) = *(_DWORD *)(a1 + 360);
      *(double *)(a3 + 76) = *a2;
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)(a3 + 84) = *(_DWORD *)(a1 + 348);
      *(void *)(a3 + 88) = *(void *)(a1 + 352);
      double v42 = v30[15];
      double v43 = v30[10];
      double v44 = v30[11];
      *(void *)uint64_t buf = 0xBFF0000000000000;
      sub_100C74918(v26, v27, v43, v42, v44, v25, (double *)&v49, (double *)buf);
      *(void *)(a3 + 60) = v49;
      *(void *)(a3 + 68) = *(void *)buf;
      *(double *)(a3 + 4) = v28;
      *(double *)(a3 + 12) = v29;
      *(_DWORD *)(a3 + 132) = *(_DWORD *)(a1 + 396);
      *(double *)(a3 + 20) = v31;
      *(double *)(a3 + 44) = v35;
      *(double *)(a3 + 52) = v34;
      double v45 = *(double *)(a1 + 300);
      if (v45 <= 0.0)
      {
        uint64_t v46 = 0;
        double v45 = -1.0;
      }
      else
      {
        uint64_t v46 = *(void *)(a1 + 292);
      }
      *(double *)(a3 + 36) = v45;
      *(void *)(a3 + 28) = v46;
      uint64_t v16 = 1;
      goto LABEL_65;
    }
    double v35 = sqrt(v27 * v27 + v26 * v26);
    if (fabs(v26) + fabs(v27) >= 0.3)
    {
      double v41 = atan2(v27, v26) * 57.2957795;
      unint64_t v49 = *(void *)&v41;
      if (v41 >= 0.0) {
        goto LABEL_74;
      }
      double v40 = v41 + 360.0;
    }
    else
    {
      double v40 = *(double *)(a1 + 240);
    }
    unint64_t v49 = *(void *)&v40;
    goto LABEL_74;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  __int16 v39 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_84;
    }
    goto LABEL_86;
  }
LABEL_64:
  uint64_t v16 = 0;
LABEL_65:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v58)
  {
    double v59 = v58;
    operator delete(v58);
  }
  return v16;
}

void sub_100C734D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C73528()
{
}

uint64_t sub_100C7353C(uint64_t a1)
{
  *(void *)a1 = off_1022F0350;
  *(void *)(a1 + 8) = off_1022F0330;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v2 = a1 + 56;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = a1 + 104;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v4 = a1 + 152;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v5 = a1 + 128;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 256) = 0xFFFF;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 260) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 276) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 292) = _Q1;
  *(_OWORD *)(a1 + 308) = _Q1;
  *(_OWORD *)(a1 + 324) = _Q1;
  *(_DWORD *)(a1 + 340) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 344) = 0xBFF0000000000000;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 372) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 380) = 0x7FFFFFFF;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 412) = 0xFFFF;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 448) = _Q1;
  *(_OWORD *)(a1 + 464) = _Q1;
  *(_OWORD *)(a1 + 480) = _Q1;
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 500) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 524) = 0;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 516) = 0;
  *(void *)(a1 + 528) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 536) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 564) = 0;
  *(void *)(a1 + 548) = 0;
  *(void *)(a1 + 556) = 0;
  *(void *)(a1 + 540) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(void *)(a1 + 576) = 0xBF80000000000000;
  *(unsigned char *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = a1 + 592;
  *(void *)(a1 + 600) = a1 + 592;
  *(void *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 52) = 1115684864;
  *(_OWORD *)(a1 + 16) = xmmword_101D8A660;
  *(_OWORD *)(a1 + 32) = xmmword_101D8A670;
  *(unsigned char *)(a1 + 48) = 1;
  sub_100907574(a1 + 80, 0x10uLL);
  sub_100907574(v2, 0x10uLL);
  sub_100907574(v3, 4uLL);
  sub_100907574(v5, 4uLL);
  sub_100907574(v4, 4uLL);
  return a1;
}

void sub_100C7371C(_Unwind_Exception *a1)
{
  sub_1003B2350(v7);
  __int16 v9 = *v6;
  if (*v6)
  {
    v1[20] = v9;
    operator delete(v9);
  }
  int v10 = *v5;
  if (*v5)
  {
    v1[17] = v10;
    operator delete(v10);
  }
  __int16 v11 = *v4;
  if (*v4)
  {
    v1[14] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v3;
  if (*v3)
  {
    v1[11] = v12;
    operator delete(v12);
  }
  __int16 v13 = *v2;
  if (*v2)
  {
    v1[8] = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void *sub_100C73780(void *a1)
{
  *a1 = off_1022F0350;
  sub_1003B2350(a1 + 74);
  uint64_t v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_100C7381C(void *a1)
{
  sub_100C73780(a1);

  operator delete();
}

uint64_t sub_100C73854(uint64_t a1)
{
  *(void *)a1 = off_1022F0370;
  sub_100C7353C(a1 + 8);
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = off_1022F0330;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(unsigned char *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 676) = 1115684864;
  *(void *)(a1 + 680) = off_1022F0330;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(unsigned char *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 724) = 1115684864;
  *(void *)(a1 + 728) = off_1022F0330;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(unsigned char *)(a1 + 768) = 0;
  *(_DWORD *)(a1 + 772) = 1115684864;
  *(void *)(a1 + 776) = off_1022F0330;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(unsigned char *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 820) = 1115684864;
  *(_WORD *)(a1 + 824) = 0;
  sub_101171D90(a1 + 832);
  float v2 = 0.0001;
  if (*(float *)(a1 + 676) <= 0.0) {
    float v2 = 64.0;
  }
  *(float *)(a1 + 676) = v2;
  *(_OWORD *)(a1 + 640) = xmmword_101D8A680;
  *(_OWORD *)(a1 + 656) = xmmword_101D8A690;
  *(unsigned char *)(a1 + 672) = 1;
  *(_DWORD *)(a1 + 724) = 1115684864;
  *(_OWORD *)(a1 + 688) = xmmword_101D8A6A0;
  *(_OWORD *)(a1 + 704) = xmmword_101D8A6B0;
  *(unsigned char *)(a1 + 720) = 1;
  *(_DWORD *)(a1 + 772) = 1115684864;
  *(_OWORD *)(a1 + 736) = xmmword_101D8A6C0;
  *(_OWORD *)(a1 + 752) = xmmword_101D8A6D0;
  *(unsigned char *)(a1 + 768) = 1;
  *(_DWORD *)(a1 + 820) = 1115684864;
  *(_OWORD *)(a1 + 784) = xmmword_101D8A660;
  *(_OWORD *)(a1 + 800) = xmmword_101D8A670;
  *(unsigned char *)(a1 + 816) = 1;
  long long v3 = *(_OWORD *)(a1 + 784);
  long long v4 = *(_OWORD *)(a1 + 800);
  *(void *)(a1 + 56) = *(void *)(a1 + 816);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  return a1;
}

void sub_100C73A14(_Unwind_Exception *a1)
{
  sub_100C73780(v1);
  _Unwind_Resume(a1);
}

void sub_100C73A28(void *a1)
{
  *a1 = off_1022F0370;
  sub_100C73780(a1 + 1);

  operator delete();
}

uint64_t sub_100C73A8C(uint64_t a1, double *a2, unsigned char *a3, uint64_t *a4, double **a5, uint64_t a6, long double *a7, long double *a8)
{
  double v16 = *(double *)(a6 + 24);
  sub_1001DCFA4(__p, 0x10uLL);
  if (*a2 < 0.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v17 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "KF:dT < 0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_56:
      char v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
LABEL_31:
      uint64_t v21 = 0;
      goto LABEL_32;
    }
LABEL_71:
    dispatch_once(&qword_102419380, &stru_1022F03E0);
    goto LABEL_56;
  }
  if ((char *)a5[1] - (char *)*a5 != 128)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    double v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      double v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
    }
    sub_100907574((uint64_t)a5, 0x10uLL);
    goto LABEL_31;
  }
  if (a4[1] - *a4 != 128)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning,Q is not dimensioned", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      double v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }
    sub_100907574((uint64_t)a4, 0x10uLL);
  }
  if (v16 == 0.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "KF:beta is zero", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_56;
    }
    goto LABEL_71;
  }
  *a7 = (1.0 - exp(-(v16 * *a2))) / v16;
  *a8 = exp(-(v16 * *a2));
  if ((sub_100C786F0(a1, a3, a4, a6, a2) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    unint64_t v49 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "KF:setQ failed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_56;
    }
    goto LABEL_71;
  }
  uint64_t v23 = 0;
  double v24 = *a7;
  double v25 = *a8;
  double v26 = v24 * v24;
  double v27 = v25 * v25;
  long double v28 = *a7 * *a8;
  double v29 = *a5;
  double v30 = (*a5)[2];
  double v31 = (*a5)[3];
  double v32 = (*a5)[5];
  double v33 = (*a5)[6];
  double v34 = (*a5)[7];
  double v35 = (*a5)[10];
  double v36 = (*a5)[11];
  double v37 = (*a5)[15];
  double v38 = v24 + v24;
  double v39 = **a5 + (v24 + v24) * v30 + v24 * v24 * v35;
  double v40 = (double *)__p[0];
  long double v41 = (*a5)[1] + *a7 * v33 + *a7 * v31 + v24 * v24 * v36;
  *(double *)__p[0] = v39;
  v40[1] = v41;
  long double v42 = v28 * v35 + v25 * v30;
  long double v43 = v28 * v36 + v25 * v31;
  v40[2] = v42;
  v40[3] = v43;
  v40[4] = v41;
  v40[5] = v32 + v38 * v34 + v26 * v37;
  long double v44 = v28 * v36 + v25 * v33;
  long double v45 = v28 * v37 + v25 * v34;
  v40[6] = v44;
  v40[7] = v45;
  v40[8] = v42;
  v40[9] = v44;
  v40[10] = v27 * v35;
  v40[11] = v27 * v36;
  v40[12] = v43;
  v40[13] = v45;
  v40[14] = v27 * v36;
  v40[15] = v27 * v37;
  uint64_t v46 = *(void *)(a1 + 64);
  do
  {
    v29[v23] = *(double *)(v46 + v23 * 8) + v40[v23];
    ++v23;
  }
  while (v23 != 16);
  if (vabdd_f64(v29[4], v29[1]) <= 0.00000001
    && vabdd_f64(v29[8], v29[2]) <= 0.00000001
    && vabdd_f64(v29[9], v29[6]) <= 0.00000001
    && vabdd_f64(v29[12], v29[3]) <= 0.00000001
    && vabdd_f64(v29[13], v29[7]) <= 0.00000001
    && vabdd_f64(v29[14], v29[11]) <= 0.00000001)
  {
    uint64_t v21 = 1;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    __int16 v47 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#Warning,KF:P is not symmetric", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      double v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v53);
      if (v53 != (char *)buf) {
        free(v53);
      }
    }
    sub_100C72070(a1);
    uint64_t v21 = 0;
    long long v48 = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 40) = v48;
    *(void *)(a1 + 56) = *(void *)(a1 + 816);
    *(unsigned char *)(a1 + 248) = 0;
    *(void *)(a1 + 624) = 0;
  }
LABEL_32:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v21;
}

void sub_100C7445C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C7449C(uint64_t a1, double *a2)
{
  double v3 = *a2;
  double v4 = 3.14159265 - *a2;
  if (*a2 > 1.57079633 || (double v4 = *a2, *a2 < -1.57079633))
  {
    double v3 = -3.14159265 - v4;
    if (v4 >= -1.57079633) {
      double v3 = v4;
    }
    *a2 = v3;
  }
  BOOL v5 = v3 >= -1.57079633 && v3 <= 1.57079633;
  if (!v5)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      double v7 = *a2;
      *(_DWORD *)uint64_t buf = 134283521;
      double v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "KF:latRads,%{private}.7f,out of bounds", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::boundLatitude(double &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return v5;
}

uint64_t sub_100C746BC(uint64_t a1, double *a2)
{
  double v3 = *a2;
  if (*a2 >= -3.14159265 && v3 <= 3.14159265) {
    return 1;
  }
  if (v3 < -3.14159265)
  {
    unsigned int v4 = 0;
    do
      double v3 = v3 + 6.28318531;
    while (v3 < -3.14159265 && v4++ < 0x13);
    *a2 = v3;
  }
  if (v3 <= 3.14159265)
  {
    BOOL v7 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    do
    {
      double v3 = v3 + -6.28318531;
      BOOL v7 = v3 > 3.14159265;
    }
    while (v3 > 3.14159265 && v6++ < 0x13);
    *a2 = v3;
  }
  if (v3 >= -3.14159265 && !v7) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  int v10 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    double v11 = *a2;
    *(_DWORD *)uint64_t buf = 134283521;
    double v16 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "KF:lonRads,%{private}.7f,out of bounds", buf, 0xCu);
  }
  BOOL v12 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::boundLongitude(double &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  return result;
}

void sub_100C74918(double a1, double a2, double a3, double a4, double a5, uint64_t a6, double *a7, double *a8)
{
  if (*a7 < 0.0
    || (double v8 = fabs(a1), v9 = fabs(a2), v8 < 0.000001) && v9 < 0.000001
    || (v8 >= 0.000001
      ? (v9 >= 0.000001
       ? (double v11 = 1.0 / (a2 * a2 / (a1 * a1) + 1.0),
          double v10 = v11 / a1 * (-a2 / (a1 * a1) * v11 + -a2 / (a1 * a1) * v11) * a5
              + -a2 / (a1 * a1) * v11 * (-a2 / (a1 * a1) * v11) * a3
              + v11 / a1 * (v11 / a1) * a4)
       : (double v10 = 1.0 / a1 * (1.0 / a1) * a4))
      : (double v10 = -1.0 / a2 * (-1.0 / a2) * a3),
        v10 <= 0.0 || (double v12 = sqrt(v10) * 57.2957795, *a8 = v12, v12 > 60.0)))
  {
    *a7 = -1.0;
    *a8 = -1.0;
  }
}

uint64_t sub_100C749FC(uint64_t result, double a2)
{
  float v2 = (double *)(result + 284);
  double v3 = *(double *)(result + 284);
  if (v3 > 0.0)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)(result + 360) == 6
      && *(unsigned char *)(result + 576)
      && !*(unsigned char *)(result + 824)
      && a2 - *(double *)(result + 340) > 30.0)
    {
      long long v5 = *(_OWORD *)(result + 376);
      long long v15 = *(_OWORD *)(result + 360);
      long long v16 = v5;
      v17[0] = *(_OWORD *)(result + 392);
      *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(result + 404);
      long long v6 = *(_OWORD *)(result + 312);
      v13[2] = *(_OWORD *)(result + 296);
      _OWORD v13[3] = v6;
      long long v7 = *(_OWORD *)(result + 344);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(result + 328);
      *(_OWORD *)&v14[16] = v7;
      long long v8 = *(_OWORD *)(result + 280);
      v13[0] = *(_OWORD *)(result + 264);
      v13[1] = v8;
      double v9 = v3 * v3;
      *(double *)&v14[12] = a2;
      sub_100C6C28C(result, v13, v18, &v19, 1);
      uint64_t v10 = *(void *)(v4 + 88);
      if (*(double *)v10 + *(double *)(v10 + 40) < v9)
      {
        double v11 = fmax(*v2, 1.0);
        double v12 = v11 * v11 * 0.5;
        *(double *)uint64_t v10 = v12;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(double *)(v10 + 40) = v12;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(void *)(v10 + 96) = 0;
        *(void *)(v10 + 104) = 0;
      }
      return sub_100C750BC(v4, (uint64_t)"activeCellUpdate complete", -1.0);
    }
  }
  return result;
}

uint64_t sub_100C74B28(uint64_t a1, double *a2)
{
  char v24 = 0;
  if (!*(unsigned char *)(a1 + 249)) {
    return 0;
  }
  double v4 = *a2 - *(double *)(a1 + 184);
  if (v4 < 0.0) {
    double v4 = 0.0;
  }
  *(double *)(a1 + 192) = v4;
  if (*(double *)(a1 + 208) == 0.0 || *(double *)(a1 + 200) == 0.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    long long v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "KF:fKalman.dN == 0.0 || fKalman.dE == 0.0", buf, 2u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      goto LABEL_13;
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 248)
    && *(double *)(a1 + 284) > 0.0
    && *a2 - *(double *)(a1 + 340) > 600.0
    && !*(unsigned char *)(a1 + 824))
  {
    char v24 = 1;
  }
  uint64_t v9 = sub_100C73A8C(a1, (double *)(a1 + 192), &v24, (uint64_t *)(a1 + 64), (double **)(a1 + 88), a1 + 16, (long double *)(a1 + 224), (long double *)(a1 + 232));
  if ((v9 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "KF:calcTPTQ failed", buf, 2u);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v19) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_13:
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::predictAhead(const CFAbsoluteTime &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
LABEL_49:
    dispatch_once(&qword_102419380, &stru_1022F03E0);
    goto LABEL_13;
  }
  uint64_t v10 = *(double **)(a1 + 112);
  *uint64_t v10 = *v10 + *(double *)(a1 + 224) * v10[2] / *(double *)(a1 + 208);
  BOOL v11 = sub_100C7449C(v9, v10);
  if (!v11)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    double v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
    }
    BOOL v21 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v21) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
  double v12 = *(double **)(a1 + 112);
  double v13 = v12[1];
  ++v12;
  *double v12 = v13 + *(double *)(a1 + 224) * v12[2] / *(double *)(a1 + 200);
  if (sub_100C746BC(v11, v12))
  {
    uint64_t v14 = *(void *)(a1 + 112);
    double v15 = *(double *)(v14 + 24);
    *(double *)(v14 + 16) = *(double *)(a1 + 232) * *(double *)(v14 + 16);
    *(double *)(v14 + 24) = *(double *)(a1 + 232) * v15;
    *(double *)(a1 + 184) = *a2;
    if (*(double *)(a1 + 456) > 0.0)
    {
      float v16 = *(float *)(a1 + 588);
      if (v16 > 0.0)
      {
        float v17 = v16 + *(float *)(a1 + 60) * *(double *)(a1 + 192);
        *(float *)(a1 + 588) = v17;
      }
    }
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  double v22 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
  }
  BOOL v23 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v23)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
  return result;
}

uint64_t sub_100C750BC(uint64_t a1, uint64_t a2, double a3)
{
  int v24 = 0xFFFF;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  long long v27 = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v28 = _Q0;
  long long v29 = _Q0;
  long long v30 = _Q0;
  int v31 = 0;
  uint64_t v34 = 0;
  unint64_t v32 = 0xBFF0000000000000;
  uint64_t v33 = 0;
  int v35 = 0;
  unint64_t v36 = 0xBFF0000000000000;
  int v37 = 0x7FFFFFFF;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  char v41 = 0;
  uint64_t v11 = sub_100C77D74(a1, (uint64_t)&v24, 1);
  if (v11)
  {
    if ((byte_1024809F0 & 1) == 0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      double v12 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitude(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        LOWORD(v42) = 0;
        BOOL v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::debugPrint(const char *, double)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      byte_1024809F0 = 1;
    }
    if (*((double *)&v28 + 1) >= 0.0) {
      double v13 = *((double *)&v28 + 1) * 3.6;
    }
    else {
      double v13 = *((double *)&v28 + 1);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)(a1 + 824)) {
        int v15 = 115;
      }
      else {
        int v15 = 110;
      }
      int v16 = *(_DWORD *)(a1 + 516);
      int v17 = *(_DWORD *)(a1 + 628);
      *(_DWORD *)uint64_t buf = 67244035;
      int v75 = v15;
      __int16 v76 = 2050;
      uint64_t v77 = *((void *)&v30 + 1);
      __int16 v78 = 1026;
      int v79 = v16;
      __int16 v80 = 1026;
      int v81 = v33;
      __int16 v82 = 1026;
      int v83 = v17;
      __int16 v84 = 2049;
      uint64_t v85 = v25;
      __int16 v86 = 2049;
      uint64_t v87 = v26;
      __int16 v88 = 2049;
      uint64_t v89 = *((void *)&v27 + 1);
      __int16 v90 = 2050;
      double v91 = v13;
      __int16 v92 = 2050;
      uint64_t v93 = *((void *)&v29 + 1);
      __int16 v94 = 2050;
      uint64_t v95 = v27;
      __int16 v96 = 2050;
      uint64_t v97 = v28;
      __int16 v98 = 2050;
      uint64_t v99 = v29;
      __int16 v100 = 2050;
      uint64_t v101 = v30;
      __int16 v102 = 2050;
      double v103 = a3;
      __int16 v104 = 2082;
      uint64_t v105 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "KF:,lt%{public}c,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s", buf, 0x92u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      if (*(unsigned char *)(a1 + 824)) {
        int v19 = 115;
      }
      else {
        int v19 = 110;
      }
      int v20 = *(_DWORD *)(a1 + 516);
      int v21 = *(_DWORD *)(a1 + 628);
      int v42 = 67244035;
      int v43 = v19;
      __int16 v44 = 2050;
      uint64_t v45 = *((void *)&v30 + 1);
      __int16 v46 = 1026;
      int v47 = v20;
      __int16 v48 = 1026;
      int v49 = v33;
      __int16 v50 = 1026;
      int v51 = v21;
      __int16 v52 = 2049;
      uint64_t v53 = v25;
      __int16 v54 = 2049;
      uint64_t v55 = v26;
      __int16 v56 = 2049;
      uint64_t v57 = *((void *)&v27 + 1);
      __int16 v58 = 2050;
      double v59 = v13;
      __int16 v60 = 2050;
      uint64_t v61 = *((void *)&v29 + 1);
      __int16 v62 = 2050;
      uint64_t v63 = v27;
      __int16 v64 = 2050;
      uint64_t v65 = v28;
      __int16 v66 = 2050;
      uint64_t v67 = v29;
      __int16 v68 = 2050;
      uint64_t v69 = v30;
      __int16 v70 = 2050;
      double v71 = a3;
      __int16 v72 = 2082;
      uint64_t v73 = a2;
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::debugPrint(const char *, double)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  return v11;
}

uint64_t sub_100C755D0(uint64_t a1)
{
  double v36 = 0.0;
  float v2 = (uint64_t *)(a1 + 88);
  double v3 = (double **)(a1 + 160);
  uint64_t v4 = sub_100C75F38(a1, (uint64_t *)(a1 + 88), &dword_101D8A748, (void *)(a1 + 160), &v36);
  if ((v4 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v19) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    LOWORD(v35) = 0;
    goto LABEL_67;
  }
  double v5 = v36 + 0.0001;
  uint64_t v6 = *(void *)(a1 + 112);
  long long v7 = *(double **)(a1 + 160);
  long long v8 = *(double **)(a1 + 136);
  *long long v8 = *v7 / (v36 + 0.0001);
  v8[1] = v7[1] / v5;
  _OWORD v8[2] = v7[2] / v5;
  void v8[3] = v7[3] / v5;
  double v35 = 0.0 - *(double *)(v6 + 16);
  uint64_t v9 = sub_100C76370(v4, &v35, (void *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), (double **)(a1 + 112));
  if ((v9 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "KF:ZUPT innovation update failed", buf, 2u);
    }
    BOOL v21 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v21) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      goto LABEL_70;
    }
    goto LABEL_67;
  }
  if (!sub_100C76A30(v9, v2, (double **)(a1 + 136), &dword_101D8A748))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    double v22 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
    }
    BOOL v23 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v23) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      goto LABEL_70;
    }
    goto LABEL_67;
  }
  sub_100C750BC(a1, (uint64_t)"zupt, vn update", -1.0);
  sub_100C76F24(a1);
  if ((v10 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    int v24 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }
    BOOL v25 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v25) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      goto LABEL_70;
    }
    goto LABEL_67;
  }
  uint64_t v11 = sub_100C75F38(v10, v2, &dword_101D8A74C, v3, &v36);
  if ((v11 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v26 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }
    BOOL v27 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v27) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      goto LABEL_70;
    }
    goto LABEL_67;
  }
  double v12 = v36 + 0.0001;
  double v13 = *v3;
  uint64_t v14 = *(double **)(a1 + 136);
  *uint64_t v14 = **v3 / (v36 + 0.0001);
  v14[1] = v13[1] / v12;
  int v14[2] = v13[2] / v12;
  void v14[3] = v13[3] / v12;
  double v35 = 0.0 - *(double *)(*(void *)(a1 + 112) + 24);
  uint64_t v15 = sub_100C76370(v11, &v35, (void *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), (double **)(a1 + 112));
  if ((v15 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    long long v28 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "KF:ZUPT innovation update failed", buf, 2u);
    }
    BOOL v29 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v29) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      goto LABEL_70;
    }
    goto LABEL_67;
  }
  if (!sub_100C76A30(v15, v2, (double **)(a1 + 136), &dword_101D8A74C))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    long long v30 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
    }
    BOOL v31 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v31) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      goto LABEL_70;
    }
LABEL_67:
    uint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::zupt()", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
    return 0;
  }
  sub_100C750BC(a1, (uint64_t)"ZUPT, ve update", -1.0);
  sub_100C76F24(a1);
  if (v16) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  unint64_t v32 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
  }
  BOOL v33 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v33)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_67;
    }
LABEL_70:
    dispatch_once(&qword_102419380, &stru_1022F03E0);
    goto LABEL_67;
  }
  return result;
}

uint64_t sub_100C75F38(uint64_t a1, uint64_t *a2, unsigned int *a3, void *a4, void *a5)
{
  if (a2[1] - *a2 == 128)
  {
    if (a4[1] - *a4 != 32)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      uint64_t v9 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,KF:Pht is not dimensioned", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        BOOL v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      sub_100907574((uint64_t)a4, 4uLL);
    }
    uint64_t v10 = *a3;
    if (v10 < 4)
    {
      uint64_t v17 = *a2;
      uint64_t v18 = (void *)*a4;
      *uint64_t v18 = *(void *)(*a2 + 8 * v10);
      v18[1] = *(void *)(v17 + 8 * v10 + 32);
      v18[2] = *(void *)(v17 + 8 * (v10 + 8));
      v18[3] = *(void *)(v17 + 8 * (v10 + 12));
      *a5 = v18[v10];
      return 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:h_index exceeds bounds", buf, 2u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_23;
      }
      goto LABEL_32;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }
    BOOL v15 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v15)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_23:
        char v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        return 0;
      }
LABEL_32:
      dispatch_once(&qword_102419380, &stru_1022F03E0);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t sub_100C76370(uint64_t a1, double *a2, void *a3, double *a4, double *a5, double **a6)
{
  if (*a4 != 0.0)
  {
    if (*a5 == 0.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      uint64_t v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "KF:dN == 0", buf, 2u);
      }
      BOOL v11 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v11) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v14 = *a6;
      if ((char *)a6[1] - (char *)*a6 == 32)
      {
        if (a3[1] - *a3 == 32)
        {
          *uint64_t v14 = *v14 + *(double *)*a3 * *a2 / *a4;
          BOOL v16 = sub_100C7449C(a1, v14);
          if (v16)
          {
            uint64_t v17 = *a6 + 1;
            *uint64_t v17 = *(double *)(*a3 + 8) * *a2 / *a5 + *v17;
            if (sub_100C746BC(v16, v17))
            {
              uint64_t v18 = *a3;
              BOOL v19 = *a6;
              double v20 = (*a6)[3];
              v19[2] = *(double *)(*a3 + 16) * *a2 + (*a6)[2];
              v19[3] = v20 + *(double *)(v18 + 24) * *a2;
              return 1;
            }
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022F03E0);
            }
            BOOL v27 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
            }
            BOOL v28 = sub_10013D1A0(115, 0);
            uint64_t result = 0;
            if (!v28) {
              return result;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419380 == -1)
            {
LABEL_50:
              BOOL v29 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::applyInnovation(const double &, const std::vector<double> &, const double &, const double &, std::vector<double> &)", "%s\n", v29);
              if (v29 != (char *)buf) {
                free(v29);
              }
              return 0;
            }
          }
          else
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022F03E0);
            }
            BOOL v25 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
            }
            BOOL v26 = sub_10013D1A0(115, 0);
            uint64_t result = 0;
            if (!v26) {
              return result;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419380 == -1) {
              goto LABEL_50;
            }
          }
        }
        else
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F03E0);
          }
          BOOL v23 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:k is not dimensioned, innovation not applied", buf, 2u);
          }
          BOOL v24 = sub_10013D1A0(115, 0);
          uint64_t result = 0;
          if (!v24) {
            return result;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419380 == -1) {
            goto LABEL_50;
          }
        }
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        BOOL v21 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned, innovation not applied", buf, 2u);
        }
        BOOL v22 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (!v22) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_50;
        }
      }
    }
LABEL_53:
    dispatch_once(&qword_102419380, &stru_1022F03E0);
    goto LABEL_50;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "KF:dN == 0", buf, 2u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_50;
    }
    goto LABEL_53;
  }
  return result;
}

BOOL sub_100C76A30(uint64_t a1, uint64_t *a2, double **a3, unsigned int *a4)
{
  if (a2[1] - *a2 != 128)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,KF:P is not dimensioned", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    sub_100907574((uint64_t)a2, 0x10uLL);
    return 0;
  }
  if ((char *)a3[1] - (char *)*a3 != 32)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    BOOL v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:k is not dimensioned", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      double v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    sub_100907574((uint64_t)a3, 4uLL);
    return 0;
  }
  uint64_t v6 = *a4;
  if (v6 < 4)
  {
    sub_1001DCFA4(buf, 0x10uLL);
    uint64_t v12 = 0;
    double v13 = *a3;
    uint64_t v14 = *a2;
    BOOL v15 = *(char **)buf;
    do
    {
      BOOL v16 = (double *)&v15[v12];
      *BOOL v16 = *v13 * *(double *)(v14 + 32 * v6);
      v16[1] = *v13 * *(double *)(v14 + 8 * ((4 * v6) | 1u));
      v16[2] = *v13 * *(double *)(v14 + 8 * ((4 * v6) | 2u));
      double v17 = *v13++;
      void v16[3] = v17 * *(double *)(v14 + 8 * ((4 * v6) | 3u));
      v12 += 32;
    }
    while (v12 != 128);
    for (uint64_t i = 0; i != 128; i += 8)
      *(double *)(v14 + i) = *(double *)(v14 + i) - *(double *)&v15[i];
    BOOL v22 = v15;
    operator delete(v15);
    return 1;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    BOOL v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "KF:h_index exceeds bounds", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 0;
    }
  }
  return result;
}

double sub_100C76F24(uint64_t a1)
{
  float v2 = *(double **)(a1 + 88);
  if (*v2 <= 0.0 || v2[5] <= 0.0 || v2[10] <= 0.0 || (double result = v2[15], result <= 0.0))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "KF:diagonal element of P < 0", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::sanityTestP()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100C72070(a1);
    long long v5 = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 40) = v5;
    *(void *)(a1 + 56) = *(void *)(a1 + 816);
    *(unsigned char *)(a1 + 248) = 0;
    double result = 0.0;
    *(void *)(a1 + 624) = 0;
  }
  return result;
}

uint64_t sub_100C77120(uint64_t a1, uint64_t a2)
{
  float v2 = (_OWORD *)(a1 + 420);
  long long v3 = *(_OWORD *)(a1 + 532);
  long long v41 = *(_OWORD *)(a1 + 516);
  long long v42 = v3;
  v43[0] = *(_OWORD *)(a1 + 548);
  *(_OWORD *)((char *)v43 + 12) = *(_OWORD *)(a1 + 560);
  long long v4 = *(_OWORD *)(a1 + 468);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)(a1 + 452);
  *(_OWORD *)&v39[16] = v4;
  long long v5 = *(_OWORD *)(a1 + 500);
  *(_OWORD *)&v39[32] = *(_OWORD *)(a1 + 484);
  long long v40 = v5;
  unsigned long long v6 = *(_OWORD *)(a1 + 436);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)(a1 + 420);
  *(_OWORD *)&v38[16] = v6;
  double v7 = COERCE_DOUBLE(v6 >> 32);
  if (v7 > 0.0)
  {
    uint64_t v9 = a1;
    float64x2_t v36 = *(float64x2_t *)&v38[4];
    double v10 = *(double *)&v39[28];
    v37[0] = fmax(v7, 1.0);
    if (*(double *)&v39[20] <= 0.0)
    {
      BOOL v15 = (uint64_t *)(a1 + 88);
      if (*(unsigned char *)(a1 + 248)) {
        BOOL v16 = (double *)&unk_101D8A758;
      }
      else {
        BOOL v16 = (double *)&unk_101D8A760;
      }
LABEL_27:
      if (sub_100C782B0(a1, v15, v37, v16))
      {
        long long v18 = v2[7];
        *(_OWORD *)(v9 + 360) = v2[6];
        *(_OWORD *)(v9 + 376) = v18;
        *(_OWORD *)(v9 + 392) = v2[8];
        long long v19 = v2[3];
        *(_OWORD *)(v9 + 296) = v2[2];
        *(_OWORD *)(v9 + 312) = v19;
        long long v20 = v2[5];
        *(_OWORD *)(v9 + 328) = v2[4];
        *(_OWORD *)(v9 + 344) = v20;
        long long v21 = v2[1];
        *(_OWORD *)(v9 + 264) = *v2;
        *(_OWORD *)(v9 + 280) = v21;
        *(_OWORD *)(v9 + 404) = *(_OWORD *)((char *)v2 + 140);
        *(void *)(v9 + 184) = *(void *)(v9 + 496);
        BOOL v22 = *(float64x2_t **)(v9 + 112);
        *BOOL v22 = vmulq_f64(v36, (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
        double v23 = *(double *)&v39[12];
        double v24 = 0.0;
        if (*(double *)&v39[12] < 0.0)
        {
          double v25 = 0.0;
        }
        else
        {
          double v25 = 0.0;
          if (v10 >= 0.0)
          {
            __double2 v26 = __sincos_stret(v10 * 0.0174532925);
            double v24 = v26.__cosval * v23;
            double v25 = v26.__sinval * v23;
          }
        }
        v22[1].f64[0] = v24;
        v22[1].f64[1] = v25;
        double v28 = *(double *)(v9 + 456);
        if (v28 > 0.0)
        {
          float v29 = *(double *)(v9 + 448);
          *(float *)(v9 + 584) = v29;
          float v30 = v28 * v28;
          *(float *)(v9 + 588) = v30;
          if (v30 < 1.0) {
            *(_DWORD *)(v9 + 588) = 1065353216;
          }
        }
        *(unsigned char *)(v9 + 249) = 1;
        *(void *)(v9 + 256) = 0;
        int v31 = *(_DWORD *)(v9 + 516);
        if (v31 == 6) {
          *(unsigned char *)(v9 + 576) = 1;
        }
        BOOL v32 = (sub_100C724F4(v31) & 1) != 0 || *(_DWORD *)(v9 + 516) == 4 && *(int *)(v9 + 504) > 72;
        *(unsigned char *)(v9 + 592) = v32;
        sub_1003B2350((void *)(v9 + 600));
        if (sub_100C77D74(v9, a2, 0))
        {
          sub_100C750BC(v9, (uint64_t)"init", -1.0);
          return 1;
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        BOOL v33 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "KF:getResult failed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_56;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_59;
        }
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        BOOL v27 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "KF:init P failed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_56;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1)
        {
LABEL_59:
          double v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::seedTheFilter(CLDaemonLocation &)", "%s\n", v35);
          if (v35 != (char *)buf) {
            free(v35);
          }
LABEL_56:
          sub_100C72070(v9);
          uint64_t result = 0;
          long long v34 = *(_OWORD *)(v9 + 800);
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 784);
          *(_OWORD *)(v9 + 40) = v34;
          *(void *)(v9 + 56) = *(void *)(v9 + 816);
          *(unsigned char *)(v9 + 248) = 0;
          *(void *)(v9 + 624) = 0;
          return result;
        }
      }
      dispatch_once(&qword_102419380, &stru_1022F03E0);
      goto LABEL_59;
    }
    if (*(double *)&v39[12] < 0.0)
    {
LABEL_26:
      BOOL v15 = (uint64_t *)(v9 + 88);
      BOOL v16 = (double *)&v39[20];
      goto LABEL_27;
    }
    if (*(double *)&v39[12] > 1.5 && *(unsigned char *)(a1 + 248))
    {
      *(unsigned char *)(a1 + 248) = 0;
    }
    else
    {
      a1 = sub_100C724F4(v41);
      if (*(double *)&v39[20] >= 5.0 || *(double *)&v39[12] <= 10.0 || !a1)
      {
LABEL_24:
        if (v10 >= 0.0) {
          *(double *)(v9 + 240) = v10;
        }
        goto LABEL_26;
      }
    }
    long long v17 = *(_OWORD *)(v9 + 800);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 784);
    *(_OWORD *)(v9 + 40) = v17;
    *(void *)(v9 + 56) = *(void *)(v9 + 816);
    goto LABEL_24;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  BOOL v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:seedTheFilter,hunc<=0", buf, 2u);
  }
  BOOL v12 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    LOWORD(v37[0]) = 0;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::seedTheFilter(CLDaemonLocation &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100C77778(uint64_t a1)
{
  if (*(void *)(a1 + 616) < 2uLL) {
    return 0;
  }
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v67 = xmmword_101D1C320;
  long long v68 = _Q1;
  long long v69 = _Q1;
  long long v70 = _Q1;
  int v64 = 0xFFFF;
  int v71 = 0;
  unint64_t v72 = 0xBFF0000000000000;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  unint64_t v76 = 0xBFF0000000000000;
  int v75 = 0;
  int v77 = 0x7FFFFFFF;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v78 = 0;
  char v81 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  long long v49 = xmmword_101D1C320;
  long long v50 = _Q1;
  long long v51 = _Q1;
  long long v52 = _Q1;
  int v46 = 0xFFFF;
  int v53 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v54 = 0xBFF0000000000000;
  unint64_t v58 = 0xBFF0000000000000;
  int v57 = 0;
  int v59 = 0x7FFFFFFF;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = 0;
  char v63 = 0;
  int v28 = 0xFFFF;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  long long v31 = xmmword_101D1C320;
  long long v32 = _Q1;
  long long v33 = _Q1;
  long long v34 = _Q1;
  int v35 = 0;
  uint64_t v38 = 0;
  unint64_t v36 = 0xBFF0000000000000;
  uint64_t v37 = 0;
  unint64_t v40 = 0xBFF0000000000000;
  int v39 = 0;
  int v41 = 0x7FFFFFFF;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  char v45 = 0;
  uint64_t v7 = *(void *)(a1 + 608);
  if (v7 == a1 + 600) {
    return 0;
  }
  do
  {
    int v8 = *(_DWORD *)(v7 + 112);
    switch(v8)
    {
      case 9:
        uint64_t v9 = &v28;
        break;
      case 6:
        uint64_t v9 = &v64;
        break;
      case 4:
        uint64_t v9 = &v46;
        break;
      default:
        goto LABEL_10;
    }
    long long v10 = *(_OWORD *)(v7 + 128);
    *((_OWORD *)v9 + 6) = *(_OWORD *)(v7 + 112);
    *((_OWORD *)v9 + 7) = v10;
    *((_OWORD *)v9 + 8) = *(_OWORD *)(v7 + 144);
    *(_OWORD *)(v9 + 35) = *(_OWORD *)(v7 + 156);
    long long v11 = *(_OWORD *)(v7 + 64);
    *((_OWORD *)v9 + 2) = *(_OWORD *)(v7 + 48);
    *((_OWORD *)v9 + 3) = v11;
    long long v12 = *(_OWORD *)(v7 + 96);
    *((_OWORD *)v9 + 4) = *(_OWORD *)(v7 + 80);
    *((_OWORD *)v9 + 5) = v12;
    long long v13 = *(_OWORD *)(v7 + 32);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(v7 + 16);
    *((_OWORD *)v9 + 1) = v13;
LABEL_10:
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != a1 + 600);
  double v14 = *(double *)&v67;
  double v15 = *(double *)&v49;
  if (*(double *)&v67 > 0.0 && *(double *)&v49 > 0.0)
  {
    sub_1000F1268((double *)(a1 + 832), (uint64_t)&v46, (uint64_t)&v64);
    double v14 = *(double *)&v67;
    double v15 = *(double *)&v49;
    double v17 = *(double *)&v49 <= *(double *)&v67 ? *(double *)&v67 : *(double *)&v49;
    if (v16 < v17 * 3.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      long long v18 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "KF:rejected cell and wifi locations are consistent,filter should reset", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_50;
        }
LABEL_52:
        dispatch_once(&qword_102419380, &stru_1022F03E0);
LABEL_50:
        BOOL v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      return 1;
    }
  }
  double v19 = *(double *)&v31;
  if (v14 > 0.0 && *(double *)&v31 > 0.0)
  {
    sub_1000F1268((double *)(a1 + 832), (uint64_t)&v28, (uint64_t)&v64);
    double v21 = *(double *)&v67;
    double v19 = *(double *)&v31;
    if (*(double *)&v31 > *(double *)&v67) {
      double v21 = *(double *)&v31;
    }
    if (v20 < v21 * 3.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      BOOL v22 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "KF:rejected cell and coarse-gps locations are consistent,filter should reset", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_50;
        }
        goto LABEL_52;
      }
      return 1;
    }
    double v15 = *(double *)&v49;
  }
  if (v15 <= 0.0 || v19 <= 0.0) {
    return 0;
  }
  sub_1000F1268((double *)(a1 + 832), (uint64_t)&v46, (uint64_t)&v28);
  double v24 = *(double *)&v49;
  if (*(double *)&v31 > *(double *)&v49) {
    double v24 = *(double *)&v31;
  }
  if (v23 >= v24 * 3.0) {
    return 0;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  double v25 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "KF:rejected wifi and coarse-gps locations are consistent,filter should reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  return 1;
}

uint64_t sub_100C77D74(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v49 = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a2 + 128) = 0;
  long long v3 = (_DWORD *)(a2 + 128);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101D1C320;
  __asm { FMOV            V3.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q3;
  *(_OWORD *)(a2 + 52) = _Q3;
  *(_OWORD *)(a2 + 68) = _Q3;
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a2 + 88) = 0xBFF0000000000000;
  *(void *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  int v8 = *(double **)(a1 + 88);
  if (*(void *)(a1 + 96) - (void)v8 == 128)
  {
    long long v10 = *(float64x2_t **)(a1 + 112);
    if (*(void *)(a1 + 120) - (void)v10 == 32)
    {
      double v13 = *v8;
      double v14 = v8[5];
      double v15 = sqrt(v8[10] + v8[15]);
      if (v15 >= 0.001 || v15 < 0.0) {
        double v17 = v15;
      }
      else {
        double v17 = 0.001;
      }
      long long v47 = _Q3;
      float64x2_t v48 = *v10;
      if (v17 <= 30.0)
      {
        long double v26 = v10[1].f64[0];
        long double v25 = v10[1].f64[1];
        double v18 = sqrt(v25 * v25 + v26 * v26);
        if (fabs(v26) + fabs(v25) >= 0.1)
        {
          double v27 = atan2(v25, v26) * 57.2957795;
          if (v27 < 0.0) {
            double v27 = v27 + 360.0;
          }
          unint64_t v49 = *(void *)&v27;
          *(double *)(a1 + 240) = v27;
        }
        else
        {
          unint64_t v49 = *(void *)(a1 + 240);
        }
      }
      else
      {
        unint64_t v49 = 0xBFF0000000000000;
        *(void *)(a1 + 240) = 0xBFF0000000000000;
        double v18 = -1.0;
      }
      uint64_t v28 = sub_100C724F4(*(_DWORD *)(a1 + 516));
      if (v28)
      {
        long long v29 = *(_OWORD *)(a1 + 436);
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 420);
        *(_OWORD *)(a2 + 16) = v29;
        long long v30 = *(_OWORD *)(a1 + 452);
        long long v31 = *(_OWORD *)(a1 + 468);
        long long v32 = *(_OWORD *)(a1 + 500);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 484);
        *(_OWORD *)(a2 + 80) = v32;
        *(_OWORD *)(a2 + 32) = v30;
        *(_OWORD *)(a2 + 48) = v31;
        long long v33 = *(_OWORD *)(a1 + 516);
        long long v34 = *(_OWORD *)(a1 + 532);
        long long v35 = *(_OWORD *)(a1 + 548);
        *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 560);
        *(_OWORD *)(a2 + 112) = v34;
        *(_OWORD *)(a2 + 128) = v35;
        *(_OWORD *)(a2 + 96) = v33;
      }
      else
      {
        double v36 = sqrt(v13 + v14);
        int v37 = *(_DWORD *)(a1 + 516);
        *(_DWORD *)(a2 + 96) = v37;
        *(void *)(a2 + 76) = *(void *)(a1 + 184);
        *(_DWORD *)a2 = *(_DWORD *)(a1 + 420);
        *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 504);
        *(void *)(a2 + 88) = *(void *)(a1 + 508);
        *(float64x2_t *)(a2 + 4) = vmulq_f64(v48, (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F5uLL));
        *(_DWORD *)(a2 + 132) = 1;
        *(double *)(a2 + 20) = v36;
        uint64_t v38 = *(void *)(a1 + 112);
        double v39 = *(double *)(v38 + 16);
        double v40 = *(double *)(v38 + 24);
        int v41 = *(double **)(a1 + 88);
        double v42 = v41[15];
        double v43 = v41[10];
        double v44 = v41[11];
        *(void *)uint64_t buf = 0xBFF0000000000000;
        sub_100C74918(v39, v40, v43, v42, v44, v28, (double *)&v49, (double *)buf);
        *(void *)(a2 + 60) = v49;
        *(void *)(a2 + 68) = *(void *)buf;
        *(double *)(a2 + 44) = v18;
        *(double *)(a2 + 52) = v17;
        if ((a3 & 1) == 0)
        {
          if (v37 != 4 && v37 != 9)
          {
            *(_OWORD *)(a2 + 44) = v47;
            *(_OWORD *)(a2 + 60) = v47;
          }
          if (*(_DWORD *)(a1 + 516) == 9 && v36 < 200.0) {
            *(void *)(a2 + 20) = 0x4069000000000000;
          }
        }
        float v45 = *(float *)(a1 + 588);
        if (v45 > 0.0)
        {
          *(double *)(a2 + 28) = *(float *)(a1 + 584);
          float v46 = sqrtf(v45);
          *(double *)(a2 + 36) = v46;
          if (v46 < 1.0) {
            *(void *)(a2 + 36) = 0x3FF0000000000000;
          }
        }
      }
      _DWORD *v3 = *(_DWORD *)(a1 + 548);
      return 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    BOOL v22 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned", buf, 2u);
    }
    BOOL v23 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v23)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_24:
        double v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::getResult(CLDaemonLocation &, BOOL)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
        return 0;
      }
LABEL_46:
      dispatch_once(&qword_102419380, &stru_1022F03E0);
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    double v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }
    BOOL v20 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v20)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
  }
  return result;
}

uint64_t sub_100C782B0(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  if (*a3 <= 0.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F03E0);
    }
    long long v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "KF:initP,hunc <= 0", buf, 2u);
    }
    BOOL v13 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_24:
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0;
    }
LABEL_31:
    dispatch_once(&qword_102419380, &stru_1022F03E0);
    goto LABEL_24;
  }
  if (*a4 > 0.0)
  {
    if (a2[1] - *a2 != 128)
    {
      sub_100907574((uint64_t)a2, 0x10uLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      uint64_t v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,P was not dimensioned", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        double v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    double v8 = *a3 * *a3 * 0.5;
    uint64_t v9 = *a2;
    double v10 = *a4 * *a4 * 0.5;
    *(double *)uint64_t v9 = v8;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(double *)(v9 + 40) = v8;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(double *)(v9 + 80) = v10;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(double *)(v9 + 120) = v10;
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  double v14 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "KF:initP,speedUnc <= 0", buf, 2u);
  }
  BOOL v15 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v15)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_100C786F0(uint64_t a1, unsigned char *a2, uint64_t *a3, uint64_t a4, double *a5)
{
  if (*a5 >= 0.0)
  {
    if (*(unsigned char *)(a4 + 40))
    {
      if (a3[1] - *a3 != 128)
      {
        sub_100907574((uint64_t)a3, 0x10uLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F03E0);
        }
        BOOL v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning,KF:Q was not dimensioned", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F03E0);
          }
          long long v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKalmanFilter::setQ(const BOOL &, std::vector<double> &, const KalmanTuningInfo &, const double &)", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
      }
      double v14 = *(double *)(a4 + 24);
      if (v14 != 0.0)
      {
        double v20 = *a5;
        double v21 = exp(-(v14 * *a5));
        long double v22 = exp(v14 * -2.0 * v20);
        double v23 = *(double *)(a4 + 32);
        long double v24 = 1.0 - v22;
        long double v25 = (1.0 - v22) / (v14 + v14);
        double v26 = v23 / (v14 * v14) * (v25 + v20 - (1.0 - v21 + 1.0 - v21) / v14);
        long double v27 = v23 / v14 * ((1.0 - v21) / v14 - v25);
        uint64_t v28 = *a3;
        *(double *)uint64_t v28 = v26;
        *(void *)(v28 + 8) = 0;
        *(long double *)(v28 + 16) = v27;
        *(void *)(v28 + 24) = 0;
        *(void *)(v28 + 32) = 0;
        *(double *)(v28 + 40) = v26;
        *(void *)(v28 + 48) = 0;
        *(long double *)(v28 + 56) = v27;
        *(long double *)(v28 + 64) = v27;
        *(void *)(v28 + 72) = 0;
        long double v29 = v23 * v24 / (v14 + v14);
        *(long double *)(v28 + 80) = v29;
        *(void *)(v28 + 88) = 0;
        *(void *)(v28 + 96) = 0;
        *(long double *)(v28 + 104) = v27;
        *(void *)(v28 + 112) = 0;
        *(long double *)(v28 + 120) = v29;
        if (*a2)
        {
          double v30 = v26 + *a5 * dbl_101D8A6E0[((*(_DWORD *)(a1 + 628) - 4) & 0xFFFFFFFB) == 0];
          *(double *)uint64_t v28 = v30;
          *(double *)(v28 + 40) = v30;
        }
        return 1;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      BOOL v15 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "KF:tuning invalid, beta == 0", buf, 2u);
      }
      BOOL v16 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v16) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_30;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F03E0);
      }
      double v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "KF:tuning invalid", buf, 2u);
      }
      BOOL v18 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v18) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_30:
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLKalmanFilter::setQ(const BOOL &, std::vector<double> &, const KalmanTuningInfo &, const double &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
        return 0;
      }
    }
LABEL_41:
    dispatch_once(&qword_102419380, &stru_1022F03E0);
    goto LABEL_30;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F03E0);
  }
  long long v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "KF:dT < 0", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
  return result;
}

void sub_100C78CBC(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t *sub_100C78CEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = a1[1]; a2 != a3 && (uint64_t *)i != a1; uint64_t i = *(void *)(i + 8))
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(i + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(i + 32) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    long long v8 = *(_OWORD *)(a2 + 64);
    long long v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(i + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(i + 96) = v9;
    *(_OWORD *)(i + 48) = v7;
    *(_OWORD *)(i + 64) = v8;
    long long v10 = *(_OWORD *)(a2 + 112);
    long long v11 = *(_OWORD *)(a2 + 128);
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(i + 156) = *(_OWORD *)(a2 + 156);
    *(_OWORD *)(i + 128) = v11;
    *(_OWORD *)(i + 144) = v12;
    *(_OWORD *)(i + 112) = v10;
    a2 = *(void *)(a2 + 8);
  }
  if ((uint64_t *)i == a1) {
    return sub_100C429EC((uint64_t)a1, a1, a2, a3);
  }
  else {
    return sub_1005AED4C((uint64_t)a1, (uint64_t *)i, a1);
  }
}

uint64_t sub_100C78F08(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 0;
  sub_100C79024(a1 + 8, a3);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = 0;
  long long v5 = [CLAmbientLightDecisionTreeHelper alloc];
  *(void *)(a1 + 40) = v5;
  -[CLAmbientLightDecisionTreeHelper initWithQueue:decisionTreeObj:](v5, "initWithQueue:decisionTreeObj:", [objc_msgSend(*(id *)(a1 + 48), "silo") queue], a1);
  return a1;
}

void sub_100C78F88(_Unwind_Exception *a1)
{
  sub_10078D778(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C78FA0(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_10078D778((void *)(a1 + 8));
  return a1;
}

void sub_100C78FF4(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100C79024(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100C790BC(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1001DD364((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(_DWORD *)(a1 + 24) = (*(void *)(a2 + 8) - *(void *)a2) >> 3;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 48) = a3;
  if (!sub_100C791E8(a1))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Hour bin edges must be strictly increasing, [0.0, 24.0), and there must be at least one edge");
  }
  sub_100C79290(a1, a3);
  int v6 = sub_100C79684(a1, *(double *)(a1 + 48));
  if (v6 != *(_DWORD *)(a1 + 40)) {
    *(_DWORD *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_100C791BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  long long v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100C791E8(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  unint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if ((int)(v2 >> 3) < 1) {
    return 0;
  }
  double v3 = *v1;
  if (*v1 < 0.0 || v3 >= 24.0) {
    return 0;
  }
  if ((v2 >> 3) < 2) {
    return 1;
  }
  BOOL result = 0;
  double v6 = v1[1];
  if (v6 < 24.0 && v6 >= 0.0 && v6 > v3)
  {
    uint64_t v8 = (int)((uint64_t)v2 >> 3);
    uint64_t v9 = (v2 >> 3);
    uint64_t v10 = 2;
    do
    {
      uint64_t v11 = v10;
      if (v9 == v10) {
        break;
      }
      double v12 = v1[v10];
      if (v12 >= 24.0) {
        break;
      }
      ++v10;
      BOOL v13 = v12 >= 0.0 && v12 > v6;
      double v6 = v1[v11];
    }
    while (v13);
    return v11 >= v8;
  }
  return result;
}

BOOL sub_100C79290(uint64_t a1, double a2)
{
  double v3 = (double)[+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone") secondsFromGMTForDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:a2]];
  double v4 = *(double *)(a1 + 32);
  if (v4 != v3) {
    *(double *)(a1 + 32) = v3;
  }
  return v4 != v3;
}

double sub_100C79308(uint64_t a1)
{
  double v2 = *(double *)(*(void *)a1 + 8 * *(int *)(a1 + 40)) * 3600.0;
  double v3 = *(double *)(a1 + 48);
  uint64_t v4 = [+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone") secondsFromGMTForDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:v3]];
  double v5 = *(double *)(a1 + 32);
  double v6 = floor((*(double *)(a1 + 48) + v5) / 86400.0) * 86400.0;
  if (v2 <= (v3 + (double)v4 + floor((v3 + (double)v4) / 86400.0) * -86400.0) / 3600.0 * 3600.0) {
    double v7 = v6;
  }
  else {
    double v7 = v6 + -86400.0;
  }
  return v2 + v7 - v5;
}

double sub_100C79414(double a1)
{
  uint64_t v2 = [+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone") secondsFromGMTForDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:a1]];
  return ((double)v2 + a1 - floor(((double)v2 + a1) / 86400.0) * 86400.0) / 3600.0;
}

uint64_t sub_100C79494(uint64_t a1, unsigned int a2, double a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    int v3 = *(_DWORD *)(a1 + 24);
    if (v3 > (int)a2)
    {
      int v4 = v3 - 1;
      double v5 = *(double **)a1;
      double v6 = *(double *)(*(void *)a1 + 8 * a2);
      if (v4 == a2)
      {
        if (v6 <= a3) {
          return 1;
        }
        double v7 = *v5;
        return v7 > a3;
      }
      if (v6 <= a3)
      {
        double v7 = v5[a2 + 1];
        return v7 > a3;
      }
      return 0;
    }
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022F0448);
  }
  uint64_t v8 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "WallClockHourBinTracker, bin index out of bounds", buf, 2u);
  }
  BOOL v9 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F0448);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWallClockHourBinTracker::isHourInBin(double, int) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100C79684(uint64_t a1, double a2)
{
  uint64_t v4 = [+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone") secondsFromGMTForDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:a2]];
  double v5 = ((double)v4 + a2 - floor(((double)v4 + a2) / 86400.0) * 86400.0) / 3600.0;
  char v6 = sub_100C79494(a1, *(_DWORD *)(a1 + 40), v5);
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    int v8 = *(_DWORD *)(a1 + 24) + v7;
    for (int i = v7 + 1; i < v8; ++i)
    {
      int v10 = *(_DWORD *)(a1 + 24);
      uint64_t v7 = (i % v10);
      char v11 = sub_100C79494(a1, i % v10, v5);
      if (v11) {
        return v7;
      }
    }
    return *(unsigned int *)(a1 + 40);
  }
  return v7;
}

BOOL sub_100C7976C(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 48) <= a2)
  {
    *(double *)(a1 + 48) = a2;
    BOOL v7 = sub_100C79290(a1, a2);
    int v8 = sub_100C79684(a1, *(double *)(a1 + 48));
    int v9 = *(_DWORD *)(a1 + 40);
    BOOL result = v8 != v9;
    if (v8 != v9) {
      *(_DWORD *)(a1 + 40) = v8;
    }
    if (v7)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F0448);
      }
      int v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WallClockHourBinTracker, time zone change", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F0448);
        }
        char v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWallClockHourBinTracker::update(CFAbsoluteTime)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      return 1;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F0448);
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "WallClockHourBinTracker, unexpected time rollback", buf, 2u);
    }
    BOOL v3 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F0448);
      }
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWallClockHourBinTracker::update(CFAbsoluteTime)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

void sub_100C79A78(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100C79AA8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a4[1];
  *(void *)(a1 + 32) = *a4;
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v13 = *(void *)a1;
  double v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100C80580(a1 + 48, &v13);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v11 = *(void *)a1;
  double v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100C80604(a1 + 216, &v11);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  *(unsigned char *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 564) = xmmword_101D8A810;
  *(_OWORD *)(a1 + 580) = unk_101D8A820;
  *(_OWORD *)(a1 + 596) = xmmword_101D8A830;
  *(_OWORD *)(a1 + 608) = *(long long *)((char *)&xmmword_101D8A830 + 12);
  *(void *)(a1 + 624) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  return a1;
}

void sub_100C79BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_100C79C20(v11);
  uint64_t v13 = (std::__shared_weak_count *)v10[5];
  if (v13) {
    sub_1000DB0A0(v13);
  }
  double v14 = (std::__shared_weak_count *)v10[3];
  if (v14) {
    sub_1000DB0A0(v14);
  }
  BOOL v15 = (std::__shared_weak_count *)v10[1];
  if (v15) {
    sub_1000DB0A0(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C79C20(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_100C79C64(uint64_t a1, uint64_t a2)
{
  sub_1001C02D0(a1 + 48, 0, *(double *)(a2 + 8));

  sub_100C79CB0(a1 + 216, (long long *)a2);
}

void sub_100C79CB0(uint64_t a1, long long *a2)
{
  if (*(double *)(a1 + 176) == 0.0)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    uint64_t v4 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }
      uint64_t v5 = __p;
      if (__p[23] < 0) {
        uint64_t v5 = *(unsigned char **)__p;
      }
      uint64_t v6 = *((void *)a2 + 1);
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutDetector (%{public}s): Initializing StepCountEntry %{public}.2f", buf, 0x16u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }
      int v64 = buf;
      if (buf[23] < 0) {
        int v64 = *(unsigned char **)buf;
      }
      uint64_t v65 = *((void *)a2 + 1);
      *(_DWORD *)long long __dst = 136446466;
      *(void *)&__dst[4] = v64;
      *(_WORD *)&_OWORD __dst[12] = 2050;
      *(void *)&__dst[14] = v65;
      uint64_t v66 = (char *)_os_log_send_and_compose_impl();
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v66);
      if (v66 != __p) {
        free(v66);
      }
    }
    long long v7 = *a2;
    long long v8 = a2[1];
    *(_OWORD *)(a1 + 200) = a2[2];
    *(_OWORD *)(a1 + 184) = v8;
    *(_OWORD *)(a1 + 168) = v7;
    long long v9 = a2[3];
    long long v10 = a2[4];
    long long v11 = a2[5];
    *(_OWORD *)(a1 + 264) = a2[6];
    *(_OWORD *)(a1 + 248) = v11;
    *(_OWORD *)(a1 + 232) = v10;
    *(_OWORD *)(a1 + 216) = v9;
    long long v12 = a2[7];
    long long v13 = a2[8];
    long long v14 = a2[10];
    *(_OWORD *)(a1 + 312) = a2[9];
    *(_OWORD *)(a1 + 328) = v14;
    *(_OWORD *)(a1 + 280) = v12;
    *(_OWORD *)(a1 + 296) = v13;
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  BOOL v15 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *((void *)a2 + 1);
    int v17 = *((_DWORD *)a2 + 6) - *(_DWORD *)(a1 + 192);
    *(_DWORD *)std::string __p = 134218240;
    *(void *)&__p[4] = v16;
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BoutExtractor: Received StepCountEntry -- startTime,%.2f,deltaSteps,%d", __p, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    uint64_t v61 = *((void *)a2 + 1);
    int v62 = *((_DWORD *)a2 + 6) - *(_DWORD *)(a1 + 192);
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)&uint8_t buf[4] = v61;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v62;
    char v63 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v63);
    if (v63 != __p) {
      free(v63);
    }
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    int v18 = *((_DWORD *)a2 + 6);
    int v19 = *(_DWORD *)(a1 + 192);
    if (v18 < v19)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      double v20 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }
        double v26 = buf;
        if (buf[23] < 0) {
          double v26 = *(unsigned char **)buf;
        }
        BOOL v27 = *(double *)(a1 + 80) != 0.0;
        int v28 = *((_DWORD *)a2 + 6);
        int v29 = *(_DWORD *)(a1 + 192);
        uint64_t v30 = *((void *)a2 + 1);
        uint64_t v31 = *(void *)(a1 + 176);
        *(_DWORD *)std::string __p = 136447491;
        *(void *)&__p[4] = v26;
        *(_WORD *)&unsigned char __p[12] = 1026;
        *(_DWORD *)&__p[14] = v27;
        *(_WORD *)&__p[18] = 1025;
        *(_DWORD *)&__p[20] = v28;
        *(_WORD *)&__p[24] = 1025;
        *(_DWORD *)&__p[26] = v29;
        *(_WORD *)&__p[30] = 2050;
        *(void *)&__p[32] = v30;
        *(_WORD *)&__p[40] = 2050;
        *(void *)&__p[42] = v31;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Step count rolled back. boutInProgress, %{public}d, curStepCount, %{private}u, prevStepCount, %{private}u, curStepTime, %{public}.2f, prevStepTime, %{public}.2f", __p, 0x32u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_45;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 40);
        *(void *)&__dst[16] = *(void *)(a1 + 56);
      }
      long long v67 = __dst;
      if (__dst[23] < 0) {
        long long v67 = *(unsigned char **)__dst;
      }
      BOOL v68 = *(double *)(a1 + 80) != 0.0;
      int v69 = *((_DWORD *)a2 + 6);
      int v70 = *(_DWORD *)(a1 + 192);
      uint64_t v71 = *((void *)a2 + 1);
      uint64_t v72 = *(void *)(a1 + 176);
      *(_DWORD *)uint64_t buf = 136447491;
      *(void *)&uint8_t buf[4] = v67;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v68;
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = v69;
      *(_WORD *)&unsigned char buf[24] = 1025;
      *(_DWORD *)&buf[26] = v70;
      *(_WORD *)&buf[30] = 2050;
      *(void *)&buf[32] = v71;
      *(_WORD *)&buf[40] = 2050;
      *(void *)&buf[42] = v72;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl();
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v73);
      if (v73 == __p) {
        goto LABEL_45;
      }
      goto LABEL_107;
    }
    double v21 = *((double *)a2 + 11) - *(double *)(a1 + 256);
    if (v21 < 0.0)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      long double v22 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }
        long long v32 = buf;
        if (buf[23] < 0) {
          long long v32 = *(unsigned char **)buf;
        }
        BOOL v33 = *(double *)(a1 + 80) != 0.0;
        uint64_t v34 = *((void *)a2 + 11);
        uint64_t v35 = *(void *)(a1 + 256);
        uint64_t v36 = *((void *)a2 + 1);
        uint64_t v37 = *(void *)(a1 + 176);
        *(_DWORD *)std::string __p = 136447491;
        *(void *)&__p[4] = v32;
        *(_WORD *)&unsigned char __p[12] = 1026;
        *(_DWORD *)&__p[14] = v33;
        *(_WORD *)&__p[18] = 2049;
        *(void *)&__p[20] = v34;
        *(_WORD *)&unsigned char __p[28] = 2049;
        *(void *)&__p[30] = v35;
        *(_WORD *)&__p[38] = 2050;
        *(void *)&__p[40] = v36;
        *(_WORD *)&__p[48] = 2050;
        *(void *)&__p[50] = v37;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Active time rolled back. boutInProgress, %{public}d, curActiveTime, %{private}.2f, prevActiveTime, %{private}.2f, curStepTime, %{public}.2f, prevStepTime, %{public}.2f", __p, 0x3Au);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_45;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 40);
        *(void *)&__dst[16] = *(void *)(a1 + 56);
      }
      uint64_t v74 = __dst;
      if (__dst[23] < 0) {
        uint64_t v74 = *(unsigned char **)__dst;
      }
      BOOL v75 = *(double *)(a1 + 80) != 0.0;
      uint64_t v76 = *((void *)a2 + 11);
      uint64_t v77 = *(void *)(a1 + 256);
      uint64_t v78 = *((void *)a2 + 1);
      uint64_t v79 = *(void *)(a1 + 176);
      *(_DWORD *)uint64_t buf = 136447491;
      *(void *)&uint8_t buf[4] = v74;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v75;
      *(_WORD *)&buf[18] = 2049;
      *(void *)&buf[20] = v76;
      *(_WORD *)&unsigned char buf[28] = 2049;
      *(void *)&buf[30] = v77;
      *(_WORD *)&buf[38] = 2050;
      *(void *)&buf[40] = v78;
      *(_WORD *)&unsigned char buf[48] = 2050;
      *(void *)&buf[50] = v79;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl();
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v73);
      if (v73 == __p) {
        goto LABEL_45;
      }
LABEL_107:
      free(v73);
LABEL_45:
      sub_100BA644C(a1, 5);
LABEL_76:
      long long v53 = *a2;
      long long v54 = a2[2];
      *(_OWORD *)(a1 + 184) = a2[1];
      *(_OWORD *)(a1 + 200) = v54;
      *(_OWORD *)(a1 + 168) = v53;
      long long v55 = a2[3];
      long long v56 = a2[4];
      long long v57 = a2[6];
      *(_OWORD *)(a1 + 248) = a2[5];
      *(_OWORD *)(a1 + 264) = v57;
      *(_OWORD *)(a1 + 216) = v55;
      *(_OWORD *)(a1 + 232) = v56;
      long long v58 = a2[7];
      long long v59 = a2[8];
      long long v60 = a2[10];
      *(_OWORD *)(a1 + 312) = a2[9];
      *(_OWORD *)(a1 + 328) = v60;
      *(_OWORD *)(a1 + 280) = v58;
      *(_OWORD *)(a1 + 296) = v59;
      return;
    }
    double v23 = *((double *)a2 + 2);
    if (v23 <= 0.0)
    {
      double v24 = *((double *)a2 + 1);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      long double v25 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }
        uint64_t v38 = buf;
        if (buf[23] < 0) {
          uint64_t v38 = *(unsigned char **)buf;
        }
        uint64_t v40 = *((void *)a2 + 1);
        uint64_t v39 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        *(_DWORD *)std::string __p = 136446978;
        *(void *)&__p[4] = v38;
        *(_WORD *)&unsigned char __p[12] = 2050;
        *(void *)&__p[14] = v39;
        *(_WORD *)&__p[22] = 2050;
        *(void *)&__p[24] = v40;
        *(_WORD *)&__p[32] = 2050;
        *(void *)&__p[34] = v41;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BoutDetector(%{public}s): #warning, invalid firstStepTime (%{public}.2f)) at start of bout (%{public}.2f)). timestamp=%{public}.2f", __p, 0x2Au);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      double v23 = v24 + -2.56;
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }
        uint64_t v80 = __dst;
        if (__dst[23] < 0) {
          uint64_t v80 = *(unsigned char **)__dst;
        }
        uint64_t v82 = *((void *)a2 + 1);
        uint64_t v81 = *((void *)a2 + 2);
        uint64_t v83 = *(void *)a2;
        *(_DWORD *)uint64_t buf = 136446978;
        *(void *)&uint8_t buf[4] = v80;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v81;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&unsigned char buf[24] = v82;
        *(_WORD *)&buf[32] = 2050;
        *(void *)&buf[34] = v83;
        __int16 v84 = (char *)_os_log_send_and_compose_impl();
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v84);
        if (v84 != __p) {
          free(v84);
        }
      }
    }
    else
    {
      double v24 = v21 + v23;
    }
    double v42 = *((double *)a2 + 1);
    if (v24 > v42)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      double v43 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }
        double v44 = buf;
        if (buf[23] < 0) {
          double v44 = *(unsigned char **)buf;
        }
        uint64_t v46 = *(void *)a2;
        uint64_t v45 = *((void *)a2 + 1);
        uint64_t v47 = *((void *)a2 + 11);
        uint64_t v49 = *(void *)(a1 + 168);
        uint64_t v48 = *(void *)(a1 + 176);
        uint64_t v50 = *(void *)(a1 + 256);
        *(_DWORD *)std::string __p = 136448002;
        *(void *)&__p[4] = v44;
        *(_WORD *)&unsigned char __p[12] = 2050;
        *(double *)&__p[14] = v24;
        *(_WORD *)&__p[22] = 2050;
        *(void *)&__p[24] = v45;
        *(_WORD *)&__p[32] = 2050;
        *(void *)&__p[34] = v46;
        *(_WORD *)&__p[42] = 2050;
        *(void *)&__p[44] = v47;
        *(_WORD *)&__p[52] = 2050;
        *(void *)&__p[54] = v48;
        __int16 v100 = 2050;
        uint64_t v101 = v49;
        __int16 v102 = 2050;
        uint64_t v103 = v50;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "BoutDetector(%{public}s): #warning, lastStepTime (%{public}.2f) exceeds startTime (%{public}.2f)). {timestamp=%{public}.2f, activeTime=%{public}.2f, prevStartTime=%{public}.2f}, prevTimestamp=%{public}.2f}, prevActiveTime=%{public}.2f}", __p, 0x52u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }
        uint64_t v85 = __dst;
        if (__dst[23] < 0) {
          uint64_t v85 = *(unsigned char **)__dst;
        }
        uint64_t v87 = *(void *)a2;
        uint64_t v86 = *((void *)a2 + 1);
        uint64_t v88 = *((void *)a2 + 11);
        uint64_t v90 = *(void *)(a1 + 168);
        uint64_t v89 = *(void *)(a1 + 176);
        uint64_t v91 = *(void *)(a1 + 256);
        *(_DWORD *)uint64_t buf = 136448002;
        *(void *)&uint8_t buf[4] = v85;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&unsigned char buf[24] = v86;
        *(_WORD *)&buf[32] = 2050;
        *(void *)&buf[34] = v87;
        *(_WORD *)&buf[42] = 2050;
        *(void *)&buf[44] = v88;
        *(_WORD *)&buf[52] = 2050;
        *(void *)&buf[54] = v89;
        __int16 v94 = 2050;
        uint64_t v95 = v90;
        __int16 v96 = 2050;
        uint64_t v97 = v91;
        __int16 v92 = (char *)_os_log_send_and_compose_impl();
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v92);
        if (v92 != __p) {
          free(v92);
        }
      }
      double v42 = *((double *)a2 + 1);
      double v24 = v42;
    }
    sub_100BA7878(a1, v42);
    double v51 = v23 + -0.2;
    sub_1001C02D0(a1, 0, v51);
    double v52 = v24 + -0.2;
    sub_100BA7B24(a1, v52);
    if (v18 != v19)
    {
      if (*(double *)(a1 + 80) == 0.0) {
        sub_100BA6F58(a1, v51);
      }
      sub_100BA73F8(a1, v52);
      goto LABEL_76;
    }
  }
}

void sub_100C7ABD8(uint64_t a1, long long *a2)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  uint64_t v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a1 + 560)) {
      uint64_t v5 = "update";
    }
    else {
      uint64_t v5 = "init";
    }
    *(_DWORD *)uint64_t buf = 136315138;
    long long v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutExtractor: Received user info (%s)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[2];
  *(_OWORD *)(a1 + 608) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 580) = v7;
  *(_OWORD *)(a1 + 596) = v8;
  *(_OWORD *)(a1 + 564) = v6;
  *(unsigned char *)(a1 + 560) = 1;
  sub_100BA6160(a1 + 48, a2);
  sub_100BA6160(a1 + 216, a2);
}

void sub_100C7ADFC(uint64_t a1, uint64_t a2)
{
  sub_100C7B3D8(a1, a2, (uint64_t)v7);
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  BOOL v3 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134352385;
    uint64_t v52 = v8;
    __int16 v53 = 2050;
    *(void *)long long v54 = v9;
    *(_WORD *)&v54[8] = 2049;
    double v55 = v10;
    *(_WORD *)long long v56 = 2049;
    *(double *)&v56[2] = v11;
    __int16 v57 = 2049;
    *(double *)long long v58 = v12;
    *(_WORD *)&v58[8] = 2049;
    *(double *)&v58[10] = v13;
    *(_WORD *)&v58[18] = 257;
    v59[0] = v14;
    *(_WORD *)&v59[1] = 2049;
    *(double *)&v59[3] = v21;
    *(_WORD *)&v59[11] = 2049;
    *(double *)&v59[13] = v26;
    __int16 v60 = 2049;
    double v61 = v27;
    __int16 v62 = 2049;
    double v63 = v28;
    __int16 v64 = 2049;
    double v65 = v29;
    __int16 v66 = 2049;
    double v67 = v30;
    __int16 v68 = 2049;
    double v69 = v31;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GaitMetrics,startTime,%{public}.2f,timestamp,%{public}llu,walkingSpeed,%{private}.3f,doubleSupportPercentage,%{private}.3f,stepLength,%{private}.3f,asymmetryProbability,%{private}.3f,deviceSide,%{private}hhu,cycleTime,%{private}.3f,stepIndexOfHarmonicityAP,%{private}.3f,stepIndexOfHarmonicityML,%{private}.3f,stepIndexOfHarmonicityVT,%{private}.3f,swingIndexOfHarmonicityAP,%{private}.3f,swingIndexOfHarmonicityML,%{private}.3f,swingIndexOfHarmonicityVT,%{private}.3f", buf, 0x87u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    int v32 = 134352385;
    uint64_t v33 = v8;
    __int16 v34 = 2050;
    *(void *)uint64_t v35 = v9;
    *(_WORD *)&v35[8] = 2049;
    double v36 = v10;
    *(_WORD *)uint64_t v37 = 2049;
    *(double *)&double v37[2] = v11;
    __int16 v38 = 2049;
    *(double *)uint64_t v39 = v12;
    *(_WORD *)&v39[8] = 2049;
    *(double *)&v39[10] = v13;
    *(_WORD *)&v39[18] = 257;
    v40[0] = v14;
    *(_WORD *)&v40[1] = 2049;
    *(double *)&v40[3] = v21;
    *(_WORD *)&v40[11] = 2049;
    *(double *)&v40[13] = v26;
    __int16 v41 = 2049;
    double v42 = v27;
    __int16 v43 = 2049;
    double v44 = v28;
    __int16 v45 = 2049;
    double v46 = v29;
    __int16 v47 = 2049;
    double v48 = v30;
    __int16 v49 = 2049;
    double v50 = v31;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleSPUGaitMetrics(const SPUGaitMetrics &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  uint64_t v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134351617;
    uint64_t v52 = v8;
    __int16 v53 = 1025;
    *(_DWORD *)long long v54 = v15;
    *(_WORD *)&v54[4] = 1025;
    *(_DWORD *)&v54[6] = v16;
    LOWORD(v55) = 1025;
    *(_DWORD *)((char *)&v55 + 2) = v17;
    HIWORD(v55) = 1025;
    *(_DWORD *)long long v56 = v18;
    *(_WORD *)&v56[4] = 1025;
    *(_DWORD *)&v56[6] = v19;
    __int16 v57 = 1025;
    *(_DWORD *)long long v58 = v20;
    *(_WORD *)&v58[4] = 2049;
    *(double *)&v58[6] = v22;
    *(_WORD *)&v58[14] = 1026;
    *(_DWORD *)&v58[16] = v23;
    *(_WORD *)long long v59 = 2049;
    *(double *)&v59[2] = v24;
    *(_WORD *)&v59[10] = 1026;
    *(_DWORD *)&v59[12] = v25;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GaitMetrics::segmentsRejected,startTime,%{public}.2f,isSwingStanceCycle,%{private}hhu,isNotRunning,%{private}hhu,isFeasibleWalkingSpeed,%{private}hhu,isPendular,%{private}hhu,isSufficientVerticalTwist,%{private}hhu,isCadenceConcordant,%{private}hhu,userHeight,%{private}.2f,isHeightSet,%{public}d,userWeight,%{private}.2f,isWeightSet,%{public}d,", buf, 0x50u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    int v32 = 134351617;
    uint64_t v33 = v8;
    __int16 v34 = 1025;
    *(_DWORD *)uint64_t v35 = v15;
    *(_WORD *)&v35[4] = 1025;
    *(_DWORD *)&v35[6] = v16;
    LOWORD(v36) = 1025;
    *(_DWORD *)((char *)&v36 + 2) = v17;
    HIWORD(v36) = 1025;
    *(_DWORD *)uint64_t v37 = v18;
    *(_WORD *)&v37[4] = 1025;
    *(_DWORD *)&v37[6] = v19;
    __int16 v38 = 1025;
    *(_DWORD *)uint64_t v39 = v20;
    *(_WORD *)&v39[4] = 2049;
    *(double *)&v39[6] = v22;
    *(_WORD *)&v39[14] = 1026;
    *(_DWORD *)&v39[16] = v23;
    *(_WORD *)uint64_t v40 = 2049;
    *(double *)&v40[2] = v24;
    *(_WORD *)&v40[10] = 1026;
    *(_DWORD *)&v40[12] = v25;
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleSPUGaitMetrics(const SPUGaitMetrics &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(void, unsigned char *))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v7);
  sub_100C7B444(a1 + 48, (uint64_t)v7);
}

double sub_100C7B3D8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = *(void *)(a2 + 72);
  *(void *)(a3 + 16) = *(void *)(a2 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 1);
  *(unsigned char *)(a3 + 44) = *(unsigned char *)(a2 + 5);
  *(_WORD *)(a3 + 45) = *(_WORD *)(a2 + 6);
  int v3 = *(_DWORD *)(a1 + 572);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a3 + 52) = v3;
  *(unsigned char *)(a3 + 56) = *(unsigned char *)(a1 + 621);
  *(_DWORD *)(a3 + 60) = *(_DWORD *)(a1 + 576);
  *(unsigned char *)(a3 + 64) = *(unsigned char *)(a1 + 622);
  *(_OWORD *)(a3 + 68) = *(_OWORD *)(a2 + 44);
  double result = *(double *)(a2 + 60);
  *(double *)(a3 + 84) = result;
  return result;
}

void sub_100C7B444(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 148))
  {
    sub_100BA7878(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
    sub_1001C02D0(a1, 2u, *(double *)(a2 + 8));
    sub_100BA7B24(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
    if (*(double *)(a1 + 80) == 0.0) {
      sub_100BA6F58(a1, *(double *)(a2 + 8));
    }
    double v4 = *(double *)(a2 + 8) + *(float *)(a2 + 48);
    sub_100BA73F8(a1, v4);
  }
}

__n128 sub_100C7B4F4(uint64_t a1, uint64_t a2)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  double v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutExtractor: Received workout override", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleWorkoutSessionOverride(const CLWorkoutUpdate &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a2 + 32);
  *(__n128 *)(a1 + 624) = result;
  *(_OWORD *)(a1 + 640) = v6;
  return result;
}

BOOL sub_100C7B69C(void *a1, double *a2, double *a3)
{
  double v26 = 0.0;
  double v27 = 0.0;
  if ((*(uint64_t (**)(void, double *, double *))(*(void *)*a1 + 40))(*a1, &v27, &v26))
  {
    if (v27 == v26)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      long long v6 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "BoutExtractor: No bouts in db", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        LOWORD(v28) = 0;
LABEL_46:
        unsigned __int8 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return 0;
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 158) || *((_DWORD *)a1 + 159))
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        uint64_t v9 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
        {
          int v10 = *((_DWORD *)a1 + 159);
          int v11 = *((_DWORD *)a1 + 158);
          uint64_t v12 = a1[78];
          *(_DWORD *)uint64_t buf = 67240704;
          *(_DWORD *)int v32 = v10;
          *(_WORD *)&v32[4] = 1026;
          *(_DWORD *)&v32[6] = v11;
          LOWORD(v33[0]) = 2050;
          *(void *)((char *)v33 + 2) = v12;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Currently in workout predictedType %{public}u activityType %{public}u since (%{public}.2f)", buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
          }
          int v19 = *((_DWORD *)a1 + 159);
          int v20 = *((_DWORD *)a1 + 158);
          uint64_t v21 = a1[78];
          int v28 = 67240704;
          *(_DWORD *)float v29 = v19;
          *(_WORD *)&v29[4] = 1026;
          *(_DWORD *)&v29[6] = v20;
          LOWORD(v30[0]) = 2050;
          *(void *)((char *)v30 + 2) = v21;
          float v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
        double v13 = *((double *)a1 + 78);
      }
      else
      {
        double v13 = CFAbsoluteTimeGetCurrent() + -30.0;
      }
      *a2 = v27;
      if (v26 < v13) {
        double v13 = v26;
      }
      *a3 = v13;
      if (*a2 >= v13)
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        unsigned __int8 v17 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BoutExtractor: All bouts deferred", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
          }
          LOWORD(v28) = 0;
          goto LABEL_46;
        }
      }
      else
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        char v14 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
        {
          double v15 = *a2;
          double v16 = *a3;
          *(_DWORD *)uint64_t buf = 134349312;
          *(double *)int v32 = v15;
          *(_WORD *)&v32[8] = 2050;
          v33[0] = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BoutExtractor: Returned time range to process (%{public}.2f) to (%{public}.2f)", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
          }
          double v23 = *a2;
          double v24 = *a3;
          int v28 = 134349312;
          *(double *)float v29 = v23;
          *(_WORD *)&v29[8] = 2050;
          v30[0] = v24;
          unsigned __int8 v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        return 1;
      }
    }
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    uint64_t v8 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BoutExtractor: Unable to get time range to process", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      LOWORD(v28) = 0;
      goto LABEL_46;
    }
  }
  return result;
}

uint64_t sub_100C7BD78(void *a1, unint64_t *a2, void **a3, double a4, double a5)
{
  int v10 = &qword_102419000;
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  int v11 = &qword_102419000;
  uint64_t v12 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349312;
    *(double *)int v167 = a4;
    *(_WORD *)&v167[8] = 2050;
    *(double *)&v167[10] = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BoutExtractor: Checking for bouts from %{public}.2f to %{public}.2f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = a4;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = a5;
    uint64_t v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v90);
    if (v90 != (char *)buf) {
      free(v90);
    }
  }
  uint64_t v131 = 0;
  __int16 v132 = 0;
  uint64_t v133 = 0;
  uint64_t v13 = (*(uint64_t (**)(void, void **, double, double))(*(void *)*a1 + 48))(*a1, &v131, a4 + -0.0001, a5 + 0.0001);
  if (v13 == 100)
  {
    if (v132 == v131)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      uint64_t v88 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "BoutExtractor: No bouts found.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v91 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v91);
        if (v91 != (char *)buf) {
          free(v91);
        }
      }
LABEL_99:
      uint64_t v13 = 100;
    }
    else
    {
      sub_100C806FC((unint64_t)v131, (unint64_t)v132, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v132 - (unsigned char *)v131) >> 3)), 1);
      unint64_t v14 = a2[1];
      unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a2) >> 3));
      if (v14 == *a2) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      sub_100C8153C(*a2, v14, v16, 1);
      sub_100C7CF7C(v17, &v131, a2);
      unsigned __int8 v18 = v131;
      int v19 = v132;
      if (v131 == v132)
      {
        uint64_t v13 = 100;
        if (!v131) {
          return v13;
        }
        goto LABEL_101;
      }
      while (1)
      {
        long long v20 = v18[1];
        long long v128 = *v18;
        long long v129 = v20;
        uint64_t v130 = *((void *)v18 + 4);
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        double v21 = *((double *)&v128 + 1);
        double v22 = *(double *)&v20;
        uint64_t v23 = (*(uint64_t (**)(void, void **, double, double))(*(void *)a1[2] + 24))(a1[2], &v125, *((double *)&v128 + 1), *(double *)&v20);
        if (v23 == 100)
        {
          unint64_t v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v126 - (unsigned char *)v125) >> 5));
          uint64_t v27 = v126 == v125 ? 0 : v26;
          sub_100C82344((unint64_t)v125, v126, v27, 1);
          double v28 = v22 + 0.2;
          int v122 = 0;
          uint64_t v123 = 0;
          uint64_t v124 = 0;
          if ((*(unsigned int (**)(void, void **, double, double))(*(void *)a1[4] + 16))(a1[4], &v122, v21 + 0.2, v28) == 109)
          {
            if (v10[62] != -1) {
              dispatch_once(&qword_1024191F0, &stru_1022F0488);
            }
            float v29 = v11[63];
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 134349056;
              *(double *)int v167 = v21;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "BoutExtractor: Defering processing bout (%{public}.2f). Pedometer unavailable.", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (v10[62] != -1) {
                dispatch_once(&qword_1024191F0, &stru_1022F0488);
              }
              LODWORD(__p.__r_.__value_.__l.__data_) = 134349056;
              *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v21;
              uint64_t v78 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v78);
              if (v78 != (char *)buf) {
                free(v78);
              }
            }
            uint64_t v13 = 109;
            int v25 = 1;
          }
          else
          {
            float v30 = v10;
            float v31 = v11;
            DWORD2(v129) = (*(uint64_t (**)(void, double, double))(*(void *)a1[4] + 24))(a1[4], v21 + 0.2, v28);
            int v32 = *((_DWORD *)a1 + 146);
            int v33 = *((_DWORD *)a1 + 142);
            int v34 = *((_DWORD *)a1 + 150);
            int v35 = v128;
            sub_100C7D2CC(a1, (uint64_t)&v128, &v125, (uint64_t *)&v122, (uint64_t)buf);
            int v92 = *(_DWORD *)buf;
            int v93 = *(_DWORD *)v167;
            std::string::size_type v96 = *(void *)&v167[4];
            std::string::size_type v98 = *(void *)&v167[12];
            uint64_t v94 = *(void *)v169;
            int v97 = v168;
            int v99 = *(_DWORD *)&v169[8];
            uint64_t v100 = v170;
            unsigned int v111 = BYTE8(v170);
            __int16 v120 = *(_WORD *)((char *)&v170 + 9);
            char v121 = BYTE11(v170);
            int v101 = HIDWORD(v170);
            long long v36 = v171;
            long long v37 = v172;
            long long v95 = v173;
            long long v38 = v174;
            double v102 = v175;
            uint64_t v103 = v176;
            double v104 = v177;
            long long v118 = v179;
            long long v119 = v180;
            long long v117 = v178;
            int v105 = v181;
            int v106 = v182;
            int v107 = v183;
            int v108 = v184;
            float v39 = v185;
            char v116 = v188;
            __int16 v115 = v187;
            float v40 = v189;
            int v109 = v186;
            int v110 = v190;
            if (v30[62] != -1) {
              dispatch_once(&qword_1024191F0, &stru_1022F0488);
            }
            __int16 v41 = v31[63];
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              sub_101136D08(v111, &__p);
              if (v101) {
                int v42 = 42;
              }
              else {
                int v42 = -1;
              }
              BOOL v43 = (v108 & v42) == 0;
              *(_DWORD *)uint64_t buf = 134353411;
              BOOL v44 = (v107 & v42) == 0;
              *(void *)int v167 = v96;
              BOOL v45 = (v106 & v42) == 0;
              *(_WORD *)&v167[8] = 2050;
              BOOL v46 = (v105 & v42) == 0;
              *(void *)&v167[10] = v98;
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_WORD *)&v167[18] = 1026;
              int v168 = v97;
              *(_WORD *)int v169 = 2049;
              *(void *)&v169[2] = *((void *)&v38 + 1);
              *(_WORD *)&v169[10] = 1026;
              LODWORD(v170) = v46;
              WORD2(v170) = 2049;
              *(double *)((char *)&v170 + 6) = v102;
              HIWORD(v170) = 1026;
              LODWORD(v171) = v45;
              WORD2(v171) = 2049;
              *(void *)((char *)&v171 + 6) = v103;
              HIWORD(v171) = 1026;
              LODWORD(v172) = v44;
              WORD2(v172) = 2049;
              *(double *)((char *)&v172 + 6) = v104;
              HIWORD(v172) = 1026;
              LODWORD(v173) = v43;
              WORD2(v173) = 2050;
              *(void *)((char *)&v173 + 6) = v100;
              HIWORD(v173) = 1026;
              LODWORD(v174) = v99;
              WORD2(v174) = 2081;
              *(void *)((char *)&v174 + 6) = p_p;
              HIWORD(v174) = 2049;
              double v175 = v39;
              LOWORD(v176) = 1025;
              *(_DWORD *)((char *)&v176 + 2) = v109;
              HIWORD(v176) = 2049;
              double v177 = v40;
              LOWORD(v178) = 1025;
              *(_DWORD *)((char *)&v178 + 2) = v110;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMobility::BoutMetrics,startTime,%{public}.2f,endTime,%{public}.2f,stepCount,%{public}u,walkingSpeed,%{private}.2f,walkingSpeedIsValid,%{public}d,doubleSupportPercentage,%{private}.1f,doubleSupportPercentageIsValid,%{public}d,stepLength,%{private}.2f,stepLengthIsValid,%{public}d,asymmetryProbabilityPercentage,%{private}.0f,asymmetryProbabilityPercentageIsValid,%{public}d,invalidGradePct,%{public}.2f,numGaitMetrics,%{public}d,deviceSide,%{private}s,userHeight,%{private}.2f,isHeightSet,%{private}d,userWeight,%{private}.2f,isWeightSet,%{private}d", buf, 0x96u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v30[62] != -1) {
                dispatch_once(&qword_1024191F0, &stru_1022F0488);
              }
              sub_101136D08(v111, &v112);
              if (v101) {
                int v79 = 42;
              }
              else {
                int v79 = -1;
              }
              BOOL v80 = (v108 & v79) == 0;
              LODWORD(__p.__r_.__value_.__l.__data_) = 134353411;
              BOOL v81 = (v107 & v79) == 0;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v96;
              BOOL v82 = (v106 & v79) == 0;
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
              BOOL v83 = (v105 & v79) == 0;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v98;
              __int16 v84 = &v112;
              if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                __int16 v84 = (std::string *)v112.__r_.__value_.__r.__words[0];
              }
              HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
              int v135 = v97;
              __int16 v136 = 2049;
              uint64_t v137 = *((void *)&v38 + 1);
              __int16 v138 = 1026;
              BOOL v139 = v83;
              __int16 v140 = 2049;
              double v141 = v102;
              __int16 v142 = 1026;
              BOOL v143 = v82;
              __int16 v144 = 2049;
              uint64_t v145 = v103;
              __int16 v146 = 1026;
              BOOL v147 = v81;
              __int16 v148 = 2049;
              double v149 = v104;
              __int16 v150 = 1026;
              BOOL v151 = v80;
              __int16 v152 = 2050;
              uint64_t v153 = v100;
              __int16 v154 = 1026;
              int v155 = v99;
              __int16 v156 = 2081;
              long long v157 = v84;
              __int16 v158 = 2049;
              double v159 = v39;
              __int16 v160 = 1025;
              int v161 = v109;
              __int16 v162 = 2049;
              double v163 = v40;
              __int16 v164 = 1025;
              int v165 = v110;
              uint64_t v85 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v85);
              if (v85 != (char *)buf) {
                free(v85);
              }
            }
            double v48 = (char *)a3[1];
            __int16 v49 = (char *)a3[2];
            if (v48 >= v49)
            {
              unint64_t v54 = 0xEEEEEEEEEEEEEEEFLL * ((v48 - (unsigned char *)*a3) >> 4);
              unint64_t v55 = v54 + 1;
              if (v54 + 1 > 0x111111111111111) {
                sub_1001D7FD4();
              }
              unint64_t v56 = 0xEEEEEEEEEEEEEEEFLL * ((v49 - (unsigned char *)*a3) >> 4);
              if (2 * v56 > v55) {
                unint64_t v55 = 2 * v56;
              }
              if (v56 >= 0x88888888888888) {
                unint64_t v57 = 0x111111111111111;
              }
              else {
                unint64_t v57 = v55;
              }
              if (v57) {
                long long v58 = (char *)sub_1001F2B9C((uint64_t)(a3 + 2), v57);
              }
              else {
                long long v58 = 0;
              }
              long long v59 = &v58[240 * v54];
              *(_DWORD *)long long v59 = v35;
              *((_DWORD *)v59 + 1) = v32;
              *((_DWORD *)v59 + 2) = v33;
              *((_DWORD *)v59 + 3) = v34;
              *((_DWORD *)v59 + 4) = v92;
              *((_DWORD *)v59 + 5) = v93;
              *((void *)v59 + 3) = v96;
              *((void *)v59 + 4) = v98;
              *((_DWORD *)v59 + 10) = v97;
              *(void *)(v59 + 44) = v94;
              *((_DWORD *)v59 + 13) = v99;
              *((void *)v59 + 7) = v100;
              v59[64] = v111;
              *(_WORD *)(v59 + 65) = v120;
              v59[67] = v121;
              *((_DWORD *)v59 + 17) = v101;
              *(_OWORD *)(v59 + 72) = v36;
              *(_OWORD *)(v59 + 88) = v37;
              *(_OWORD *)(v59 + 104) = v95;
              *(_OWORD *)(v59 + 120) = v38;
              *((double *)v59 + 17) = v102;
              *((void *)v59 + 18) = v103;
              *((double *)v59 + 19) = v104;
              long long v60 = v119;
              long long v61 = v117;
              *((_OWORD *)v59 + 11) = v118;
              *((_OWORD *)v59 + 12) = v60;
              *((_OWORD *)v59 + 10) = v61;
              *((_DWORD *)v59 + 52) = v105;
              *((_DWORD *)v59 + 53) = v106;
              *((_DWORD *)v59 + 54) = v107;
              *((_DWORD *)v59 + 55) = v108;
              *((float *)v59 + 56) = v39;
              v59[228] = v109;
              v59[231] = v116;
              *(_WORD *)(v59 + 229) = v115;
              *((float *)v59 + 58) = v40;
              v59[236] = v110;
              __int16 v62 = v113;
              v59[239] = v114;
              *(_WORD *)(v59 + 237) = v62;
              __int16 v64 = (char *)*a3;
              double v63 = (char *)a3[1];
              double v65 = v59;
              int v11 = v31;
              if (v63 != *a3)
              {
                do
                {
                  long long v66 = *((_OWORD *)v63 - 15);
                  long long v67 = *((_OWORD *)v63 - 13);
                  *((_OWORD *)v65 - 14) = *((_OWORD *)v63 - 14);
                  *((_OWORD *)v65 - 13) = v67;
                  *((_OWORD *)v65 - 15) = v66;
                  long long v68 = *((_OWORD *)v63 - 12);
                  long long v69 = *((_OWORD *)v63 - 11);
                  long long v70 = *((_OWORD *)v63 - 9);
                  *((_OWORD *)v65 - 10) = *((_OWORD *)v63 - 10);
                  *((_OWORD *)v65 - 9) = v70;
                  *((_OWORD *)v65 - 12) = v68;
                  *((_OWORD *)v65 - 11) = v69;
                  long long v71 = *((_OWORD *)v63 - 8);
                  long long v72 = *((_OWORD *)v63 - 7);
                  long long v73 = *((_OWORD *)v63 - 5);
                  *((_OWORD *)v65 - 6) = *((_OWORD *)v63 - 6);
                  *((_OWORD *)v65 - 5) = v73;
                  *((_OWORD *)v65 - 8) = v71;
                  *((_OWORD *)v65 - 7) = v72;
                  long long v74 = *((_OWORD *)v63 - 4);
                  long long v75 = *((_OWORD *)v63 - 3);
                  long long v76 = *((_OWORD *)v63 - 1);
                  *((_OWORD *)v65 - 2) = *((_OWORD *)v63 - 2);
                  *((_OWORD *)v65 - 1) = v76;
                  *((_OWORD *)v65 - 4) = v74;
                  *((_OWORD *)v65 - 3) = v75;
                  v65 -= 240;
                  v63 -= 240;
                }
                while (v63 != v64);
                double v63 = (char *)*a3;
              }
              int v10 = v30;
              __int16 v53 = v59 + 240;
              *a3 = v65;
              a3[1] = v59 + 240;
              a3[2] = &v58[240 * v57];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *(_DWORD *)double v48 = v35;
              *((_DWORD *)v48 + 1) = v32;
              *((_DWORD *)v48 + 2) = v33;
              *((_DWORD *)v48 + 3) = v34;
              *((_DWORD *)v48 + 4) = v92;
              *((_DWORD *)v48 + 5) = v93;
              *((void *)v48 + 3) = v96;
              *((void *)v48 + 4) = v98;
              *((_DWORD *)v48 + 10) = v97;
              *(void *)(v48 + 44) = v94;
              *((_DWORD *)v48 + 13) = v99;
              *((void *)v48 + 7) = v100;
              v48[64] = v111;
              *(_WORD *)(v48 + 65) = v120;
              v48[67] = v121;
              *((_DWORD *)v48 + 17) = v101;
              *(_OWORD *)(v48 + 72) = v36;
              *(_OWORD *)(v48 + 88) = v37;
              *(_OWORD *)(v48 + 104) = v95;
              *(_OWORD *)(v48 + 120) = v38;
              *((double *)v48 + 17) = v102;
              *((void *)v48 + 18) = v103;
              *((double *)v48 + 19) = v104;
              long long v50 = v119;
              long long v51 = v117;
              *((_OWORD *)v48 + 11) = v118;
              *((_OWORD *)v48 + 12) = v50;
              *((_OWORD *)v48 + 10) = v51;
              *((_DWORD *)v48 + 52) = v105;
              *((_DWORD *)v48 + 53) = v106;
              *((_DWORD *)v48 + 54) = v107;
              *((_DWORD *)v48 + 55) = v108;
              *((float *)v48 + 56) = v39;
              v48[228] = v109;
              v48[231] = v116;
              *(_WORD *)(v48 + 229) = v115;
              *((float *)v48 + 58) = v40;
              v48[236] = v110;
              __int16 v52 = v113;
              v48[239] = v114;
              __int16 v53 = v48 + 240;
              *(_WORD *)(v48 + 237) = v52;
              int v11 = v31;
              int v10 = v30;
            }
            int v25 = 0;
            a3[1] = v53;
          }
          if (v122)
          {
            uint64_t v123 = v122;
            operator delete(v122);
          }
        }
        else if (v23 == 109)
        {
          if (v10[62] != -1) {
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
          }
          double v24 = v11[63];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BoutExtractor: Defering bout processing. Gait Metrics unavailable, likely because device is locked.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v10[62] != -1) {
              dispatch_once(&qword_1024191F0, &stru_1022F0488);
            }
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            uint64_t v77 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v77);
            if (v77 != (char *)buf) {
              free(v77);
            }
          }
          uint64_t v13 = 109;
          int v25 = 1;
        }
        else
        {
          int v25 = 1;
          uint64_t v13 = v23;
        }
        if (v125)
        {
          uint64_t v126 = (char *)v125;
          operator delete(v125);
        }
        if (v25) {
          break;
        }
        unsigned __int8 v18 = (_OWORD *)((char *)v18 + 40);
        if (v18 == v19) {
          goto LABEL_99;
        }
      }
    }
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    uint64_t v86 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "BoutExtractor: Deferring bout processing. Bouts unavailable.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      uint64_t v87 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v87);
      if (v87 != (char *)buf) {
        free(v87);
      }
    }
  }
  unsigned __int8 v18 = v131;
  if (v131)
  {
LABEL_101:
    __int16 v132 = v18;
    operator delete(v18);
  }
  return v13;
}

void sub_100C7CF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C7CF7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = *a2 + 40;
    while (v6 != v5)
    {
      double v7 = *(double *)(v6 + 8);
      double v8 = *(double *)(v6 - 32);
      v6 += 40;
      if (v7 < v8)
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        uint64_t v9 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "BoutExtractor: Error, unsorted bouts.", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191F0 != -1) {
LABEL_35:
          }
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
LABEL_33:
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::WalkingBoutExtractor::updateBoundariesWithWorkouts(std::vector<BoutBoundary> &, const std::vector<HealthKitWorkout> &) const", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        goto LABEL_21;
      }
    }
  }
  int v10 = (double *)a3[1];
  if ((double *)*a3 != v10)
  {
    int v11 = (double *)(*a3 + 24);
    while (v11 != v10)
    {
      double v12 = *v11;
      double v13 = *(v11 - 3);
      v11 += 3;
      if (v12 < v13)
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        unint64_t v14 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "BoutExtractor: Error, unsorted workouts.", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          break;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          goto LABEL_35;
        }
        goto LABEL_33;
      }
    }
  }
LABEL_21:
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  if (*a3 != v16)
  {
    unint64_t v17 = 0;
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v19 = *a2 + 16;
    do
    {
      if (v17 < v18)
      {
        double v20 = *(double *)v15;
        uint64_t v21 = v19 + 40 * v17;
        do
        {
          double v22 = (*(double *)(v21 - 8) + *(double *)v21) * 0.5;
          if (v22 >= v20)
          {
            if (v22 > *(double *)(v15 + 8)) {
              goto LABEL_30;
            }
            *(_DWORD *)(v21 + 12) = *(_DWORD *)(v15 + 16);
          }
          ++v17;
          v21 += 40;
        }
        while (v18 != v17);
        unint64_t v17 = v18;
      }
LABEL_30:
      v15 += 24;
    }
    while (v15 != v16);
  }
}

void *sub_100C7D2CC@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  double v8 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 5);
    uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 4);
    *(_DWORD *)uint64_t buf = 134349824;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&unsigned char buf[24] = v11;
    LOWORD(v285) = 2050;
    *(void *)((char *)&v285 + 2) = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BoutExtractor: Evaluating Bout -- startTime,%{public}.2f,endTime,%{public}.2f,numberOfGaitMetrics,%{public}lu,numberOfStepCountEntries,%{public}lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    double v213 = *(double *)(a2 + 8);
    double v214 = *(double *)(a2 + 16);
    unint64_t v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 5);
    uint64_t v216 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 4);
    int v276 = 134349824;
    double v277 = v213;
    __int16 v278 = 2050;
    double v279 = v214;
    __int16 v280 = 2050;
    double v281 = *(double *)&v215;
    __int16 v282 = 2050;
    double v283 = *(double *)&v216;
    int v217 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v217);
    if (v217 != (char *)buf) {
      free(v217);
    }
  }
  *(_DWORD *)a5 = 0;
  *(_DWORD *)(a5 + 52) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 56) = xmmword_101D813B0;
  int64x2_t v13 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)(a5 + 72) = v13;
  *(int64x2_t *)(a5 + 88) = v13;
  *(void *)(a5 + 104) = 0xFFF0000000000000;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_DWORD *)(a5 + 208) = 1071225242;
  *(unsigned char *)(a5 + 212) = 0;
  *(_DWORD *)(a5 + 216) = 1116213084;
  *(unsigned char *)(a5 + 220) = 0;
  *(_OWORD *)(a5 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a5 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  BOOL v16 = v15 == *a3;
  *(_DWORD *)(a5 + 36) = -1431655765 * ((unint64_t)(v15 - *a3) >> 5);
  if (!v16)
  {
    *(_DWORD *)(a5 + 208) = *(_DWORD *)(v15 - 44);
    int v17 = *(unsigned __int8 *)(v15 - 40);
    *(unsigned char *)(a5 + 212) = v17;
    *(_DWORD *)(a5 + 216) = *(_DWORD *)(v15 - 36);
    int v18 = *(unsigned __int8 *)(v15 - 32);
    *(unsigned char *)(a5 + 220) = v18;
    if (*(unsigned __int8 *)(v14 + 56) != v17 || *(unsigned __int8 *)(v14 + 64) != v18)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      uint64_t v19 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "User setting changed mid bout... very weird", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        LOWORD(v276) = 0;
        int v218 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v218);
        if (v218 != (char *)buf) {
          free(v218);
        }
      }
    }
  }
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  if (v21 != *a3)
  {
    *(_DWORD *)(a5 + 208) = *(_DWORD *)(v21 - 44);
    int v22 = *(unsigned __int8 *)(v21 - 40);
    *(unsigned char *)(a5 + 212) = v22;
    *(_DWORD *)(a5 + 216) = *(_DWORD *)(v21 - 36);
    int v23 = *(unsigned __int8 *)(v21 - 32);
    *(unsigned char *)(a5 + 220) = v23;
    if (*(unsigned __int8 *)(v20 + 56) != v22 || *(unsigned __int8 *)(v20 + 64) != v23)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      double v24 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = a3[1];
        double v26 = *(float *)(*a3 + 52);
        double v27 = *(float *)(*a3 + 60);
        double v28 = *(float *)(v25 - 44);
        double v29 = *(float *)(v25 - 36);
        *(_DWORD *)uint64_t buf = 134284289;
        *(double *)&uint8_t buf[4] = v26;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&buf[14] = v27;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&unsigned char buf[24] = v28;
        LOWORD(v285) = 2049;
        *(double *)((char *)&v285 + 2) = v29;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "User body metric setting changed mid bout from userHeight,%{private}.2f, userWeight,%{private}.2f to userHeight,%{private}.2f, userWeight,%{private}.2f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        uint64_t v219 = a3[1];
        double v220 = *(float *)(*a3 + 52);
        double v221 = *(float *)(*a3 + 60);
        double v222 = *(float *)(v219 - 44);
        double v223 = *(float *)(v219 - 36);
        int v276 = 134284289;
        double v277 = v220;
        __int16 v278 = 2049;
        double v279 = v221;
        __int16 v280 = 2049;
        double v281 = v222;
        __int16 v282 = 2049;
        double v283 = v223;
        uint64_t v224 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v224);
        if (v224 != (char *)buf) {
          free(v224);
        }
      }
    }
  }
  if (*(_DWORD *)(a5 + 24))
  {
    int v235 = 0;
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    float v30 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = *(void *)(a2 + 8);
      int v32 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding bout (%{public}.2f) due to insufficient steps: %u", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      double v225 = *(double *)(a2 + 8);
      int v226 = *(_DWORD *)(a2 + 24);
      int v276 = 134349312;
      double v277 = v225;
      __int16 v278 = 1024;
      LODWORD(v279) = v226;
      int v227 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v227);
      if (v227 != (char *)buf) {
        free(v227);
      }
    }
    int v235 = 1;
  }
  uint64_t v33 = sub_1006AE7FC((uint64_t)&v276);
  int v236 = a3;
  uint64_t v34 = *a4;
  uint64_t v35 = a4[1];
  if (*a4 == v35) {
    goto LABEL_47;
  }
  int v36 = 0;
  int v37 = 0;
  do
  {
    long long v285 = 0u;
    long long v286 = 0u;
    memset(buf, 0, sizeof(buf));
    DWORD2(v285) = 1000;
    LODWORD(v286) = -1082130432;
    *(void *)&uint8_t buf[8] = *(void *)(v34 + 8);
    *(void *)&uint8_t buf[16] = *(void *)(v34 + 156);
    DWORD2(v285) = 0;
    uint64_t v33 = sub_1000A026C((uint64_t)&v276, (long long *)buf, (long long *)__p);
    if (v33)
    {
      if (fabs(v275) > 0.0001)
      {
        double v38 = *(double *)(v34 + 72);
        if (fabs(v38) > 0.0001)
        {
          ++v37;
          double v39 = v275 * v38 * 100.0;
          int v40 = v39 < -5.0;
          if (v39 > 5.0) {
            int v40 = 1;
          }
          v36 += v40;
        }
      }
    }
    v34 += 176;
  }
  while (v34 != v35);
  if (v37 <= 0)
  {
LABEL_47:
    *(void *)(a5 + 40) = 0;
    goto LABEL_48;
  }
  double v41 = (double)v36 / (double)v37 * 100.0;
  *(double *)(a5 + 40) = v41;
  if (v41 <= 50.0)
  {
LABEL_48:
    BOOL v43 = v236;
    goto LABEL_49;
  }
  double v42 = (double)v37 / (double)(unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 4));
  BOOL v43 = v236;
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  double v44 = v42 * 100.0;
  BOOL v45 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v46 = *(void *)(a2 + 8);
    uint64_t v47 = *(void *)(a5 + 40);
    *(_DWORD *)uint64_t buf = 134349568;
    *(void *)&uint8_t buf[4] = v46;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v47;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&unsigned char buf[24] = v44;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "BoutExtractor: Discarding bout (%{public}.2f) due to too much invalid grade. invalidGradePct,%{public}.2f%%,gradeAvailability,%{public}.2f%%", buf, 0x20u);
  }
  uint64_t v33 = sub_10013D1A0(115, 2);
  if (v33)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    double v231 = *(void **)(a2 + 8);
    double v232 = *(void **)(a5 + 40);
    LODWORD(__p[0]) = 134349568;
    *(void **)((char *)__p + 4) = v231;
    WORD2(__p[1]) = 2050;
    *(void **)((char *)&__p[1] + 6) = v232;
    HIWORD(__p[2]) = 2050;
    __p[3] = *(void **)&v44;
    double v233 = (char *)_os_log_send_and_compose_impl();
    uint64_t v33 = sub_1004BA5E4("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v233);
    if (v233 != (char *)buf) {
      free(v233);
    }
    BOOL v43 = v236;
  }
  v235 |= 4u;
LABEL_49:
  unsigned int v48 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a5 + 28) = v48;
  if (v48 > 0x34 || ((1 << v48) & 0x10002001000001) == 0)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    uint64_t v210 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
    {
      uint64_t v211 = *(void *)(a2 + 8);
      int v212 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v211;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v212;
      _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding bout (%{public}.2f) due to ineligible workout type: %u", buf, 0x12u);
    }
    uint64_t v33 = sub_10013D1A0(115, 2);
    if (v33)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      int v228 = *(void **)(a2 + 8);
      int v229 = *(_DWORD *)(a2 + 28);
      LODWORD(__p[0]) = 134349312;
      *(void **)((char *)__p + 4) = v228;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v229;
      double v230 = (char *)_os_log_send_and_compose_impl();
      uint64_t v33 = sub_1004BA5E4("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v230);
      if (v230 != (char *)buf) {
        free(v230);
      }
      BOOL v43 = v236;
    }
    v235 |= 8u;
  }
  memset(__p, 0, 24);
  double v269 = 0;
  double v270 = 0;
  v271 = 0;
  double v266 = 0;
  v267 = 0;
  v268 = 0;
  v263 = 0;
  v264 = 0;
  float v265 = 0;
  long long v260 = 0;
  long long v261 = 0;
  size_t v262 = 0;
  unsigned int v257 = 0;
  unsigned int v258 = 0;
  long long v259 = 0;
  int v254 = 0;
  int v255 = 0;
  int v256 = 0;
  float v251 = 0;
  double v252 = 0;
  v253 = 0;
  float v248 = 0;
  float v249 = 0;
  float v250 = 0;
  int v245 = 0;
  float v246 = 0;
  float v247 = 0;
  float v242 = 0;
  float v243 = 0;
  uint64_t v244 = 0;
  uint64_t v239 = 0;
  uint64_t v240 = 0;
  double v241 = 0;
  uint64_t v49 = *v43;
  uint64_t v238 = v43[1];
  if (*v43 != v238)
  {
    unint64_t v50 = 0;
    size_t v51 = 0;
    __int16 v52 = 0;
    do
    {
      float v53 = *(float *)(v49 + 24);
      if (v53 > 0.0)
      {
        unint64_t v54 = (char *)__p[1];
        if (__p[1] >= __p[2])
        {
          uint64_t v33 = (uint64_t)__p[0];
          int64_t v56 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            goto LABEL_366;
          }
          int64_t v58 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            long long v60 = (char *)sub_10017EA34((uint64_t)&__p[2], v59);
            uint64_t v33 = (uint64_t)__p[0];
            unint64_t v54 = (char *)__p[1];
            float v53 = *(float *)(v49 + 24);
          }
          else
          {
            long long v60 = 0;
          }
          long long v61 = (float *)&v60[4 * v56];
          *long long v61 = v53;
          unint64_t v55 = v61 + 1;
          while (v54 != (char *)v33)
          {
            int v62 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *((_DWORD *)v61-- - 1) = v62;
          }
          __p[0] = v61;
          __p[1] = v55;
          __p[2] = &v60[4 * v59];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *(float *)__p[1] = v53;
          unint64_t v55 = v54 + 4;
        }
        __p[1] = v55;
        double v63 = v255;
        if (v255 >= v256)
        {
          uint64_t v33 = (uint64_t)v254;
          uint64_t v65 = ((char *)v255 - (unsigned char *)v254) >> 2;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v67 = (char *)v256 - (unsigned char *)v254;
          if (((char *)v256 - (unsigned char *)v254) >> 1 > v66) {
            unint64_t v66 = v67 >> 1;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v66;
          }
          if (v68)
          {
            long long v69 = (char *)sub_10017EA34((uint64_t)&v256, v68);
            uint64_t v33 = (uint64_t)v254;
            double v63 = v255;
          }
          else
          {
            long long v69 = 0;
          }
          long long v70 = &v69[4 * v65];
          *(_DWORD *)long long v70 = *(_DWORD *)(v49 + 68);
          __int16 v64 = (float *)(v70 + 4);
          while (v63 != (float *)v33)
          {
            int v71 = *((_DWORD *)v63-- - 1);
            *((_DWORD *)v70 - 1) = v71;
            v70 -= 4;
          }
          int v254 = v70;
          int v255 = v64;
          int v256 = (float *)&v69[4 * v68];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *int v255 = *(float *)(v49 + 68);
          __int16 v64 = v63 + 1;
        }
        int v255 = v64;
        long long v72 = v252;
        if (v252 >= v253)
        {
          uint64_t v33 = (uint64_t)v251;
          uint64_t v74 = ((char *)v252 - (unsigned char *)v251) >> 2;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v76 = (char *)v253 - (unsigned char *)v251;
          if (((char *)v253 - (unsigned char *)v251) >> 1 > v75) {
            unint64_t v75 = v76 >> 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            uint64_t v78 = (char *)sub_10017EA34((uint64_t)&v253, v77);
            uint64_t v33 = (uint64_t)v251;
            long long v72 = v252;
          }
          else
          {
            uint64_t v78 = 0;
          }
          int v79 = &v78[4 * v74];
          *(_DWORD *)int v79 = *(_DWORD *)(v49 + 72);
          long long v73 = (float *)(v79 + 4);
          while (v72 != (float *)v33)
          {
            int v80 = *((_DWORD *)v72-- - 1);
            *((_DWORD *)v79 - 1) = v80;
            v79 -= 4;
          }
          float v251 = v79;
          double v252 = v73;
          v253 = (float *)&v78[4 * v77];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *double v252 = *(float *)(v49 + 72);
          long long v73 = v72 + 1;
        }
        double v252 = v73;
        BOOL v81 = v249;
        if (v249 >= v250)
        {
          uint64_t v33 = (uint64_t)v248;
          uint64_t v83 = ((char *)v249 - (unsigned char *)v248) >> 2;
          unint64_t v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v85 = (char *)v250 - (unsigned char *)v248;
          if (((char *)v250 - (unsigned char *)v248) >> 1 > v84) {
            unint64_t v84 = v85 >> 1;
          }
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v84;
          }
          if (v86)
          {
            uint64_t v87 = (char *)sub_10017EA34((uint64_t)&v250, v86);
            uint64_t v33 = (uint64_t)v248;
            BOOL v81 = v249;
          }
          else
          {
            uint64_t v87 = 0;
          }
          uint64_t v88 = &v87[4 * v83];
          *(_DWORD *)uint64_t v88 = *(_DWORD *)(v49 + 76);
          BOOL v82 = (float *)(v88 + 4);
          while (v81 != (float *)v33)
          {
            int v89 = *((_DWORD *)v81-- - 1);
            *((_DWORD *)v88 - 1) = v89;
            v88 -= 4;
          }
          float v248 = v88;
          float v249 = v82;
          float v250 = (float *)&v87[4 * v86];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *float v249 = *(float *)(v49 + 76);
          BOOL v82 = v81 + 1;
        }
        float v249 = v82;
        uint64_t v90 = v246;
        if (v246 >= v247)
        {
          uint64_t v33 = (uint64_t)v245;
          uint64_t v92 = ((char *)v246 - (unsigned char *)v245) >> 2;
          unint64_t v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v94 = (char *)v247 - (unsigned char *)v245;
          if (((char *)v247 - (unsigned char *)v245) >> 1 > v93) {
            unint64_t v93 = v94 >> 1;
          }
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v95 = v93;
          }
          if (v95)
          {
            std::string::size_type v96 = (char *)sub_10017EA34((uint64_t)&v247, v95);
            uint64_t v33 = (uint64_t)v245;
            uint64_t v90 = v246;
          }
          else
          {
            std::string::size_type v96 = 0;
          }
          int v97 = &v96[4 * v92];
          *(_DWORD *)int v97 = *(_DWORD *)(v49 + 80);
          uint64_t v91 = (float *)(v97 + 4);
          while (v90 != (float *)v33)
          {
            int v98 = *((_DWORD *)v90-- - 1);
            *((_DWORD *)v97 - 1) = v98;
            v97 -= 4;
          }
          int v245 = v97;
          float v246 = v91;
          float v247 = (float *)&v96[4 * v95];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *float v246 = *(float *)(v49 + 80);
          uint64_t v91 = v90 + 1;
        }
        float v246 = v91;
        int v99 = v243;
        if (v243 >= v244)
        {
          uint64_t v33 = (uint64_t)v242;
          uint64_t v101 = ((char *)v243 - (unsigned char *)v242) >> 2;
          unint64_t v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v103 = (char *)v244 - (unsigned char *)v242;
          if (((char *)v244 - (unsigned char *)v242) >> 1 > v102) {
            unint64_t v102 = v103 >> 1;
          }
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v104 = v102;
          }
          if (v104)
          {
            int v105 = (char *)sub_10017EA34((uint64_t)&v244, v104);
            uint64_t v33 = (uint64_t)v242;
            int v99 = v243;
          }
          else
          {
            int v105 = 0;
          }
          int v106 = &v105[4 * v101];
          *(_DWORD *)int v106 = *(_DWORD *)(v49 + 84);
          uint64_t v100 = (float *)(v106 + 4);
          while (v99 != (float *)v33)
          {
            int v107 = *((_DWORD *)v99-- - 1);
            *((_DWORD *)v106 - 1) = v107;
            v106 -= 4;
          }
          float v242 = v106;
          float v243 = v100;
          uint64_t v244 = (float *)&v105[4 * v104];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *float v243 = *(float *)(v49 + 84);
          uint64_t v100 = v99 + 1;
        }
        float v243 = v100;
        int v108 = v240;
        if (v240 >= v241)
        {
          uint64_t v33 = (uint64_t)v239;
          uint64_t v110 = v240 - v239;
          unint64_t v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v112 = (char *)v241 - (char *)v239;
          if (((char *)v241 - (char *)v239) >> 1 > v111) {
            unint64_t v111 = v112 >> 1;
          }
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v113 = v111;
          }
          if (v113)
          {
            char v114 = (char *)sub_10017EA34((uint64_t)&v241, v113);
            uint64_t v33 = (uint64_t)v239;
            int v108 = v240;
          }
          else
          {
            char v114 = 0;
          }
          __int16 v115 = &v114[4 * v110];
          *(_DWORD *)__int16 v115 = *(_DWORD *)(v49 + 88);
          int v109 = (float *)(v115 + 4);
          while (v108 != (float *)v33)
          {
            int v116 = *((_DWORD *)v108-- - 1);
            *((_DWORD *)v115 - 1) = v116;
            v115 -= 4;
          }
          uint64_t v239 = (float *)v115;
          double v241 = (float *)&v114[4 * v113];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *uint64_t v240 = *(float *)(v49 + 88);
          int v109 = v240 + 1;
        }
        uint64_t v240 = v109;
        float v117 = *(float *)(v49 + 48);
        if (v117 > 0.0)
        {
          long long v118 = v258;
          if (v258 >= v259)
          {
            uint64_t v33 = (uint64_t)v257;
            uint64_t v120 = ((char *)v258 - (unsigned char *)v257) >> 2;
            unint64_t v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62) {
              goto LABEL_366;
            }
            uint64_t v122 = (char *)v259 - (unsigned char *)v257;
            if (((char *)v259 - (unsigned char *)v257) >> 1 > v121) {
              unint64_t v121 = v122 >> 1;
            }
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v121;
            }
            if (v123)
            {
              uint64_t v124 = (char *)sub_10017EA34((uint64_t)&v259, v123);
              uint64_t v33 = (uint64_t)v257;
              long long v118 = v258;
              float v117 = *(float *)(v49 + 48);
            }
            else
            {
              uint64_t v124 = 0;
            }
            uint64_t v125 = (float *)&v124[4 * v120];
            float *v125 = v117;
            long long v119 = v125 + 1;
            while (v118 != (float *)v33)
            {
              int v126 = *((_DWORD *)v118-- - 1);
              *((_DWORD *)v125-- - 1) = v126;
            }
            unsigned int v257 = v125;
            unsigned int v258 = v119;
            long long v259 = (float *)&v124[4 * v123];
            if (v33) {
              operator delete((void *)v33);
            }
          }
          else
          {
            *unsigned int v258 = v117;
            long long v119 = v118 + 1;
          }
          unsigned int v258 = v119;
        }
      }
      float v127 = *(float *)(v49 + 28);
      if (v127 > 0.0 && *(float *)(v49 + 36) <= 0.75)
      {
        long long v129 = v270;
        if (v270 >= v271)
        {
          uint64_t v33 = (uint64_t)v269;
          uint64_t v131 = ((char *)v270 - (unsigned char *)v269) >> 2;
          unint64_t v132 = v131 + 1;
          if ((unint64_t)(v131 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v133 = (char *)v271 - (unsigned char *)v269;
          if (((char *)v271 - (unsigned char *)v269) >> 1 > v132) {
            unint64_t v132 = v133 >> 1;
          }
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v134 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v134 = v132;
          }
          if (v134)
          {
            int v135 = (char *)sub_10017EA34((uint64_t)&v271, v134);
            uint64_t v33 = (uint64_t)v269;
            long long v129 = v270;
            float v127 = *(float *)(v49 + 28);
          }
          else
          {
            int v135 = 0;
          }
          __int16 v136 = (float *)&v135[4 * v131];
          float *v136 = v127;
          uint64_t v130 = v136 + 1;
          while (v129 != (float *)v33)
          {
            int v137 = *((_DWORD *)v129-- - 1);
            *((_DWORD *)v136-- - 1) = v137;
          }
          double v269 = v136;
          double v270 = v130;
          v271 = (float *)&v135[4 * v134];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          *double v270 = v127;
          uint64_t v130 = v129 + 1;
        }
        double v270 = v130;
      }
      float v138 = *(float *)(v49 + 32);
      if (v138 > 0.0)
      {
        BOOL v139 = v267;
        if (v267 >= v268)
        {
          uint64_t v33 = (uint64_t)v266;
          uint64_t v141 = ((char *)v267 - (unsigned char *)v266) >> 2;
          unint64_t v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 62) {
            goto LABEL_366;
          }
          uint64_t v143 = (char *)v268 - (unsigned char *)v266;
          if (((char *)v268 - (unsigned char *)v266) >> 1 > v142) {
            unint64_t v142 = v143 >> 1;
          }
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v142;
          }
          if (v144)
          {
            uint64_t v145 = (char *)sub_10017EA34((uint64_t)&v268, v144);
            uint64_t v33 = (uint64_t)v266;
            BOOL v139 = v267;
            float v138 = *(float *)(v49 + 32);
          }
          else
          {
            uint64_t v145 = 0;
          }
          __int16 v146 = (float *)&v145[4 * v141];
          *__int16 v146 = v138;
          __int16 v140 = v146 + 1;
          while (v139 != (float *)v33)
          {
            int v147 = *((_DWORD *)v139-- - 1);
            *((_DWORD *)v146-- - 1) = v147;
          }
          double v266 = v146;
          v267 = v140;
          v268 = (float *)&v145[4 * v144];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          float *v267 = v138;
          __int16 v140 = v139 + 1;
        }
        v267 = v140;
      }
      float v148 = *(float *)(v49 + 36);
      if (v148 > 0.0)
      {
        double v149 = v264;
        if (v264 >= v265)
        {
          uint64_t v33 = (uint64_t)v263;
          uint64_t v151 = ((char *)v264 - (unsigned char *)v263) >> 2;
          unint64_t v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62) {
LABEL_366:
          }
            sub_1001D7FD4();
          uint64_t v153 = (char *)v265 - (unsigned char *)v263;
          if (((char *)v265 - (unsigned char *)v263) >> 1 > v152) {
            unint64_t v152 = v153 >> 1;
          }
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v154 = v152;
          }
          if (v154)
          {
            int v155 = (char *)sub_10017EA34((uint64_t)&v265, v154);
            uint64_t v33 = (uint64_t)v263;
            double v149 = v264;
            float v148 = *(float *)(v49 + 36);
          }
          else
          {
            int v155 = 0;
          }
          __int16 v156 = (float *)&v155[4 * v151];
          *__int16 v156 = v148;
          __int16 v150 = v156 + 1;
          while (v149 != (float *)v33)
          {
            int v157 = *((_DWORD *)v149-- - 1);
            *((_DWORD *)v156-- - 1) = v157;
          }
          v263 = v156;
          v264 = v150;
          float v265 = (float *)&v155[4 * v154];
          if (v33) {
            operator delete((void *)v33);
          }
        }
        else
        {
          float *v264 = v148;
          __int16 v150 = v149 + 1;
        }
        v264 = v150;
        if ((unint64_t)v52 >= v51)
        {
          double v159 = &v52[-v50];
          uint64_t v160 = (uint64_t)&v52[-v50 + 1];
          if (v160 < 0) {
            sub_1001D7FD4();
          }
          if (2 * (v51 - v50) > v160) {
            uint64_t v160 = 2 * (v51 - v50);
          }
          if (v51 - v50 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v161 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v161 = v160;
          }
          if (v161) {
            uint64_t v33 = (uint64_t)operator new(v161);
          }
          else {
            uint64_t v33 = 0;
          }
          __int16 v162 = &v159[v33];
          double v163 = &v159[v33];
          *double v163 = *(unsigned char *)(v49 + 40);
          __int16 v158 = v163 + 1;
          if (v52 != (unsigned char *)v50)
          {
            __int16 v164 = &v52[~v50];
            do
            {
              char v165 = *--v52;
              (v164--)[v33] = v165;
            }
            while (v52 != (unsigned char *)v50);
            __int16 v162 = (unsigned char *)v33;
          }
          size_t v51 = v33 + v161;
          long long v260 = v162;
          long long v261 = v158;
          size_t v262 = v33 + v161;
          if (v50) {
            operator delete((void *)v50);
          }
          unint64_t v50 = (unint64_t)v162;
          BOOL v43 = v236;
        }
        else
        {
          *__int16 v52 = *(unsigned char *)(v49 + 40);
          __int16 v158 = v52 + 1;
        }
        long long v261 = v158;
        __int16 v52 = v158;
      }
      double v166 = *(double *)(v49 + 8);
      if (v166 != *(double *)(*v43 + 8))
      {
        LODWORD(v166) = *(_DWORD *)(v49 + 41);
        uint16x4_t v167 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)&v166).u64[0];
        *(uint32x4_t *)(a5 + 168) = vaddw_u16(*(uint32x4_t *)(a5 + 168), v167);
        int v168 = *(_DWORD *)(a5 + 188);
        *(_DWORD *)(a5 + 184) += *(unsigned __int8 *)(v49 + 45);
        *(_DWORD *)(a5 + 188) = v168 + *(unsigned __int8 *)(v49 + 46);
        if (v167.i8[4] == -1
          || *(unsigned __int8 *)(v49 + 44) == 255
          || *(unsigned __int8 *)(v49 + 42) == 255
          || *(unsigned __int8 *)(v49 + 41) == 255
          || *(unsigned __int8 *)(v49 + 45) == 255
          || *(unsigned __int8 *)(v49 + 46) == 255)
        {
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
          }
          int v169 = qword_1024191F8;
          if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v170 = *(void *)(a2 + 8);
            *(_DWORD *)uint64_t buf = 134349056;
            *(void *)&uint8_t buf[4] = v170;
            _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "#warning One or more of GaitMetrics rejection counters hit capacity, Bout (%{public}.2f) segment rejection will undercount", buf, 0xCu);
          }
          uint64_t v33 = sub_10013D1A0(115, 2);
          if (v33)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191F0 != -1) {
              dispatch_once(&qword_1024191F0, &stru_1022F0488);
            }
            uint64_t v171 = *(void *)(a2 + 8);
            int v272 = 134349056;
            uint64_t v273 = v171;
            long long v172 = (char *)_os_log_send_and_compose_impl();
            uint64_t v33 = sub_1004BA5E4("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v172);
            if (v172 != (char *)buf) {
              free(v172);
            }
          }
        }
      }
      v49 += 96;
    }
    while (v49 != v238);
  }
  int v173 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a5 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a5 + 52) = v173;
  *(unsigned char *)(a5 + 48) = sub_100C7EF74(v33, &v260);
  long long v174 = (float *)v257;
  float v175 = 0.0;
  float v176 = 0.0;
  if (v258 != v257)
  {
    do
    {
      float v177 = *v174++;
      float v176 = v176 + v177;
    }
    while (v174 != v258);
    float v176 = v176 / (float)(unint64_t)(((char *)v258 - (unsigned char *)v257) >> 2);
  }
  *(double *)(a5 + 56) = v176;
  long long v178 = (float *)v254;
  if (v255 != v254)
  {
    float v179 = 0.0;
    do
    {
      float v180 = *v178++;
      float v179 = v179 + v180;
    }
    while (v178 != v255);
    float v175 = v179 / (float)(unint64_t)(((char *)v255 - (unsigned char *)v254) >> 2);
  }
  *(float *)(a5 + 144) = v175;
  int v181 = (float *)v251;
  float v182 = 0.0;
  float v183 = 0.0;
  if (v252 != v251)
  {
    do
    {
      float v184 = *v181++;
      float v183 = v183 + v184;
    }
    while (v181 != v252);
    float v183 = v183 / (float)(unint64_t)(((char *)v252 - (unsigned char *)v251) >> 2);
  }
  *(float *)(a5 + 148) = v183;
  float v185 = (float *)v248;
  if (v249 != v248)
  {
    float v186 = 0.0;
    do
    {
      float v187 = *v185++;
      float v186 = v186 + v187;
    }
    while (v185 != v249);
    float v182 = v186 / (float)(unint64_t)(((char *)v249 - (unsigned char *)v248) >> 2);
  }
  *(float *)(a5 + 152) = v182;
  char v188 = (float *)v245;
  float v189 = 0.0;
  float v190 = 0.0;
  if (v246 != v245)
  {
    do
    {
      float v191 = *v188++;
      float v190 = v190 + v191;
    }
    while (v188 != v246);
    float v190 = v190 / (float)(unint64_t)(((char *)v246 - (unsigned char *)v245) >> 2);
  }
  *(float *)(a5 + 156) = v190;
  uint64_t v192 = (float *)v242;
  if (v243 != v242)
  {
    float v193 = 0.0;
    do
    {
      float v194 = *v192++;
      float v193 = v193 + v194;
    }
    while (v192 != v243);
    float v189 = v193 / (float)(unint64_t)(((char *)v243 - (unsigned char *)v242) >> 2);
  }
  *(float *)(a5 + 160) = v189;
  double v195 = v239;
  if (v240 == v239)
  {
    float v198 = 0.0;
  }
  else
  {
    float v196 = 0.0;
    do
    {
      float v197 = *v195++;
      float v196 = v196 + v197;
    }
    while (v195 != v240);
    float v198 = v196 / (float)(unint64_t)(v240 - v239);
  }
  *(float *)(a5 + 164) = v198;
  *(void *)(a5 + 112) = sub_100C7F220(a1, 0, (float **)__p, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 192) = v235 | v199;
  *(void *)(a5 + 120) = sub_100C7F220(a1, 1u, (float **)&v269, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 196) = v235 | v200;
  *(void *)(a5 + 128) = sub_100C7F220(a1, 2u, (float **)&v266, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 200) = v235 | v201;
  uint64_t v202 = sub_100C7F220(a1, 3u, (float **)&v263, *(_DWORD *)(a5 + 24));
  *(void *)(a5 + 136) = v202;
  *(_DWORD *)(a5 + 204) = v235 | v203;
  *(double *)(a5 + 72) = sub_100C7FB20(v202, (float **)&v266);
  *(void *)(a5 + 80) = v204;
  *(double *)(a5 + 96) = sub_100C7FB20(v205, (float **)&v257);
  *(void *)(a5 + 104) = v206;
  *(double *)(a5 + 64) = sub_100C7FF98(0.025, v207, (uint64_t *)&v266);
  *(double *)(a5 + 88) = sub_100C7FF98(0.05, v208, (uint64_t *)&v257);
  if (v239) {
    operator delete(v239);
  }
  if (v242)
  {
    float v243 = (float *)v242;
    operator delete(v242);
  }
  if (v245)
  {
    float v246 = (float *)v245;
    operator delete(v245);
  }
  if (v248)
  {
    float v249 = (float *)v248;
    operator delete(v248);
  }
  if (v251)
  {
    double v252 = (float *)v251;
    operator delete(v251);
  }
  if (v254)
  {
    int v255 = (float *)v254;
    operator delete(v254);
  }
  if (v257)
  {
    unsigned int v258 = (float *)v257;
    operator delete(v257);
  }
  if (v260) {
    operator delete(v260);
  }
  if (v263)
  {
    v264 = (float *)v263;
    operator delete(v263);
  }
  if (v266)
  {
    v267 = (float *)v266;
    operator delete(v266);
  }
  if (v269)
  {
    double v270 = (float *)v269;
    operator delete(v269);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return sub_1006ABD84(&v276);
}

void sub_100C7EE54(_Unwind_Exception *a1)
{
}

uint64_t sub_100C7EF74(uint64_t a1, void *a2)
{
  int v3 = (unsigned __int8 *)*a2;
  uint64_t v2 = (unsigned __int8 *)a2[1];
  unint64_t v4 = (unint64_t)&v2[-*a2];
  if (v2 == (unsigned __int8 *)*a2) {
    return 0;
  }
  int v5 = 0;
  int v6 = 0;
  do
  {
    int v8 = *v3++;
    int v7 = v8;
    if (v8 == 1) {
      int v9 = v5 + 1;
    }
    else {
      int v9 = v5;
    }
    if (v7 == 2) {
      ++v6;
    }
    else {
      int v5 = v9;
    }
  }
  while (v3 != v2);
  double v10 = (double)v5 / (double)v4;
  double v11 = (double)v6 / (double)v4;
  if (v10 >= 0.666666667) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2 * (v11 >= 0.666666667);
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022F0488);
  }
  int64x2_t v13 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    sub_101136D08(v12, &__p);
    uint64_t v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)uint64_t buf = 136315650;
    int v22 = v14;
    __int16 v23 = 2048;
    double v24 = v10;
    __int16 v25 = 2048;
    double v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Bout DeviceSide: %s (left=%.4f, right=%.4f)", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    sub_101136D08(v12, &v18);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v18;
    }
    else {
      uint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v10;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    double v20 = v11;
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "DeviceSide CLMobility::WalkingBoutExtractor::calculateBoutSidedness(const std::vector<DeviceSide> &) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return v12;
}

uint64_t sub_100C7F220(_OWORD *a1, unsigned int a2, float **a3, int a4)
{
  int v6 = *a3;
  int v5 = a3[1];
  uint64_t v7 = v5 - *a3;
  if (v7)
  {
    switch(a2)
    {
      case 0u:
        float v11 = 0.0;
        if (v5 == v6) {
          goto LABEL_32;
        }
        do
        {
          float v12 = *v6++;
          float v11 = v11 + v12;
        }
        while (v6 != v5);
        goto LABEL_31;
      case 1u:
        float v18 = 0.0;
        if (v5 != v6)
        {
          do
          {
            float v19 = *v6++;
            float v18 = v18 + v19;
          }
          while (v6 != v5);
          float v18 = v18 / (float)(unint64_t)v7;
        }
        double v20 = v18;
        double v21 = 0.1;
        goto LABEL_33;
      case 2u:
        float v11 = 0.0;
        if (v5 != v6)
        {
          do
          {
            float v22 = *v6++;
            float v11 = v11 + v22;
          }
          while (v6 != v5);
LABEL_31:
          float v11 = v11 / (float)(unint64_t)v7;
        }
LABEL_32:
        double v20 = v11;
        double v21 = 0.01;
LABEL_33:
        double v15 = sub_100CAFB50(v20, v21);
        goto LABEL_34;
      case 3u:
        if (v6 == v5)
        {
          uint64_t v24 = 0;
        }
        else
        {
          uint64_t v24 = 0;
          do
          {
            float v25 = *v6++;
            if (v25 > 0.65) {
              ++v24;
            }
          }
          while (v6 != v5);
        }
        double v15 = sub_100CAFB50((float)((float)((float)v24 / (float)(unint64_t)v7) * 100.0), 1.0);
        int v23 = 10;
        goto LABEL_43;
      default:
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022F0488);
        }
        BOOL v16 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Unexpected CLMobility::QuantityTypeIdentifier %d", (uint8_t *)&__p, 8u);
        }
        double v15 = 0.0;
        if (sub_10013D1A0(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
          int v17 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", (const char *)v17);
          if (v17 != &__p) {
            free(v17);
          }
        }
LABEL_34:
        int v23 = 2;
LABEL_43:
        if (v23 > (int)v7)
        {
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1022F0488);
          }
          double v26 = qword_1024191F8;
          if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
          {
            sub_101136C9C(a2, &buf);
            double v27 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &buf
                : (std::string *)buf.__r_.__value_.__r.__words[0];
            uint64_t v28 = a3[1] - *a3;
            LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v28;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
            int v47 = v23;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding %s due to insufficient gait metrics (%{public}lu/%{public}d)", (uint8_t *)&__p, 0x1Cu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1024191F0 != -1) {
              dispatch_once(&qword_1024191F0, &stru_1022F0488);
            }
            sub_101136C9C(a2, &v43);
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v36 = &v43;
            }
            else {
              int v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
            }
            uint64_t v37 = a3[1] - *a3;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v37;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
            int v45 = v23;
            double v38 = (std::string *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v43.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", (const char *)v38);
            if (v38 != &__p) {
              free(v38);
            }
          }
        }
        if (a4 >= 1)
        {
          double v29 = ((double)(int)v7 + (double)(int)v7) / (double)a4;
          if (v29 < 0.5)
          {
            if (qword_1024191F0 != -1) {
              dispatch_once(&qword_1024191F0, &stru_1022F0488);
            }
            float v30 = qword_1024191F8;
            if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
            {
              sub_101136C9C(a2, &__p);
              uint64_t v31 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
              *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v29;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding (%{public}s) due to insufficient gait metrics yield: %{public}.4f", (uint8_t *)&buf, 0x16u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_1024191F0 != -1) {
                dispatch_once(&qword_1024191F0, &stru_1022F0488);
              }
              sub_101136C9C(a2, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string buf = &buf;
              }
              else {
                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v43.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
              WORD2(v43.__r_.__value_.__r.__words[1]) = 2050;
              *(double *)((char *)&v43.__r_.__value_.__r.__words[1] + 6) = v29;
              int v40 = (std::string *)_os_log_send_and_compose_impl();
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", (const char *)v40);
              if (v40 != &__p) {
                free(v40);
              }
            }
          }
        }
        *(_OWORD *)&unsigned char v42[12] = a1[38];
        long long v32 = *(_OWORD *)((char *)a1 + 580);
        v41[0] = *(_OWORD *)((char *)a1 + 564);
        v41[1] = v32;
        *(_OWORD *)double v42 = *(_OWORD *)((char *)a1 + 596);
        sub_101137174((uint64_t)v41, a2, v15);
        break;
    }
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    int64x2_t v13 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
    {
      sub_101136C9C(a2, &__p);
      uint64_t v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding %s due to no gait metrics", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    double v15 = 0.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      sub_101136C9C(a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &buf;
      }
      else {
        uint64_t v34 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v43.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
      uint64_t v35 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", (const char *)v35);
      if (v35 != &__p) {
        free(v35);
      }
    }
  }
  return *(void *)&v15;
}

double sub_100C7FB20(uint64_t a1, float **a2)
{
  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if ((unint64_t)v3 > 0x53)
  {
    long long buf = 0uLL;
    double v39 = 0;
    long long __p = 0uLL;
    uint64_t v37 = 0;
    sub_10017C3FC((void **)&buf, v3 >> 2);
    sub_10017C3FC((void **)&__p, a2[1] - *a2);
    uint64_t v7 = *a2;
    if ((char *)a2[1] - (char *)*a2 != 4)
    {
      unint64_t v8 = 0;
      double v9 = *v7 * 0.707106781;
      do
      {
        double v10 = v9;
        double v9 = v7[++v8] * 0.707106781;
        double v11 = v10 - v9;
        float v12 = (char *)*((void *)&buf + 1);
        if (*((void *)&buf + 1) >= (unint64_t)v39)
        {
          uint64_t v14 = (char *)buf;
          uint64_t v15 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v17 = (uint64_t)&v39[-buf];
          if ((uint64_t)&v39[-buf] >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            float v19 = (char *)sub_1000DA54C((uint64_t)&v39, v18);
            float v12 = (char *)*((void *)&buf + 1);
            uint64_t v14 = (char *)buf;
          }
          else
          {
            float v19 = 0;
          }
          double v20 = (double *)&v19[8 * v15];
          *double v20 = v11;
          int64x2_t v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v20-- - 1) = v21;
          }
          *(void *)&long long buf = v20;
          *((void *)&buf + 1) = v13;
          double v39 = &v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          **((double **)&buf + 1) = v11;
          int64x2_t v13 = (double *)(v12 + 8);
        }
        *((void *)&buf + 1) = v13;
        double v22 = v10 + v9;
        int v23 = (char *)*((void *)&__p + 1);
        if (*((void *)&__p + 1) >= (unint64_t)v37)
        {
          float v25 = (char *)__p;
          uint64_t v26 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v28 = (uint64_t)&v37[-__p];
          if ((uint64_t)&v37[-__p] >> 2 > v27) {
            unint64_t v27 = v28 >> 2;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            float v30 = (char *)sub_1000DA54C((uint64_t)&v37, v29);
            int v23 = (char *)*((void *)&__p + 1);
            float v25 = (char *)__p;
          }
          else
          {
            float v30 = 0;
          }
          uint64_t v31 = (double *)&v30[8 * v26];
          *uint64_t v31 = v22;
          uint64_t v24 = v31 + 1;
          while (v23 != v25)
          {
            uint64_t v32 = *((void *)v23 - 1);
            v23 -= 8;
            *((void *)v31-- - 1) = v32;
          }
          *(void *)&long long __p = v31;
          *((void *)&__p + 1) = v24;
          uint64_t v37 = &v30[8 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          **((double **)&__p + 1) = v22;
          uint64_t v24 = (double *)(v23 + 8);
        }
        *((void *)&__p + 1) = v24;
        uint64_t v7 = *a2;
      }
      while (a2[1] - *a2 - 1 > v8);
    }
    double v6 = sub_101136E08((double **)&buf);
    sub_101136E08((double **)&__p);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if ((void)buf)
    {
      *((void *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    unint64_t v4 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = a2[1] - *a2;
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Does not meet minimum number of samples criteria for Poincare, size: %lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      uint64_t v34 = a2[1] - *a2;
      LODWORD(__p) = 134217984;
      *(void *)((char *)&__p + 4) = v34;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "WalkingBoutExtractor::PoincareMetrics CLMobility::WalkingBoutExtractor::computePoincareMetrics(const std::vector<float> &) const", "%s\n", v35);
      if (v35 != (char *)&buf) {
        free(v35);
      }
    }
    return -INFINITY;
  }
  return v6;
}

void sub_100C7FF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
}

double sub_100C7FF98(float a1, uint64_t a2, uint64_t *a3)
{
  if ((unint64_t)(a3[1] - *a3) > 0x53)
  {
    long long buf = 0uLL;
    long long v60 = 0;
    for (unint64_t i = 2; i != 4; ++i)
    {
      long long v57 = 0uLL;
      int64_t v58 = 0;
      uint64_t v9 = *a3;
      double v10 = 0.0;
      if (((a3[1] - *a3) >> 2) - i == -1)
      {
        unint64_t v32 = 0;
      }
      else
      {
        unint64_t v11 = 0;
        do
        {
          unint64_t v54 = 0;
          unint64_t v55 = 0;
          uint64_t v56 = 0;
          sub_10010F834(&v54, (const void *)(v9 + 4 * v11), v9 + 4 * v11 + 4 * i, i);
          uint64_t v12 = *a3;
          unint64_t v13 = (a3[1] - *a3) >> 2;
          if (v13 - i == -1)
          {
            unint64_t v20 = 0;
            float v15 = 0.0;
          }
          else
          {
            unint64_t v14 = 0;
            float v15 = 0.0;
            do
            {
              if (v13 < v14 + i) {
                goto LABEL_25;
              }
              long long __p = 0;
              __int16 v52 = 0;
              uint64_t v53 = 0;
              sub_10010F834(&__p, (const void *)(v12 + 4 * v14), v12 + 4 * v14 + 4 * i, i);
              uint64_t v16 = 0;
              int v17 = 0;
              do
              {
                if (vabds_f32(*((float *)v54 + v16), *((float *)__p + v16)) > a1 && v17 == 0) {
                  int v17 = 1;
                }
                ++v16;
              }
              while (i != v16);
              __int16 v52 = __p;
              operator delete(__p);
              if (!v17) {
LABEL_25:
              }
                float v15 = v15 + 1.0;
              ++v14;
              uint64_t v12 = *a3;
              unint64_t v13 = (a3[1] - *a3) >> 2;
              unint64_t v20 = v13 - i + 1;
            }
            while (v20 > v14);
          }
          float v21 = v15 / (float)v20;
          double v22 = (char *)*((void *)&v57 + 1);
          if (*((void *)&v57 + 1) >= (unint64_t)v58)
          {
            uint64_t v24 = (char *)v57;
            uint64_t v25 = (uint64_t)(*((void *)&v57 + 1) - v57) >> 2;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v27 = (uint64_t)&v58[-v57];
            if ((uint64_t)&v58[-v57] >> 1 > v26) {
              unint64_t v26 = v27 >> 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              unint64_t v29 = (char *)sub_10017EA34((uint64_t)&v58, v28);
              double v22 = (char *)*((void *)&v57 + 1);
              uint64_t v24 = (char *)v57;
            }
            else
            {
              unint64_t v29 = 0;
            }
            float v30 = (float *)&v29[4 * v25];
            *float v30 = v21;
            int v23 = v30 + 1;
            while (v22 != v24)
            {
              int v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30-- - 1) = v31;
            }
            *(void *)&long long v57 = v30;
            *((void *)&v57 + 1) = v23;
            int64_t v58 = &v29[4 * v28];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            **((float **)&v57 + 1) = v21;
            int v23 = (float *)(v22 + 4);
          }
          *((void *)&v57 + 1) = v23;
          if (v54)
          {
            unint64_t v55 = v54;
            operator delete(v54);
          }
          ++v11;
          uint64_t v9 = *a3;
          unint64_t v32 = ((a3[1] - *a3) >> 2) - i + 1;
        }
        while (v32 > v11);
        uint64_t v33 = (float *)v57;
        if ((void)v57 != *((void *)&v57 + 1))
        {
          double v10 = 0.0;
          do
          {
            float v34 = *v33++;
            double v10 = v10 + v34;
          }
          while (v33 != *((float **)&v57 + 1));
        }
      }
      float v35 = v10 / (double)v32;
      int v36 = (char *)*((void *)&buf + 1);
      if (*((void *)&buf + 1) >= (unint64_t)v60)
      {
        double v38 = (char *)buf;
        uint64_t v39 = (uint64_t)(*((void *)&buf + 1) - buf) >> 2;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v41 = (uint64_t)&v60[-buf];
        if ((uint64_t)&v60[-buf] >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          std::string v43 = (char *)sub_10017EA34((uint64_t)&v60, v42);
          int v36 = (char *)*((void *)&buf + 1);
          double v38 = (char *)buf;
        }
        else
        {
          std::string v43 = 0;
        }
        double v44 = (float *)&v43[4 * v39];
        *double v44 = v35;
        uint64_t v37 = v44 + 1;
        while (v36 != v38)
        {
          int v45 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v44-- - 1) = v45;
        }
        *(void *)&long long buf = v44;
        *((void *)&buf + 1) = v37;
        long long v60 = &v43[4 * v42];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        **((float **)&buf + 1) = v35;
        uint64_t v37 = (float *)(v36 + 4);
      }
      *((void *)&buf + 1) = v37;
      if ((void)v57)
      {
        *((void *)&v57 + 1) = v57;
        operator delete((void *)v57);
      }
    }
    uint64_t v46 = (void *)buf;
    if (*((void *)&buf + 1) - (void)buf == 8)
    {
      float v47 = *(float *)(buf + 4);
      if (v47 == 0.0) {
        double v6 = -INFINITY;
      }
      else {
        double v6 = logf(*(float *)buf / v47);
      }
    }
    else
    {
      double v6 = -INFINITY;
      if (!(void)buf) {
        return v6;
      }
    }
    *((void *)&buf + 1) = v46;
    operator delete(v46);
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022F0488);
    }
    unint64_t v4 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = (a3[1] - *a3) >> 2;
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Does not meet minimum number of samples criteria for Entropy, size: %lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022F0488);
      }
      uint64_t v49 = (a3[1] - *a3) >> 2;
      LODWORD(v57) = 134217984;
      *(void *)((char *)&v57 + 4) = v49;
      unint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLMobility::WalkingBoutExtractor::computeEntropy(const std::vector<float> &, const float) const", "%s\n", v50);
      if (v50 != (char *)&buf) {
        free(v50);
      }
    }
    return -INFINITY;
  }
  return v6;
}

void sub_100C804FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
}

uint64_t sub_100C80558(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 24))();
}

uint64_t sub_100C80580(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  double v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BA60C0(a1, &v5, 0, 300.0, 10.0);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return a1;
}

void sub_100C805EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C80604(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  double v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BA60C0(a1, &v5, 1, 86400.0, 10.0);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  *(void *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 331) = 0;
  return a1;
}

void sub_100C806B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C806CC(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100C806FC(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v147 = *(void *)(v10 + 32);
                  long long v128 = *(_OWORD *)v10;
                  long long v137 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 32) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 16) = v53;
                  *(void *)(a2 - 8) = v147;
                  *(_OWORD *)(a2 - 24) = v137;
                  *(_OWORD *)(a2 - 40) = v128;
                }
                break;
              case 3uLL:
                sub_100C810AC((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                sub_100C8146C(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                unint64_t v54 = (long long *)(v10 + 40);
                unint64_t v55 = (long long *)(v10 + 80);
                uint64_t v56 = (long long *)(v10 + 120);
                sub_100C8146C(v10, v10 + 40, v10 + 80, v10 + 120);
                if (*(double *)(a2 - 32) < *(double *)(v10 + 128))
                {
                  long long v57 = *v56;
                  long long v138 = *(_OWORD *)(v10 + 136);
                  uint64_t v58 = *(void *)(v10 + 152);
                  long long v59 = *(_OWORD *)(a2 - 24);
                  long long v60 = *(_OWORD *)(a2 - 40);
                  *(void *)(v10 + 152) = *(void *)(a2 - 8);
                  *uint64_t v56 = v60;
                  *(_OWORD *)(v10 + 136) = v59;
                  *(_OWORD *)(a2 - 24) = v138;
                  *(void *)(a2 - 8) = v58;
                  *(_OWORD *)(a2 - 40) = v57;
                  if (*(double *)(v10 + 128) < *(double *)(v10 + 88))
                  {
                    uint64_t v61 = *(void *)(v10 + 112);
                    long long v63 = *v55;
                    long long v62 = *(_OWORD *)(v10 + 96);
                    long long v64 = *(_OWORD *)(v10 + 136);
                    *unint64_t v55 = *v56;
                    *(_OWORD *)(v10 + 96) = v64;
                    *(void *)(v10 + 112) = *(void *)(v10 + 152);
                    *uint64_t v56 = v63;
                    *(_OWORD *)(v10 + 136) = v62;
                    *(void *)(v10 + 152) = v61;
                    if (*(double *)(v10 + 88) < *(double *)(v10 + 48))
                    {
                      uint64_t v65 = *(void *)(v10 + 72);
                      long long v67 = *v54;
                      long long v66 = *(_OWORD *)(v10 + 56);
                      long long v68 = *(_OWORD *)(v10 + 96);
                      *unint64_t v54 = *v55;
                      *(_OWORD *)(v10 + 56) = v68;
                      *(void *)(v10 + 72) = *(void *)(v10 + 112);
                      *unint64_t v55 = v67;
                      *(_OWORD *)(v10 + 96) = v66;
                      *(void *)(v10 + 112) = v65;
                      if (*(double *)(v10 + 48) < *(double *)(v10 + 8))
                      {
                        uint64_t v148 = *(void *)(v10 + 32);
                        long long v129 = *(_OWORD *)v10;
                        long long v139 = *(_OWORD *)(v10 + 16);
                        long long v69 = *(_OWORD *)(v10 + 56);
                        *(_OWORD *)unint64_t v10 = *v54;
                        *(_OWORD *)(v10 + 16) = v69;
                        *(void *)(v10 + 32) = *(void *)(v10 + 72);
                        *unint64_t v54 = v129;
                        *(_OWORD *)(v10 + 56) = v139;
                        *(void *)(v10 + 72) = v148;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            unint64_t v70 = v10 + 40;
            BOOL v72 = v10 == a2 || v70 == a2;
            if (a4)
            {
              if (!v72)
              {
                uint64_t v73 = 0;
                unint64_t v74 = v10;
                do
                {
                  unint64_t v75 = v70;
                  double v76 = *(double *)(v74 + 48);
                  if (v76 < *(double *)(v74 + 8))
                  {
                    uint64_t v77 = *(void *)v70;
                    long long v130 = *(_OWORD *)(v74 + 56);
                    uint64_t v140 = *(void *)(v74 + 72);
                    uint64_t v78 = v73;
                    while (1)
                    {
                      uint64_t v79 = v10 + v78;
                      long long v80 = *(_OWORD *)(v10 + v78 + 16);
                      *(_OWORD *)(v79 + 40) = *(_OWORD *)(v10 + v78);
                      *(_OWORD *)(v79 + 56) = v80;
                      *(void *)(v79 + 72) = *(void *)(v10 + v78 + 32);
                      if (!v78) {
                        break;
                      }
                      v78 -= 40;
                      if (v76 >= *(double *)(v79 - 32))
                      {
                        uint64_t v81 = v10 + v78 + 40;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v81 = v10;
LABEL_83:
                    *(void *)uint64_t v81 = v77;
                    *(double *)(v81 + 8) = v76;
                    *(_OWORD *)(v81 + 16) = v130;
                    *(void *)(v81 + 32) = v140;
                  }
                  unint64_t v70 = v75 + 40;
                  v73 += 40;
                  unint64_t v74 = v75;
                }
                while (v75 + 40 != a2);
              }
            }
            else if (!v72)
            {
              do
              {
                unint64_t v114 = v70;
                double v115 = *(double *)(a1 + 48);
                if (v115 < *(double *)(a1 + 8))
                {
                  uint64_t v116 = *(void *)v70;
                  long long v133 = *(_OWORD *)(a1 + 56);
                  uint64_t v143 = *(void *)(a1 + 72);
                  do
                  {
                    long long v117 = *(_OWORD *)(v70 - 24);
                    *(_OWORD *)unint64_t v70 = *(_OWORD *)(v70 - 40);
                    *(_OWORD *)(v70 + 16) = v117;
                    *(void *)(v70 + 32) = *(void *)(v70 - 8);
                    double v118 = *(double *)(v70 - 72);
                    v70 -= 40;
                  }
                  while (v115 < v118);
                  *(void *)unint64_t v70 = v116;
                  *(double *)(v70 + 8) = v115;
                  *(void *)(v70 + 32) = v143;
                  *(_OWORD *)(v70 + 16) = v133;
                }
                unint64_t v70 = v114 + 40;
                a1 = v114;
              }
              while (v114 + 40 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v82 = (v12 - 2) >> 1;
              int64_t v83 = v82;
              do
              {
                int64_t v84 = v83;
                if (v82 >= v83)
                {
                  uint64_t v85 = (2 * v83) | 1;
                  unint64_t v86 = v10 + 40 * v85;
                  if (2 * v84 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v85 + 8) < *(double *)(v86 + 48))
                  {
                    v86 += 40;
                    uint64_t v85 = 2 * v84 + 2;
                  }
                  double v87 = *(double *)(v10 + 40 * v84 + 8);
                  if (*(double *)(v86 + 8) >= v87)
                  {
                    unint64_t v88 = v10 + 40 * v84;
                    uint64_t v89 = *(void *)v88;
                    uint64_t v141 = *(void *)(v88 + 32);
                    long long v131 = *(_OWORD *)(v88 + 16);
                    do
                    {
                      unint64_t v90 = v88;
                      unint64_t v88 = v86;
                      long long v91 = *(_OWORD *)v86;
                      long long v92 = *(_OWORD *)(v86 + 16);
                      *(void *)(v90 + 32) = *(void *)(v86 + 32);
                      *(_OWORD *)unint64_t v90 = v91;
                      *(_OWORD *)(v90 + 16) = v92;
                      if (v82 < v85) {
                        break;
                      }
                      uint64_t v93 = (2 * v85) | 1;
                      unint64_t v86 = v10 + 40 * v93;
                      uint64_t v94 = 2 * v85 + 2;
                      if (v94 < (uint64_t)v12 && *(double *)(v10 + 40 * v93 + 8) < *(double *)(v86 + 48))
                      {
                        v86 += 40;
                        uint64_t v93 = v94;
                      }
                      uint64_t v85 = v93;
                    }
                    while (*(double *)(v86 + 8) >= v87);
                    *(void *)unint64_t v88 = v89;
                    *(double *)(v88 + 8) = v87;
                    *(_OWORD *)(v88 + 16) = v131;
                    *(void *)(v88 + 32) = v141;
                  }
                }
                int64_t v83 = v84 - 1;
              }
              while (v84);
              int64_t v95 = v11 / 0x28uLL;
              do
              {
                uint64_t v96 = 0;
                uint64_t v149 = *(void *)(v10 + 32);
                long long v132 = *(_OWORD *)v10;
                long long v142 = *(_OWORD *)(v10 + 16);
                unint64_t v97 = v10;
                do
                {
                  unint64_t v98 = v97;
                  uint64_t v99 = v96 + 1;
                  v97 += 40 * (v96 + 1);
                  uint64_t v100 = 2 * v96;
                  uint64_t v96 = (2 * v96) | 1;
                  int64_t v101 = v100 + 2;
                  if (v101 < v95 && *(double *)(v98 + 40 * v99 + 8) < *(double *)(v97 + 48))
                  {
                    v97 += 40;
                    uint64_t v96 = v101;
                  }
                  long long v102 = *(_OWORD *)v97;
                  long long v103 = *(_OWORD *)(v97 + 16);
                  *(void *)(v98 + 32) = *(void *)(v97 + 32);
                  *(_OWORD *)unint64_t v98 = v102;
                  *(_OWORD *)(v98 + 16) = v103;
                }
                while (v96 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
                a2 -= 40;
                if (v97 == a2)
                {
                  *(void *)(v97 + 32) = v149;
                  *(_OWORD *)unint64_t v97 = v132;
                  *(_OWORD *)(v97 + 16) = v142;
                }
                else
                {
                  long long v104 = *(_OWORD *)a2;
                  long long v105 = *(_OWORD *)(a2 + 16);
                  *(void *)(v97 + 32) = *(void *)(a2 + 32);
                  *(_OWORD *)unint64_t v97 = v104;
                  *(_OWORD *)(v97 + 16) = v105;
                  *(void *)(a2 + 32) = v149;
                  *(_OWORD *)a2 = v132;
                  *(_OWORD *)(a2 + 16) = v142;
                  uint64_t v106 = v97 - v10 + 40;
                  if (v106 >= 41)
                  {
                    unint64_t v107 = (v106 / 0x28uLL - 2) >> 1;
                    double v108 = *(double *)(v97 + 8);
                    if (*(double *)(v10 + 40 * v107 + 8) < v108)
                    {
                      uint64_t v109 = *(void *)v97;
                      uint64_t v124 = *(void *)(v97 + 32);
                      long long v121 = *(_OWORD *)(v97 + 16);
                      do
                      {
                        unint64_t v110 = v97;
                        unint64_t v97 = v10 + 40 * v107;
                        long long v111 = *(_OWORD *)v97;
                        long long v112 = *(_OWORD *)(v97 + 16);
                        *(void *)(v110 + 32) = *(void *)(v97 + 32);
                        *(_OWORD *)unint64_t v110 = v111;
                        *(_OWORD *)(v110 + 16) = v112;
                        if (!v107) {
                          break;
                        }
                        unint64_t v107 = (v107 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v107 + 8) < v108);
                      *(void *)unint64_t v97 = v109;
                      *(double *)(v97 + 8) = v108;
                      *(void *)(v97 + 32) = v124;
                      *(_OWORD *)(v97 + 16) = v121;
                    }
                  }
                }
              }
              while (v95-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            sub_100C810AC((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            sub_100C810AC((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            int v17 = (double *)(a1 + 40 + 8 * v15);
            sub_100C810AC((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            sub_100C810AC((long long *)v16, (double *)v14, v17);
            uint64_t v144 = *(void *)(a1 + 32);
            long long v125 = *(_OWORD *)a1;
            long long v134 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(void *)(a1 + 32) = *(void *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(void *)(v14 + 32) = v144;
            *(_OWORD *)unint64_t v14 = v125;
            *(_OWORD *)(v14 + 16) = v134;
          }
          else
          {
            sub_100C810AC((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v120 = *(_OWORD *)(a1 + 16);
          uint64_t v123 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v146 = *(void *)(v10 + 32);
            long long v127 = *(_OWORD *)v10;
            long long v136 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(void *)(v10 + 32) = *(void *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *(void *)(v43 + 32) = v146;
            *(_OWORD *)unint64_t v43 = v127;
            *(_OWORD *)(v43 + 16) = v136;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 32) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 16) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(void *)(v10 - 8) = v123;
          *(_OWORD *)(v10 - 24) = v120;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v119 = *(_OWORD *)(a1 + 16);
        uint64_t v122 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v145 = *(void *)(v10 + 32);
            long long v126 = *(_OWORD *)v10;
            long long v135 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(void *)(v10 + 32) = *(void *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 16) = v32;
            *(void *)(v30 + 32) = v145;
            *(_OWORD *)unint64_t v30 = v126;
            *(_OWORD *)(v30 + 16) = v135;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 32) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 16) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(void *)(v10 - 8) = v122;
        *(_OWORD *)(v10 - 24) = v119;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        sub_100C806FC(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = sub_100C8119C(a1, v10 - 40);
      if (sub_100C8119C(v10, a2)) {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

long long *sub_100C810AC(long long *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      uint64_t v12 = *((void *)a2 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((void *)a2 + 4) = v13;
      *((void *)a3 + 4) = v12;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      if (a2[1] < *((double *)result + 1))
      {
        long long v15 = *result;
        long long v16 = result[1];
        uint64_t v17 = *((void *)result + 4);
        uint64_t v18 = *((void *)a2 + 4);
        long long v19 = *((_OWORD *)a2 + 1);
        *BOOL result = *(_OWORD *)a2;
        result[1] = v19;
        *((void *)result + 4) = v18;
        *((void *)a2 + 4) = v17;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v20 = *result;
      long long v21 = result[1];
      uint64_t v22 = *((void *)result + 4);
      uint64_t v23 = *((void *)a2 + 4);
      long long v24 = *((_OWORD *)a2 + 1);
      *BOOL result = *(_OWORD *)a2;
      result[1] = v24;
      *((void *)result + 4) = v23;
      *((void *)a2 + 4) = v22;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      if (a3[1] >= a2[1]) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      long long v6 = *((_OWORD *)a2 + 1);
      uint64_t v7 = *((void *)a2 + 4);
      uint64_t v25 = *((void *)a3 + 4);
      long long v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((void *)a2 + 4) = v25;
    }
    else
    {
      long long v5 = *result;
      long long v6 = result[1];
      uint64_t v7 = *((void *)result + 4);
      uint64_t v8 = *((void *)a3 + 4);
      long long v9 = *((_OWORD *)a3 + 1);
      *BOOL result = *(_OWORD *)a3;
      result[1] = v9;
      *((void *)result + 4) = v8;
    }
    *((void *)a3 + 4) = v7;
    *(_OWORD *)a3 = v5;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_100C8119C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        long long v6 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 32) = v9;
        *(void *)(a2 - 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }
      return result;
    case 3uLL:
      sub_100C810AC((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_100C8146C(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      long long v21 = (long long *)(a1 + 40);
      uint64_t v22 = (long long *)(a1 + 80);
      uint64_t v23 = (long long *)(a1 + 120);
      sub_100C8146C(a1, a1 + 40, a1 + 80, a1 + 120);
      if (*(double *)(a2 - 32) >= *(double *)(a1 + 128)) {
        return 1;
      }
      long long v24 = *v23;
      long long v25 = *(_OWORD *)(a1 + 136);
      uint64_t v26 = *(void *)(a1 + 152);
      uint64_t v27 = *(void *)(a2 - 8);
      long long v28 = *(_OWORD *)(a2 - 24);
      *uint64_t v23 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v28;
      *(void *)(a1 + 152) = v27;
      *(void *)(a2 - 8) = v26;
      *(_OWORD *)(a2 - 24) = v25;
      *(_OWORD *)(a2 - 40) = v24;
      if (*(double *)(a1 + 128) >= *(double *)(a1 + 88)) {
        return 1;
      }
      uint64_t v29 = *(void *)(a1 + 112);
      long long v31 = *v22;
      long long v30 = *(_OWORD *)(a1 + 96);
      long long v32 = *(_OWORD *)(a1 + 136);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 96) = v32;
      *(void *)(a1 + 112) = *(void *)(a1 + 152);
      *uint64_t v23 = v31;
      *(_OWORD *)(a1 + 136) = v30;
      *(void *)(a1 + 152) = v29;
      if (*(double *)(a1 + 88) >= *(double *)(a1 + 48)) {
        return 1;
      }
      uint64_t v33 = *(void *)(a1 + 72);
      long long v35 = *v21;
      long long v34 = *(_OWORD *)(a1 + 56);
      long long v36 = *(_OWORD *)(a1 + 96);
      *long long v21 = *v22;
      *(_OWORD *)(a1 + 56) = v36;
      *(void *)(a1 + 72) = *(void *)(a1 + 112);
      *uint64_t v22 = v35;
      *(_OWORD *)(a1 + 96) = v34;
      *(void *)(a1 + 112) = v33;
      if (*(double *)(a1 + 48) >= *(double *)(a1 + 8)) {
        return 1;
      }
      uint64_t v37 = *(void *)(a1 + 32);
      long long v39 = *(_OWORD *)a1;
      long long v38 = *(_OWORD *)(a1 + 16);
      long long v40 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v40;
      *(void *)(a1 + 32) = *(void *)(a1 + 72);
      *long long v21 = v39;
      *(_OWORD *)(a1 + 56) = v38;
      BOOL result = 1;
      *(void *)(a1 + 72) = v37;
      return result;
    default:
      uint64_t v11 = a1 + 80;
      sub_100C810AC((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v41 = *(_OWORD *)(v12 + 16);
      uint64_t v42 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v41;
      *(void *)(v20 + 32) = v42;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

__n128 sub_100C8146C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100C810AC((long long *)a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(void *)(a3 + 32) = v11;
    *(void *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(void *)(a2 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 32) = v19;
        *(void *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

void sub_100C8153C(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                double v41 = *(double *)(a2 - 24);
                unint64_t v40 = a2 - 24;
                if (v41 < *(double *)v10)
                {
                  *(void *)&v98[16] = *(void *)(v10 + 16);
                  *(_OWORD *)unint64_t v98 = *(_OWORD *)v10;
                  long long v42 = *(_OWORD *)v40;
                  *(void *)(v10 + 13) = *(void *)(v40 + 13);
                  *(_OWORD *)unint64_t v10 = v42;
                  *(void *)(v40 + 13) = *(void *)&v98[13];
                  *(_OWORD *)unint64_t v40 = *(_OWORD *)v98;
                }
                break;
              case 3uLL:
                sub_100C81E48((long long *)v10, (long long *)(v10 + 24), (long long *)(a2 - 24));
                break;
              case 4uLL:
                sub_100C82250(v10, v10 + 24, v10 + 48, (unint64_t *)(a2 - 24));
                break;
              case 5uLL:
                unint64_t v43 = (_OWORD *)(v10 + 24);
                unint64_t v44 = (_OWORD *)(v10 + 48);
                double v45 = (_OWORD *)(v10 + 72);
                sub_100C82250(v10, v10 + 24, v10 + 48, (unint64_t *)(v10 + 72));
                double v47 = *(double *)(a2 - 24);
                unint64_t v46 = a2 - 24;
                if (v47 < *(double *)(v10 + 72))
                {
                  *(_OWORD *)uint64_t v99 = *v45;
                  long long v48 = *v45;
                  *(void *)&v99[16] = *(void *)(v10 + 88);
                  uint64_t v49 = *(void *)(v46 + 13);
                  *double v45 = *(_OWORD *)v46;
                  *(void *)(v10 + 85) = v49;
                  *(void *)(v46 + 13) = *(void *)&v99[13];
                  *(_OWORD *)unint64_t v46 = v48;
                  if (*(double *)v45 < *(double *)v44)
                  {
                    *(_OWORD *)uint64_t v100 = *v44;
                    long long v50 = *v44;
                    *(void *)&v100[16] = *(void *)(v10 + 64);
                    *unint64_t v44 = *v45;
                    *(void *)(v10 + 61) = *(void *)(v10 + 85);
                    *double v45 = v50;
                    *(void *)(v10 + 85) = *(void *)&v100[13];
                    if (*(double *)v44 < *(double *)v43)
                    {
                      *(_OWORD *)int64_t v101 = *v43;
                      long long v51 = *v43;
                      *(void *)&v101[16] = *(void *)(v10 + 40);
                      *unint64_t v43 = *v44;
                      *(void *)(v10 + 37) = *(void *)(v10 + 61);
                      *unint64_t v44 = v51;
                      *(void *)(v10 + 61) = *(void *)&v101[13];
                      if (*(double *)(v10 + 24) < *(double *)v10)
                      {
                        *(void *)&v102[16] = *(void *)(v10 + 16);
                        *(_OWORD *)long long v102 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v43;
                        *(void *)(v10 + 13) = *(void *)(v10 + 37);
                        *unint64_t v43 = *(_OWORD *)v102;
                        *(void *)(v10 + 37) = *(void *)&v102[13];
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v52 = v10 + 24;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 0;
                unint64_t v56 = v10;
                do
                {
                  unint64_t v57 = v52;
                  double v58 = *(double *)(v56 + 24);
                  if (v58 < *(double *)v56)
                  {
                    long long v103 = *(_OWORD *)(v56 + 32);
                    uint64_t v59 = v55;
                    while (1)
                    {
                      uint64_t v60 = v10 + v59;
                      *(_OWORD *)(v60 + 24) = *(_OWORD *)(v10 + v59);
                      *(void *)(v60 + 37) = *(void *)(v10 + v59 + 13);
                      if (!v59) {
                        break;
                      }
                      v59 -= 24;
                      if (v58 >= *(double *)(v60 - 24))
                      {
                        uint64_t v61 = v10 + v59 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v61 = v10;
LABEL_80:
                    *(double *)uint64_t v61 = v58;
                    *(void *)(v61 + 8) = v103;
                    *(void *)(v61 + 13) = *(void *)((char *)&v103 + 5);
                  }
                  unint64_t v52 = v57 + 24;
                  v55 += 24;
                  unint64_t v56 = v57;
                }
                while (v57 + 24 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                unint64_t v88 = v52;
                double v89 = *(double *)(a1 + 24);
                if (v89 < *(double *)a1)
                {
                  long long v106 = *(_OWORD *)(a1 + 32);
                  unint64_t v90 = v52;
                  do
                  {
                    *(_OWORD *)unint64_t v90 = *(_OWORD *)(v90 - 24);
                    *(void *)(v90 + 13) = *(void *)(v90 - 11);
                    double v91 = *(double *)(v90 - 48);
                    v90 -= 24;
                  }
                  while (v89 < v91);
                  *(double *)unint64_t v90 = v89;
                  *(void *)(v90 + 13) = *(void *)((char *)&v106 + 5);
                  *(void *)(v90 + 8) = v106;
                }
                v52 += 24;
                a1 = v88;
              }
              while (v88 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  unint64_t v66 = v10 + 24 * v65;
                  if (2 * v64 + 2 < (uint64_t)v12 && *(double *)v66 < *(double *)(v66 + 24))
                  {
                    v66 += 24;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  unint64_t v67 = v10 + 24 * v64;
                  double v68 = *(double *)v67;
                  if (*(double *)v66 >= *(double *)v67)
                  {
                    long long v104 = *(_OWORD *)(v67 + 8);
                    do
                    {
                      unint64_t v69 = v67;
                      unint64_t v67 = v66;
                      long long v70 = *(_OWORD *)v66;
                      *(void *)(v69 + 13) = *(void *)(v66 + 13);
                      *(_OWORD *)unint64_t v69 = v70;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = 2 * v65;
                      uint64_t v65 = (2 * v65) | 1;
                      unint64_t v66 = v10 + 24 * v65;
                      uint64_t v72 = v71 + 2;
                      if (v72 < (uint64_t)v12 && *(double *)v66 < *(double *)(v66 + 24))
                      {
                        v66 += 24;
                        uint64_t v65 = v72;
                      }
                    }
                    while (*(double *)v66 >= v68);
                    *(double *)unint64_t v67 = v68;
                    *(void *)(v67 + 8) = v104;
                    *(void *)(v67 + 13) = *(void *)((char *)&v104 + 5);
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              int64_t v73 = v11 / 0x18uLL;
              do
              {
                uint64_t v74 = 0;
                *(void *)&v105[16] = *(void *)(v10 + 16);
                *(_OWORD *)long long v105 = *(_OWORD *)v10;
                unint64_t v75 = v10;
                do
                {
                  unint64_t v76 = v75;
                  v75 += 24 * v74 + 24;
                  uint64_t v77 = 2 * v74;
                  uint64_t v74 = (2 * v74) | 1;
                  int64_t v78 = v77 + 2;
                  if (v78 < v73 && *(double *)v75 < *(double *)(v75 + 24))
                  {
                    v75 += 24;
                    uint64_t v74 = v78;
                  }
                  long long v79 = *(_OWORD *)v75;
                  *(void *)(v76 + 13) = *(void *)(v75 + 13);
                  *(_OWORD *)unint64_t v76 = v79;
                }
                while (v74 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                a2 -= 24;
                if (v75 == a2)
                {
                  *(void *)(v75 + 13) = *(void *)&v105[13];
                  *(_OWORD *)unint64_t v75 = *(_OWORD *)v105;
                }
                else
                {
                  long long v80 = *(_OWORD *)a2;
                  *(void *)(v75 + 13) = *(void *)(a2 + 13);
                  *(_OWORD *)unint64_t v75 = v80;
                  *(void *)(a2 + 13) = *(void *)&v105[13];
                  *(_OWORD *)a2 = *(_OWORD *)v105;
                  uint64_t v81 = v75 - v10 + 24;
                  if (v81 >= 25)
                  {
                    unint64_t v82 = (v81 / 0x18uLL - 2) >> 1;
                    unint64_t v83 = v10 + 24 * v82;
                    double v84 = *(double *)v75;
                    if (*(double *)v83 < *(double *)v75)
                    {
                      long long v94 = *(_OWORD *)(v75 + 8);
                      do
                      {
                        unint64_t v85 = v75;
                        unint64_t v75 = v83;
                        long long v86 = *(_OWORD *)v83;
                        *(void *)(v85 + 13) = *(void *)(v83 + 13);
                        *(_OWORD *)unint64_t v85 = v86;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        unint64_t v83 = v10 + 24 * v82;
                      }
                      while (*(double *)v83 < v84);
                      *(double *)unint64_t v75 = v84;
                      *(void *)(v75 + 8) = v94;
                      *(void *)(v75 + 13) = *(void *)((char *)&v94 + 5);
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_100C81E48((long long *)a1, (long long *)(a1 + 24 * (v12 >> 1)), (long long *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 24 * v13 - 24);
            sub_100C81E48((long long *)(a1 + 24), v16, (long long *)(a2 - 48));
            long long v17 = (long long *)(a1 + 24 + 8 * v15);
            sub_100C81E48((long long *)(a1 + 48), v17, (long long *)(a2 - 72));
            sub_100C81E48(v16, (long long *)v14, v17);
            *(void *)&v95[16] = *(void *)(a1 + 16);
            *(_OWORD *)int64_t v95 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 13);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 13) = v18;
            *(void *)(v14 + 13) = *(void *)&v95[13];
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v95;
          }
          else
          {
            sub_100C81E48((long long *)(a1 + 24 * (v12 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          double v19 = *(double *)a1;
          if ((a4 & 1) != 0 || *(double *)(a1 - 24) < v19) {
            break;
          }
          long long v93 = *(_OWORD *)(a1 + 8);
          if (v19 >= *(double *)(a2 - 24))
          {
            unint64_t v33 = a1 + 24;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 24;
            }
            while (v19 >= *(double *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              double v32 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v32);
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              double v35 = *(double *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v35);
          }
          while (v10 < v34)
          {
            *(void *)&v97[16] = *(void *)(v10 + 16);
            *(_OWORD *)unint64_t v97 = *(_OWORD *)v10;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v10 + 13) = *(void *)(v34 + 13);
            *(_OWORD *)unint64_t v10 = v36;
            *(void *)(v34 + 13) = *(void *)&v97[13];
            *(_OWORD *)unint64_t v34 = *(_OWORD *)v97;
            do
            {
              double v37 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v37);
            do
            {
              double v38 = *(double *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v38);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v39 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 13) = *(void *)(v10 - 11);
            *(_OWORD *)a1 = v39;
          }
          a4 = 0;
          *(double *)(v10 - 24) = v19;
          *(void *)(v10 - 11) = *(void *)((char *)&v93 + 5);
          *(void *)(v10 - 16) = v93;
        }
        uint64_t v20 = 0;
        long long v92 = *(_OWORD *)(a1 + 8);
        do
        {
          double v21 = *(double *)(a1 + v20 + 24);
          v20 += 24;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            double v25 = *(double *)(v23 - 24);
            v23 -= 24;
          }
          while (v25 >= v19);
        }
        else
        {
          do
          {
            double v24 = *(double *)(v23 - 24);
            v23 -= 24;
          }
          while (v24 >= v19);
        }
        unint64_t v10 = a1 + v20;
        if (v22 < v23)
        {
          unint64_t v26 = v23;
          do
          {
            *(void *)&v96[16] = *(void *)(v10 + 16);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(void *)(v10 + 13) = *(void *)(v26 + 13);
            *(_OWORD *)unint64_t v10 = v27;
            *(void *)(v26 + 13) = *(void *)&v96[13];
            *(_OWORD *)unint64_t v26 = *(_OWORD *)v96;
            do
            {
              double v28 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v28 < v19);
            do
            {
              double v29 = *(double *)(v26 - 24);
              v26 -= 24;
            }
            while (v29 >= v19);
          }
          while (v10 < v26);
        }
        if (v10 - 24 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 13) = *(void *)(v10 - 11);
          *(_OWORD *)a1 = v30;
        }
        *(double *)(v10 - 24) = v19;
        *(void *)(v10 - 11) = *(void *)((char *)&v92 + 5);
        *(void *)(v10 - 16) = v92;
        if (v22 >= v23) {
          break;
        }
LABEL_30:
        sub_100C8153C(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_100C81F70(a1, v10 - 24);
      if (sub_100C81F70(v10, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 24;
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *sub_100C81E48(long long *result, long long *a2, long long *a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v4 < v3)
    {
      *(_OWORD *)uint64_t v15 = *a2;
      long long v7 = *a2;
      *(void *)&v15[16] = *((void *)a2 + 2);
      uint64_t v8 = *(void *)((char *)a3 + 13);
      *a2 = *a3;
      *(void *)((char *)a2 + 13) = v8;
      *a3 = v7;
      *(void *)((char *)a3 + 13) = *(void *)&v15[13];
      if (*(double *)a2 < *(double *)result)
      {
        *(_OWORD *)long long v16 = *result;
        long long v9 = *result;
        *(void *)&v16[16] = *((void *)result + 2);
        uint64_t v10 = *(void *)((char *)a2 + 13);
        *__n128 result = *a2;
        *(void *)((char *)result + 13) = v10;
        *a2 = v9;
        *(void *)((char *)a2 + 13) = *(void *)&v16[13];
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      *(_OWORD *)long long v17 = *result;
      long long v11 = *result;
      *(void *)&v17[16] = *((void *)result + 2);
      uint64_t v12 = *(void *)((char *)a2 + 13);
      *__n128 result = *a2;
      *(void *)((char *)result + 13) = v12;
      *a2 = v11;
      *(void *)((char *)a2 + 13) = *(void *)&v17[13];
      if (*(double *)a3 >= *(double *)a2) {
        return result;
      }
      long long v5 = *a2;
      *(_OWORD *)unint64_t v14 = *a2;
      *(void *)&v14[16] = *((void *)a2 + 2);
      uint64_t v13 = *(void *)((char *)a3 + 13);
      *a2 = *a3;
      *(void *)((char *)a2 + 13) = v13;
    }
    else
    {
      long long v5 = *result;
      *(_OWORD *)unint64_t v14 = *result;
      *(void *)&v14[16] = *((void *)result + 2);
      uint64_t v6 = *(void *)((char *)a3 + 13);
      *__n128 result = *a3;
      *(void *)((char *)result + 13) = v6;
    }
    *a3 = v5;
    *(void *)((char *)a3 + 13) = *(void *)&v14[13];
  }
  return result;
}

BOOL sub_100C81F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (_OWORD *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        *(_OWORD *)long long v27 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)a1;
        *(void *)&v27[16] = *(void *)(a1 + 16);
        uint64_t v8 = *(void *)(a2 - 11);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 13) = v8;
        *uint64_t v6 = v7;
        *(void *)(a2 - 11) = *(void *)&v27[13];
      }
      return result;
    case 3uLL:
      sub_100C81E48((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_100C82250(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      long long v17 = (long long *)(a1 + 24);
      uint64_t v18 = (long long *)(a1 + 48);
      double v19 = (long long *)(a1 + 72);
      sub_100C82250(a1, a1 + 24, a1 + 48, (unint64_t *)(a1 + 72));
      double v21 = *(double *)(a2 - 24);
      uint64_t v20 = a2 - 24;
      if (v21 < *(double *)(a1 + 72))
      {
        *(_OWORD *)double v29 = *v19;
        long long v22 = *v19;
        *(void *)&v29[16] = *(void *)(a1 + 88);
        uint64_t v23 = *(void *)(v20 + 13);
        *double v19 = *(_OWORD *)v20;
        *(void *)(a1 + 85) = v23;
        *(_OWORD *)uint64_t v20 = v22;
        *(void *)(v20 + 13) = *(void *)&v29[13];
        if (*(double *)v19 < *(double *)v18)
        {
          *(_OWORD *)long long v30 = *v18;
          long long v24 = *v18;
          *(void *)&v30[16] = *(void *)(a1 + 64);
          *uint64_t v18 = *v19;
          *(void *)(a1 + 61) = *(void *)(a1 + 85);
          *double v19 = v24;
          *(void *)(a1 + 85) = *(void *)&v30[13];
          if (*(double *)v18 < *(double *)v17)
          {
            *(_OWORD *)BOOL v31 = *v17;
            long long v25 = *v17;
            *(void *)&v31[16] = *(void *)(a1 + 40);
            *long long v17 = *v18;
            *(void *)(a1 + 37) = *(void *)(a1 + 61);
            *uint64_t v18 = v25;
            *(void *)(a1 + 61) = *(void *)&v31[13];
            if (*(double *)(a1 + 24) < *(double *)a1)
            {
              *(_OWORD *)double v32 = *(_OWORD *)a1;
              long long v26 = *(_OWORD *)a1;
              *(void *)&v32[16] = *(void *)(a1 + 16);
              *(_OWORD *)a1 = *v17;
              *(void *)(a1 + 13) = *(void *)(a1 + 37);
              *long long v17 = v26;
              *(void *)(a1 + 37) = *(void *)&v32[13];
            }
          }
        }
      }
      return 1;
    default:
      long long v9 = (double *)(a1 + 48);
      sub_100C81E48((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)v10;
    if (*(double *)v10 < *v9)
    {
      long long v28 = *(_OWORD *)(v10 + 8);
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 85) = *(void *)(a1 + v14 + 61);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (v13 >= *(double *)(v15 + 24))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(double *)uint64_t v16 = v13;
      *(void *)(v16 + 8) = v28;
      *(void *)(v16 + 13) = *(void *)((char *)&v28 + 5);
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    long long v9 = (double *)v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_100C82250(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  sub_100C81E48((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    *(_OWORD *)int v12 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)a3;
    *(void *)&v12[16] = *(void *)(a3 + 16);
    uint64_t v9 = *(unint64_t *)((char *)a4 + 13);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 13) = v9;
    *(__n128 *)a4 = result;
    *(unint64_t *)((char *)a4 + 13) = *(void *)&v12[13];
    result.n128_u64[0] = *(void *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      *(_OWORD *)double v13 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)a2;
      *(void *)&v13[16] = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a3 + 13);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 13) = v10;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 13) = *(void *)&v13[13];
      result.n128_u64[0] = *(void *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)a1;
        *(void *)&v14[16] = *(void *)(a1 + 16);
        uint64_t v11 = *(void *)(a2 + 13);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 13) = v11;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 13) = *(void *)&v14[13];
      }
    }
  }
  return result;
}

void sub_100C82344(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
__n128 sub_100C82F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  result.n128_u64[0] = *(void *)(a2 + 8);
  double v4 = *(double *)(a3 + 8);
  if (result.n128_f64[0] >= *(double *)(a1 + 8))
  {
    if (v4 < result.n128_f64[0])
    {
      long long v34 = *(_OWORD *)(a2 + 32);
      long long v38 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)long long v42 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 80);
      __n128 v26 = *(__n128 *)a2;
      long long v30 = *(_OWORD *)(a2 + 16);
      long long v9 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v9;
      long long v11 = *(_OWORD *)(a3 + 48);
      long long v10 = *(_OWORD *)(a3 + 64);
      long long v12 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 48) = v11;
      *(_OWORD *)(a2 + 64) = v10;
      *(_OWORD *)(a2 + 32) = v12;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v42;
      *(_OWORD *)(a3 + 76) = *(_OWORD *)&v42[12];
      *(_OWORD *)(a3 + 32) = v34;
      *(_OWORD *)(a3 + 48) = v38;
      result.n128_u64[1] = v26.n128_u64[1];
      *(__n128 *)a3 = v26;
      *(_OWORD *)(a3 + 16) = v30;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        long long v35 = *(_OWORD *)(a1 + 32);
        long long v39 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)BOOL v43 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 80);
        __n128 v27 = *(__n128 *)a1;
        long long v31 = *(_OWORD *)(a1 + 16);
        long long v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v13;
        long long v15 = *(_OWORD *)(a2 + 48);
        long long v14 = *(_OWORD *)(a2 + 64);
        long long v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
        *(_OWORD *)(a1 + 48) = v15;
        *(_OWORD *)(a1 + 64) = v14;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v43;
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v43[12];
        *(_OWORD *)(a2 + 32) = v35;
        *(_OWORD *)(a2 + 48) = v39;
        __n128 result = v27;
        *(__n128 *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v31;
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      long long v36 = *(_OWORD *)(a1 + 32);
      long long v40 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)uint64_t v44 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v44[16] = *(_OWORD *)(a1 + 80);
      __n128 v28 = *(__n128 *)a1;
      long long v32 = *(_OWORD *)(a1 + 16);
      long long v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      long long v19 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)(a2 + 64);
      long long v20 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
      *(_OWORD *)(a1 + 48) = v19;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v44;
      *(_OWORD *)(a2 + 76) = *(_OWORD *)&v44[12];
      *(_OWORD *)(a2 + 32) = v36;
      *(_OWORD *)(a2 + 48) = v40;
      result.n128_u64[1] = v28.n128_u64[1];
      *(__n128 *)a2 = v28;
      *(_OWORD *)(a2 + 16) = v32;
      result.n128_u64[0] = *(void *)(a3 + 8);
      if (result.n128_f64[0] >= *(double *)(a2 + 8)) {
        return result;
      }
      long long v33 = *(_OWORD *)(a2 + 32);
      long long v37 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)long long v41 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 80);
      __n128 v25 = *(__n128 *)a2;
      long long v29 = *(_OWORD *)(a2 + 16);
      long long v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      long long v23 = *(_OWORD *)(a3 + 48);
      long long v22 = *(_OWORD *)(a3 + 64);
      long long v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 32) = v24;
    }
    else
    {
      long long v33 = *(_OWORD *)(a1 + 32);
      long long v37 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)long long v41 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a1 + 80);
      __n128 v25 = *(__n128 *)a1;
      long long v29 = *(_OWORD *)(a1 + 16);
      long long v5 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v5;
      long long v7 = *(_OWORD *)(a3 + 48);
      long long v6 = *(_OWORD *)(a3 + 64);
      long long v8 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v6;
      *(_OWORD *)(a1 + 32) = v8;
    }
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v41;
    *(_OWORD *)(a3 + 76) = *(_OWORD *)&v41[12];
    *(_OWORD *)(a3 + 32) = v33;
    *(_OWORD *)(a3 + 48) = v37;
    __n128 result = v25;
    *(__n128 *)a3 = v25;
    *(_OWORD *)(a3 + 16) = v29;
  }
  return result;
}

BOOL sub_100C83150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) < *(double *)(a1 + 8))
      {
        long long v47 = *(_OWORD *)(a1 + 32);
        long long v53 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)long long v59 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v59[16] = *(_OWORD *)(a1 + 80);
        long long v35 = *(_OWORD *)a1;
        long long v41 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        long long v8 = *(_OWORD *)(a2 - 48);
        long long v7 = *(_OWORD *)(a2 - 32);
        long long v9 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 64) = v47;
        *(_OWORD *)(a2 - 48) = v53;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v59;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v59[12];
        *(_OWORD *)(a2 - 96) = v35;
        *(_OWORD *)(a2 - 80) = v41;
      }
      return result;
    case 3uLL:
      sub_100C82F60(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100C8354C(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      long long v21 = (long long *)(a1 + 96);
      long long v22 = (long long *)(a1 + 192);
      long long v23 = (long long *)(a1 + 288);
      sub_100C8354C(a1, a1 + 96, a1 + 192, a1 + 288);
      if (*(double *)(a2 - 88) >= *(double *)(a1 + 296)) {
        return 1;
      }
      long long v49 = *(_OWORD *)(a1 + 320);
      long long v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)long long v60 = *(_OWORD *)(a1 + 352);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 368);
      long long v37 = *v23;
      long long v43 = *(_OWORD *)(a1 + 304);
      long long v24 = *(_OWORD *)(a2 - 80);
      *long long v23 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      long long v26 = *(_OWORD *)(a2 - 48);
      long long v25 = *(_OWORD *)(a2 - 32);
      long long v27 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a1 + 352) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a2 - 64) = v49;
      *(_OWORD *)(a2 - 48) = v55;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v60;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v60[12];
      *(_OWORD *)(a2 - 96) = v37;
      *(_OWORD *)(a2 - 80) = v43;
      if (*(double *)(a1 + 296) >= *(double *)(a1 + 200)) {
        return 1;
      }
      long long v50 = *(_OWORD *)(a1 + 224);
      long long v56 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)long long v61 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 272);
      long long v38 = *v22;
      long long v44 = *(_OWORD *)(a1 + 208);
      long long v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 268) = *(_OWORD *)(a1 + 364);
      long long v29 = *(_OWORD *)(a1 + 304);
      *long long v22 = *v23;
      *(_OWORD *)(a1 + 208) = v29;
      *long long v23 = v38;
      *(_OWORD *)(a1 + 304) = v44;
      *(_OWORD *)(a1 + 364) = *(_OWORD *)&v61[12];
      BOOL v30 = *(double *)(a1 + 200) < *(double *)(a1 + 104);
      *(_OWORD *)(a1 + 336) = v56;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)v61;
      *(_OWORD *)(a1 + 320) = v50;
      if (!v30) {
        return 1;
      }
      long long v51 = *(_OWORD *)(a1 + 128);
      long long v57 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)long long v62 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 176);
      long long v39 = *v21;
      long long v45 = *(_OWORD *)(a1 + 112);
      long long v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)(a1 + 268);
      long long v32 = *(_OWORD *)(a1 + 208);
      *long long v21 = *v22;
      *(_OWORD *)(a1 + 112) = v32;
      *long long v22 = v39;
      *(_OWORD *)(a1 + 208) = v45;
      *(_OWORD *)(a1 + 268) = *(_OWORD *)&v62[12];
      BOOL v30 = *(double *)(a1 + 104) < *(double *)(a1 + 8);
      *(_OWORD *)(a1 + 240) = v57;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)v62;
      *(_OWORD *)(a1 + 224) = v51;
      if (!v30) {
        return 1;
      }
      long long v52 = *(_OWORD *)(a1 + 32);
      long long v58 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)long long v63 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
      long long v40 = *(_OWORD *)a1;
      long long v46 = *(_OWORD *)(a1 + 16);
      long long v33 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v33;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 172);
      long long v34 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v34;
      *long long v21 = v40;
      *(_OWORD *)(a1 + 112) = v46;
      *(_OWORD *)(a1 + 172) = *(_OWORD *)&v63[12];
      BOOL result = 1;
      *(_OWORD *)(a1 + 144) = v58;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v63;
      *(_OWORD *)(a1 + 128) = v52;
      return result;
    default:
      uint64_t v10 = a1 + 192;
      sub_100C82F60(a1, a1 + 96, a1 + 192);
      uint64_t v11 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    double v14 = *(double *)(v11 + 8);
    if (v14 < *(double *)(v10 + 8))
    {
      uint64_t v15 = *(void *)v11;
      long long v48 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)long long v54 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)&v54[16] = *(_OWORD *)(v11 + 80);
      uint64_t v16 = v12;
      long long v36 = *(_OWORD *)(v11 + 16);
      long long v42 = *(_OWORD *)(v11 + 32);
      while (1)
      {
        uint64_t v17 = a1 + v16;
        long long v18 = *(_OWORD *)(a1 + v16 + 240);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(a1 + v16 + 224);
        *(_OWORD *)(v17 + 336) = v18;
        *(_OWORD *)(v17 + 352) = *(_OWORD *)(a1 + v16 + 256);
        long long v19 = *(_OWORD *)(a1 + v16 + 208);
        *(_OWORD *)(v17 + 288) = *(_OWORD *)(a1 + v16 + 192);
        *(_OWORD *)(v17 + 304) = v19;
        *(_OWORD *)(a1 + v16 + 364) = *(_OWORD *)(a1 + v16 + 268);
        if (v16 == -192) {
          break;
        }
        v16 -= 96;
        if (v14 >= *(double *)(v17 + 104))
        {
          uint64_t v20 = a1 + v16 + 288;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *(void *)uint64_t v20 = v15;
      *(double *)(v20 + 8) = v14;
      *(_OWORD *)(v20 + 48) = v48;
      *(_OWORD *)(v20 + 64) = *(_OWORD *)v54;
      *(_OWORD *)(v20 + 76) = *(_OWORD *)&v54[12];
      ++v13;
      *(_OWORD *)(v20 + 16) = v36;
      *(_OWORD *)(v20 + 32) = v42;
      if (v13 == 8) {
        return v11 + 96 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 96;
    v11 += 96;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_100C8354C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100C82F60(a1, a2, a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    long long v27 = *(_OWORD *)(a3 + 32);
    long long v30 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)long long v33 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v33[16] = *(_OWORD *)(a3 + 80);
    long long v21 = *(_OWORD *)a3;
    long long v24 = *(_OWORD *)(a3 + 16);
    long long v9 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v9;
    long long v11 = *(_OWORD *)(a4 + 48);
    long long v10 = *(_OWORD *)(a4 + 64);
    long long v12 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 76) = *(_OWORD *)(a4 + 76);
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a3 + 64) = v10;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a4 + 64) = *(_OWORD *)v33;
    *(_OWORD *)(a4 + 76) = *(_OWORD *)&v33[12];
    *(_OWORD *)(a4 + 32) = v27;
    *(_OWORD *)(a4 + 48) = v30;
    result.n128_u64[1] = *((void *)&v21 + 1);
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v24;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      long long v28 = *(_OWORD *)(a2 + 32);
      long long v31 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)long long v34 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v34[16] = *(_OWORD *)(a2 + 80);
      long long v22 = *(_OWORD *)a2;
      long long v25 = *(_OWORD *)(a2 + 16);
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v13;
      long long v15 = *(_OWORD *)(a3 + 48);
      long long v14 = *(_OWORD *)(a3 + 64);
      long long v16 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 48) = v15;
      *(_OWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v34;
      *(_OWORD *)(a3 + 76) = *(_OWORD *)&v34[12];
      *(_OWORD *)(a3 + 32) = v28;
      *(_OWORD *)(a3 + 48) = v31;
      result.n128_u64[1] = *((void *)&v22 + 1);
      *(_OWORD *)a3 = v22;
      *(_OWORD *)(a3 + 16) = v25;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        long long v29 = *(_OWORD *)(a1 + 32);
        long long v32 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 80);
        __n128 v23 = *(__n128 *)a1;
        long long v26 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        long long v19 = *(_OWORD *)(a2 + 48);
        long long v18 = *(_OWORD *)(a2 + 64);
        long long v20 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)(a1 + 64) = v18;
        *(_OWORD *)(a1 + 32) = v20;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v35;
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v35[12];
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)(a2 + 48) = v32;
        __n128 result = v23;
        *(__n128 *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v26;
      }
    }
  }
  return result;
}

int8x16_t sub_100C836C4@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  v2.i64[0] = *(void *)a1 & 0x1111111111111111 | ((*(void *)a1 & 0x5555555555555555uLL) >> 1) & 0x3333333333333333;
  v2.i64[1] = (*(void *)a1 >> 1) & 0x4444444444444444 | *(void *)a1 & 0x2222222222222222;
  int8x16_t v3 = (int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_101D8A870);
  v2.i64[1] = (unint64_t)v2.i64[1] >> 1;
  __int8 v4 = *(unsigned char *)(a1 + 8);
  int8x16_t v5 = vorrq_s8(v3, (int8x16_t)v2);
  v3.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v3.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  int8x16_t v6 = vandq_s8(v5, v3);
  v3.i64[0] = 0xFF00FF00FF00FFLL;
  v3.i64[1] = 0xFF00FF00FF00FFLL;
  int8x16_t v7 = vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v6, 4uLL), v6), v3);
  int8x16_t v8 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v7, 8uLL), v7);
  v9.i64[0] = 4294901760;
  v9.i64[1] = 4294901760;
  int8x16_t v10 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x10uLL), v9);
  v9.i64[0] = 0xFFFFLL;
  v9.i64[1] = 0xFFFFLL;
  int8x16_t result = vorrq_s8(v10, vandq_s8(v8, v9));
  *a2 = result;
  a2[1].i8[0] = v4;
  return result;
}

int8x16_t sub_100C8374C@<Q0>(double *a1@<X0>, double *a2@<X1>, __int8 *a3@<X2>, int8x16_t *a4@<X8>)
{
  double v6 = fmax(*a2, -180.0);
  double v7 = fmax(*a1, -85.0511288);
  if (v6 >= 180.0) {
    double v8 = 1.0;
  }
  else {
    double v8 = (v6 + 180.0) / 360.0;
  }
  float64_t v18 = v8;
  double v9 = v7 * 3.14159265 / 180.0;
  if (v7 >= 85.0511288) {
    double v9 = 1.48442223;
  }
  long double v10 = sin(v9);
  long double v11 = log((v10 + 1.0) / (1.0 - v10));
  __int8 v12 = *a3;
  unint64_t v13 = 1 << *a3;
  v14.f64[0] = v18;
  v14.f64[1] = v11 / -12.5663706 + 0.5;
  int8x16_t v15 = (int8x16_t)vcvtq_u64_f64(vrndmq_f64(vmulq_n_f64(v14, (double)v13)));
  int8x16_t v16 = (int8x16_t)vdupq_n_s64(v13 - 1);
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v15, (uint64x2_t)v16), v16, v15);
  *a4 = result;
  a4[1].i8[0] = v12;
  return result;
}

double sub_100C83858(uint64_t a1, uint64_t a2)
{
  v2.i64[0] = a2;
  v2.i64[1] = a1;
  v3.i64[0] = 0xFFFFFFFFLL;
  v3.i64[1] = 0xFFFFFFFFLL;
  int8x16_t v4 = vorrq_s8((int8x16_t)vshlq_n_s64(v2, 0x10uLL), vandq_s8((int8x16_t)v2, v3));
  v3.i64[0] = 0xFFFF0000FFFFLL;
  v3.i64[1] = 0xFFFF0000FFFFLL;
  int64x2_t v5 = (int64x2_t)vandq_s8(v4, v3);
  unsigned long long v6 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v5, 8uLL), (int8x16_t)v5) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  unsigned long long v7 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v6, 4uLL), (int8x16_t)v6) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
  v3.i64[0] = 0x3333333333333333;
  v3.i64[1] = 0x3333333333333333;
  int8x16_t v8 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v7, 2uLL), (int8x16_t)v7), v3);
  int8x16_t v9 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)xmmword_101D8A880);
  v8.i64[0] *= 2;
  int64x2_t v10 = (int64x2_t)vandq_s8(vorrq_s8(v9, v8), (int8x16_t)xmmword_101D8A890);
  *(void *)&double result = vorrq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s64(v10, 1)).u64[0];
  return result;
}

double sub_100C838D8(double *a1, double *a2, __int8 *a3)
{
  sub_100C8374C(a1, a2, a3, &v4);
  return sub_100C83858(v4.i64[0], v4.i64[1]);
}

uint64_t sub_100C83908(uint64_t a1)
{
  return *(void *)a1 | qword_101D8A8A0[*(unsigned __int8 *)(a1 + 8)];
}

void sub_100C83924(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  sub_100C836C4(a1, &v20);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  double v6 = ldexp(1.0, *(unsigned __int8 *)(a1 + 8));
  uint64_t v7 = v20.i64[0] - a2;
  uint64_t v8 = v20.i64[0] + a2;
  if (v7 <= v8)
  {
    uint64_t v9 = (uint64_t)v6;
    uint64_t v10 = a2;
    uint64_t v11 = (v20.i64[1] - a2) & ~((v20.i64[1] - a2) >> 63);
    uint64_t v12 = v20.i64[1] + v10;
    if ((uint64_t)v6 - 1 >= v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = (uint64_t)v6 - 1;
    }
    do
    {
      uint64_t v14 = v11;
      if (v11 <= v13)
      {
        do
        {
          uint64_t v15 = v7;
          if (v7 < 0) {
            uint64_t v15 = v7 % v9 + v9;
          }
          uint64_t v16 = *(unsigned __int8 *)(a1 + 8);
          sub_100C83858(v15, v14 % v9);
          *(void *)&long long v19 = v17;
          *((void *)&v19 + 1) = v16;
          sub_1000B2380((uint64_t **)a3, (unint64_t *)&v19, &v19);
          ++v14;
        }
        while (v13 + 1 != v14);
      }
    }
    while (v7++ != v8);
  }
}

void sub_100C83A34(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100C83A4C(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v24 = 0;
  long long v25 = &v24;
  uint64_t v26 = 0xA812000000;
  long long v27 = sub_100177D64;
  long long v28 = sub_100177484;
  long long v29 = "";
  uint64_t v30 = 1;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  CFAbsoluteTime Current = -1.0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)&v32, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)(v25 + 17), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(v25 + 14), (const std::string *)(a1 + 8));
  char v6 = *(unsigned char *)(a1 + 36);
  uint64_t v7 = v25;
  *((unsigned char *)v25 + 161) = (v6 & 4) != 0;
  *((unsigned char *)v7 + 160) = (v6 & 2) != 0;
  uint64_t v8 = a2[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = a2[23];
  }
  else {
    uint64_t v9 = *((void *)a2 + 1);
  }
  uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 48);
  }
  if (v9 == v10)
  {
    if (v11 >= 0) {
      uint64_t v12 = (unsigned __int8 *)(a1 + 40);
    }
    else {
      uint64_t v12 = *(unsigned __int8 **)(a1 + 40);
    }
    if ((v8 & 0x80) != 0)
    {
      BOOL v20 = memcmp(*(const void **)a2, v12, *((void *)a2 + 1)) == 0;
    }
    else if (a2[23])
    {
      uint64_t v13 = v8 - 1;
      do
      {
        int v15 = *a2++;
        int v14 = v15;
        int v17 = *v12++;
        int v16 = v17;
        BOOL v19 = v13-- != 0;
        BOOL v20 = v14 == v16;
      }
      while (v20 && v19);
    }
    else
    {
      BOOL v20 = 1;
    }
  }
  else
  {
    BOOL v20 = 0;
  }
  *((unsigned char *)v7 + 162) = v20;
  long long v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100C83DA4;
  v23[3] = &unk_1022F04B0;
  v23[4] = v21;
  v23[5] = &v24;
  [objc_msgSend(objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:forClient:", @"CLBeaconFenceAuthorizationManager", @"CLBTLEFenceManager"), "fetchAllFencesCountWithReply:", v23];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100C83DB8;
  v22[3] = &unk_1022B6BE8;
  v22[4] = &v24;
  dispatch_group_notify(v21, (dispatch_queue_t)[objc_msgSend(objc_msgSend(a3, "silo"), "queue")], v22);
  dispatch_release(v21);
  _Block_object_dispose(&v24, 8);
  if (SHIBYTE(v37) < 0) {
    operator delete(*((void **)&v36 + 1));
  }
  if (SBYTE7(v36) < 0) {
    operator delete((void *)v35);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(*((void **)&v33 + 1));
  }
  if (SBYTE7(v33) < 0) {
    operator delete((void *)v32);
  }
}

void sub_100C83D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  sub_100C83D40(v12 + 48);
  _Unwind_Resume(a1);
}

uint64_t sub_100C83D40(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100C83DA4(uint64_t a1, __int16 a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 164) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100C83DB8(uint64_t a1)
{
  uint64_t v2 = sub_10071B604();
  int8x16_t v3 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);

  return sub_10071D5EC(v2, v3);
}

void sub_100C83DF8(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0xA812000000;
  uint64_t v10 = sub_100C8402C;
  int v11 = sub_100C840A0;
  uint64_t v12 = "";
  uint64_t v13 = 1;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0;
  CFAbsoluteTime Current = -1.0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)&v15, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)(v8 + 17), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(v8 + 14), (const std::string *)(a1 + 8));
  int8x16_t v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100C84118;
  void v6[3] = &unk_1022F04B0;
  uint64_t v6[4] = v4;
  v6[5] = &v7;
  [objc_msgSend(objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:forClient:", @"CLBeaconFenceAuthorizationManager", @"CLBTLEFenceManager"), "fetchAllFencesCountWithReply:", v6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100C8412C;
  v5[3] = &unk_1022B6BE8;
  v5[4] = &v7;
  dispatch_group_notify(v4, (dispatch_queue_t)[objc_msgSend(objc_msgSend(a2, "silo"), "queue")], v5);
  dispatch_release(v4);
  _Block_object_dispose(&v7, 8);
  if (SHIBYTE(v20) < 0) {
    operator delete(*((void **)&v19 + 1));
  }
  if (SBYTE7(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(*((void **)&v16 + 1));
  }
  if (SBYTE7(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_100C84004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  sub_100C83D40(v12 + 48);
  _Unwind_Resume(a1);
}

__n128 sub_100C8402C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v2 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  long long v3 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v3;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = 0;
  long long v4 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  __n128 result = *(__n128 *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return result;
}

void sub_100C840A0(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0)
  {
    long long v2 = *(void **)(a1 + 64);
    operator delete(v2);
  }
}

void sub_100C84118(uint64_t a1, __int16 a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 160) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100C8412C(uint64_t a1)
{
  uint64_t v2 = sub_10071B604();
  long long v3 = (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);

  return sub_10071DA28(v2, v3);
}

void sub_100C8416C(uint64_t a1, unsigned __int8 *a2)
{
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)long long v22 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)long long v20 = 0u;
  long long v21 = 0u;
  v18[0] = 1;
  *(_OWORD *)long long v19 = 0u;
  LODWORD(v25) = 0;
  v18[1] = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)v19, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)&__p[1], (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)v22, (const std::string *)(a1 + 8));
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  if (v5 == v6)
  {
    if (v7 >= 0) {
      uint64_t v8 = (unsigned __int8 *)(a1 + 40);
    }
    else {
      uint64_t v8 = *(unsigned __int8 **)(a1 + 40);
    }
    if ((v4 & 0x80) != 0)
    {
      BOOL v16 = memcmp(*(const void **)a2, v8, *((void *)a2 + 1)) == 0;
    }
    else if (a2[23])
    {
      uint64_t v9 = v4 - 1;
      do
      {
        int v11 = *a2++;
        int v10 = v11;
        int v13 = *v8++;
        int v12 = v13;
        BOOL v15 = v9-- != 0;
        BOOL v16 = v10 == v12;
      }
      while (v16 && v15);
    }
    else
    {
      BOOL v16 = 1;
    }
  }
  else
  {
    BOOL v16 = 0;
  }
  BYTE4(v25) = v16;
  HIDWORD(v25) = *(_DWORD *)(a1 + 168);
  uint64_t v17 = sub_10071B604();
  sub_10071DDB4(v17, (unsigned __int8 *)v18);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  if (SHIBYTE(v20[0]) < 0) {
    operator delete(v19[0]);
  }
}

void sub_100C842E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C842F8(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  sub_100134750(&__str, "unknown-client-bundleID");
  if (a2 && [a2 UTF8String]) {
    std::string::assign(&__str, (const std::string::value_type *)[a2 UTF8String]);
  }
  *(unsigned char *)a1 = 1;
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)(a1 + 16), &__str);
  memset(&v31, 0, sizeof(v31));
  for (uint64_t i = *(void *)(a4 + 8); i != a4; uint64_t i = *(void *)(i + 8))
  {
    if (*(char *)(i + 47) >= 0) {
      size_t v9 = *(unsigned __int8 *)(i + 47);
    }
    else {
      size_t v9 = *(void *)(i + 32);
    }
    sub_1001110E4((uint64_t)__p, v9 + 2);
    if ((v30 & 0x80u) == 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    if (v9)
    {
      if (*(char *)(i + 47) >= 0) {
        int v11 = (const void *)(i + 24);
      }
      else {
        int v11 = *(const void **)(i + 24);
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, ", ");
    if ((v30 & 0x80u) == 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    if ((v30 & 0x80u) == 0) {
      std::string::size_type v13 = v30;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v31, (const std::string::value_type *)v12, v13);
    if ((char)v30 < 0) {
      operator delete(__p[0]);
    }
  }
  std::string::operator=((std::string *)(a1 + 40), &v31);
  *(double *)(a1 + 88) = sub_10016C458();
  unint64_t v14 = *(void *)(a4 + 16);
  if (v14 >= 0xFF) {
    LOBYTE(v14) = -1;
  }
  *(unsigned char *)(a1 + 80) = v14;
  char v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = a3[23];
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *((void *)a3 + 1);
  }
  if (size == v17)
  {
    if (v18 >= 0) {
      long long v19 = a3;
    }
    else {
      long long v19 = *(unsigned __int8 **)a3;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v28 = memcmp(__str.__r_.__value_.__l.__data_, v19, __str.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      uint64_t v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
      p_str = &__str;
      do
      {
        int v23 = p_str->__r_.__value_.__s.__data_[0];
        p_str = (std::string *)((char *)p_str + 1);
        int v22 = v23;
        int v25 = *v19++;
        int v24 = v25;
        BOOL v27 = v20-- != 0;
        BOOL v28 = v22 == v24;
      }
      while (v28 && v27);
    }
    else
    {
      BOOL v28 = 1;
    }
  }
  else
  {
    BOOL v28 = 0;
  }
  *(unsigned char *)(a1 + 81) = v28;
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v15 & 0x80) == 0) {
      return;
    }
LABEL_53:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_53;
  }
}

void sub_100C84534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100C84584(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 72) - *(void *)(a2 + 64) + *(unsigned int *)(result + 64);
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  *(_DWORD *)(result + 64) = v4;
  if (*(_DWORD *)(a2 + 40))
  {
    __n128 result = sub_100C847B8(*(void *)(result + 96), *(void *)(result + 104), a2);
    if (result == *(void *)(v3 + 104))
    {
      unint64_t v5 = result;
      if (result >= *(void *)(v3 + 112))
      {
        __n128 result = sub_100C848B8((uint64_t *)(v3 + 96), a2);
      }
      else
      {
        sub_100C849C8(v3 + 112, (void *)result, a2);
        __n128 result = v5 + 40;
        *(void *)(v3 + 104) = v5 + 40;
      }
      *(void *)(v3 + 104) = result;
    }
  }
  int v6 = *(_DWORD *)(a2 + 40);
  if (v6 != *(_DWORD *)(v3 + 120))
  {
    ++*(_DWORD *)(v3 + 84);
    *(_DWORD *)(v3 + 120) = v6;
  }
  return result;
}

void sub_100C8465C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100C84664(uint64_t a1)
{
  double v2 = *(double *)(a1 + 88);
  *(double *)(a1 + 72) = sub_10016C458() - v2;
  uint64_t v3 = sub_10071B604();

  return sub_10071E164(v3, (unsigned __int8 *)a1);
}

void sub_100C846B4(void *a1, int a2)
{
  uint64_t v11 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v10 = 0u;
  uint64_t v6 = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  CFAbsoluteTime Current = -1.0;
  sub_100134750(&__str, "unknown-client-bundleID");
  if (a1 && [a1 UTF8String]) {
    std::string::assign(&__str, (const std::string::value_type *)[a1 UTF8String]);
  }
  LOBYTE(v6) = 1;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)v8, &__str);
  LODWORD(v11) = a2;
  uint64_t v4 = sub_10071B604();
  sub_10071E5C4(v4, (unsigned __int8 *)&v6);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v8[0]);
  }
}

void sub_100C8478C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_100C847B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2 && a1 != a3)
  {
    uint64_t v6 = a1 + 40;
    while (1)
    {
      if (*(_DWORD *)(v6 - 4) == *(_DWORD *)(a3 + 36))
      {
        uint64_t v3 = v6 - 40;
        if (sub_100C84840(v6 - 40, a3)) {
          break;
        }
      }
      uint64_t v7 = v6 + 40;
      if (v6 != a2)
      {
        BOOL v8 = v6 == a3;
        v6 += 40;
        if (!v8) {
          continue;
        }
      }
      return v7 - 40;
    }
  }
  return v3;
}

uint64_t sub_100C84840(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 36);
  if (v4)
  {
    uint64_t result = sub_101343C74((char *)(a1 + 8), (char *)(a2 + 8));
    if (!result) {
      return result;
    }
    int v4 = *(_DWORD *)(a1 + 36);
  }
  if ((v4 & 2) != 0 && *(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32)) {
    return 0;
  }
  if ((v4 & 4) != 0) {
    return *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34);
  }
  return 1;
}

uint64_t sub_100C848B8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_1001D7FD4();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_1002E5328((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  uint64_t v11 = &v7[40 * v3];
  std::string::size_type v13 = &v7[40 * v6];
  sub_100C849C8((uint64_t)(a1 + 2), v11, a2);
  int v12 = v11 + 40;
  sub_100C84A3C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100C84B48((uint64_t)&v10);
  return v8;
}

void sub_100C849B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C84B48((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_100C849C8(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = off_1022B3DE8;
  uint64_t result = a2 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    a2[3] = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t result = v6;
  }
  a2[4] = *(void *)(a3 + 32);
  return result;
}

uint64_t sub_100C84A3C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C84AB4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C84AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_100C849C8(a1, (void *)(i + a7), i + a3))
    i -= 40;
  return a6;
}

uint64_t sub_100C84B48(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100C85880(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100C859B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100C859C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 24);
  id v11 = [a2 description];
  int v12 = *(void **)(a1 + 32);
  [a2 center];
  [v12 valueOutForValueIn:];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [v7 stringByAppendingFormat:@"ValueInName,%@,ValueOutName,%@,Bin,%02lu,%@,RetrievedValueOut,%f\n", v9, v10, a3, v11, v13];
}

void sub_100C85F80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100C86058(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc((Class)CMPedometerBin);
  [a2 kValue];
  double v6 = v5;
  [a2 begin];
  double v8 = v7;
  [a2 end];
  id v10 = [v4 initWithValueOut:objc_msgSend(a2, "state") begin:v6 end:v8 state:v9];

  return [v3 addObject:v10];
}

id sub_100C861B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc((Class)CMStrideCalibrationData);
  [a2 begin];
  double v6 = v5;
  [a2 end];
  double v8 = v7;
  id v9 = [a2 state];
  [a2 valueOut];
  id v11 = [v4 initWithBegin:v9 end:v6 state:v8 kValue:v10];

  return [v3 addObject:v11];
}

void sub_100C862D8(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void *sub_100C86308(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  id v4 = a2;
  do
    sub_100C8636C(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *sub_100C8636C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  double v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    double v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000DA54C((uint64_t)v6, v12);
      double v8 = *(void **)v4;
      double v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    *(void *)unint64_t v14 = *a2;
    double v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *double v5 = *a2;
    double v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t sub_100C8645C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v38 = *a4;
  long long v39 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v36 = *a5;
  long long v37 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (std::__shared_weak_count *)a6[1];
  uint64_t v34 = *a6;
  long long v35 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v33[0] = xmmword_1024809F8;
  v33[1] = unk_102480A08;
  float v33[2] = xmmword_102480A18;
  sub_100D6AEB4(a1, a2, 6, &v38, &v36, &v34, a8, a7, v33);
  if (v35) {
    sub_1000DB0A0(v35);
  }
  if (v37) {
    sub_1000DB0A0(v37);
  }
  if (v39) {
    sub_1000DB0A0(v39);
  }
  *(void *)a1 = off_1022F0578;
  uint64_t v13 = *a3;
  *(void *)(a1 + 360) = *a3;
  uint64_t v14 = a3[1];
  *(void *)(a1 + 368) = v14;
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = *(void *)(a1 + 360);
  }
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0xFFFF00000096;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 416) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 432) = _Q1;
  *(_OWORD *)(a1 + 448) = _Q1;
  *(_OWORD *)(a1 + 464) = _Q1;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(void *)(a1 + 492) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 484) = 0xBFF0000000000000;
  *(void *)(a1 + 512) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 548) = 0;
  *(void *)(a1 + 532) = 0;
  *(void *)(a1 + 540) = 0;
  *(void *)(a1 + 524) = 0;
  *(void *)(a1 + 552) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a1 + 392) & 1) == 0) {
    *(_DWORD *)(a1 + 392) = 150;
  }
  *(void *)(a1 + 352) = objc_alloc_init((Class)NSMutableDictionary);
  *(void *)(a1 + 376) = [*(id *)(a1 + 72) classifyingStoreForHarvester:6];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F06A0);
  }
  uint64_t v20 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    sub_100D6B27C(a1, __p);
    long long v21 = v43 >= 0 ? __p : *(unsigned char **)__p;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    double v23 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
        - *(double *)(a1 + 96);
    int v24 = *(_DWORD *)(a1 + 392);
    *(_DWORD *)long long buf = 136315906;
    long long v48 = v21;
    __int16 v49 = 2048;
    uint64_t v50 = v22;
    __int16 v51 = 2048;
    double v52 = v23;
    __int16 v53 = 1024;
    int v54 = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s: %zu passes (last uploaded %.3fs ago), max %d passes", buf, 0x26u);
    if (SHIBYTE(v43) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    sub_100D6B27C(a1, v31);
    if (v32 >= 0) {
      uint64_t v26 = v31;
    }
    else {
      uint64_t v26 = (void **)v31[0];
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    double v28 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
        - *(double *)(a1 + 96);
    int v29 = *(_DWORD *)(a1 + 392);
    *(_DWORD *)long long __p = 136315906;
    *(void *)&__p[4] = v26;
    __int16 v41 = 2048;
    uint64_t v42 = v27;
    __int16 v43 = 2048;
    double v44 = v28;
    __int16 v45 = 1024;
    int v46 = v29;
    unsigned __int8 v30 = (char *)_os_log_send_and_compose_impl();
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSubHarvesterPass::CLSubHarvesterPass(id<CLIntersiloUniverse>, std::shared_ptr<CLPassHarvestInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Configuration>, std::shared_ptr<CLHarvestSystemInterface::StatusMonitor>, std::shared_ptr<CLHarvestSystemInterface::Controller>, CLHNetworkController *, CLHRequestStore *)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  return a1;
}

void sub_100C86928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  long long v37 = *(std::__shared_weak_count **)(v35 + 368);
  if (v37) {
    sub_1000DB0A0(v37);
  }
  sub_1003C0998(v35);
  _Unwind_Resume(a1);
}

id sub_100C869B0(uint64_t a1)
{
  return [*(id *)(a1 + 376) count];
}

id sub_100C869B8(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v4 = *(void **)(a1 + 376);

  return [v4 pruneSecondaryDataOlderThan:v3];
}

id sub_100C86A4C(uint64_t a1)
{
  return [*(id *)(a1 + 72) clearDataForHarvester:6];
}

uint64_t sub_100C86A58(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v18);
  long long v4 = unk_102480A08;
  *(_OWORD *)(a1 + 280) = xmmword_1024809F8;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = unk_102480A11;
  if (sub_100012960(a2, "Pass", v18)) {
    sub_1012B77D8(a1 + 280, (uint64_t)v18);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F06A0);
  }
  double v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    sub_100D6B27C(a1, v27);
    int v6 = v28;
    double v7 = (void **)v27[0];
    sub_1012B7520();
    double v8 = v27;
    if (v6 < 0) {
      double v8 = v7;
    }
    if (v17 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v20 = 2080;
    long long v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %s", buf, 0x16u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v27, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    sub_100D6B27C(a1, __p);
    int v11 = v17;
    unint64_t v12 = (void **)__p[0];
    sub_1012B7520();
    uint64_t v13 = __p;
    if (v11 < 0) {
      uint64_t v13 = v12;
    }
    if (v22 >= 0) {
      uint64_t v14 = buf;
    }
    else {
      uint64_t v14 = *(unsigned char **)buf;
    }
    int v23 = 136315394;
    int v24 = v13;
    __int16 v25 = 2080;
    uint64_t v26 = v14;
    char v15 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterPass::applyHarvestRules(const CLNameValuePair &)", "%s\n", v15);
    if (v15 != (char *)v27) {
      free(v15);
    }
  }
  return sub_10013F3C4(v18);
}

void sub_100C86D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

uint64_t sub_100C86D9C()
{
  if ((sub_1001073D0() & 2) != 0) {
    return 1;
  }
  sub_100103240();
  return (sub_1001073D0() >> 3) & 1;
}

id sub_100C86DD0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 376) homeArchive];
  if (v2)
  {
    double v3 = v2;
    id v4 = objc_alloc_init((Class)CLPPassCollectionRequest);
    [v4 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
    id v5 = sub_100881AD8([v3 mappedSecondaryDataByDestructivelyCombiningAllSecondaryData]);
    int v6 = *(void **)(a1 + 384);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100C86FC8;
    v19[3] = &unk_1022F0648;
    v19[5] = v3;
    v19[6] = a1;
    void v19[4] = v4;
    [v6 signData:v5 withCompletion:v19];
  }
  id v7 = [*(id *)(a1 + 376) workArchive];
  if (v7)
  {
    double v8 = v7;
    id v9 = objc_alloc_init((Class)CLPPassCollectionRequest);
    [v9 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
    id v10 = sub_100881AD8([v8 mappedSecondaryDataByDestructivelyCombiningAllSecondaryData]);
    int v11 = *(void **)(a1 + 384);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100C87060;
    v18[3] = &unk_1022F0648;
    void v18[5] = v8;
    v18[6] = a1;
    v18[4] = v9;
    [v11 signData:v10 withCompletion:v18];
  }
  id result = [*(id *)(a1 + 376) mainArchive];
  if (result)
  {
    uint64_t v13 = result;
    id v14 = objc_alloc_init((Class)CLPPassCollectionRequest);
    [v14 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
    id v15 = sub_100881AD8([v13 mappedSecondaryDataByDestructivelyCombiningAllSecondaryData]);
    uint64_t v16 = *(void **)(a1 + 384);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _OWORD v17[2] = sub_100C870F8;
    v17[3] = &unk_1022F0648;
    void v17[5] = v13;
    v17[6] = a1;
    v17[4] = v14;
    return [v16 signData:v15 withCompletion:v17];
  }
  return result;
}

void sub_100C86FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) setSignature:a2];
  [*(id *)(a1 + 40) overwritePrimaryObject:*(void *)(a1 + 32)];

  id v4 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(a1 + 40)];
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", [objc_msgSend(*(id *)(v3 + 80), "endpointSelector") passEndpoint]);
  [*(id *)(v3 + 80) submitRequest:v4];
}

void sub_100C87060(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) setSignature:a2];
  [*(id *)(a1 + 40) overwritePrimaryObject:*(void *)(a1 + 32)];

  id v4 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(a1 + 40)];
  -[CLHUploadRequest setEndpoint:[objc_msgSend(objc_msgSend(*(id *)(v3 + 80), "endpointSelector"), "passEndpoint")];
  [*(id *)(v3 + 80) submitRequest:v4];
}

void sub_100C870F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) setSignature:a2];
  [*(id *)(a1 + 40) overwritePrimaryObject:*(void *)(a1 + 32)];

  id v4 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(a1 + 40)];
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", [objc_msgSend(*(id *)(v3 + 80), "endpointSelector") passEndpoint]);
  [*(id *)(v3 + 80) submitRequest:v4];
}

uint64_t sub_100C87190(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 6);
  return 1;
}

id sub_100C87228(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v5, 6);
  *(_DWORD *)(a1 + 396) = 0xFFFF;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 416) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 432) = _Q1;
  *(_OWORD *)(a1 + 448) = _Q1;
  *(_OWORD *)(a1 + 464) = _Q1;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 492) = 0;
  *(void *)(a1 + 500) = 0;
  *(void *)(a1 + 484) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 508) = 0;
  *(void *)(a1 + 512) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0x7FFFFFFF;
  *(void *)(a1 + 532) = 0;
  *(void *)(a1 + 540) = 0;
  *(void *)(a1 + 524) = 0;
  *(unsigned char *)(a1 + 548) = 0;
  int v11 = *(void **)(a1 + 352);

  return [v11 removeAllObjects];
}

BOOL sub_100C87320(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56)))
  {
    if (*(double *)(a2 + 20) >= 0.0
      && (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) - *(double *)(a2 + 76) <= 900.0
      && *(_DWORD *)(a2 + 132) == 1)
    {
      return 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    uint64_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      double v6 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
         - *(double *)(a2 + 76);
      int v7 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)long long buf = 134218240;
      double v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GeniusForPass: invalid/stale location (age %.3fs, ref %d)", buf, 0x12u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F06A0);
      }
      (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
LABEL_22:
      id v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSubHarvesterPass::isPassHarvestingEligible(const CLDaemonLocation &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    id v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GeniusForPass harvesting not allowed", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F06A0);
      }
      goto LABEL_22;
    }
  }
  return result;
}

void sub_100C876C4(uint64_t a1)
{
  if ([*(id *)(a1 + 352) count])
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56)))
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 200))(*(void *)(a1 + 56)))
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F06A0);
        }
        uint64_t v2 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 68289282;
          int v7 = 0;
          __int16 v8 = 2082;
          id v9 = "";
          __int16 v10 = 2050;
          uint64_t v11 = 6;
          uint64_t v3 = "{\"msg%{public}.0s\":\"Pass Genius not authorized, not harvesting\", \"subHarvester\":%{public, location:"
               "CLSubHarvesterIdentifier}lld}";
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 0x1Cu);
        }
      }
      else
      {
        if (sub_100C87320(a1, a1 + 396))
        {
          uint64_t v4 = *(void **)(a1 + 352);
          v5[0] = _NSConcreteStackBlock;
          v5[1] = 3221225472;
          void v5[2] = sub_100C87A24;
          v5[3] = &unk_1022F0668;
          v5[4] = a1;
          [v4 enumerateKeysAndObjectsUsingBlock:v5];
          [*(id *)(a1 + 352) removeAllObjects];
          sub_100D6B950(a1);
          return;
        }
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F06A0);
        }
        uint64_t v2 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 68289282;
          int v7 = 0;
          __int16 v8 = 2082;
          id v9 = "";
          __int16 v10 = 2050;
          uint64_t v11 = 6;
          uint64_t v3 = "{\"msg%{public}.0s\":\"leeched postion is invalid or too old, not harvesting\", \"subHarvester\":%{public"
               ", location:CLSubHarvesterIdentifier}lld}";
          goto LABEL_16;
        }
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F06A0);
      }
      uint64_t v2 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289282;
        int v7 = 0;
        __int16 v8 = 2082;
        id v9 = "";
        __int16 v10 = 2050;
        uint64_t v11 = 6;
        uint64_t v3 = "{\"msg%{public}.0s\":\"Harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLS"
             "ubHarvesterIdentifier}lld}";
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      __int16 v10 = 2050;
      uint64_t v11 = 6;
      uint64_t v3 = "{\"msg%{public}.0s\":\"tried to harvest an empty pass cache\", \"subHarvester\":%{public, location:CLSubHarve"
           "sterIdentifier}lld}";
      goto LABEL_16;
    }
  }
}

void sub_100C87A24(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  [a2 doubleValue];
  double v6 = v5;
  double v7 = *(double *)(v4 + 472);
  if (vabdd_f64(v6, v7) > 900.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    __int16 v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289282;
      __int16 v20 = 2082;
      long long v21 = "";
      __int16 v22 = 2050;
      uint64_t v23 = 6;
      id v9 = "{\"msg%{public}.0s\":\"pass event over too old, skipping\", \"subHarvester\":%{public, location:CLSubHarveste"
           "rIdentifier}lld}";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&buf, 0x1Cu);
      return;
    }
    return;
  }
  if ((*(_DWORD *)(v4 + 392) & 0x80000000) != 0)
  {
LABEL_9:
    [a3 setAge:v7 - v6];
    id v10 = objc_alloc((Class)CLPLocation);
    long long v11 = *(_OWORD *)(v4 + 508);
    v17[6] = *(_OWORD *)(v4 + 492);
    void v17[7] = v11;
    v18[0] = *(_OWORD *)(v4 + 524);
    *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(v4 + 536);
    long long v12 = *(_OWORD *)(v4 + 444);
    _OWORD v17[2] = *(_OWORD *)(v4 + 428);
    v17[3] = v12;
    long long v13 = *(_OWORD *)(v4 + 476);
    v17[4] = *(_OWORD *)(v4 + 460);
    void v17[5] = v13;
    long long v14 = *(_OWORD *)(v4 + 412);
    v17[0] = *(_OWORD *)(v4 + 396);
    v17[1] = v14;
    id v15 = [v10 initWithDaemonLocation:v17];
    [a3 setLocation:v15];

    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    uint64_t v16 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289539;
      __int16 v20 = 2082;
      long long v21 = "";
      __int16 v22 = 2050;
      uint64_t v23 = 6;
      __int16 v24 = 2113;
      __int16 v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestPoint\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    [*(id *)(v4 + 376) writeSecondaryObject:a3 collectedAt:[a3 location] toField:2];
    ++*(_DWORD *)(v4 + 208);
    *(double *)(v4 + 552) = (*(double (**)(void))(**(void **)(v4 + 56) + 64))(*(void *)(v4 + 56));
    return;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 160))(v4) < (unint64_t)*(int *)(v4 + 392))
  {
    double v7 = *(double *)(v4 + 472);
    goto LABEL_9;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F06A0);
  }
  __int16 v8 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289282;
    __int16 v20 = 2082;
    long long v21 = "";
    __int16 v22 = 2050;
    uint64_t v23 = 6;
    id v9 = "{\"msg%{public}.0s\":\"max passes exceeded, skipping\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_18;
  }
}

uint64_t sub_100C87D84(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 20);
  if (v4 > 10000.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    double v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      sub_100D6B27C(a1, __p);
      double v6 = v47 >= 0 ? __p : *(unsigned char **)__p;
      uint64_t v7 = *(void *)(a2 + 4);
      uint64_t v8 = *(void *)(a2 + 12);
      uint64_t v9 = *(void *)(a2 + 20);
      *(_DWORD *)uint64_t buf = 136315906;
      long long v58 = v6;
      __int16 v59 = 2048;
      uint64_t v60 = v7;
      __int16 v61 = 2048;
      uint64_t v62 = v8;
      __int16 v63 = 2048;
      uint64_t v64 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Harvester: %s ignoring <%+.8f,%+.8f> since accuracy is too large (%.2fm)", buf, 0x2Au);
      if (SHIBYTE(v47) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    sub_100D6B27C(a1, v42);
    if (v43 >= 0) {
      uint64_t v38 = v42;
    }
    else {
      uint64_t v38 = (void **)v42[0];
    }
    uint64_t v39 = *(void *)(a2 + 4);
    uint64_t v40 = *(void *)(a2 + 12);
    uint64_t v41 = *(void *)(a2 + 20);
    *(_DWORD *)long long __p = 136315906;
    *(void *)&__p[4] = v38;
    __int16 v45 = 2048;
    uint64_t v46 = v39;
    __int16 v47 = 2048;
    uint64_t v48 = v40;
    __int16 v49 = 2048;
    uint64_t v50 = v41;
    long long v37 = (char *)_os_log_send_and_compose_impl();
    if (v43 < 0) {
      operator delete(v42[0]);
    }
LABEL_40:
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSubHarvesterPass::shouldIgnoreLocation(const CLDaemonLocation &)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 1;
  }
  double v11 = *(double *)(a1 + 416);
  double v12 = v4 * 0.5;
  BOOL v13 = v11 < 0.0 || v11 > v12;
  if (!v13
    && (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) - *(double *)(a1 + 472) < 7000.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    long long v14 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      sub_100D6B27C(a1, __p);
      int v15 = SHIBYTE(v47);
      uint64_t v16 = *(unsigned char **)__p;
      uint64_t v17 = *(void *)(a2 + 4);
      uint64_t v18 = *(void *)(a2 + 12);
      uint64_t v20 = *(void *)(a1 + 400);
      uint64_t v19 = *(void *)(a1 + 408);
      double v21 = *(double *)(a1 + 416);
      double v22 = *(double *)(a2 + 20);
      (*(void (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
      __int16 v24 = __p;
      if (v15 < 0) {
        __int16 v24 = v16;
      }
      *(_DWORD *)uint64_t buf = 136316674;
      double v25 = v23 - *(double *)(a1 + 472);
      long long v58 = v24;
      __int16 v59 = 2048;
      uint64_t v60 = v17;
      __int16 v61 = 2048;
      uint64_t v62 = v18;
      __int16 v63 = 2048;
      uint64_t v64 = v20;
      __int16 v65 = 2048;
      uint64_t v66 = v19;
      __int16 v67 = 2048;
      double v68 = v21 - v22;
      __int16 v69 = 2048;
      double v70 = v25;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Harvester: %s ignoring <%+.8f,%+.8f> since previous <%+.8f,%+.8f> is more accurate (%+.2fm) and fresh enough (%.2fs)", buf, 0x48u);
      if (SHIBYTE(v47) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F06A0);
    }
    sub_100D6B27C(a1, v42);
    int v26 = v43;
    uint64_t v27 = (void **)v42[0];
    uint64_t v28 = *(void *)(a2 + 4);
    uint64_t v29 = *(void *)(a2 + 12);
    uint64_t v31 = *(void *)(a1 + 400);
    uint64_t v30 = *(void *)(a1 + 408);
    double v32 = *(double *)(a1 + 416);
    double v33 = *(double *)(a2 + 20);
    (*(void (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    uint64_t v35 = v42;
    if (v26 < 0) {
      uint64_t v35 = v27;
    }
    *(_DWORD *)long long __p = 136316674;
    double v36 = v34 - *(double *)(a1 + 472);
    *(void *)&__p[4] = v35;
    __int16 v45 = 2048;
    uint64_t v46 = v28;
    __int16 v47 = 2048;
    uint64_t v48 = v29;
    __int16 v49 = 2048;
    uint64_t v50 = v31;
    __int16 v51 = 2048;
    uint64_t v52 = v30;
    __int16 v53 = 2048;
    double v54 = v32 - v33;
    __int16 v55 = 2048;
    double v56 = v36;
    long long v37 = (char *)_os_log_send_and_compose_impl();
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    goto LABEL_40;
  }
  return 0;
}

void sub_100C88314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C8834C(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  long long v5 = a4[7];
  long long v19 = a4[6];
  long long v20 = v5;
  v21[0] = a4[8];
  *(_OWORD *)((char *)v21 + 12) = *(long long *)((char *)a4 + 140);
  long long v6 = a4[3];
  long long v15 = a4[2];
  long long v16 = v6;
  long long v7 = a4[5];
  long long v17 = a4[4];
  long long v18 = v7;
  long long v8 = a4[1];
  long long v13 = *a4;
  long long v14 = v8;
  if ((a3 == 5 || !a3) && (sub_100C87D84(a1, (uint64_t)&v13) & 1) == 0)
  {
    long long v9 = v20;
    *(_OWORD *)(a1 + 492) = v19;
    *(_OWORD *)(a1 + 508) = v9;
    *(_OWORD *)(a1 + 524) = v21[0];
    *(_OWORD *)(a1 + 536) = *(_OWORD *)((char *)v21 + 12);
    long long v10 = v16;
    *(_OWORD *)(a1 + 428) = v15;
    *(_OWORD *)(a1 + 444) = v10;
    long long v11 = v18;
    *(_OWORD *)(a1 + 460) = v17;
    *(_OWORD *)(a1 + 476) = v11;
    long long v12 = v14;
    *(_OWORD *)(a1 + 396) = v13;
    *(_OWORD *)(a1 + 412) = v12;
    sub_100C876C4(a1);
  }
}

void sub_100C8841C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 1)
  {
    ++*(_DWORD *)(a1 + 204);
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56)))
    {
      double v5 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
      double v6 = v5 - *(double *)(a1 + 552);
      sub_1012B77B0(a1 + 280);
      if (v6 >= v7)
      {
        long long v13 = *(char **)a3;
        long long v12 = *(std::__shared_weak_count **)(a3 + 8);
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v14 = objc_alloc_init((Class)CLPPassLocation);
        sub_1007787D0(v13, (uint64_t)buf);
        if ((v26 & 0x80000000) == 0) {
          long long v15 = buf;
        }
        else {
          long long v15 = *(unsigned char **)buf;
        }
        [v14 setPassTypeId:[NSString stringWithUTF8String:v15]];
        if (SBYTE3(v26) < 0) {
          operator delete(*(void **)buf);
        }
        [v14 setPassSource:sub_10026DE08((uint64_t)v13)];
        sub_1007787F8((uint64_t)v13, (uint64_t *)v23);
        id v16 = objc_alloc_init((Class)NSMutableArray);
        long long v17 = *(_OWORD **)&v23[0];
        if (*(_OWORD **)&v23[0] != (_OWORD *)((char *)v23 + 8))
        {
          do
          {
            long long v18 = v17 + 2;
            if (*((char *)v17 + 55) < 0) {
              long long v18 = (void *)*v18;
            }
            [v16 addObject:[NSString stringWithUTF8String:v18]];
            long long v19 = (void *)*((void *)v17 + 1);
            if (v19)
            {
              do
              {
                long long v20 = v19;
                long long v19 = (void *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                long long v20 = (_OWORD *)*((void *)v17 + 2);
                BOOL v21 = *(void *)v20 == (void)v17;
                long long v17 = v20;
              }
              while (!v21);
            }
            long long v17 = v20;
          }
          while (v20 != (_OWORD *)((char *)v23 + 8));
        }
        [v14 setAssociatedStoreIds:v16];

        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F06A0);
        }
        double v22 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v25 = 2050;
          uint64_t v26 = 6;
          __int16 v27 = 2113;
          id v28 = v14;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"caching pass\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestPoint\":%{private, location:escape_only}@}", buf, 0x26u);
        }
        if ((unint64_t)[*(id *)(a1 + 352) count] >= 0x32) {
          [*(id *)(a1 + 352) removeObjectForKey:[objc_msgSend(*(id *)(a1 + 352), "allKeys") firstObject]];
        }
        [*(id *)(a1 + 352) setObject:v14 forKey:[NSNumber numberWithDouble:v5]];

        sub_100C876C4(a1);
        sub_1000DB264((uint64_t)v23, *((char **)&v23[0] + 1));
        if (v12) {
          sub_1000DB0A0(v12);
        }
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F06A0);
        }
        long long v8 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          double v9 = v5 - *(double *)(a1 + 552);
          *(_DWORD *)uint64_t buf = 134217984;
          *(double *)&uint8_t buf[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "GeniusForPass: last harvested pass %.3fs ago, not harvesting pass status", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F06A0);
          }
          double v10 = v5 - *(double *)(a1 + 552);
          LODWORD(v23[0]) = 134217984;
          *(double *)((char *)v23 + 4) = v10;
          long long v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterPass::onPassKitHarvestNotification(CLHarvestPassKitNotificationType, std::shared_ptr<CLHarvestPassKitNotification>)", "%s\n", v11);
          if (v11 != buf) {
            free(v11);
          }
        }
      }
    }
  }
}

void sub_100C888A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    sub_1000DB0A0(v20);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C88900(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(a1 + 384) = result;
  return result;
}

uint64_t sub_100C88934(void *a1)
{
  *a1 = off_1022F0578;
  uint64_t v2 = (std::__shared_weak_count *)a1[46];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1003C0998((uint64_t)a1);
}

void sub_100C88990(void *a1)
{
  *a1 = off_1022F0578;
  uint64_t v2 = (std::__shared_weak_count *)a1[46];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1003C0998((uint64_t)a1);

  operator delete();
}

void sub_100C88A00(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100C88A30()
{
  return sub_1012B748C((uint64_t)&xmmword_1024809F8, 0, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_100C890C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_100C8A10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_1000064D0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

NSURL *sub_100C8A198(uint64_t a1)
{
  uint64_t v1 = +[NSURL fileURLWithPath:a1 isDirectory:1];
  uint64_t v7 = 0;
  [(NSURL *)v1 setResourceValue:NSURLFileProtectionCompleteUntilFirstUserAuthentication forKey:NSFileProtectionKey error:&v7];
  if (v7)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F0728);
    }
    uint64_t v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 2114;
      long long v13 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor #Warning unable to set file protection\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F0728);
      }
    }
    uint64_t v3 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 2114;
      long long v13 = v1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor #Warning unable to set file protection", "{\"msg%{public}.0s\":\"#monitor #Warning unable to set file protection\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  [(NSURL *)v1 setResourceValue:&__kCFBooleanTrue forKey:NSURLIsExcludedFromBackupKey error:&v7];
  if (v7)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F0728);
    }
    double v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 2114;
      long long v13 = v1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor #Warning unable to exclude path from backup\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F0728);
      }
    }
    double v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 2114;
      long long v13 = v1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor #Warning unable to exclude path from backup", "{\"msg%{public}.0s\":\"#monitor #Warning unable to exclude path from backup\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return v1;
}

NSString *sub_100C8A4B4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(void *)(a1 + 56)) {
      goto LABEL_9;
    }
    uint64_t v2 = (void *)*v2;
  }
  else if (!*(unsigned char *)(a1 + 71))
  {
LABEL_9:
    sub_100052DDC(a1, (uint64_t)__p);
    if (v14 < 0)
    {
      uint64_t v7 = __p[1];
      operator delete(__p[0]);
      if (v7) {
        goto LABEL_11;
      }
    }
    else if (v14)
    {
LABEL_11:
      sub_100052DDC(a1, (uint64_t)__p);
      if (v14 >= 0) {
        double v5 = __p;
      }
      else {
        double v5 = (void **)__p[0];
      }
      double v6 = +[NSString stringWithUTF8String:v5];
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      return v6;
    }
    sub_1000A84C8(a1);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 127);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a1 + 112);
    }
    if (!v8) {
      return 0;
    }
    sub_1000A84C8(a1);
    uint64_t v11 = *(void *)(a1 + 104);
    uint64_t v10 = a1 + 104;
    uint64_t v9 = v11;
    if (*(char *)(v10 + 23) >= 0) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v9;
    }
    return +[NSString stringWithUTF8String:v12];
  }
  uint64_t v3 = +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:v2]);

  return [(NSURL *)v3 lastPathComponent];
}

void sub_100C8A60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C8ADCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
}

id sub_100C8B000(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 daemonCondition];
  id v5 = [*(id *)(a1 + 32) callbackHandler];

  return [v4 setCallbackHandler:v5];
}

void sub_100C8B07C(id a1, NSString *a2, CLDaemonMonitoringRecord *a3, BOOL *a4)
{
}

void sub_100C8C32C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100C8C35C(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100C8C3A4(float a1, uint64_t a2, uint64_t a3)
{
  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(_WORD *)(a3 + 8) = 2082;
}

void sub_100C8C3B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 18) = v2;
  *(void *)(a1 + 20) = a2;
  *(_WORD *)(a1 + 28) = v2;
}

char *sub_100C8C3CC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long __dst = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(v12, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1000DC48C(v10, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
  }
  sub_100134750(__p, "");
  sub_100110C00(a1, &__dst, (long long *)v12, (long long *)v10, -1, (long long *)__p, 0, 0, 1.79769313e308, 1.79769313e308, -1.0, -1.0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__dst);
  }
  return a1;
}

void sub_100C8C50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

char *sub_100C8C574(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, char a9)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(&__dsta, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long __dsta = *(_OWORD *)a2;
    uint64_t v23 = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(v20, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v20 = *(_OWORD *)a3;
    uint64_t v21 = *(void *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1000DC48C(v18, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)long long v18 = *(_OWORD *)a4;
    uint64_t v19 = *(void *)(a4 + 16);
  }
  if (*(char *)(a7 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a7, *(void *)(a7 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a7;
    uint64_t v17 = *(void *)(a7 + 16);
  }
  sub_100110C00(__dst, &__dsta, (long long *)v20, (long long *)v18, -1, (long long *)__p, a8, a9, 1.79769313e308, 1.79769313e308, -1.0, -1.0);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__dsta);
  }
  if (__dst + 224 != (char *)a5) {
    sub_10027C3B4(__dst + 224, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
  }
  return __dst;
}

void sub_100C8C6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C8C770(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void *)(a1 + 232) - v2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 224);
    uint64_t v5 = *(void *)(a2 + 232) - v4;
    if (v5)
    {
      unint64_t v6 = v3 >> 4;
      if (v6 == v5 >> 4 && *(_DWORD *)(a1 + 180) == *(_DWORD *)(a2 + 180))
      {
        if (v6 <= 1) {
          unint64_t v6 = 1;
        }
        uint64_t v7 = (double *)(v2 + 8);
        for (uint64_t i = (double *)(v4 + 8); *(v7 - 1) == *(i - 1) && *v7 == *i; i += 2)
        {
          v7 += 2;
          if (!--v6) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  if (*(void *)(a2 + 232) != *(void *)(a2 + 224)
    || *(double *)(a1 + 72) != *(double *)(a2 + 72)
    || *(double *)(a1 + 80) != *(double *)(a2 + 80)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || *(double *)(a1 + 96) != *(double *)(a2 + 96)
    || *(void *)(a1 + 160) != *(void *)(a2 + 160))
  {
    return 0;
  }
  return *(_DWORD *)(a1 + 180) == *(_DWORD *)(a2 + 180);
}

uint64_t sub_100C8C864(uint64_t a1)
{
  sub_10010F274((uint64_t)v47);
  sub_100132EFC(v48, (uint64_t)"Fence, ", 7);
  uint64_t v2 = sub_100132EFC(v48, (uint64_t)"[", 1);
  int v3 = *(char *)(a1 + 71);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 48;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 56);
  }
  unint64_t v6 = sub_100132EFC(v2, v4, v5);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)"]/", 2);
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = *(void *)a1;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  uint64_t v11 = sub_100132EFC(v7, v9, v10);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)"/", 1);
  int v13 = *(char *)(a1 + 47);
  if (v13 >= 0) {
    uint64_t v14 = a1 + 24;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 24);
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 32);
  }
  sub_100132EFC(v12, v14, v15);
  if (*(void *)(a1 + 232) == *(void *)(a1 + 224))
  {
    if (*(double *)(a1 + 72) == 1.79769313e308 && *(double *)(a1 + 80) == 1.79769313e308)
    {
      id v16 = sub_100132EFC(v48, (uint64_t)", latitude, ", 12);
      sub_100132EFC(v16, (uint64_t)"DBL_MAX", 7);
      uint64_t v17 = sub_100132EFC(v48, (uint64_t)", longitude, ", 13);
      sub_100132EFC(v17, (uint64_t)"DBL_MAX", 7);
    }
    else
    {
      long long v18 = sub_100132EFC(v48, (uint64_t)", latitude, ", 12);
      uint64_t v19 = *v18;
      *(uint64_t *)((char *)v18 + *(void *)(*v18 - 24) + 24) = 13;
      *(uint64_t *)((char *)v18 + *(void *)(v19 - 24) + 16) = 8;
      *(_DWORD *)((char *)v18 + *(void *)(v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v18 + *(void *)(v19 - 24) + 8) & 0xFFFFFEFB | 4;
      std::ostream::operator<<();
      long long v20 = sub_100132EFC(v48, (uint64_t)", longitude, ", 13);
      uint64_t v21 = *v20;
      *(uint64_t *)((char *)v20 + *(void *)(*v20 - 24) + 24) = 13;
      *(uint64_t *)((char *)v20 + *(void *)(v21 - 24) + 16) = 8;
      *(_DWORD *)((char *)v20 + *(void *)(v21 - 24) + 8) = *(_DWORD *)((unsigned char *)v20 + *(void *)(v21 - 24) + 8) & 0xFFFFFEFB | 4;
      std::ostream::operator<<();
    }
  }
  else
  {
    sub_100132EFC(v48, (uint64_t)", latitude, ", 12);
    std::ostream::operator<<();
    sub_100132EFC(v48, (uint64_t)", longitude, ", 13);
    std::ostream::operator<<();
  }
  sub_100132EFC(v48, (uint64_t)", refFrame, ", 12);
  std::ostream::operator<<();
  double v22 = sub_100132EFC(v48, (uint64_t)", distance, ", 12);
  uint64_t v23 = *v22;
  *(uint64_t *)((char *)v22 + *(void *)(*v22 - 24) + 16) = 1;
  *(_DWORD *)((char *)v22 + *(void *)(v23 - 24) + 8) = *(_DWORD *)((unsigned char *)v22 + *(void *)(v23 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v24 = sub_100132EFC(v48, (uint64_t)", eFistance, ", 13);
  uint64_t v25 = *v24;
  *(uint64_t *)((char *)v24 + *(void *)(*v24 - 24) + 16) = 1;
  *(_DWORD *)((char *)v24 + *(void *)(v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v24 + *(void *)(v25 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v26 = sub_100132EFC(v48, (uint64_t)", lDown, ", 9);
  uint64_t v27 = *v26;
  *(uint64_t *)((char *)v26 + *(void *)(*v26 - 24) + 16) = 1;
  *(_DWORD *)((char *)v26 + *(void *)(v27 - 24) + 8) = *(_DWORD *)((unsigned char *)v26 + *(void *)(v27 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v28 = sub_100132EFC(v48, (uint64_t)", time, ", 8);
  uint64_t v29 = *v28;
  *(uint64_t *)((char *)v28 + *(void *)(*v28 - 24) + 16) = 1;
  *(_DWORD *)((char *)v28 + *(void *)(v29 - 24) + 8) = *(_DWORD *)((unsigned char *)v28 + *(void *)(v29 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v30 = sub_100132EFC(v48, (uint64_t)", ctime, ", 9);
  uint64_t v31 = *v30;
  *(uint64_t *)((char *)v30 + *(void *)(*v30 - 24) + 16) = 1;
  *(_DWORD *)((char *)v30 + *(void *)(v31 - 24) + 8) = *(_DWORD *)((unsigned char *)v30 + *(void *)(v31 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v32 = sub_100132EFC(v48, (uint64_t)", flags, ", 9);
  if (*(void *)(a1 + 160)) {
    char v33 = 69;
  }
  else {
    char v33 = 45;
  }
  char v50 = v33;
  sub_100132EFC(v32, (uint64_t)&v50, 1);
  if ((*(void *)(a1 + 160) & 2) != 0) {
    char v34 = 88;
  }
  else {
    char v34 = 45;
  }
  char v50 = v34;
  sub_100132EFC(v48, (uint64_t)&v50, 1);
  if ((~*(_DWORD *)(a1 + 160) & 5) != 0) {
    char v35 = 45;
  }
  else {
    char v35 = 67;
  }
  char v50 = v35;
  sub_100132EFC(v48, (uint64_t)&v50, 1);
  int v36 = _os_feature_enabled_impl();
  char v37 = 45;
  if (v36)
  {
    if ((*(void *)(a1 + 160) & 0x40) != 0) {
      char v37 = 72;
    }
    else {
      char v37 = 45;
    }
  }
  char v50 = v37;
  sub_100132EFC(v48, (uint64_t)&v50, 1);
  if ((*(void *)(a1 + 160) & 0x10) != 0) {
    char v38 = 77;
  }
  else {
    char v38 = 45;
  }
  char v50 = v38;
  sub_100132EFC(v48, (uint64_t)&v50, 1);
  if (*(void *)(a1 + 232) != *(void *)(a1 + 224))
  {
    uint64_t v39 = 8;
    goto LABEL_46;
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    uint64_t v39 = 64;
LABEL_46:
    if ((*(void *)(a1 + 160) & v39) != 0) {
      char v40 = 78;
    }
    else {
      char v40 = 45;
    }
    goto LABEL_49;
  }
  char v40 = 45;
LABEL_49:
  char v50 = v40;
  sub_100132EFC(v48, (uint64_t)&v50, 1);
  if ((*(void *)(a1 + 160) & 0x20) != 0) {
    char v41 = 76;
  }
  else {
    char v41 = 45;
  }
  char v50 = v41;
  sub_100132EFC(v48, (uint64_t)&v50, 1);
  if ((*(void *)(a1 + 160) & 0x80) != 0) {
    char v42 = 83;
  }
  else {
    char v42 = 45;
  }
  char v50 = v42;
  sub_100132EFC(v48, (uint64_t)&v50, 1);
  sub_100132EFC(v48, (uint64_t)", key, ", 7);
  std::ostream::operator<<();
  char v43 = sub_100132EFC(v48, (uint64_t)", throttled, ", 13);
  if (*(unsigned char *)(a1 + 188)) {
    char v44 = 89;
  }
  else {
    char v44 = 78;
  }
  char v50 = v44;
  sub_100132EFC(v43, (uint64_t)&v50, 1);
  sub_100132EFC(v48, (uint64_t)", polygon, ", 11);
  std::ostream::operator<<();
  sub_100132EFC(v48, (uint64_t)", envType, ", 11);
  std::ostream::operator<<();
  sub_100132EFC(v48, (uint64_t)", locType, ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v47
  v48[0] = v45;
  if (v49 < 0) {
    operator delete((void *)v48[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100C8D13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C8D16C(uint64_t a1, int a2, int a3)
{
  sub_10010F274((uint64_t)v23);
  sub_100132EFC(v24, (uint64_t)"{ \"vertices\": [ ", 16);
  if (*(void *)(a1 + 232) != *(void *)(a1 + 224))
  {
    unint64_t v6 = sub_100132EFC(v24, (uint64_t)"{\"latitude\": ", 13);
    uint64_t v7 = *v6;
    *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 16) = 8;
    *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
    int v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_100132EFC(v8, (uint64_t)", \"longitude\": ", 15);
    uint64_t v10 = *v9;
    *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 16) = 8;
    *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_100132EFC(v11, (uint64_t)"}", 1);
    if (a3 <= a2) {
      int v12 = a2;
    }
    else {
      int v12 = a3;
    }
    uint64_t v13 = v12 - (uint64_t)a2 + 1;
    for (uint64_t i = 16 * a2; --v13; i += 16)
    {
      uint64_t v15 = sub_100132EFC(v24, (uint64_t)", {\"latitude\":", 14);
      uint64_t v16 = *v15;
      *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 16) = 8;
      *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
      uint64_t v17 = (void *)std::ostream::operator<<();
      long long v18 = sub_100132EFC(v17, (uint64_t)",\"longitude\":", 13);
      uint64_t v19 = *v18;
      *(uint64_t *)((char *)v18 + *(void *)(*v18 - 24) + 16) = 8;
      *(_DWORD *)((char *)v18 + *(void *)(v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v18 + *(void *)(v19 - 24) + 8) & 0xFFFFFEFB | 4;
      long long v20 = (void *)std::ostream::operator<<();
      sub_100132EFC(v20, (uint64_t)"}", 1);
    }
  }
  sub_100132EFC(v24, (uint64_t)" ] }", 4);
  std::stringbuf::str();
  *(void *)((char *)v23
  v24[0] = v21;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100C8D58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C8D5B4(uint64_t a1)
{
  signed int v1 = llround(*(double *)(a1 + 72) * 10000.0);
  signed int v2 = llround(*(double *)(a1 + 80) * 10000.0);
  return 1540483477
       * ((1540483477 * ((((0xC6A4A7935BD1E995 * v2) >> 32) >> 15) ^ (1540483477 * v2))) ^ (678072505 * ((((0xC6A4A7935BD1E995 * v1) >> 32) >> 15) ^ (1540483477 * v1)) - 430675100))
       - 430675100;
}

unint64_t sub_100C8D62C(uint64_t a1)
{
  signed int v2 = (double *)(a1 + 72);
  int v3 = (double *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 224);
  if (*(void *)(a1 + 232) != v4)
  {
    signed int v2 = *(double **)(a1 + 224);
    int v3 = (double *)(v4 + 8);
  }
  double v5 = *v3;
  double v6 = *v2;
  sub_100111050((const void **)(a1 + 48), 47, (uint64_t)&v24);
  int v7 = *(char *)(a1 + 23);
  if (v7 >= 0) {
    int v8 = (const std::string::value_type *)a1;
  }
  else {
    int v8 = *(const std::string::value_type **)a1;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 8);
  }
  uint64_t v10 = std::string::append(&v24, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v25, 47);
  std::string v26 = v25;
  memset(&v25, 0, sizeof(v25));
  uint64_t v14 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v13 = a1 + 24;
  int v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(v13 + 8);
  }
  long long v18 = std::string::append(&v26, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v28 = v18->__r_.__value_.__r.__words[2];
  long long v27 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  unint64_t v20 = sub_10011116C((uint64_t)&v26, (char *)&v27);
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)v27);
  }
  unint64_t v21 = llround(v6 * 1000000.0);
  unint64_t v22 = llround(v5 * 1000000.0);
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v20) ^ ((0xC6A4A7935BD1E995 * v20) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v22) ^ ((0xC6A4A7935BD1E995 * v22) >> 47)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47))))
       + 3864292196u;
}

void sub_100C8D7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C8D84C(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)id result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(double *)(result + 8) = a9;
  *(double *)(result + 16) = a10;
  *(double *)(result + 24) = a11;
  *(double *)(result + 32) = a12;
  *(double *)(result + 40) = a13;
  *(double *)(result + 48) = a14;
  *(double *)(result + 56) = a15;
  *(double *)(result + 64) = a16;
  *(void *)(result + 72) = a4;
  *(_DWORD *)(result + 80) = a5;
  *(void *)(result + 88) = a6;
  *(_DWORD *)(result + 96) = a7;
  *(void *)(result + 104) = a17;
  *(void *)(result + 112) = a18;
  *(_DWORD *)(result + 120) = a8;
  *(void *)(result + 124) = a19;
  *(void *)(result + 132) = a20;
  return result;
}

uint64_t sub_100C8D88C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

double sub_100C8D894(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

double sub_100C8D89C(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double sub_100C8D8A4(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

uint64_t sub_100C8D8AC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_100C8D8B4(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

double sub_100C8D8BC(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

double sub_100C8D8C4(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

BOOL sub_100C8D8CC(uint64_t *a1)
{
  int v9 = 0;
  sub_10014F674((uint64_t)&v4, &v9);
  uint64_t v5 = *a1;
  uint64_t v6 = -1;
  BOOL v2 = sub_1001447B8(&v4);
  if (v8 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_100C8D934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C8D950(uint64_t a1)
{
  return *(void *)(a1 + 124);
}

_DWORD *sub_100C8D960(_DWORD *result, int a2, int a3, int a4, int a5)
{
  *id result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t sub_100C8D96C(uint64_t a1)
{
  if (!*(void *)(a1 + 648)) {
    sub_1000067EC();
  }
  return a1 + 648;
}

void sub_100C8DA2C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F09E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPlaceInferenceSubscription::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F09E0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      std::string::size_type v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPlaceInferenceSubscription::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C99E08(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C8DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C8DC08(uint64_t a1)
{
  if (!*(void *)(a1 + 656)) {
    sub_10000973C();
  }
  return a1 + 656;
}

uint64_t sub_100C8DCC8(uint64_t a1)
{
  if (!*(void *)(a1 + 664)) {
    sub_1001AE6FC();
  }
  return a1 + 664;
}

void sub_100C8DD88(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F09E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPlaceInferenceSubscription::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F09E0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      std::string::size_type v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPlaceInferenceSubscription::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C9A07C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C8DF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C8E030(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_1022F0778;
  *(_DWORD *)(v6 + 41) = 0x10000;
  *(unsigned char *)(v6 + 45) = 0;
  *(void *)(v6 + 48) = 0xBFF0000000000000;
  *(void *)(v6 + 56) = 0;
  *(void *)(a1 + 64) = objc_alloc_init(CLPlaceInferenceSubscriptionAdapter);
  *(void *)(a1 + 80) = [objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(a1 + 160) = off_1022B6DB8;
  uint64_t v7 = operator new(0x20uLL);
  v7[1] = 0;
  _OWORD v7[2] = 0;
  *uint64_t v7 = off_1022B6DF0;
  *((_DWORD *)v7 + 6) = 31337;
  *(void *)(a1 + 168) = v7 + 3;
  *(void *)(a1 + 176) = v7;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0xBFF0000000000000;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 244) = 257;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0xBFF0000000000000;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 296) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 304) = _Q1;
  *(_OWORD *)(a1 + 320) = xmmword_101D47CB0;
  *(_DWORD *)(a1 + 336) = -1;
  *(void *)(a1 + 344) = 0xBFF0000000000000;
  *(void *)(a1 + 352) = -1;
  *(void *)(a1 + 360) = 0xBFF0000000000000;
  *(void *)(a1 + 368) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0xBFF0000000000000;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0xBFF0000000000000;
  *(void *)(a1 + 448) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 456) = xmmword_101D47CB0;
  *(_DWORD *)(a1 + 472) = -1;
  *(void *)(a1 + 480) = 0xBFF0000000000000;
  *(void *)(a1 + 488) = -1;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_DWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = -1;
  *(void *)(a1 + 552) = -1082130432;
  *(void *)(a1 + 560) = 0xBF800000FFFFFFFFLL;
  *(void *)(a1 + 568) = 3212836864;
  *(unsigned char *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(a1 + 592) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(a1 + 600) = objc_alloc_init((Class)NSDictionary);
  sub_101171D90(a1 + 608);
  *(_DWORD *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 680) = &off_102397680;
  *(void *)(a1 + 688) = 0;
  id v13 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLRoutineMonitor"];
  *(void *)(a1 + 56) = v13;
  [v13 registerDelegate:*(void *)(a1 + 64) inSilo:objc_msgSend(*(id *)(a1 + 8), "silo")];
  __int16 v14 = *(void **)(a1 + 80);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100C8E390;
  void v16[3] = &unk_1022A3020;
  v16[4] = a1;
  [v14 setHandler:v16];
  *(void *)(a1 + 688) = [objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLAnalyticsLogger"];
  return a1;
}

void sub_100C8E30C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 423) < 0) {
    operator delete(*(void **)(v1 + 400));
  }
  if (*(char *)(v1 + 287) < 0) {
    operator delete(*(void **)(v1 + 264));
  }
  sub_10012E38C(v2);
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C8E390(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  BOOL v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    *(_DWORD *)uint64_t buf = 138543362;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#dsa client '%{public}@' starts receiving CLPlaceInferenceSubscription updates", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPlaceInferenceSubscription::CLPlaceInferenceSubscription(Delegate *, id<CLIntersiloUniverse>, CLClientManagerAuthorizationContext *, CLClientKeyPath *)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100C8E554(v1);
  return sub_100C8ECEC(v1);
}

void sub_100C8E554(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 120) copy];
  id v3 = v2;
  if (*(void *)(a1 + 104) == 5 && *(void *)(a1 + 136))
  {
    unsigned int v4 = [v2 count];
    id v3 = sub_1006DA380(v3, *(void *)(a1 + 136));
    uint64_t v5 = [v3 count];
    id v6 = objc_alloc_init((Class)NSDateFormatter);
    [v6 setDateStyle:1];
    [v6 setTimeStyle:4];
    [v6 setFormatterBehavior:1040];
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      id v8 = [v6 stringFromDate:*(void *)(a1 + 136)];
      *(_DWORD *)uint64_t buf = 134218498;
      id v31 = (id)(v4 - v5);
      __int16 v32 = 2112;
      id v33 = v8;
      __int16 v34 = 2048;
      char v35 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#placeInfer filtered out %lu locations predating request date (%@), %lu locations remaining", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      id v18 = [v6 stringFromDate:*(void *)(a1 + 136)];
      int v24 = 134218498;
      id v25 = (id)(v4 - v5);
      __int16 v26 = 2112;
      id v27 = v18;
      __int16 v28 = 2048;
      uint64_t v29 = v5;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    int v9 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#placeInfer client authorized for coarse locations only, sending fallback message", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_14;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    LOWORD(v24) = 0;
    std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v17);
    if (v17 == (char *)buf) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
  if (!*(void *)(a1 + 56))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    __int16 v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#placeInfer no valid RoutineMonitor configured, sending fallback message", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_14;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    LOWORD(v24) = 0;
    std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v17);
    if (v17 == (char *)buf) {
      goto LABEL_14;
    }
LABEL_39:
    free(v17);
LABEL_14:
    sub_100C8FA90(a1, v3);
    return;
  }
  id v10 = [objc_alloc((Class)RTPlaceInferenceOptions) initWithFidelityPolicy:*(void *)(a1 + 96) locations:v3 accessPoints:objc_msgSend(*(id *)(a1 + 152), "copy") clientIdentifier:objc_msgSend(*(id *)(a1 + 24), "legacyClientKey")];
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  char v11 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    id v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#placeInfer running fetchPlaceInferencesWithOptions: %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    int v24 = 138412290;
    id v25 = v10;
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  uint64_t v13 = *(void *)(a1 + 168);
  int v12 = *(std::__shared_weak_count **)(a1 + 176);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v12);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  int v15 = *(void **)(a1 + 56);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3321888768;
  _OWORD v21[2] = sub_100C8FDF4;
  v21[3] = &unk_1022F0878;
  v21[6] = a1;
  v21[7] = v13;
  unint64_t v22 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  double v23 = Current;
  v21[4] = v10;
  v21[5] = v3;
  [v15 fetchPlaceInferencesWithOptions:v10 withReply:v21];
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_100C8ECB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C8ECEC(uint64_t a1)
{
  [*(id *)(a1 + 152) removeAllObjects];
  [*(id *)(a1 + 120) removeAllObjects];
  sub_100C8FA38(a1);
  if (*(unsigned char *)(a1 + 43))
  {
    uint64_t v2 = sub_100C8DCC8(a1);
    [*(id *)(*(void *)v2 + 16) unregister:*(void *)(*(void *)v2 + 8) forNotification:3];
  }
  [*(id *)(a1 + 80) setNextFireDelay:1.79769313e308];
  *(unsigned char *)(a1 + 42) = 0;

  return sub_1010A4BFC(a1);
}

uint64_t sub_100C8ED70(uint64_t a1)
{
  *(void *)a1 = off_1022F0778;
  [*(id *)(a1 + 64) invalidate];

  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  [*(id *)(a1 + 80) invalidate];

  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 120) = 0;

  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;

  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;

  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;

  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 688) = 0;
  uint64_t v2 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 656);
  *(void *)(a1 + 656) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 648);
  *(void *)(a1 + 648) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  sub_10012E38C((void *)(a1 + 160));

  return sub_100029A7C(a1);
}

void sub_100C8EF20(uint64_t a1)
{
  sub_100C8ED70(a1);

  operator delete();
}

void sub_100C8EF58(uint64_t a1)
{
  [*(id *)(a1 + 8) silo];
  if ([*(id *)(a1 + 16) isAuthorizedForServiceType:12])
  {
    switch(*(void *)(a1 + 104))
    {
      case 0:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 88) = 0x3FB999999999999ALL;
        *(void *)(a1 + 96) = 0;
        goto LABEL_42;
      case 1:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 88) = 0x3FB999999999999ALL;
        *(void *)(a1 + 96) = 4;
        goto LABEL_42;
      case 2:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 88) = 0x3FF8000000000000;
        *(void *)(a1 + 96) = 5;
        goto LABEL_21;
      case 3:
        *(_DWORD *)(a1 + 72) = 0;
        *(void *)(a1 + 88) = 0x4014000000000000;
        *(void *)(a1 + 96) = 7;
LABEL_21:
        *(unsigned char *)(a1 + 43) = 1;
        goto LABEL_43;
      case 4:
        *(_DWORD *)(a1 + 72) = 0;
        *(void *)(a1 + 88) = 0x4014000000000000;
        *(void *)(a1 + 96) = 7;
        *(unsigned char *)(a1 + 43) = 1;
        *(unsigned char *)(a1 + 45) = 1;
        return;
      case 5:
        double Current = CFAbsoluteTimeGetCurrent();
        sub_1000C7F88(buf);
        v23[0] = 0.0;
        if (sub_1000A699C(*(uint64_t *)buf, "PlaceInferenceTimestampOfLastBestLocationRequestForFidelityLowWithPreciseLocation", v23))double v7 = v23[0]; {
        else
        }
          double v7 = -1.0;
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F0A00);
        }
        id v8 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
        {
          uint64_t v9 = *(void *)(a1 + 112);
          *(_DWORD *)uint64_t buf = 134217984;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#placeInfer fFidelityLowWithPreciseLocationQueriesCFIndex Count = %lu", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          uint64_t v17 = *(void *)(a1 + 112);
          LODWORD(v23[0]) = 134217984;
          *(void *)((char *)v23 + 4) = v17;
          id v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v18);
          if (v18 != buf) {
            free(v18);
          }
        }
        uint64_t v10 = *(void *)(a1 + 112);
        if (v10 == 2)
        {
          if (Current - v7 <= 43200.0)
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            __int16 v16 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#placeInfer no GPS budget remaining, configuring a cached location request", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022F0A00);
              }
              LOWORD(v23[0]) = 0;
              unint64_t v22 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v22);
              if (v22 != buf) {
                free(v22);
              }
            }
            *(_DWORD *)(a1 + 72) = 1;
            *(void *)(a1 + 88) = 0x4008000000000000;
            *(void *)(a1 + 96) = 24;
            *(unsigned char *)(a1 + 43) = 0;
            *(unsigned char *)(a1 + 45) = 0;
            uint64_t v12 = 3;
            goto LABEL_65;
          }
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          uint64_t v13 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#placeInfer GPS budget is still available, configuring a smoothed GPS query", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            LOWORD(v23[0]) = 0;
            unint64_t v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v21);
            if (v21 != buf) {
              free(v21);
            }
          }
          *(_DWORD *)(a1 + 72) = 0;
          uint64_t v14 = 0x4044000000000000;
        }
        else
        {
          if (v10 == 1)
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            char v11 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#placeInfer configuring a high accuracy LOI query", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022F0A00);
              }
              LOWORD(v23[0]) = 0;
              uint64_t v19 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v19);
              if (v19 != buf) {
                free(v19);
              }
            }
            uint64_t v12 = 1;
            *(_DWORD *)(a1 + 72) = 1;
            *(void *)(a1 + 88) = 0x4008000000000000;
            *(void *)(a1 + 96) = 8;
            *(unsigned char *)(a1 + 43) = 0;
            *(unsigned char *)(a1 + 45) = 0;
LABEL_65:
            *(void *)(a1 + 224) = v12;
            return;
          }
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          int v15 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#placeInfer configuring an extra GPS request", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            LOWORD(v23[0]) = 0;
            unint64_t v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v20);
            if (v20 != buf) {
              free(v20);
            }
          }
          *(_DWORD *)(a1 + 72) = 0;
          uint64_t v14 = 0x4034000000000000;
        }
        *(void *)(a1 + 88) = v14;
        *(void *)(a1 + 96) = 26;
        *(unsigned char *)(a1 + 43) = 0;
        *(unsigned char *)(a1 + 45) = 0;
        uint64_t v12 = 2;
        goto LABEL_65;
      case 6:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
LABEL_42:
        *(unsigned char *)(a1 + 43) = 0;
        goto LABEL_43;
      default:
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F0A00);
        }
        uint64_t v4 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#dsa Please update initializePlaceInferencesOptions", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          LOWORD(v23[0]) = 0;
          uint64_t v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v5);
          if (v5 != buf) {
            free(v5);
          }
        }
        return;
    }
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v25 = 2114;
    uint64_t v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa client is authorized only for coarse\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 88) = 0x3FB999999999999ALL;
  *(void *)(a1 + 96) = 4;
  *(_WORD *)(a1 + 43) = 256;
LABEL_43:
  *(unsigned char *)(a1 + 45) = 0;
}

void sub_100C8F970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C8F9AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v2 = sub_100C8D96C(a1);
    [*(id *)(*(void *)v2 + 16) unregister:*(void *)(*(void *)v2 + 8) forNotification:*(unsigned int *)(a1 + 72)];
    uint64_t v3 = sub_100C8DC08(a1);
  }
  else
  {
    uint64_t v4 = sub_100C8DC08(a1);
    [*(id *)(*(void *)v4 + 16) unregister:*(void *)(*(void *)v4 + 8) forNotification:*(unsigned int *)(a1 + 72)];
    uint64_t v3 = sub_100C8D96C(a1);
  }
  uint64_t v6 = *(void *)(*(void *)v3 + 8);
  uint64_t v5 = *(void **)(*(void *)v3 + 16);
  uint64_t v7 = *(unsigned int *)(a1 + 72);

  return [v5 register:v6 forNotification:v7 registrationInfo:0];
}

id sub_100C8FA38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 44)) {
    uint64_t v2 = sub_100C8DC08(a1);
  }
  else {
    uint64_t v2 = sub_100C8D96C(a1);
  }
  uint64_t v4 = *(void *)(*(void *)v2 + 8);
  uint64_t v3 = *(void **)(*(void *)v2 + 16);
  uint64_t v5 = *(unsigned int *)(a1 + 72);

  return [v3 unregister:v4 forNotification:v5];
}

void sub_100C8FA90(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      [objc_msgSend(a2, "lastObject") coordinate];
      uint64_t v6 = v5;
      [objc_msgSend(a2, "lastObject") coordinate];
      uint64_t v8 = v7;
      [objc_msgSend(a2, "lastObject") horizontalAccuracy];
      *(_DWORD *)uint64_t buf = 134284547;
      uint64_t v13 = v6;
      __int16 v14 = 2049;
      uint64_t v15 = v8;
      __int16 v16 = 2050;
      uint64_t v17 = v9;
      __int16 v18 = 2082;
      uint64_t v19 = sub_10003E9A4([[a2 lastObject] type]);
      __int16 v20 = 2112;
      id v21 = [[objc_msgSend(a2, "lastObject") timestamp];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#placeInfer fallback result message location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{public}s, timestamp, %@", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      [objc_msgSend(a2, "lastObject") coordinate];
      [objc_msgSend(a2, "lastObject") coordinate];
      [objc_msgSend(a2, "lastObject") horizontalAccuracy];
      sub_10003E9A4([[a2 lastObject] type]);
      [objc_msgSend(a2, "lastObject") timestamp];
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendFallBackResultMessage(const NSArray<CLLocation *> *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100C94020(a1, 0, (uint64_t)[a2 lastObject]);
  }
  else
  {
    uint64_t v10 = +[NSError errorWithDomain:kCLErrorDomainPrivate code:6 userInfo:0];
    sub_100C916EC(a1, (uint64_t)v10);
  }
}

void sub_100C8FDF4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  uint64_t v7 = sub_100C8FEE8;
  uint64_t v8 = &unk_1022F0840;
  uint64_t v14 = a1[9];
  uint64_t v9 = a1[4];
  uint64_t v10 = a2;
  uint64_t v13 = v3;
  uint64_t v11 = a3;
  uint64_t v4 = (std::__shared_weak_count *)a1[8];
  uint64_t v15 = a1[7];
  __int16 v16 = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = a1[8];
    uint64_t v12 = a1[5];
    if (v5 && *(void *)(v5 + 8) != -1) {
      v7((uint64_t)v6);
    }
  }
  else
  {
    uint64_t v12 = a1[5];
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
}

void sub_100C8FED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C8FEE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  uint64_t v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    double v5 = (Current - *(double *)(a1 + 72)) * 1000.0;
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [*(id *)(a1 + 40) count];
    id v8 = [*(id *)(a1 + 40) firstObject];
    uint64_t v9 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 134219010;
    *(double *)__int16 v53 = v5;
    *(_WORD *)&v53[8] = 2112;
    *(void *)&v53[10] = v6;
    __int16 v54 = 2050;
    id v55 = v7;
    __int16 v56 = 2112;
    id v57 = v8;
    __int16 v58 = 2114;
    uint64_t v59 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#placeInfer RECEIVED RESPONSE to fetchPlaceInferencesWithOptions in %f s with options, %@, %{public}lu placeInferences, placeInferences[0], %@, error, %{public}@", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    double v29 = *(double *)(a1 + 72);
    uint64_t v30 = *(void *)(a1 + 32);
    id v31 = [*(id *)(a1 + 40) count];
    id v32 = [*(id *)(a1 + 40) firstObject];
    uint64_t v33 = *(void *)(a1 + 48);
    int v42 = 134219010;
    double v43 = (Current - v29) * 1000.0;
    __int16 v44 = 2112;
    uint64_t v45 = v30;
    __int16 v46 = 2050;
    id v47 = v31;
    __int16 v48 = 2112;
    id v49 = v32;
    __int16 v50 = 2114;
    uint64_t v51 = v33;
    __int16 v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  if ([*(id *)(a1 + 48) code] == (id)2)
  {
    *(_DWORD *)(v2 + 520) = 6;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#era CA result - kDSAResultErrorLSOff", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v42) = 0;
      char v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    *(void *)(v2 + 324) = 0x600000002;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorLSOff", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v42) = 0;
      int v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    *(unsigned char *)(v2 + 244) = 0;
  }
  if ((*(void *)(a1 + 48) || ![*(id *)(a1 + 40) count]) && *(void *)(v2 + 104) == 5)
  {
    uint64_t v12 = [*(id *)(v2 + 8) silo].queue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_100C90A18;
    block[3] = &unk_1022F0798;
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
    block[4] = v2;
    void block[5] = v14;
    char v41 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_async(v12, block);
    uint64_t v15 = v41;
    if (!v41) {
      return;
    }
LABEL_39:
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  if (![*(id *)(a1 + 40) count])
  {
    if (*(void *)(a1 + 48))
    {
      sub_100103240();
      if (sub_1000F08D4()
        && (id v24 = [*(id *)(a1 + 48) domain],
            [v24 isEqualToString:RTErrorDomain])
        && [*(id *)(a1 + 48) code] == (id)8)
      {
        sub_100C8FA90(v2, *(void **)(a1 + 56));
      }
      else
      {
        sub_100C916EC(v2, *(void *)(a1 + 48));
      }
    }
    else
    {
      sub_100C916EC(v2, (uint64_t)+[NSError errorWithDomain:kCLErrorDomainPrivate code:6 userInfo:0]);
    }
    return;
  }
  sub_100103240();
  if (sub_1000F08D4())
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    __int16 v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)__int16 v53 = 0;
      *(_WORD *)&v53[4] = 2082;
      *(void *)&v53[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
    }
    uint64_t v17 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)__int16 v53 = 0;
      *(_WORD *)&v53[4] = 2082;
      *(void *)&v53[6] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!", "{\"msg%{public}.0s\":\"Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!\"}", buf, 0x12u);
    }
  }
  +[NSMutableArray array];
  __int16 v18 = *(void **)(a1 + 40);
  if (!*(unsigned char *)(v2 + 45))
  {
    id v25 = sub_100C94CC8((uint64_t)v18, *(void **)(a1 + 40));
    sub_100C94020(v2, v25, 0);
    return;
  }
  *(_DWORD *)(v2 + 548) = [v18 count];
  *(_DWORD *)(v2 + 544) = (int)((Current - *(double *)(a1 + 72)) * 1000.0);
  *(_DWORD *)(v2 + 336) = [*(id *)(a1 + 40) count];
  *(_DWORD *)(v2 + 332) = (int)((Current - *(double *)(a1 + 72)) * 1000.0);
  id v19 = sub_100C918CC(v2, *(void **)(a1 + 40), *(void **)(a1 + 56));
  if ([v19 count])
  {
    id v20 = [v19 objectAtIndexedSubscript:0];
    id v21 = *(void **)(v2 + 56);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3321888768;
    v38[2] = sub_100C94384;
    v38[3] = &unk_1022F0808;
    uint64_t v23 = *(void *)(a1 + 80);
    unint64_t v22 = *(std::__shared_weak_count **)(a1 + 88);
    v38[6] = v2;
    v38[7] = v23;
    uint64_t v39 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v38[4] = *(void *)(a1 + 56);
    v38[5] = v20;
    [v21 fetchFormattedPostalAddressesFromMeCardWithReply:v38];
    uint64_t v15 = v39;
    if (v39) {
      goto LABEL_39;
    }
  }
  else
  {
    sub_100C94020(v2, v19, 0);
    if (!*(_DWORD *)(v2 + 328))
    {
      *(_DWORD *)(v2 + 328) = 7;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      uint64_t v26 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F0A00);
        }
        LOWORD(v42) = 0;
        char v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
    }
    if (!*(_DWORD *)(v2 + 520))
    {
      *(_DWORD *)(v2 + 520) = 7;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      id v27 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorPlacemarkUnavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F0A00);
        }
        LOWORD(v42) = 0;
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
    }
  }
}

void sub_100C909F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C90A18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100C90A9C;
  v3[3] = &unk_1022A3020;
  v3[4] = v1;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    if (*(void *)(v2 + 8) != -1) {
      sub_100C90A9C((uint64_t)v3);
    }
  }
}

void sub_100C90A9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(v1 + 112);
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#placeInfer FidelityPolicyLowWithPreciseLocation query attempt #%{public}lu failed", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    id v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v4 = *(void *)(v1 + 112);
  if (v4 == 2)
  {
    if (!sub_100C91010(v1))
    {
LABEL_18:
      ++*(void *)(v1 + 112);
      sub_100C8EF58(v1);
      sub_100C90F1C(v1);
    }
  }
  else
  {
    if (v4 == 1)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      double v5 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#placeInfer high accuracy LOI not available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F0A00);
        }
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      goto LABEL_18;
    }
    if (!sub_100C91010(v1))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      id v7 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#placeInfer failed to determine current placeInference, return no result", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F0A00);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      *(unsigned char *)(v1 + 245) = 0;
      sub_100C916EC(v1, (uint64_t)+[NSError errorWithDomain:kCLErrorDomainPrivate code:6 userInfo:0]);
    }
  }
}

uint64_t sub_100C90F1C(uint64_t a1)
{
  sub_100C8F9AC(a1);
  if (*(unsigned char *)(a1 + 43))
  {
    uint64_t v2 = sub_100C8DCC8(a1);
    [*(id *)(*(void *)v2 + 16) register:*(void *)(*(void *)v2 + 8) forNotification:3 registrationInfo:0];
    [*(id *)(*(void *)sub_100C8DCC8(a1) + 16) syncgetStartScanWithType:10 lowPriority:0 passive:0 requester:"placeinference"];
  }
  [*(id *)(a1 + 80) setNextFireDelay:*(double *)(a1 + 88)];
  *(unsigned char *)(a1 + 42) = 1;
  if (*(double *)(a1 + 88) == 40.0)
  {
    sub_1000C7F88(&v6);
    uint64_t v3 = v6;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_10016332C(v3, "PlaceInferenceTimestampOfLastBestLocationRequestForFidelityLowWithPreciseLocation", &Current);
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
  return sub_1010A4BFC(a1);
}

void sub_100C90FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C91010(uint64_t a1)
{
  if (!*(void *)(a1 + 128))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#placeInfer attempted to send the last available location, but none found", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    LOWORD(v32) = 0;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v15);
    if (v15 == (char *)buf) {
      return 0;
    }
LABEL_22:
    free(v15);
    return 0;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    [*(id *)(a1 + 128) coordinate];
    uint64_t v4 = v3;
    [*(id *)(a1 + 128) coordinate];
    uint64_t v6 = v5;
    [*(id *)(a1 + 128) horizontalAccuracy];
    uint64_t v8 = v7;
    uint64_t v9 = sub_10003E9A4([*(id *)(a1 + 128) type]);
    id v10 = [*(id *)(a1 + 128) timestamp];
    *(_DWORD *)uint64_t buf = 134284547;
    id v43 = v4;
    __int16 v44 = 2049;
    uint64_t v45 = v6;
    __int16 v46 = 2050;
    uint64_t v47 = v8;
    __int16 v48 = 2082;
    id v49 = v9;
    __int16 v50 = 2112;
    id v51 = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#placeInfer last available location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{public}s, timestamp, %@", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    [*(id *)(a1 + 128) coordinate];
    id v20 = v19;
    [*(id *)(a1 + 128) coordinate];
    uint64_t v22 = v21;
    [*(id *)(a1 + 128) horizontalAccuracy];
    uint64_t v24 = v23;
    id v25 = sub_10003E9A4([*(id *)(a1 + 128) type]);
    id v26 = [*(id *)(a1 + 128) timestamp];
    int v32 = 134284547;
    id v33 = v20;
    __int16 v34 = 2049;
    uint64_t v35 = v22;
    __int16 v36 = 2050;
    uint64_t v37 = v24;
    __int16 v38 = 2082;
    uint64_t v39 = v25;
    __int16 v40 = 2112;
    id v41 = v26;
    id v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "timestamp"), "compare:", *(void *)(a1 + 136)) != (id)-1)
  {
    id v11 = [objc_alloc((Class)_CLPlaceInference) initWithUserType:0 placeType:2 placemark:0 referenceLocation:*(void *)(a1 + 128) confidence:0 preferredName:0 loiIdentifier:0.0];
    *(void *)(a1 + 224) = 4;
    id v31 = v11;
    sub_100C94020(a1, +[NSArray arrayWithObjects:&v31 count:1], 0);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#placeInfer last available location sent!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v32) = 0;
      __int16 v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    return 1;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  __int16 v16 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    id v17 = [*(id *)(a1 + 128) timestamp];
    uint64_t v18 = *(void *)(a1 + 136);
    *(_DWORD *)uint64_t buf = 138412546;
    id v43 = v17;
    __int16 v44 = 2112;
    uint64_t v45 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#placeInfer attempted to send the last available location, but it was stale - last location timestamp, %@, placeInference request timestamp, %@", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    id v29 = [*(id *)(a1 + 128) timestamp];
    uint64_t v30 = *(void *)(a1 + 136);
    int v32 = 138412546;
    id v33 = v29;
    __int16 v34 = 2112;
    uint64_t v35 = v30;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v15);
    if (v15 == (char *)buf) {
      return 0;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_100C916EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 41))
  {
    CFStringRef v6 = @"kCLConnectionMessageError";
    uint64_t v7 = a2;
    *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    sub_100C9800C(a1);
    *(unsigned char *)(a1 + 41) = 0;
    [*(id *)(a1 + 144) horizontalAccuracy];
    *(void *)(a1 + 216) = v3;
    *(_DWORD *)(a1 + 240) = [*(id *)(a1 + 144) signalEnvironmentType];
    sub_100C980A0(a1);

    *(void *)(a1 + 144) = 0;
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v9 = 2082;
      id v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
    }
    uint64_t v5 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v9 = 2082;
      id v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Trying to send a result while the request is stopped", "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", buf, 0x12u);
    }
  }
}

id sub_100C918CC(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 48) = 0xBFF0000000000000;
  id v213 = +[NSMutableArray array];
  long long v238 = 0u;
  long long v239 = 0u;
  long long v240 = 0u;
  long long v241 = 0u;
  obuint64_t j = a2;
  id v237 = [a2 countByEnumeratingWithState:&v238 objects:v262 count:16];
  if (!v237) {
    return v213;
  }
  uint64_t v236 = *(void *)v239;
  uint64_t v5 = 2;
  CFStringRef v6 = &qword_102419000;
  double v7 = 65.0;
  double v8 = 0.85;
  double v9 = 20.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v212 = _Q0;
  while (2)
  {
    uint64_t v15 = 0;
    do
    {
      if (*(void *)v239 != v236) {
        objc_enumerationMutation(obj);
      }
      __int16 v16 = *(void **)(*((void *)&v238 + 1) + 8 * (void)v15);
      unint64_t v17 = sub_100C9798C((unint64_t)[v16 userType]);
      uint64_t v18 = sub_100C97B20((unint64_t)[v16 placeType]);
      id v19 = [v16 userTypeSource];
      id v20 = +[NSMutableArray array];
      uint64_t v21 = v20;
      if (!v19)
      {
        CFStringRef v22 = @"Unknown";
LABEL_14:
        [v21 addObject:v22];
        goto LABEL_15;
      }
      if (v19) {
        [v20 addObject:@"Inferred"];
      }
      if ((v19 & 2) != 0) {
        [v21 addObject:@"MeCard"];
      }
      CFStringRef v22 = @"User";
      if ((v19 & 4) != 0) {
        goto LABEL_14;
      }
LABEL_15:
      if (objc_msgSend(v21, "count", v22)) {
        double v23 = COERCE_DOUBLE([v21 componentsJoinedByString:@", "]);
      }
      else {
        double v23 = 0.0;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022F0A20);
      }
      uint64_t v24 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)long long v259 = 0;
        *(_WORD *)&v259[4] = 2082;
        *(void *)&v259[6] = "";
        *(_WORD *)&v259[14] = 1026;
        *(_DWORD *)&v259[16] = v17;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa userType\", \"userType\":%{public}d}", buf, 0x18u);
      }
      *(void *)(a1 + 324) = v5;
      *(_DWORD *)(a1 + 520) = 0;
      LOBYTE(v25) = 0;
      if (([v16 userTypeSource] & 1) != 0
        && (v32 = (unint64_t)[v16 userTypeSource], uint64_t v25 = (v32 >> 1) & 1, v17)
        && (v32 & 2) != 0)
      {
        [objc_msgSend(a3, "lastObject") horizontalAccuracy];
        if (v33 <= v7)
        {
          [v16 confidence];
          if (v41 >= v8)
          {
            [v16 confidence];
            double v55 = fabs((v54 - *(double *)(a1 + 48)) * 100.0);
            if (v55 <= v9)
            {
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022F0A20);
              }
              long long v192 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                [v16 confidence];
                uint64_t v193 = *(void *)(a1 + 48);
                *(_DWORD *)uint64_t buf = 134350082;
                *(void *)long long v259 = v194;
                *(_WORD *)&v259[8] = 2050;
                *(void *)&v259[10] = v193;
                *(_WORD *)&v259[18] = 2050;
                *(double *)&v259[20] = v55;
                *(_WORD *)&v259[28] = 2114;
                *(double *)&v259[30] = v23;
                *(_WORD *)&v259[38] = 1024;
                *(_DWORD *)&v259[40] = v17;
                _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_DEFAULT, "#dsa zone of confusion,dropping dsa,current confidence,%{public}.2f,last confidence,%{public}.2f,confidenceinpercent,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x30u);
              }
              long long v195 = v213;
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                }
                [v16 confidence];
                uint64_t v205 = *(void *)(a1 + 48);
                int v242 = 134350082;
                double v243 = v206;
                __int16 v244 = 2050;
                uint64_t v245 = v205;
                __int16 v246 = 2050;
                double v247 = v55;
                __int16 v248 = 2114;
                double v249 = v23;
                __int16 v250 = 1024;
                *(_DWORD *)float v251 = v17;
                uint64_t v207 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v207);
                if (v207 != (char *)buf) {
                  free(v207);
                }
                long long v195 = v213;
              }
              if (!*(_DWORD *)(a1 + 520))
              {
                *(void *)(a1 + 528) = [v16 userTypeSource];
                *(void *)(a1 + 536) = [v16 userType];
                [v16 confidence];
                *(float *)&double v196 = v196;
                *(_DWORD *)(a1 + 552) = LODWORD(v196);
                *(_DWORD *)(a1 + 520) = 7;
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022F0A00);
                }
                long long v197 = v6[165];
                if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorPlacemarkUnavailable", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022F0A00);
                  }
                  CFStringRef v6 = &qword_102419000;
                  LOWORD(v242) = 0;
                  uint64_t v208 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v208);
                  if (v208 != (char *)buf) {
                    free(v208);
                  }
                  long long v195 = v213;
                }
              }
              if (!*(_DWORD *)(a1 + 328))
              {
                id v198 = [v16 userTypeSource];
                if (v198)
                {
                  if ((v198 & 2) != 0)
                  {
                    int v199 = 2;
                  }
                  else if (v198)
                  {
                    int v199 = 3;
                  }
                  else if ((v198 & 4) != 0)
                  {
                    int v199 = 6;
                  }
                  else
                  {
                    int v199 = 0;
                  }
                }
                else
                {
                  int v199 = 0;
                }
                *(_DWORD *)(a1 + 292) = v199;
                long long v200 = (char *)[v16 userType];
                if ((unint64_t)(v200 - 1) < 4) {
                  int v201 = (int)v200;
                }
                else {
                  int v201 = 0;
                }
                *(_DWORD *)(a1 + 296) = v201;
                [v16 confidence];
                *(void *)(a1 + 344) = v202;
                *(_DWORD *)(a1 + 328) = 7;
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022F0A00);
                }
                long long v203 = v6[165];
                if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022F0A00);
                  }
                  LOWORD(v242) = 0;
                  int v209 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v209);
                  if (v209 != (char *)buf) {
                    free(v209);
                  }
                  long long v195 = v213;
                }
              }
              [v195 removeAllObjects];
              return v213;
            }
            [v16 confidence];
            if (v56 <= *(double *)(a1 + 48))
            {
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022F0A20);
              }
              double v70 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v71 = [v16 userType];
                [objc_msgSend(a3, "lastObject") horizontalAccuracy];
                int v73 = (int)v72;
                [v16 confidence];
                int v74 = (int)*(double *)(a1 + 48);
                *(_DWORD *)uint64_t buf = 68290306;
                *(_DWORD *)long long v259 = 0;
                *(_WORD *)&v259[4] = 2082;
                *(void *)&v259[6] = "";
                *(_WORD *)&v259[14] = 1026;
                *(_DWORD *)&v259[16] = v71;
                *(_WORD *)&v259[20] = 2114;
                *(double *)&v259[22] = v23;
                *(_WORD *)&v259[30] = 1026;
                *(_DWORD *)&v259[32] = v73;
                *(_WORD *)&v259[36] = 1026;
                *(_DWORD *)&v259[38] = (int)v75;
                *(_WORD *)&v259[42] = 1026;
                *(_DWORD *)&v259[44] = v74;
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa confidence do not meet the emergency case requirement\", \"userType\":%{public}d, \"userTypeSource\":%{public, location:escape_only}@, \"hunc\":%{public}d, \"confidence\":%{public}d, \"lastconfidence\":%{public}d}", buf, 0x34u);
              }
            }
            else
            {
              id v57 = sub_100C97CC4([objc_msgSend(objc_msgSend(v16, "mapItem"), "location")]);
              id v232 = sub_100C97CC4([v16 referenceLocation]);
              id v58 = sub_100C97DB0([v16 mapItem], (uint64_t)v57);
              [objc_msgSend(v58, "location") coordinate];
              double v60 = v59;
              double v233 = v58;
              [objc_msgSend(v58, "location") coordinate];
              double v62 = v61;
              [objc_msgSend(a3, "lastObject") coordinate];
              double v64 = v63;
              [objc_msgSend(a3, "lastObject") coordinate];
              double v66 = sub_1000F1648((double *)(a1 + 608), v60, v62, v64, v65, 0.0);
              *(void *)(a1 + 528) = [v16 userTypeSource];
              *(void *)(a1 + 536) = [v16 userType];
              [v16 confidence];
              *(float *)&double v67 = v67;
              *(_DWORD *)(a1 + 552) = LODWORD(v67);
              *(_DWORD *)(a1 + 560) = (int)v66;
              id v68 = [v16 userTypeSource];
              if (v68)
              {
                if ((v68 & 2) != 0)
                {
                  int v69 = 2;
                }
                else if (v68)
                {
                  int v69 = 3;
                }
                else if ((v68 & 4) != 0)
                {
                  int v69 = 6;
                }
                else
                {
                  int v69 = 0;
                }
              }
              else
              {
                int v69 = 0;
              }
              *(_DWORD *)(a1 + 292) = v69;
              uint64_t v84 = (char *)[v16 userType];
              if ((unint64_t)(v84 - 1) < 4) {
                int v85 = (int)v84;
              }
              else {
                int v85 = 0;
              }
              *(_DWORD *)(a1 + 296) = v85;
              [v16 confidence];
              *(void *)(a1 + 344) = v86;
              *(_DWORD *)(a1 + 356) = (int)v66;
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022F0A20);
              }
              double v87 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                [objc_msgSend(v233, "location") coordinate];
                uint64_t v229 = v88;
                [objc_msgSend(v233, "location") coordinate];
                uint64_t v226 = v89;
                [objc_msgSend(v233, "location") horizontalAccuracy];
                uint64_t v91 = v90;
                [objc_msgSend(a3, "lastObject") coordinate];
                uint64_t v93 = v92;
                [objc_msgSend(a3, "lastObject") coordinate];
                double v94 = v66;
                double v95 = v7;
                uint64_t v97 = v96;
                [objc_msgSend(a3, "lastObject") horizontalAccuracy];
                uint64_t v98 = v5;
                double v99 = v8;
                uint64_t v101 = v100;
                [v16 confidence];
                *(_DWORD *)uint64_t buf = 134285571;
                *(void *)long long v259 = v229;
                *(_WORD *)&v259[8] = 2049;
                *(void *)&v259[10] = v226;
                *(_WORD *)&v259[18] = 2050;
                *(void *)&v259[20] = v91;
                *(_WORD *)&v259[28] = 2049;
                *(void *)&v259[30] = v93;
                double v9 = 20.0;
                *(_WORD *)&v259[38] = 2049;
                *(void *)&v259[40] = v97;
                double v7 = v95;
                double v66 = v94;
                *(_WORD *)&v259[48] = 2050;
                *(void *)&v259[50] = v101;
                double v8 = v99;
                uint64_t v5 = v98;
                *(_WORD *)&v259[58] = 2050;
                *(double *)&v259[60] = v94;
                *(_WORD *)&v259[68] = 2050;
                *(void *)&v259[70] = v102;
                *(_WORD *)&v259[78] = 2114;
                *(double *)&v259[80] = v23;
                _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#dsa mapitem's geodetic location ,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f, currentlat,%{private}.7f,currentlon,%{private}.7f,currentacc,%{public}.2f,dist,%{public}.2f, currconf,%{public}.2f,loisource,%{public}@", buf, 0x5Cu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                double v210 = v8;
                double v211 = v7;
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                }
                [objc_msgSend(v233, "location") coordinate];
                double v165 = v164;
                [objc_msgSend(v233, "location") coordinate];
                uint64_t v167 = v166;
                [objc_msgSend(v233, "location") horizontalAccuracy];
                double v169 = v168;
                [objc_msgSend(a3, "lastObject") coordinate];
                double v171 = v170;
                [objc_msgSend(a3, "lastObject") coordinate];
                uint64_t v173 = v172;
                [objc_msgSend(a3, "lastObject") horizontalAccuracy];
                uint64_t v175 = v174;
                [v16 confidence];
                int v242 = 134285571;
                double v243 = v165;
                __int16 v244 = 2049;
                uint64_t v245 = v167;
                __int16 v246 = 2050;
                double v247 = v169;
                __int16 v248 = 2049;
                double v249 = v171;
                __int16 v250 = 2049;
                *(void *)float v251 = v173;
                *(_WORD *)&v251[8] = 2050;
                *(void *)double v252 = v175;
                *(_WORD *)&v252[8] = 2050;
                double v253 = v66;
                __int16 v254 = 2050;
                uint64_t v255 = v176;
                __int16 v256 = 2114;
                double v257 = v23;
                long long v177 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v177);
                if (v177 != (char *)buf) {
                  free(v177);
                }
                double v8 = v210;
                double v7 = v211;
                double v9 = 20.0;
              }
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022F0A20);
              }
              uint64_t v103 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                id v230 = [[[v233 name] UTF8String];
                id v227 = [[[v233 thoroughfare] UTF8String];
                id v224 = [[objc_msgSend(v233, "subThoroughfare") UTF8String];
                id v222 = [[objc_msgSend(v233, "locality") UTF8String];
                id v220 = [[objc_msgSend(v233, "subLocality") UTF8String];
                id v218 = [[objc_msgSend(v233, "administrativeArea") UTF8String];
                id v216 = [[objc_msgSend(v233, "subAdministrativeArea") UTF8String];
                id v214 = [[[v233 postalCode] UTF8String];
                id v104 = [[[v233 ISOcountryCode] UTF8String];
                id v105 = [[[v233 country] UTF8String];
                id v106 = [[objc_msgSend(v233, "inlandWater") UTF8String];
                id v107 = [[objc_msgSend(v233, "ocean") UTF8String];
                *(_DWORD *)uint64_t buf = 68292099;
                *(_DWORD *)long long v259 = 0;
                *(_WORD *)&v259[4] = 2082;
                *(void *)&v259[6] = "";
                *(_WORD *)&v259[14] = 2081;
                *(void *)&v259[16] = v230;
                *(_WORD *)&v259[24] = 2081;
                *(void *)&v259[26] = v227;
                *(_WORD *)&v259[34] = 2081;
                *(void *)&v259[36] = v224;
                *(_WORD *)&v259[44] = 2081;
                *(void *)&v259[46] = v222;
                *(_WORD *)&v259[54] = 2081;
                *(void *)&v259[56] = v220;
                *(_WORD *)&v259[64] = 2081;
                *(void *)&v259[66] = v218;
                *(_WORD *)&v259[74] = 2081;
                *(void *)&v259[76] = v216;
                *(_WORD *)&v259[84] = 2081;
                *(void *)&v259[86] = v214;
                *(_WORD *)&v259[94] = 2081;
                *(void *)&v259[96] = v104;
                *(_WORD *)&v259[104] = 2081;
                *(void *)&v259[106] = v105;
                *(_WORD *)&v259[114] = 2081;
                *(void *)&v259[116] = v106;
                CFStringRef v6 = &qword_102419000;
                *(_WORD *)&v259[124] = 2081;
                *(void *)&v259[126] = v107;
                _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,received infered place address from coreroutine\", \"name\":%{private, location:escape_only}s, \"thoroughfare\":%{private, location:escape_only}s, \"subThoroughfare\":%{private, location:escape_only}s, \"locality\":%{private, location:escape_only}s, \"subLocality\":%{private, location:escape_only}s, \"administrativeArea\":%{private, location:escape_only}s, \"subAdministrativeArea\":%{private, location:escape_only}s, \"postalCode\":%{private, location:escape_only}s, \"ISOcountryCode\":%{private, location:escape_only}s, \"country\":%{private, location:escape_only}s, \"inlandWater\":%{private, location:escape_only}s, \"ocean\":%{private, location:escape_only}s}", buf, 0x8Au);
              }
              if (v66 <= 50.0)
              {
                [v16 mapItem];
                id v114 = [objc_msgSend(v16, "mapItem") location];
                [objc_msgSend(a3, "lastObject") horizontalAccuracy];
                double v116 = v115;
                CFDateRef v117 = (const __CFDate *)[a3 lastObject].timestamp;
                memset(&v259[92], 0, 20);
                *(void *)&v259[132] = 0;
                uint64_t v260 = 0;
                char v261 = 0;
                [v114 latitude];
                uint64_t v119 = v118;
                [v114 longitude];
                uint64_t v121 = v120;
                double v122 = v66 + v116;
                CFAbsoluteTime AbsoluteTime = CFDateGetAbsoluteTime(v117);
                LODWORD(v114) = [v114 referenceFrame];
                id v124 = objc_alloc((Class)CLLocation);
                *(void *)long long v259 = v119;
                *(void *)&v259[8] = v121;
                *(double *)&v259[16] = v122;
                *(_OWORD *)&v259[24] = xmmword_101D1C570;
                *(_OWORD *)&v259[40] = v212;
                *(_OWORD *)&v259[56] = v212;
                *(CFAbsoluteTime *)&v259[72] = AbsoluteTime;
                *(_DWORD *)uint64_t buf = 0xFFFF;
                *(_DWORD *)&v259[80] = 0;
                *(void *)&v259[84] = 0xBFF0000000000000;
                *(void *)&v259[112] = 0xBFF0000000000000;
                *(void *)&v259[120] = 0x7FFFFFFFLL;
                *(_DWORD *)&v259[128] = v114;
                id v125 = [v124 initWithClientLocation:buf];
                [objc_msgSend(a3, "lastObject") horizontalAccuracy];
                *(double *)(a1 + 360) = v66 + v126;
                [objc_msgSend(a3, "lastObject") horizontalAccuracy];
                *(float *)&double v127 = v66 + v127;
                *(_DWORD *)(a1 + 564) = LODWORD(v127);
                id v128 = sub_100C97DB0([v16 mapItem], (uint64_t)v125);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                }
                double v9 = 20.0;
                uint64_t v129 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                {
                  [objc_msgSend(v128, "location") coordinate];
                  uint64_t v131 = v130;
                  [objc_msgSend(v128, "location") coordinate];
                  uint64_t v133 = v132;
                  [objc_msgSend(v128, "location") horizontalAccuracy];
                  uint64_t v135 = v134;
                  [objc_msgSend(v233, "location") horizontalAccuracy];
                  uint64_t v137 = v136;
                  [v16 confidence];
                  *(_DWORD *)uint64_t buf = 134285057;
                  *(void *)long long v259 = v131;
                  *(_WORD *)&v259[8] = 2049;
                  *(void *)&v259[10] = v133;
                  *(_WORD *)&v259[18] = 2050;
                  *(void *)&v259[20] = v135;
                  *(_WORD *)&v259[28] = 2050;
                  *(void *)&v259[30] = v137;
                  *(_WORD *)&v259[38] = 1026;
                  *(_DWORD *)&v259[40] = v17;
                  *(_WORD *)&v259[44] = 1026;
                  *(_DWORD *)&v259[46] = v18;
                  *(_WORD *)&v259[50] = 2050;
                  *(void *)&v259[52] = v138;
                  _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "#dsa updated mapItem after cross-check ,maplat,%{private}.7f,maplon,%{private}.7f,updatedacc,%{public}.2f,origacc,%{public}.2f, usertype,%{public}d, placeType,%{public}d,inferredconf,%{public}.2f", buf, 0x40u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                  }
                  [objc_msgSend(v128, "location") coordinate];
                  double v182 = v181;
                  [objc_msgSend(v128, "location") coordinate];
                  uint64_t v184 = v183;
                  [objc_msgSend(v128, "location") horizontalAccuracy];
                  double v186 = v185;
                  [objc_msgSend(v233, "location") horizontalAccuracy];
                  double v188 = v187;
                  [v16 confidence];
                  int v242 = 134285057;
                  double v243 = v182;
                  __int16 v244 = 2049;
                  uint64_t v245 = v184;
                  __int16 v246 = 2050;
                  double v247 = v186;
                  __int16 v248 = 2050;
                  double v249 = v188;
                  __int16 v250 = 1026;
                  *(_DWORD *)float v251 = v17;
                  *(_WORD *)&v251[4] = 1026;
                  *(_DWORD *)&v251[6] = v18;
                  *(_WORD *)double v252 = 2050;
                  *(void *)&v252[2] = v189;
                  long long v190 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v190);
                  if (v190 != (char *)buf) {
                    free(v190);
                  }
                }
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                }
                long long v139 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                {
                  id v231 = [[[v128 name] UTF8String];
                  id v228 = [[[v128 thoroughfare] UTF8String];
                  id v225 = [[objc_msgSend(v128, "subThoroughfare") UTF8String];
                  id v223 = [[[v128 locality] UTF8String];
                  id v221 = [[[v128 subLocality] UTF8String];
                  id v219 = [[[v128 administrativeArea] UTF8String];
                  id v217 = [[[v128 subAdministrativeArea] UTF8String];
                  id v215 = [[[v128 postalCode] UTF8String];
                  id v140 = [[[v128 ISOcountryCode] UTF8String];
                  id v141 = [[objc_msgSend(v128, "country") UTF8String];
                  id v142 = [[objc_msgSend(v233, "inlandWater") UTF8String];
                  id v143 = [[objc_msgSend(v128, "ocean") UTF8String];
                  *(_DWORD *)uint64_t buf = 68292099;
                  *(_DWORD *)long long v259 = 0;
                  *(_WORD *)&v259[4] = 2082;
                  *(void *)&v259[6] = "";
                  *(_WORD *)&v259[14] = 2081;
                  *(void *)&v259[16] = v231;
                  *(_WORD *)&v259[24] = 2081;
                  *(void *)&v259[26] = v228;
                  *(_WORD *)&v259[34] = 2081;
                  *(void *)&v259[36] = v225;
                  *(_WORD *)&v259[44] = 2081;
                  *(void *)&v259[46] = v223;
                  *(_WORD *)&v259[54] = 2081;
                  *(void *)&v259[56] = v221;
                  *(_WORD *)&v259[64] = 2081;
                  *(void *)&v259[66] = v219;
                  *(_WORD *)&v259[74] = 2081;
                  *(void *)&v259[76] = v217;
                  *(_WORD *)&v259[84] = 2081;
                  *(void *)&v259[86] = v215;
                  *(_WORD *)&v259[94] = 2081;
                  *(void *)&v259[96] = v140;
                  *(_WORD *)&v259[104] = 2081;
                  *(void *)&v259[106] = v141;
                  *(_WORD *)&v259[114] = 2081;
                  *(void *)&v259[116] = v142;
                  CFStringRef v6 = &qword_102419000;
                  *(_WORD *)&v259[124] = 2081;
                  *(void *)&v259[126] = v143;
                  _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,sending infered place address to client\", \"name\":%{private, location:escape_only}s, \"thoroughfare\":%{private, location:escape_only}s, \"subThoroughfare\":%{private, location:escape_only}s, \"locality\":%{private, location:escape_only}s, \"subLocality\":%{private, location:escape_only}s, \"administrativeArea\":%{private, location:escape_only}s, \"subAdministrativeArea\":%{private, location:escape_only}s, \"postalCode\":%{private, location:escape_only}s, \"ISOcountryCode\":%{private, location:escape_only}s, \"country\":%{private, location:escape_only}s, \"inlandWater\":%{private, location:escape_only}s, \"ocean\":%{private, location:escape_only}s}", buf, 0x8Au);
                }
                id v144 = objc_alloc((Class)_CLPlaceInference);
                [v16 confidence];
                id v146 = [v144 initWithUserType:v17 placeType:v18 placemark:v128 referenceLocation:v232 confidence:objc_msgSend(v16, "preferredName") loiIdentifier:objc_msgSend(v16, "loiIdentifier") preferredName:v145];
                if ([v213 count]) {
                  [v213 removeAllObjects];
                }
                [v16 confidence];
                *(void *)(a1 + 48) = v147;
                [v213 addObject:v146];
              }
              else
              {
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                }
                long long v108 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                {
                  [v16 confidence];
                  *(_DWORD *)uint64_t buf = 134349312;
                  *(double *)long long v259 = v66;
                  *(_WORD *)&v259[8] = 2050;
                  *(void *)&v259[10] = v109;
                  _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#dsa did not meet the emergecy confidence and distance requirement,distance,%{public}.2f,confidence,%{public}.2f", buf, 0x16u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                  }
                  [v16 confidence];
                  int v242 = 134349312;
                  double v243 = v66;
                  __int16 v244 = 2050;
                  uint64_t v245 = v178;
                  long long v179 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v179);
                  if (v179 != (char *)buf) {
                    free(v179);
                  }
                }
                *(void *)(a1 + 528) = [v16 userTypeSource];
                *(void *)(a1 + 536) = [v16 userType];
                [v16 confidence];
                *(float *)&double v110 = v110;
                *(_DWORD *)(a1 + 552) = LODWORD(v110);
                *(_DWORD *)(a1 + 520) = 4;
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022F0A00);
                }
                int64_t v111 = v6[165];
                if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorDistanceCheck", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022F0A00);
                  }
                  LOWORD(v242) = 0;
                  long long v180 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v180);
                  if (v180 != (char *)buf) {
                    free(v180);
                  }
                }
                id v112 = [v16 userTypeSource];
                if (v112)
                {
                  if ((v112 & 2) != 0)
                  {
                    int v113 = 2;
                  }
                  else if (v112)
                  {
                    int v113 = 3;
                  }
                  else if ((v112 & 4) != 0)
                  {
                    int v113 = 6;
                  }
                  else
                  {
                    int v113 = 0;
                  }
                }
                else
                {
                  int v113 = 0;
                }
                *(_DWORD *)(a1 + 292) = v113;
                long long v148 = (char *)[v16 userType];
                if ((unint64_t)(v148 - 1) < 4) {
                  int v149 = (int)v148;
                }
                else {
                  int v149 = 0;
                }
                *(_DWORD *)(a1 + 296) = v149;
                [v16 confidence];
                *(void *)(a1 + 344) = v150;
                *(_DWORD *)(a1 + 328) = 4;
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022F0A00);
                }
                long long v151 = v6[165];
                if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorDistanceCheck", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022F0A00);
                  }
                  LOWORD(v242) = 0;
                  goto LABEL_214;
                }
              }
            }
          }
          else
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022F0A20);
            }
            int v42 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              [v16 confidence];
              uint64_t v43 = *(void *)(a1 + 48);
              *(_DWORD *)uint64_t buf = 134349826;
              *(void *)long long v259 = v44;
              *(_WORD *)&v259[8] = 2050;
              *(void *)&v259[10] = v43;
              *(_WORD *)&v259[18] = 2114;
              *(double *)&v259[20] = v23;
              *(_WORD *)&v259[28] = 1024;
              *(_DWORD *)&v259[30] = v17;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#dsa invalid confidence, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x26u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022F0A20);
              }
              [v16 confidence];
              uint64_t v159 = *(void *)(a1 + 48);
              int v242 = 134349826;
              double v243 = v160;
              __int16 v244 = 2050;
              uint64_t v245 = v159;
              __int16 v246 = 2114;
              double v247 = v23;
              __int16 v248 = 1024;
              LODWORD(v249) = v17;
              long long v161 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v161);
              if (v161 != (char *)buf) {
                free(v161);
              }
            }
            *(void *)(a1 + 528) = [v16 userTypeSource];
            *(void *)(a1 + 536) = [v16 userType];
            [v16 confidence];
            *(float *)&double v45 = v45;
            *(_DWORD *)(a1 + 552) = LODWORD(v45);
            *(_DWORD *)(a1 + 520) = 2;
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            __int16 v46 = v6[165];
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#era CA result - invalid hunc kERAResultErrorConfidenceCheck", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022F0A00);
              }
              LOWORD(v242) = 0;
              long long v162 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v162);
              if (v162 != (char *)buf) {
                free(v162);
              }
            }
            id v47 = [v16 userTypeSource];
            if (v47)
            {
              if ((v47 & 2) != 0)
              {
                int v48 = 2;
              }
              else if (v47)
              {
                int v48 = 3;
              }
              else if ((v47 & 4) != 0)
              {
                int v48 = 6;
              }
              else
              {
                int v48 = 0;
              }
            }
            else
            {
              int v48 = 0;
            }
            *(_DWORD *)(a1 + 292) = v48;
            long long v80 = (char *)[v16 userType];
            if ((unint64_t)(v80 - 1) < 4) {
              int v81 = (int)v80;
            }
            else {
              int v81 = 0;
            }
            *(_DWORD *)(a1 + 296) = v81;
            [v16 confidence];
            *(void *)(a1 + 344) = v82;
            *(_DWORD *)(a1 + 328) = 2;
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            BOOL v83 = v6[165];
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorConfidenceCheck", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022F0A00);
              }
              LOWORD(v242) = 0;
              goto LABEL_214;
            }
          }
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022F0A20);
          }
          __int16 v34 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            [v16 confidence];
            uint64_t v35 = *(void *)(a1 + 48);
            *(_DWORD *)uint64_t buf = 134349826;
            *(void *)long long v259 = v36;
            *(_WORD *)&v259[8] = 2050;
            *(void *)&v259[10] = v35;
            *(_WORD *)&v259[18] = 2114;
            *(double *)&v259[20] = v23;
            *(_WORD *)&v259[28] = 1024;
            *(_DWORD *)&v259[30] = v17;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#dsa invalid hunc, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x26u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022F0A20);
            }
            [v16 confidence];
            uint64_t v155 = *(void *)(a1 + 48);
            int v242 = 134349826;
            double v243 = v156;
            __int16 v244 = 2050;
            uint64_t v245 = v155;
            __int16 v246 = 2114;
            double v247 = v23;
            __int16 v248 = 1024;
            LODWORD(v249) = v17;
            int v157 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v157);
            if (v157 != (char *)buf) {
              free(v157);
            }
          }
          *(void *)(a1 + 528) = [v16 userTypeSource];
          *(void *)(a1 + 536) = [v16 userType];
          [v16 confidence];
          *(float *)&double v37 = v37;
          *(_DWORD *)(a1 + 552) = LODWORD(v37);
          *(_DWORD *)(a1 + 520) = 7;
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          __int16 v38 = v6[165];
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#era CA result - invalid hunc KERAResultErrorPlacemarkUnavailable", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            LOWORD(v242) = 0;
            long long v158 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v158);
            if (v158 != (char *)buf) {
              free(v158);
            }
          }
          id v39 = [v16 userTypeSource];
          if (v39)
          {
            if ((v39 & 2) != 0)
            {
              int v40 = 2;
            }
            else if (v39)
            {
              int v40 = 3;
            }
            else if ((v39 & 4) != 0)
            {
              int v40 = 6;
            }
            else
            {
              int v40 = 0;
            }
          }
          else
          {
            int v40 = 0;
          }
          *(_DWORD *)(a1 + 292) = v40;
          long long v76 = (char *)[v16 userType];
          if ((unint64_t)(v76 - 1) < 4) {
            int v77 = (int)v76;
          }
          else {
            int v77 = 0;
          }
          *(_DWORD *)(a1 + 296) = v77;
          [v16 confidence];
          *(void *)(a1 + 344) = v78;
          *(_DWORD *)(a1 + 328) = 7;
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          long long v79 = v6[165];
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - invalid hunc kDSAResultErrorPlacemarkUnavailable", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            LOWORD(v242) = 0;
LABEL_214:
            long long v163 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v163);
            if (v163 != (char *)buf) {
              free(v163);
            }
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022F0A20);
        }
        id v26 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          [v16 confidence];
          uint64_t v27 = *(void *)(a1 + 48);
          *(_DWORD *)uint64_t buf = 134349826;
          *(void *)long long v259 = v28;
          *(_WORD *)&v259[8] = 2050;
          *(void *)&v259[10] = v27;
          *(_WORD *)&v259[18] = 2114;
          *(double *)&v259[20] = v23;
          *(_WORD *)&v259[28] = 1024;
          *(_DWORD *)&v259[30] = v17;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#dsa invalid usertype and sourcetype, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022F0A20);
          }
          [v16 confidence];
          uint64_t v152 = *(void *)(a1 + 48);
          int v242 = 134349826;
          double v243 = v153;
          __int16 v244 = 2050;
          uint64_t v245 = v152;
          __int16 v246 = 2114;
          double v247 = v23;
          __int16 v248 = 1024;
          LODWORD(v249) = v17;
          long long v154 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v154);
          if (v154 != (char *)buf) {
            free(v154);
          }
        }
        *(void *)(a1 + 528) = [v16 userTypeSource];
        *(void *)(a1 + 536) = [v16 userType];
        [v16 confidence];
        *(float *)&double v29 = v29;
        *(_DWORD *)(a1 + 552) = LODWORD(v29);
        id v30 = [v16 userTypeSource];
        if (v30)
        {
          if ((v30 & 2) != 0)
          {
            int v31 = 2;
          }
          else if (v30)
          {
            int v31 = 3;
          }
          else if ((v30 & 4) != 0)
          {
            int v31 = 6;
          }
          else
          {
            int v31 = 0;
          }
        }
        else
        {
          int v31 = 0;
        }
        *(_DWORD *)(a1 + 292) = v31;
        id v49 = (char *)[v16 userType];
        if ((unint64_t)(v49 - 1) < 4) {
          int v50 = (int)v49;
        }
        else {
          int v50 = 0;
        }
        *(_DWORD *)(a1 + 296) = v50;
        [v16 confidence];
        *(void *)(a1 + 344) = v51;
        if (v17 - 1 >= 4)
        {
          *(_DWORD *)(a1 + 328) = 3;
          *(_DWORD *)(a1 + 520) = 3;
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          __int16 v53 = v6[165];
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorCategoryCheck", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            LOWORD(v242) = 0;
            goto LABEL_214;
          }
        }
        else if ((v25 & 1) == 0)
        {
          *(_DWORD *)(a1 + 328) = 5;
          *(_DWORD *)(a1 + 520) = 5;
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022F0A00);
          }
          uint64_t v52 = v6[165];
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorSourceCheck", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            LOWORD(v242) = 0;
            goto LABEL_214;
          }
        }
      }
      uint64_t v15 = (char *)v15 + 1;
    }
    while (v237 != v15);
    id v191 = [obj countByEnumeratingWithState:&v238 objects:v262 count:16];
    id v237 = v191;
    if (v191) {
      continue;
    }
    return v213;
  }
}

void sub_100C94020(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 41))
  {
    id v6 = +[NSMutableDictionary dictionary];
    [v6 setObject:a2 forKeyedSubscript:@"kCLConnectionMessagePlaceInferencePlaceInferenceKey"];
    [v6 setObject:a3 forKeyedSubscript:@"kCLConnectionMessagePlaceInferencePlaceInferenceFallbackLocationKey"];
    sub_100C982CC(a1);
    *(unsigned char *)(a1 + 41) = 0;
    if ([a2 count]
      && (objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate"), double v8 = v7, objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate"), v9 >= -180.0)&& v8 <= 90.0&& v8 >= -90.0&& v9 <= 180.0&& (fabs(v8) >= 0.0000001 || fabs(v9) >= 0.0000001)&& (objc_msgSend(*(id *)(a1 + 144), "coordinate"), v11 = v10, objc_msgSend(*(id *)(a1 + 144), "coordinate"), v12 >= -180.0)&& v11 <= 90.0&& v11 >= -90.0&& v12 <= 180.0&& (fabs(v11) >= 0.0000001 || fabs(v12) >= 0.0000001))
    {
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate"]
      double v17 = v16;
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate");
      double v19 = v18;
      [*(id *)(a1 + 144) coordinate];
      double v21 = v20;
      [*(id *)(a1 + 144) coordinate];
      *(long double *)(a1 + 232) = sub_1000F1648((double *)(a1 + 608), v17, v19, v21, v22, 0.0);
    }
    else
    {
      *(unsigned char *)(a1 + 245) = 0;
    }
    [*(id *)(a1 + 144) horizontalAccuracy];
    *(void *)(a1 + 216) = v13;
    *(_DWORD *)(a1 + 240) = [*(id *)(a1 + 144) signalEnvironmentType];
    sub_100C980A0(a1);

    *(void *)(a1 + 144) = 0;
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v23 = 68289026;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", (uint8_t *)&v23, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
    }
    uint64_t v15 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v23 = 68289026;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Trying to send a result while the request is stopped", "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", (uint8_t *)&v23, 0x12u);
    }
  }
}

void sub_100C94384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  id v6 = sub_100C94470;
  double v7 = &unk_1022F07D0;
  uint64_t v8 = a3;
  long long v11 = *(_OWORD *)(a1 + 48);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  double v12 = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v9 = a2;
    long long v10 = *(_OWORD *)(a1 + 32);
    if (v4 && *(void *)(v4 + 8) != -1) {
      v6((uint64_t)v5);
    }
  }
  else
  {
    uint64_t v9 = a2;
    long long v10 = *(_OWORD *)(a1 + 32);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_100C94458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C94470(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 32))
  {
    sub_100C916EC(v2, (uint64_t)+[NSError errorWithDomain:kCLErrorDomainPrivate code:6 userInfo:0]);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022F0A20);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#dsa mecard returned error %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022F0A20);
      }
      uint64_t v12 = *(void *)(a1 + 32);
      int v21 = 138412290;
      uint64_t v22 = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *(_DWORD *)(v2 + 328) = 8;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v21) = 0;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *(_DWORD *)(v2 + 520) = 8;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    id v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v21) = 0;
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = [objc_msgSend(*(id *)(v2 + 8), "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_100C94954;
    block[3] = &unk_1022F07D0;
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 80);
    uint64_t v18 = v2;
    uint64_t v19 = v10;
    double v20 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v11 = *(_OWORD *)(a1 + 48);
    int8x16_t v16 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    long long v17 = v11;
    dispatch_async(v8, block);
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_100C94954(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  uint64_t v5 = sub_100C94A3C;
  id v6 = &unk_1022F07D0;
  long long v1 = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v9 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v10 = v2;
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void *)(a1 + 80);
    long long v8 = *(_OWORD *)(a1 + 48);
    if (v3 && *(void *)(v3 + 8) != -1) {
      ((void (*)(void *))v5)(v4);
    }
  }
  else
  {
    long long v8 = *(_OWORD *)(a1 + 48);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_100C94A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C94A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  id v6 = *(std::__shared_weak_count **)(a1 + 80);
  v7[0] = *(void *)(a1 + 72);
  v7[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100C94AD0(v5, v4, a3, v7, *(void **)(a1 + 48), *(void **)(a1 + 56));
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_100C94AB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C94AD0(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, void *a6)
{
  long long v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1022B6DF0;
  LODWORD(v11[1].__vftable) = 0;
  if ([*(id *)(a1 + 600) isEqualToDictionary:a2])
  {
    uint64_t v12 = (std::__shared_weak_count *)a4[1];
    v19[0] = *a4;
    v19[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100C94EBC(a1, a5, v19, a6);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {

    *(void *)(a1 + 600) = a2;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768;
    void v15[2] = sub_100C960F8;
    _OWORD v15[3] = &unk_1022F0948;
    v15[6] = a1;
    v15[7] = v11 + 1;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = *a4;
    uint64_t v13 = (std::__shared_weak_count *)a4[1];
    v15[4] = a5;
    int8x16_t v16 = v11;
    uint64_t v17 = v14;
    uint64_t v18 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v15[5] = a6;
    [a2 enumerateKeysAndObjectsUsingBlock:v15];
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    if (v16) {
      sub_1000DB0A0(v16);
    }
  }
  sub_1000DB0A0(v11);
}

void sub_100C94C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (a18) {
    sub_1000DB0A0(a18);
  }
  sub_1000DB0A0(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_100C94C9C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C94CB8(uint64_t a1)
{
  long long v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

id sub_100C94CC8(uint64_t a1, void *a2)
{
  id v16 = +[NSMutableArray array];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(a2);
        }
        id v6 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        unint64_t v7 = sub_100C9798C((unint64_t)[v6 userType]);
        uint64_t v8 = sub_100C97B20((unint64_t)[v6 placeType]);
        id v9 = sub_100C97CC4([objc_msgSend(objc_msgSend(v6, "mapItem"), "location")]);
        id v10 = sub_100C97CC4([v6 referenceLocation]);
        id v11 = sub_100C97DB0([v6 mapItem], (uint64_t)v9);
        id v12 = objc_alloc((Class)_CLPlaceInference);
        [v6 confidence];
        [v16 addObject:[v12 initWithUserType:v7 placeType:v8 placemark:v11 referenceLocation:v10 confidence:objc_msgSend(v6, "preferredName") preferredName:objc_msgSend(v6, "loiIdentifier") confidence:v13]];
      }
      id v3 = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v3);
  }
  return v16;
}

uint64_t sub_100C94E90(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 88);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  *(void *)(result + 88) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C94EAC(uint64_t a1)
{
  long long v1 = *(std::__shared_weak_count **)(a1 + 88);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100C94EBC(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v33 = +[NSMutableArray array];
  [*(id *)(a1 + 592) removeAllObjects];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v6 = *(void **)(a1 + 584);
  id v7 = [v6 countByEnumeratingWithState:&v35 objects:v47 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v36;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v36 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v9);
        double v11 = sub_100C95768(a1, [v10 meCardMapItem], a2);
        if (v11 >= 50.0)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022F0A20);
          }
          uint64_t v14 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            id v15 = [v10 meCardString];
            *(_DWORD *)uint64_t buf = 138478083;
            id v44 = v15;
            __int16 v45 = 2050;
            double v46 = v11;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#dsa %{private}@ address is %{public}.2f away from current location ", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022F0A20);
            }
            id v18 = [v10 meCardString];
            int v39 = 138478083;
            id v40 = v18;
            __int16 v41 = 2050;
            double v42 = v11;
            long long v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
          }
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022F0A20);
          }
          id v12 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            id v13 = [v10 meCardString];
            *(_DWORD *)uint64_t buf = 138478083;
            id v44 = v13;
            __int16 v45 = 2050;
            double v46 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#dsa adding mecard address %{private}@,deviation,%{public}.2f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022F0A20);
            }
            id v16 = [v10 meCardString];
            int v39 = 138478083;
            id v40 = v16;
            __int16 v41 = 2050;
            double v42 = v11;
            long long v17 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v17);
            if (v17 != (char *)buf) {
              free(v17);
            }
          }
          [*(id *)(a1 + 592) addObject:[v10 meCardString]];
        }
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v20 = [v6 countByEnumeratingWithState:&v35 objects:v47 count:16];
      id v7 = v20;
    }
    while (v20);
  }
  if ((unint64_t)[*(id *)(a1 + 592) count] <= 1 && objc_msgSend(*(id *)(a1 + 592), "count"))
  {
    id v21 = [*(id *)(a1 + 592) lastObject];
    uint64_t v22 = (std::__shared_weak_count *)a3[1];
    v34[0] = *a3;
    v34[1] = (uint64_t)v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100C95B20(a1, a4, (uint64_t)v21, v34);
    if (v22) {
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022F0A20);
    }
    uint64_t v23 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 592) count];
      *(_DWORD *)uint64_t buf = 134217984;
      id v44 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#dsa no valid address in contacts.skip sending dsa %lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022F0A20);
      }
      id v27 = [*(id *)(a1 + 592) count];
      int v39 = 134217984;
      id v40 = v27;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    [v33 removeAllObjects];
    sub_100C94020(a1, v33, 0);
    *(_DWORD *)(a1 + 328) = 8;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v25 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v39) = 0;
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    *(_DWORD *)(a1 + 520) = 8;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    id v26 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v39) = 0;
      id v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
}

void sub_100C95748(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_100C95768(uint64_t a1, void *a2, void *a3)
{
  [a2 coordinate];
  double v7 = v6;
  [a2 coordinate];
  double v9 = -1.0;
  if (v8 >= -180.0 && v7 <= 90.0 && v7 >= -90.0 && v8 <= 180.0 && (fabs(v7) >= 0.0000001 || fabs(v8) >= 0.0000001))
  {
    [objc_msgSend(a3, "lastObject") coordinate];
    double v11 = v10;
    [objc_msgSend(a3, "lastObject") coordinate];
    if (v12 >= -180.0
      && v11 <= 90.0
      && v11 >= -90.0
      && v12 <= 180.0
      && (fabs(v11) >= 0.0000001 || fabs(v12) >= 0.0000001))
    {
      [a2 coordinate];
      double v14 = v13;
      [a2 coordinate];
      double v16 = v15;
      [objc_msgSend(a3, "lastObject") coordinate];
      double v18 = v17;
      [objc_msgSend(a3, "lastObject") coordinate];
      double v9 = sub_1000F1648((double *)(a1 + 608), v14, v16, v18, v19, 0.0);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022F0A20);
      }
      id v20 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        [a2 coordinate];
        uint64_t v22 = v21;
        [a2 coordinate];
        uint64_t v24 = v23;
        [objc_msgSend(a3, "lastObject") coordinate];
        uint64_t v26 = v25;
        [objc_msgSend(a3, "lastObject") coordinate];
        *(_DWORD *)uint64_t buf = 134284545;
        uint64_t v31 = v22;
        __int16 v32 = 2049;
        uint64_t v33 = v24;
        __int16 v34 = 2049;
        uint64_t v35 = v26;
        __int16 v36 = 2049;
        uint64_t v37 = v27;
        __int16 v38 = 2050;
        double v39 = v9;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#dsa mecard geodetic location,lat,%{private}.7f,lon,%{private}.7f,currentlat,%{private}.7f,currentlon,%{private}.7f,distance,%{public}.2f", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022F0A20);
        }
        [a2 coordinate];
        [a2 coordinate];
        [objc_msgSend(a3, "lastObject") coordinate];
        [objc_msgSend(a3, "lastObject") coordinate];
        double v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "double CLPlaceInferenceSubscription::calculateDistanceBetweenLocations(CLLocation *, NSArray<CLLocation *> *)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
    }
  }
  return v9;
}

void sub_100C95B20(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  void v6[2] = sub_100C969FC;
  void v6[3] = &unk_1022F0980;
  uint64_t v5 = *a4;
  uint64_t v4 = (std::__shared_weak_count *)a4[1];
  void v6[6] = a1;
  v6[7] = v5;
  double v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6[4] = a2;
  v6[5] = a3;
  [objc_msgSend(objc_msgSend(a2, "placemark"), "fetchFormattedAddress:queue:", v6, objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"))];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_100C95BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C95BF8(uint64_t a1, void *a2)
{
  id v4 = [*(id *)(a1 + 680) allKeys];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  obuint64_t j = v4;
  id result = [v4 countByEnumeratingWithState:&v36 objects:v45 count:16];
  id v30 = result;
  if (result)
  {
    uint64_t v29 = *(void *)v37;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v37 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v31 = v6;
        uint64_t v7 = *(void *)(*((void *)&v36 + 1) + 8 * v6);
        double v8 = -[NSRegularExpression matchesInString:options:range:](+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", v7, 1, 0), "matchesInString:options:range:", a2, 0, 0, [a2 length]);
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        id v9 = [(NSArray *)v8 countByEnumeratingWithState:&v32 objects:v44 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v33;
          do
          {
            double v12 = 0;
            do
            {
              if (*(void *)v33 != v11) {
                objc_enumerationMutation(v8);
              }
              double v13 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v12);
              id v15 = [v13 range];
              id v17 = [a2 substringWithRange:v15, v16];
              if (v17)
              {
                id v18 = v17;
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                }
                double v19 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t buf = 138412290;
                  id v43 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#dsa substringForMatch matched %@", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                  }
                  int v40 = 138412290;
                  id v41 = v18;
                  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::enumerateSubPremisesForAddressString(NSString *)", "%s\n", v23);
                  if (v23 != (char *)buf) {
                    free(v23);
                  }
                }
                if ([*(id *)(a1 + 680) objectForKey:v7])
                {
                  unsigned int v20 = [[objc_msgSend(*(id *)(a1 + 680), "objectForKey:", v7) integerValue];
                  if (v20 - 1 <= 0x3F && ((1 << (v20 - 1)) & 0x800000008000808BLL) != 0) {
                    *(_DWORD *)(a1 + 672) |= v20;
                  }
                }
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                }
                uint64_t v21 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                {
                  int v22 = *(_DWORD *)(a1 + 672);
                  *(_DWORD *)uint64_t buf = 67109120;
                  LODWORD(v43) = v22;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#dsa sub-premise type is, %u", buf, 8u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022F0A20);
                  }
                  int v24 = *(_DWORD *)(a1 + 672);
                  int v40 = 67109120;
                  LODWORD(v41) = v24;
                  uint64_t v25 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::enumerateSubPremisesForAddressString(NSString *)", "%s\n", v25);
                  if (v25 != (char *)buf) {
                    free(v25);
                  }
                }
              }
              double v12 = (char *)v12 + 1;
            }
            while (v10 != v12);
            id v26 = [(NSArray *)v8 countByEnumeratingWithState:&v32 objects:v44 count:16];
            id v10 = v26;
          }
          while (v26);
        }
        uint64_t v6 = v31 + 1;
      }
      while ((id)(v31 + 1) != v30);
      id result = [obj countByEnumeratingWithState:&v36 objects:v45 count:16];
      id v30 = result;
    }
    while (result);
  }
  int v27 = *(_DWORD *)(a1 + 672);
  *(_DWORD *)(a1 + 376) = v27;
  *(_DWORD *)(a1 + 572) = v27;
  return result;
}

id sub_100C960F8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1[6];
  [*(id *)(v5 + 584) removeAllObjects];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  obuint64_t j = a3;
  id result = [a3 countByEnumeratingWithState:&v26 objects:v42 count:16];
  id v7 = result;
  if (result)
  {
    uint64_t v8 = *(void *)v27;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v9);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022F0A20);
        }
        uint64_t v11 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 138412803;
          uint64_t v37 = a2;
          __int16 v38 = 2113;
          id v39 = obj;
          __int16 v40 = 2112;
          id v41 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#dsa address type in mecard is %@, %{private}@, %@{private}", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022F0A20);
          }
          int v30 = 138412803;
          uint64_t v31 = a2;
          __int16 v32 = 2113;
          id v33 = obj;
          __int16 v34 = 2112;
          long long v35 = v10;
          id v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::enumerateOverAddressDictionaryAndSendInferredResults(NSDictionary<NSNumber *,NSArray<NSString *> *> *, NSError *, CLCallbackDropper, NSArray<CLLocation *> *, _CLPlaceInference *)_block_invoke", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        id v12 = objc_alloc_init((Class)CLGeocoder);
        [v12 _setResponseSilo:[*(id *)(v5 + 8)] silo];
        sub_100C95BF8(v5, v10);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3321888768;
        v22[2] = sub_100C96544;
        v22[3] = &unk_1022F08B0;
        v22[4] = v10;
        uint64_t v14 = a1[7];
        double v13 = (std::__shared_weak_count *)a1[8];
        v22[7] = v5;
        v22[8] = v14;
        uint64_t v23 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = a1[9];
        uint64_t v16 = (std::__shared_weak_count *)a1[10];
        void v22[5] = a1[4];
        uint64_t v24 = v15;
        uint64_t v25 = v16;
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v15 = a1[9];
          uint64_t v16 = (std::__shared_weak_count *)a1[10];
        }
        v22[6] = a1[5];
        ++*(_DWORD *)a1[7];
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3321888768;
        _DWORD v20[2] = sub_100C968D0;
        double v20[3] = &unk_1022F0910;
        v20[5] = v15;
        uint64_t v21 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v20[4] = v22;
        [v12 geocodeAddressString:v10 completionHandler:v20];
        if (v21) {
          std::__shared_weak_count::__release_weak(v21);
        }
        if (v25) {
          std::__shared_weak_count::__release_weak(v25);
        }
        if (v23) {
          sub_1000DB0A0(v23);
        }
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id result = [obj countByEnumeratingWithState:&v26 objects:v42 count:16];
      id v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_100C9651C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count **a11, std::__shared_weak_count **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  sub_101A895B4(a11, a12);
  _Unwind_Resume(a1);
}

void sub_100C96544(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a3)
  {
    --**(_DWORD **)(a1 + 64);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022F0A20);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#dsa geocode returned error %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022F0A20);
      }
      int v21 = 138412290;
      uint64_t v22 = a3;
      id v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::enumerateOverAddressDictionaryAndSendInferredResults(NSDictionary<NSNumber *,NSArray<NSString *> *> *, NSError *, CLCallbackDropper, NSArray<CLLocation *> *, _CLPlaceInference *)_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v9 = [a2 countByEnumeratingWithState:&v17 objects:v25 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v10) {
            objc_enumerationMutation(a2);
          }
          id v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          double v13 = objc_alloc_init(CLMeCardEntry);
          [(CLMeCardEntry *)v13 setMeCardString:*(void *)(a1 + 32)];
          -[CLMeCardEntry setMeCardMapItem:](v13, "setMeCardMapItem:", [v12 location]);
          [*(id *)(v4 + 584) addObject:v13];
        }
        id v9 = [a2 countByEnumeratingWithState:&v17 objects:v25 count:16];
      }
      while (v9);
    }
    --**(_DWORD **)(a1 + 64);
  }
  if (!**(_DWORD **)(a1 + 64))
  {
    uint64_t v14 = *(void **)(a1 + 40);
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 88);
    v16[0] = *(void *)(a1 + 80);
    v16[1] = (uint64_t)v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100C94EBC(v4, v14, v16, *(void **)(a1 + 48));
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100C9682C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100C9684C(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C96880(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    sub_1000DB0A0(v3);
  }
}

uint64_t sub_100C968D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    if (*(void *)(v3 + 8) != -1) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }
  return result;
}

uint64_t sub_100C96960(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void *sub_100C96978(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C969AC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    sub_1000DB0A0(v3);
  }
}

void sub_100C969FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100C96A8C;
  v5[3] = &unk_1022DD4D0;
  uint64_t v3 = *(void *)(a1 + 32);
  v5[4] = a3;
  void v5[5] = v3;
  void v5[6] = a2;
  long long v6 = *(_OWORD *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    if (*(void *)(v4 + 8) != -1) {
      sub_100C96A8C(v5);
    }
  }
}

void sub_100C96A8C(void *a1)
{
  uint64_t v2 = a1[8];
  if (a1[4])
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022F0A20);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = a1[4];
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#dsa fetchformattedaddress returned error %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022F0A20);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::fetchFormattedAddressAndSendResults(_CLPlaceInference *, NSString *, CLCallbackDropper)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_100C916EC(v2, (uint64_t)+[NSError errorWithDomain:kCLErrorDomainPrivate code:6 userInfo:0]);
  }
  else
  {
    uint64_t v5 = (void *)a1[5];
    long long v6 = (void *)a1[6];
    id v7 = (void *)a1[7];
    uint64_t v8 = a1[8];
    sub_100C96CC4(v8, v5, v6, v7);
  }
}

void sub_100C96CC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = +[NSMutableArray array];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022F0A20);
  }
  id v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138477827;
    __int16 v32 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#dsa meCardAddress  %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022F0A20);
    }
    long long v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  id v10 = [a4 stringByReplacingOccurrencesOfString:@"\n" withString:@","];
  id v11 = +[NSMutableDictionary dictionary];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "name")] forKeyedSubscript:@"Name"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "thoroughfare")] forKeyedSubscript:@"Thoroughfare"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "subThoroughfare")] forKeyedSubscript:@"SubThoroughfare"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "locality")] forKeyedSubscript:@"City"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "subLocality")] forKeyedSubscript:@"SubLocality"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "administrativeArea")] forKeyedSubscript:@"State"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "subAdministrativeArea")] forKeyedSubscript:@"SubAdministrativeArea"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "postalCode")] forKeyedSubscript:@"ZIP"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "ISOcountryCode")] forKeyedSubscript:@"CountryCode"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "country")] forKeyedSubscript:@"Country"];
  [v11 setObject:objc_msgSend(objc_msgSend(a2, "placemark"), "inlandWater") forKeyedSubscript:@"InlandWater"];
  [v11 setObject:[objc_msgSend(objc_msgSend(a2, "placemark"), "ocean")] forKeyedSubscript:@"Ocean"];
  id v12 = a3;
  [v11 setObject:a3 forKeyedSubscript:@"FormattedAddressLines"];
  id v13 = [objc_alloc((Class)CLPlacemark) initWithLocation:[objc_msgSend(objc_msgSend(a2, "placemark"), "location")] addressDictionary:v11 region:0 areasOfInterest:0 mapItemSource:0 geoMapItemHandle:0 meCardAddress:v10];
  id v14 = objc_alloc((Class)_CLPlaceInference);
  id v15 = [a2 userType];
  id v16 = [a2 placeType];
  id v17 = [a2 referenceLocation];
  [a2 confidence];
  id v19 = [v14 initWithUserType:v15 placeType:v16 placemark:v13 referenceLocation:v17 confidence:objc_msgSend(a2, "preferredName") preferredName:objc_msgSend(a2, "_loiIdentifier") loiIdentifier:v18];
  [v8 addObject:v19];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022F0A20);
  }
  long long v20 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = [objc_msgSend(v19, "placemark") formattedAddressLines];
    id v22 = [[[v19 placemark] mecardAddress];
    *(_DWORD *)uint64_t buf = 138478339;
    __int16 v32 = v12;
    __int16 v33 = 2113;
    id v34 = v21;
    __int16 v35 = 2113;
    id v36 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#dsa fetchformattedaddress received %{private}@, updated address in placemark  %{private}@, address in mecard %{private}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022F0A20);
    }
    [objc_msgSend(v19, "placemark") formattedAddressLines];
    [objc_msgSend(v19, "placemark") mecardAddress];
    long long v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  *(_DWORD *)(a1 + 328) = 1;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  uint64_t v23 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultSuccess, caching it", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    long long v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 248);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a1 + 264));
  long long v24 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(a1 + 472) = v24;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a1 + 500) = *(_OWORD *)(a1 + 364);
  long long v25 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a1 + 440) = v25;
  *(_DWORD *)(a1 + 520) = 1;
  sub_100C975CC(a1);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  long long v26 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultSuccess, caching it in CLAnalyticsLogger", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    int v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  sub_100C94020(a1, v8, 0);
}

void sub_100C975CC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 520);
  *(_DWORD *)uint64_t buf = 173;
  v26[0] = v2;
  int v3 = *(_DWORD *)(a1 + 544);
  v26[6] = 0;
  char v26[8] = 174;
  v26[10] = v3;
  v26[16] = 0;
  int v4 = *(_DWORD *)(a1 + 548);
  v26[18] = 175;
  v26[20] = v4;
  float v5 = *(float *)(a1 + 552) * 100.0;
  v26[26] = 0;
  v26[28] = 176;
  *(float *)&v26[30] = v5;
  uint64_t v6 = *(void *)(a1 + 536);
  v26[36] = 4;
  v26[38] = 177;
  v26[40] = v6;
  v26[46] = 0;
  uint64_t v7 = *(void *)(a1 + 528);
  v26[48] = 178;
  v26[50] = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 556);
  v26[56] = 0;
  v26[58] = 179;
  v26[60] = v7;
  v26[66] = 0;
  LODWORD(v7) = *(_DWORD *)(a1 + 560);
  v26[68] = 180;
  v26[70] = v7;
  v26[76] = 0;
  int v8 = *(_DWORD *)(a1 + 564);
  v26[78] = 181;
  v26[80] = v8;
  v26[86] = 4;
  int v9 = *(_DWORD *)(a1 + 568);
  v26[88] = 182;
  v26[90] = v9;
  v26[96] = 4;
  int v10 = *(_DWORD *)(a1 + 572);
  v26[98] = 183;
  v26[100] = v10;
  v26[106] = 0;
  id v22 = 0;
  v23[0] = 0;
  id v21 = 0;
  v23[1] = &v21;
  char v24 = 0;
  id v21 = (char *)operator new(0x1B8uLL);
  id v22 = v21;
  v23[0] = v21 + 440;
  id v22 = (unsigned char *)sub_100682A48((uint64_t)v23, (uint64_t)buf, (uint64_t)&v27, (uint64_t)v21);
  for (uint64_t i = 408; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  id v12 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v26[0]) = 2082;
    *(void *)((char *)v26 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#era, setMeasurements for ERA event\"}", buf, 0x12u);
  }
  id v13 = *(void **)(a1 + 688);
  memset(v20, 0, sizeof(v20));
  sub_100682C20(v20, (uint64_t)v21, (uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - v21) >> 3));
  [v13 setMeasurements:sub_10067C03C(v20)];
  *(void *)uint64_t buf = v20;
  sub_100682B1C((void ***)buf);
  *(unsigned char *)(a1 + 576) = 1;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  id v14 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v26[0]) = 2082;
    *(void *)((char *)v26 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#era, reset ERA metrics\"}", buf, 0x12u);
  }
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = -1;
  *(_DWORD *)(a1 + 552) = -1082130432;
  __asm { FMOV            V1.2S, #-1.0 }
  *(void *)(a1 + 556) = -1;
  *(void *)(a1 + 564) = _D1;
  *(_DWORD *)(a1 + 572) = 0;
  *(void *)uint64_t buf = &v21;
  sub_100682B1C((void ***)buf);
}

void sub_100C97924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_100682B1C(&a17);
  _Unwind_Resume(a1);
}

unint64_t sub_100C9798C(unint64_t result)
{
  if (result >= 5)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    long long v1 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "#dsa Please update userSpecificPlaceTypeFromRTUserType", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      int v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "_CLPlaceInferenceUserSpecificPlaceType userSpecificPlaceTypeFromRTUserType(RTPlaceInferenceUserSpecificPlaceType)", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_100C97B20(unint64_t a1)
{
  if (a1 < 5) {
    return qword_101D8AC80[a1];
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  int v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#dsa Please update placeInferencePlaceTypeFromRTPlaceType", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "_CLPlaceInferencePlaceType placeInferencePlaceTypeFromRTPlaceType(RTPlaceInferencePlaceType)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return 2;
}

id sub_100C97CC4(void *a1)
{
  long long v1 = a1;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  int v29 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  char v35 = 0;
  [a1 latitude];
  uint64_t v3 = v2;
  [v1 longitude];
  uint64_t v5 = v4;
  [v1 horizontalUncertainty];
  uint64_t v7 = v6;
  [objc_msgSend(v1, "date") timeIntervalSinceReferenceDate];
  uint64_t v9 = v8;
  LODWORD(v1) = [v1 referenceFrame];
  id v10 = objc_alloc((Class)CLLocation);
  int v17 = 0xFFFF;
  uint64_t v18 = v3;
  uint64_t v19 = v5;
  uint64_t v20 = v7;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v21 = xmmword_101D1C570;
  long long v22 = _Q0;
  long long v23 = _Q0;
  uint64_t v24 = v9;
  int v25 = 0;
  unint64_t v26 = 0xBFF0000000000000;
  unint64_t v30 = 0xBFF0000000000000;
  uint64_t v31 = 0x7FFFFFFFLL;
  int v32 = (int)v1;
  return [v10 initWithClientLocation:&v17];
}

id sub_100C97DB0(void *a1, uint64_t a2)
{
  id v4 = +[NSMutableDictionary dictionary];
  [v4 setObject:[a1 name] forKeyedSubscript:@"Name"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "thoroughfare")] forKeyedSubscript:@"Thoroughfare"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "subThoroughfare")] forKeyedSubscript:@"SubThoroughfare"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "locality")] forKeyedSubscript:@"City"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "subLocality")] forKeyedSubscript:@"SubLocality"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "administrativeArea")] forKeyedSubscript:@"State"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "subAdministrativeArea")] forKeyedSubscript:@"SubAdministrativeArea"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "postalCode")] forKeyedSubscript:@"ZIP"];
  [v4 setObject:objc_msgSend(objc_msgSend(a1, "address"), "countryCode") forKeyedSubscript:@"CountryCode"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "country")] forKeyedSubscript:@"Country"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "inlandWater")] forKeyedSubscript:@"InlandWater"];
  [v4 setObject:[objc_msgSend(objc_msgSend(a1, "address"), "ocean")] forKeyedSubscript:@"Ocean"];
  id v5 = [objc_alloc((Class)CLPlacemark) initWithLocation:a2 addressDictionary:v4 region:0 areasOfInterest:[objc_msgSend(objc_msgSend(a1, "address"), "areasOfInterest")] mapItemSource:[objc_msgSend(a1, "source")] geoMapItemHandle:[objc_msgSend(a1, "geoMapItemHandle")] category:[objc_msgSend(a1, "category")] meCardAddress:&stru_10234F018 muid:[objc_msgSend(a1, "muid")]];

  return v5;
}

void sub_100C9800C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(off_1022F0A40, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100C98088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C980A0(uint64_t result)
{
  uint64_t v1 = result + 184;
  if (*(void *)(result + 184) == 5)
  {
    uint64_t v2 = result;
    v3[0] = @"fidelityPolicy";
    v4[0] = +[NSNumber numberWithUnsignedInteger:5];
    v3[1] = @"collectedLocationCountTotal";
    v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 192)];
    _DWORD v3[2] = @"collectedLocationCountGPS";
    void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 196)];
    v3[3] = @"collectedLocationCountWiFi";
    v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 200)];
    v3[4] = @"collectedLocationCountCell";
    void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 204)];
    void v3[5] = @"collectedLocationCountOthers";
    v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 208)];
    void v3[6] = @"collectedLocationBestHorizontalAccuracy";
    void v4[6] = +[NSNumber numberWithInt:(int)fmin(*(double *)(v2 + 216), 2000.0)];
    v3[7] = @"outputLocationSource";
    v4[7] = +[NSNumber numberWithUnsignedInteger:*(void *)(v2 + 224)];
    v3[8] = @"distanceBetweenOutputLocationAndCollectedLocationWithBestHorizontalAccuracy";
    unsigned char v4[8] = +[NSNumber numberWithInt:(int)fmin(*(double *)(v2 + 232), 500.0)];
    void v3[9] = @"signalEnvironmentType";
    void v4[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 240)];
    v3[10] = @"routineEnabled";
    v4[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 244)];
    v3[11] = @"hasResult";
    v4[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 245)];
    +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:12];
    uint64_t result = AnalyticsSendEvent();
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
    *(_DWORD *)(v1 + 24) = 0;
    *(void *)(v1 + 16) = 0;
    *(void *)(v2 + 216) = 0xBFF0000000000000;
    *(void *)(v2 + 224) = 0;
    *(void *)(v2 + 232) = 0xBFF0000000000000;
    *(_DWORD *)(v2 + 240) = 0;
    *(_WORD *)(v2 + 244) = 257;
  }
  return result;
}

void sub_100C982CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1005D1520(&off_1022F0A48, &v2);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v1 + 24))(v1, &v2, 32);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100C98348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C98360@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 42))
  {
    uint64_t v3 = result;
    uint64_t result = sub_10122B470(*(_DWORD *)(result + 72));
    if (!v4)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      id v5 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        uint64_t v6 = *(int *)(v3 + 72);
        int v9 = 68289282;
        int v10 = 0;
        __int16 v11 = 2082;
        id v12 = "";
        __int16 v13 = 2050;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Couldn't convert location notification to accuracy\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)&v9, 0x1Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022F0A00);
        }
      }
      uint64_t v7 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v8 = *(int *)(v3 + 72);
        int v9 = 68289282;
        int v10 = 0;
        __int16 v11 = 2082;
        id v12 = "";
        __int16 v13 = 2050;
        uint64_t v14 = v8;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Couldn't convert location notification to accuracy", "{\"msg%{public}.0s\":\"#dsa Couldn't convert location notification to accuracy\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)&v9, 0x1Cu);
      }
      uint64_t result = 0xBFF0000000000000;
    }
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 23) = 0;
    *(unsigned char *)(a2 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
  }
  return result;
}

void sub_100C98538(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  uint64_t v3 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t buf = 68289282;
    __int16 v27 = 2082;
    uint64_t v28 = "";
    __int16 v29 = 2114;
    uint64_t v30 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa client stopped PlaceInference Request\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 45))
  {
    if (*(_DWORD *)(a1 + 328) == 1 || *(_DWORD *)(a1 + 464) != 1)
    {
      if (*(_DWORD *)(a1 + 324) != 2) {
        goto LABEL_24;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      uint64_t v7 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289026;
        __int16 v27 = 2082;
        uint64_t v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa DSA AWD - Submitting latest metrics\"}", (uint8_t *)&buf, 0x12u);
      }
      long long v10 = *(_OWORD *)(a1 + 248);
      uint64_t v6 = (void **)&v11;
      if (*(char *)(a1 + 287) < 0)
      {
        sub_1000DC48C(&v11, *(void **)(a1 + 264), *(void *)(a1 + 272));
      }
      else
      {
        long long v11 = *(_OWORD *)(a1 + 264);
        uint64_t v12 = *(void *)(a1 + 280);
      }
      long long v8 = *(_OWORD *)(a1 + 336);
      long long v15 = *(_OWORD *)(a1 + 320);
      long long v16 = v8;
      v17[0] = *(_OWORD *)(a1 + 352);
      long long v9 = *(_OWORD *)(a1 + 304);
      long long v13 = *(_OWORD *)(a1 + 288);
      long long v14 = v9;
      *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a1 + 364);
      sub_100C988F4(a1, (uint64_t)&v10);
      if ((SHIBYTE(v12) & 0x80000000) == 0) {
        goto LABEL_24;
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      id v5 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289026;
        __int16 v27 = 2082;
        uint64_t v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa DSA AWD - Submitting cached metrics\"}", (uint8_t *)&buf, 0x12u);
      }
      long long v18 = *(_OWORD *)(a1 + 384);
      uint64_t v6 = (void **)&v19;
      if (*(char *)(a1 + 423) < 0)
      {
        sub_1000DC48C(&v19, *(void **)(a1 + 400), *(void *)(a1 + 408));
      }
      else
      {
        long long v19 = *(_OWORD *)(a1 + 400);
        uint64_t v20 = *(void *)(a1 + 416);
      }
      long long v23 = *(_OWORD *)(a1 + 456);
      long long v24 = *(_OWORD *)(a1 + 472);
      v25[0] = *(_OWORD *)(a1 + 488);
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a1 + 500);
      long long v21 = *(_OWORD *)(a1 + 424);
      long long v22 = *(_OWORD *)(a1 + 440);
      sub_100C988F4(a1, (uint64_t)&v18);
      if ((SHIBYTE(v20) & 0x80000000) == 0) {
        goto LABEL_24;
      }
    }
    operator delete(*v6);
LABEL_24:
    sub_100C98B48(a1);
    *(unsigned char *)(a1 + 45) = 0;
  }
}

void sub_100C988A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100C988F4(uint64_t a1, uint64_t a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  uint64_t v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v17 = 0;
    __int16 v18 = 2082;
    long long v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,submitting LocationEmergencyPOIStatistics metric\"}", buf, 0x12u);
  }
  *(unsigned char *)a2 = 1;
  *(CFAbsoluteTime *)(a2 + 8) = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)(a2 + 16), "com.apple.locationd");
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  id v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v17 = 0;
    __int16 v18 = 2082;
    long long v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,reset AWD metrics\"}", buf, 0x12u);
  }
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0xBFF0000000000000;
  uint64_t v6 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v6);
  }
  *uint64_t v6 = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v7 = xmmword_101D1D180;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 288) = xmmword_101D1D180;
  *(_OWORD *)(a1 + 304) = _Q1;
  long long v13 = xmmword_101D47CB0;
  *(_OWORD *)(a1 + 320) = xmmword_101D47CB0;
  *(void *)(a1 + 336) = 0xFFFFFFFFLL;
  *(void *)(a1 + 344) = 0xBFF0000000000000;
  *(void *)(a1 + 352) = -1;
  *(void *)(a1 + 360) = 0xBFF0000000000000;
  *(void *)(a1 + 368) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0xBFF0000000000000;
  long long v14 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
  {
    long long v15 = _Q1;
    operator delete(*v14);
    long long v13 = xmmword_101D47CB0;
    long long v7 = xmmword_101D1D180;
    _Q1 = v15;
  }
  *long long v14 = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = v7;
  *(void *)(a1 + 440) = 0xBFF0000000000000;
  *(void *)(a1 + 448) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 456) = v13;
  *(void *)(a1 + 472) = 0xFFFFFFFFLL;
  *(void *)(a1 + 480) = 0xBFF0000000000000;
  *(void *)(a1 + 488) = -1;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_DWORD *)(a1 + 512) = 0;
}

void sub_100C98B48(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 576)) {
    sub_100C975CC(a1);
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  id v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v7 = 0;
    __int16 v8 = 2082;
    long long v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#era, submitEvent for ERA event\"}", buf, 0x12u);
  }
  uint64_t v3 = *(void **)(a1 + 688);
  if (byte_10248A917 < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A900, *((unint64_t *)&xmmword_10248A900 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = xmmword_10248A900;
    uint64_t v5 = unk_10248A910;
  }
  [v3 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 576) = 0;
}

void sub_100C98C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100C98CB4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  [*(id *)(a1 + 8) silo];
  if (*(unsigned char *)(a1 + 41))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa #warning Already running a place inference request, but asked to start again\"}", buf, 0x12u);
    }
    goto LABEL_65;
  }
  *(unsigned char *)(a1 + 41) = 1;
  sub_100134750(buf, "com.apple.locationd.place_inference");
  if (sub_1010A4BAC(a1))
  {
    int v6 = 0;
  }
  else
  {
    sub_100134750(v34, "com.apple.locationd.emergencyplace_inference");
    int v6 = sub_1010A4BAC(a1) ^ 1;
    if (v35 < 0) {
      operator delete(v34[0]);
    }
  }
  if (SBYTE3(v33) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_12;
    }
  }
  else if (v6)
  {
LABEL_12:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    int v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v32 = 2114;
      uint64_t v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Client does not have appropriate entitlement to get place inference\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
    }
    long long v9 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v32 = 2114;
      uint64_t v33 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Client does not have appropriate entitlement to get place inference", "{\"msg%{public}.0s\":\"#dsa Client does not have appropriate entitlement to get place inference\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
LABEL_19:
    sub_100C916EC(a1, (uint64_t)+[NSError errorWithDomain:kCLErrorDomain code:1 userInfo:0]);
    goto LABEL_65;
  }
  id v11 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessagePlaceInferenceFidelityPolicyKey"];
  if (v11)
  {
    if (sub_100138A70(a1, 4))
    {
      unsigned int v12 = [v11 unsignedIntValue];
      unsigned int v13 = v12;
      switch(v12)
      {
        case 6u:
          long long v24 = *(void **)(a1 + 56);
          v30[0] = _NSConcreteStackBlock;
          v30[1] = 3221225472;
          double v30[2] = sub_100C997F8;
          v30[3] = &unk_1022C1658;
          v30[4] = a1;
          [v24 fetchCachedPlaceInferencesWithReply:v30];
          goto LABEL_65;
        case 5u:
          *(void *)(a1 + 112) = 1;
          break;
        case 4u:
          sub_100134750(buf, "com.apple.locationd.emergencyplace_inference");
          char v14 = sub_1010A4BAC(a1);
          if (SBYTE3(v33) < 0) {
            operator delete(*(void **)buf);
          }
          if ((v14 & 1) == 0)
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022F0A00);
            }
            long long v15 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v16 = *(void *)(a1 + 24);
              *(_DWORD *)uint64_t buf = 138543362;
              *(void *)&uint8_t buf[4] = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#dsa client '%{public}@' not authorized for Emergency Fidelity policy", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022F0A00);
              }
              uint64_t v28 = *(void **)(a1 + 24);
              LODWORD(v34[0]) = 138543362;
              *(void **)((char *)v34 + 4) = v28;
              __int16 v29 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v29);
              if (v29 != buf) {
                free(v29);
              }
            }
            goto LABEL_19;
          }
          break;
      }

      *(void *)(a1 + 136) = objc_alloc_init((Class)NSDate);
      *(void *)(a1 + 104) = v13;
      *(void *)(a1 + 184) = v13;
      sub_100C8EF58(a1);
      sub_100C90F1C(a1);
      goto LABEL_65;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    long long v19 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#dsa client '%{public}@' not authorized for location; not starting yet in handleRequestPlaceInference",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      int v25 = *(void **)(a1 + 24);
      LODWORD(v34[0]) = 138543362;
      *(void **)((char *)v34 + 4) = v25;
      unint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
      if (v26 != buf) {
        free(v26);
      }
    }
    sub_100C916EC(a1, (uint64_t)+[NSError errorWithDomain:kCLErrorDomain code:1 userInfo:0]);
    *(_DWORD *)(a1 + 520) = 6;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    long long v21 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorLSOff", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v34[0]) = 0;
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
    *(_DWORD *)(a1 + 328) = 6;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    long long v22 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorLSOff", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      LOWORD(v34[0]) = 0;
      long long v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
      if (v23 != buf) {
        free(v23);
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    int v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Place inference request is missing required field: fidelityPolicy\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
    }
    __int16 v18 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Place inference request is missing required field: fidelityPolicy", "{\"msg%{public}.0s\":\"#dsa Place inference request is missing required field: fidelityPolicy\"}", buf, 0x12u);
    }
    sub_100C916EC(a1, (uint64_t)+[NSError errorWithDomain:kCLErrorDomainPrivate code:5 userInfo:0]);
  }
LABEL_65:
}

void sub_100C99774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_100C997F8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = sub_100C94CC8(a1, a2);

  sub_100C94020(v2, v3, 0);
}

void *sub_100C99838@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_1022F0A60;
  v5[1] = sub_100C98CB4;
  void v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessagePlaceInference");
  sub_100BF067C((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_1022F0A60;
  v4[1] = sub_100C98538;
  void v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessagePlaceInferenceStop");
  sub_100BF067C((uint64_t)v9, (uint64_t)v4);
  sub_100C9A6B4(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BF0B98(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BF0B98(v4);
  return sub_100BF0B98(v5);
}

void sub_100C99990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_100C999F0(v2 + i);
  sub_100BF0B98((uint64_t *)va);
  sub_100BF0B98(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C999F0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100C99A2C(uint64_t a1, uint64_t a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 138543618;
    uint64_t v9 = v5;
    __int16 v10 = 2082;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#dsa client '%{public}@ %{public}s'; stopping place inference location and wifi scans",
      buf,
      0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::shutDownCurrentSessionWithReason(const char *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10012E3E4(a1 + 160);
  return sub_100C8ECEC(a1);
}

void sub_100C99C0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41))
  {
    if (sub_100138A70(a1, 4))
    {
      if ((sub_100138A70(a1, 12) & 1) != 0 || *(unsigned char *)(a1 + 44)) {
        return;
      }
      uint64_t v2 = "lost precise location authorization";
    }
    else
    {
      uint64_t v2 = "authorization status changed for location";
    }
    sub_100C99A2C(a1, (uint64_t)v2);
    id v3 = +[NSError errorWithDomain:kCLErrorDomain code:1 userInfo:0];
    sub_100C916EC(a1, (uint64_t)v3);
  }
}

id sub_100C99CB8(uint64_t a1, void *a2)
{
  [*(id *)(a1 + 120) addObject:a2];
  if ([a2 type] == 1)
  {
    ++*(_DWORD *)(a1 + 196);
  }
  else if ([a2 type] == 4)
  {
    ++*(_DWORD *)(a1 + 200);
  }
  else if ([a2 type] == 6)
  {
    ++*(_DWORD *)(a1 + 204);
  }
  else
  {
    ++*(_DWORD *)(a1 + 208);
  }
  ++*(_DWORD *)(a1 + 192);
  id v4 = *(void **)(a1 + 144);
  if (!v4)
  {
    uint64_t v8 = 0;
    goto LABEL_12;
  }
  [v4 horizontalAccuracy];
  double v6 = v5;
  [a2 horizontalAccuracy];
  if (v6 > v7)
  {
    uint64_t v8 = *(void **)(a1 + 144);
LABEL_12:

    *(void *)(a1 + 144) = a2;
  }
  id result = [a2 horizontalAccuracy];
  if (v10 < 200.0)
  {
    if ([a2 type] == 1
      || [a2 type] == 4
      || [a2 type] == 11
      || (id result = [a2 type], result == 13))
    {

      id result = a2;
      *(void *)(a1 + 128) = result;
    }
  }
  return result;
}

void sub_100C99E08(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 < 2)
  {
    id v6 = objc_alloc((Class)CLLocation);
    long long v7 = *(_OWORD *)(a4 + 112);
    v24[6] = *(_OWORD *)(a4 + 96);
    v24[7] = v7;
    v25[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a4 + 140);
    long long v8 = *(_OWORD *)(a4 + 48);
    _DWORD v24[2] = *(_OWORD *)(a4 + 32);
    _DWORD v24[3] = v8;
    long long v9 = *(_OWORD *)(a4 + 80);
    v24[4] = *(_OWORD *)(a4 + 64);
    v24[5] = v9;
    long long v10 = *(_OWORD *)(a4 + 16);
    v24[0] = *(_OWORD *)a4;
    v24[1] = v10;
    id v11 = [v6 initWithClientLocation:v24];
LABEL_5:
    sub_100C99CB8(a1, v11);
    return;
  }
  if (*a3 == 2)
  {
    id v12 = objc_alloc((Class)CLLocation);
    long long v13 = *(_OWORD *)(a4 + 112);
    v22[6] = *(_OWORD *)(a4 + 96);
    v22[7] = v13;
    v23[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)(a4 + 140);
    long long v14 = *(_OWORD *)(a4 + 48);
    v22[2] = *(_OWORD *)(a4 + 32);
    v22[3] = v14;
    long long v15 = *(_OWORD *)(a4 + 80);
    v22[4] = *(_OWORD *)(a4 + 64);
    void v22[5] = v15;
    long long v16 = *(_OWORD *)(a4 + 16);
    v22[0] = *(_OWORD *)a4;
    v22[1] = v16;
    id v11 = [v12 initWithClientLocation:v22 coarseMetaData:*(void *)(a4 + 1320)];
    goto LABEL_5;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F0A00);
  }
  __int16 v18 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    int v29 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#dsa received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d In onLocationNotification", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    int v20 = *a3;
    int v26 = 67240192;
    int v27 = v20;
    long long v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
}

void sub_100C9A07C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 3)
  {
    uint64_t v6 = *(void *)(a4 + 112);
    uint64_t v5 = *(void *)(a4 + 120);
    if (v5 != v6)
    {
      do
      {
        id v8 = objc_alloc((Class)RTWiFiAccessPoint);
        sub_100B39278(__p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v9 = __p;
        }
        else {
          long long v9 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        id v10 = [v8 initWithMac:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9) rssi:*(int *)(v6 + 32) channel:*(int *)(v6 + 40) age:*(double *)(v6 + 56) date:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(v6 + 48))];
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        [*(id *)(a1 + 152) addObject:v10];
        v6 += 88;
      }
      while (v6 != v5);
      return;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    long long v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      long long v15 = sub_100D54E8C(*a3);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#dsa empty accessPoints, %{pubic}s", (uint8_t *)__p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      sub_100D54E8C(*a3);
      long long v13 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", (const char *)v13);
      if (v13 != __p) {
LABEL_28:
      }
        free(v13);
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F0A00);
    }
    id v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *a3;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#dsa received unhandled notification %{public, CLWifiService_Type::Notification}d In onWifiServiceNotification", (uint8_t *)__p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F0A00);
      }
      long long v13 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", (const char *)v13);
      if (v13 != __p) {
        goto LABEL_28;
      }
    }
  }
}

void sub_100C9A46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_100C9A490(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C9A4C0(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100C9A4F0(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

__n128 sub_100C9A520(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022F0A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100C9A56C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022F0A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C9A59C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100C9A5A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C9A5E4()
{
}

void sub_100C9A5F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  long long v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  long long v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100C9A690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C9A6B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100C9A730(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100C9A71C(_Unwind_Exception *a1)
{
  sub_100BF0C1C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100C9A730(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100C9A9B4(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100C9AAA4((uint64_t)v25, 0);
  return i;
}

void sub_100C9A99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C9AAA4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100C9A9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100C9AA2C(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100C9AA14(_Unwind_Exception *a1)
{
  sub_100C9AAA4(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100C9AA2C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BF03D4((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100C9AA88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C9AAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF0C9C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100C9AAFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D8AA00;
      v0[3] = unk_101D8AA10;
      v0[4] = xmmword_101D8AA20;
      v0[0] = xmmword_101D8A9E0;
      v0[1] = unk_101D8A9F0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100C9ABDC(_Unwind_Exception *a1)
{
}

double sub_100C9ABF4(double a1)
{
  double v1 = -1.0;
  if (a1 >= 0.0)
  {
    double v1 = 1.0;
    if (a1 > 0.0)
    {
      double v1 = 0.0;
      if (a1 <= 5.0) {
        return dbl_102473558[(int)(a1 / 0.02)];
      }
    }
  }
  return v1;
}

void sub_100C9AE08(id a1)
{
  qword_102480A28 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPeopleDensitySilo"];
}

void sub_100C9AEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C9B170(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  if (qword_1024195D0 != -1) {
    dispatch_once(&qword_1024195D0, &stru_1022F0B50);
  }
  uint64_t v2 = qword_1024195D8;
  if (os_log_type_enabled((os_log_t)qword_1024195D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 16);
    *(_DWORD *)uint64_t buf = 67174657;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ScanAllowanceRefreshHandler: before,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195D0 != -1) {
      dispatch_once(&qword_1024195D0, &stru_1022F0B50);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLPeopleDensity beginService]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 16) = 10;
}

id sub_100C9BDF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) terminateScanSessionFor:0];
}

void sub_100C9CEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C9D3B4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 40) bluetoothState];
  if (result != 5)
  {
    int v3 = *(void **)(a1 + 32);
    return [v3 terminateScanSessionFor:1];
  }
  return result;
}

id sub_100C9D414(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) onBTLEAdvertisement:a2];
}

id sub_100C9D420(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) onBTLEAdvertisement:a2];
}

id sub_100C9D42C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onBTLEInvalidated];
}

void sub_100C9D7B0(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  v7[0] = *(unsigned char *)a3;
  sub_100997A7C((uint64_t)&v8, a3 + 8);
  uint64_t v15 = *(void *)(a3 + 112);
  int v16 = *(_DWORD *)(a3 + 120);
  [a4 onBluetoothServiceNotification:v6 data:v7];
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
}

void sub_100C9D850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C9DE48(id a1)
{
  qword_1024195D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "PeopleDensity");
}

void sub_100C9E128(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100C9EA68(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F0B90);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289282;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    __int16 v6 = 2050;
    uint64_t v7 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"collecting advertisement information\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
  }
  *(void *)(*(void *)(a1 + 32) + 360) = 2;
}

void *sub_100C9EB60(void *result)
{
  if (!*(void *)(result[4] + 312))
  {
    double v1 = result;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F0B90);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 68289282;
      v3[1] = 0;
      __int16 v4 = 2082;
      uint64_t v5 = "";
      __int16 v6 = 2050;
      uint64_t v7 = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"pause data collection for receiving no advertisement\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
    }
    return [(id)v1[4] stopDataCollection];
  }
  return result;
}

void sub_100C9EF94(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F0B90);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289282;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    __int16 v6 = 2050;
    uint64_t v7 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"submit data and stop data collection\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
  }
  [*(id *)(a1 + 32) submitData];
  [*(id *)(a1 + 32) stopDataCollection];
  sub_10131AE3C(*(void *)(*(void *)(a1 + 32) + 48));
}

void sub_100C9FD8C(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100C9FDBC(uint64_t a1, void *a2)
{
}

void sub_100C9FEFC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 208);
  *(void *)(v1 + 208) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_10121CF74(v1);
  _Unwind_Resume(a1);
}

void sub_100C9FF48(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F0CC8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserverWatch::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F0CC8);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserverWatch::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100CA03E8((char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CA0104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100CA0124(uint64_t a1)
{
  return sub_100CA012C(*(void *)(a1 + 32));
}

id sub_100CA012C(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022F0CE8);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 117);
    int v4 = *(_DWORD *)(a1 + 121);
    *(_DWORD *)uint64_t buf = 67109376;
    LODWORD(v8) = v3;
    WORD2(v8) = 1024;
    *(_DWORD *)((char *)&v8 + 6) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Sending session update, user type, %d, predicted type, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F0CE8);
    }
    __int16 v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverWatch::sendSessionUpdate()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)uint64_t buf = 0;
  long long v8 = *(_OWORD *)(a1 + 109);
  long long v9 = *(_OWORD *)(a1 + 125);
  int v10 = *(_DWORD *)(a1 + 141);
  return sub_100CA0710(a1, (uint64_t)buf);
}

uint64_t sub_100CA032C(void *a1)
{
  *a1 = off_1022F0BC0;
  uint64_t v2 = a1[26];
  a1[26] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_10121CF74((uint64_t)a1);
}

void sub_100CA03B0(void *a1)
{
  sub_100CA032C(a1);

  operator delete();
}

char *sub_100CA03E8(char *result, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (*a3 == 2)
  {
    uint64_t v5 = (uint64_t)result;
    long long v6 = a4[13];
    long long v29 = a4[12];
    long long v30 = v6;
    uint64_t v31 = *((void *)a4 + 28);
    long long v7 = a4[9];
    long long v25 = a4[8];
    long long v26 = v7;
    long long v8 = a4[11];
    long long v27 = a4[10];
    long long v28 = v8;
    long long v9 = a4[5];
    long long v21 = a4[4];
    long long v22 = v9;
    long long v10 = a4[7];
    long long v23 = a4[6];
    long long v24 = v10;
    long long v11 = a4[1];
    long long v17 = *a4;
    long long v18 = v11;
    long long v12 = a4[3];
    long long v19 = a4[2];
    long long v20 = v12;
    if (!(void)v11 || (void)v18 == 9 || (void)v18 == 7)
    {
      if (sub_10092C998(v24) == 14) {
        int v13 = v25;
      }
      else {
        int v13 = 0;
      }
      *(void *)&long long v14 = *((void *)&v18 + 1);
      *((void *)&v14 + 1) = __PAIR64__(*(_DWORD *)(v5 + 121), +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:(void)v24]);
      int v15 = v13;
      v16[1] = 0;
      v16[0] = 0;
      uuid_copy((unsigned __int8 *)v16, (const unsigned __int8 *)a4 + 96);
      [*(id *)(v5 + 152) setNextFireDelay:1.0 interval:60.0];
      return (char *)sub_10121D0B8(v5, &v14);
    }
    else
    {
      id result = (char *)sub_10101439C((uint64_t)&v17);
      if (result == 2) {
        return sub_100CA0548((char *)v5);
      }
    }
  }
  return result;
}

char *sub_100CA0548(char *result)
{
  uint64_t v1 = (uint64_t)result;
  if (*(_DWORD *)(result + 117) || *(_DWORD *)(result + 121))
  {
    sub_10121D504((uint64_t)result);
    sub_100CA012C(v1);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F0CE8);
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Disabling update timer.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F0CE8);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverWatch::stopSessionAndTimer()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return (char *)[*(id *)(v1 + 152) setNextFireDelay:1.79769313e308 interval:1.79769313e308];
  }
  return result;
}

id sub_100CA0710(uint64_t a1, uint64_t a2)
{
  int v3 = +[NSData dataWithBytes:a2 length:40];
  id v4 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100CA07B4;
  void v6[3] = &unk_1022CA588;
  uint64_t v6[4] = v3;
  return [v4 doAsync:v6];
}

id sub_100CA07B4(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(120.0, a2, 18, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

uint64_t sub_100CA0800(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  if (*a2 == 10)
  {
    uint64_t v4 = result;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F0CE8);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *a3;
      int v7 = *((_DWORD *)a3 + 2);
      int v8 = *((_DWORD *)a3 + 3);
      int v9 = *((_DWORD *)a3 + 4);
      *(_DWORD *)uint64_t buf = 134218752;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&unsigned char buf[18] = 1024;
      LODWORD(v24) = v8;
      WORD2(v24) = 1024;
      *(_DWORD *)((char *)&v24 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MotionStateObserver,RemoteState,startTime,%.3f,activityType,%d,vehicularConfidence,%d,vehicleType,%d", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F0CE8);
      }
      uint64_t v10 = *a3;
      int v11 = *((_DWORD *)a3 + 2);
      int v12 = *((_DWORD *)a3 + 3);
      int v13 = *((_DWORD *)a3 + 4);
      int v15 = 134218752;
      uint64_t v16 = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionStateObserverWatch::handleCompanionNotification(const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
    sub_10121D75C(v4, (long long *)a3);
    long long v24 = 0uLL;
    *(_OWORD *)uint64_t buf = *(_OWORD *)a3;
    *(_DWORD *)&uint8_t buf[16] = *((_DWORD *)a3 + 4);
    int v15 = 1;
    return (*(uint64_t (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)v4 + 152))(v4, &v15, buf, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_100CA0A74(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CA0AA4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100CA0AD4()
{
  sub_100134750(qword_102480A38, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480A38, (void *)&_mh_execute_header);
}

void *sub_100CA0B34@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 8) {
    uint64_t v2 = "UNKNOWN";
  }
  else {
    uint64_t v2 = off_1022F0D08[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_100CA0B60(uint64_t a1)
{
  memset(v12, 0, sizeof(v12));
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  memset(v3, 0, sizeof(v3));
  sub_1010B5CAC((uint64_t)v3);
  *(_OWORD *)(a1 + 8) = v3[0];
  *(_WORD *)(a1 + 24) = v3[1];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)((char *)&v3[1] + 8);
  *(void *)(a1 + 48) = *((void *)&v3[2] + 1);
  memset((char *)&v3[1] + 8, 0, 24);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v7;
  sub_100CA0D68(a1 + 184, (uint64_t)v12);
  sub_1000D816C(v12);
  if (*((void *)&v3[1] + 1))
  {
    *(void *)&_DWORD v3[2] = *((void *)&v3[1] + 1);
    operator delete(*((void **)&v3[1] + 1));
  }
}

void *sub_100CA0C98(void *a1)
{
  *a1 = off_1022F0D60;
  sub_1000D816C(a1 + 23);
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL sub_100CA0CEC(uint64_t a1, double *a2)
{
  return sub_1010B5D04(a1 + 8, a2);
}

void sub_100CA0CF4(void *a1)
{
  *a1 = off_1022F0D60;
  sub_1000D816C(a1 + 23);
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_100CA0D68(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      long long v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 85;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 170;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_100CA0E0C((void **)a1);
  uint64_t result = sub_100CA0F64(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100CA0E0C(void **a1)
{
  if (a1[5])
  {
    sub_10041FD7C((uint64_t)a1, 0);
    sub_10047399C(a1, 0);
  }
  else
  {
    int v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      int v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100CA0E90(a1);
}

void sub_100CA0E90(void **a1)
{
  int v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  long long v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    long long v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  long long v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    long long v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  long long v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100CA0F64(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100CA0E90((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

NSString *__cdecl sub_100CA1578(CLCompanionSyncAuthObject *self, SEL a2)
{
  v3.receiver = self;
  v3.super_class = (Class)CLCompanionSyncAuthObject;
  return +[NSString stringWithFormat:@"%@ %@", [(CLCompanionSyncAuthObject *)&v3 description], [(CLCompanionSyncAuthObject *)self dictionaryRepresentation]];
}

uint64_t sub_100CA19E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString();

        *(void *)(a1 + 24) = String;
        goto LABEL_95;
      case 2u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              BOOL v9 = v15++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_72:
        uint64_t v43 = 8;
        goto LABEL_89;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 60) |= 8u;
        while (2)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v21 |= (unint64_t)(v23 & 0x7F) << v19;
            if (v23 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                uint64_t v21 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v21 = 0;
        }
LABEL_76:
        BOOL v44 = v21 != 0;
        uint64_t v45 = 56;
        goto LABEL_94;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 60) |= 4u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v16 |= (unint64_t)(v27 & 0x7F) << v24;
            if (v27 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_80:
        uint64_t v43 = 36;
        goto LABEL_89;
      case 5u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v16 = 0;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v16 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              BOOL v9 = v29++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_84:
        uint64_t v43 = 40;
        goto LABEL_89;
      case 6u:
        __int16 v32 = objc_alloc_init(CLAuthSyncVectorClock);
        [(id)a1 addVectorClocks:v32];

        if (!PBReaderPlaceMark() || (sub_10095D3B8((uint64_t)v32, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_54;
      case 7u:
        uint64_t v33 = objc_alloc_init(CLCompanionSyncInterestZone);
        [(id)a1 addInterestZones:v33];

        if PBReaderPlaceMark() && (sub_10065CBDC((uint64_t)v33, a2))
        {
LABEL_54:
          PBReaderRecallMark();
LABEL_95:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 8u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 == -1 || v36 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
            v16 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              BOOL v9 = v35++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_88:
        uint64_t v43 = 32;
LABEL_89:
        *(_DWORD *)(a1 + v43) = v16;
        goto LABEL_95;
      case 9u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        *(unsigned char *)(a1 + 60) |= 0x10u;
        while (2)
        {
          unint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v40 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              BOOL v9 = v39++ >= 9;
              if (v9)
              {
                uint64_t v40 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v40 = 0;
        }
LABEL_93:
        BOOL v44 = v40 != 0;
        uint64_t v45 = 57;
LABEL_94:
        *(unsigned char *)(a1 + v45) = v44;
        goto LABEL_95;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_95;
    }
  }
}

void sub_100CA2DFC(id a1)
{
  qword_102480A50 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPressureCalibrationDatabaseSilo"];
}

uint64_t sub_100CA2EC4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100CA4908;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_10248AAC8 != -1) {
    dispatch_once(&qword_10248AAC8, block);
  }
  return qword_10248AAC0;
}

void sub_100CA3128(id a1)
{
  if (sub_100862C50())
  {
    if (sub_100743218()) {
      byte_102480A60 = 1;
    }
  }
}

void sub_100CA3158(void *a1)
{
}

void sub_100CA3388(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100B8191C(v23, a2);
  unsigned int v25 = (void *)v20[35];
  if (v25)
  {
    v20[36] = v25;
    operator delete(v25);
  }
  sub_1005F5850(v22);
  sub_100CA476C(v21);
  sub_1012D0524(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_100CA341C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022F1138;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100CA34AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CA34C8(uint64_t a1@<X8>)
{
  sub_100134750(__p, "");
  *(void *)a1 = 0x400000000;
  *(_WORD *)(a1 + 8) = 0;
  uint64_t v2 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_1000DC48C(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v5);
    *(void *)(a1 + 40) = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = 0;
  }
}

void sub_100CA3550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CA356C(uint64_t a1)
{
  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  sub_10014D518(a1 + 128, (uint64_t)"SELECT Round, TemperatureOffsetCoefficient, MedianAbsoluteDeviation FROM PressureCalibration WHERE Round IN (SELECT DISTINCT Round FROM PressureCalibration ORDER BY Round DESC LIMIT ?) ORDER BY Round");
}

void sub_100CA3958(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CA39B4(uint64_t a1)
{
  CFStringRef v33 = @"name";
  CFStringRef v34 = @"pressure";
  CFStringRef v31 = @"IOPropertyMatch";
  __int16 v32 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1]);
  CFProperty = (void *)IORegistryEntryCreateCFProperty(MatchingService, @"pressure-offset-calibration", kCFAllocatorDefault, 0);
  IOObjectRelease(MatchingService);
  if (CFProperty)
  {
    CFTypeID v4 = CFGetTypeID(CFProperty);
    if (v4 == CFDataGetTypeID())
    {
      uint64_t v5 = (int *)[CFProperty bytes];
      unint64_t v6 = (char *)[CFProperty length];
      if ((unint64_t)v6 <= 3)
      {
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022F1108);
        }
        unint64_t v7 = qword_1024190D8;
        if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "data not long enough to get version properly", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_1022F1108);
          }
          char v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
        }
        goto LABEL_53;
      }
      int v10 = v6;
      int v11 = *v5;
      if (*v5 != 2 && v11 != 5)
      {
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022F1108);
        }
        uint64_t v13 = qword_1024190D8;
        if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 67109632;
          *(_DWORD *)unsigned int v25 = v11;
          *(_WORD *)&v25[4] = 1024;
          *(_DWORD *)&v25[6] = 2;
          LOWORD(v26) = 1024;
          *(_DWORD *)((char *)&v26 + 2) = 5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "SPPO version (%u) does not match expected versions (%u, %u)", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_1022F1108);
          }
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
      }
      if ((unint64_t)(v10 - 20) > 0xFFFFFFFFFFFFFFEFLL)
      {
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022F1108);
        }
        char v19 = qword_1024190D8;
        if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          *(void *)unsigned int v25 = 0x4043000000000000;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Warning: using default factory calibrated temperature: %f", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_51;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 == -1) {
          goto LABEL_64;
        }
      }
      else
      {
        float v14 = (float)v5[4];
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022F1108);
        }
        float v15 = v14 * 0.0039062;
        uint64_t v16 = qword_1024190D8;
        if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          *(double *)unsigned int v25 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "factory calibrated temperature from syscfg: %f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_1022F1108);
          }
          uint64_t v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        if (v15 >= 10.0 && v15 <= 70.0) {
          goto LABEL_52;
        }
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022F1108);
        }
        char v18 = qword_1024190D8;
        if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134218752;
          *(double *)unsigned int v25 = v15;
          *(_WORD *)&v25[8] = 2048;
          uint64_t v26 = 0x4024000000000000;
          __int16 v27 = 2048;
          uint64_t v28 = 0x4051800000000000;
          __int16 v29 = 2048;
          uint64_t v30 = 0x4043000000000000;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Warning: factory calibrated temperature (%f) is not within acceptable bounds: [%f, %f], using default: %f", buf, 0x2Au);
        }
        if (!sub_10013D1A0(115, 2))
        {
LABEL_51:
          float v15 = 38.0;
LABEL_52:
          *(float *)(a1 + 4) = v15;
LABEL_53:

          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 == -1)
        {
LABEL_64:
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
          goto LABEL_51;
        }
      }
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
      goto LABEL_64;
    }
  }
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022F1108);
  }
  BOOL v9 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Cannot get SPPO property", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
    }
    unsigned int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (CFProperty) {
    CFRelease(CFProperty);
  }
}

BOOL sub_100CA4334(int **a1, float *a2)
{
  int v3 = *a1;
  CFTypeID v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
  if (v5 <= 2)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
    }
    unsigned int v20 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
      *(_DWORD *)uint64_t buf = 134218240;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "size of tco list (%lu) is less than minimum (%d) required for median computation", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022F1108);
      }
      LOWORD(v28) = 0;
      unsigned int v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPressureCalibrationDatabase::computeMedianTemperatureOffsetCoefficient(const std::vector<TemperatureOffsetCoefficientRound>, CLMotionTypePressureBiasFit &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    *a2 = 0.0;
  }
  else
  {
    long long __p = 0;
    __int16 v27 = 0;
    uint64_t v28 = 0;
    if (v5 <= 9) {
      unint64_t v6 = v3;
    }
    else {
      unint64_t v6 = v4 - 30;
    }
    if (v4 == v6)
    {
      unint64_t v7 = 0;
      char v18 = 0;
    }
    else
    {
      unint64_t v7 = 0;
      do
      {
        int v8 = *v6;
        if (v7 >= v28)
        {
          BOOL v9 = __p;
          uint64_t v10 = (v7 - __p) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v12 = v28 - __p;
          if ((v28 - __p) >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            float v14 = (char *)sub_10017EA34((uint64_t)&v28, v13);
            BOOL v9 = __p;
            unint64_t v7 = v27;
          }
          else
          {
            float v14 = 0;
          }
          float v15 = &v14[4 * v10];
          *(_DWORD *)float v15 = v8;
          uint64_t v16 = v15 + 4;
          while (v7 != v9)
          {
            int v17 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v15 - 1) = v17;
            v15 -= 4;
          }
          long long __p = v15;
          uint64_t v28 = &v14[4 * v13];
          if (v9) {
            operator delete(v9);
          }
          unint64_t v7 = v16;
        }
        else
        {
          *(_DWORD *)unint64_t v7 = v8;
          v7 += 4;
        }
        __int16 v27 = v7;
        v6 += 3;
      }
      while (v6 != v4);
      char v18 = __p;
    }
    memset(buf, 0, 24);
    sub_10010F834(buf, v18, (uint64_t)v7, (v7 - v18) >> 2);
    float v23 = sub_1004EF270(*(float **)buf, *(float **)&buf[8], v22);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    *a2 = v23;
    if (__p) {
      operator delete(__p);
    }
  }
  return v5 > 2;
}

void sub_100CA46BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CA4700(uint64_t result)
{
  if (*(unsigned char *)(result + 304))
  {
    long long v2 = *(_OWORD *)(result + 312);
    int v1 = 0;
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 152))();
  }
  return result;
}

uint64_t sub_100CA476C(uint64_t a1)
{
  *(void *)a1 = off_1022F1138;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_100CA47F0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void *sub_100CA486C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100CA48E8()
{
  return 1;
}

uint64_t sub_100CA48F0()
{
  return 1;
}

uint64_t sub_100CA48F8()
{
  return 1;
}

uint64_t sub_100CA4900()
{
  return 1;
}

void sub_100CA4908()
{
}

void sub_100CA4954()
{
}

void sub_100CA4978(uint64_t a1, int a2)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022F1108);
  }
  CFTypeID v4 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Starting pressure calibration, user initiated, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
    }
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPressureCalibrationDatabase::startCalibration(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (!*(void *)(a1 + 328)) {
    goto LABEL_13;
  }
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022F1108);
  }
  unint64_t v5 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Pressure dispatcher was expected to be null.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
    }
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPressureCalibrationDatabase::startCalibration(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (!*(void *)(a1 + 328)) {
LABEL_13:
  }
    operator new();
}

void sub_100CA4CBC()
{
}

void sub_100CA4CE8(__n128 *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 48), "silo") assertInside];

  sub_100CA5804(a2, a1);
}

uint64_t sub_100CA4D3C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 288);
  if (*(void *)(result + 280) == v1)
  {
    int v3 = 0;
    goto LABEL_5;
  }
  int v2 = *(_DWORD *)(v1 - 4);
  if ((v2 & 0x80000000) == 0)
  {
    int v3 = v2 + 1;
LABEL_5:
    *(_DWORD *)(result + 264) = v3;
    return result;
  }
  uint64_t v4 = sub_101A89794();
  return sub_100CA4D78(v4);
}

uint64_t sub_100CA4D78(uint64_t result)
{
  *(_DWORD *)(result + 264) = -1;
  return result;
}

uint64_t sub_100CA4D84(uint64_t a1)
{
  sub_100B81F68(a1 + 344, *(_DWORD *)(a1 + 336), (uint64_t)v13);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a1 + 264);
  *(void *)(a1 + 268) = *(void *)v13;
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022F1108);
  }
  int v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134219008;
    double v29 = v13[0];
    __int16 v30 = 2048;
    double v31 = v13[1];
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 1024;
    int v35 = v15;
    __int16 v36 = 1024;
    int v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "temperatureOffsetCoefficient,%f,medianAbsoluteDeviation,%f,minTemp,%d,maxTemp,%d,valid,%d", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
    }
    int v18 = 134219008;
    double v19 = v13[0];
    __int16 v20 = 2048;
    double v21 = v13[1];
    __int16 v22 = 1024;
    int v23 = v14;
    __int16 v24 = 1024;
    int v25 = v15;
    __int16 v26 = 1024;
    int v27 = v16;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPressureCalibrationDatabase::endRun()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(float *)(a1 + 272) <= 0.0025 && v16 != 0)
  {
    uint64_t v4 = *(void *)(a1 + 280);
    uint64_t v5 = *(void *)(a1 + 288);
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) < 0x64 || v4 == v5) {
      int v7 = -1;
    }
    else {
      int v7 = *(_DWORD *)(v4 + 8);
    }
    sub_100CA50D8(a1, v7);
    sub_100CA5274(a1, v7);
    long long __p = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_100CA7A24(&__p, *(const void **)(a1 + 280), *(void *)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 2));
    *(unsigned char *)(a1 + 304) = sub_100CA4334((int **)&__p, (float *)(a1 + 312));
    if (__p)
    {
      unint64_t v11 = __p;
      operator delete(__p);
    }
    *(_DWORD *)(a1 + 264) = -1;
    sub_100CA4700(a1);
  }
  return sub_10041F48C(v17);
}

void sub_100CA5098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10041F48C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CA50D8(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 128;
  sub_10002B640(a1 + 128);
  if ((a2 & 0x80000000) == 0 && !*(unsigned char *)(a1 + 473)) {
    sub_10014D518(v4, (uint64_t)"DELETE FROM PressureCalibration WHERE Round <= ?");
  }
  sub_100082068((void *)(a1 + 456), &v11);
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v11);
  sub_10014D1A4(v5, 1, *(_DWORD *)(a1 + 276));
  unint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v11);
  sub_100055D58(v6, 2, *(float *)(a1 + 268));
  int v7 = (sqlite3_stmt *)sub_10014D19C(v11);
  sub_100055D58(v7, 3, *(float *)(a1 + 272));
  int v8 = (sqlite3_stmt *)sub_10014D19C(v11);
  sub_10001FEB0(v4, v8);
  sub_100028FB4(v4);
  if (*(uint64_t *)(a1 + 216) <= 0) {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 216);
  }
  sub_10003CC68(v4, v9);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_100CA5244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_101A51238(v10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100CA5274(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = *(char **)(a1 + 288);
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 280);
    uint64_t v4 = *(char **)(a1 + 288);
    if (v5 != v4)
    {
      while (*((_DWORD *)v5 + 2) != a2)
      {
        v5 += 12;
        if (v5 == v4) {
          goto LABEL_11;
        }
      }
    }
    if (v5 != v4)
    {
      size_t v6 = v4 - (v5 + 12);
      if (v4 != v5 + 12) {
        memmove(v5, v5 + 12, v6);
      }
      uint64_t v4 = &v5[v6];
      *(void *)(a1 + 288) = &v5[v6];
    }
  }
LABEL_11:
  if (*(char **)(a1 + 280) == v4 || *((_DWORD *)v4 - 1) < *(_DWORD *)(a1 + 276))
  {
    return sub_100CA5520(a1 + 280, v4, a1 + 268);
  }
  else
  {
    uint64_t v8 = sub_101A89918();
    return (char *)nullsub_1097(v8);
  }
}

void sub_100CA533C(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022F1108);
  }
  int v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopped pressure calibration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPressureCalibrationDatabase::teardown()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(void *)(a1 + 328))
  {
    uint64_t v3 = sub_100862C50();
    sub_1009D26C4(v3, 0, *(void *)(a1 + 328));
    uint64_t v4 = *(void *)(a1 + 328);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 328) = 0;
  }
  sub_100B831F4(a1 + 344);
}

char *sub_100CA5520(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  size_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      sub_1001D7FD4();
    }
    uint64_t v15 = __src - v13;
    int64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 2);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 2);
    if (2 * v17 > v14) {
      unint64_t v14 = 2 * v17;
    }
    if (v17 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v18 = 0x1555555555555555;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v33 = a1 + 16;
    if (v18) {
      double v19 = (char *)sub_10080FC80(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    __int16 v22 = &v19[12 * v16];
    long long __p = v19;
    __int16 v30 = v22;
    double v31 = v22;
    __int16 v32 = &v19[12 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = 2 * v16;
        }
        int v25 = (char *)sub_10080FC80(v8, v24);
        __int16 v22 = &v25[12 * (v24 >> 2)];
        long long __p = v25;
        __int16 v30 = v22;
        __int16 v32 = &v25[12 * v26];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= 12 * (v23 >> 1);
        __int16 v30 = v22;
      }
    }
    uint64_t v27 = *(void *)v3;
    *((_DWORD *)v22 + 2) = *(_DWORD *)(v3 + 8);
    *(void *)__int16 v22 = v27;
    double v31 = v22 + 12;
    uint64_t v4 = (char *)sub_100CA7AF4((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30) {
      double v31 = &v30[(v31 - v30 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    uint64_t v21 = *(void *)a3;
    *((_DWORD *)__src + 2) = *(_DWORD *)(a3 + 8);
    *(void *)long long __src = v21;
    *(void *)(a1 + 8) = __src + 12;
  }
  else
  {
    uint64_t v9 = __src + 12;
    uint64_t v10 = v6 - 12;
    uint64_t v11 = *(void *)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v10 + 2);
      *(void *)uint64_t v11 = v12;
      v11 += 12;
      v10 += 12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(__src + 12, __src, v6 - v9);
    }
    if ((unint64_t)v4 <= v3) {
      v3 += 12 * (*(void *)(a1 + 8) > v3);
    }
    uint64_t v20 = *(void *)v3;
    *((_DWORD *)v4 + 2) = *(_DWORD *)(v3 + 8);
    *(void *)uint64_t v4 = v20;
  }
  return v4;
}

void sub_100CA5798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100CA57E4(uint64_t a1, _OWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 304);
  if (*(unsigned char *)(a1 + 304)) {
    *a2 = *(_OWORD *)(a1 + 312);
  }
  return v2 != 0;
}

void sub_100CA5804(uint64_t a1, __n128 *a2)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022F1108);
  }
  uint64_t v4 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = a2->n128_f32[2];
    double v6 = a2->n128_f32[3];
    unint64_t v7 = a2->n128_u64[0];
    *(_DWORD *)uint64_t buf = 134218496;
    double v10 = v5;
    __int16 v11 = 2048;
    double v12 = v6;
    __int16 v13 = 2048;
    unint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "pressure,%f,temperature,%f,timestamp,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022F1108);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureCalibrationDatabase::onPressureData(const CLPressure::Sample *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100B82838(a1 + 344, a2);
}

void sub_100CA5A08()
{
}

void sub_100CA5AC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100CA5B00(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1022F12C8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    double v12 = a3;
  }
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100CA5BE8(void *a1, uint64_t a2)
{
  sub_100CA798C(a1, a2);

  operator delete();
}

void *sub_100CA5C20(uint64_t a1, uint64_t a2)
{
  return sub_100CA798C((void *)(a1 - 16), a2);
}

void sub_100CA5C28(uint64_t a1, uint64_t a2)
{
  sub_100CA798C((void *)(a1 - 16), a2);

  operator delete();
}

void sub_100CA5C64(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F1028);
      }
      double v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        __int16 v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        double v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1028);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::removeClient(int) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100CA5EF4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100CA5FA8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100CA5FF0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100CA6038(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100CA6080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102473E60);
}

uint64_t sub_100CA60AC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)char v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          unint64_t v24 = (uint64_t *)v18;
        }
        else {
          unint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100CA8B04();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102473E61;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        double v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        __int16 v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        __int16 v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F1028);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F1028);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    char v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100CA6550(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F1028);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      unint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F1028);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100CA67D4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F1028);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F1028);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                char v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                double v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100CA6BA8(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x28uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = (uint64_t)off_1022F1258;
  *(_OWORD *)(v6 + 3) = *a3;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  unsigned char v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100CA6C5C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CA6C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = 0;
  v5[1] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100CA6CC4(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F1028);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&_OWORD v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    double v29 = v30;
    memset(v30, 0, sizeof(v30));
    double v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x28uLL);
    v18[1] = 0;
    _OWORD v18[2] = 0;
    *BOOL v18 = (uint64_t)off_1022F1258;
    *(_OWORD *)(v18 + 3) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_100CA7BC4();
  }
  os_activity_scope_leave(&state);
}

void sub_100CA72A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100CA72F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F1028);
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F1028);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F1028);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F1028);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022F1028);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F1028);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100CA78A4(uint64_t a1)
{
  sub_100CA8A94(a1);

  operator delete();
}

void sub_100CA78DC(uint64_t a1, int a2, void *a3)
{
  sub_100CA81F4(a3);
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0, &v6, v5, *(void *)(a1 + 32));
  }
}

void sub_100CA792C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CA795C(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void *sub_100CA798C(void *a1, uint64_t a2)
{
  *a1 = off_1022F0E18;
  uint64_t v3 = (uint64_t)(a1 + 2);
  a1[2] = off_1022F0E90;
  sub_100B8191C(a1 + 43, a2);
  int v4 = (void *)a1[35];
  if (v4)
  {
    a1[36] = v4;
    operator delete(v4);
  }
  sub_1005F5850(a1 + 16);
  sub_100CA476C(v3);

  return sub_1012D0524(a1);
}

void *sub_100CA7A24(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    BOOL result = sub_100CA7AA0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100CA7A84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100CA7AA0(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_1001D7FD4();
  }
  BOOL result = (char *)sub_10080FC80((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

_DWORD *sub_100CA7AF4(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  int v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(_DWORD **)(a2 + 8);
    do
    {
      uint64_t v9 = *(void *)(v8 - 12);
      v8 -= 12;
      int v10 = *((_DWORD *)v8 + 2);
      *(void *)(v7 - 3) = v9;
      v7 -= 3;
      uint64_t v7[2] = v10;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  int v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    uint64_t v7 = *(_DWORD **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  uint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  int v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  BOOL v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_100CA7BC4()
{
}

void sub_100CA7C70(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        id v49 = v9;
        sub_100CA81F4(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_100CA8060(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              double v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  double v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              id v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F1028);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                double v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F1028);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                id v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100CA8060(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32);
    sub_100CA81F4(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80;
    uint64_t v12 = (uint64_t **)(*(void *)a3 + 40);
    int v15 = (int *)(*(void *)a2 + 32);
    uint64_t v13 = sub_1000EB1B8(v12, v15, (uint64_t)&unk_101D0B290, &v15);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v14];
    }
  }
  return result;
}

void sub_100CA8158(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F1258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CA8178(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F1258;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100CA81D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_100CA81F4(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sub_100CA8290(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_100CA861C(a1);
    }
  }
}

void sub_100CA8290(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_100CA89DC((uint64_t)&v6, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022F1298);
    }
    uint64_t v3 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D8AEEALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_18:
        int v7 = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8AEEALL & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureCalibrationDatabase_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_20:
      dispatch_once(&qword_102418F90, &stru_1022F1298);
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022F1298);
    }
    uint64_t v4 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D8AEEALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
}

id sub_100CA861C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F1298);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8AEEALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureCalibrationDatabase_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F1298);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8AEEALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022F1298);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100CA89DC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102393350))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)16)
    {
      uint64_t v3 = (void *)sub_101A89A9C();
      sub_100CA8A64(v3);
      return;
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes")]];
  }

  [a2 cppObjectPtr];
}

void sub_100CA8A64(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100CA8A94(uint64_t a1)
{
  *(void *)a1 = &off_1022F12C8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100CA8B04()
{
}

uint64_t sub_100CA8BB0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_100CA8C80(id a1)
{
  qword_102480A70 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCapabilityMonitorSilo"];
}

id sub_100CA8F3C(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, void *a4)
{
  return _[a4 onDarwinNotification:*a2 data:*a3];
}

const void **sub_100CA8F50(uint64_t a1, unsigned int *a2, const void **a3, void *a4)
{
  uint64_t v5 = *a2;
  char v6 = *a3;
  id v8 = v6;
  if (v6) {
    CFRetain(v6);
  }
  [a4 onTelephonyNotification:v5 data:&v8];
  return sub_1000DC024(&v8);
}

void sub_100CA8FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DC024((const void **)va);
  _Unwind_Resume(a1);
}

id sub_100CA93AC(int8x16_t *a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100CA9428;
  v4[3] = &unk_1022F1330;
  int8x16_t v2 = a1[2];
  int8x16_t v5 = vextq_s8(v2, v2, 8uLL);
  return [(id)v2.i64[0] accountsWithAccountType:a2 completion:v4];
}

id sub_100CA9428(uint64_t a1, uint64_t a2)
{
  id v4 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100CA94B8;
  void v6[3] = &unk_10229FF28;
  uint64_t v6[4] = a2;
  long long v7 = *(_OWORD *)(a1 + 32);
  return [v4 async:v6];
}

void sub_100CA94B8(uint64_t a1)
{
  uint64_t v4 = 0;
  int8x16_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  int8x16_t v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100CA9588;
  _OWORD v3[3] = &unk_1022F1308;
  v3[4] = &v4;
  [v2 enumerateObjectsUsingBlock:v3];
  [*(id *)(a1 + 40) setICloudManagedAppleID:*((unsigned __int8 *)v5 + 24)];

  _Block_object_dispose(&v4, 8);
}

void sub_100CA9570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100CA9588(uint64_t a1, void *a2)
{
  id result = [a2 aa_isAccountClass:AAAccountClassPrimary];
  if (result)
  {
    id result = [a2 aa_isManagedAppleID];
    if (result) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

void sub_100CA98B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100CA98CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = [[+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection") installedProfileWithIdentifier:a2] payloads];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _OWORD v8[2] = sub_100CA9970;
  void v8[3] = &unk_1022F1380;
  double v8[4] = *(void *)(a1 + 32);
  void v8[5] = a4;
  return [v6 enumerateObjectsUsingBlock:v8];
}

id sub_100CA9970(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [[[a2 type] isEqualToString:@"com.apple.education"];
  if (result)
  {
    *a4 = 1;
    **(unsigned char **)(a1 + 40) = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_100CAA880(id a1, CLCapabilityMonitorClientProtocol *a2, BOOL *a3)
{
}

void sub_100CAAA64(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CAAA94(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100CAAAC4()
{
  if (qword_10248AAD8 != -1) {
    dispatch_once(&qword_10248AAD8, &stru_1022F1448);
  }
  return qword_10248AAD0;
}

void *sub_100CAAB0C(void *result)
{
  *id result = off_1022F1478;
  return result;
}

void sub_100CAAB34(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_1000D3E78();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100CAABCC;
  v9[3] = &unk_1022C7AC0;
  double v9[4] = a1;
  void v9[5] = a2;
  char v10 = a3;
  void v9[6] = a4;
  sub_1009E8E94(v8, (uint64_t)v9);
}

uint64_t sub_100CAABCC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
}

void sub_100CAAC00(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100CAAC7C;
  _OWORD v3[3] = &unk_1022A3020;
  v3[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v3);
}

uint64_t sub_100CAAC7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))();
}

void sub_100CAACA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DE894((_DWORD *)a3, a1);
  if (*(unsigned char *)(a1 + 808))
  {
    buf[0] = *(unsigned char *)(a2 + 48);
    buf[1] = 1;
    sub_100CAB158(a1, buf, (uint64_t)v19);
    sub_1000D9048(a3 + 1760, (uint64_t)v19);
    if (*(unsigned char *)(a3 + 1808))
    {
      int v6 = *(_DWORD *)(a3 + 1784);
      if (v6)
      {
        *(_DWORD *)(*(void *)(a3 + 6424) + 200) += v6;
        *(unsigned char *)(a3 + 6077) = 1;
      }
      if (v23)
      {
        if (SHIBYTE(v22) < 0)
        {
          sub_1000DC48C(__p, (void *)v21, *((unint64_t *)&v21 + 1));
        }
        else
        {
          *(_OWORD *)long long __p = v21;
          uint64_t v18 = v22;
        }
        __int16 v9 = (uint64_t **)(*(void *)(a3 + 6424) + 104);
        *(void *)uint64_t buf = __p;
        char v10 = sub_100510C30(v9, (const void **)__p, (uint64_t)&unk_101D0B290, (long long **)buf);
        ++*((_DWORD *)v10 + 14);
        __int16 v11 = (uint64_t **)(*(void *)(a3 + 6424) + 104);
        *(void *)uint64_t buf = __p;
        int v12 = *((_DWORD *)sub_100510C30(v11, (const void **)__p, (uint64_t)&unk_101D0B290, (long long **)buf) + 14);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022F14A8);
        }
        uint64_t v13 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          id v14 = __p;
          if (v18 < 0) {
            id v14 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t buf = 136315394;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v29 = 1024;
          int v30 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#alsquery alsRequestReasonTally, reason: %s tally: %d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022F14A8);
          }
          __int16 v15 = __p;
          if (v18 < 0) {
            __int16 v15 = (void **)__p[0];
          }
          int v24 = 136315394;
          __int16 v25 = v15;
          __int16 v26 = 1024;
          int v27 = v12;
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::AlsQuery::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
        }
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (v23 && SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
    if (v20) {
      sub_1000D7D80((uint64_t)v19);
    }
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    char v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#alsquery, skip, should not compute location from scan event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022F14A8);
      }
      v19[0] = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::AlsQuery::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v8);
      if (v8 != buf) {
        free(v8);
      }
    }
  }
}

void sub_100CAB108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100CAC158((uint64_t)&a18);
  sub_10050BAA0(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_100CAB158@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v6 = *(int *)(a1 + 6400) <= 0 && *(_DWORD *)(a1 + 6404) <= 0;
  if (v6 && !sub_1006D3100((_DWORD *)(a1 + 5968)))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    __int16 v17 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#alsquery, skip, no location or spectator clients, and location request is not atypical", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_110;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    LOWORD(v64) = 0;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v18);
    goto LABEL_156;
  }
  if (a2[1]) {
    BOOL v7 = sub_100D550B4(*a2);
  }
  else {
    BOOL v7 = 0;
  }
  double v8 = vabdd_f64(*(double *)(a1 + 6384), *(double *)(a1 + 6128));
  if (v8 >= 4.0 || sub_1006D3100((_DWORD *)(a1 + 5968))) {
    goto LABEL_18;
  }
  if (v7)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    __int16 v9 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = (int)v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "proceed #alsquery eval due to 5GHz scan, since_last_query_secs, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022F14A8);
      }
      int v64 = 67109120;
      *(_DWORD *)double v65 = (int)v8;
      id v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v47);
      if (v47 != buf) {
        free(v47);
      }
    }
LABEL_18:
    char v10 = (unsigned char *)(a1 + 6172);
    if (a2[1]) {
      BOOL v11 = *a2 == *(unsigned char *)(a1 + 6448);
    }
    else {
      BOOL v11 = 0;
    }
    char v12 = v11;
    long long v58 = 0u;
    long long v59 = 0u;
    int v60 = 1065353216;
    int v13 = *(_DWORD *)(a1 + 6156);
    if (v13)
    {
      for (uint64_t i = *(void **)(*(void *)(a1 + 3160) + 16); i; uint64_t i = (void *)*i)
      {
        *(void *)uint64_t buf = i[2];
        sub_1000E34E4((uint64_t)&v58, buf, buf);
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022F14A8);
      }
      __int16 v15 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(void *)&uint8_t buf[4] = *((void *)&v59 + 1);
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#alsquery number of aps in scan history, %lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022F14A8);
        }
        int v64 = 134217984;
        *(void *)double v65 = *((void *)&v59 + 1);
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v16);
        if (v16 != buf) {
          free(v16);
        }
      }
    }
    else if (&v58 != (long long *)(a1 + 1224))
    {
      int v60 = *(_DWORD *)(a1 + 1256);
      sub_1000D86B4(&v58, *(void **)(a1 + 1240), 0);
    }
    BOOL v48 = v7;
    if (sub_100F91E80(a1 + 3208) && (sub_100F91E88(a1 + 3208) & 1) == 0)
    {
      *(void *)uint64_t buf = sub_1000D8908(a1 + 3208);
      sub_1000E34E4((uint64_t)&v58, buf, buf);
      uint64_t v19 = a3;
      char v20 = 1;
    }
    else
    {
      uint64_t v19 = a3;
      char v20 = 0;
    }
    unint64_t v49 = *(void *)(a1 + 1208);
    unint64_t v21 = *(void *)(a1 + 1248);
    if (*(unsigned char *)(a1 + 3152))
    {
      uint64_t v22 = "alwayson";
LABEL_52:
      BOOL v23 = 1;
      goto LABEL_53;
    }
    if (v21)
    {
      uint64_t v22 = "emergency";
      if (sub_1006D30F0((_DWORD *)(a1 + 5968))) {
        goto LABEL_52;
      }
      if (!*v10) {
        uint64_t v22 = "nonstandard";
      }
      BOOL v23 = 1;
      if (!v13 && !*v10)
      {
        if (*(unsigned char *)(a1 + 6420) != 0 && *(_DWORD *)(a1 + 1564) != 0) {
          uint64_t v22 = "watch";
        }
        else {
          uint64_t v22 = "unknownassociated";
        }
        if (v20 & 1 | (*(unsigned char *)(a1 + 6420) != 0 && *(_DWORD *)(a1 + 1564) != 0))
        {
          BOOL v23 = *(unsigned char *)(a1 + 6420) == 0 || *(_DWORD *)(a1 + 1564) == 0;
        }
        else if (*(unsigned char *)(a1 + 1624))
        {
          BOOL v23 = 0;
          uint64_t v22 = "sufficient";
        }
        else if (sub_1006D30E0((_DWORD *)(a1 + 5968)) || sub_1006D3124((_DWORD *)(a1 + 5968)))
        {
          BOOL v23 = 0;
          uint64_t v22 = "cpi";
        }
        else if (*(double *)(a1 + 1428) < 0.0 || *(_DWORD *)(a1 + 1564) < 2u || v49 < v21)
        {
          if (v49) {
            char v39 = v12;
          }
          else {
            char v39 = 0;
          }
          if (v39)
          {
            BOOL v23 = 0;
            uint64_t v22 = "defer5Ghz";
          }
          else
          {
            BOOL v23 = v49 < 4;
            if (v49 >= 4) {
              uint64_t v22 = "default";
            }
            else {
              uint64_t v22 = "unknownratio";
            }
          }
        }
        else
        {
          BOOL v23 = 0;
          uint64_t v22 = "knownratio";
        }
      }
    }
    else
    {
      BOOL v23 = 0;
      uint64_t v22 = "allknown";
    }
LABEL_53:
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    int v24 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v22;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#alsquery, do_query, %d, reason, %s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022F14A8);
      }
      int v64 = 67109378;
      *(_DWORD *)double v65 = v23;
      *(_WORD *)&v65[4] = 2080;
      *(void *)&v65[6] = v22;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v40);
      if (v40 != buf) {
        free(v40);
      }
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    __int16 v25 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = *(_DWORD *)(a1 + 6156);
      uint64_t v27 = *(void *)(a1 + 1288);
      *(_DWORD *)uint64_t buf = 67241730;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v22;
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&unsigned char buf[20] = *((void *)&v59 + 1);
      *(_WORD *)&unsigned char buf[28] = 1026;
      *(_DWORD *)&buf[30] = v26;
      *(_WORD *)&buf[34] = 2050;
      unint64_t v77 = v49;
      *(_WORD *)uint64_t v78 = 2050;
      *(void *)&v78[2] = v21;
      __int16 v79 = 2050;
      *(void *)&long long v80 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsrequest, %{public}d, %{public}s, aps, %{public}lu, type, %{public}d, vni, %{public}ld, %{public}ld, %{public}ld", buf, 0x40u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022F14A8);
      }
      int v41 = *(_DWORD *)(a1 + 6156);
      uint64_t v42 = *(void *)(a1 + 1288);
      int v64 = 67241730;
      *(_DWORD *)double v65 = v23;
      *(_WORD *)&v65[4] = 2082;
      *(void *)&v65[6] = v22;
      __int16 v66 = 2050;
      uint64_t v67 = *((void *)&v59 + 1);
      __int16 v68 = 1026;
      int v69 = v41;
      __int16 v70 = 2050;
      unint64_t v71 = v49;
      __int16 v72 = 2050;
      unint64_t v73 = v21;
      __int16 v74 = 2050;
      uint64_t v75 = v42;
      __int16 v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v43);
      if (v43 != buf) {
        free(v43);
      }
    }
    if (v23)
    {
      LOBYTE(v64) = 0;
      BYTE2(v73) = 0;
      int v28 = *(_DWORD *)(a1 + 6156);
      if (v48)
      {
        sub_100A700F8(&v57, 2);
      }
      else
      {
        sub_100A700F8(buf, 1);
        int v57 = *(_DWORD *)buf;
      }
      sub_1000E346C((uint64_t)&v52, (uint64_t)&v58);
      uint64_t v30 = v52;
      unint64_t v31 = v53;
      uint64_t v52 = 0;
      unint64_t v53 = 0;
      *(void *)uint64_t buf = v30;
      *(void *)&uint8_t buf[8] = v31;
      *(void *)&uint8_t buf[16] = v54;
      *(void *)&unsigned char buf[24] = v55;
      *(_DWORD *)&uint8_t buf[32] = v56;
      if (v55)
      {
        unint64_t v32 = *(void *)(v54 + 8);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v32 >= v31) {
            v32 %= v31;
          }
        }
        else
        {
          v32 &= v31 - 1;
        }
        *(void *)(v30 + 8 * v32) = &buf[16];
        uint64_t v54 = 0;
        uint64_t v55 = 0;
      }
      BYTE4(v77) = v28 == 0;
      BYTE5(v77) = v28 != 1;
      *(_DWORD *)uint64_t v78 = v57;
      sub_100CAC1A4((uint64_t)&v64, (uint64_t *)buf);
      sub_1000D7D80((uint64_t)buf);
      sub_1000D7D80((uint64_t)&v52);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022F14A8);
      }
      uint64_t v33 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = *((void *)&v59 + 1);
        sub_100A70100(&v57, __p);
        uint64_t v35 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)uint64_t buf = 134218754;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28 == 0;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v28 != 1;
        *(_WORD *)&unsigned char buf[24] = 2082;
        *(void *)&buf[26] = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#alsquery, create_request, %lu, use_cache, %d, query_nearbys, %d, config, %{public}s", buf, 0x22u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022F14A8);
        }
        BOOL v44 = (void *)*((void *)&v59 + 1);
        sub_100A70100(&v57, v50);
        if (v51 >= 0) {
          uint64_t v45 = v50;
        }
        else {
          uint64_t v45 = (void **)v50[0];
        }
        LODWORD(__p[0]) = 134218754;
        *(void **)((char *)__p + 4) = v44;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v28 == 0;
        WORD1(__p[2]) = 1024;
        HIDWORD(__p[2]) = v28 != 1;
        __int16 v62 = 2082;
        double v63 = v45;
        int v46 = (char *)_os_log_send_and_compose_impl();
        if (v51 < 0) {
          operator delete(v50[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v46);
        if (v46 != buf) {
          free(v46);
        }
      }
      sub_100134750(__p, v22);
      sub_1000E3990((uint64_t)buf, (uint64_t)&v64);
      long long v80 = *(_OWORD *)__p;
      int v81 = __p[2];
      memset(__p, 0, sizeof(__p));
      sub_100CAC768(v19, (uint64_t)buf);
      if (SHIBYTE(v81) < 0) {
        operator delete((void *)v80);
      }
      if (v78[4]) {
        sub_1000D7D80((uint64_t)buf);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (!BYTE2(v73)) {
        goto LABEL_104;
      }
      __int16 v29 = &v64;
    }
    else
    {
      buf[0] = 0;
      v78[4] = 0;
      sub_100CAC71C(v19, (uint64_t)buf);
      if (!v78[4])
      {
LABEL_104:
        uint64_t v36 = &v58;
        return sub_1000D7D80((uint64_t)v36);
      }
      __int16 v29 = (int *)buf;
    }
    sub_1000D7D80((uint64_t)v29);
    goto LABEL_104;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022F14A8);
  }
  int v37 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "blocking #alsquery, too soon, since_last_query_secs, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    int v64 = 67109120;
    *(_DWORD *)double v65 = (int)v8;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v18);
LABEL_156:
    if (v18 != buf) {
      free(v18);
    }
  }
LABEL_110:
  buf[0] = 0;
  v78[4] = 0;
  uint64_t result = sub_100CAC71C(a3, (uint64_t)buf);
  if (!v78[4]) {
    return result;
  }
  uint64_t v36 = (long long *)buf;
  return sub_1000D7D80((uint64_t)v36);
}

void sub_100CAC0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  if (a42) {
    sub_1000D7D80((uint64_t)&a36);
  }
  sub_1000D7D80((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100CAC158(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48)) {
    sub_1000D7D80(a1);
  }
  return a1;
}

uint64_t sub_100CAC1A4(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    sub_1000E2E9C(a1, a2);
    uint64_t v4 = a2[5];
  }
  else
  {
    sub_1000E2908(a1, a2);
    uint64_t v4 = a2[5];
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(void *)(a1 + 40) = v4;
  return a1;
}

uint64_t sub_100CAC204(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48)) {
    sub_1000D7D80(a1);
  }
  return a1;
}

void sub_100CAC248(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1000DE894(a2, a1);
  sub_100CAC2C4(a1, 0, v4);
  sub_100CAC7D0((uint64_t)(a2 + 454), (uint64_t)v4);
  if (v4[48]) {
    sub_1000D7D80((uint64_t)v4);
  }
}

void sub_100CAC2B0(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100CAC2C4(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[48] = 0;
  if (a2) {
    uint64_t v4 = "reproc";
  }
  else {
    uint64_t v4 = "live";
  }
  if (*(void *)(a1 + 6328) && *(_DWORD *)(a1 + 6348) != 2)
  {
    BOOL v7 = !a2 && sub_100F91E80(a1 + 3208) && *(unsigned char *)(a1 + 1096) != 0;
    int v9 = a2 == 1 && *(_DWORD *)(a1 + 6348) == 1 || v7;
    if (v9 == 1)
    {
      sub_1000E346C((uint64_t)&v18, a1 + 6304);
      sub_100A700F8(v23, 1);
      int v10 = v23[0];
      uint64_t v11 = v18;
      unint64_t v12 = v19;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      *(void *)uint64_t buf = v11;
      *(void *)__int16 v29 = v12;
      *(void *)&v29[8] = v20;
      *(void *)&v29[16] = v21;
      int v30 = v22;
      if (v21)
      {
        unint64_t v13 = *(void *)(v20 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12) {
            v13 %= v12;
          }
        }
        else
        {
          v13 &= v12 - 1;
        }
        *(void *)(v11 + 8 * v13) = &v29[8];
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      int v31 = v10;
      sub_100CAC68C((uint64_t)a3, (uint64_t)buf);
      sub_1000D7D80((uint64_t)buf);
      sub_1000D7D80((uint64_t)&v18);
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F14A8);
    }
    id v14 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 6328);
      *(_DWORD *)uint64_t buf = 67240706;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)__int16 v29 = 2082;
      *(void *)&v29[2] = v4;
      *(_WORD *)&unsigned char v29[10] = 2050;
      *(void *)&v29[12] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WsbAls, query, %{public}d, %{public}s, unknown, %{public}ld", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022F14A8);
      }
      uint64_t v16 = *(void *)(a1 + 6328);
      v23[0] = 67240706;
      v23[1] = v9;
      __int16 v24 = 2082;
      __int16 v25 = v4;
      __int16 v26 = 2050;
      uint64_t v27 = v16;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::optional<Decisions::AlsRequestForWsb> CL::Wifi1::Policies::AlsQuery::HandleEvent::shouldQueryForWsb(const Input &, Types::WsbPassType)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

void sub_100CAC5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (*(unsigned char *)(v21 + 48)) {
    sub_1000D7D80(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CAC610(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1000DE894(a2, a1);
  sub_100CAC2C4(a1, 1, v4);
  sub_100CAC7D0((uint64_t)(a2 + 454), (uint64_t)v4);
  if (v4[48]) {
    sub_1000D7D80((uint64_t)v4);
  }
}

void sub_100CAC678(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CAC68C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    sub_1000E2E9C(a1, (uint64_t *)a2);
    int v4 = *(_DWORD *)(a2 + 40);
  }
  else
  {
    sub_1000E2908(a1, (uint64_t *)a2);
    int v4 = *(_DWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(_DWORD *)(a1 + 40) = v4;
  return a1;
}

void sub_100CAC6EC(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100CAC71C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t result = sub_1000E2908(result, (uint64_t *)a2);
    *(void *)(result + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(result + 48) = 1;
  }
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 80) = 0;
  return result;
}

__n128 sub_100CAC768(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    a1 = sub_1000E2908(a1, (uint64_t *)a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
  __n128 result = *(__n128 *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(__n128 *)(a1 + 56) = result;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

void sub_100CAC7D0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      sub_1000E2E9C(a1, (uint64_t *)a2);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    sub_1000D7D80(a1);
    *(unsigned char *)(a1 + 48) = 0;
  }
  else
  {
    sub_1000E2908(a1, (uint64_t *)a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
}

void sub_100CAC8EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100CAC9A4(_Unwind_Exception *a1)
{
}

void sub_100CAC9BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100CACA64(_Unwind_Exception *a1)
{
}

uint64_t sub_100CACE44(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_45;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_47:
        uint64_t v32 = 8;
        goto LABEL_56;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (2)
        {
          uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_51:
        uint64_t v32 = 12;
        goto LABEL_56;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        break;
      case 4u:
        *(unsigned char *)(a1 + 24) |= 4u;
        unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v31 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v31 = 0;
        }
        *(_DWORD *)(a1 + 20) = v31;
        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
      v15 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0) {
        goto LABEL_53;
      }
      v25 += 7;
      BOOL v10 = v26++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_55;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_55:
    uint64_t v32 = 16;
LABEL_56:
    *(_DWORD *)(a1 + v32) = v15;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100CAD904(uint64_t a1)
{
  v2.receiver = *(id *)(a1 + 32);
  v2.super_class = (Class)&OBJC_METACLASS___CLMapsXPCServiceManager;
  qword_102480A80 = (uint64_t)[[objc_msgSendSuper2(&v2, "allocWithZone:", 0) init]];
  return [(id)qword_102480A80 createConnection];
}

void sub_100CAE0A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100CAE0BC(uint64_t a1, void *a2)
{
  if (qword_102419440 != -1) {
    dispatch_once(&qword_102419440, &stru_1022F1550);
  }
  char v4 = qword_102419448;
  if (os_log_type_enabled((os_log_t)qword_102419448, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134349571;
    id v8 = [a2 code];
    __int16 v9 = 2114;
    id v10 = [a2 domain];
    __int16 v11 = 2113;
    id v12 = [a2 localizedDescription];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService synchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419440 != -1) {
      dispatch_once(&qword_102419440, &stru_1022F1550);
    }
    [a2 code];
    [a2 domain];
    [a2 localizedDescription];
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100CAE2FC(uint64_t a1, void *a2)
{
  if (qword_102419440 != -1) {
    dispatch_once(&qword_102419440, &stru_1022F1550);
  }
  char v4 = qword_102419448;
  if (os_log_type_enabled((os_log_t)qword_102419448, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134349571;
    id v8 = [a2 code];
    __int16 v9 = 2114;
    id v10 = [a2 domain];
    __int16 v11 = 2113;
    id v12 = [a2 localizedDescription];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService asynchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419440 != -1) {
      dispatch_once(&qword_102419440, &stru_1022F1550);
    }
    [a2 code];
    [a2 domain];
    [a2 localizedDescription];
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100CAE53C(uint64_t a1, void *a2)
{
  double v4 = (sub_10016C458() - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v4 > 200.0)
  {
    if (qword_102419440 != -1) {
      dispatch_once(&qword_102419440, &stru_1022F1550);
    }
    unsigned int v5 = qword_102419448;
    if (os_log_type_enabled((os_log_t)qword_102419448, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        unsigned int v6 = [a2 count];
      }
      else {
        unsigned int v6 = -1;
      }
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 64);
      int v10 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)uint64_t buf = 67241729;
      unsigned int v14 = v6;
      __int16 v15 = 1026;
      BOOL v16 = a2 == 0;
      __int16 v17 = 2050;
      double v18 = v4;
      __int16 v19 = 2049;
      uint64_t v20 = v7;
      __int16 v21 = 2049;
      uint64_t v22 = v8;
      __int16 v23 = 2050;
      uint64_t v24 = v9;
      __int16 v25 = 1026;
      int v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned data,roadCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419440 != -1) {
        dispatch_once(&qword_102419440, &stru_1022F1550);
      }
      if (a2) {
        [a2 count];
      }
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100CAE804(uint64_t a1, void *a2)
{
  double v4 = (sub_10016C458() - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v4 > 200.0)
  {
    if (qword_102419440 != -1) {
      dispatch_once(&qword_102419440, &stru_1022F1550);
    }
    unsigned int v5 = qword_102419448;
    if (os_log_type_enabled((os_log_t)qword_102419448, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        unsigned int v6 = [a2 count];
      }
      else {
        unsigned int v6 = -1;
      }
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 64);
      int v10 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)uint64_t buf = 67241729;
      unsigned int v14 = v6;
      __int16 v15 = 1026;
      BOOL v16 = a2 == 0;
      __int16 v17 = 2050;
      double v18 = v4;
      __int16 v19 = 2049;
      uint64_t v20 = v7;
      __int16 v21 = 2049;
      uint64_t v22 = v8;
      __int16 v23 = 2050;
      uint64_t v24 = v9;
      __int16 v25 = 1026;
      int v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Basic style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419440 != -1) {
        dispatch_once(&qword_102419440, &stru_1022F1550);
      }
      if (a2) {
        [a2 count];
      }
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100CAEACC(uint64_t a1, void *a2)
{
  double v4 = (sub_10016C458() - *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v4 > 200.0)
  {
    if (qword_102419440 != -1) {
      dispatch_once(&qword_102419440, &stru_1022F1550);
    }
    unsigned int v5 = qword_102419448;
    if (os_log_type_enabled((os_log_t)qword_102419448, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        unsigned int v6 = [a2 count];
      }
      else {
        unsigned int v6 = -1;
      }
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 64);
      int v10 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)uint64_t buf = 67241729;
      unsigned int v14 = v6;
      __int16 v15 = 1026;
      BOOL v16 = a2 == 0;
      __int16 v17 = 2050;
      double v18 = v4;
      __int16 v19 = 2049;
      uint64_t v20 = v7;
      __int16 v21 = 2049;
      uint64_t v22 = v8;
      __int16 v23 = 2050;
      uint64_t v24 = v9;
      __int16 v25 = 1026;
      int v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Extended style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419440 != -1) {
        dispatch_once(&qword_102419440, &stru_1022F1550);
      }
      if (a2) {
        [a2 count];
      }
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100CAEF74(id a1, NSError *a2)
{
  if (qword_102419440 != -1) {
    dispatch_once(&qword_102419440, &stru_1022F1550);
  }
  uint64_t v3 = qword_102419448;
  if (os_log_type_enabled((os_log_t)qword_102419448, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134349571;
    NSInteger v6 = [(NSError *)a2 code];
    __int16 v7 = 2114;
    uint64_t v8 = [(NSError *)a2 domain];
    __int16 v9 = 2113;
    int v10 = [(NSError *)a2 localizedDescription];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419440 != -1) {
      dispatch_once(&qword_102419440, &stru_1022F1550);
    }
    [(NSError *)a2 code];
    [(NSError *)a2 domain];
    [(NSError *)a2 localizedDescription];
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager clearMemoryAndExitHelperProcessCleanly]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

NSTimer *sub_100CAF3E8(uint64_t a1)
{
  uint64_t result = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"onTimerFire:" selector:0 userInfo:0 repeats:300.0];
  *(void *)(*(void *)(a1 + 32) + 8) = result;
  return result;
}

void sub_100CAF8E8(id a1, NSError *a2)
{
  if (qword_102419440 != -1) {
    dispatch_once(&qword_102419440, &stru_1022F1550);
  }
  uint64_t v3 = qword_102419448;
  if (os_log_type_enabled((os_log_t)qword_102419448, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134349571;
    NSInteger v6 = [(NSError *)a2 code];
    __int16 v7 = 2114;
    uint64_t v8 = [(NSError *)a2 domain];
    __int16 v9 = 2113;
    int v10 = [(NSError *)a2 localizedDescription];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419440 != -1) {
      dispatch_once(&qword_102419440, &stru_1022F1550);
    }
    [(NSError *)a2 code];
    [(NSError *)a2 domain];
    [(NSError *)a2 localizedDescription];
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager releaseMapHelperServiceOSTransaction]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_100CAFB20(id a1)
{
  qword_102419448 = (uint64_t)os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
}

double sub_100CAFB50(double a1, double a2)
{
  return round(1.0 / a2 * a1) / (1.0 / a2);
}

void sub_100CAFBAC(id a1)
{
  sub_100103240();
  BOOL v1 = 1;
  int v2 = sub_1000B5AD4();
  if ((v2 - 139) > 0x2C || ((1 << (v2 + 117)) & 0x1FE7E0000015) == 0) {
    BOOL v1 = (v2 - 220) < 6;
  }
  byte_102480A90 = v1;
}

id sub_100CB1280(uint64_t a1)
{
  double v2 = sub_10016C458();
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 112))
  {
    double v4 = *(double *)(v3 + 88);
    if (v4 <= *(double *)(v3 + 96)) {
      double v4 = *(double *)(v3 + 96);
    }
    *(double *)(v3 + 104) = *(double *)(v3 + 104) + v2 - v4;
    *(unsigned char *)(*(void *)(a1 + 32) + 112) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  [objc_msgSend(*(id *)(v3 + 40), "delegate") markScanEndTimeFromBoot:5 withReason:*(unsigned __int8 *)(*(void *)(a1 + 32) + 81) withPolicy:v2];
  unsigned int v5 = *(void **)(*(void *)(a1 + 32) + 40);

  return [v5 stopDeviceDiscovery];
}

void sub_100CB1B70(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F15B0);
    }
    uint64_t v3 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      NSInteger v6 = [(NSError *)a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F15B0);
      }
      [(NSError *)a2 localizedDescription];
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGatheringBluetoothClient _startAdvertising]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100CB2C30(uint64_t a1)
{
  [*(id *)(a1 + 32) _startTimedScanningWithReason:9];
  double v2 = *(NSObject **)(*(void *)(a1 + 32) + 64);
  dispatch_time_t v3 = dispatch_time(0x8000000000000000, 60000000000);

  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
}

void sub_100CB33D0(uint64_t a1)
{
  uint64_t state64 = 0;
  if (!notify_get_state(*(_DWORD *)(*(void *)(a1 + 32) + 76), &state64)) {
    *(unsigned char *)(*(void *)(a1 + 32) + 80) = state64 == 0;
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "settings"), "scanForceScreenOffOnly"))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v2 + 80))
    {
      if (*(unsigned char *)(v2 + 81))
      {
        if (qword_1024194B0 != -1) {
          dispatch_once(&qword_1024194B0, &stru_1022F15B0);
        }
        dispatch_time_t v3 = qword_1024194B8;
        if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "request to stop scanning for AOP path due to screen On transition ", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194B0 != -1) {
            dispatch_once(&qword_1024194B0, &stru_1022F15B0);
          }
          __int16 v17 = 0;
          char v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        [*(id *)(a1 + 32) _cancelExistingStopScanningBlock];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100CB3A5C;
        block[3] = &unk_10229FED8;
        void block[4] = *(void *)(a1 + 32);
        *(void *)(*(void *)(a1 + 32) + 56) = dispatch_block_create((dispatch_block_flags_t)0, block);
        dispatch_time_t v4 = dispatch_time(0, 1000000000);
        dispatch_after(v4, (dispatch_queue_t)[*(id *)(a1 + 32) queue], *(dispatch_block_t *)(*(void *)(a1 + 32) + 56));
      }
      else
      {
        if (qword_1024194B0 != -1) {
          dispatch_once(&qword_1024194B0, &stru_1022F15B0);
        }
        __int16 v7 = qword_1024194B8;
        if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "request to stop scanning for non-AOP path due to screen On transition ", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194B0 != -1) {
            dispatch_once(&qword_1024194B0, &stru_1022F15B0);
          }
          __int16 v17 = 0;
          __int16 v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        [*(id *)(a1 + 32) _stopScanningWithReason:2];
      }
    }
    else if (*(void *)(v2 + 56))
    {
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F15B0);
      }
      NSInteger v6 = qword_1024194B8;
      if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "scanning is ongoing due to non-nil stopScanningBlock", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194B0 != -1) {
          dispatch_once(&qword_1024194B0, &stru_1022F15B0);
        }
        __int16 v17 = 0;
        unsigned int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      [*(id *)(a1 + 32) _cancelExistingStopScanningBlock];
    }
    else if (*(unsigned char *)(v2 + 81))
    {
      [(id)v2 _startPermanentScanning];
    }
    else
    {
      [(id)v2 _startTimedScanningWithReason:1];
      uint64_t v8 = *(void **)(a1 + 32);
      if (v8[8])
      {
        id v9 = [objc_msgSend(v8, "settings") scanPeriodicInterval];
        int v10 = *(NSObject **)(*(void *)(a1 + 32) + 64);
        dispatch_time_t v11 = dispatch_time(0x8000000000000000, 1000000000 * (void)v9);
        dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      }
    }
  }
  else
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F15B0);
    }
    unsigned int v5 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "screen wake monitor installed unexpectedly", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F15B0);
      }
      __int16 v17 = 0;
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100CB3A5C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 56) = 0;
}

void sub_100CB4224(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  if (!a1)
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F15B0);
    }
    int v10 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "AP power changed callback with refcon", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F15B0);
    }
    dispatch_time_t v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n");
LABEL_50:
    if (v11 != buf) {
      free(v11);
    }
    return;
  }
  HIDWORD(v6) = a3;
  LODWORD(v6) = a3 + 536870288;
  int v5 = v6 >> 4;
  if (v5 > 8)
  {
    if (v5 == 9)
    {
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F15B0);
      }
      BOOL v16 = qword_1024194B8;
      if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(unsigned __int8 *)(a1 + 80);
        *(_DWORD *)uint64_t buf = 67109120;
        int v21 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "AP is ON, screen is %d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 == -1) {
        goto LABEL_49;
      }
    }
    else
    {
      if (v5 != 11) {
        return;
      }
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F15B0);
      }
      id v12 = qword_1024194B8;
      if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int8 *)(a1 + 80);
        *(_DWORD *)uint64_t buf = 67109120;
        int v21 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "AP will be ON, screen is %d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 == -1) {
        goto LABEL_49;
      }
    }
    dispatch_once(&qword_1024194B0, &stru_1022F15B0);
LABEL_49:
    dispatch_time_t v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n");
    goto LABEL_50;
  }
  if (!v5)
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F15B0);
    }
    unsigned int v14 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)uint64_t buf = 67109120;
      int v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "AP wants to go OFF, screen is %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F15B0);
      }
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    goto LABEL_33;
  }
  if (v5 == 1)
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F15B0);
    }
    uint64_t v8 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)uint64_t buf = 67109120;
      int v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AP will go OFF, screen is %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F15B0);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    [(id)a1 _stopScanningWithReason:3];
LABEL_33:
    IOAllowPowerChange(*(_DWORD *)(a1 + 72), a4);
  }
}

void sub_100CB4E64(id a1)
{
  qword_1024194B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

void sub_100CB4E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1008A9B9C((uint64_t)v75, a3);
  sub_100EF567C((void *)a1, a2, (uint64_t)v75);
  sub_100681F74(v75);
  *(void *)a1 = off_1022F15E0;
  sub_1013F040C(a1 + 48);
  sub_100C6AA54(a1 + 456);
  *(_DWORD *)(a1 + 2248) = 0xFFFF;
  *(void *)(a1 + 2260) = 0;
  *(void *)(a1 + 2252) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v63 = _Q0;
  *(_OWORD *)(a1 + 2268) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 2284) = _Q0;
  *(_OWORD *)(a1 + 2300) = _Q0;
  *(_OWORD *)(a1 + 2316) = _Q0;
  *(_DWORD *)(a1 + 2332) = 0;
  *(void *)(a1 + 2336) = 0xBFF0000000000000;
  *(void *)(a1 + 2352) = 0;
  *(void *)(a1 + 2344) = 0;
  *(_DWORD *)(a1 + 2360) = 0;
  *(void *)(a1 + 2364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2372) = 0x7FFFFFFF;
  *(void *)(a1 + 2376) = 0;
  *(void *)(a1 + 2392) = 0;
  *(void *)(a1 + 2384) = 0;
  *(unsigned char *)(a1 + 2400) = 0;
  int v64 = (void *)(a1 + 2408);
  *(_DWORD *)(a1 + 2416) = 0;
  *(void *)(a1 + 2408) = 0;
  *(void *)(a1 + 2424) = 0x4082C00000000000;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(void *)(a1 + 2464) = 0;
  *(void *)(a1 + 2472) = nullsub_1099;
  *(_WORD *)(a1 + 2480) = 0;
  *(void *)(a1 + 2488) = 0;
  sub_100134750(&__p, "CLTrackRunMapQueryTransaction");
  sub_100DEE064(a1 + 2496, &__p);
  if (v73 < 0) {
    operator delete((void *)__p);
  }
  *(_WORD *)(a1 + 2528) = 256;
  sub_101246BB0((_OWORD *)(a1 + 2536));
  *(_DWORD *)(a1 + 2584) = 0xFFFF;
  *(_OWORD *)(a1 + 2588) = 0u;
  *(_OWORD *)(a1 + 2604) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 2620) = v63;
  *(_OWORD *)(a1 + 2636) = v63;
  *(_OWORD *)(a1 + 2652) = v63;
  *(_DWORD *)(a1 + 2668) = 0;
  *(void *)(a1 + 2672) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2696) = 0;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(void *)(a1 + 2700) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2708) = 0x7FFFFFFF;
  *(void *)(a1 + 2712) = 0;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(unsigned char *)(a1 + 2736) = 0;
  *(void *)(a1 + 2744) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2788) = 0;
  *(unsigned char *)(a1 + 2792) = 0;
  *(void *)(a1 + 2800) = 0;
  *(_WORD *)(a1 + 2784) = 0;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(unsigned char *)(a1 + 2808) = 1;
  *(void *)(a1 + 2816) = 0x5FFFFFFFFLL;
  *(_DWORD *)(a1 + 2824) = 3;
  *(_DWORD *)(a1 + 2828) = 16777217;
  *(void *)(a1 + 2832) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2840) = 0;
  *(void *)(a1 + 2848) = 0;
  *(void *)(a1 + 2856) = 0x600000006;
  *(void *)(a1 + 2880) = 0;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(void *)(a1 + 2888) = 0xBFF0000000000000;
  *(void *)(a1 + 2896) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 2904) = 0;
  *(_OWORD *)(a1 + 2912) = 0u;
  sub_1008A9B9C(a1 + 2928, a3);
  [*(id *)(a1 + 8) silo];
  sub_100103240();
  if (sub_10073DDE8())
  {
    sub_100134750(&v74, "geomapfeatureaccess");
    sub_1000C7F88(&__p);
    sub_1004D1284(__p, "MapMatchingGeometryType", &v74);
    if (*((void *)&__p + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    int v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      dispatch_time_t v11 = &v74;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        dispatch_time_t v11 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p) = 136446210;
      *(void *)((char *)&__p + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,MapMatchingGeometryType,%{public}s", (uint8_t *)&__p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      double v61 = &v74;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v61 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      int v70 = 136446210;
      unint64_t v71 = v61;
      __int16 v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v62);
      if (v62 != (char *)&__p) {
        free(v62);
      }
    }
    operator new();
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  id v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    BOOL v13 = *v64 != 0;
    LODWORD(__p) = 67240192;
    DWORD1(__p) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMM, PlatformSupportsMapMatching, %{public}d", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    BOOL v49 = *v64 != 0;
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v49;
    int v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v50);
    if (v50 != (char *)&__p) {
      free(v50);
    }
  }
  LOBYTE(v70) = 0;
  sub_1000C7F88(&__p);
  int v14 = sub_1000D2988(__p, "EnableNMEAMapMatching", (BOOL *)&v70);
  if (*((void *)&__p + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
  }
  if (v14) {
    *(unsigned char *)(a1 + 2528) = v70;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  int v15 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *(unsigned __int8 *)(a1 + 2528);
    LODWORD(__p) = 67240192;
    DWORD1(__p) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMM, EnableNMEAMapMatching, %{public}d", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    int v51 = *(unsigned __int8 *)(a1 + 2528);
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v51;
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v52);
    if (v52 != (char *)&__p) {
      free(v52);
    }
  }
  sub_1000C7F88(&__p);
  int v17 = sub_1000D2988(__p, "EnableVerboseMapMatching", (BOOL *)&v70);
  if (*((void *)&__p + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
  }
  if (v17) {
    *(unsigned char *)(a1 + 2529) = v70;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  double v18 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *(unsigned __int8 *)(a1 + 2529);
    LODWORD(__p) = 67240192;
    DWORD1(__p) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM, EnableVerboseMapMatching, %{public}d", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    int v53 = *(unsigned __int8 *)(a1 + 2529);
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v53;
    uint64_t v54 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v54);
    if (v54 != (char *)&__p) {
      free(v54);
    }
  }
  if (*v64) {
    (*(void (**)(void, void))(*(void *)*v64 + 80))(*v64, *(unsigned __int8 *)(a1 + 2529));
  }
  sub_1000C7F88(&__p);
  sub_1000D2988(__p, "IgnoreSignalEnvironment", (BOOL *)(a1 + 2785));
  if (*((void *)&__p + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
  }
  sub_1000C7F88(&__p);
  int v20 = sub_1000D2988(__p, "MapMatchingNetworkUsageThermalLevelHighThreshold", (BOOL *)&v70);
  if (*((void *)&__p + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
  }
  if (v20) {
    *(_DWORD *)(a1 + 2820) = v70;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  int v21 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(_DWORD *)(a1 + 2820);
    LODWORD(__p) = 67240192;
    DWORD1(__p) = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM, MapMatchingNetworkUsageThermalLevelHighThreshold, %{public}d", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    int v55 = *(_DWORD *)(a1 + 2820);
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v55;
    int v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v56);
    if (v56 != (char *)&__p) {
      free(v56);
    }
  }
  sub_1000C7F88(&__p);
  int v23 = sub_1000D2988(__p, "MapMatchingNetworkUsageThermalLevelLowThreshold", (BOOL *)&v70);
  if (*((void *)&__p + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
  }
  if (v23) {
    *(_DWORD *)(a1 + 2824) = v70;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  uint64_t v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v25 = *(_DWORD *)(a1 + 2824);
    LODWORD(__p) = 67240192;
    DWORD1(__p) = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM, MapMatchingNetworkUsageThermalLevelLowThreshold, %{public}d", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    int v57 = *(_DWORD *)(a1 + 2824);
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v57;
    long long v58 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v58);
    if (v58 != (char *)&__p) {
      free(v58);
    }
  }
  sub_1000C7F88(&__p);
  std::string::value_type v26 = *(unsigned char *)(a1 + 2808);
  v74.__r_.__value_.__s.__data_[0] = 0;
  int v27 = sub_1000D2988(__p, "CLBaroAltimeterEnabledForLocationUpdate", (BOOL *)&v74);
  std::string::value_type v28 = v74.__r_.__value_.__s.__data_[0];
  if (!v27) {
    std::string::value_type v28 = v26;
  }
  *(unsigned char *)(a1 + 2808) = v28;
  if (*((void *)&__p + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  char v29 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v30 = *(unsigned __int8 *)(a1 + 2808);
    LODWORD(__p) = 67240192;
    DWORD1(__p) = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "BaroAlt,fBaroAltimeterEnabled,%{public}d", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    int v59 = *(unsigned __int8 *)(a1 + 2808);
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v59;
    int v60 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v60);
    if (v60 != (char *)&__p) {
      free(v60);
    }
  }
  if (*(unsigned char *)(a1 + 2808)) {
    operator new();
  }
  if (*v64)
  {
    uint64_t v31 = *(void *)(a1 + 2952);
    if (v31)
    {
      uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 48))(v31);
      uint64_t v33 = v32;
      if (v32)
      {
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        char v34 = 0;
        char v35 = 0;
        id v36 = [v32 countByEnumeratingWithState:&v65 objects:v69 count:16];
        if (!v36) {
          goto LABEL_105;
        }
        uint64_t v37 = *(void *)v66;
        while (1)
        {
          for (uint64_t i = 0; i != v36; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v66 != v37) {
              objc_enumerationMutation(v33);
            }
            sub_100134750(&__p, (char *)[*(id *)(*((void *)&v65 + 1) + 8 * i) UTF8String]);
            if (v73 >= 0) {
              p_p = (const char *)&__p;
            }
            else {
              p_p = (const char *)__p;
            }
            CFStringRef v40 = CFStringCreateWithCString(kCFAllocatorDefault, p_p, 0x8000100u);
            if (&_SBSGetApplicationState)
            {
              int v41 = SBSGetApplicationState();
              if (v41 == 32 || v41 == 8)
              {
                if (v73 < 0)
                {
                  if (*((void *)&__p + 1) == 14)
                  {
                    __int16 v43 = (unint64_t *)__p;
LABEL_92:
                    unint64_t v44 = bswap64(*v43);
                    unint64_t v45 = 0x636F6D2E6170706CLL;
                    if (v44 == 0x636F6D2E6170706CLL
                      && (unint64_t v44 = bswap64(*(unint64_t *)((char *)v43 + 6)),
                          unint64_t v45 = 0x706C652E4D617073,
                          v44 == 0x706C652E4D617073))
                    {
                      int v46 = 0;
                    }
                    else if (v44 < v45)
                    {
                      int v46 = -1;
                    }
                    else
                    {
                      int v46 = 1;
                    }
                    if (!v46) {
                      char v35 = 1;
                    }
                  }
                }
                else if (v73 == 14)
                {
                  __int16 v43 = (unint64_t *)&__p;
                  goto LABEL_92;
                }
                char v34 = 1;
              }
            }
            CFRelease(v40);
            if (v73 < 0) {
              operator delete((void *)__p);
            }
          }
          id v36 = [v33 countByEnumeratingWithState:&v65 objects:v69 count:16];
          if (!v36)
          {
LABEL_105:
            uint64_t v47 = v34 & 1;
            int v48 = v35 & 1;
            goto LABEL_107;
          }
        }
      }
    }
    uint64_t v47 = 0;
    int v48 = 0;
LABEL_107:
    sub_100CB694C(a1, v47, v48);
  }
  operator new();
}

void sub_100CB62E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  sub_100681F74(a14);
  double v61 = *(void **)(a22 + 2864);
  if (v61)
  {
    *(void *)(a22 + 2872) = v61;
    operator delete(v61);
  }
  sub_1008A9C84(a19, 0);
  sub_1008A9C34(a17, 0);
  nullsub_41(a15, v62);
  sub_100DEE0E0(a16);
  uint64_t v63 = *(void *)(a22 + 2464);
  *(void *)(a22 + 2464) = 0;
  if (v63) {
    (*(void (**)(void))(a22 + 2472))();
  }
  sub_101A89C18(a21, a13);
  sub_1013F04FC(a12);
  *(void *)a22 = off_102302A90;
  sub_100681F74((void *)(a22 + 16));
  _Unwind_Resume(a1);
}

void sub_100CB6518(uint64_t a1)
{
}

void sub_100CB6520(uint64_t a1)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F1848);
  }
  uint64_t v2 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMM,onMapMatcherStopped,timer triggered", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    __int16 v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationFilterController::onMapMatcherStopped()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  dispatch_time_t v3 = *(void **)(a1 + 2408);
  if (v3)
  {
    sub_1008A8D6C(v3, 1);
    sub_1008A8D6C(*(void **)(a1 + 2408), 0);
    GEOResetGeoCodecsAllocator();
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    dispatch_time_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLMM,onMapMatcherStopped,road and building tiles cleared from process memory", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F1848);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationFilterController::onMapMatcherStopped()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  int v5 = *(void **)(a1 + 2912);
  if (v5) {
    [v5 setNextFireDelay:1.79769313e308];
  }
  if (*(void *)(a1 + 2920))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    unint64_t v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLMM,Releasing mapmatcher collection OS transaction", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F1848);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationFilterController::onMapMatcherStopped()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }

    *(void *)(a1 + 2920) = 0;
  }
}

void sub_100CB694C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a2;
  *(unsigned char *)(a1 + 2904) = a2 & a3;
  uint64_t v6 = *(void *)(a1 + 2408);
  if (v6) {
    sub_100170410(v6, a2);
  }
  sub_10019DAB8(a1 + 2816, v4);
  __int16 v7 = *(void **)(a1 + 2408);
  if (v7) {
    sub_1001706DC(v7, *(unsigned char *)(a1 + 2831) == 0);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  uint64_t v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(unsigned __int8 *)(a1 + 2831);
    *(_DWORD *)uint64_t buf = 67109632;
    int v12 = v4;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,Change in locationApp foreground status,isForeGround,%d,isAppleMaps,%d,networkusage,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationFilterController::setLocationApplicationIsForeground(BOOL, BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

uint64_t sub_100CB6B74()
{
  sub_1000C7F88(buf);
  uint64_t v0 = *(void *)buf;
  LODWORD(v1) = sub_100740F54();
  LOBYTE(v5[0]) = 0;
  if (sub_1000D2988(v0, "EnableTrackRun", (BOOL *)v5)) {
    uint64_t v1 = LOBYTE(v5[0]) != 0;
  }
  else {
    uint64_t v1 = v1;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F1828);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cltr,EnableTrackRun,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    v5[0] = 67240192;
    v5[1] = v1;
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLLocationFilterController::isTrackRunEnabled()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

void sub_100CB6D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

BOOL sub_100CB6D94(uint64_t a1, uint64_t a2)
{
  return sub_100009E8C(a1 + 48, a2);
}

uint64_t sub_100CB6D9C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2419)) {
    *(unsigned char *)(a1 + 2419) = 0;
  }
  if (!*(void *)(a1 + 2448)) {
    *(void *)(a1 + 2448) = objc_alloc_init(CLNanoRegistry);
  }
  sub_100103240();
  if (sub_10016CCBC()) {
    __int16 v2 = (unsigned __int16)[*(id *)(a1 + 2448) isAFire6OrOlderWatchPaired] ^ 1;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(a1 + 2418) = v2 | 0x100;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F1828);
  }
  dispatch_time_t v3 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 2419)) {
      int v4 = *(unsigned __int8 *)(a1 + 2418);
    }
    else {
      int v4 = 1;
    }
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#cltr,fIsPhoneThatDoesNotNeedTrackRunProcessing,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedPairingStateChanged(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
}

id sub_100CB6FEC(uint64_t a1)
{
  id v2 = +[RDEstimate currentEstimates];
  dispatch_time_t v3 = v2;
  if (!v2) {
    goto LABEL_45;
  }
  uint64_t v4 = *(void *)(a1 + 2456);
  id v5 = [v2 count];
  id v6 = v5;
  obuint64_t j = v3;
  if (v4)
  {
    id v7 = [*(id *)(a1 + 2456) count];
    int v8 = v3;
    id v9 = v7;
    BOOL v10 = v6 == v7;
    if ([v8 count])
    {
      dispatch_time_t v3 = obj;
      goto LABEL_7;
    }
    BOOL v31 = v6 == v9;
    dispatch_time_t v3 = obj;
    if (v31) {
      goto LABEL_54;
    }
LABEL_45:
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    int v30 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#cltr,country code list has changed. Clearing the supported region flag.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      LOWORD(v49) = 0;
      char v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    if (*(unsigned char *)(a1 + 2417)) {
      *(unsigned char *)(a1 + 2417) = 0;
    }
    goto LABEL_59;
  }
  if (!v5) {
    goto LABEL_45;
  }
  BOOL v10 = 0;
LABEL_7:
  uint64_t v36 = a1;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v39 = [v3 countByEnumeratingWithState:&v44 objects:v53 count:16];
  if (v39)
  {
    p_cache = CLAvengerScannerClientController.cache;
    uint64_t v38 = *(void *)v45;
    do
    {
      int v12 = 0;
      do
      {
        if (*(void *)v45 != v38) {
          objc_enumerationMutation(obj);
        }
        __int16 v13 = *(void **)(*((void *)&v44 + 1) + 8 * (void)v12);
        if (p_cache[502] != (void *)-1) {
          dispatch_once(&qword_102418FB0, &stru_1022F1828);
        }
        int v14 = qword_102418FB8;
        if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = [v13 countryCode];
          *(_DWORD *)uint64_t buf = 138477827;
          id v52 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#cltr,currentCountryCode,%{private}@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (p_cache[502] != (void *)-1) {
            dispatch_once(&qword_102418FB0, &stru_1022F1828);
          }
          id v25 = [v13 countryCode];
          int v49 = 138477827;
          id v50 = v25;
          std::string::value_type v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        if (v10)
        {
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          int v16 = *(void **)(v36 + 2456);
          id v17 = [v16 countByEnumeratingWithState:&v40 objects:v48 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v41;
            while (2)
            {
              int v20 = p_cache;
              for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v41 != v19) {
                  objc_enumerationMutation(v16);
                }
                int v22 = *(void **)(*((void *)&v40 + 1) + 8 * i);
                if (objc_msgSend(objc_msgSend(v13, "countryCode"), "isEqualToString:", objc_msgSend(v22, "countryCode")))
                {
                  p_cache = v20;
                  if (v20[502] != (void *)-1) {
                    dispatch_once(&qword_102418FB0, &stru_1022F1828);
                  }
                  int v23 = qword_102418FB8;
                  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
                  {
                    id v24 = [v22 countryCode];
                    *(_DWORD *)uint64_t buf = 138477827;
                    id v52 = v24;
                    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#cltr,matching country found,%{private}@", buf, 0xCu);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (v20[502] != (void *)-1) {
                      dispatch_once(&qword_102418FB0, &stru_1022F1828);
                    }
                    id v27 = [v22 countryCode];
                    int v49 = 138477827;
                    id v50 = v27;
                    std::string::value_type v28 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v28);
                    if (v28 != (char *)buf) {
                      free(v28);
                    }
                  }
                  BOOL v10 = 1;
                  goto LABEL_33;
                }
              }
              id v18 = [v16 countByEnumeratingWithState:&v40 objects:v48 count:16];
              BOOL v10 = 0;
              p_cache = v20;
              if (v18) {
                continue;
              }
              break;
            }
          }
        }
LABEL_33:
        int v12 = (char *)v12 + 1;
      }
      while (v12 != v39);
      dispatch_time_t v3 = obj;
      id v29 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
      id v39 = v29;
    }
    while (v29);
  }
  a1 = v36;
  if (!v10) {
    goto LABEL_45;
  }
LABEL_54:
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F1828);
  }
  uint64_t v32 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#cltr,country code list is the same. Not clearing the supported region flag.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    LOWORD(v49) = 0;
    char v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
LABEL_59:

  id result = v3;
  *(void *)(a1 + 2456) = result;
  return result;
}

uint64_t sub_100CB7768(uint64_t a1)
{
  *(void *)a1 = off_1022F15E0;
  uint64_t v2 = *(void *)(a1 + 2800);
  if (v2) {
    sub_1019134F8(v2);
  }
  dispatch_time_t v3 = *(void **)(a1 + 2912);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 2912) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 2464);
  *(void *)(a1 + 2464) = 0;
  if (v4) {
    (*(void (**)(void))(a1 + 2472))();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 408))(a1);
  sub_100762CEC(*(void **)(a1 + 2432));

  sub_100DEE0B0((id *)(a1 + 2496));
  sub_100681F74((void *)(a1 + 2928));
  id v5 = *(void **)(a1 + 2864);
  if (v5)
  {
    *(void *)(a1 + 2872) = v5;
    operator delete(v5);
  }
  sub_1008A9C84((uint64_t *)(a1 + 2848), 0);
  sub_1008A9C34((uint64_t *)(a1 + 2800), 0);
  nullsub_41(a1 + 2536, v6);
  sub_100DEE0E0(a1 + 2496);
  uint64_t v7 = *(void *)(a1 + 2464);
  *(void *)(a1 + 2464) = 0;
  if (v7) {
    (*(void (**)(void))(a1 + 2472))();
  }
  uint64_t v8 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_100C6AAE8(a1 + 456);
  sub_1013F04FC(a1 + 48);
  *(void *)a1 = off_102302A90;
  sub_100681F74((void *)(a1 + 16));
  return a1;
}

void sub_100CB7900(uint64_t a1)
{
  sub_100CB7768(a1);

  operator delete();
}

double sub_100CB7938(uint64_t a1)
{
  *(_DWORD *)(a1 + 2248) = 0xFFFF;
  *(void *)(a1 + 2260) = 0;
  *(void *)(a1 + 2252) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 2268) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 2284) = _Q1;
  *(_OWORD *)(a1 + 2300) = _Q1;
  *(_OWORD *)(a1 + 2316) = _Q1;
  *(_DWORD *)(a1 + 2332) = 0;
  *(void *)(a1 + 2336) = 0xBFF0000000000000;
  *(void *)(a1 + 2352) = 0;
  *(void *)(a1 + 2344) = 0;
  *(_DWORD *)(a1 + 2360) = 0;
  *(void *)(a1 + 2364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2372) = 0x7FFFFFFF;
  *(void *)(a1 + 2376) = 0;
  *(void *)(a1 + 2392) = 0;
  *(void *)(a1 + 2384) = 0;
  *(unsigned char *)(a1 + 2400) = 0;
  sub_100C6AB24(a1 + 456);
  sub_1013F0500(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 2800);
  if (v8)
  {
    return sub_1019134F8(v8);
  }
  return result;
}

double sub_100CB79EC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 2248) = 0xFFFF;
  *(void *)(a1 + 2260) = 0;
  uint64_t v4 = a1 + 2268;
  *(void *)(a1 + 2252) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 2268) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 2284) = _Q1;
  *(_OWORD *)(a1 + 2300) = _Q1;
  *(_OWORD *)(a1 + 2316) = _Q1;
  *(_DWORD *)(a1 + 2332) = 0;
  *(void *)(a1 + 2336) = 0xBFF0000000000000;
  *(void *)(a1 + 2352) = 0;
  *(void *)(a1 + 2344) = 0;
  *(_DWORD *)(a1 + 2360) = 0;
  *(void *)(a1 + 2364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2372) = 0x7FFFFFFF;
  *(void *)(a1 + 2376) = 0;
  *(void *)(a1 + 2392) = 0;
  *(void *)(a1 + 2384) = 0;
  *(unsigned char *)(a1 + 2400) = 0;
  if (sub_100C6B540(a1 + 456, a2, a1 + 2248))
  {
    *(void *)(v4 + 56) = *(void *)(a2 + 76);
    double result = *(double *)(a2 + 76);
    *(double *)(a1 + 2768) = result;
  }
  return result;
}

BOOL sub_100CB7A94(uint64_t a1, _OWORD *a2)
{
  long long v2 = *(_OWORD *)(a1 + 2264);
  *a2 = *(_OWORD *)(a1 + 2248);
  a2[1] = v2;
  long long v3 = *(_OWORD *)(a1 + 2280);
  long long v4 = *(_OWORD *)(a1 + 2296);
  long long v5 = *(_OWORD *)(a1 + 2328);
  a2[4] = *(_OWORD *)(a1 + 2312);
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  long long v6 = *(_OWORD *)(a1 + 2344);
  long long v7 = *(_OWORD *)(a1 + 2360);
  long long v8 = *(_OWORD *)(a1 + 2376);
  *(_OWORD *)((char *)a2 + 140) = *(_OWORD *)(a1 + 2388);
  a2[7] = v7;
  a2[8] = v8;
  a2[6] = v6;
  return *(double *)(a1 + 2268) >= 0.0;
}

uint64_t sub_100CB7AD8(uint64_t a1, uint64_t a2, double a3)
{
  double v9 = a3;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q0;
  *(_OWORD *)(a2 + 52) = _Q0;
  *(_OWORD *)(a2 + 68) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a2 + 88) = 0xBFF0000000000000;
  *(void *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  return sub_100C729D4(a1 + 456, &v9, a2);
}

uint64_t sub_100CB7B60(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2408);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t sub_100CB7B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 2792)) {
    return 0;
  }
  if (!*(void *)(a1 + 2408) || *(unsigned char *)(a3 + 425) != 0) {
    return 0;
  }
  int v8 = *(_DWORD *)(a2 + 96);
  if ((v8 & 0xFFFFFFF7) != 1 && (v8 | 8) != 11 && (v8 != 2 || *(unsigned char *)(a1 + 2528) == 0)) {
    return 0;
  }
  sub_100CB7E24(a1);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 2584) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 2600) = v10;
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 2664) = v13;
  *(_OWORD *)(a1 + 2616) = v11;
  *(_OWORD *)(a1 + 2632) = v12;
  long long v14 = *(_OWORD *)(a2 + 96);
  long long v15 = *(_OWORD *)(a2 + 112);
  long long v16 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 2724) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 2696) = v15;
  *(_OWORD *)(a1 + 2712) = v16;
  *(_OWORD *)(a1 + 2680) = v14;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2408) + 40))(*(void *)(a1 + 2408), a2, a3);
  id v17 = *(void **)(a1 + 2912);
  if (v17 && result)
  {
    if (!*(void *)(a1 + 2920))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F1848);
      }
      id v18 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLMM,Creating mapmatcher OS transaction", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F1848);
        }
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::mapMatch(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      *(void *)(a1 + 2920) = os_transaction_create();
      id v17 = *(void **)(a1 + 2912);
    }
    [v17 setNextFireDelay:300.0];
    return 1;
  }
  return result;
}

uint64_t sub_100CB7E24(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2408);
  if (result)
  {
    if (*(unsigned char *)(a1 + 2904)
      && (uint64_t v3 = sub_10016BA10(),
          int v7 = 1,
          double v4 = sub_10016BA54(v3, &v7),
          BOOL v5 = sub_100178CCC((_DWORD *)(a1 + 2856), v4),
          uint64_t result = *(void *)(a1 + 2408),
          !v5))
    {
      BOOL v6 = sub_1011F1590(result);
      uint64_t result = *(void *)(a1 + 2408);
    }
    else
    {
      BOOL v6 = 0;
    }
    return sub_1011F1240(result, v6);
  }
  return result;
}

double sub_100CB7EA0(uint64_t a1)
{
  uint64_t v2 = a1 + 2604;
  uint64_t v3 = *(void *)(a1 + 2408);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  *(_DWORD *)(a1 + 2584) = 0xFFFF;
  *(void *)(a1 + 2596) = 0;
  *(void *)(a1 + 2588) = 0;
  double result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)uint64_t v2 = xmmword_101D1C320;
  *(_OWORD *)(v2 + 16) = _Q1;
  *(_OWORD *)(v2 + 32) = _Q1;
  *(_OWORD *)(v2 + 48) = _Q1;
  *(_DWORD *)(a1 + 2668) = 0;
  *(void *)(a1 + 2672) = 0xBFF0000000000000;
  *(void *)(a1 + 2688) = 0;
  *(void *)(a1 + 2680) = 0;
  *(_DWORD *)(a1 + 2696) = 0;
  *(void *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2708) = 0x7FFFFFFF;
  *(void *)(a1 + 2712) = 0;
  *(void *)(a1 + 2728) = 0;
  *(void *)(a1 + 2720) = 0;
  *(unsigned char *)(a1 + 2736) = 0;
  return result;
}

uint64_t sub_100CB7F4C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2408);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_100CB7F7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2408);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t sub_100CB7FAC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(result + 2408))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    double v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)a2;
      unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      uint64_t v7 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 1;
      double v8 = sub_10016BA54(v7, buf);
      uint64_t v9 = sub_10016BA10();
      double v10 = sub_10018202C(v9);
      *(_DWORD *)uint64_t buf = 67240960;
      int v14 = v5;
      __int16 v15 = 2050;
      unint64_t v16 = v6;
      __int16 v17 = 2050;
      double v18 = v8;
      __int16 v19 = 2050;
      double v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,RouteHints,CLLocationFilterController,setMapMatchingRouteHint,type,%{public}d,sz,%{public}zu,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F1848);
      }
      sub_1005B5034();
      uint64_t v11 = sub_10016BA10();
      sub_10018202C(v11);
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMapMatchingRouteHint(const CLMapsRouteHintData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    uint64_t result = sub_1011F0FF8(*(void *)(v3 + 2408), a2);
  }
  *(void *)(v3 + 2856) = *(void *)a2;
  if (v3 + 2856 != a2) {
    uint64_t result = (uint64_t)sub_1008A9A00((char *)(v3 + 2864), *(char **)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  *(_OWORD *)(v3 + 2888) = *(_OWORD *)(a2 + 32);
  return result;
}

uint64_t sub_100CB8264(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 2408);
  if (result) {
    return sub_1011F1170(result, a2);
  }
  return result;
}

double sub_100CB8274()
{
  return 166.0;
}

BOOL sub_100CB8280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4 = *(double *)(a4 + 544);
  if (v4 > 0.0)
  {
    *(void *)(a2 + 28) = *(void *)(a4 + 28);
    *(_DWORD *)(a3 + 316) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(a3 + 312) = *(_DWORD *)(a4 + 472);
    *(double *)(a3 + 384) = v4;
    *(void *)(a3 + 360) = *(void *)(a4 + 520);
    *(_OWORD *)(a3 + 368) = *(_OWORD *)(a4 + 528);
    *(void *)(a3 + 624) = *(void *)(a4 + 784);
    *(_OWORD *)(a3 + 496) = *(_OWORD *)(a4 + 656);
  }
  return v4 > 0.0;
}

void sub_100CB82D4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 2408);
  if (v3) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    BOOL v6 = (*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    BOOL v7 = *(_DWORD *)(a3 + 8) == 71 || (*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
    if (!v7 && *(double *)a3 > 0.0)
    {
      long long v8 = *(_OWORD *)(a3 + 16);
      v17[0] = *(_OWORD *)a3;
      v17[1] = v8;
      int v18 = *(_DWORD *)(a3 + 32);
      sub_1011EA72C(v3, (uint64_t)v17);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    uint64_t v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(_DWORD *)(a3 + 8);
      unint64_t v11 = *(void *)a3;
      if (!v6) {
        unint64_t v11 = 0xBFF0000000000000;
      }
      *(_DWORD *)uint64_t buf = 67240448;
      int v14 = v10;
      __int16 v15 = 2050;
      unint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,CLLocationFilterController,Received NotificationWorkoutSessionOverride,fitnessSession,%{public}d,startTime,%{public}.1lf", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMotionStateObserverNotification(const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100CB851C(uint64_t a1, int *a2, long long *a3)
{
  if ((*a2 - 1) >= 2)
  {
    if (*a2)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      double v20 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *a2;
        *(_DWORD *)uint64_t buf = 67240192;
        int v67 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Unknown notification %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        int v22 = *a2;
        LODWORD(v57) = 67240192;
        DWORD1(v57) = v22;
        goto LABEL_75;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      int v18 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning unexpected kNotificationMovementCoarse", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        LOWORD(v57) = 0;
        goto LABEL_75;
      }
    }
  }
  else
  {
    uint64_t v5 = sub_10016BA10();
    *(_DWORD *)uint64_t buf = 0;
    double v6 = sub_10016BA54(v5, buf);
    double v48 = v6;
    long long v7 = a3[6];
    long long v8 = a3[7];
    long long v9 = a3[4];
    long long v62 = a3[5];
    long long v63 = v7;
    long long v64 = v8;
    uint64_t v65 = *((void *)a3 + 16);
    long long v10 = a3[3];
    long long v59 = a3[2];
    long long v60 = v10;
    long long v61 = v9;
    long long v11 = a3[1];
    long long v57 = *a3;
    long long v58 = v11;
    double v12 = vabdd_f64(v6, *(double *)(a1 + 2752));
    if (v12 >= 1.5)
    {
      int v17 = v57;
    }
    else
    {
      BOOL v16 = *(double *)(a1 + 2744) == 0.0
         && ((long long v13 = (double *)(a1 + 2628), v14 = vabdd_f64(v6, *(double *)(a1 + 2660)), v12 < 0.5)
           ? (BOOL v15 = v14 < 1.5)
           : (BOOL v15 = 0),
             v15 && *v13 >= 0.0)
         && *v13 + *(double *)(a1 + 2636) * -2.0 < 0.0;
      int v17 = v57;
      if ((int)v57 > 40)
      {
        if (v57 == 41)
        {
LABEL_13:
          *(void *)&long long v57 = 0x200000005;
          int v17 = 5;
        }
        else if (v57 == 52 || v57 == 56)
        {
LABEL_46:
          DWORD1(v57) = 2;
        }
        else
        {
LABEL_35:
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F1808);
          }
          int v23 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Unhandled case", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022F1808);
            }
            LOWORD(v49) = 0;
            id v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLLocationFilterController::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v24);
            if (v24 != (char *)buf) {
              free(v24);
            }
          }
        }
      }
      else
      {
        switch((int)v57)
        {
          case 0:
          case 6:
            break;
          case 1:
            int v17 = 10;
            LODWORD(v57) = 10;
            if (v16)
            {
              DWORD1(v57) = 2;
              int v17 = 10;
            }
            break;
          case 2:
            int v17 = 11;
            LODWORD(v57) = 11;
            if (v16)
            {
              DWORD1(v57) = 2;
              int v17 = 11;
            }
            break;
          case 3:
          case 4:
          case 7:
          case 8:
          case 9:
            goto LABEL_13;
          case 5:
            goto LABEL_46;
          case 10:
          case 11:
            if (v16) {
              goto LABEL_46;
            }
            break;
          default:
            goto LABEL_35;
        }
      }
    }
    if (*(unsigned char *)(a1 + 2784)
      && v17
      && ((double v25 = v6 - *(double *)(a1 + 2760), v25 >= 0.0) ? (v26 = v25 < 10.0) : (v26 = 0), v26))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      long long v43 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v44 = sub_10016BA10();
        double v45 = sub_10018202C(v44);
        *(_DWORD *)uint64_t buf = 67240704;
        int v67 = v17;
        __int16 v68 = 2050;
        *(double *)int v69 = v6;
        *(_WORD *)&v69[8] = 2050;
        double v70 = v45;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Going to sleep. Not providing motion state, %{public}d, to the location KF,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        uint64_t v46 = sub_10016BA10();
        int v49 = 67240704;
        int v50 = v17;
        __int16 v51 = 2050;
        *(double *)id v52 = v6;
        *(_WORD *)&v52[8] = 2050;
        double v53 = sub_10018202C(v46);
        goto LABEL_75;
      }
    }
    else
    {
      sub_1013F0980(a1 + 48, &v48, &v57, (int *)&v57 + 1);
      sub_100C6AC04(a1 + 456, &v48, (int *)&v57, (int *)&v57 + 1);
      uint64_t v27 = *(void *)(a1 + 2408);
      if (v27)
      {
        (*(void (**)(uint64_t, double *, long long *))(*(void *)v27 + 64))(v27, &v48, &v57);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        std::string::value_type v28 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v29 = v57;
          int v30 = DWORD1(v57);
          int v31 = HIDWORD(v57);
          int v32 = v58;
          double v33 = v48;
          uint64_t v34 = sub_10016BA10();
          double v35 = sub_10018202C(v34);
          *(_DWORD *)uint64_t buf = 67241472;
          int v67 = v29;
          __int16 v68 = 1026;
          *(_DWORD *)int v69 = v30;
          *(_WORD *)&v69[4] = 1026;
          *(_DWORD *)&v69[6] = v31;
          LOWORD(v70) = 1026;
          *(_DWORD *)((char *)&v70 + 2) = v32;
          HIWORD(v70) = 2050;
          double v71 = v33;
          __int16 v72 = 2050;
          double v73 = v35;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMM, MotionState,type,%{public}d,confidence,%{public}d,mountedState,%{public}d,mountedConfidence,%{public}d,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x2Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F1808);
          }
          int v36 = v57;
          int v37 = DWORD1(v57);
          int v38 = HIDWORD(v57);
          int v39 = v58;
          double v40 = v48;
          uint64_t v41 = sub_10016BA10();
          double v42 = sub_10018202C(v41);
          int v49 = 67241472;
          int v50 = v36;
          __int16 v51 = 1026;
          *(_DWORD *)id v52 = v37;
          *(_WORD *)&v52[4] = 1026;
          *(_DWORD *)&v52[6] = v38;
          LOWORD(v53) = 1026;
          *(_DWORD *)((char *)&v53 + 2) = v39;
          HIWORD(v53) = 2050;
          double v54 = v40;
          __int16 v55 = 2050;
          double v56 = v42;
LABEL_75:
          long long v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
      }
    }
  }
}

void sub_100CB8DD4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 2408);
  switch(*a2)
  {
    case 2:
      uint64_t v6 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 0;
      *(double *)(a1 + 2760) = sub_10016BA54(v6, buf);
      sub_100C72990(a1 + 456, (double *)(a1 + 2760));
      *(unsigned char *)(a1 + 2784) = 1;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      long long v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = sub_10016BA10();
        *(_DWORD *)uint64_t buf = 0;
        double v9 = sub_10016BA54(v8, buf);
        uint64_t v10 = sub_10016BA10();
        double v11 = sub_10018202C(v10);
        *(_DWORD *)uint64_t buf = 134349312;
        double v59 = v9;
        __int16 v60 = 2050;
        *(double *)long long v61 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "device entering sleep - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        double v36 = sub_1005BFA38();
        uint64_t v37 = sub_10016BA10();
        int v53 = 134349312;
        double v54 = v36;
        __int16 v55 = 2050;
        *(void *)double v56 = sub_10018202C(v37);
        int v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      *(_DWORD *)uint64_t buf = 0;
      int v53 = 2;
      sub_100C6AC04(a1 + 456, (double *)(a1 + 2760), (int *)buf, &v53);
      *(_DWORD *)uint64_t buf = 0;
      int v53 = 2;
      sub_1013F0980(a1 + 48, (void *)(a1 + 2760), buf, &v53);
      break;
    case 3:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      double v12 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = sub_10016BA10();
        *(_DWORD *)uint64_t buf = 0;
        double v14 = sub_10016BA54(v13, buf);
        uint64_t v15 = sub_10016BA10();
        double v16 = sub_10018202C(v15);
        *(_DWORD *)uint64_t buf = 134349312;
        double v59 = v14;
        __int16 v60 = 2050;
        *(double *)long long v61 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "device wake - checking for corresponding sleep,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        double v39 = sub_1005BFA38();
        uint64_t v40 = sub_10016BA10();
        int v53 = 134349312;
        double v54 = v39;
        __int16 v55 = 2050;
        *(void *)double v56 = sub_10018202C(v40);
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
      if (!*(unsigned char *)(a1 + 2784))
      {
        uint64_t v17 = sub_10016BA10();
        *(_DWORD *)uint64_t buf = 0;
        double v18 = sub_10016BA54(v17, buf);
        if (v18 - *(double *)(a1 + 2776) > 2.0)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022F1808);
          }
          __int16 v19 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
          {
            double v20 = *(double *)(a1 + 2768);
            uint64_t v21 = sub_10016BA10();
            double v22 = sub_10018202C(v21);
            *(_DWORD *)uint64_t buf = 134349568;
            double v59 = v20;
            __int16 v60 = 2050;
            *(double *)long long v61 = v18;
            *(_WORD *)&unsigned char v61[8] = 2050;
            double v62 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning wake detected with no prior sleep known, sending unknown motion to location KF at time, %{public}.3lf,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022F1808);
            }
            double v50 = *(double *)(a1 + 2768);
            uint64_t v51 = sub_10016BA10();
            int v53 = 134349568;
            double v54 = v50;
            __int16 v55 = 2050;
            *(double *)double v56 = v18;
            *(_WORD *)&v56[8] = 2050;
            double v57 = sub_10018202C(v51);
            id v52 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v52);
            if (v52 != (char *)buf) {
              free(v52);
            }
          }
          *(_DWORD *)uint64_t buf = 0;
          int v53 = 2;
          sub_100C6AC04(a1 + 456, (double *)(a1 + 2768), (int *)buf, &v53);
        }
      }
      uint64_t v23 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 0;
      *(double *)(a1 + 2776) = sub_10016BA54(v23, buf);
      *(unsigned char *)(a1 + 2784) = 0;
      break;
    case 6:
      if ((*(_DWORD *)(a3 + 4) - 1) > 1)
      {
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_1022F1828);
        }
        double v35 = qword_102418FB8;
        if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#cltr,device does not have reachability", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FB0 != -1) {
            dispatch_once(&qword_102418FB0, &stru_1022F1828);
          }
          LOWORD(v53) = 0;
          int v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v49);
          if (v49 != (char *)buf) {
            free(v49);
          }
        }
      }
      else
      {
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_1022F1828);
        }
        id v24 = qword_102418FB8;
        if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
        {
          int v25 = *(_DWORD *)(a3 + 4);
          *(_DWORD *)uint64_t buf = 67109120;
          LODWORD(v59) = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#cltr,device has reachability,type,%d,clearing backoff timer if one exists", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FB0 != -1) {
            dispatch_once(&qword_102418FB0, &stru_1022F1828);
          }
          int v47 = *(_DWORD *)(a3 + 4);
          int v53 = 67109120;
          LODWORD(v54) = v47;
          double v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v48);
          if (v48 != (char *)buf) {
            free(v48);
          }
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 408))(a1);
      }
      break;
    case 7:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      BOOL v26 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        double v27 = *(double *)a3;
        int v28 = *(unsigned __int8 *)(a3 + 8);
        int v29 = *(unsigned __int8 *)(a3 + 9);
        int v30 = *(unsigned __int8 *)(a3 + 16);
        *(_DWORD *)uint64_t buf = 134349824;
        double v59 = v27;
        __int16 v60 = 1026;
        *(_DWORD *)long long v61 = v28;
        *(_WORD *)&v61[4] = 1026;
        *(_DWORD *)&v61[6] = v29;
        LOWORD(v62) = 1026;
        *(_DWORD *)((char *)&v62 + 2) = v30;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,Battery notification,level,%{public}.2lf,charged,%{public}d,connected,%{public}d,wasConnected,%{public}d", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        double v42 = *(double *)a3;
        int v43 = *(unsigned __int8 *)(a3 + 8);
        int v44 = *(unsigned __int8 *)(a3 + 9);
        int v45 = *(unsigned __int8 *)(a3 + 16);
        int v53 = 134349824;
        double v54 = v42;
        __int16 v55 = 1026;
        *(_DWORD *)double v56 = v43;
        *(_WORD *)&v56[4] = 1026;
        *(_DWORD *)&v56[6] = v44;
        LOWORD(v57) = 1026;
        *(_DWORD *)((char *)&v57 + 2) = v45;
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
      if (v5)
      {
        double v31 = *(double *)a3;
        if (*(double *)a3 >= 0.0 && v31 <= 100.0)
        {
          sub_100F342A0(a1 + 2816, v31);
          int v32 = *(void **)(a1 + 2408);
          if (v32) {
            sub_1001706DC(v32, *(unsigned char *)(a1 + 2831) == 0);
          }
        }
      }
      break;
    case 0xD:
      if (v5)
      {
        sub_100F3419C(a1 + 2816, *(_DWORD *)a3);
        goto LABEL_43;
      }
      break;
    case 0xF:
      if (v5)
      {
        sub_100F34228(a1 + 2816, *(unsigned char *)a3);
LABEL_43:
        double v33 = *(void **)(a1 + 2408);
        if (v33)
        {
          BOOL v34 = *(unsigned char *)(a1 + 2831) == 0;
          sub_1001706DC(v33, v34);
        }
      }
      break;
    default:
      return;
  }
}

uint64_t sub_100CB9968(uint64_t result, uint64_t a2, int *a3)
{
  if (!*(unsigned char *)(result + 2785))
  {
    uint64_t v4 = result;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(v4 + 2840);
      int v7 = *a3;
      int v8 = a3[1];
      *(_DWORD *)uint64_t buf = 67240704;
      int v11 = v6;
      __int16 v12 = 1026;
      int v13 = v7;
      __int16 v14 = 1026;
      int v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "priorSignalEnvironment,%{public}d,newSignalEnvironment,%{public}d,fidelity,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedSignalEnvironmentNotification(const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_100F34264((int *)(v4 + 2816), *a3);
    uint64_t result = *(void *)(v4 + 2408);
    if (result)
    {
      sub_1001706DC((void *)result, *(unsigned char *)(v4 + 2831) == 0);
      uint64_t result = *(void *)(v4 + 2408);
      *(_DWORD *)(v4 + 2788) = *a3;
      if (result) {
        return sub_1011EA41C(result, *(void *)a3);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 2788) = *a3;
    }
  }
  return result;
}

uint64_t sub_100CB9BA4(uint64_t a1, int *a2)
{
  uint64_t v4 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(v4, kCTRegistrationStatusChangedNotification))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 0;
      double v7 = sub_10016BA54(v6, buf);
      uint64_t v8 = sub_10016BA10();
      double v9 = sub_10018202C(v8);
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)&uint8_t buf[4] = v7;
      __int16 v21 = 2050;
      double v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "device lost registration - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_15;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_18;
    }
LABEL_20:
    dispatch_once(&qword_102419380, &stru_1022F1808);
LABEL_18:
    sub_1005BFA38();
    uint64_t v18 = sub_10016BA10();
    sub_10018202C(v18);
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
    goto LABEL_15;
  }
  uint64_t v10 = (const void *)sub_1000FA17C(a2);
  uint64_t result = CFEqual(v10, kCTCallStatusChangeNotification);
  if (!result) {
    return result;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F1808);
  }
  __int16 v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = sub_10016BA10();
    *(_DWORD *)uint64_t buf = 0;
    double v14 = sub_10016BA54(v13, buf);
    uint64_t v15 = sub_10016BA10();
    double v16 = sub_10018202C(v15);
    *(_DWORD *)uint64_t buf = 134349312;
    *(double *)&uint8_t buf[4] = v14;
    __int16 v21 = 2050;
    double v22 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "device on active call - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v17 = sub_10016BA10();
  *(_DWORD *)uint64_t buf = 0;
  *(void *)uint64_t buf = sub_10016BA54(v17, buf);
  return sub_100C72990(a1 + 456, (double *)buf);
}

uint64_t sub_100CB9F30(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(void *)(a1 + 2952);
  if (v2
    && (uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)) != 0
    && (uint64_t v5 = v4,
        long long v26 = 0u,
        long long v27 = 0u,
        long long v24 = 0u,
        long long v25 = 0u,
        (id v6 = [v4 countByEnumeratingWithState:&v24 objects:v28 count:16]) != 0))
  {
    char v7 = 0;
    uint64_t v8 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        sub_100134750(&__p, (char *)[*(id *)(*((void *)&v24 + 1) + 8 * i) UTF8String]);
        if ((v23 & 0x80u) == 0) {
          size_t v10 = v23;
        }
        else {
          size_t v10 = __n;
        }
        int v11 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
        int v12 = (char)v11;
        if ((char)v11 < 0) {
          int v11 = a2[1];
        }
        if ((unsigned __int8 *)v10 == v11)
        {
          if (v12 >= 0) {
            uint64_t v13 = (unsigned __int8 *)a2;
          }
          else {
            uint64_t v13 = *a2;
          }
          if ((v23 & 0x80) != 0)
          {
            uint64_t v18 = __p;
            int v19 = memcmp(__p, v13, __n);
            operator delete(v18);
            if (!v19)
            {
LABEL_35:
              char v7 = 1;
              return v7 & 1;
            }
          }
          else
          {
            if (!v23) {
              goto LABEL_35;
            }
            uint64_t v14 = 0;
            do
            {
              int v15 = *((unsigned __int8 *)&__p + v14);
              int v16 = v13[v14];
            }
            while (v15 == v16 && v23 - 1 != v14++);
            v7 |= v15 == v16;
            if (v15 == v16) {
              return v7 & 1;
            }
          }
        }
        else if ((v23 & 0x80) != 0)
        {
          operator delete(__p);
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

void sub_100CBA124(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(void *)(a1 + 2408))
  {
    int v5 = *a2;
    if ((*a2 - 1) < 3)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      id v6 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = a3 + 8;
        if (*(char *)(a3 + 31) < 0) {
          uint64_t v7 = *(void *)(a3 + 8);
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,locationApp backgrounded or terminated,%s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_10;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedAppNotification(const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v17);
      if (v17 == (char *)buf) {
        goto LABEL_10;
      }
      goto LABEL_51;
    }
    if (v5 == 9 || v5 == 4)
    {
      double v9 = (void *)(a3 + 8);
      if (!sub_100CB9F30(a1, (unsigned __int8 **)(a3 + 8)))
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        uint64_t v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a3 + 31) >= 0) {
            uint64_t v14 = a3 + 8;
          }
          else {
            uint64_t v14 = *(void *)(a3 + 8);
          }
          *(_DWORD *)uint64_t buf = 136315138;
          uint64_t v20 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,locationApp is not foreground,%s", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_10;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedAppNotification(const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v17);
        if (v17 == (char *)buf) {
          goto LABEL_10;
        }
LABEL_51:
        free(v17);
LABEL_10:
        sub_100CB694C(a1, 0, 0);
        return;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      size_t v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a3 + 31) >= 0) {
          uint64_t v11 = a3 + 8;
        }
        else {
          uint64_t v11 = *(void *)(a3 + 8);
        }
        *(_DWORD *)uint64_t buf = 136315138;
        uint64_t v20 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,locationApp in foreground,%s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022F1808);
        }
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedAppNotification(const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      int v12 = *(char *)(a3 + 31);
      if (v12 < 0)
      {
        if (*(void *)(a3 + 16) != 14)
        {
LABEL_45:
          BOOL v16 = 0;
LABEL_46:
          sub_100CB694C(a1, 1, v16);
          return;
        }
        double v9 = (void *)*v9;
      }
      else if (v12 != 14)
      {
        goto LABEL_45;
      }
      BOOL v16 = *v9 == 0x6C7070612E6D6F63 && *(void *)((char *)v9 + 6) == 0x7370614D2E656C70;
      goto LABEL_46;
    }
  }
}

uint64_t sub_100CBA694(uint64_t result, int a2)
{
  int v5 = a2;
  uint64_t v2 = *(void *)(result + 2408);
  if (v2)
  {
    uint64_t v3 = sub_10016BA10();
    LODWORD(v4) = 0;
    double v4 = sub_10016BA54(v3, &v4);
    return (*(uint64_t (**)(uint64_t, int *, double *))(*(void *)v2 + 72))(v2, &v5, &v4);
  }
  return result;
}

double sub_100CBA708(uint64_t a1, uint64_t a2, unsigned char *a3, double *a4)
{
  return sub_1001A3770(a1 + 2536, a2, a3, a4);
}

void sub_100CBA710(uint64_t a1, void *a2, double *a3, unsigned char *a4, void *a5)
{
  if (*a3 >= 0.0 && *a3 < 16.6666)
  {
    uint64_t v10 = sub_10016BA10();
    *(_DWORD *)uint64_t buf = 0;
    *(double *)(a1 + 2752) = sub_10016BA54(v10, buf);
    *(double *)(a1 + 2744) = *a3;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1808);
    }
    uint64_t v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)a3;
      uint64_t v13 = sub_10016BA10();
      *(_DWORD *)uint64_t buf = 0;
      double v14 = sub_10016BA54(v13, buf);
      uint64_t v15 = sub_10016BA10();
      double v16 = sub_10018202C(v15);
      *(_DWORD *)uint64_t buf = 134218496;
      uint64_t v20 = v12;
      __int16 v21 = 2048;
      double v22 = v14;
      __int16 v23 = 2048;
      double v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "LocationController,updateVehicleSpeedFilter,vehicleSpeed,%.3f,now,%.3f,propagation_us,%.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1808);
      }
      sub_1005BFA38();
      uint64_t v17 = sub_10016BA10();
      sub_10018202C(v17);
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::updateVehicleSpeedFilter(const CFAbsoluteTime &, const double &, BOOL &, double &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  sub_101246BC4(a1 + 2536, a2, a3, a4, a5);
}

uint64_t sub_100CBA994(uint64_t a1, _DWORD *a2, char a3)
{
  uint64_t result = *(void *)(a1 + 2408);
  if (result) {
    return sub_1011F0F10(result, a2, a3);
  }
  return result;
}

void sub_100CBA9A4(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 2792) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F1868);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,isAirborne,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F1868);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::updateAirborneClientStatus(const BOOL)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_100CBAB54(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 2788) - 1;
  if (v1 > 5) {
    return 0;
  }
  else {
    return dword_101D8AF60[v1];
  }
}

BOOL sub_100CBAB7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2848);
  return v1 && *(unsigned char *)(v1 + 128) != 0;
}

void sub_100CBAB9C(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 2848);
  if (v3) {
    sub_1001AE8C0(v3, a2, a3);
  }
}

void sub_100CBABAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 2848);
  if (v3) {
    sub_1001AE7F4(v3, a2, a3);
  }
}

uint64_t sub_100CBABBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 2848);
  if (result) {
    return sub_1001AED98(result, a2, a3);
  }
  return result;
}

void sub_100CBABCC(uint64_t a1)
{
  *(unsigned char *)(a1 + 2481) = 0;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F1828);
  }
  uint64_t v1 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#cltr,backoff timer fired,allow region support queries.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::onGeoMapQueryBackoffTimer()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

id sub_100CBAD58(uint64_t a1, double a2)
{
  if (!*(void *)(a1 + 2488))
  {
    id v4 = [[objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
    *(void *)(a1 + 2488) = v4;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _DWORD v12[2] = sub_100CBB0D8;
    _OWORD v12[3] = &unk_1022A3020;
    void v12[4] = a1;
    [v4 setHandler:v12];
  }
  if (a2 > 0.0 && a2 < 1.79769313e308)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v8 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#cltr,backoff timer set for %lf seconds", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      int v13 = 134217984;
      double v14 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setGeoMapQueryBackoffTimer(double)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    char v7 = 1;
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    int v6 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#cltr,backoff timer disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      LOWORD(v13) = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setGeoMapQueryBackoffTimer(double)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    char v7 = 0;
    a2 = 1.79769313e308;
  }
  id result = [*(id *)(a1 + 2488) setNextFireDelay:a2];
  *(unsigned char *)(a1 + 2481) = v7;
  return result;
}

uint64_t sub_100CBB0D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 384))();
}

void sub_100CBB108(uint64_t a1)
{
  if (*(void *)(a1 + 2488))
  {
    (*(void (**)(uint64_t, double))(*(void *)a1 + 416))(a1, 1.79769313e308);
    uint64_t v2 = *(void **)(a1 + 2488);
    *(void *)(a1 + 2424) = 0x4082C00000000000;
    *(unsigned char *)(a1 + 2481) = 0;
    if (v2)
    {

      *(void *)(a1 + 2488) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 2424) = 0x4082C00000000000;
    *(unsigned char *)(a1 + 2481) = 0;
  }
}

uint64_t sub_100CBB19C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 2419))
  {
    if (!*(void *)(a1 + 2448)) {
      *(void *)(a1 + 2448) = objc_alloc_init(CLNanoRegistry);
    }
    sub_100103240();
    if (sub_10016CCBC()) {
      __int16 v4 = (unsigned __int16)[*(id *)(a1 + 2448) isAFire6OrOlderWatchPaired] ^ 1;
    }
    else {
      __int16 v4 = 0;
    }
    *(_WORD *)(a1 + 2418) = v4 | 0x100;
    (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    int v5 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 2419)) {
        BOOL v6 = *(unsigned char *)(a1 + 2418) != 0;
      }
      else {
        BOOL v6 = 1;
      }
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,fIsPhoneThatDoesNotNeedTrackRunProcessing,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      if (*(unsigned char *)(a1 + 2419)) {
        BOOL v26 = *(unsigned char *)(a1 + 2418) != 0;
      }
      else {
        BOOL v26 = 1;
      }
      int v36 = 67240192;
      LODWORD(v37) = v26;
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
  }
  if (*(unsigned char *)(a1 + 2481))
  {
LABEL_26:
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v10 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 2424);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#cltr,Not querying for region support due to backoff timer in effect,current,%{public}.0f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      uint64_t v24 = *(void *)(a1 + 2424);
      int v36 = 134349056;
      uint64_t v37 = v24;
      long long v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 2417)
    && (uint64_t v7 = sub_10016BA10(), *(_DWORD *)buf = 1, sub_10016BA54(v7, buf) - *(double *)(a1 + 2440) <= 86400.0)
    || (*(_DWORD *)(a2 + 96) - 6) < 3
    || ((double v8 = *(double *)(a2 + 20), v8 > 0.0) ? (v9 = v8 < 100.0) : (v9 = 0), !v9 || *(unsigned char *)(a1 + 2480)))
  {
    if (!*(unsigned char *)(a1 + 2481)) {
      goto LABEL_31;
    }
    goto LABEL_26;
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F1828);
  }
  int v13 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a2 + 4);
    uint64_t v15 = *(void *)(a2 + 12);
    uint64_t v16 = *(void *)(a2 + 20);
    double v17 = sub_1005B5034();
    uint64_t v18 = sub_10016BA10();
    double v19 = sub_10018202C(v18);
    *(_DWORD *)uint64_t buf = 134284545;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v47 = v16;
    __int16 v48 = 2050;
    double v49 = v17;
    __int16 v50 = 2050;
    double v51 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cltr,Querying for region support,ll,%{private}.7lf,%{private}.7lf,hunc,%.1lf,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v28 = *(void *)(a2 + 4);
    uint64_t v29 = *(void *)(a2 + 12);
    uint64_t v30 = *(void *)(a2 + 20);
    double v31 = sub_1005B5034();
    uint64_t v32 = sub_10016BA10();
    int v36 = 134284545;
    uint64_t v37 = v28;
    __int16 v38 = 2049;
    uint64_t v39 = v29;
    __int16 v40 = 2048;
    uint64_t v41 = v30;
    __int16 v42 = 2050;
    double v43 = v31;
    __int16 v44 = 2050;
    double v45 = sub_10018202C(v32);
    double v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)", "%s\n", v33);
    if (v33 != buf) {
      free(v33);
    }
  }
  *(void *)uint64_t buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  uint64_t v47 = 0;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_100CBB91C;
  v35[3] = &unk_1022CF360;
  v35[4] = buf;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  uint64_t v34[2] = sub_100CBBAE0;
  v34[3] = &unk_1022CF3B0;
  v34[4] = buf;
  v34[5] = a1;
  if (!*(void *)(a1 + 2432))
  {
    id v20 = objc_alloc_init((Class)GEOMapFeatureAccess);
    *(void *)(a1 + 2432) = v20;
    if (v20)
    {
      [v20 setAllowNetworkTileLoad:1];
      [*(id *)(a1 + 2432) setAllowStaleData:1];
      [*(id *)(a1 + 2432) setAllowOfflineData:1];
    }
  }
  double v21 = *(double *)(a2 + 4);
  double v22 = *(double *)(a2 + 12);
  *(unsigned char *)(a1 + 2480) = 1;
  uint64_t v23 = sub_10016BA10();
  int v36 = 1;
  *(double *)(a1 + 2440) = sub_10016BA54(v23, &v36);
  sub_100DEE0E4(a1 + 2496);
  [*(id *)(a1 + 2432) findRunningTrackFlagsNear:v35 radius:v34 handler:v21 completionHandler:v22];
  _Block_object_dispose(buf, 8);
LABEL_31:
  uint64_t result = *(void *)(a1 + 2464);
  if (result)
  {
    uint64_t result = sub_100155114(result);
    if (result) {
      return sub_101490138();
    }
  }
  return result;
}

void sub_100CBB8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_100CBB91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F1828);
  }
  int v5 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v8 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,Entered handler,flags,%{public}lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= a3;
}

void sub_100CBBAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = [objc_msgSend(*(id *)(v4 + 8), "silo") queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100CBBB7C;
  block[3] = &unk_1022CF388;
  uint64_t v6 = *(void *)(a1 + 32);
  void block[4] = a2;
  void block[5] = v6;
  void block[6] = v4;
  dispatch_async(v5, block);
}

void sub_100CBBB7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(unsigned char *)(v2 + 2480) = 0;
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(uint64_t, double))(*(void *)v2 + 416))(v2, *(double *)(v2 + 2424));
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v3 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      id v4 = [*(id *)(a1 + 32) code];
      id v5 = [*(id *)(a1 + 32) domain];
      id v6 = [*(id *)(a1 + 32) localizedDescription];
      uint64_t v7 = *(void *)(v2 + 2424);
      *(_DWORD *)uint64_t buf = 134349827;
      id v15 = v4;
      __int16 v16 = 2114;
      id v17 = v5;
      __int16 v18 = 2113;
      id v19 = v6;
      __int16 v20 = 2048;
      uint64_t v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#cltr,RunningTrackFlags query,error:%{public}lld (%{public}@) \"%{private}@\",setting backoff to,%.0lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      [*(id *)(a1 + 32) code];
      [*(id *)(a1 + 32) domain];
      [*(id *)(a1 + 32) localizedDescription];
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *(unsigned char *)(v2 + 2481) = 1;
    double v8 = *(double *)(v2 + 2424) + *(double *)(v2 + 2424);
    if (v8 > 86400.0) {
      double v8 = 86400.0;
    }
    *(double *)(v2 + 2424) = v8;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 408))(v2);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    BOOL v9 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      *(_DWORD *)uint64_t buf = 134349056;
      id v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#cltr,Entered completionHandler,combinedAvailabilityFlags,%{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 1) {
      __int16 v11 = 256;
    }
    else {
      __int16 v11 = 257;
    }
    *(_WORD *)(v2 + 2416) = v11;
    (*(void (**)(uint64_t))(*(void *)v2 + 432))(v2);
  }
  sub_100762CEC(*(void **)(v2 + 2432));
  sub_100DEE0B0((id *)(v2 + 2496));
}

uint64_t sub_100CBC028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 2464);
  if (result) {
    return sub_101491210(result, a2, a3);
  }
  return result;
}

void sub_100CBC038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2464);
  if (v1)
  {
    sub_101490FB0(v1);
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v2 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#cltr,cannot send GNSS turned off notification to TrackRunController,TrackRunController not instantiated", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLLocationFilterController::notifyGnssTurnedOff()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_100CBC204(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 2464);
  if (v2)
  {
    sub_1014926A8(v2, a2);
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v3 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#cltr,cannot send unfiltered location to TrackRunController,TrackRunController not instantiated", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLLocationFilterController::sendUnfilteredLocationToTrackRunController(const CLLocationProvider_Type::NotificationData &)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100CBC3D0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 2464))
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    id v4 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)a2;
      int v6 = *(_DWORD *)(a2 + 8);
      int v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)uint64_t buf = 134349569;
      uint64_t v12 = v5;
      __int16 v13 = 1025;
      int v14 = v6;
      __int16 v15 = 1025;
      int v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltr,TrackRunHint,CLLocationFilterController,setTrackRunHint,mctime,%{public}.1lf,lane,%{private}d,notification,%{private}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setTrackRunHint(const CLTrackRunHint &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_101491A78(*(void *)(a1 + 2464), (uint64_t *)a2);
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    double v8 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#cltr,Warning,TrackRunHint,CLLocationFilterController not instantiated", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022F1828);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::setTrackRunHint(const CLTrackRunHint &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_100CBC6F8(unsigned char *a1)
{
  if (a1[2417]) {
    BOOL v1 = a1[2416] == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (a1[2419]) {
    BOOL v2 = a1[2418] != 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v1 || v2)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    uint64_t v3 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      BOOL v8 = v1;
      __int16 v9 = 1024;
      BOOL v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#cltr,disabling trackrun,is_unsupported_region,%d,is_unsupported_phone,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 == -1)
      {
LABEL_22:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::updateTrackRunEnablementState() const", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        goto LABEL_20;
      }
LABEL_24:
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
      goto LABEL_22;
    }
  }
  else
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F1828);
    }
    id v4 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      BOOL v8 = 0;
      __int16 v9 = 1024;
      BOOL v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltr,enabling trackrun,is_unsupported_region,%d,is_unsupported_phone,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 == -1) {
        goto LABEL_22;
      }
      goto LABEL_24;
    }
  }
LABEL_20:
  uint64_t v5 = sub_100D530F0();
  sub_100D53ABC(v5, !v1 && !v2);
}

BOOL sub_100CBCA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned char *)(a1 + 2808) && (uint64_t v3 = *(unsigned char ***)(a1 + 2800)) != 0 && sub_10003208C(v3, a2, a3);
}

BOOL sub_100CBCA2C(uint64_t a1, _OWORD *a2)
{
  return *(unsigned char *)(a1 + 2808) && (uint64_t v2 = *(void *)(a1 + 2800)) != 0 && sub_100155C94(v2, a2, 0);
}

BOOL sub_100CBCA4C(uint64_t a1, int32x2_t *a2)
{
  return *(unsigned char *)(a1 + 2808) && (uint64_t v2 = *(void *)(a1 + 2800)) != 0 && sub_100183FEC(v2, a2);
}

void sub_100CBCA68(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 2808))
  {
    uint64_t v2 = *(void *)(a1 + 2800);
    if (v2) {
      sub_1000A489C(v2, a2);
    }
  }
}

void sub_100CBCA80(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 2808))
  {
    uint64_t v2 = *(void *)(a1 + 2800);
    if (v2) {
      sub_101924F78(v2, a2);
    }
  }
}

void *sub_100CBCA98(void *result, uint64_t a2)
{
  if (*((unsigned char *)result + 2808))
  {
    uint64_t v2 = result[350];
    if (v2)
    {
      sub_1008A9CD4((uint64_t)v3, a2);
      sub_10191B0C4(v2, (uint64_t)v3);
      return sub_100682438(v3);
    }
  }
  return result;
}

void sub_100CBCB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100682438((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100CBCB30(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 2808))
  {
    uint64_t v2 = *(void *)(a1 + 2800);
    if (v2)
    {
      long long v3 = *a2;
      int v4 = *((_DWORD *)a2 + 4);
      sub_10191AB44(v2, &v3);
    }
  }
}

void sub_100CBCB74(uint64_t a1, int *a2, uint64_t a3)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F1848);
  }
  int v6 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
  {
    int v7 = *a2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    int v13 = *a2;
    LODWORD(v17[0]) = 67240192;
    HIDWORD(v17[0]) = v13;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (!*(void *)(a1 + 2408))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    __int16 v9 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,platform does not support MM", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    LOWORD(v17[0]) = 0;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v10);
LABEL_36:
    if (v10 != (char *)buf) {
      free(v10);
    }
    return;
  }
  if (*a2 == 2)
  {
    sub_1000E9354(v17);
    if (!sub_100012960(a3, "MapMatcherConfig", v17))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F1848);
      }
      BOOL v8 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,map matcher config not available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F1848);
        }
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
    sub_1011EDA24(*(void *)(a1 + 2408), (uint64_t)v17);
    sub_10013F3C4(v17);
    return;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F1848);
  }
  __int16 v11 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    int v12 = *a2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,invalid notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F1848);
    }
    int v15 = *a2;
    LODWORD(v17[0]) = 67240192;
    HIDWORD(v17[0]) = v15;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLLocationFilterController::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v10);
    goto LABEL_36;
  }
}

void sub_100CBD110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100CBD134(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100CBD164(id a1)
{
  qword_102418FB8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_100CBD194(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100CBD1C4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100CBD1F4()
{
  sub_100134750(qword_102480AA0, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480AA0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480AB8, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480AB8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480AD0, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480AD0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480AE8, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480AE8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480B00, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480B00, (void *)&_mh_execute_header);
  sub_100134750(qword_102480B18, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480B18, (void *)&_mh_execute_header);
  sub_100134750(qword_102480B30, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480B30, (void *)&_mh_execute_header);
  sub_100134750(qword_102480B48, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480B48, (void *)&_mh_execute_header);
  sub_100134750(qword_102480B60, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480B60, (void *)&_mh_execute_header);
  sub_100134750(qword_102480B78, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480B78, (void *)&_mh_execute_header);
  sub_100134750(qword_102480B90, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480B90, (void *)&_mh_execute_header);
  sub_100134750(qword_102480BA8, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480BA8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480BC0, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480BC0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480BD8, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480BD8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480BF0, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480BF0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480C08, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480C08, (void *)&_mh_execute_header);
  sub_100134750(qword_102480C20, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480C20, (void *)&_mh_execute_header);
  sub_100134750(qword_102480C38, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480C38, (void *)&_mh_execute_header);
  sub_100134750(qword_102480C50, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480C50, (void *)&_mh_execute_header);
  sub_100134750(qword_102480C68, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480C68, (void *)&_mh_execute_header);
  sub_100134750(qword_102480C80, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480C80, (void *)&_mh_execute_header);
  sub_100134750(qword_102480C98, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480C98, (void *)&_mh_execute_header);
  sub_100134750(qword_102480CB0, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480CB0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480CC8, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480CC8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480CE0, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480CE0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480CF8, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480CF8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480D10, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480D10, (void *)&_mh_execute_header);
  sub_100134750(qword_102480D28, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480D28, (void *)&_mh_execute_header);
  sub_100134750(qword_102480D40, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480D40, (void *)&_mh_execute_header);
  sub_100134750(qword_102480D58, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480D58, (void *)&_mh_execute_header);
  sub_100134750(qword_102480D70, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480D70, (void *)&_mh_execute_header);
  sub_100134750(qword_102480D88, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480D88, (void *)&_mh_execute_header);
  sub_100134750(qword_102480DA0, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480DA0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480DB8, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480DB8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480DD0, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480DD0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480DE8, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480DE8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480E00, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480E00, (void *)&_mh_execute_header);
  sub_100134750(qword_102480E18, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480E18, (void *)&_mh_execute_header);
  sub_100134750(qword_102480E30, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480E30, (void *)&_mh_execute_header);
  sub_100134750(qword_102480E48, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480E48, (void *)&_mh_execute_header);
  sub_100134750(qword_102480E60, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480E60, (void *)&_mh_execute_header);
  sub_100134750(qword_102480E78, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480E78, (void *)&_mh_execute_header);
  sub_100134750(qword_102480E90, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480E90, (void *)&_mh_execute_header);
  sub_100134750(qword_102480EA8, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480EA8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480EC0, "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480EC0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480ED8, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480ED8, (void *)&_mh_execute_header);
  sub_100134750(qword_102480EF0, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480EF0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480F08, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480F08, (void *)&_mh_execute_header);
  sub_100134750(qword_102480F20, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480F20, (void *)&_mh_execute_header);
  sub_100134750(qword_102480F38, ", ");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480F38, (void *)&_mh_execute_header);
}

void sub_100CBDA0C()
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  uint64_t v0 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "FenceCal: init globals", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::initStaticGlobals()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000C7F88(buf);
  int v1 = sub_1000D2988(*(uint64_t *)buf, "WifiFenceCalculatorDebug", (BOOL *)&byte_102473F88);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v1)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = byte_102473F88;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorDebug =%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::initStaticGlobals()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  sub_1000C7F88(buf);
  int v3 = sub_1000D2988(*(uint64_t *)buf, "WifiFenceCalculatorDebugVerbose", (BOOL *)&byte_10248AAE0);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v3)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    int v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = byte_10248AAE0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorDebugVerbose =%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::initStaticGlobals()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100CBDEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CBDED0(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = off_1022F1898;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100A0D0E4(a1 + 32);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 392) = -1;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 472) = 1;
  *(unsigned char *)(a1 + 476) = 0;
  *(_DWORD *)(a1 + 480) = 1;
  *(void *)(a1 + 488) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 496) = a3;
  *(_DWORD *)(a1 + 500) = a2;
  pthread_once(&stru_102473F90, sub_100CBDA0C);
  int v6 = *(_DWORD *)(a1 + 496);
  if (v6 < 1)
  {
    int v7 = 4;
  }
  else
  {
    if ((v6 - 166) > 0xFFFFFF5A) {
      goto LABEL_6;
    }
    int v7 = 165;
  }
  *(_DWORD *)(a1 + 496) = v7;
LABEL_6:
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  BOOL v8 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(_DWORD *)(a1 + 496);
    int v10 = *(_DWORD *)(a1 + 500);
    *(_DWORD *)uint64_t buf = 67175169;
    int v14 = v9;
    __int16 v15 = 1025;
    int v16 = 165;
    __int16 v17 = 1025;
    int v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "FenceCal: fMaxChannelSetSize, %{private}d, kMaxChannel, %{private}d, fChannelFilter, 0x%{private}X", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiFenceCalculator::CLWifiFenceCalculator(unsigned int, int)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return a1;
}

void sub_100CBE188(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[56];
  if (v5)
  {
    v1[57] = v5;
    operator delete(v5);
  }
  sub_100CBE1CC(v2);
  int v6 = *v3;
  if (*v3)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CBE1CC(void *a1)
{
  uint64_t v2 = (void *)a1[42];
  if (v2)
  {
    a1[43] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }

  return sub_100A0D1F4((uint64_t)a1);
}

void *sub_100CBE224(void *a1)
{
  *a1 = off_1022F1898;
  uint64_t v2 = (void *)a1[56];
  if (v2)
  {
    a1[57] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[46];
  if (v3)
  {
    a1[47] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[43];
  if (v4)
  {
    a1[44] = v4;
    operator delete(v4);
  }
  sub_100A0D1F4((uint64_t)(a1 + 4));
  uint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_100CBE2B4(void *a1)
{
  sub_100CBE224(a1);

  operator delete();
}

uint64_t sub_100CBE2EC(void *a1, unint64_t *a2)
{
  uint64_t v3 = a1[56];
  uint64_t v21 = a1[57];
  if (v3 == v21)
  {
    double v6 = 0.0;
    double v8 = 1.0;
LABEL_27:
    double v19 = 0.0;
    goto LABEL_28;
  }
  unint64_t v4 = 0;
  unint64_t v5 = *a2;
  double v6 = 0.0;
  double v7 = 1.0;
  double v8 = 1.0;
  double v9 = 0.0;
  do
  {
    uint64_t v10 = a1[43];
    uint64_t v11 = a1[44];
    if (v10 != v11 && v5 != 0)
    {
      unint64_t v13 = 0;
      uint64_t v14 = v10 + 96;
      do
      {
        double v15 = sub_100CBE5DC(*(double *)(v3 + 32), *(double *)(v3 + 40), *(double *)(v14 - 88), *(double *)(v14 - 80))
            / 25.0;
        double v16 = sub_100C9ABF4(v15);
        if (v16 >= 0.0)
        {
          double v7 = v7 * (1.0 - v16);
          ++v13;
        }
        else
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          __int16 v17 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 134349312;
            double v24 = v15;
            __int16 v25 = 2050;
            double v26 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "bad CLStandardNormalDistribution(%{public}lf) = %{public}lf", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            int v18 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiFenceCalculator::calculateScore(Score &)", "%s\n", v18);
            if (v18 != (char *)buf) {
              free(v18);
            }
          }
        }
        unint64_t v5 = *a2;
        if (v14 == v11) {
          break;
        }
        v14 += 96;
      }
      while (v13 < v5);
    }
    double v8 = fmin(1.0 - v7, v8);
    double v6 = fmax(1.0 - v7, v6);
    double v9 = v9 + 1.0 - v7;
    ++v4;
    v3 += 64;
  }
  while (v3 != v21);
  if (!v4) {
    goto LABEL_27;
  }
  double v19 = v9 / (double)v4;
LABEL_28:
  *((double *)a2 + 1) = (v8 + v19) * 0.5;
  *((double *)a2 + 2) = v8;
  *((double *)a2 + 3) = v6;
  *((double *)a2 + 4) = v19;
  return 1;
}

double sub_100CBE5DC(double a1, double a2, double a3, double a4)
{
  for (; a2 < 0.0; a2 = a2 + 360.0)
    ;
  for (; a4 < 0.0; a4 = a4 + 360.0)
    ;
  double v4 = a1 * 0.0174532925;
  double v5 = a3 * 0.0174532925;
  double v6 = a2 * 0.0174532925;
  double v7 = a4 * 0.0174532925;
  __double2 v8 = __sincos_stret(a1 * 0.0174532925);
  double v9 = sqrt(v8.__sinval * -0.00669437999 * v8.__sinval + 1.0);
  double v10 = (v5 - v4) * (6335439.33 / (v9 * (v9 * v9)) + 0.0);
  double v11 = v8.__cosval * (6378137.0 / v9 + 0.0) * (v7 - v6);
  return sqrt(v11 * v11 + v10 * v10);
}

BOOL sub_100CBE6BC(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v44[8] = _Q0;
  *(_OWORD *)&v44[24] = _Q0;
  uint64_t v6 = *(void *)(a1 + 344);
  uint64_t v5 = *(void *)(a1 + 352);
  *(void *)__int16 v44 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 5);
  if (v5 == v6)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    double v24 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v55.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning fChosenAPs is empty", (uint8_t *)&v55, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v55, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      *(_WORD *)long long __p = 0;
      __int16 v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::addScore()", "%s\n", (const char *)v25);
      if (v25 != &v55) {
        free(v25);
      }
    }
  }
  else
  {
    sub_100CBE2EC((void *)a1, (unint64_t *)v44);
    if (byte_102473F88) {
      _ZF = byte_10248AAE0 == 0;
    }
    else {
      _ZF = 1;
    }
    if (!_ZF)
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      double v9 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a1 + 55) >= 0) {
          size_t v10 = *(unsigned __int8 *)(a1 + 55);
        }
        else {
          size_t v10 = *(void *)(a1 + 40);
        }
        double v11 = &v55;
        sub_1001110E4((uint64_t)&v55, v10 + 1);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v11 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if (v10)
        {
          if (*(char *)(a1 + 55) >= 0) {
            int v12 = (const void *)(a1 + 32);
          }
          else {
            int v12 = *(const void **)(a1 + 32);
          }
          memmove(v11, v12, v10);
        }
        *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
        int v13 = *(char *)(a1 + 79);
        if (v13 >= 0) {
          uint64_t v14 = (const std::string::value_type *)(a1 + 56);
        }
        else {
          uint64_t v14 = *(const std::string::value_type **)(a1 + 56);
        }
        if (v13 >= 0) {
          std::string::size_type v15 = *(unsigned __int8 *)(a1 + 79);
        }
        else {
          std::string::size_type v15 = *(void *)(a1 + 64);
        }
        double v16 = std::string::append(&v55, v14, v15);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v16->__r_.__value_.__l + 2);
        *(_OWORD *)long long __p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        int v18 = __p;
        if (__p[23] < 0) {
          int v18 = *(unsigned char **)__p;
        }
        unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 3) + 1;
        LODWORD(v55.__r_.__value_.__l.__data_) = 136382211;
        *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        WORD2(v55.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = *(void *)&v44[8];
        HIWORD(v55.__r_.__value_.__r.__words[2]) = 2049;
        uint64_t v56 = *(void *)&v44[16];
        __int16 v57 = 2049;
        uint64_t v58 = *(void *)&v44[32];
        __int16 v59 = 2049;
        uint64_t v60 = *(void *)&v44[24];
        __int16 v61 = 2049;
        unint64_t v62 = v19;
        __int16 v63 = 2049;
        uint64_t v64 = *(void *)v44;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "FenceCal: Adding score, fence, %{private}20s, score, %{private}.8lf, min, %{private}.8lf, avg, %{private}.8lf, max, %{private}.8lf, scores, %{private}lu, aps, %{private}zu", (uint8_t *)&v55, 0x48u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v55, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        sub_100918454((const void **)(a1 + 32), &v43);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v40 = &v43;
        }
        else {
          __int16 v40 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 3) + 1;
        *(_DWORD *)long long __p = 136382211;
        *(void *)&__p[4] = v40;
        *(_WORD *)&unsigned char __p[12] = 2049;
        *(void *)&__p[14] = *(void *)&v44[8];
        *(_WORD *)&__p[22] = 2049;
        uint64_t v46 = *(void *)&v44[16];
        __int16 v47 = 2049;
        uint64_t v48 = *(void *)&v44[32];
        __int16 v49 = 2049;
        uint64_t v50 = *(void *)&v44[24];
        __int16 v51 = 2049;
        unint64_t v52 = v41;
        __int16 v53 = 2049;
        uint64_t v54 = *(void *)v44;
        __int16 v42 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::addScore()", "%s\n", (const char *)v42);
        if (v42 != &v55) {
          free(v42);
        }
      }
    }
    unint64_t v20 = *(void *)(a1 + 376);
    unint64_t v21 = *(void *)(a1 + 384);
    if (v20 >= v21)
    {
      uint64_t v26 = *(void *)(a1 + 368);
      unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v26) >> 3);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0x666666666666666) {
        sub_1001D7FD4();
      }
      unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - v26) >> 3);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x333333333333333) {
        unint64_t v30 = 0x666666666666666;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30) {
        double v31 = (char *)sub_1002E5328(a1 + 384, v30);
      }
      else {
        double v31 = 0;
      }
      uint64_t v32 = &v31[40 * v27];
      double v33 = &v31[40 * v30];
      long long v34 = *(_OWORD *)&v44[16];
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v44;
      *((_OWORD *)v32 + 1) = v34;
      *((void *)v32 + 4) = *(void *)&v44[32];
      uint64_t v23 = v32 + 40;
      int v36 = *(char **)(a1 + 368);
      double v35 = *(char **)(a1 + 376);
      if (v35 != v36)
      {
        do
        {
          long long v37 = *(_OWORD *)(v35 - 40);
          long long v38 = *(_OWORD *)(v35 - 24);
          *((void *)v32 - 1) = *((void *)v35 - 1);
          *(_OWORD *)(v32 - 24) = v38;
          *(_OWORD *)(v32 - 40) = v37;
          v32 -= 40;
          v35 -= 40;
        }
        while (v35 != v36);
        double v35 = *(char **)(a1 + 368);
      }
      *(void *)(a1 + 368) = v32;
      *(void *)(a1 + 376) = v23;
      *(void *)(a1 + 384) = v33;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      long long v22 = *(_OWORD *)&v44[16];
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v44;
      *(_OWORD *)(v20 + 16) = v22;
      *(void *)(v20 + 32) = *(void *)&v44[32];
      uint64_t v23 = (char *)(v20 + 40);
    }
    *(void *)(a1 + 376) = v23;
  }
  return v5 != v6;
}

void sub_100CBECD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CBECFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  double v7 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    sub_100C8C864(a3);
    uint64_t v9 = *(void *)(a3 + 72);
    uint64_t v8 = *(void *)(a3 + 80);
    double v10 = sub_100044A78(a3);
    double v11 = __p;
    *(_DWORD *)uint64_t buf = 136381699;
    if (v244[9] < 0) {
      double v11 = *(unsigned char **)__p;
    }
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2049;
    *(void *)&unsigned char buf[24] = v8;
    *(_WORD *)&uint8_t buf[32] = 2049;
    *(double *)&buf[34] = v10;
    *(_WORD *)&buf[42] = 1025;
    *(_DWORD *)&buf[44] = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "FenceCal: start calculate fence, %{private}-24s, C, center, %{private}.8lf, %{private}.8lf, radius, %{private}.8lf, isMonitorForExit, %{private}d", buf, 0x30u);
    if ((v244[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    sub_100C8C864(a3);
    int v196 = v246[23];
    long long v197 = *(unsigned char **)v246;
    uint64_t v199 = *(void *)(a3 + 72);
    uint64_t v198 = *(void *)(a3 + 80);
    double v200 = sub_100044A78(a3);
    int v201 = v246;
    *(_DWORD *)long long __p = 136381699;
    if (v196 < 0) {
      int v201 = v197;
    }
    *(void *)&__p[4] = v201;
    *(_WORD *)&unsigned char __p[12] = 2049;
    *(void *)__int16 v244 = v199;
    *(_WORD *)&v244[8] = 2049;
    *(void *)&v244[10] = v198;
    *(_WORD *)&v244[18] = 2049;
    *(double *)&v244[20] = v200;
    *(_WORD *)&v244[28] = 1025;
    *(_DWORD *)&v244[30] = a4;
    uint64_t v202 = (char *)_os_log_send_and_compose_impl();
    if ((v246[23] & 0x80000000) != 0) {
      operator delete(*(void **)v246);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v202);
    if (v202 != buf) {
      free(v202);
    }
  }
  sub_100A0D0E4((uint64_t)buf);
  memset(v255, 0, sizeof(v255));
  long long v254 = 0u;
  int v256 = -1;
  sub_1001AC054(a1 + 32, (long long *)buf);
  uint64_t v12 = a1 + 288;
  sub_100A0D280(a1 + 280, *(void **)(a1 + 288));
  uint64_t v13 = v250;
  *(void *)(a1 + 280) = v249;
  *(void *)(a1 + 288) = v13;
  uint64_t v14 = v251;
  *(void *)(a1 + 296) = v251;
  if (v14)
  {
    *(void *)(v13 + 16) = v12;
    double v249 = &v250;
    uint64_t v250 = 0;
    uint64_t v251 = 0;
  }
  else
  {
    *(void *)(a1 + 280) = v12;
  }
  long long v15 = *(_OWORD *)v253;
  *(_OWORD *)(a1 + 304) = v252;
  *(_OWORD *)(a1 + 320) = v15;
  *(void *)(a1 + 333) = *(void *)&v253[13];
  double v16 = (void *)(a1 + 344);
  long long v17 = *(void **)(a1 + 344);
  if (v17)
  {
    *(void *)(a1 + 352) = v17;
    operator delete(v17);
    *double v16 = 0;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
  }
  double v233 = (char **)(a1 + 344);
  *(_OWORD *)double v16 = v254;
  *(void *)(a1 + 360) = v255[0];
  v255[0] = 0;
  long long v254 = 0uLL;
  int v18 = *(void **)(a1 + 368);
  if (v18)
  {
    *(void *)(a1 + 376) = v18;
    operator delete(v18);
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 384) = 0;
    int v18 = (void *)v254;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)&v255[1];
  *(void *)(a1 + 384) = v255[3];
  memset(&v255[1], 0, 24);
  *(_DWORD *)(a1 + 392) = v256;
  if (v18)
  {
    *((void *)&v254 + 1) = v18;
    operator delete(v18);
  }
  sub_100A0D1F4((uint64_t)buf);
  *(void *)(a1 + 456) = *(void *)(a1 + 448);
  *(unsigned char *)(a1 + 476) = a4;
  if (a4) {
    int v19 = 4;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(a1 + 480) = v19;
  sub_100CC0D4C(a1 + 32, a3);
  unsigned int v20 = *sub_10114344C();
  double v21 = sub_100044A78(a3);
  *(void *)(a1 + 400) = *(void *)(a3 + 72);
  *(void *)(a1 + 408) = *(void *)(a3 + 80);
  long long v22 = sub_10114344C();
  if (a4)
  {
    double v21 = v21 + *((double *)v22 + 2);
  }
  else if (v21 >= *((double *)v22 + 1))
  {
    double v21 = v21 - *((double *)sub_10114344C() + 2);
  }
  if (v21 < *((double *)sub_10114344C() + 4))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    uint64_t v23 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      sub_100C8C864(a3);
      int v24 = buf[23];
      __int16 v25 = *(unsigned char **)buf;
      uint64_t v26 = sub_10114344C();
      unint64_t v27 = buf;
      uint64_t v28 = *((void *)v26 + 4);
      if (v24 < 0) {
        unint64_t v27 = v25;
      }
      *(_DWORD *)long long __p = 136380931;
      *(void *)&__p[4] = v27;
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(void *)__int16 v244 = v28;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "FenceCal: limit ePNO min fence size, fence, %{private}s, minRadius, %{private}.1lf", __p, 0x16u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      sub_100C8C864(a3);
      int v211 = v244[9];
      long long v212 = *(unsigned char **)__p;
      id v213 = sub_10114344C();
      id v214 = __p;
      uint64_t v215 = *((void *)v213 + 4);
      if (v211 < 0) {
        id v214 = v212;
      }
      *(_DWORD *)__int16 v246 = 136380931;
      *(void *)&v246[4] = v214;
      *(_WORD *)&v246[12] = 2049;
      *(void *)&v246[14] = v215;
      id v216 = (char *)_os_log_send_and_compose_impl();
      if ((v244[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v216);
      if (v216 != buf) {
        free(v216);
      }
    }
    double v21 = *((double *)sub_10114344C() + 4);
  }
  double v29 = v21;
  if (v21 >= *((double *)sub_10114344C() + 3))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    unint64_t v30 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      sub_100C8C864(a3);
      int v31 = buf[23];
      uint64_t v32 = *(unsigned char **)buf;
      double v33 = sub_10114344C();
      long long v34 = buf;
      uint64_t v35 = *((void *)v33 + 3);
      if (v31 < 0) {
        long long v34 = v32;
      }
      *(_DWORD *)long long __p = 136380931;
      *(void *)&__p[4] = v34;
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(void *)__int16 v244 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "FenceCal: limit ePNO max fence size, fence, %{private}s, maxRadius, %{private}.1lf", __p, 0x16u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      sub_100C8C864(a3);
      int v217 = v244[9];
      id v218 = *(unsigned char **)__p;
      id v219 = sub_10114344C();
      id v220 = __p;
      uint64_t v221 = *((void *)v219 + 3);
      if (v217 < 0) {
        id v220 = v218;
      }
      *(_DWORD *)__int16 v246 = 136380931;
      *(void *)&v246[4] = v220;
      *(_WORD *)&v246[12] = 2049;
      *(void *)&v246[14] = v221;
      id v222 = (char *)_os_log_send_and_compose_impl();
      if ((v244[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v222);
      if (v222 != buf) {
        free(v222);
      }
    }
    double v29 = *((double *)sub_10114344C() + 3);
  }
  double v36 = *(double *)(a1 + 400);
  __double2 v37 = __sincos_stret(v36 * 0.0174532925);
  double v38 = sqrt(v37.__sinval * -0.00669437999 * v37.__sinval + 1.0);
  double v39 = v29 / (v37.__cosval * (6378137.0 / v38 + 0.0)) / 0.0174532925;
  double v40 = v29 / (6335439.33 / (v38 * (v38 * v38)) + 0.0) / 0.0174532925;
  double v41 = v36 + v40;
  double v42 = *(double *)(a1 + 408);
  double v43 = v42 - v39;
  *(double *)(a1 + 416) = v36 + v40;
  *(double *)(a1 + 424) = v42 - v39;
  double v44 = v36 - v40;
  double v45 = v42 + v39;
  *(double *)(a1 + 432) = v44;
  *(double *)(a1 + 440) = v45;
  if (v20 <= 1) {
    unsigned int v46 = 1;
  }
  else {
    unsigned int v46 = v20;
  }
  double v239 = vabdd_f64(v41, v44) / (double)v46;
  unsigned int v240 = v46;
  if (v239 <= 0.0 || (double v238 = vabdd_f64(v43, v45) / (double)v46, v238 <= 0.0))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    __int16 v47 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      sub_100C8C864(a3);
      int v48 = v244[9];
      __int16 v49 = *(unsigned char **)__p;
      uint64_t v51 = *(void *)(a3 + 72);
      uint64_t v50 = *(void *)(a3 + 80);
      double v52 = sub_100044A78(a3);
      __int16 v53 = __p;
      *(_DWORD *)uint64_t buf = 136381443;
      if (v48 < 0) {
        __int16 v53 = v49;
      }
      *(void *)&uint8_t buf[4] = v53;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&buf[14] = v51;
      *(_WORD *)&buf[22] = 2049;
      *(void *)&unsigned char buf[24] = v50;
      *(_WORD *)&uint8_t buf[32] = 2049;
      *(double *)&buf[34] = v52;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "Invalid fence name, %{private}s, latitude, %{private}lf, longitude, %{private}lf, radius, %{private}lf", buf, 0x2Au);
      if ((v244[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    BOOL v54 = sub_10013D1A0(115, 0);
    unsigned int v46 = v240;
    double v238 = 0.00001;
    if (v54)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      sub_100C8C864(a3);
      int v223 = v246[23];
      id v224 = *(unsigned char **)v246;
      uint64_t v226 = *(void *)(a3 + 72);
      uint64_t v225 = *(void *)(a3 + 80);
      double v227 = sub_100044A78(a3);
      id v228 = v246;
      *(_DWORD *)long long __p = 136381443;
      if (v223 < 0) {
        id v228 = v224;
      }
      *(void *)&__p[4] = v228;
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(void *)__int16 v244 = v226;
      *(_WORD *)&v244[8] = 2049;
      *(void *)&v244[10] = v225;
      *(_WORD *)&v244[18] = 2049;
      *(double *)&v244[20] = v227;
      uint64_t v229 = (char *)_os_log_send_and_compose_impl();
      if ((v246[23] & 0x80000000) != 0) {
        operator delete(*(void **)v246);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v229);
      if (v229 != buf) {
        free(v229);
      }
      double v239 = 0.00001;
      unsigned int v46 = v240;
    }
    else
    {
      double v239 = 0.00001;
    }
  }
  double v235 = v29;
  unsigned int v55 = 0;
  uint64_t v56 = (char **)(a1 + 448);
  do
  {
    unsigned int v57 = 0;
    int v58 = v55 * v46;
    do
    {
      double v59 = *(double *)(a1 + 416) + -(double)v55 * v239;
      double v60 = *(double *)(a1 + 424) + (double)v57 * v238;
      double v61 = v59 - v239;
      double v62 = v238 + v60;
      double v63 = (v59 + v59 - v239) * 0.5;
      double v64 = (v60 + v238 + v60) * 0.5;
      double v65 = sub_100CBE5DC(v63, v64, *(double *)(a1 + 400), *(double *)(a1 + 408));
      if (v65 / v235 < 1.0) {
        double v66 = 1.0 - v65 / v235;
      }
      else {
        double v66 = 0.0;
      }
      int v67 = (int)(v66 * 4.5);
      if (byte_102473F88 && byte_10248AAE0)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        __int16 v68 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 67110400;
          *(_DWORD *)&uint8_t buf[4] = v55;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v57;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v57 + v58;
          *(_WORD *)&unsigned char buf[20] = 2048;
          *(double *)&buf[22] = v65;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&uint8_t buf[32] = (int)(v66 * 4.5);
          *(_WORD *)&unsigned char buf[36] = 2048;
          *(double *)&buf[38] = v66;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "FenceCal: tile, y, %d, x, %d, index, %d, distanceFromCenter, %5.5lf, maxApsPerTile, %d, ApsFactor, %.5lf", buf, 0x2Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          *(_DWORD *)long long __p = 67110400;
          *(_DWORD *)&__p[4] = v55;
          *(_WORD *)&__p[8] = 1024;
          *(_DWORD *)&__p[10] = v57;
          *(_WORD *)__int16 v244 = 1024;
          *(_DWORD *)&v244[2] = v57 + v58;
          *(_WORD *)&v244[6] = 2048;
          *(double *)&v244[8] = v65;
          *(_WORD *)&v244[16] = 1024;
          *(_DWORD *)&v244[18] = (int)(v66 * 4.5);
          *(_WORD *)&v244[22] = 2048;
          *(double *)&v244[24] = v66;
          uint64_t v84 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v84);
          if (v84 != buf) {
            free(v84);
          }
        }
      }
      unint64_t v69 = *(void *)(a1 + 456);
      unint64_t v70 = *(void *)(a1 + 464);
      if (v69 >= v70)
      {
        uint64_t v72 = (uint64_t)(v69 - (void)*v56) >> 6;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 58) {
          sub_1001D7FD4();
        }
        uint64_t v74 = v70 - (void)*v56;
        if (v74 >> 5 > v73) {
          unint64_t v73 = v74 >> 5;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v75 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75) {
          long long v76 = (char *)sub_10017EAF0(a1 + 464, v75);
        }
        else {
          long long v76 = 0;
        }
        unint64_t v77 = (double *)&v76[64 * v72];
        double *v77 = v59;
        v77[1] = v60;
        v77[2] = v61;
        v77[3] = v62;
        v77[4] = v63;
        v77[5] = v64;
        *((_DWORD *)v77 + 12) = 0;
        *((_DWORD *)v77 + 13) = v67;
        v77[7] = v65;
        __int16 v79 = *(char **)(a1 + 448);
        uint64_t v78 = *(char **)(a1 + 456);
        long long v80 = v77;
        if (v78 != v79)
        {
          do
          {
            long long v81 = *((_OWORD *)v78 - 4);
            long long v82 = *((_OWORD *)v78 - 3);
            long long v83 = *((_OWORD *)v78 - 1);
            *((_OWORD *)v80 - 2) = *((_OWORD *)v78 - 2);
            *((_OWORD *)v80 - 1) = v83;
            *((_OWORD *)v80 - 4) = v81;
            *((_OWORD *)v80 - 3) = v82;
            v80 -= 8;
            v78 -= 64;
          }
          while (v78 != v79);
          uint64_t v78 = *v56;
        }
        double v71 = (char *)(v77 + 8);
        *(void *)(a1 + 448) = v80;
        *(void *)(a1 + 456) = v77 + 8;
        *(void *)(a1 + 464) = &v76[64 * v75];
        if (v78) {
          operator delete(v78);
        }
      }
      else
      {
        *(double *)unint64_t v69 = v59;
        *(double *)(v69 + 8) = v60;
        *(double *)(v69 + 16) = v61;
        *(double *)(v69 + 24) = v62;
        *(double *)(v69 + 32) = v63;
        *(double *)(v69 + 40) = v64;
        *(_DWORD *)(v69 + 48) = 0;
        *(_DWORD *)(v69 + 52) = v67;
        double v71 = (char *)(v69 + 64);
        *(double *)(v69 + 56) = v65;
      }
      *(void *)(a1 + 456) = v71;
      ++v57;
    }
    while (v57 != v240);
    ++v55;
    unsigned int v46 = v240;
  }
  while (v55 != v240);
  uint64_t v86 = *(void *)(a1 + 8);
  uint64_t v85 = *(void *)(a1 + 16);
  double v87 = (void **)(a1 + 8);
  if (v86 == v85 || a5)
  {
    sub_100C8D5B4(a3);
    sub_101451318(a2, buf);
    uint64_t v88 = *v87;
    if (*v87)
    {
      *(void *)(a1 + 16) = v88;
      operator delete(v88);
      *double v87 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v89 = *(void *)buf;
    *(void *)(a1 + 8) = *(void *)buf;
    uint64_t v90 = *(void *)&buf[8];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&buf[8];
    uint64_t v91 = v90;
    if (v89 != v90)
    {
      while (sub_100D550A4(*(_DWORD *)(v89 + 52)))
      {
        v89 += 96;
        if (v89 == v91)
        {
          uint64_t v89 = v91;
          goto LABEL_108;
        }
      }
      if (v89 != v91)
      {
        for (uint64_t i = v89 + 96; i != v91; i += 96)
        {
          if (sub_100D550A4(*(_DWORD *)(i + 52)))
          {
            long long v93 = *(_OWORD *)(i + 16);
            *(_OWORD *)uint64_t v89 = *(_OWORD *)i;
            *(_OWORD *)(v89 + 16) = v93;
            long long v94 = *(_OWORD *)(i + 32);
            long long v95 = *(_OWORD *)(i + 48);
            long long v96 = *(_OWORD *)(i + 80);
            *(_OWORD *)(v89 + 64) = *(_OWORD *)(i + 64);
            *(_OWORD *)(v89 + 80) = v96;
            *(_OWORD *)(v89 + 32) = v94;
            *(_OWORD *)(v89 + 48) = v95;
            v89 += 96;
          }
        }
      }
    }
LABEL_108:
    unint64_t v97 = *(void *)(a1 + 8);
    if (v89 != *(void *)(a1 + 16)) {
      *(void *)(a1 + 16) = v89;
    }
    unint64_t v98 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - v97) >> 5));
    if (v89 == v97) {
      uint64_t v99 = 0;
    }
    else {
      uint64_t v99 = v98;
    }
    sub_100CC6A7C(v97, (double *)v89, v99, 1);
    uint64_t v86 = *(void *)(a1 + 8);
    uint64_t v85 = *(void *)(a1 + 16);
  }
  if (v86 != v85)
  {
    double v100 = *(double *)(a1 + 416);
    double v101 = *(double *)(a1 + 424);
    double v102 = *(double *)(a1 + 432);
    double v103 = *(double *)(a1 + 440);
    while (1)
    {
      double v104 = *(double *)(v86 + 8);
      if (v104 > v100 || v104 < v102) {
        break;
      }
      double v106 = *(double *)(v86 + 16);
      if (v106 > v103 || v106 < v101) {
        break;
      }
      v86 += 96;
      if (v86 == v85) {
        goto LABEL_141;
      }
    }
    if (v86 != v85)
    {
      uint64_t v108 = v86 + 96;
      if (v86 + 96 != v85)
      {
        do
        {
          double v109 = *(double *)(v108 + 8);
          if (v109 <= v100 && v109 >= v102)
          {
            double v111 = *(double *)(v108 + 16);
            if (v111 <= v103 && v111 >= v101)
            {
              long long v113 = *(_OWORD *)(v108 + 16);
              *(_OWORD *)uint64_t v86 = *(_OWORD *)v108;
              *(_OWORD *)(v86 + 16) = v113;
              long long v114 = *(_OWORD *)(v108 + 32);
              long long v115 = *(_OWORD *)(v108 + 48);
              long long v116 = *(_OWORD *)(v108 + 80);
              *(_OWORD *)(v86 + 64) = *(_OWORD *)(v108 + 64);
              *(_OWORD *)(v86 + 80) = v116;
              *(_OWORD *)(v86 + 32) = v114;
              *(_OWORD *)(v86 + 48) = v115;
              v86 += 96;
            }
          }
          v108 += 96;
        }
        while (v108 != v85);
        uint64_t v85 = *(void *)(a1 + 16);
      }
    }
    if (v86 != v85) {
      *(void *)(a1 + 16) = v86;
    }
  }
LABEL_141:
  sub_1006D825C(a1 + 8);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  CFDateRef v117 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
    *(_DWORD *)uint64_t buf = 134349312;
    *(void *)&uint8_t buf[4] = v118;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a5;
    _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "FenceCal: fetched, %{public}ld, APs, forceFetchingExpectedAps, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    unint64_t v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
    *(_DWORD *)long long __p = 134349312;
    *(void *)&__p[4] = v203;
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)__int16 v244 = a5;
    uint64_t v204 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v204);
    if (v204 != buf) {
      free(v204);
    }
  }
  if (byte_102473F88)
  {
    if (byte_10248AAE0)
    {
      uint64_t v120 = *(void *)(a1 + 8);
      for (uint64_t j = *(void *)(a1 + 16); v120 != j; v120 += 96)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        uint64_t v121 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          CFAbsoluteTimeGetCurrent();
          sub_10106E024(v120);
          double v122 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)long long __p = 136380675;
          *(void *)&__p[4] = v122;
          _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "FenceCal: expectedAp, %{private}s", __p, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          CFAbsoluteTimeGetCurrent();
          sub_10106E024(v120);
          long long v123 = __p;
          if (v244[9] < 0) {
            long long v123 = *(unsigned char **)__p;
          }
          *(_DWORD *)__int16 v246 = 136380675;
          *(void *)&v246[4] = v123;
          id v124 = (char *)_os_log_send_and_compose_impl();
          if ((v244[9] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v124);
          if (v124 != buf) {
            free(v124);
          }
        }
      }
    }
  }
  *(void *)&v246[8] = 0;
  *(void *)&v246[16] = 0;
  *(void *)__int16 v246 = &v246[8];
  unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
  if (v125 <= 0xB3)
  {
    int v126 = 0;
    do
    {
      uint64_t v128 = *(void *)(a1 + 8);
      uint64_t v127 = *(void *)(a1 + 16);
      if (v125 >= 0xAAAAAAAAAAAAAAABLL * ((v127 - v128) >> 5)) {
        break;
      }
      int v236 = v126;
      while (v128 != v127)
      {
        int v129 = (int)(vabdd_f64(*(double *)(v128 + 8), *(double *)(a1 + 416)) / v239);
        int v130 = (int)(vabdd_f64(*(double *)(v128 + 16), *(double *)(a1 + 424)) / v238);
        unint64_t v131 = v130 + v240 * v129;
        uint64_t v132 = *(void *)(a1 + 448);
        if (v131 >= (*(void *)(a1 + 456) - v132) >> 6)
        {
          sub_101A89C74();
          abort_report_np();
          __break(1u);
        }
        *(void *)uint64_t buf = v128;
        if (!*((unsigned char *)sub_100CC8830((uint64_t **)v246, (void *)v128, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 128))
        {
          uint64_t v133 = v132 + (v131 << 6);
          unsigned int v135 = *(_DWORD *)(v133 + 48);
          uint64_t v134 = (_DWORD *)(v133 + 48);
          uint64_t v136 = v134 + 1;
          if (v135 < v134[1])
          {
            if (byte_102473F88 && byte_10248AAE0)
            {
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F18B8);
              }
              log = qword_1024193C8;
              if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
              {
                CFAbsoluteTimeGetCurrent();
                sub_10106E024(v128);
                int v137 = v244[9];
                uint64_t v138 = *(unsigned char **)__p;
                int v234 = *v136;
                v241.__r_.__value_.__r.__words[0] = *(void *)v128;
                sub_10006DE8C(&v242);
                long long v139 = __p;
                if (v137 < 0) {
                  long long v139 = v138;
                }
                id v140 = &v242;
                if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  id v140 = (std::string *)v242.__r_.__value_.__r.__words[0];
                }
                unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
                *(_DWORD *)uint64_t buf = 136316674;
                *(void *)&uint8_t buf[4] = v139;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v234;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&unsigned char buf[20] = v130;
                *(_WORD *)&unsigned char buf[24] = 1024;
                *(_DWORD *)&buf[26] = v129;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&uint8_t buf[32] = v130 + v240 * v129;
                *(_WORD *)&unsigned char buf[36] = 2080;
                *(void *)&buf[38] = v140;
                *(_WORD *)&buf[46] = 2048;
                unint64_t v248 = v141;
                _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu", buf, 0x38u);
                if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v242.__r_.__value_.__l.__data_);
                }
                if ((v244[9] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                }
                CFAbsoluteTimeGetCurrent();
                sub_10106E024(v128);
                int v166 = SHIBYTE(v242.__r_.__value_.__r.__words[2]);
                std::string::size_type v167 = v242.__r_.__value_.__r.__words[0];
                int v168 = *v136;
                sub_10006DE8C(&v241);
                double v169 = &v242;
                if (v166 < 0) {
                  double v169 = (std::string *)v167;
                }
                double v170 = &v241;
                if ((v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  double v170 = (std::string *)v241.__r_.__value_.__r.__words[0];
                }
                unint64_t v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
                *(_DWORD *)long long __p = 136316674;
                *(void *)&__p[4] = v169;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)__int16 v244 = v168;
                *(_WORD *)&v244[4] = 1024;
                *(_DWORD *)&v244[6] = v130;
                *(_WORD *)&v244[10] = 1024;
                *(_DWORD *)&v244[12] = v129;
                *(_WORD *)&v244[16] = 1024;
                *(_DWORD *)&v244[18] = v130 + v240 * v129;
                *(_WORD *)&v244[22] = 2080;
                *(void *)&v244[24] = v170;
                *(_WORD *)&v244[32] = 2048;
                unint64_t v245 = v171;
                uint64_t v172 = (char *)_os_log_send_and_compose_impl();
                if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v241.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v242.__r_.__value_.__l.__data_);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v172);
                if (v172 != buf) {
                  free(v172);
                }
              }
            }
            ++*v134;
            *(void *)uint64_t buf = v128;
            *((unsigned char *)sub_100CC8830((uint64_t **)v246, (void *)v128, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 128) = 1;
            id v142 = *(_OWORD **)(a1 + 352);
            unint64_t v143 = *(void *)(a1 + 360);
            if ((unint64_t)v142 >= v143)
            {
              unint64_t v149 = 0xAAAAAAAAAAAAAAABLL * (((char *)v142 - *v233) >> 5);
              unint64_t v150 = v149 + 1;
              if (v149 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_1001D7FD4();
              }
              unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - (void)*v233) >> 5);
              if (2 * v151 > v150) {
                unint64_t v150 = 2 * v151;
              }
              if (v151 >= 0x155555555555555) {
                unint64_t v152 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v152 = v150;
              }
              if (v152) {
                double v153 = (char *)sub_100642EA8(a1 + 360, v152);
              }
              else {
                double v153 = 0;
              }
              long long v154 = &v153[96 * v149];
              long long v155 = *(_OWORD *)(v128 + 16);
              *(_OWORD *)long long v154 = *(_OWORD *)v128;
              *((_OWORD *)v154 + 1) = v155;
              long long v156 = *(_OWORD *)(v128 + 32);
              long long v157 = *(_OWORD *)(v128 + 48);
              long long v158 = *(_OWORD *)(v128 + 80);
              *((_OWORD *)v154 + 4) = *(_OWORD *)(v128 + 64);
              *((_OWORD *)v154 + 5) = v158;
              *((_OWORD *)v154 + 2) = v156;
              *((_OWORD *)v154 + 3) = v157;
              double v160 = *(char **)(a1 + 344);
              uint64_t v159 = *(char **)(a1 + 352);
              long long v161 = v154;
              if (v159 != v160)
              {
                do
                {
                  long long v162 = *((_OWORD *)v159 - 5);
                  *((_OWORD *)v161 - 6) = *((_OWORD *)v159 - 6);
                  *((_OWORD *)v161 - 5) = v162;
                  long long v163 = *((_OWORD *)v159 - 4);
                  long long v164 = *((_OWORD *)v159 - 3);
                  long long v165 = *((_OWORD *)v159 - 1);
                  *((_OWORD *)v161 - 2) = *((_OWORD *)v159 - 2);
                  *((_OWORD *)v161 - 1) = v165;
                  *((_OWORD *)v161 - 4) = v163;
                  *((_OWORD *)v161 - 3) = v164;
                  v161 -= 96;
                  v159 -= 96;
                }
                while (v159 != v160);
                uint64_t v159 = *v233;
              }
              long long v148 = v154 + 96;
              *(void *)(a1 + 344) = v161;
              *(void *)(a1 + 352) = v154 + 96;
              *(void *)(a1 + 360) = &v153[96 * v152];
              if (v159) {
                operator delete(v159);
              }
            }
            else
            {
              long long v144 = *(_OWORD *)(v128 + 16);
              *id v142 = *(_OWORD *)v128;
              v142[1] = v144;
              long long v145 = *(_OWORD *)(v128 + 32);
              long long v146 = *(_OWORD *)(v128 + 48);
              long long v147 = *(_OWORD *)(v128 + 80);
              v142[4] = *(_OWORD *)(v128 + 64);
              v142[5] = v147;
              v142[2] = v145;
              v142[3] = v146;
              long long v148 = v142 + 6;
            }
            *(void *)(a1 + 352) = v148;
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v148 - *(void *)(a1 + 344)) >> 5) >= 0xB4)
            {
              sub_100CBE6BC(a1);
              break;
            }
          }
        }
        v128 += 96;
      }
      sub_100CBE6BC(a1);
      int v173 = (v236 + 1) > 9 ? v236 + 1 : 1;
      uint64_t v174 = *(void *)(a1 + 448);
      uint64_t v175 = *(void *)(a1 + 456);
      while (v174 != v175)
      {
        *(_DWORD *)(v174 + 52) += v173;
        v174 += 64;
      }
      unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
      int v126 = v236 + 1;
    }
    while (v125 <= 0xB3);
  }
  sub_1006D825C((uint64_t)v233);
  sub_100CC0E3C(a1 + 368);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  uint64_t v176 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v178 = *(void *)(a1 + 344);
    uint64_t v177 = *(void *)(a1 + 352);
    uint64_t v180 = *(void *)(a1 + 8);
    uint64_t v179 = *(void *)(a1 + 16);
    sub_100C8C864(a3);
    *(_DWORD *)uint64_t buf = 134284035;
    *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v177 - v178) >> 5);
    double v181 = v244[9] >= 0 ? __p : *(unsigned char **)__p;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((v179 - v180) >> 5);
    *(_WORD *)&buf[22] = 2081;
    *(void *)&unsigned char buf[24] = v181;
    _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEBUG, "FenceCal: chosen, %{private}lu, expected, %{private}lu, fence, %{private}s", buf, 0x20u);
    if ((v244[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    uint64_t v206 = *(void *)(a1 + 344);
    uint64_t v205 = *(void *)(a1 + 352);
    uint64_t v208 = *(void *)(a1 + 8);
    uint64_t v207 = *(void *)(a1 + 16);
    sub_100C8C864(a3);
    *(_DWORD *)long long __p = 134284035;
    *(void *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * ((v205 - v206) >> 5);
    if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v209 = &v242;
    }
    else {
      int v209 = (std::string *)v242.__r_.__value_.__r.__words[0];
    }
    *(_WORD *)&unsigned char __p[12] = 2049;
    *(void *)__int16 v244 = 0xAAAAAAAAAAAAAAABLL * ((v207 - v208) >> 5);
    *(_WORD *)&v244[8] = 2081;
    *(void *)&v244[10] = v209;
    double v210 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v210);
    if (v210 != buf) {
      free(v210);
    }
  }
  if (byte_102473F88)
  {
    if (byte_10248AAE0)
    {
      uint64_t v182 = *(void *)(a1 + 448);
      uint64_t v183 = *(void *)(a1 + 456);
      if (v182 != v183)
      {
        uint64_t v184 = 0;
        do
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          double v185 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            int v186 = *(_DWORD *)(v182 + 48);
            unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
            double v188 = (*(double *)v182 + *(double *)(v182 + 16)) * 0.5;
            double v189 = (*(double *)(v182 + 8) + *(double *)(v182 + 24)) * 0.5;
            *(_DWORD *)uint64_t buf = 134219008;
            *(void *)&uint8_t buf[4] = v184;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v186;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&unsigned char buf[20] = v187;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(double *)&buf[30] = v188;
            *(_WORD *)&buf[38] = 2048;
            *(double *)&buf[40] = v189;
            _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_DEBUG, "FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF", buf, 0x30u);
            ++v184;
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            int v190 = *(_DWORD *)(v182 + 48);
            unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
            double v192 = (*(double *)v182 + *(double *)(v182 + 16)) * 0.5;
            double v193 = (*(double *)(v182 + 8) + *(double *)(v182 + 24)) * 0.5;
            *(_DWORD *)long long __p = 134219008;
            *(void *)&__p[4] = v184;
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)__int16 v244 = v190;
            *(_WORD *)&v244[4] = 2048;
            *(void *)&v244[6] = v191;
            *(_WORD *)&v244[14] = 2048;
            *(double *)&v244[16] = v192;
            *(_WORD *)&v244[24] = 2048;
            *(double *)&v244[26] = v193;
            uint64_t v194 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)", "%s\n", v194);
            if (v194 != buf) {
              free(v194);
            }
            ++v184;
          }
          v182 += 64;
        }
        while (v182 != v183);
      }
    }
  }
  sub_1000F5BB0((uint64_t)v246, *(void **)&v246[8]);
  return 1;
}

void sub_100CC0C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CC0D4C(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  long long v7 = *(_OWORD *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 168);
  uint64_t v9 = *(void *)(a2 + 181);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 181) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  double v10 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = *(id *)(a2 + 216);

  if (a1 != a2)
  {
    sub_10027C3B4((char *)(a1 + 224), *(char **)(a2 + 224), *(void *)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 4);
    sub_100CC66AC((uint64_t **)(a1 + 248), *(long long **)(a2 + 248), (long long *)(a2 + 256));
  }
  long long v11 = *(_OWORD *)(a2 + 272);
  long long v12 = *(_OWORD *)(a2 + 288);
  *(void *)(a1 + 301) = *(void *)(a2 + 301);
  *(_OWORD *)(a1 + 272) = v11;
  *(_OWORD *)(a1 + 288) = v12;
  return a1;
}

void sub_100CC0E3C(uint64_t a1)
{
  uint64_t v2 = *(char **)a1;
  int64x2_t v3 = *(int64x2_t *)(a1 + 8);
  int64x2_t v4 = vshrq_n_s64(vsubq_s64(v3, vdupq_n_s64((unint64_t)v2)), 3uLL);
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * v4.i64[0];
  unint64_t v6 = v5;
  if (0xCCCCCCCCCCCCCCCDLL * v4.i64[1] <= v5) {
    return;
  }
  if ((char *)v3.i64[0] == v2)
  {
    long long v11 = 0;
    uint64_t v9 = 40 * v5;
    goto LABEL_8;
  }
  long long v7 = (char *)sub_1002E5328(a1 + 16, v5);
  uint64_t v2 = *(char **)a1;
  long long v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[40 * v6];
  long long v11 = &v7[40 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    long long v13 = *(_OWORD *)(v8 - 40);
    long long v14 = *(_OWORD *)(v8 - 24);
    *(void *)(v12 - 8) = *((void *)v8 - 1);
    *(_OWORD *)(v12 - 24) = v14;
    *(_OWORD *)(v12 - 40) = v13;
    v12 -= 40;
    v8 -= 40;
  }
  while (v8 != v2);
  uint64_t v2 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t sub_100CC0F4C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, std::string::size_type a8)
{
  std::string::size_type v42 = *(void *)a1;
  int v15 = *(_DWORD *)(a1 + 52);
  unint64_t v16 = *(void *)(a4 + 16) + *(void *)(a3 + 16);
  if (a2 && sub_10106EB0C(a1))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    long long v17 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      CFAbsoluteTimeGetCurrent();
      sub_10106E024(a1);
      int v18 = v65 >= 0 ? __p : *(unsigned char **)__p;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "FenceCal: avoid adding moving AP as an exit AP, %{private}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v65) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      CFAbsoluteTimeGetCurrent();
      sub_10106E024(a1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v43.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      unsigned int v20 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, BOOL, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)", "%s\n", v20);
      if (v20 != __p) {
        free(v20);
      }
    }
    goto LABEL_42;
  }
  uint64_t v21 = 0;
  if (v16 < a5 && (v15 - 166) >= 0xFFFFFF5B && ((1 << v15) & a7) != 0)
  {
    if (!sub_100D550A4(v15))
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      uint64_t v23 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        CFAbsoluteTimeGetCurrent();
        sub_10106E024(a1);
        int v24 = v65 >= 0 ? __p : *(unsigned char **)__p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a8;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "FenceCal: adding non-2GHz, reason: %{private}s, %{private}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(v65) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        CFAbsoluteTimeGetCurrent();
        sub_10106E024(a1);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v39 = &buf;
        }
        else {
          double v39 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        LODWORD(v43.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = a8;
        WORD2(v43.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v43.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v39;
        double v40 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, BOOL, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)", "%s\n", v40);
        if (v40 != __p) {
          free(v40);
        }
      }
    }
    __int16 v25 = sub_100529674(a4, &v42);
    if (a2)
    {
      if ((void *)(a4 + 8) != v25) {
        sub_1006FF744((uint64_t **)a4, &v42);
      }
      sub_10052952C((uint64_t **)a4, &v42, &v42, (_OWORD *)a1);
      if ((void *)(a3 + 8) != sub_100529674(a3, &v42)) {
        sub_1006FF744((uint64_t **)a3, &v42);
      }
    }
    else
    {
      if ((void *)(a4 + 8) != v25)
      {
LABEL_42:
        uint64_t v21 = 0;
        goto LABEL_47;
      }
      sub_100529674(a6, &v42);
      if ((void *)(a3 + 8) != sub_100529674(a3, &v42)) {
        sub_1006FF744((uint64_t **)a3, &v42);
      }
      sub_10052952C((uint64_t **)a3, &v42, &v42, (_OWORD *)a1);
    }
    uint64_t v21 = 1;
  }
LABEL_47:
  if (byte_102473F88)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    uint64_t v26 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      v43.__r_.__value_.__r.__words[0] = *(void *)a1;
      sub_10006DE8C(&buf);
      unint64_t v27 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      uint64_t v28 = *(void *)(a1 + 32);
      int v29 = *(_DWORD *)(a1 + 52);
      uint64_t v30 = *(void *)(a1 + 8);
      uint64_t v31 = *(void *)(a1 + 16);
      *(_DWORD *)long long __p = 136317698;
      *(void *)&__p[4] = a8;
      __int16 v62 = 1024;
      int v63 = a7;
      __int16 v64 = 1024;
      int v65 = a2;
      __int16 v66 = 2048;
      unint64_t v67 = v16;
      __int16 v68 = 1024;
      unsigned int v69 = a5;
      __int16 v70 = 2080;
      double v71 = v27;
      __int16 v72 = 2048;
      uint64_t v73 = v28;
      __int16 v74 = 1024;
      int v75 = v29;
      __int16 v76 = 2048;
      uint64_t v77 = v30;
      __int16 v78 = 2048;
      uint64_t v79 = v31;
      __int16 v80 = 1024;
      int v81 = v21;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d", __p, 0x5Cu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      sub_10006DE8C(&v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v33 = &v43;
      }
      else {
        double v33 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      uint64_t v34 = *(void *)(a1 + 32);
      int v35 = *(_DWORD *)(a1 + 52);
      uint64_t v36 = *(void *)(a1 + 8);
      uint64_t v37 = *(void *)(a1 + 16);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136317698;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a8;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a7;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = a2;
      __int16 v45 = 2048;
      unint64_t v46 = v16;
      __int16 v47 = 1024;
      unsigned int v48 = a5;
      __int16 v49 = 2080;
      uint64_t v50 = v33;
      __int16 v51 = 2048;
      uint64_t v52 = v34;
      __int16 v53 = 1024;
      int v54 = v35;
      __int16 v55 = 2048;
      uint64_t v56 = v36;
      __int16 v57 = 2048;
      uint64_t v58 = v37;
      __int16 v59 = 1024;
      int v60 = v21;
      double v38 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, BOOL, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)", "%s\n", v38);
      if (v38 != __p) {
        free(v38);
      }
    }
  }
  return v21;
}

unint64_t sub_100CC172C(uint64_t *a1, char **a2)
{
  int v4 = 0;
  unint64_t v5 = (float *)*a2;
  a2[1] = *a2;
  unint64_t v6 = a2 + 2;
  do
  {
    if ((unint64_t)v5 >= *v6)
    {
      long long v7 = (float *)*a2;
      uint64_t v8 = ((char *)v5 - *a2) >> 3;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v10 = *v6 - (void)v7;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        uint64_t v12 = (char *)sub_1000DA54C((uint64_t)v6, v11);
        long long v7 = (float *)*a2;
        unint64_t v5 = (float *)a2[1];
      }
      else
      {
        uint64_t v12 = 0;
      }
      long long v13 = &v12[8 * v8];
      *(_DWORD *)long long v13 = v4;
      *((_DWORD *)v13 + 1) = 0;
      long long v14 = v13;
      if (v5 != v7)
      {
        do
        {
          uint64_t v15 = *((void *)v5 - 1);
          v5 -= 2;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v5 != v7);
        long long v7 = (float *)*a2;
      }
      unint64_t v5 = (float *)(v13 + 8);
      *a2 = v14;
      a2[1] = v13 + 8;
      a2[2] = &v12[8 * v11];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v5 = v4;
      v5[1] = 0.0;
      v5 += 2;
    }
    a2[1] = (char *)v5;
    ++v4;
  }
  while (v4 != 166);
  uint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  if (*a1 == v17)
  {
    unint64_t v18 = 0;
    int v20 = 4;
    float v19 = 0.0;
  }
  else
  {
    LODWORD(v18) = 0;
    float v19 = 0.0;
    int v20 = 4;
    do
    {
      if (v20 > *(_DWORD *)(v16 + 496))
      {
        int v21 = 0;
      }
      else
      {
        int v20 = *(_DWORD *)(v16 + 496);
        int v21 = *(_DWORD *)(v16 + 500);
      }
      uint64_t v22 = *(void *)(v16 + 8);
      uint64_t v23 = *(void *)(v16 + 16);
      if (v22 != v23)
      {
        int v24 = (float *)*a2;
        do
        {
          unsigned int v25 = *(_DWORD *)(v22 + 52) & ~(*(int *)(v22 + 52) >> 31);
          if (v25 <= 0xA5)
          {
            v24[2 * v25 + 1] = v24[2 * v25 + 1] + 1.0;
            float v19 = v19 + 1.0;
          }
          v22 += 96;
        }
        while (v22 != v23);
      }
      unint64_t v18 = v21 | v18;
      v16 += 504;
    }
    while (v16 != v17);
  }
  uint64_t v26 = (float *)*a2;
  if (*a2 != (char *)v5)
  {
    unint64_t v27 = (float *)*a2;
    do
    {
      if (v19 > 0.0) {
        v27[1] = v27[1] / v19;
      }
      v27 += 2;
    }
    while (v27 != v5);
  }
  unint64_t v28 = 126 - 2 * __clz(((char *)v5 - (char *)v26) >> 3);
  if (v5 == v26) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  sub_100CC8960(v26, v5, v29, 1);
  uint64_t v30 = (float *)*a2;
  uint64_t v31 = (float *)a2[1];
  if (*a2 == (char *)v31)
  {
    double v33 = 0.0;
  }
  else
  {
    double v32 = v19;
    double v33 = 0.0;
    do
    {
      if (*(int *)v30 >= 1 && sub_100D550A4(*(_DWORD *)v30))
      {
        int v34 = sub_1004BE904(v18);
        int v35 = 1 << *(_DWORD *)v30;
        if ((v35 & v18) == 0 && (v34 < v20 ? (BOOL v36 = *(_DWORD *)v30 <= 0) : (BOOL v36 = 1), v36))
        {
          int v37 = 0;
        }
        else
        {
          double v33 = v33 + v30[1];
          unint64_t v18 = v35 | v18;
          int v37 = 1;
        }
        if (byte_102473F88)
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          double v38 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            int v39 = *(_DWORD *)v30;
            double v40 = v30[1];
            *(_DWORD *)std::string buf = 67110144;
            int v47 = v37;
            __int16 v48 = 1024;
            int v49 = v20;
            __int16 v50 = 2048;
            double v51 = v32;
            __int16 v52 = 1024;
            int v53 = v39;
            __int16 v54 = 2048;
            double v55 = v40;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "FenceCal: isAddChannel, %d, maxChannelSetSize, %d, totalAps, %.0lf, channelHistogram, sorted, channel, %2d, weight, %.3lf", buf, 0x28u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            double v41 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static unsigned int CLWifiFenceCalculator::calculateChannelHistogram(const std::vector<CLWifiFenceCalculator> &, ChannelHistogram &)", "%s\n", v41);
            if (v41 != (char *)buf) {
              free(v41);
            }
          }
        }
      }
      v30 += 2;
    }
    while (v30 != v31);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  std::string::size_type v42 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v43 = sub_1004BE904(v18);
    *(_DWORD *)std::string buf = 67175169;
    int v47 = v43;
    __int16 v48 = 1025;
    int v49 = v18;
    __int16 v50 = 2049;
    double v51 = v33;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "FenceCal: addedChannels, %{private}d, channelFilter, 0x%{private}08x, totalWeight, %{private}.3lf", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    sub_1004BE904(v18);
    __int16 v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static unsigned int CLWifiFenceCalculator::calculateChannelHistogram(const std::vector<CLWifiFenceCalculator> &, ChannelHistogram &)", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  return v18;
}

uint64_t sub_100CC1D40(void *a1, uint64_t *a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t **a6, void *a7, void *a8, double a9, uint64_t a10)
{
  double Current_5 = j__CFAbsoluteTimeGetCurrent_5();
  v396 = 0;
  v397 = 0;
  uint64_t v398 = 0;
  long long __p = 0;
  v394 = 0;
  v395 = 0;
  sub_101171D90((uint64_t)v392);
  v391[0] = 0;
  v391[1] = 0;
  v389[1] = 0;
  v390 = (uint64_t *)v391;
  v388 = v389;
  v389[0] = 0;
  if (byte_102473F88)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    long long v14 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v15 = 0xEFBEFBEFBEFBEFBFLL * ((a2[1] - *a2) >> 3);
      uint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 3);
      *(_DWORD *)std::string buf = 134218752;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v16;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(double *)&buf[30] = a9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "FenceCal: calculateGroup, start, group size, %zu, apsBudget, %u, currentlySeen, %zu, minScoreThresh, %.4lf", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      unint64_t v358 = 0xEFBEFBEFBEFBEFBFLL * ((a2[1] - *a2) >> 3);
      uint64_t v359 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 3);
      *(_DWORD *)v403 = 134218752;
      *(void *)&v403[4] = v358;
      *(_WORD *)&v403[12] = 1024;
      *(_DWORD *)&v403[14] = a3;
      *(_WORD *)&v403[18] = 2048;
      *(void *)&v403[20] = v359;
      *(_WORD *)&v403[28] = 2048;
      *(double *)&v403[30] = a9;
      v360 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v360);
      if (v360 != buf) {
        free(v360);
      }
    }
  }
  unint64_t v17 = sub_100CC172C(a2, (char **)&v396);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  unint64_t v18 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v19 = sub_1004BE904(v17);
    *(_DWORD *)std::string buf = 67174913;
    *(_DWORD *)&uint8_t buf[4] = v17;
    *(_WORD *)&uint8_t buf[8] = 1025;
    *(_DWORD *)&buf[10] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "FenceCal: channelFilter, 0x%{private}08X,countNumOfSetBits,%{private}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    int v356 = sub_1004BE904(v17);
    *(_DWORD *)v403 = 67174913;
    *(_DWORD *)&v403[4] = v17;
    *(_WORD *)&v403[8] = 1025;
    *(_DWORD *)&v403[10] = v356;
    v357 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v357);
    if (v357 != buf) {
      free(v357);
    }
  }
  uint64_t v20 = *a2;
  uint64_t v21 = a2[1];
  if (*a2 == v21)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = 0;
    do
    {
      *(_DWORD *)(v20 + 392) = -1;
      *(_DWORD *)(v20 + 472) = 1;
      v22 += *(unsigned __int8 *)(v20 + 476);
      v20 += 504;
    }
    while (v20 != v21);
  }
  if (*(unsigned char *)(a5 + 88))
  {
    if (Current_5 == 0.0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F18D8);
      }
      uint64_t v23 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "fencecalculator timestamp is 0", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F18D8);
        }
        *(_WORD *)v403 = 0;
        v363 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v363);
        if (v363 != buf) {
          free(v363);
        }
      }
    }
    *(void *)std::string buf = *(void *)a5;
    if (*(char *)(a5 + 31) < 0)
    {
      sub_1000DC48C(&buf[8], *(void **)(a5 + 8), *(void *)(a5 + 16));
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(a5 + 8);
      *(void *)&unsigned char buf[24] = *(void *)(a5 + 24);
    }
    long long v24 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a5 + 32);
    *(_OWORD *)&unsigned char buf[48] = v24;
    *(_OWORD *)&buf[64] = *(_OWORD *)(a5 + 64);
    *(void *)&buf[80] = *(void *)(a5 + 80);
    memset(&v401, 0, sizeof(v401));
    LOBYTE(v387) = 0;
    v401.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
    v401.__r_.__value_.__l.__size_ = v401.__r_.__value_.__r.__words[0];
    v401.__r_.__value_.__r.__words[2] = v401.__r_.__value_.__r.__words[0] + 88;
    v401.__r_.__value_.__l.__size_ = sub_10058A38C((uint64_t)&v401.__r_.__value_.__r.__words[2], (uint64_t)buf, (uint64_t)&buf[88], (uint64_t)v401.__r_.__value_.__l.__data_);
    sub_10144EBDC(a1, (uint64_t)&v401, a10, (uint64_t)v403, Current_5);
    v386 = &v401;
    sub_1000D7F78((void ***)&v386);
    if ((buf[31] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[8]);
    }
    sub_10106EBBC(*(void *)a5, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), (uint64_t)buf, *(double *)(a5 + 56));
    if (&v403[8] == (unsigned char *)sub_100CC93B4((uint64_t)v403, (uint64_t *)a5))
    {
      int v30 = *(_DWORD *)(a5 + 40);
    }
    else
    {
      unsigned int v25 = (_OWORD *)sub_100CC6004((uint64_t)v403, (uint64_t *)a5);
      long long v26 = v25[4];
      long long v27 = v25[5];
      long long v28 = v25[2];
      *(_OWORD *)&unsigned char buf[48] = v25[3];
      long long v29 = v25[1];
      *(_OWORD *)std::string buf = *v25;
      *(_OWORD *)&uint8_t buf[16] = v29;
      *(_OWORD *)&buf[64] = v26;
      *(_OWORD *)&buf[80] = v27;
      *(_OWORD *)&uint8_t buf[32] = v28;
      int v30 = *(_DWORD *)(a5 + 40);
      *(_DWORD *)&buf[52] = v30;
    }
    if (sub_100D550A4(v30)) {
      LODWORD(v17) = (1 << *(_DWORD *)(a5 + 40)) | v17;
    }
    if (v22) {
      sub_100CC0F4C((uint64_t)buf, 1, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)&v390, -1, (std::string::size_type)"associated");
    }
    sub_10078A7B0((uint64_t)v403, *(char **)&v403[8]);
  }
  sub_10144EBDC(a1, (uint64_t)a4, a10, (uint64_t)&v386, Current_5);
  unsigned int v369 = v17;
  uint64_t v32 = *a4;
  uint64_t v31 = a4[1];
  int v364 = v22;
  if (*a4 == v31)
  {
    int v375 = 0;
    int v33 = 0;
  }
  else
  {
    int v33 = 0;
    int v375 = 0;
    do
    {
      sub_10106EBBC(*(void *)v32, *(_DWORD *)(v32 + 32), *(_DWORD *)(v32 + 40), (uint64_t)buf, *(double *)(v32 + 56));
      int v34 = (char **)sub_100CC93B4((uint64_t)&v386, (uint64_t *)v32);
      if (&v387 != v34)
      {
        long long v35 = *(_OWORD *)(v34 + 21);
        *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(v34 + 19);
        *(_OWORD *)&unsigned char buf[48] = v35;
        long long v36 = *(_OWORD *)(v34 + 25);
        *(_OWORD *)&buf[64] = *(_OWORD *)(v34 + 23);
        *(_OWORD *)&buf[80] = v36;
        long long v37 = *(_OWORD *)(v34 + 17);
        *(_OWORD *)std::string buf = *(_OWORD *)(v34 + 15);
        *(_OWORD *)&uint8_t buf[16] = v37;
      }
      *(_DWORD *)&buf[52] = *(_DWORD *)(v32 + 40);
      if (sub_100D550A4(*(int *)&buf[52]))
      {
        double v38 = v394;
        if (v394 >= v395)
        {
          double v44 = (char *)__p;
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((v394 - (unsigned char *)__p) >> 5);
          unint64_t v46 = v45 + 1;
          if (v45 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v395 - (unsigned char *)__p) >> 5) > v46) {
            unint64_t v46 = 0x5555555555555556 * ((v395 - (unsigned char *)__p) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v395 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
            unint64_t v47 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            __int16 v48 = (char *)sub_100642EA8((uint64_t)&v395, v47);
            double v44 = (char *)__p;
            double v38 = v394;
          }
          else
          {
            __int16 v48 = 0;
          }
          int v49 = &v48[96 * v45];
          long long v50 = *(_OWORD *)&buf[16];
          *(_OWORD *)int v49 = *(_OWORD *)buf;
          *((_OWORD *)v49 + 1) = v50;
          long long v51 = *(_OWORD *)&buf[32];
          long long v52 = *(_OWORD *)&buf[48];
          long long v53 = *(_OWORD *)&buf[80];
          *((_OWORD *)v49 + 4) = *(_OWORD *)&buf[64];
          *((_OWORD *)v49 + 5) = v53;
          *((_OWORD *)v49 + 2) = v51;
          *((_OWORD *)v49 + 3) = v52;
          if (v38 == v44)
          {
            __int16 v59 = &v48[96 * v45];
          }
          else
          {
            __int16 v54 = &v48[96 * v45];
            do
            {
              long long v55 = *((_OWORD *)v38 - 5);
              *((_OWORD *)v54 - 6) = *((_OWORD *)v38 - 6);
              *((_OWORD *)v54 - 5) = v55;
              long long v56 = *((_OWORD *)v38 - 4);
              long long v57 = *((_OWORD *)v38 - 3);
              long long v58 = *((_OWORD *)v38 - 1);
              __int16 v59 = v54 - 96;
              *((_OWORD *)v54 - 2) = *((_OWORD *)v38 - 2);
              *((_OWORD *)v54 - 1) = v58;
              *((_OWORD *)v54 - 4) = v56;
              *((_OWORD *)v54 - 3) = v57;
              v38 -= 96;
              v54 -= 96;
            }
            while (v38 != v44);
          }
          int v43 = v49 + 96;
          long long __p = v59;
          v394 = v49 + 96;
          v395 = &v48[96 * v47];
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          long long v39 = *(_OWORD *)&buf[16];
          *(_OWORD *)v394 = *(_OWORD *)buf;
          *((_OWORD *)v38 + 1) = v39;
          long long v40 = *(_OWORD *)&buf[32];
          long long v41 = *(_OWORD *)&buf[48];
          long long v42 = *(_OWORD *)&buf[80];
          *((_OWORD *)v38 + 4) = *(_OWORD *)&buf[64];
          *((_OWORD *)v38 + 5) = v42;
          *((_OWORD *)v38 + 2) = v40;
          *((_OWORD *)v38 + 3) = v41;
          int v43 = v38 + 96;
        }
        v394 = v43;
        if (sub_10106EB1C((double *)buf))
        {
          int v60 = *(_DWORD *)&buf[48];
          ++v33;
          if (*((double *)sub_10114344C() + 5) >= (double)v60) {
            ++v375;
          }
        }
      }
      v32 += 88;
    }
    while (v32 != v31);
  }
  sub_1006D825C((uint64_t)&__p);
  double v61 = (char *)__p;
  __int16 v62 = v394;
  int v63 = v22;
  if (__p != v394)
  {
    int v64 = v375;
    do
    {
      BOOL v65 = sub_10106EB1C((double *)v61);
      if (v33)
      {
        if (v64) {
          BOOL v66 = v65;
        }
        else {
          BOOL v66 = 0;
        }
        if (v66)
        {
          int v67 = *((_DWORD *)v61 + 12);
          BOOL v68 = *((double *)sub_10114344C() + 5) < (double)v67 || v63 == 0;
          if (v68) {
            goto LABEL_89;
          }
        }
        else
        {
          if (v63) {
            BOOL v69 = v65;
          }
          else {
            BOOL v69 = 0;
          }
          if (!v69) {
            goto LABEL_89;
          }
        }
        if (((v369 >> *((_DWORD *)v61 + 13)) & 1) == 0 && sub_1004BE904(v369) <= 6) {
          v369 |= 1 << *((_DWORD *)v61 + 13);
        }
      }
      else if (!v63)
      {
        goto LABEL_89;
      }
      sub_100CC0F4C((uint64_t)v61, 1, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)&v390, v369, (std::string::size_type)"CurrentlySeen");
LABEL_89:
      double v70 = *(double *)(a10 + 20);
      BOOL v71 = v70 < 0.0 || v70 > 100.0;
      if (!v71 && sub_10106EB1C((double *)v61))
      {
        uint64_t v72 = *a2;
        uint64_t v73 = a2[1];
        if (*a2 != v73)
        {
          do
          {
            __int16 v74 = *(void **)(v72 + 8);
            int v75 = *(void **)(v72 + 16);
            while (v74 != v75)
            {
              *(void *)std::string buf = *(void *)v61;
              *(void *)v403 = *v74;
              if (sub_100B39178(buf, v403)) {
                goto LABEL_101;
              }
              v74 += 12;
            }
            v72 += 504;
          }
          while (v72 != v73);
          uint64_t v72 = v73;
LABEL_101:
          int v64 = v375;
        }
        uint64_t v76 = a2[1];
        uint64_t v77 = (double *)(v72 + 104);
        __int16 v78 = (double *)(v72 + 112);
        if (v72 == v76)
        {
          uint64_t v77 = (double *)(a10 + 4);
          __int16 v78 = (double *)(a10 + 12);
        }
        double v79 = *v77;
        double v80 = *v78;
        double v81 = sub_101171EA0(v392, a10, *((double *)v61 + 1), *((double *)v61 + 2));
        double v82 = sub_101171EA0(v392, a10, v79, v80);
        if (v72 != v76)
        {
          char v83 = *(unsigned char *)(v72 + 476);
          if (v83) {
            char v83 = v82 - sub_100044A78(v72 + 32) >= 300.0;
          }
          if (v83) {
            goto LABEL_110;
          }
        }
        double v84 = *((double *)v61 + 4);
        if (v84 >= 450.0 || v81 - v84 >= 450.0)
        {
LABEL_110:
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          uint64_t v85 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            CFAbsoluteTimeGetCurrent();
            sub_10106E024((uint64_t)v61);
            uint64_t v86 = buf;
            if (buf[23] < 0) {
              uint64_t v86 = *(unsigned char **)buf;
            }
            *(_DWORD *)v403 = 136380675;
            *(void *)&v403[4] = v86;
            _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "FenceCal: before devaluing, apLocation, %{private}s", v403, 0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            CFAbsoluteTimeGetCurrent();
            sub_10106E024((uint64_t)v61);
            id v105 = v403;
            if (v403[23] < 0) {
              id v105 = *(unsigned char **)v403;
            }
            LODWORD(v401.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 4) = (std::string::size_type)v105;
            double v106 = (char *)_os_log_send_and_compose_impl();
            if ((v403[23] & 0x80000000) != 0) {
              operator delete(*(void **)v403);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v106);
            if (v106 != buf) {
              free(v106);
            }
          }
          double v385 = *(double *)v61;
          sub_1014528AC((uint64_t)a1);
          double v87 = v385;
          uint64_t v88 = (double *)operator new(8uLL);
          *(void *)std::string buf = v88;
          double *v88 = v87;
          *(void *)&uint8_t buf[16] = v88 + 1;
          *(void *)&uint8_t buf[8] = v88 + 1;
          (*(void (**)(void **__return_ptr, double))(*a1 + 16))(v383, Current_5);
          if (*(void *)buf)
          {
            *(void *)&uint8_t buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          long long v89 = *((_OWORD *)v61 + 1);
          *(_OWORD *)v403 = *(_OWORD *)v61;
          *(_OWORD *)&v403[16] = v89;
          long long v90 = *((_OWORD *)v61 + 2);
          long long v91 = *((_OWORD *)v61 + 3);
          long long v92 = *((_OWORD *)v61 + 5);
          *(_OWORD *)&v403[64] = *((_OWORD *)v61 + 4);
          *(_OWORD *)&v403[80] = v92;
          *(_OWORD *)&v403[32] = v90;
          *(_OWORD *)&v403[48] = v91;
          if (&v383[1] != sub_100529674((uint64_t)v383, &v385))
          {
            long long v93 = (_OWORD *)sub_1005294BC((uint64_t)v383, &v385);
            long long v94 = v93[1];
            *(_OWORD *)v403 = *v93;
            *(_OWORD *)&v403[16] = v94;
            long long v95 = v93[2];
            long long v96 = v93[3];
            long long v97 = v93[5];
            *(_OWORD *)&v403[64] = v93[4];
            *(_OWORD *)&v403[80] = v97;
            *(_OWORD *)&v403[32] = v95;
            *(_OWORD *)&v403[48] = v96;
          }
          if (sub_10106EB1C((double *)v403))
          {
            *(void *)std::string buf = *(void *)v403;
            if (v391 != sub_100529674((uint64_t)&v390, buf))
            {
              *(void *)std::string buf = *(void *)v403;
              sub_1006FF744(&v390, buf);
            }
            *(void *)std::string buf = *(void *)v403;
            sub_10052952C(&v390, buf, buf, v403);
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          unint64_t v98 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 134283777;
            *(double *)&uint8_t buf[4] = v81;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(double *)&buf[14] = v82;
            _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "FenceCal: devaluing, distanceToExpectedApLocation, %{private}.1lf, distanceToFenceCenter, %{private}.1lf", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            LODWORD(v401.__r_.__value_.__l.__data_) = 134283777;
            *(double *)((char *)v401.__r_.__value_.__r.__words + 4) = v81;
            WORD2(v401.__r_.__value_.__r.__words[1]) = 2049;
            *(double *)((char *)&v401.__r_.__value_.__r.__words[1] + 6) = v82;
            id v107 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v107);
            if (v107 != buf) {
              free(v107);
            }
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          uint64_t v99 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            CFAbsoluteTimeGetCurrent();
            sub_10106E024((uint64_t)v403);
            double v100 = buf;
            if (buf[23] < 0) {
              double v100 = *(unsigned char **)buf;
            }
            LODWORD(v401.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "FenceCal: after devaluing, apLocation, %{private}s", (uint8_t *)&v401, 0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            CFAbsoluteTimeGetCurrent();
            sub_10106E024((uint64_t)v403);
            uint64_t v108 = &v401;
            if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v108 = (std::string *)v401.__r_.__value_.__r.__words[0];
            }
            LODWORD(v399[0]) = 136380675;
            *(void **)((char *)v399 + 4) = v108;
            double v109 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v401.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v109);
            if (v109 != buf) {
              free(v109);
            }
          }
          if (v72 != v76)
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            double v101 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              sub_100C8C864(v72 + 32);
              double v102 = &v401;
              if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                double v102 = (std::string *)v401.__r_.__value_.__r.__words[0];
              }
              unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v72 + 352) - *(void *)(v72 + 344)) >> 5);
              int v104 = *(unsigned __int8 *)(v72 + 476);
              *(_DWORD *)std::string buf = 136381187;
              *(void *)&uint8_t buf[4] = v102;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&buf[14] = v103;
              *(_WORD *)&buf[22] = 1025;
              *(_DWORD *)&unsigned char buf[24] = v104;
              _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "FenceCal: devaluing, fence, %{private}s, result.fChosenAPs, %{private}lu, isExit, %{private}d", buf, 0x1Cu);
              if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v401.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F18B8);
              }
              sub_100C8C864(v72 + 32);
              double v110 = v399;
              if (v400 < 0) {
                double v110 = (void **)v399[0];
              }
              unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v72 + 352) - *(void *)(v72 + 344)) >> 5);
              int v112 = *(unsigned __int8 *)(v72 + 476);
              LODWORD(v401.__r_.__value_.__l.__data_) = 136381187;
              *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 4) = (std::string::size_type)v110;
              WORD2(v401.__r_.__value_.__r.__words[1]) = 2049;
              *(std::string::size_type *)((char *)&v401.__r_.__value_.__r.__words[1] + 6) = v111;
              HIWORD(v401.__r_.__value_.__r.__words[2]) = 1025;
              int v402 = v112;
              long long v113 = (char *)_os_log_send_and_compose_impl();
              if (v400 < 0) {
                operator delete(v399[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v113);
              if (v113 != buf) {
                free(v113);
              }
            }
          }
          sub_1000F5BB0((uint64_t)v383, (void *)v383[1]);
        }
      }
      v61 += 96;
    }
    while (v61 != v62);
  }
  int v376 = 0;
  unsigned int v366 = 0;
  do
  {
    uint64_t v114 = *a2;
    uint64_t v367 = a2[1];
    if (*a2 == v367)
    {
      unsigned int v117 = 0;
      uint64_t v116 = 0;
      char v115 = 0;
    }
    else
    {
      char v115 = 0;
      uint64_t v116 = 0;
      unsigned int v117 = 0;
      do
      {
        if (*(char *)(v114 + 55) >= 0) {
          size_t v118 = *(unsigned __int8 *)(v114 + 55);
        }
        else {
          size_t v118 = *(void *)(v114 + 40);
        }
        sub_1001110E4((uint64_t)buf, v118 + 1);
        if (buf[23] >= 0) {
          uint64_t v119 = buf;
        }
        else {
          uint64_t v119 = *(unsigned char **)buf;
        }
        if (v118)
        {
          if (*(char *)(v114 + 55) >= 0) {
            uint64_t v120 = (const void *)(v114 + 32);
          }
          else {
            uint64_t v120 = *(const void **)(v114 + 32);
          }
          memmove(v119, v120, v118);
        }
        *(_WORD *)&v119[v118] = 47;
        int v121 = *(char *)(v114 + 79);
        if (v121 >= 0) {
          double v122 = (const std::string::value_type *)(v114 + 56);
        }
        else {
          double v122 = *(const std::string::value_type **)(v114 + 56);
        }
        if (v121 >= 0) {
          std::string::size_type v123 = *(unsigned __int8 *)(v114 + 79);
        }
        else {
          std::string::size_type v123 = *(void *)(v114 + 64);
        }
        id v124 = std::string::append((std::string *)buf, v122, v123);
        long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v401.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (*(int *)(v114 + 480) >= 1)
        {
          int v126 = 0;
          BOOL v128 = v366 < a3 && v117 < a3;
          do
          {
            unsigned int v129 = *(_DWORD *)(v114 + 392);
            uint64_t v130 = *(void *)(v114 + 368);
            if ((v129 & 0x80000000) != 0) {
              double v131 = 0.0;
            }
            else {
              double v131 = *(double *)(v130 + 40 * v129 + 8);
            }
            int v132 = *(_DWORD *)(v114 + 472);
            signed int v133 = v129 + v132;
            double v134 = -1.0;
            if (v133 < (int)(-858993459 * ((unint64_t)(*(void *)(v114 + 376) - v130) >> 3))) {
              double v134 = *(double *)(v130 + 40 * v133 + 8);
            }
            if (byte_102473F88) {
              BOOL v135 = byte_10248AAE0 == 0;
            }
            else {
              BOOL v135 = 1;
            }
            if (!v135)
            {
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F18B8);
              }
              uint64_t v136 = qword_1024193C8;
              if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
              {
                int v137 = &v401;
                if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  int v137 = (std::string *)v401.__r_.__value_.__r.__words[0];
                }
                int v138 = *(_DWORD *)(v114 + 480);
                *(_DWORD *)std::string buf = 136317186;
                *(void *)&uint8_t buf[4] = v137;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v376;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&unsigned char buf[20] = v126;
                *(_WORD *)&unsigned char buf[24] = 1024;
                *(_DWORD *)&buf[26] = v138;
                *(_WORD *)&buf[30] = 2048;
                *(double *)&uint8_t buf[32] = v131;
                *(_WORD *)&buf[40] = 2048;
                *(double *)&buf[42] = v134;
                *(_WORD *)&buf[50] = 2048;
                *(double *)&buf[52] = a9;
                *(_WORD *)&buf[60] = 1024;
                *(_DWORD *)&unsigned char buf[62] = v117;
                *(_WORD *)&buf[66] = 1024;
                *(_DWORD *)&std::string buf[68] = a3;
                _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, score, %+.4lf, newScore, %+.4lf, minScoreThresh, %+.4lf, totalChosenAps, %d, apsBudget, %d", buf, 0x48u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                }
                long long v156 = &v401;
                if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  long long v156 = (std::string *)v401.__r_.__value_.__r.__words[0];
                }
                int v157 = *(_DWORD *)(v114 + 480);
                *(_DWORD *)v403 = 136317186;
                *(void *)&v403[4] = v156;
                *(_WORD *)&v403[12] = 1024;
                *(_DWORD *)&v403[14] = v376;
                *(_WORD *)&v403[18] = 1024;
                *(_DWORD *)&v403[20] = v126;
                *(_WORD *)&v403[24] = 1024;
                *(_DWORD *)&v403[26] = v157;
                *(_WORD *)&v403[30] = 2048;
                *(double *)&v403[32] = v131;
                *(_WORD *)&v403[40] = 2048;
                *(double *)&v403[42] = v134;
                *(_WORD *)&v403[50] = 2048;
                *(double *)&v403[52] = a9;
                *(_WORD *)&v403[60] = 1024;
                *(_DWORD *)&v403[62] = v117;
                *(_WORD *)&v403[66] = 1024;
                *(_DWORD *)&v403[68] = a3;
                long long v158 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v158);
                if (v158 != buf) {
                  free(v158);
                }
              }
            }
            BOOL v139 = v131 < a9 && v128;
            unsigned int v140 = *(_DWORD *)(v114 + 392);
            if (v139
              && (uint64_t v141 = *(void *)(v114 + 368),
                  int v142 = -858993459 * ((unint64_t)(*(void *)(v114 + 376) - v141) >> 3),
                  (int)(v140 + v132) < v142))
            {
              if (vabdd_f64(v134, v131) <= 0.005)
              {
                if ((v140 & 0x80000000) != 0) {
                  uint64_t v116 = 0;
                }
                else {
                  uint64_t v116 = *(void *)(v141 + 40 * v140);
                }
                int v148 = *(_DWORD *)(v114 + 472);
                if (v148 < v142)
                {
                  *(_DWORD *)(v114 + 472) = v148 + 1;
                  if (byte_102473F88)
                  {
                    if (qword_1024193C0 != -1) {
                      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                    }
                    unint64_t v149 = qword_1024193C8;
                    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                    {
                      unint64_t v150 = &v401;
                      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        unint64_t v150 = (std::string *)v401.__r_.__value_.__r.__words[0];
                      }
                      int v151 = *(_DWORD *)(v114 + 472);
                      *(_DWORD *)std::string buf = 136316162;
                      *(void *)&uint8_t buf[4] = v150;
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(double *)&buf[14] = v131;
                      *(_WORD *)&buf[22] = 2048;
                      *(double *)&unsigned char buf[24] = v134;
                      *(_WORD *)&uint8_t buf[32] = 2048;
                      *(void *)&buf[34] = 0x3F747AE147AE147BLL;
                      *(_WORD *)&buf[42] = 1024;
                      *(_DWORD *)&buf[44] = v151;
                      _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, score too close, currentScore, %lf, newScore, %lf, significantUpdateThresh, %lf, updating next step to, %d", buf, 0x30u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024193C0 != -1) {
                        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                      }
                      long long v164 = &v401;
                      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        long long v164 = (std::string *)v401.__r_.__value_.__r.__words[0];
                      }
                      int v165 = *(_DWORD *)(v114 + 472);
                      *(_DWORD *)v403 = 136316162;
                      *(void *)&v403[4] = v164;
                      *(_WORD *)&v403[12] = 2048;
                      *(double *)&v403[14] = v131;
                      *(_WORD *)&v403[22] = 2048;
                      *(double *)&v403[24] = v134;
                      *(_WORD *)&v403[32] = 2048;
                      *(void *)&v403[34] = 0x3F747AE147AE147BLL;
                      *(_WORD *)&v403[42] = 1024;
                      *(_DWORD *)&v403[44] = v165;
                      int v166 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v166);
                      if (v166 != buf) {
                        free(v166);
                      }
                    }
                  }
                  char v115 = 1;
                }
              }
              else
              {
                if (byte_102473F88)
                {
                  if (qword_1024193C0 != -1) {
                    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                  }
                  unint64_t v143 = qword_1024193C8;
                  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                  {
                    long long v144 = &v401;
                    if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      long long v144 = (std::string *)v401.__r_.__value_.__r.__words[0];
                    }
                    int v145 = *(_DWORD *)(v114 + 392);
                    uint64_t v146 = *(void *)(v114 + 368);
                    if (v145 < 1) {
                      uint64_t v147 = 0;
                    }
                    else {
                      uint64_t v147 = *(void *)(v146 + 40 * v145);
                    }
                    int v152 = *(_DWORD *)(v114 + 480);
                    int v153 = v145 + v132;
                    uint64_t v154 = *(void *)(v146 + 40 * v153);
                    *(_DWORD *)std::string buf = 136317698;
                    *(void *)&uint8_t buf[4] = v144;
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v376;
                    *(_WORD *)&unsigned char buf[18] = 1024;
                    *(_DWORD *)&unsigned char buf[20] = v126;
                    *(_WORD *)&unsigned char buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v152;
                    *(_WORD *)&buf[30] = 2048;
                    *(double *)&uint8_t buf[32] = v131;
                    *(_WORD *)&buf[40] = 2048;
                    *(double *)&buf[42] = v134;
                    *(_WORD *)&buf[50] = 2048;
                    *(void *)&buf[52] = v147;
                    *(_WORD *)&buf[60] = 2048;
                    *(void *)&unsigned char buf[62] = v154;
                    *(_WORD *)&buf[70] = 1024;
                    *(_DWORD *)&buf[72] = v153;
                    *(_WORD *)&buf[76] = 1024;
                    *(_DWORD *)&buf[78] = v117;
                    *(_WORD *)&buf[82] = 1024;
                    *(_DWORD *)&buf[84] = a3;
                    _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, upgrading score from, %.4lf, to, %.4lf, from, %4zu, to, %4zu, APs, index, %2d, totalChosenAps, %d, apsBudget, %d", buf, 0x58u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193C0 != -1) {
                      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                    }
                    uint64_t v159 = (std::string *)v401.__r_.__value_.__r.__words[0];
                    if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v159 = &v401;
                    }
                    int v160 = *(_DWORD *)(v114 + 480);
                    int v161 = *(_DWORD *)(v114 + 392);
                    uint64_t v162 = *(void *)(v114 + 368);
                    if (v161 < 1) {
                      uint64_t v163 = 0;
                    }
                    else {
                      uint64_t v163 = *(void *)(v162 + 40 * v161);
                    }
                    int v167 = v161 + v132;
                    uint64_t v168 = *(void *)(v162 + 40 * v167);
                    *(_DWORD *)v403 = 136317698;
                    *(void *)&v403[4] = v159;
                    *(_WORD *)&v403[12] = 1024;
                    *(_DWORD *)&v403[14] = v376;
                    *(_WORD *)&v403[18] = 1024;
                    *(_DWORD *)&v403[20] = v126;
                    *(_WORD *)&v403[24] = 1024;
                    *(_DWORD *)&v403[26] = v160;
                    *(_WORD *)&v403[30] = 2048;
                    *(double *)&v403[32] = v131;
                    *(_WORD *)&v403[40] = 2048;
                    *(double *)&v403[42] = v134;
                    *(_WORD *)&v403[50] = 2048;
                    *(void *)&v403[52] = v163;
                    *(_WORD *)&v403[60] = 2048;
                    *(void *)&v403[62] = v168;
                    *(_WORD *)&v403[70] = 1024;
                    *(_DWORD *)&v403[72] = v167;
                    *(_WORD *)&v403[76] = 1024;
                    *(_DWORD *)&v403[78] = v117;
                    *(_WORD *)&v403[82] = 1024;
                    *(_DWORD *)&v403[84] = a3;
                    double v169 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v169);
                    if (v169 != buf) {
                      free(v169);
                    }
                  }
                }
                int v155 = *(_DWORD *)(v114 + 392) + v132;
                *(_DWORD *)(v114 + 392) = v155;
                uint64_t v116 = *(void *)(*(void *)(v114 + 368) + 40 * v155);
                char v115 = 1;
                *(_DWORD *)(v114 + 472) = 1;
              }
            }
            else if ((v140 & 0x80000000) != 0)
            {
              uint64_t v116 = 0;
            }
            else
            {
              uint64_t v116 = *(void *)(*(void *)(v114 + 368) + 40 * v140);
            }
            ++v126;
          }
          while (v126 < *(_DWORD *)(v114 + 480));
        }
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v401.__r_.__value_.__l.__data_);
        }
        v117 += v116;
        v114 += 504;
      }
      while (v114 != v367);
    }
    unsigned int v366 = v117;
    if (byte_102473F88)
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      double v170 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v376;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v117;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v117;
        *(_WORD *)&unsigned char buf[20] = 2048;
        *(void *)&buf[22] = v116;
        _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_DEBUG, "FenceCal: passNum, %d, commitedAPs, %d, totalChosenAps, %d, numOfAps, %zu", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        *(_DWORD *)v403 = 67109888;
        *(_DWORD *)&v403[4] = v376;
        *(_WORD *)&v403[8] = 1024;
        *(_DWORD *)&v403[10] = v117;
        *(_WORD *)&v403[14] = 1024;
        *(_DWORD *)&v403[16] = v117;
        *(_WORD *)&v403[20] = 2048;
        *(void *)&v403[22] = v116;
        unint64_t v171 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v171);
        if (v171 != buf) {
          free(v171);
        }
      }
    }
    ++v376;
  }
  while ((v115 & 1) != 0);
  uint64_t v172 = *a2;
  uint64_t v173 = a2[1];
  if (*a2 != v173)
  {
    uint64_t v174 = 0;
    int v175 = 0;
    while (1)
    {
      unsigned int v176 = *(_DWORD *)(v172 + 392);
      if ((v176 & 0x80000000) != 0)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        uint64_t v194 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          sub_100C8C864(v172 + 32);
          long long v195 = buf;
          if (buf[23] < 0) {
            long long v195 = *(unsigned char **)buf;
          }
          *(_DWORD *)v403 = 136380675;
          *(void *)&v403[4] = v195;
          _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEBUG, "FenceCal: group result, %{private}30s, can't be monitored", v403, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_324;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        sub_100C8C864(v172 + 32);
        int v196 = v403;
        if (v403[23] < 0) {
          int v196 = *(unsigned char **)v403;
        }
        LODWORD(v401.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 4) = (std::string::size_type)v196;
        double v193 = (char *)_os_log_send_and_compose_impl();
        if ((v403[23] & 0x80000000) != 0) {
          operator delete(*(void **)v403);
        }
      }
      else
      {
        int v177 = *(_DWORD *)(*(void *)(v172 + 368) + 40 * v176);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        v175 += v177;
        uint64_t v178 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          sub_100C8C864(v172 + 32);
          uint64_t v179 = v403;
          if (v403[23] < 0) {
            uint64_t v179 = *(unsigned char **)v403;
          }
          unint64_t v180 = 0xEFBEFBEFBEFBEFBFLL * ((a2[1] - *a2) >> 3);
          int v181 = *(_DWORD *)(v172 + 392);
          uint64_t v182 = (uint64_t *)(*(void *)(v172 + 368) + 40 * v181);
          unint64_t v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v172 + 352) - *(void *)(v172 + 344)) >> 5);
          uint64_t v185 = *v182;
          uint64_t v184 = v182[1];
          *(_DWORD *)std::string buf = 136382979;
          *(void *)&uint8_t buf[4] = v179;
          *(_WORD *)&unsigned char buf[12] = 1025;
          *(_DWORD *)&buf[14] = v117;
          *(_WORD *)&unsigned char buf[18] = 1025;
          *(_DWORD *)&unsigned char buf[20] = a3;
          *(_WORD *)&unsigned char buf[24] = 2049;
          *(void *)&buf[26] = v174;
          *(_WORD *)&buf[34] = 2049;
          *(void *)&unsigned char buf[36] = v180;
          *(_WORD *)&buf[44] = 2049;
          *(void *)&buf[46] = v185;
          *(_WORD *)&buf[54] = 2049;
          *(void *)&buf[56] = v183;
          *(_WORD *)&buf[64] = 2049;
          *(void *)&buf[66] = v184;
          *(_WORD *)&buf[74] = 1025;
          *(_DWORD *)&buf[76] = v181;
          *(_WORD *)&buf[80] = 1025;
          *(_DWORD *)&buf[82] = v175;
          _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_DEBUG, "FenceCal: group result, %{private}30s, totalChosenAps, %{private}4d, apsBudget, %{private}4d, index, %{private}4zu , %{private}4zu, aps, %{private}4zu, %{private}4zu, score, %{private}.2lf, index, %{private}4d, dbgCounter, %{private}4d", buf, 0x56u);
          if ((v403[23] & 0x80000000) != 0) {
            operator delete(*(void **)v403);
          }
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_324;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        sub_100C8C864(v172 + 32);
        int v186 = &v401;
        if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v186 = (std::string *)v401.__r_.__value_.__r.__words[0];
        }
        unint64_t v187 = 0xEFBEFBEFBEFBEFBFLL * ((a2[1] - *a2) >> 3);
        int v188 = *(_DWORD *)(v172 + 392);
        double v189 = (uint64_t *)(*(void *)(v172 + 368) + 40 * v188);
        unint64_t v190 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v172 + 352) - *(void *)(v172 + 344)) >> 5);
        uint64_t v192 = *v189;
        uint64_t v191 = v189[1];
        *(_DWORD *)v403 = 136382979;
        *(void *)&v403[4] = v186;
        *(_WORD *)&v403[12] = 1025;
        *(_DWORD *)&v403[14] = v117;
        *(_WORD *)&v403[18] = 1025;
        *(_DWORD *)&v403[20] = a3;
        *(_WORD *)&v403[24] = 2049;
        *(void *)&v403[26] = v174;
        *(_WORD *)&v403[34] = 2049;
        *(void *)&v403[36] = v187;
        *(_WORD *)&v403[44] = 2049;
        *(void *)&v403[46] = v192;
        *(_WORD *)&v403[54] = 2049;
        *(void *)&v403[56] = v190;
        *(_WORD *)&v403[64] = 2049;
        *(void *)&v403[66] = v191;
        *(_WORD *)&v403[74] = 1025;
        *(_DWORD *)&v403[76] = v188;
        *(_WORD *)&v403[80] = 1025;
        *(_DWORD *)&v403[82] = v175;
        double v193 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v401.__r_.__value_.__l.__data_);
        }
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v193);
      if (v193 != buf) {
        free(v193);
      }
LABEL_324:
      ++v174;
      v172 += 504;
      if (v172 == v173)
      {
        uint64_t v197 = *a2;
        uint64_t v377 = a2[1];
        if (*a2 != v377)
        {
          do
          {
            if ((*(_DWORD *)(v197 + 392) & 0x80000000) != 0)
            {
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F18B8);
              }
              id v216 = qword_1024193C8;
              if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
              {
                sub_100C8C864(v197 + 32);
                int v217 = buf;
                if (buf[23] < 0) {
                  int v217 = *(unsigned char **)buf;
                }
                unint64_t v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v197 + 352) - *(void *)(v197 + 344)) >> 5);
                *(_DWORD *)v403 = 136380931;
                *(void *)&v403[4] = v217;
                *(_WORD *)&v403[12] = 2050;
                *(void *)&v403[14] = v218;
                _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "#Warning FenceCal: no score for, %{private}s, fChosenAps, %{public}4zu", v403, 0x16u);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                }
                sub_100C8C864(v197 + 32);
                id v219 = v403;
                if (v403[23] < 0) {
                  id v219 = *(unsigned char **)v403;
                }
                unint64_t v220 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v197 + 352) - *(void *)(v197 + 344)) >> 5);
                LODWORD(v401.__r_.__value_.__l.__data_) = 136380931;
                *(std::string::size_type *)((char *)v401.__r_.__value_.__r.__words + 4) = (std::string::size_type)v219;
                WORD2(v401.__r_.__value_.__r.__words[1]) = 2050;
                *(std::string::size_type *)((char *)&v401.__r_.__value_.__r.__words[1] + 6) = v220;
                uint64_t v221 = (char *)_os_log_send_and_compose_impl();
                if ((v403[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v403);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v221);
                if (v221 != buf) {
                  free(v221);
                }
              }
            }
            else
            {
              uint64_t v198 = sub_100CC6044(v197);
              if (byte_102473F88) {
                BOOL v199 = byte_10248AAE0 == 0;
              }
              else {
                BOOL v199 = 1;
              }
              if (!v199)
              {
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                }
                double v200 = qword_1024193C8;
                if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                {
                  int v201 = (void *)(v197 + 56);
                  if (*(char *)(v197 + 79) < 0) {
                    int v201 = (void *)*v201;
                  }
                  int v202 = *(_DWORD *)(v197 + 392);
                  unint64_t v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v197 + 352) - *(void *)(v197 + 344)) >> 5);
                  uint64_t v204 = *v198;
                  uint64_t v205 = v198[1];
                  *(_DWORD *)std::string buf = 136316162;
                  *(void *)&uint8_t buf[4] = v201;
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v202;
                  *(_WORD *)&unsigned char buf[18] = 2048;
                  *(void *)&unsigned char buf[20] = v204;
                  *(_WORD *)&unsigned char buf[28] = 2048;
                  *(void *)&buf[30] = v203;
                  *(_WORD *)&buf[38] = 2048;
                  *(void *)&buf[40] = v205;
                  _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_DEBUG, "FenceCal: chosenScore, %-16s, fChosenScoreIndex, %4d, numOfAps, %4zu, %4zu, score, %.2lf", buf, 0x30u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193C0 != -1) {
                    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
                  }
                  id v222 = (void *)(v197 + 56);
                  if (*(char *)(v197 + 79) < 0) {
                    id v222 = (void *)*v222;
                  }
                  int v223 = *(_DWORD *)(v197 + 392);
                  unint64_t v224 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v197 + 352) - *(void *)(v197 + 344)) >> 5);
                  uint64_t v225 = *v198;
                  uint64_t v226 = v198[1];
                  *(_DWORD *)v403 = 136316162;
                  *(void *)&v403[4] = v222;
                  *(_WORD *)&v403[12] = 1024;
                  *(_DWORD *)&v403[14] = v223;
                  *(_WORD *)&v403[18] = 2048;
                  *(void *)&v403[20] = v225;
                  *(_WORD *)&v403[28] = 2048;
                  *(void *)&v403[30] = v224;
                  *(_WORD *)&v403[38] = 2048;
                  *(void *)&v403[40] = v226;
                  double v227 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v227);
                  if (v227 != buf) {
                    free(v227);
                  }
                }
              }
              if (*v198)
              {
                unint64_t v206 = 0;
                uint64_t v207 = *(void *)(v197 + 344);
                uint64_t v208 = (unsigned __int8 *)(v197 + 288);
                do
                {
                  uint64_t v209 = *(void *)(v197 + 352);
                  if (v207 == v209) {
                    break;
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((v209 - *(void *)(v197 + 344)) >> 5) >= 6) {
                    double v210 = &v390;
                  }
                  else {
                    double v210 = (uint64_t **)&v388;
                  }
                  std::string::size_type v211 = v197 + 56;
                  if (*(char *)(v197 + 79) < 0) {
                    std::string::size_type v211 = *(void *)(v197 + 56);
                  }
                  if (sub_100CC0F4C(v207, *(unsigned char *)(v197 + 476) != 0, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)v210, v369, v211))
                  {
                    long long v212 = *(unsigned __int8 **)(v197 + 280);
                    if (v212 != v208)
                    {
                      do
                      {
                        uint64_t v213 = sub_10001A4C4((uint64_t)a6, v212 + 32);
                        if (a6 + 1 == (uint64_t **)v213)
                        {
                          *(void *)std::string buf = v212 + 32;
                          *((_DWORD *)sub_100CC94F4(a6, v212 + 32, (uint64_t)&unk_101D0B290, (long long **)buf) + 70) = 1;
                        }
                        else
                        {
                          ++*(_DWORD *)(v213 + 280);
                        }
                        id v214 = (unsigned __int8 *)*((void *)v212 + 1);
                        if (v214)
                        {
                          do
                          {
                            uint64_t v215 = v214;
                            id v214 = *(unsigned __int8 **)v214;
                          }
                          while (v214);
                        }
                        else
                        {
                          do
                          {
                            uint64_t v215 = (unsigned __int8 *)*((void *)v212 + 2);
                            BOOL v68 = *(void *)v215 == (void)v212;
                            long long v212 = v215;
                          }
                          while (!v68);
                        }
                        long long v212 = v215;
                      }
                      while (v215 != v208);
                    }
                  }
                  v207 += 96;
                  ++v206;
                }
                while (v206 < *v198);
              }
            }
            v197 += 504;
          }
          while (v197 != v377);
        }
        goto LABEL_392;
      }
    }
  }
  do
  {
LABEL_392:
    if (a8[2] + a7[2] >= (unint64_t)a3) {
      break;
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    id v228 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v229 = a8[2] + a7[2];
      *(_DWORD *)std::string buf = 134349313;
      *(void *)&uint8_t buf[4] = v229;
      *(_WORD *)&unsigned char buf[12] = 1025;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v228, OS_LOG_TYPE_DEBUG, "FenceCal: topping, %{public}zu, apsBudget, %{private}u", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      uint64_t v288 = a8[2] + a7[2];
      *(_DWORD *)v403 = 134349313;
      *(void *)&v403[4] = v288;
      *(_WORD *)&v403[12] = 1025;
      *(_DWORD *)&v403[14] = a3;
      v289 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v289);
      if (v289 != buf) {
        free(v289);
      }
    }
    uint64_t v231 = *a2;
    uint64_t v230 = a2[1];
    if (*a2 == v230)
    {
      char v232 = 0;
    }
    else
    {
      char v232 = 0;
      uint64_t v368 = a2[1];
      do
      {
        int v233 = *(_DWORD *)(v231 + 392);
        if ((v233 & 0x80000000) == 0)
        {
          signed int v234 = v233 + 1;
          if (v234 < (int)(-858993459 * ((*(void *)(v231 + 376) - *(void *)(v231 + 368)) >> 3)))
          {
            *(_DWORD *)(v231 + 392) = v234;
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            double v235 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(v231 + 55) >= 0) {
                size_t v236 = *(unsigned __int8 *)(v231 + 55);
              }
              else {
                size_t v236 = *(void *)(v231 + 40);
              }
              sub_1001110E4((uint64_t)v403, v236 + 1);
              if (v403[23] >= 0) {
                id v237 = v403;
              }
              else {
                id v237 = *(unsigned char **)v403;
              }
              if (v236)
              {
                if (*(char *)(v231 + 55) >= 0) {
                  double v238 = (const void *)(v231 + 32);
                }
                else {
                  double v238 = *(const void **)(v231 + 32);
                }
                memmove(v237, v238, v236);
              }
              *(_WORD *)&v237[v236] = 47;
              int v239 = *(char *)(v231 + 79);
              if (v239 >= 0) {
                unsigned int v240 = (const std::string::value_type *)(v231 + 56);
              }
              else {
                unsigned int v240 = *(const std::string::value_type **)(v231 + 56);
              }
              if (v239 >= 0) {
                std::string::size_type v241 = *(unsigned __int8 *)(v231 + 79);
              }
              else {
                std::string::size_type v241 = *(void *)(v231 + 64);
              }
              std::string v242 = std::string::append((std::string *)v403, v240, v241);
              long long v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
              v401.__r_.__value_.__r.__words[2] = v242->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v401.__r_.__value_.__l.__data_ = v243;
              v242->__r_.__value_.__l.__size_ = 0;
              v242->__r_.__value_.__r.__words[2] = 0;
              v242->__r_.__value_.__r.__words[0] = 0;
              if ((v403[23] & 0x80000000) != 0) {
                operator delete(*(void **)v403);
              }
              __int16 v244 = &v401;
              if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                __int16 v244 = (std::string *)v401.__r_.__value_.__r.__words[0];
              }
              int v245 = *(_DWORD *)(v231 + 392);
              unint64_t v246 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v231 + 376) - *(void *)(v231 + 368)) >> 3);
              *(_DWORD *)std::string buf = 136381187;
              *(void *)&uint8_t buf[4] = v244;
              *(_WORD *)&unsigned char buf[12] = 1025;
              *(_DWORD *)&buf[14] = v245;
              *(_WORD *)&unsigned char buf[18] = 2049;
              *(void *)&unsigned char buf[20] = v246;
              _os_log_impl((void *)&_mh_execute_header, v235, OS_LOG_TYPE_DEBUG, "FenceCal: Topping, %{private}s, fChosenScoreIndex, %{private}d, total, %{private}zu", buf, 0x1Cu);
              if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v401.__r_.__value_.__l.__data_);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F18B8);
              }
              if (*(char *)(v231 + 55) >= 0) {
                size_t v271 = *(unsigned __int8 *)(v231 + 55);
              }
              else {
                size_t v271 = *(void *)(v231 + 40);
              }
              sub_1001110E4((uint64_t)&v401, v271 + 1);
              if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v272 = &v401;
              }
              else {
                int v272 = (std::string *)v401.__r_.__value_.__r.__words[0];
              }
              if (v271)
              {
                if (*(char *)(v231 + 55) >= 0) {
                  uint64_t v273 = (const void *)(v231 + 32);
                }
                else {
                  uint64_t v273 = *(const void **)(v231 + 32);
                }
                memmove(v272, v273, v271);
              }
              *(_WORD *)((char *)&v272->__r_.__value_.__l.__data_ + v271) = 47;
              int v274 = *(char *)(v231 + 79);
              if (v274 >= 0) {
                double v275 = (const std::string::value_type *)(v231 + 56);
              }
              else {
                double v275 = *(const std::string::value_type **)(v231 + 56);
              }
              if (v274 >= 0) {
                std::string::size_type v276 = *(unsigned __int8 *)(v231 + 79);
              }
              else {
                std::string::size_type v276 = *(void *)(v231 + 64);
              }
              double v277 = std::string::append(&v401, v275, v276);
              long long v278 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
              int64_t v384 = v277->__r_.__value_.__r.__words[2];
              *(_OWORD *)v383 = v278;
              v277->__r_.__value_.__l.__size_ = 0;
              v277->__r_.__value_.__r.__words[2] = 0;
              v277->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v401.__r_.__value_.__l.__data_);
              }
              double v279 = v383;
              if (v384 < 0) {
                double v279 = (void **)v383[0];
              }
              int v280 = *(_DWORD *)(v231 + 392);
              unint64_t v281 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v231 + 376) - *(void *)(v231 + 368)) >> 3);
              *(_DWORD *)v403 = 136381187;
              *(void *)&v403[4] = v279;
              *(_WORD *)&v403[12] = 1025;
              *(_DWORD *)&v403[14] = v280;
              *(_WORD *)&v403[18] = 2049;
              *(void *)&v403[20] = v281;
              __int16 v282 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v384) < 0) {
                operator delete(v383[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v282);
              if (v282 != buf) {
                free(v282);
              }
            }
            uint64_t v247 = *(int *)(v231 + 392);
            uint64_t v248 = *(void *)(v231 + 368);
            if (*(char *)(v231 + 55) >= 0) {
              size_t v249 = *(unsigned __int8 *)(v231 + 55);
            }
            else {
              size_t v249 = *(void *)(v231 + 40);
            }
            sub_1001110E4((uint64_t)buf, v249 + 1);
            if (buf[23] >= 0) {
              uint64_t v250 = buf;
            }
            else {
              uint64_t v250 = *(unsigned char **)buf;
            }
            if (v249)
            {
              if (*(char *)(v231 + 55) >= 0) {
                uint64_t v251 = (const void *)(v231 + 32);
              }
              else {
                uint64_t v251 = *(const void **)(v231 + 32);
              }
              memmove(v250, v251, v249);
            }
            *(_WORD *)&v250[v249] = 47;
            int v252 = *(char *)(v231 + 79);
            if (v252 >= 0) {
              double v253 = (const std::string::value_type *)(v231 + 56);
            }
            else {
              double v253 = *(const std::string::value_type **)(v231 + 56);
            }
            if (v252 >= 0) {
              std::string::size_type v254 = *(unsigned __int8 *)(v231 + 79);
            }
            else {
              std::string::size_type v254 = *(void *)(v231 + 64);
            }
            uint64_t v255 = std::string::append((std::string *)buf, v253, v254);
            v373 = (void *)v255->__r_.__value_.__r.__words[0];
            int v256 = SHIBYTE(v255->__r_.__value_.__r.__words[2]);
            v255->__r_.__value_.__r.__words[0] = 0;
            v255->__r_.__value_.__l.__size_ = 0;
            v255->__r_.__value_.__r.__words[2] = 0;
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            int v378 = v256;
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F18B8);
            }
            double v257 = (unint64_t *)(v248 + 40 * (int)v247);
            unsigned int v258 = (unint64_t *)(v248 + 40 * (int)(v247 - (v247 > 0)));
            long long v259 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v260 = *v258;
              unint64_t v261 = *v257;
              *(_DWORD *)std::string buf = 134283777;
              *(void *)&uint8_t buf[4] = v260;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&buf[14] = v261;
              _os_log_impl((void *)&_mh_execute_header, v259, OS_LOG_TYPE_DEBUG, "FenceCal: topping, from APs, %{private}zu, to APs, %{private}zu", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022F18B8);
              }
              unint64_t v283 = *v258;
              unint64_t v284 = *v257;
              *(_DWORD *)v403 = 134283777;
              *(void *)&v403[4] = v283;
              *(_WORD *)&v403[12] = 2049;
              *(void *)&v403[14] = v284;
              long long v285 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v285);
              if (v285 != buf) {
                free(v285);
              }
            }
            unint64_t v262 = *v258;
            if (v262 < *v257)
            {
              uint64_t v263 = *(void *)(v231 + 344) + 96 * v262;
              v264 = (unsigned __int8 *)(v231 + 288);
              do
              {
                if (v263 == *(void *)(v231 + 352)) {
                  break;
                }
                std::string::size_type v265 = v231 + 56;
                if (*(char *)(v231 + 79) < 0) {
                  std::string::size_type v265 = *(void *)(v231 + 56);
                }
                if (sub_100CC0F4C(v263, *(unsigned char *)(v231 + 476) != 0, (uint64_t)a7, (uint64_t)a8, a3, (uint64_t)&v390, v369, v265))
                {
                  double v266 = *(unsigned __int8 **)(v231 + 280);
                  if (v266 != v264)
                  {
                    do
                    {
                      uint64_t v267 = sub_10001A4C4((uint64_t)a6, v266 + 32);
                      if (a6 + 1 == (uint64_t **)v267)
                      {
                        *(void *)std::string buf = v266 + 32;
                        uint64_t v267 = (uint64_t)sub_100CC94F4(a6, v266 + 32, (uint64_t)&unk_101D0B290, (long long **)buf);
                        int v268 = 1;
                      }
                      else
                      {
                        int v268 = *(_DWORD *)(v267 + 280) + 1;
                      }
                      *(_DWORD *)(v267 + 280) = v268;
                      double v269 = (unsigned __int8 *)*((void *)v266 + 1);
                      if (v269)
                      {
                        do
                        {
                          double v270 = v269;
                          double v269 = *(unsigned __int8 **)v269;
                        }
                        while (v269);
                      }
                      else
                      {
                        do
                        {
                          double v270 = (unsigned __int8 *)*((void *)v266 + 2);
                          BOOL v68 = *(void *)v270 == (void)v266;
                          double v266 = v270;
                        }
                        while (!v68);
                      }
                      double v266 = v270;
                    }
                    while (v270 != v264);
                  }
                }
                ++v262;
                v263 += 96;
              }
              while (v262 < *v257);
            }
            if (v378 < 0) {
              operator delete(v373);
            }
            char v232 = 1;
            uint64_t v230 = v368;
          }
        }
        v231 += 504;
      }
      while (v231 != v230);
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    long long v286 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v287 = a8[2] + a7[2];
      *(_DWORD *)std::string buf = 134283777;
      *(void *)&uint8_t buf[4] = v287;
      *(_WORD *)&unsigned char buf[12] = 1025;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v286, OS_LOG_TYPE_DEBUG, "FenceCal: finised topping, %{private}zu, apsBudget, %{private}u", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      uint64_t v290 = a8[2] + a7[2];
      *(_DWORD *)v403 = 134283777;
      *(void *)&v403[4] = v290;
      *(_WORD *)&v403[12] = 1025;
      *(_DWORD *)&v403[14] = a3;
      int v291 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v291);
      if (v291 != buf) {
        free(v291);
      }
    }
  }
  while ((v232 & 1) != 0);
  uint64_t v292 = *a2;
  uint64_t v293 = a2[1];
  char v294 = 1;
  if (*a2 == v293)
  {
    int v331 = 1;
    int v296 = 1;
LABEL_590:
    int v332 = 1;
    goto LABEL_592;
  }
  char v295 = 1;
  int v296 = 1;
  do
  {
    if (!byte_102473F88) {
      goto LABEL_563;
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    double v297 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v292 + 55) >= 0) {
        size_t v298 = *(unsigned __int8 *)(v292 + 55);
      }
      else {
        size_t v298 = *(void *)(v292 + 40);
      }
      sub_1001110E4((uint64_t)v403, v298 + 1);
      if (v403[23] >= 0) {
        double v299 = v403;
      }
      else {
        double v299 = *(unsigned char **)v403;
      }
      if (v298)
      {
        if (*(char *)(v292 + 55) >= 0) {
          v300 = (const void *)(v292 + 32);
        }
        else {
          v300 = *(const void **)(v292 + 32);
        }
        memmove(v299, v300, v298);
      }
      *(_WORD *)&v299[v298] = 47;
      int v301 = *(char *)(v292 + 79);
      if (v301 >= 0) {
        v302 = (const std::string::value_type *)(v292 + 56);
      }
      else {
        v302 = *(const std::string::value_type **)(v292 + 56);
      }
      if (v301 >= 0) {
        std::string::size_type v303 = *(unsigned __int8 *)(v292 + 79);
      }
      else {
        std::string::size_type v303 = *(void *)(v292 + 64);
      }
      int v304 = std::string::append((std::string *)v403, v302, v303);
      long long v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
      v401.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v401.__r_.__value_.__l.__data_ = v305;
      v304->__r_.__value_.__l.__size_ = 0;
      v304->__r_.__value_.__r.__words[2] = 0;
      v304->__r_.__value_.__r.__words[0] = 0;
      if ((v403[23] & 0x80000000) != 0) {
        operator delete(*(void **)v403);
      }
      BOOL v306 = 0;
      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v307 = &v401;
      }
      else {
        double v307 = (std::string *)v401.__r_.__value_.__r.__words[0];
      }
      int v308 = *(unsigned __int8 *)(v292 + 476);
      int v309 = *(_DWORD *)(v292 + 392);
      double v311 = *(void **)(v292 + 368);
      __int16 v310 = *(void **)(v292 + 376);
      uint64_t v312 = *(void *)(v292 + 352) - *(void *)(v292 + 344);
      if (!v312) {
        goto LABEL_553;
      }
      int v313 = 0;
      if (v310 == v311) {
        goto LABEL_560;
      }
      BOOL v306 = *v311 != 0;
      if (!*(unsigned char *)(v292 + 476))
      {
        if (*v311) {
          BOOL v314 = v309 <= 0;
        }
        else {
          BOOL v314 = 1;
        }
        int v313 = !v314;
      }
      else
      {
LABEL_553:
        int v313 = v306;
      }
LABEL_560:
      *(_DWORD *)std::string buf = 136316930;
      *(void *)&uint8_t buf[4] = v307;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v308;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v309;
      *(_WORD *)&unsigned char buf[24] = 2048;
      *(void *)&buf[26] = 0xAAAAAAAAAAAAAAABLL * (v312 >> 5);
      *(_WORD *)&buf[34] = 2048;
      *(void *)&unsigned char buf[36] = 0xCCCCCCCCCCCCCCCDLL * (v310 - v311);
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v306;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v313;
      *(_WORD *)&buf[56] = 1024;
      *(_DWORD *)&buf[58] = v364;
      _os_log_impl((void *)&_mh_execute_header, v297, OS_LOG_TYPE_DEBUG, "FenceCal: fence, %s, isExit, %d, fChosenScoreIndex, %d, fChosenAPs, %zu, fChosenAPsScores, %zu, canBeMonitored, %d, canBeMonitoredInGroup, %d, numOfExitFences, %u", buf, 0x3Eu);
      if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v401.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      sub_100918454((const void **)(v292 + 32), &v401);
      BOOL v320 = 0;
      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v321 = &v401;
      }
      else {
        __int16 v321 = (std::string *)v401.__r_.__value_.__r.__words[0];
      }
      __int16 v323 = *(void **)(v292 + 368);
      uint64_t v322 = *(void **)(v292 + 376);
      uint64_t v324 = *(void *)(v292 + 352) - *(void *)(v292 + 344);
      v379 = v321;
      if (v324 && v322 != v323) {
        BOOL v320 = *v323 != 0;
      }
      int v325 = *(unsigned __int8 *)(v292 + 476);
      int v374 = *(_DWORD *)(v292 + 392);
      unint64_t v326 = 0xAAAAAAAAAAAAAAABLL * (v324 >> 5);
      unint64_t v327 = 0xCCCCCCCCCCCCCCCDLL * (v322 - v323);
      BOOL v328 = v320;
      BOOL v329 = sub_100CC624C(v292);
      *(_DWORD *)v403 = 136316930;
      *(void *)&v403[4] = v379;
      *(_WORD *)&v403[12] = 1024;
      *(_DWORD *)&v403[14] = v325;
      *(_WORD *)&v403[18] = 1024;
      *(_DWORD *)&v403[20] = v374;
      *(_WORD *)&v403[24] = 2048;
      *(void *)&v403[26] = v326;
      *(_WORD *)&v403[34] = 2048;
      *(void *)&v403[36] = v327;
      *(_WORD *)&v403[44] = 1024;
      *(_DWORD *)&v403[46] = v328;
      *(_WORD *)&v403[50] = 1024;
      *(_DWORD *)&v403[52] = v329;
      *(_WORD *)&v403[56] = 1024;
      *(_DWORD *)&v403[58] = v364;
      uint64_t v330 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v401.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v330);
      if (v330 != buf) {
        free(v330);
      }
    }
LABEL_563:
    if (*(void *)(v292 + 352) == *(void *)(v292 + 344)
      || (double v315 = *(uint64_t **)(v292 + 368), *(uint64_t **)(v292 + 376) == v315))
    {
      int v296 = 0;
      BOOL v319 = 0;
      char v318 = 0;
      LOBYTE(v317) = 0;
      if (*(unsigned char *)(v292 + 476)) {
        goto LABEL_568;
      }
    }
    else
    {
      uint64_t v316 = *v315;
      BOOL v317 = *v315 != 0;
      v296 &= v317;
      if (*(unsigned char *)(v292 + 476))
      {
        char v318 = v295 & (v316 != 0);
LABEL_568:
        v294 &= v317;
        char v295 = v318;
        goto LABEL_573;
      }
      if (v316) {
        BOOL v319 = *(_DWORD *)(v292 + 392) > 0;
      }
      else {
        BOOL v319 = 0;
      }
    }
    v295 &= v319;
LABEL_573:
    v292 += 504;
  }
  while (v292 != v293);
  if (v295)
  {
    int v331 = 1;
    goto LABEL_590;
  }
  int v331 = 0;
  int v332 = (v364 != 0) & v294;
LABEL_592:
  unsigned int v381 = v332;
  if (byte_102473F88)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    __int16 v333 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v334 = 0xEFBEFBEFBEFBEFBFLL * ((a2[1] - *a2) >> 3);
      *(_DWORD *)std::string buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v381;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v334;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v364;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v296;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&uint8_t buf[32] = v331;
      *(_WORD *)&unsigned char buf[36] = 1024;
      *(_DWORD *)&buf[38] = v294 & 1;
      _os_log_impl((void *)&_mh_execute_header, v333, OS_LOG_TYPE_DEBUG, "FenceCal: calculateGroup, end, return val, isOK, %d, numOfFences, %zu, numOfExitFences, %d, combinedCanMonitor, %d, combinedCanMonitorGroup, %d, combinedCanMonitorExitGroup, %d", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      unint64_t v361 = 0xEFBEFBEFBEFBEFBFLL * ((a2[1] - *a2) >> 3);
      *(_DWORD *)v403 = 67110400;
      *(_DWORD *)&v403[4] = v381;
      *(_WORD *)&v403[8] = 2048;
      *(void *)&v403[10] = v361;
      *(_WORD *)&v403[18] = 1024;
      *(_DWORD *)&v403[20] = v364;
      *(_WORD *)&v403[24] = 1024;
      *(_DWORD *)&v403[26] = v296;
      *(_WORD *)&v403[30] = 1024;
      *(_DWORD *)&v403[32] = v331;
      *(_WORD *)&v403[36] = 1024;
      *(_DWORD *)&v403[38] = v294 & 1;
      v362 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v362);
      if (v362 != buf) {
        free(v362);
      }
    }
    v335 = (void *)*a7;
    if ((void *)*a7 != a7 + 1)
    {
      uint64_t v336 = 0;
      do
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        v337 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v338 = a7[2];
          CFAbsoluteTimeGetCurrent();
          sub_10106E024((uint64_t)(v335 + 5));
          if (v403[23] >= 0) {
            v339 = v403;
          }
          else {
            v339 = *(unsigned char **)v403;
          }
          *(_DWORD *)std::string buf = 134218498;
          *(void *)&uint8_t buf[4] = v336;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v338;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&unsigned char buf[24] = v339;
          _os_log_impl((void *)&_mh_execute_header, v337, OS_LOG_TYPE_DEBUG, "Return entry AP, index, %2zu, %2zu, %s", buf, 0x20u);
          if ((v403[23] & 0x80000000) != 0) {
            operator delete(*(void **)v403);
          }
          ++v336;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          uint64_t v342 = a7[2];
          CFAbsoluteTimeGetCurrent();
          sub_10106E024((uint64_t)(v335 + 5));
          v343 = &v401;
          if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v343 = (std::string *)v401.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v403 = 134218498;
          *(void *)&v403[4] = v336;
          *(_WORD *)&v403[12] = 2048;
          *(void *)&v403[14] = v342;
          *(_WORD *)&v403[22] = 2080;
          *(void *)&v403[24] = v343;
          v344 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v401.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v344);
          if (v344 != buf) {
            free(v344);
          }
          ++v336;
        }
        v340 = (void *)v335[1];
        if (v340)
        {
          do
          {
            v341 = v340;
            v340 = (void *)*v340;
          }
          while (v340);
        }
        else
        {
          do
          {
            v341 = (void *)v335[2];
            BOOL v68 = *v341 == (void)v335;
            v335 = v341;
          }
          while (!v68);
        }
        v335 = v341;
      }
      while (v341 != a7 + 1);
    }
    v345 = (void *)*a8;
    if ((void *)*a8 != a8 + 1)
    {
      uint64_t v346 = 0;
      do
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        v347 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v348 = a8[2];
          CFAbsoluteTimeGetCurrent();
          sub_10106E024((uint64_t)(v345 + 5));
          if (v403[23] >= 0) {
            v349 = v403;
          }
          else {
            v349 = *(unsigned char **)v403;
          }
          *(_DWORD *)std::string buf = 134218498;
          *(void *)&uint8_t buf[4] = v346;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v348;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&unsigned char buf[24] = v349;
          _os_log_impl((void *)&_mh_execute_header, v347, OS_LOG_TYPE_DEBUG, "Return exit AP, index, %2zu, %2zu, %s", buf, 0x20u);
          if ((v403[23] & 0x80000000) != 0) {
            operator delete(*(void **)v403);
          }
          ++v346;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F18B8);
          }
          uint64_t v352 = a8[2];
          CFAbsoluteTimeGetCurrent();
          sub_10106E024((uint64_t)(v345 + 5));
          v353 = &v401;
          if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v353 = (std::string *)v401.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v403 = 134218498;
          *(void *)&v403[4] = v346;
          *(_WORD *)&v403[12] = 2048;
          *(void *)&v403[14] = v352;
          *(_WORD *)&v403[22] = 2080;
          *(void *)&v403[24] = v353;
          v354 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v401.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, std::optional<CLWifiService_Type::AccessPoint>, std::map<CLFenceManager_Type::Fence, int> &, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)", "%s\n", v354);
          if (v354 != buf) {
            free(v354);
          }
          ++v346;
        }
        v350 = (void *)v345[1];
        if (v350)
        {
          do
          {
            v351 = v350;
            v350 = (void *)*v350;
          }
          while (v350);
        }
        else
        {
          do
          {
            v351 = (void *)v345[2];
            BOOL v68 = *v351 == (void)v345;
            v345 = v351;
          }
          while (!v68);
        }
        v345 = v351;
      }
      while (v351 != a8 + 1);
    }
  }
  sub_10078A7B0((uint64_t)&v386, v387);
  sub_1000F5BB0((uint64_t)&v388, v389[0]);
  sub_1000F5BB0((uint64_t)&v390, v391[0]);
  if (__p)
  {
    v394 = (char *)__p;
    operator delete(__p);
  }
  if (v396)
  {
    v397 = v396;
    operator delete(v396);
  }
  return v381;
}

void sub_100CC5D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CC6004(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *sub_100CC9448(a1, &v4, a2);
  if (!v2) {
    sub_10000EDDC("map::at:  key not found");
  }
  return v2 + 120;
}

uint64_t *sub_100CC6044(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102473FC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a1;
    int v6 = __cxa_guard_acquire(&qword_102473FC8);
    a1 = v5;
    if (v6)
    {
      qword_102473FA0 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      unk_102473FA8 = _Q0;
      unk_102473FB8 = _Q0;
      __cxa_guard_release(&qword_102473FC8);
      a1 = v5;
    }
  }
  unsigned int v1 = *(_DWORD *)(a1 + 392);
  if ((v1 & 0x80000000) == 0) {
    return (uint64_t *)(*(void *)(a1 + 368) + 40 * v1);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  int64x2_t v3 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "dCOLLECT: no chosen score, was calculateGroup called?", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "const Score &CLWifiFenceCalculator::getChosenGroupScore() const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return &qword_102473FA0;
}

BOOL sub_100CC624C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 344);
  uint64_t v1 = *(void *)(a1 + 352);
  if (*(unsigned char *)(a1 + 476))
  {
    if (v1 != v2)
    {
      int64x2_t v3 = *(void **)(a1 + 368);
      if (*(void **)(a1 + 376) != v3) {
        return *v3 != 0;
      }
    }
  }
  else if (v1 != v2)
  {
    uint64_t v5 = *(void **)(a1 + 368);
    if (*(void **)(a1 + 376) != v5)
    {
      if (*v5) {
        return *(_DWORD *)(a1 + 392) > 0;
      }
    }
  }
  return 0;
}

void sub_100CC62AC(uint64_t a1, double **a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102480F78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102480F78))
  {
    sub_101171D90((uint64_t)dbl_102480F50);
    __cxa_guard_release(&qword_102480F78);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v13 = (uint64_t)*a2;
  }
  else
  {
    uint64_t v16 = (uint64_t *)a2;
    do
    {
      double v6 = -1.0;
      if (*(double *)(a1 + 20) > 0.0) {
        double v6 = sub_101171EA0(dbl_102480F50, a1, v4[13], v4[14]);
      }
      v4[61] = v6;
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F18B8);
      }
      long long v7 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *((void *)v4 + 61);
        sub_100C8C864((uint64_t)(v4 + 4));
        unint64_t v9 = __p;
        if (v26 < 0) {
          unint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 134283779;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v18 = 2081;
        int v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "FenceCal: fDistanceFromCurrentLocation, %{private}.2lf, %{private}s", buf, 0x16u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F18B8);
        }
        uint64_t v10 = *((void *)v4 + 61);
        sub_100C8C864((uint64_t)(v4 + 4));
        unint64_t v11 = buf;
        if (v20 < 0) {
          unint64_t v11 = *(unsigned char **)buf;
        }
        int v21 = 134283779;
        uint64_t v22 = v10;
        __int16 v23 = 2081;
        long long v24 = v11;
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        if (v20 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiFenceCalculator::sortCalculatorGroup(const CLDaemonLocation &, std::vector<CLWifiFenceCalculator> &)", "%s\n", v12);
        if (v12 != (char *)__p) {
          free(v12);
        }
      }
      v4 += 63;
    }
    while (v4 != v5);
    uint64_t v13 = *v16;
    uint64_t v4 = (double *)v16[1];
  }
  unint64_t v14 = 126 - 2 * __clz(0xEFBEFBEFBEFBEFBFLL * (((uint64_t)v4 - v13) >> 3));
  if (v4 == (double *)v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  sub_100CC9700(v13, (unint64_t)v4, v15, 1);
}

void sub_100CC65C4(_Unwind_Exception *a1)
{
}

float sub_100CC65E4(float *a1, float *a2)
{
  float v2 = *a1;
  if (*a1 <= 0.0) {
    sub_101A89E3C();
  }
  float v3 = *a2;
  float result = -1.0;
  if (*a2 <= -1.0) {
    sub_101A89E68();
  }
  if (v2 >= 0.0 && v3 >= 0.0)
  {
    if (v2 <= 30.0)
    {
      return *a2;
    }
    else if (v2 <= 570.0)
    {
      return (float)((float)((float)(v2 + -30.0) * -0.0016667) + 1.0) * v3;
    }
    else
    {
      return v3 * 0.1;
    }
  }
  return result;
}

void sub_100CC667C(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t **sub_100CC66AC(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    double v6 = *result;
    long long v7 = result[1];
    *float result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    int v21 = result;
    uint64_t v22 = v8;
    __int16 v23 = v8;
    if (v8)
    {
      uint64_t v22 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = (uint64_t *)a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)(v9 + 7));
          std::string::operator=((std::string *)(v8 + 10), (const std::string *)(v9 + 10));
          long long v10 = *(_OWORD *)(v9 + 13);
          long long v11 = *(_OWORD *)(v9 + 15);
          long long v12 = *(_OWORD *)(v9 + 17);
          *(_OWORD *)(v8 + 19) = *(_OWORD *)(v9 + 19);
          *(_OWORD *)(v8 + 17) = v12;
          *(_OWORD *)(v8 + 15) = v11;
          *(_OWORD *)(v8 + 13) = v10;
          long long v13 = *(_OWORD *)(v9 + 21);
          long long v14 = *(_OWORD *)(v9 + 23);
          long long v15 = *(_OWORD *)(v9 + 25);
          *(uint64_t *)((char *)v8 + 213) = *(uint64_t *)((char *)v9 + 213);
          *(_OWORD *)(v8 + 25) = v15;
          *(_OWORD *)(v8 + 23) = v14;
          *(_OWORD *)(v8 + 21) = v13;
          std::string::operator=((std::string *)(v8 + 28), (const std::string *)(v9 + 28));
          uint64_t v16 = (void *)v8[31];
          v8[31] = (uint64_t)(id)v9[31];

          if (v8 != v9) {
            sub_10027C3B4((char *)v8 + 256, (char *)v9[32], v9[33], (v9[33] - v9[32]) >> 4);
          }
          sub_100CC68A8(v5, (uint64_t)v23);
          uint64_t v8 = v22;
          __int16 v23 = v22;
          if (v22) {
            uint64_t v22 = sub_1002FABD8((uint64_t)v22);
          }
          unint64_t v17 = (long long *)v9[1];
          if (v17)
          {
            do
            {
              a2 = v17;
              unint64_t v17 = *(long long **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (long long *)v9[2];
              BOOL v18 = *(void *)a2 == (void)v9;
              unint64_t v9 = (uint64_t *)a2;
            }
            while (!v18);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = (uint64_t *)a2;
        }
        while (a2 != a3);
      }
    }
    float result = (uint64_t **)sub_100CC6930((uint64_t)&v21);
  }
  if (a2 != a3)
  {
    do
    {
      float result = (uint64_t **)sub_100CC6988((uint64_t)v5, a2 + 2);
      int v19 = (long long *)*((void *)a2 + 1);
      if (v19)
      {
        do
        {
          char v20 = v19;
          int v19 = *(long long **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          char v20 = (long long *)*((void *)a2 + 2);
          BOOL v18 = *(void *)v20 == (void)a2;
          a2 = v20;
        }
        while (!v18);
      }
      a2 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

void sub_100CC6894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100CC6930((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC68A8(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!sub_10001A540((unsigned __int8 *)(a2 + 32), (unsigned __int8 *)v4 + 32)) {
          break;
        }
        uint64_t v4 = *v5;
        double v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    double v6 = v5 + 1;
  }
  else
  {
    double v6 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

uint64_t sub_100CC6930(uint64_t a1)
{
  sub_100A0D280(*(void *)a1, *(void **)(a1 + 16));
  float v2 = *(void **)(a1 + 8);
  if (v2)
  {
    float v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        float v2 = v3;
        float v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_100A0D280(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100CC6988(uint64_t a1, long long *a2)
{
  sub_100A0D764(a1, a2, (uint64_t)v9);
  uint64_t v4 = (uint64_t **)(a1 + 8);
  float v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = (unsigned __int8 *)(v9[0] + 4);
    do
    {
      while (1)
      {
        uint64_t v4 = (uint64_t **)v3;
        if (!sub_10001A540(v5, (unsigned __int8 *)v3 + 32)) {
          break;
        }
        float v3 = *v4;
        double v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      float v3 = v4[1];
    }
    while (v3);
    double v6 = v4 + 1;
  }
  else
  {
    double v6 = (uint64_t **)(a1 + 8);
  }
LABEL_9:
  sub_1000EDF90((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  long long v7 = v9[0];
  v9[0] = 0;
  sub_100A0D7D0((uint64_t)v9, 0);
  return v7;
}

void sub_100CC6A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100A0D7D0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100CC6A4C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100CC6A7C(unint64_t a1, double *a2, uint64_t a3, char a4)
{
  while (2)
  {
    long long v10 = a2 - 12;
    uint64_t v305 = (uint64_t)(a2 - 36);
    uint64_t v306 = (uint64_t)(a2 - 24);
    unint64_t v11 = a1;
    uint64_t v308 = (uint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 5);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                float v151 = *(a2 - 8);
                *(float *)&long long v317 = v151;
                *(float *)&long long v311 = (float)(int)sub_10106EC00((uint64_t)v10);
                float v152 = sub_100CC65E4((float *)&v317, (float *)&v311);
                float v153 = *(double *)(a1 + 32);
                *(float *)&long long v317 = v153;
                *(float *)&long long v311 = (float)(int)sub_10106EC00(a1);
                float v154 = sub_100CC65E4((float *)&v317, (float *)&v311);
                if (v152 > 0.0 && v152 > v154)
                {
                  long long v156 = *(_OWORD *)(a1 + 16);
                  long long v317 = *(_OWORD *)a1;
                  long long v318 = v156;
                  long long v157 = *(_OWORD *)(a1 + 32);
                  long long v158 = *(_OWORD *)(a1 + 48);
                  long long v159 = *(_OWORD *)(a1 + 80);
                  long long v321 = *(_OWORD *)(a1 + 64);
                  long long v322 = v159;
                  long long v319 = v157;
                  long long v320 = v158;
                  long long v160 = *((_OWORD *)v10 + 5);
                  long long v162 = *((_OWORD *)v10 + 2);
                  long long v161 = *((_OWORD *)v10 + 3);
                  *(_OWORD *)(a1 + 64) = *((_OWORD *)v10 + 4);
                  *(_OWORD *)(a1 + 80) = v160;
                  *(_OWORD *)(a1 + 32) = v162;
                  *(_OWORD *)(a1 + 48) = v161;
                  long long v163 = *((_OWORD *)v10 + 1);
                  *(_OWORD *)a1 = *(_OWORD *)v10;
                  *(_OWORD *)(a1 + 16) = v163;
                  long long v164 = v318;
                  *(_OWORD *)long long v10 = v317;
                  *((_OWORD *)v10 + 1) = v164;
                  long long v165 = v319;
                  long long v166 = v320;
                  long long v167 = v322;
                  *((_OWORD *)v10 + 4) = v321;
                  *((_OWORD *)v10 + 5) = v167;
                  *((_OWORD *)v10 + 2) = v165;
                  *((_OWORD *)v10 + 3) = v166;
                }
                break;
              case 3:
                sub_100CC7F28(a1, a1 + 96, (uint64_t)v10);
                break;
              case 4:
                sub_100CC85E8(a1, a1 + 96, a1 + 192, (uint64_t)v10);
                break;
              case 5:
                sub_100CC7C28(a1, a1 + 96, a1 + 192, a1 + 288, (uint64_t)v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 2303)
          {
            if (a4)
            {
              if ((double *)a1 != a2)
              {
                uint64_t v168 = a1 + 96;
                if ((double *)(a1 + 96) != a2)
                {
                  uint64_t v169 = 0;
                  double v170 = (long long *)a1;
                  do
                  {
                    uint64_t v171 = (uint64_t)v170;
                    double v170 = (long long *)v168;
                    float v172 = *(double *)(v171 + 128);
                    *(float *)&long long v317 = v172;
                    *(float *)&long long v311 = (float)(int)sub_10106EC00(v168);
                    float v173 = sub_100CC65E4((float *)&v317, (float *)&v311);
                    float v174 = *(double *)(v171 + 32);
                    *(float *)&long long v317 = v174;
                    *(float *)&long long v311 = (float)(int)sub_10106EC00(v171);
                    float v175 = sub_100CC65E4((float *)&v317, (float *)&v311);
                    if (v173 > 0.0 && v173 > v175)
                    {
                      long long v177 = v170[1];
                      long long v317 = *v170;
                      long long v318 = v177;
                      long long v178 = v170[2];
                      long long v179 = v170[3];
                      long long v180 = v170[5];
                      long long v321 = v170[4];
                      long long v322 = v180;
                      long long v319 = v178;
                      long long v320 = v179;
                      uint64_t v181 = v169;
                      while (1)
                      {
                        uint64_t v182 = (double *)(a1 + v181);
                        long long v183 = *(_OWORD *)(a1 + v181 + 48);
                        *((_OWORD *)v182 + 8) = *(_OWORD *)(a1 + v181 + 32);
                        *((_OWORD *)v182 + 9) = v183;
                        long long v184 = *(_OWORD *)(a1 + v181 + 80);
                        *((_OWORD *)v182 + 10) = *(_OWORD *)(a1 + v181 + 64);
                        *((_OWORD *)v182 + 11) = v184;
                        long long v185 = *(_OWORD *)(a1 + v181 + 16);
                        *((_OWORD *)v182 + 6) = *(_OWORD *)(a1 + v181);
                        *((_OWORD *)v182 + 7) = v185;
                        if (!v181) {
                          break;
                        }
                        float v186 = *(double *)&v319;
                        *(float *)&long long v311 = v186;
                        v323[0] = (float)(int)sub_10106EC00((uint64_t)&v317);
                        float v187 = sub_100CC65E4((float *)&v311, v323);
                        float v188 = *(v182 - 8);
                        *(float *)&long long v311 = v188;
                        v323[0] = (float)(int)sub_10106EC00((uint64_t)(v182 - 12));
                        float v189 = sub_100CC65E4((float *)&v311, v323);
                        v181 -= 96;
                        if (v187 <= 0.0 || v187 <= v189)
                        {
                          unint64_t v190 = (_OWORD *)(a1 + v181 + 96);
                          goto LABEL_117;
                        }
                      }
                      unint64_t v190 = (_OWORD *)a1;
LABEL_117:
                      long long v191 = v318;
                      *unint64_t v190 = v317;
                      v190[1] = v191;
                      long long v192 = v319;
                      long long v193 = v320;
                      long long v194 = v322;
                      v190[4] = v321;
                      v190[5] = v194;
                      v190[2] = v192;
                      v190[3] = v193;
                      a2 = (double *)v308;
                    }
                    uint64_t v168 = (uint64_t)(v170 + 6);
                    v169 += 96;
                  }
                  while (v170 + 6 != (long long *)a2);
                }
              }
            }
            else if ((double *)a1 != a2)
            {
              uint64_t v282 = a1 + 96;
              if ((double *)(a1 + 96) != a2)
              {
                uint64_t v283 = a1 - 96;
                do
                {
                  uint64_t v284 = a1;
                  a1 = v282;
                  float v285 = *(double *)(v284 + 128);
                  *(float *)&long long v317 = v285;
                  *(float *)&long long v311 = (float)(int)sub_10106EC00(v282);
                  float v286 = sub_100CC65E4((float *)&v317, (float *)&v311);
                  float v287 = *(double *)(v284 + 32);
                  *(float *)&long long v317 = v287;
                  *(float *)&long long v311 = (float)(int)sub_10106EC00(v284);
                  float v288 = sub_100CC65E4((float *)&v317, (float *)&v311);
                  if (v286 > 0.0 && v286 > v288)
                  {
                    long long v290 = *(_OWORD *)(a1 + 16);
                    long long v317 = *(_OWORD *)a1;
                    long long v318 = v290;
                    long long v291 = *(_OWORD *)(a1 + 32);
                    long long v292 = *(_OWORD *)(a1 + 48);
                    long long v293 = *(_OWORD *)(a1 + 80);
                    long long v321 = *(_OWORD *)(a1 + 64);
                    long long v322 = v293;
                    long long v319 = v291;
                    long long v320 = v292;
                    uint64_t v294 = v283;
                    do
                    {
                      long long v295 = *(_OWORD *)(v294 + 176);
                      *(_OWORD *)(v294 + 256) = *(_OWORD *)(v294 + 160);
                      *(_OWORD *)(v294 + 272) = v295;
                      long long v296 = *(_OWORD *)(v294 + 144);
                      *(_OWORD *)(v294 + 224) = *(_OWORD *)(v294 + 128);
                      *(_OWORD *)(v294 + 240) = v296;
                      long long v297 = *(_OWORD *)(v294 + 112);
                      *(_OWORD *)(v294 + 192) = *(_OWORD *)(v294 + 96);
                      *(_OWORD *)(v294 + 208) = v297;
                      *(float *)&long long v296 = *(double *)&v319;
                      LODWORD(v311) = v296;
                      v323[0] = (float)(int)sub_10106EC00((uint64_t)&v317);
                      float v298 = sub_100CC65E4((float *)&v311, v323);
                      float v299 = *(double *)(v294 + 32);
                      *(float *)&long long v311 = v299;
                      v323[0] = (float)(int)sub_10106EC00(v294);
                      float v300 = sub_100CC65E4((float *)&v311, v323);
                      v294 -= 96;
                    }
                    while (v298 > 0.0 && v298 > v300);
                    long long v301 = v318;
                    *(_OWORD *)(v294 + 192) = v317;
                    *(_OWORD *)(v294 + 208) = v301;
                    long long v302 = v319;
                    long long v303 = v320;
                    long long v304 = v322;
                    *(_OWORD *)(v294 + 256) = v321;
                    *(_OWORD *)(v294 + 272) = v304;
                    *(_OWORD *)(v294 + 224) = v302;
                    *(_OWORD *)(v294 + 240) = v303;
                  }
                  uint64_t v282 = a1 + 96;
                  v283 += 96;
                }
                while ((double *)(a1 + 96) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((double *)a1 != a2)
            {
              int64_t v195 = (unint64_t)(v13 - 2) >> 1;
              int64_t v307 = v195;
              do
              {
                int64_t v196 = v195;
                if (v307 >= v195)
                {
                  uint64_t v197 = (2 * v195) | 1;
                  uint64_t v198 = a1 + 96 * v197;
                  if (2 * v195 + 2 < v13)
                  {
                    float v199 = *(double *)(a1 + 96 * v197 + 32);
                    *(float *)&long long v317 = v199;
                    *(float *)&long long v311 = (float)(int)sub_10106EC00(a1 + 96 * v197);
                    float v200 = sub_100CC65E4((float *)&v317, (float *)&v311);
                    float v201 = *(double *)(v198 + 128);
                    *(float *)&long long v317 = v201;
                    *(float *)&long long v311 = (float)(int)sub_10106EC00(v198 + 96);
                    if (((v200 > 0.0) & (v200 > sub_100CC65E4((float *)&v317, (float *)&v311))) != 0)
                    {
                      v198 += 96;
                      uint64_t v197 = 2 * v196 + 2;
                    }
                  }
                  uint64_t v202 = a1 + 96 * v196;
                  float v203 = *(double *)(v198 + 32);
                  *(float *)&long long v317 = v203;
                  *(float *)&long long v311 = (float)(int)sub_10106EC00(v198);
                  float v204 = sub_100CC65E4((float *)&v317, (float *)&v311);
                  float v205 = *(double *)(v202 + 32);
                  *(float *)&long long v317 = v205;
                  *(float *)&long long v311 = (float)(int)sub_10106EC00(v202);
                  float v206 = sub_100CC65E4((float *)&v317, (float *)&v311);
                  if (v204 <= 0.0 || v204 <= v206)
                  {
                    long long v207 = *(_OWORD *)(v202 + 16);
                    long long v317 = *(_OWORD *)v202;
                    long long v318 = v207;
                    long long v208 = *(_OWORD *)(v202 + 32);
                    long long v209 = *(_OWORD *)(v202 + 48);
                    long long v210 = *(_OWORD *)(v202 + 80);
                    long long v321 = *(_OWORD *)(v202 + 64);
                    long long v322 = v210;
                    long long v319 = v208;
                    long long v320 = v209;
                    while (1)
                    {
                      std::string::size_type v211 = (_OWORD *)v198;
                      long long v212 = *(_OWORD *)(v198 + 16);
                      *(_OWORD *)uint64_t v202 = *(_OWORD *)v198;
                      *(_OWORD *)(v202 + 16) = v212;
                      long long v213 = *(_OWORD *)(v198 + 32);
                      long long v214 = *(_OWORD *)(v198 + 48);
                      long long v215 = *(_OWORD *)(v198 + 80);
                      *(_OWORD *)(v202 + 64) = *(_OWORD *)(v198 + 64);
                      *(_OWORD *)(v202 + 80) = v215;
                      *(_OWORD *)(v202 + 32) = v213;
                      *(_OWORD *)(v202 + 48) = v214;
                      if (v307 < v197) {
                        break;
                      }
                      uint64_t v216 = (2 * v197) | 1;
                      uint64_t v198 = a1 + 96 * v216;
                      uint64_t v197 = 2 * v197 + 2;
                      if (v197 < v13)
                      {
                        float v217 = *(double *)(a1 + 96 * v216 + 32);
                        *(float *)&long long v311 = v217;
                        v323[0] = (float)(int)sub_10106EC00(a1 + 96 * v216);
                        float v218 = sub_100CC65E4((float *)&v311, v323);
                        float v219 = *(double *)(v198 + 128);
                        *(float *)&long long v311 = v219;
                        v323[0] = (float)(int)sub_10106EC00(v198 + 96);
                        if (((v218 > 0.0) & (v218 > sub_100CC65E4((float *)&v311, v323))) != 0) {
                          v198 += 96;
                        }
                        else {
                          uint64_t v197 = v216;
                        }
                      }
                      else
                      {
                        uint64_t v197 = v216;
                      }
                      float v220 = *(double *)(v198 + 32);
                      *(float *)&long long v311 = v220;
                      v323[0] = (float)(int)sub_10106EC00(v198);
                      float v221 = sub_100CC65E4((float *)&v311, v323);
                      float v222 = *(double *)&v319;
                      *(float *)&long long v311 = v222;
                      v323[0] = (float)(int)sub_10106EC00((uint64_t)&v317);
                      float v223 = sub_100CC65E4((float *)&v311, v323);
                      uint64_t v202 = (uint64_t)v211;
                      if (v221 > 0.0)
                      {
                        uint64_t v202 = (uint64_t)v211;
                        if (v221 > v223) {
                          break;
                        }
                      }
                    }
                    long long v224 = v318;
                    *std::string::size_type v211 = v317;
                    v211[1] = v224;
                    long long v225 = v319;
                    long long v226 = v320;
                    long long v227 = v322;
                    v211[4] = v321;
                    v211[5] = v227;
                    v211[2] = v225;
                    v211[3] = v226;
                  }
                }
                int64_t v195 = v196 - 1;
              }
              while (v196);
              int64_t v228 = v12 / 0x60uLL;
              uint64_t v229 = (_OWORD *)v308;
              do
              {
                int v309 = v229;
                uint64_t v230 = 0;
                long long v231 = *(_OWORD *)(a1 + 16);
                long long v311 = *(_OWORD *)a1;
                long long v312 = v231;
                long long v232 = *(_OWORD *)(a1 + 32);
                long long v233 = *(_OWORD *)(a1 + 48);
                long long v234 = *(_OWORD *)(a1 + 80);
                long long v315 = *(_OWORD *)(a1 + 64);
                long long v316 = v234;
                long long v313 = v232;
                long long v314 = v233;
                double v235 = (_OWORD *)a1;
                do
                {
                  uint64_t v236 = (uint64_t)&v235[6 * v230 + 6];
                  uint64_t v237 = (2 * v230) | 1;
                  uint64_t v238 = 2 * v230 + 2;
                  if (v238 < v228)
                  {
                    float v239 = *(double *)&v235[6 * v230 + 8];
                    *(float *)&long long v317 = v239;
                    v323[0] = (float)(int)sub_10106EC00(v236);
                    float v240 = sub_100CC65E4((float *)&v317, v323);
                    float v241 = *(double *)(v236 + 128);
                    *(float *)&long long v317 = v241;
                    v323[0] = (float)(int)sub_10106EC00(v236 + 96);
                    if (((v240 > 0.0) & (v240 > sub_100CC65E4((float *)&v317, v323))) != 0)
                    {
                      v236 += 96;
                      uint64_t v237 = v238;
                    }
                  }
                  long long v242 = *(_OWORD *)(v236 + 16);
                  *double v235 = *(_OWORD *)v236;
                  v235[1] = v242;
                  long long v243 = *(_OWORD *)(v236 + 32);
                  long long v244 = *(_OWORD *)(v236 + 48);
                  long long v245 = *(_OWORD *)(v236 + 80);
                  v235[4] = *(_OWORD *)(v236 + 64);
                  v235[5] = v245;
                  v235[2] = v243;
                  v235[3] = v244;
                  double v235 = (_OWORD *)v236;
                  uint64_t v230 = v237;
                }
                while (v237 <= (uint64_t)((unint64_t)(v228 - 2) >> 1));
                uint64_t v229 = v309 - 6;
                if ((_OWORD *)v236 == v309 - 6)
                {
                  long long v278 = v312;
                  *(_OWORD *)uint64_t v236 = v311;
                  *(_OWORD *)(v236 + 16) = v278;
                  long long v279 = v313;
                  long long v280 = v314;
                  long long v281 = v316;
                  *(_OWORD *)(v236 + 64) = v315;
                  *(_OWORD *)(v236 + 80) = v281;
                  *(_OWORD *)(v236 + 32) = v279;
                  *(_OWORD *)(v236 + 48) = v280;
                }
                else
                {
                  long long v246 = *(v309 - 5);
                  *(_OWORD *)uint64_t v236 = *v229;
                  *(_OWORD *)(v236 + 16) = v246;
                  long long v247 = *(v309 - 4);
                  long long v248 = *(v309 - 3);
                  long long v249 = *(v309 - 1);
                  *(_OWORD *)(v236 + 64) = *(v309 - 2);
                  *(_OWORD *)(v236 + 80) = v249;
                  *(_OWORD *)(v236 + 32) = v247;
                  *(_OWORD *)(v236 + 48) = v248;
                  long long v250 = v316;
                  long long v252 = v313;
                  long long v251 = v314;
                  *(v309 - 2) = v315;
                  *(v309 - 1) = v250;
                  *(v309 - 4) = v252;
                  *(v309 - 3) = v251;
                  long long v253 = v312;
                  *uint64_t v229 = v311;
                  *(v309 - 5) = v253;
                  uint64_t v254 = v236 - a1 + 96;
                  if (v254 >= 97)
                  {
                    unint64_t v255 = (v254 / 0x60uLL - 2) >> 1;
                    uint64_t v256 = a1 + 96 * v255;
                    float v257 = *(double *)(v256 + 32);
                    *(float *)&long long v317 = v257;
                    v323[0] = (float)(int)sub_10106EC00(v256);
                    float v258 = sub_100CC65E4((float *)&v317, v323);
                    float v259 = *(double *)(v236 + 32);
                    *(float *)&long long v317 = v259;
                    v323[0] = (float)(int)sub_10106EC00(v236);
                    float v260 = sub_100CC65E4((float *)&v317, v323);
                    if (v258 > 0.0 && v258 > v260)
                    {
                      long long v261 = *(_OWORD *)(v236 + 16);
                      long long v317 = *(_OWORD *)v236;
                      long long v318 = v261;
                      long long v262 = *(_OWORD *)(v236 + 32);
                      long long v263 = *(_OWORD *)(v236 + 48);
                      long long v264 = *(_OWORD *)(v236 + 80);
                      long long v321 = *(_OWORD *)(v236 + 64);
                      long long v322 = v264;
                      long long v319 = v262;
                      long long v320 = v263;
                      do
                      {
                        std::string::size_type v265 = (_OWORD *)v256;
                        long long v266 = *(_OWORD *)(v256 + 16);
                        *(_OWORD *)uint64_t v236 = *(_OWORD *)v256;
                        *(_OWORD *)(v236 + 16) = v266;
                        long long v267 = *(_OWORD *)(v256 + 32);
                        long long v268 = *(_OWORD *)(v256 + 48);
                        long long v269 = *(_OWORD *)(v256 + 80);
                        *(_OWORD *)(v236 + 64) = *(_OWORD *)(v256 + 64);
                        *(_OWORD *)(v236 + 80) = v269;
                        *(_OWORD *)(v236 + 32) = v267;
                        *(_OWORD *)(v236 + 48) = v268;
                        if (!v255) {
                          break;
                        }
                        unint64_t v255 = (v255 - 1) >> 1;
                        uint64_t v256 = a1 + 96 * v255;
                        float v270 = *(double *)(v256 + 32);
                        v323[0] = v270;
                        float v310 = (float)(int)sub_10106EC00(v256);
                        float v271 = sub_100CC65E4(v323, &v310);
                        float v272 = *(double *)&v319;
                        v323[0] = v272;
                        float v310 = (float)(int)sub_10106EC00((uint64_t)&v317);
                        float v273 = sub_100CC65E4(v323, &v310);
                        if (v271 <= 0.0) {
                          break;
                        }
                        uint64_t v236 = (uint64_t)v265;
                      }
                      while (v271 > v273);
                      long long v274 = v318;
                      *std::string::size_type v265 = v317;
                      v265[1] = v274;
                      long long v275 = v319;
                      long long v276 = v320;
                      long long v277 = v322;
                      v265[4] = v321;
                      v265[5] = v277;
                      v265[2] = v275;
                      v265[3] = v276;
                    }
                  }
                }
                BOOL v42 = v228-- <= 2;
              }
              while (!v42);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          long long v15 = (_OWORD *)(a1 + 96 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 <= 0x3000)
          {
            sub_100CC7F28((uint64_t)v15, a1, (uint64_t)v10);
          }
          else
          {
            sub_100CC7F28(a1, (uint64_t)v15, (uint64_t)v10);
            uint64_t v16 = 3 * v14;
            sub_100CC7F28(a1 + 96, a1 + 32 * v16 - 96, v306);
            sub_100CC7F28(a1 + 192, a1 + 96 + 32 * v16, v305);
            sub_100CC7F28(a1 + 32 * v16 - 96, (uint64_t)v15, a1 + 96 + 32 * v16);
            long long v17 = *(_OWORD *)(a1 + 16);
            long long v317 = *(_OWORD *)a1;
            long long v318 = v17;
            long long v18 = *(_OWORD *)(a1 + 32);
            long long v19 = *(_OWORD *)(a1 + 48);
            long long v20 = *(_OWORD *)(a1 + 80);
            long long v321 = *(_OWORD *)(a1 + 64);
            long long v322 = v20;
            long long v319 = v18;
            long long v320 = v19;
            long long v21 = v15[5];
            long long v23 = v15[2];
            long long v22 = v15[3];
            *(_OWORD *)(a1 + 64) = v15[4];
            *(_OWORD *)(a1 + 80) = v21;
            *(_OWORD *)(a1 + 32) = v23;
            *(_OWORD *)(a1 + 48) = v22;
            long long v24 = v15[1];
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 16) = v24;
            long long v25 = v318;
            *long long v15 = v317;
            v15[1] = v25;
            long long v26 = v319;
            long long v27 = v320;
            long long v28 = v322;
            v15[4] = v321;
            v15[5] = v28;
            void v15[2] = v26;
            _OWORD v15[3] = v27;
          }
          --a3;
          if (a4) {
            break;
          }
          float v29 = *(double *)(a1 - 64);
          *(float *)&long long v317 = v29;
          *(float *)&long long v311 = (float)(int)sub_10106EC00(a1 - 96);
          float v30 = sub_100CC65E4((float *)&v317, (float *)&v311);
          float v31 = *(double *)(a1 + 32);
          *(float *)&long long v317 = v31;
          *(float *)&long long v311 = (float)(int)sub_10106EC00(a1);
          float v32 = sub_100CC65E4((float *)&v317, (float *)&v311);
          if (v30 > 0.0 && v30 > v32) {
            break;
          }
          long long v92 = *(_OWORD *)(a1 + 16);
          long long v311 = *(_OWORD *)a1;
          long long v312 = v92;
          long long v93 = *(_OWORD *)(a1 + 32);
          long long v94 = *(_OWORD *)(a1 + 48);
          long long v95 = *(_OWORD *)(a1 + 80);
          long long v315 = *(_OWORD *)(a1 + 64);
          long long v316 = v95;
          long long v313 = v93;
          long long v314 = v94;
          *(float *)&long long v93 = *(double *)&v93;
          LODWORD(v317) = v93;
          v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
          float v96 = sub_100CC65E4((float *)&v317, v323);
          float v97 = *(a2 - 8);
          *(float *)&long long v317 = v97;
          v323[0] = (float)(int)sub_10106EC00((uint64_t)v10);
          float v98 = sub_100CC65E4((float *)&v317, v323);
          if (v96 <= 0.0 || v96 <= v98)
          {
            unint64_t v105 = a1 + 96;
            do
            {
              unint64_t v11 = v105;
              if (v105 >= (unint64_t)a2) {
                break;
              }
              float v106 = *(double *)&v313;
              *(float *)&long long v317 = v106;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
              float v107 = sub_100CC65E4((float *)&v317, v323);
              float v108 = *(double *)(v11 + 32);
              *(float *)&long long v317 = v108;
              v323[0] = (float)(int)sub_10106EC00(v11);
              float v109 = sub_100CC65E4((float *)&v317, v323);
              unint64_t v105 = v11 + 96;
            }
            while (v107 <= 0.0 || v107 <= v109);
          }
          else
          {
            uint64_t v99 = a1 + 96;
            do
            {
              float v100 = *(double *)&v313;
              *(float *)&long long v317 = v100;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
              float v101 = sub_100CC65E4((float *)&v317, v323);
              float v102 = *(double *)(v99 + 32);
              *(float *)&long long v317 = v102;
              v323[0] = (float)(int)sub_10106EC00(v99);
              float v103 = sub_100CC65E4((float *)&v317, v323);
              v99 += 96;
            }
            while (v101 <= 0.0 || v101 <= v103);
            unint64_t v11 = v99 - 96;
          }
          unint64_t v111 = a2;
          if (v11 < (unint64_t)a2)
          {
            int v112 = a2;
            do
            {
              unint64_t v111 = v112 - 12;
              float v113 = *(double *)&v313;
              *(float *)&long long v317 = v113;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
              float v114 = sub_100CC65E4((float *)&v317, v323);
              float v115 = *(v112 - 8);
              *(float *)&long long v317 = v115;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)(v112 - 12));
              float v116 = sub_100CC65E4((float *)&v317, v323);
              BOOL v117 = v114 <= 0.0 || v114 <= v116;
              v112 -= 12;
            }
            while (!v117);
          }
          while (v11 < (unint64_t)v111)
          {
            long long v118 = *(_OWORD *)(v11 + 16);
            long long v317 = *(_OWORD *)v11;
            long long v318 = v118;
            long long v119 = *(_OWORD *)(v11 + 32);
            long long v120 = *(_OWORD *)(v11 + 48);
            long long v121 = *(_OWORD *)(v11 + 80);
            long long v321 = *(_OWORD *)(v11 + 64);
            long long v322 = v121;
            long long v319 = v119;
            long long v320 = v120;
            long long v122 = *((_OWORD *)v111 + 5);
            long long v124 = *((_OWORD *)v111 + 2);
            long long v123 = *((_OWORD *)v111 + 3);
            *(_OWORD *)(v11 + 64) = *((_OWORD *)v111 + 4);
            *(_OWORD *)(v11 + 80) = v122;
            *(_OWORD *)(v11 + 32) = v124;
            *(_OWORD *)(v11 + 48) = v123;
            long long v125 = *((_OWORD *)v111 + 1);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v111;
            *(_OWORD *)(v11 + 16) = v125;
            uint64_t v126 = v11 + 96;
            long long v127 = v318;
            *(_OWORD *)unint64_t v111 = v317;
            *((_OWORD *)v111 + 1) = v127;
            long long v128 = v319;
            long long v129 = v320;
            long long v130 = v322;
            *((_OWORD *)v111 + 4) = v321;
            *((_OWORD *)v111 + 5) = v130;
            *((_OWORD *)v111 + 2) = v128;
            *((_OWORD *)v111 + 3) = v129;
            do
            {
              float v131 = *(double *)&v313;
              *(float *)&long long v317 = v131;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
              float v132 = sub_100CC65E4((float *)&v317, v323);
              float v133 = *(double *)(v126 + 32);
              *(float *)&long long v317 = v133;
              v323[0] = (float)(int)sub_10106EC00(v126);
              float v134 = sub_100CC65E4((float *)&v317, v323);
              v126 += 96;
            }
            while (v132 <= 0.0 || v132 <= v134);
            unint64_t v11 = v126 - 96;
            do
            {
              uint64_t v136 = v111;
              v111 -= 12;
              float v137 = *(double *)&v313;
              *(float *)&long long v317 = v137;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
              float v138 = sub_100CC65E4((float *)&v317, v323);
              float v139 = *(v136 - 8);
              *(float *)&long long v317 = v139;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)v111);
              float v140 = sub_100CC65E4((float *)&v317, v323);
            }
            while (v138 > 0.0 && v138 > v140);
          }
          int v142 = (_OWORD *)(v11 - 96);
          BOOL v4 = v11 - 96 >= a1;
          BOOL v5 = v11 - 96 == a1;
          if (v11 - 96 != a1)
          {
            long long v143 = *(_OWORD *)(v11 - 80);
            *(_OWORD *)a1 = *v142;
            *(_OWORD *)(a1 + 16) = v143;
            long long v144 = *(_OWORD *)(v11 - 64);
            long long v145 = *(_OWORD *)(v11 - 48);
            long long v146 = *(_OWORD *)(v11 - 16);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v11 - 32);
            *(_OWORD *)(a1 + 80) = v146;
            *(_OWORD *)(a1 + 32) = v144;
            *(_OWORD *)(a1 + 48) = v145;
          }
          a4 = 0;
          long long v147 = v312;
          *int v142 = v311;
          *(_OWORD *)(v11 - 80) = v147;
          long long v148 = v313;
          long long v149 = v314;
          long long v150 = v316;
          *(_OWORD *)(v11 - 32) = v315;
          *(_OWORD *)(v11 - 16) = v150;
          *(_OWORD *)(v11 - 64) = v148;
          *(_OWORD *)(v11 - 48) = v149;
        }
        uint64_t v33 = 0;
        long long v34 = *(_OWORD *)(a1 + 16);
        long long v311 = *(_OWORD *)a1;
        long long v312 = v34;
        long long v35 = *(_OWORD *)(a1 + 32);
        long long v36 = *(_OWORD *)(a1 + 48);
        long long v37 = *(_OWORD *)(a1 + 80);
        long long v315 = *(_OWORD *)(a1 + 64);
        long long v316 = v37;
        long long v313 = v35;
        long long v314 = v36;
        do
        {
          float v38 = *(double *)(a1 + v33 + 128);
          *(float *)&long long v317 = v38;
          v323[0] = (float)(int)sub_10106EC00(a1 + v33 + 96);
          float v39 = sub_100CC65E4((float *)&v317, v323);
          float v40 = *(double *)&v313;
          *(float *)&long long v317 = v40;
          v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
          float v41 = sub_100CC65E4((float *)&v317, v323);
          v33 += 96;
          BOOL v42 = v39 <= 0.0 || v39 <= v41;
        }
        while (!v42);
        unint64_t v43 = a1 + v33;
        uint64_t v44 = v308;
        if (v33 == 96)
        {
          unint64_t v51 = v308;
          while (v43 < v51)
          {
            unint64_t v45 = (double *)(v51 - 96);
            float v52 = *(double *)(v51 - 64);
            *(float *)&long long v317 = v52;
            v323[0] = (float)(int)sub_10106EC00(v51 - 96);
            float v53 = sub_100CC65E4((float *)&v317, v323);
            float v54 = *(double *)&v313;
            *(float *)&long long v317 = v54;
            v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
            float v55 = sub_100CC65E4((float *)&v317, v323);
            BOOL v56 = v53 <= 0.0 || v53 <= v55;
            unint64_t v51 = (unint64_t)v45;
            if (!v56) {
              goto LABEL_32;
            }
          }
          unint64_t v45 = (double *)v51;
        }
        else
        {
          do
          {
            unint64_t v45 = (double *)(v44 - 96);
            float v46 = *(double *)(v44 - 64);
            *(float *)&long long v317 = v46;
            v323[0] = (float)(int)sub_10106EC00(v44 - 96);
            float v47 = sub_100CC65E4((float *)&v317, v323);
            float v48 = *(double *)&v313;
            *(float *)&long long v317 = v48;
            v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
            float v49 = sub_100CC65E4((float *)&v317, v323);
            BOOL v50 = v47 <= 0.0 || v47 <= v49;
            uint64_t v44 = (uint64_t)v45;
          }
          while (v50);
        }
LABEL_32:
        if (v43 >= (unint64_t)v45)
        {
          double v82 = (double *)(v43 - 96);
        }
        else
        {
          long long v57 = (double *)(a1 + v33);
          long long v58 = v45;
          do
          {
            long long v59 = *((_OWORD *)v57 + 1);
            long long v317 = *(_OWORD *)v57;
            long long v318 = v59;
            long long v60 = *((_OWORD *)v57 + 2);
            long long v61 = *((_OWORD *)v57 + 3);
            long long v62 = *((_OWORD *)v57 + 5);
            long long v321 = *((_OWORD *)v57 + 4);
            long long v322 = v62;
            long long v319 = v60;
            long long v320 = v61;
            long long v63 = *((_OWORD *)v58 + 5);
            long long v65 = *((_OWORD *)v58 + 2);
            long long v64 = *((_OWORD *)v58 + 3);
            *((_OWORD *)v57 + 4) = *((_OWORD *)v58 + 4);
            *((_OWORD *)v57 + 5) = v63;
            *((_OWORD *)v57 + 2) = v65;
            *((_OWORD *)v57 + 3) = v64;
            long long v66 = *((_OWORD *)v58 + 1);
            *(_OWORD *)long long v57 = *(_OWORD *)v58;
            *((_OWORD *)v57 + 1) = v66;
            long long v67 = v318;
            *(_OWORD *)long long v58 = v317;
            *((_OWORD *)v58 + 1) = v67;
            long long v68 = v319;
            long long v69 = v320;
            long long v70 = v322;
            *((_OWORD *)v58 + 4) = v321;
            *((_OWORD *)v58 + 5) = v70;
            *((_OWORD *)v58 + 2) = v68;
            *((_OWORD *)v58 + 3) = v69;
            uint64_t v71 = (uint64_t)(v57 + 12);
            do
            {
              float v72 = *(double *)(v71 + 32);
              *(float *)&long long v317 = v72;
              v323[0] = (float)(int)sub_10106EC00(v71);
              float v73 = sub_100CC65E4((float *)&v317, v323);
              float v74 = *(double *)&v313;
              *(float *)&long long v317 = v74;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
              float v75 = sub_100CC65E4((float *)&v317, v323);
              v71 += 96;
            }
            while (v73 > 0.0 && v73 > v75);
            long long v57 = (double *)(v71 - 96);
            do
            {
              double v77 = *(v58 - 8);
              v58 -= 12;
              *(float *)&double v77 = v77;
              LODWORD(v317) = LODWORD(v77);
              v323[0] = (float)(int)sub_10106EC00((uint64_t)v58);
              float v78 = sub_100CC65E4((float *)&v317, v323);
              float v79 = *(double *)&v313;
              *(float *)&long long v317 = v79;
              v323[0] = (float)(int)sub_10106EC00((uint64_t)&v311);
              float v80 = sub_100CC65E4((float *)&v317, v323);
            }
            while (v78 <= 0.0 || v78 <= v80);
          }
          while (v57 < v58);
          double v82 = (double *)(v71 - 192);
        }
        if (v82 != (double *)a1)
        {
          long long v83 = *((_OWORD *)v82 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v82;
          *(_OWORD *)(a1 + 16) = v83;
          long long v84 = *((_OWORD *)v82 + 2);
          long long v85 = *((_OWORD *)v82 + 3);
          long long v86 = *((_OWORD *)v82 + 5);
          *(_OWORD *)(a1 + 64) = *((_OWORD *)v82 + 4);
          *(_OWORD *)(a1 + 80) = v86;
          *(_OWORD *)(a1 + 32) = v84;
          *(_OWORD *)(a1 + 48) = v85;
        }
        long long v87 = v312;
        *(_OWORD *)double v82 = v311;
        *((_OWORD *)v82 + 1) = v87;
        long long v88 = v313;
        long long v89 = v314;
        long long v90 = v316;
        *((_OWORD *)v82 + 4) = v315;
        *((_OWORD *)v82 + 5) = v90;
        *((_OWORD *)v82 + 2) = v88;
        *((_OWORD *)v82 + 3) = v89;
        BOOL v4 = v43 >= (unint64_t)v45;
        a2 = (double *)v308;
        if (v4) {
          break;
        }
LABEL_54:
        sub_100CC6A7C(a1, v82, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = (unint64_t)(v82 + 12);
      }
      BOOL v91 = sub_100CC82B0(a1, (uint64_t)v82);
      unint64_t v11 = (unint64_t)(v82 + 12);
      if (sub_100CC82B0((uint64_t)(v82 + 12), v308)) {
        break;
      }
      if (!v91) {
        goto LABEL_54;
      }
    }
    a2 = v82;
    if (!v91) {
      continue;
    }
    break;
  }
}

void sub_100CC7C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100CC85E8(a1, a2, a3, a4);
  float v10 = *(double *)(a5 + 32);
  *(float *)&long long v65 = v10;
  float v64 = (float)(int)sub_10106EC00(a5);
  float v11 = sub_100CC65E4((float *)&v65, &v64);
  float v12 = *(double *)(a4 + 32);
  *(float *)&long long v65 = v12;
  float v64 = (float)(int)sub_10106EC00(a4);
  float v13 = sub_100CC65E4((float *)&v65, &v64);
  if (v11 > 0.0 && v11 > v13)
  {
    long long v15 = *(_OWORD *)(a4 + 48);
    long long v67 = *(_OWORD *)(a4 + 32);
    long long v68 = v15;
    long long v16 = *(_OWORD *)(a4 + 80);
    long long v69 = *(_OWORD *)(a4 + 64);
    long long v70 = v16;
    long long v17 = *(_OWORD *)(a4 + 16);
    long long v65 = *(_OWORD *)a4;
    long long v66 = v17;
    long long v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    long long v19 = *(_OWORD *)(a5 + 80);
    long long v21 = *(_OWORD *)(a5 + 32);
    long long v20 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 80) = v19;
    *(_OWORD *)(a4 + 32) = v21;
    *(_OWORD *)(a4 + 48) = v20;
    long long v22 = v70;
    *(_OWORD *)(a5 + 64) = v69;
    *(_OWORD *)(a5 + 80) = v22;
    long long v23 = v68;
    *(_OWORD *)(a5 + 32) = v67;
    *(_OWORD *)(a5 + 48) = v23;
    long long v24 = v66;
    *(_OWORD *)a5 = v65;
    *(_OWORD *)(a5 + 16) = v24;
    *(float *)&long long v23 = *(double *)(a4 + 32);
    LODWORD(v65) = v23;
    float v64 = (float)(int)sub_10106EC00(a4);
    float v25 = sub_100CC65E4((float *)&v65, &v64);
    float v26 = *(double *)(a3 + 32);
    *(float *)&long long v65 = v26;
    float v64 = (float)(int)sub_10106EC00(a3);
    float v27 = sub_100CC65E4((float *)&v65, &v64);
    if (v25 > 0.0 && v25 > v27)
    {
      long long v28 = *(_OWORD *)(a3 + 48);
      long long v67 = *(_OWORD *)(a3 + 32);
      long long v68 = v28;
      long long v29 = *(_OWORD *)(a3 + 80);
      long long v69 = *(_OWORD *)(a3 + 64);
      long long v70 = v29;
      long long v30 = *(_OWORD *)(a3 + 16);
      long long v65 = *(_OWORD *)a3;
      long long v66 = v30;
      long long v31 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v31;
      long long v32 = *(_OWORD *)(a4 + 80);
      long long v34 = *(_OWORD *)(a4 + 32);
      long long v33 = *(_OWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a3 + 80) = v32;
      *(_OWORD *)(a3 + 32) = v34;
      *(_OWORD *)(a3 + 48) = v33;
      long long v35 = v70;
      *(_OWORD *)(a4 + 64) = v69;
      *(_OWORD *)(a4 + 80) = v35;
      long long v36 = v68;
      *(_OWORD *)(a4 + 32) = v67;
      *(_OWORD *)(a4 + 48) = v36;
      long long v37 = v66;
      *(_OWORD *)a4 = v65;
      *(_OWORD *)(a4 + 16) = v37;
      *(float *)&long long v36 = *(double *)(a3 + 32);
      LODWORD(v65) = v36;
      float v64 = (float)(int)sub_10106EC00(a3);
      float v38 = sub_100CC65E4((float *)&v65, &v64);
      float v39 = *(double *)(a2 + 32);
      *(float *)&long long v65 = v39;
      float v64 = (float)(int)sub_10106EC00(a2);
      float v40 = sub_100CC65E4((float *)&v65, &v64);
      if (v38 > 0.0 && v38 > v40)
      {
        long long v41 = *(_OWORD *)(a2 + 48);
        long long v67 = *(_OWORD *)(a2 + 32);
        long long v68 = v41;
        long long v42 = *(_OWORD *)(a2 + 80);
        long long v69 = *(_OWORD *)(a2 + 64);
        long long v70 = v42;
        long long v43 = *(_OWORD *)(a2 + 16);
        long long v65 = *(_OWORD *)a2;
        long long v66 = v43;
        long long v44 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v44;
        long long v45 = *(_OWORD *)(a3 + 80);
        long long v47 = *(_OWORD *)(a3 + 32);
        long long v46 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a2 + 80) = v45;
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = v46;
        long long v48 = v70;
        *(_OWORD *)(a3 + 64) = v69;
        *(_OWORD *)(a3 + 80) = v48;
        long long v49 = v68;
        *(_OWORD *)(a3 + 32) = v67;
        *(_OWORD *)(a3 + 48) = v49;
        long long v50 = v66;
        *(_OWORD *)a3 = v65;
        *(_OWORD *)(a3 + 16) = v50;
        *(float *)&long long v49 = *(double *)(a2 + 32);
        LODWORD(v65) = v49;
        float v64 = (float)(int)sub_10106EC00(a2);
        float v51 = sub_100CC65E4((float *)&v65, &v64);
        float v52 = *(double *)(a1 + 32);
        *(float *)&long long v65 = v52;
        float v64 = (float)(int)sub_10106EC00(a1);
        float v53 = sub_100CC65E4((float *)&v65, &v64);
        if (v51 > 0.0 && v51 > v53)
        {
          long long v54 = *(_OWORD *)(a1 + 48);
          long long v67 = *(_OWORD *)(a1 + 32);
          long long v68 = v54;
          long long v55 = *(_OWORD *)(a1 + 80);
          long long v69 = *(_OWORD *)(a1 + 64);
          long long v70 = v55;
          long long v56 = *(_OWORD *)(a1 + 16);
          long long v65 = *(_OWORD *)a1;
          long long v66 = v56;
          long long v57 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v57;
          long long v58 = *(_OWORD *)(a2 + 80);
          long long v60 = *(_OWORD *)(a2 + 32);
          long long v59 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v58;
          *(_OWORD *)(a1 + 32) = v60;
          *(_OWORD *)(a1 + 48) = v59;
          long long v61 = v70;
          *(_OWORD *)(a2 + 64) = v69;
          *(_OWORD *)(a2 + 80) = v61;
          long long v62 = v68;
          *(_OWORD *)(a2 + 32) = v67;
          *(_OWORD *)(a2 + 48) = v62;
          long long v63 = v66;
          *(_OWORD *)a2 = v65;
          *(_OWORD *)(a2 + 16) = v63;
        }
      }
    }
  }
}

void sub_100CC7F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6 = *(double *)(a2 + 32);
  *(float *)&long long v73 = v6;
  float v72 = (float)(int)sub_10106EC00(a2);
  float v7 = sub_100CC65E4((float *)&v73, &v72);
  float v8 = *(double *)(a1 + 32);
  *(float *)&long long v73 = v8;
  float v72 = (float)(int)sub_10106EC00(a1);
  float v9 = sub_100CC65E4((float *)&v73, &v72);
  if (v7 <= 0.0 || v7 <= v9)
  {
    float v11 = *(double *)(a3 + 32);
    *(float *)&long long v73 = v11;
    float v72 = (float)(int)sub_10106EC00(a3);
    float v12 = sub_100CC65E4((float *)&v73, &v72);
    float v13 = *(double *)(a2 + 32);
    *(float *)&long long v73 = v13;
    float v72 = (float)(int)sub_10106EC00(a2);
    float v14 = sub_100CC65E4((float *)&v73, &v72);
    if (v12 > 0.0 && v12 > v14)
    {
      long long v15 = *(_OWORD *)(a2 + 48);
      long long v75 = *(_OWORD *)(a2 + 32);
      long long v76 = v15;
      long long v16 = *(_OWORD *)(a2 + 80);
      long long v77 = *(_OWORD *)(a2 + 64);
      long long v78 = v16;
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v73 = *(_OWORD *)a2;
      long long v74 = v17;
      long long v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      long long v19 = *(_OWORD *)(a3 + 80);
      long long v21 = *(_OWORD *)(a3 + 32);
      long long v20 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v19;
      *(_OWORD *)(a2 + 32) = v21;
      *(_OWORD *)(a2 + 48) = v20;
      long long v22 = v78;
      *(_OWORD *)(a3 + 64) = v77;
      *(_OWORD *)(a3 + 80) = v22;
      long long v23 = v76;
      *(_OWORD *)(a3 + 32) = v75;
      *(_OWORD *)(a3 + 48) = v23;
      long long v24 = v74;
      *(_OWORD *)a3 = v73;
      *(_OWORD *)(a3 + 16) = v24;
      *(float *)&long long v23 = *(double *)(a2 + 32);
      LODWORD(v73) = v23;
      float v72 = (float)(int)sub_10106EC00(a2);
      float v25 = sub_100CC65E4((float *)&v73, &v72);
      float v26 = *(double *)(a1 + 32);
      *(float *)&long long v73 = v26;
      float v72 = (float)(int)sub_10106EC00(a1);
      float v27 = sub_100CC65E4((float *)&v73, &v72);
      if (v25 > 0.0 && v25 > v27)
      {
        long long v28 = *(_OWORD *)(a1 + 48);
        long long v75 = *(_OWORD *)(a1 + 32);
        long long v76 = v28;
        long long v29 = *(_OWORD *)(a1 + 80);
        long long v77 = *(_OWORD *)(a1 + 64);
        long long v78 = v29;
        long long v30 = *(_OWORD *)(a1 + 16);
        long long v73 = *(_OWORD *)a1;
        long long v74 = v30;
        long long v31 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v31;
        long long v32 = *(_OWORD *)(a2 + 80);
        long long v34 = *(_OWORD *)(a2 + 32);
        long long v33 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 32) = v34;
        *(_OWORD *)(a1 + 48) = v33;
        long long v35 = v78;
        *(_OWORD *)(a2 + 64) = v77;
        *(_OWORD *)(a2 + 80) = v35;
        long long v36 = v76;
        *(_OWORD *)(a2 + 32) = v75;
        *(_OWORD *)(a2 + 48) = v36;
        long long v37 = v74;
        *(_OWORD *)a2 = v73;
        *(_OWORD *)(a2 + 16) = v37;
      }
    }
  }
  else
  {
    float v38 = *(double *)(a3 + 32);
    *(float *)&long long v73 = v38;
    float v72 = (float)(int)sub_10106EC00(a3);
    float v39 = sub_100CC65E4((float *)&v73, &v72);
    float v40 = *(double *)(a2 + 32);
    *(float *)&long long v73 = v40;
    float v72 = (float)(int)sub_10106EC00(a2);
    float v41 = sub_100CC65E4((float *)&v73, &v72);
    if (v39 > 0.0 && v39 > v41)
    {
      long long v42 = *(_OWORD *)(a1 + 48);
      long long v75 = *(_OWORD *)(a1 + 32);
      long long v76 = v42;
      long long v43 = *(_OWORD *)(a1 + 80);
      long long v77 = *(_OWORD *)(a1 + 64);
      long long v78 = v43;
      long long v44 = *(_OWORD *)(a1 + 16);
      long long v73 = *(_OWORD *)a1;
      long long v74 = v44;
      long long v45 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v45;
      long long v46 = *(_OWORD *)(a3 + 80);
      long long v48 = *(_OWORD *)(a3 + 32);
      long long v47 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 80) = v46;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v47;
LABEL_17:
      long long v69 = v78;
      *(_OWORD *)(a3 + 64) = v77;
      *(_OWORD *)(a3 + 80) = v69;
      long long v70 = v76;
      *(_OWORD *)(a3 + 32) = v75;
      *(_OWORD *)(a3 + 48) = v70;
      long long v71 = v74;
      *(_OWORD *)a3 = v73;
      *(_OWORD *)(a3 + 16) = v71;
      return;
    }
    long long v49 = *(_OWORD *)(a1 + 48);
    long long v75 = *(_OWORD *)(a1 + 32);
    long long v76 = v49;
    long long v50 = *(_OWORD *)(a1 + 80);
    long long v77 = *(_OWORD *)(a1 + 64);
    long long v78 = v50;
    long long v51 = *(_OWORD *)(a1 + 16);
    long long v73 = *(_OWORD *)a1;
    long long v74 = v51;
    long long v52 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v52;
    long long v53 = *(_OWORD *)(a2 + 80);
    long long v55 = *(_OWORD *)(a2 + 32);
    long long v54 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v53;
    *(_OWORD *)(a1 + 32) = v55;
    *(_OWORD *)(a1 + 48) = v54;
    long long v56 = v78;
    *(_OWORD *)(a2 + 64) = v77;
    *(_OWORD *)(a2 + 80) = v56;
    long long v57 = v76;
    *(_OWORD *)(a2 + 32) = v75;
    *(_OWORD *)(a2 + 48) = v57;
    long long v58 = v74;
    *(_OWORD *)a2 = v73;
    *(_OWORD *)(a2 + 16) = v58;
    *(float *)&long long v57 = *(double *)(a3 + 32);
    LODWORD(v73) = v57;
    float v72 = (float)(int)sub_10106EC00(a3);
    float v59 = sub_100CC65E4((float *)&v73, &v72);
    float v60 = *(double *)(a2 + 32);
    *(float *)&long long v73 = v60;
    float v72 = (float)(int)sub_10106EC00(a2);
    float v61 = sub_100CC65E4((float *)&v73, &v72);
    if (v59 > 0.0 && v59 > v61)
    {
      long long v62 = *(_OWORD *)(a2 + 48);
      long long v75 = *(_OWORD *)(a2 + 32);
      long long v76 = v62;
      long long v63 = *(_OWORD *)(a2 + 80);
      long long v77 = *(_OWORD *)(a2 + 64);
      long long v78 = v63;
      long long v64 = *(_OWORD *)(a2 + 16);
      long long v73 = *(_OWORD *)a2;
      long long v74 = v64;
      long long v65 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v65;
      long long v66 = *(_OWORD *)(a3 + 80);
      long long v68 = *(_OWORD *)(a3 + 32);
      long long v67 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v66;
      *(_OWORD *)(a2 + 32) = v68;
      *(_OWORD *)(a2 + 48) = v67;
      goto LABEL_17;
    }
  }
}

BOOL sub_100CC82B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = (_OWORD *)(a2 - 96);
      float v7 = *(double *)(a2 - 64);
      *(float *)&long long v46 = v7;
      float v53 = (float)(int)sub_10106EC00(a2 - 96);
      float v8 = sub_100CC65E4((float *)&v46, &v53);
      float v9 = *(double *)(a1 + 32);
      *(float *)&long long v46 = v9;
      float v53 = (float)(int)sub_10106EC00(a1);
      float v10 = sub_100CC65E4((float *)&v46, &v53);
      BOOL result = 1;
      if (v8 > 0.0 && v8 > v10)
      {
        long long v11 = *(_OWORD *)(a1 + 48);
        long long v48 = *(_OWORD *)(a1 + 32);
        long long v49 = v11;
        long long v12 = *(_OWORD *)(a1 + 80);
        long long v50 = *(_OWORD *)(a1 + 64);
        long long v51 = v12;
        long long v13 = *(_OWORD *)(a1 + 16);
        long long v46 = *(_OWORD *)a1;
        long long v47 = v13;
        long long v14 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v14;
        long long v15 = *(_OWORD *)(a2 - 16);
        long long v17 = *(_OWORD *)(a2 - 64);
        long long v16 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 80) = v15;
        *(_OWORD *)(a1 + 32) = v17;
        *(_OWORD *)(a1 + 48) = v16;
        long long v18 = v51;
        *(_OWORD *)(a2 - 32) = v50;
        *(_OWORD *)(a2 - 16) = v18;
        long long v19 = v49;
        *(_OWORD *)(a2 - 64) = v48;
        *(_OWORD *)(a2 - 48) = v19;
        long long v20 = v47;
        *float v6 = v46;
        *(_OWORD *)(a2 - 80) = v20;
      }
      return result;
    case 3uLL:
      sub_100CC7F28(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100CC85E8(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      sub_100CC7C28(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      uint64_t v21 = a1 + 192;
      sub_100CC7F28(a1, a1 + 96, a1 + 192);
      uint64_t v22 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      break;
  }
  while (1)
  {
    float v25 = *(double *)(v22 + 32);
    *(float *)&long long v46 = v25;
    float v53 = (float)(int)sub_10106EC00(v22);
    float v26 = sub_100CC65E4((float *)&v46, &v53);
    float v27 = *(double *)(v21 + 32);
    *(float *)&long long v46 = v27;
    float v53 = (float)(int)sub_10106EC00(v21);
    float v28 = sub_100CC65E4((float *)&v46, &v53);
    if (v26 > 0.0 && v26 > v28)
    {
      long long v30 = *(_OWORD *)(v22 + 48);
      long long v48 = *(_OWORD *)(v22 + 32);
      long long v49 = v30;
      long long v31 = *(_OWORD *)(v22 + 80);
      long long v50 = *(_OWORD *)(v22 + 64);
      long long v51 = v31;
      long long v32 = *(_OWORD *)(v22 + 16);
      uint64_t v33 = v23;
      long long v46 = *(_OWORD *)v22;
      long long v47 = v32;
      while (1)
      {
        uint64_t v34 = a1 + v33;
        long long v35 = *(_OWORD *)(a1 + v33 + 240);
        *(_OWORD *)(v34 + 320) = *(_OWORD *)(a1 + v33 + 224);
        *(_OWORD *)(v34 + 336) = v35;
        long long v36 = *(_OWORD *)(a1 + v33 + 272);
        *(_OWORD *)(v34 + 352) = *(_OWORD *)(a1 + v33 + 256);
        *(_OWORD *)(v34 + 368) = v36;
        long long v37 = *(_OWORD *)(a1 + v33 + 208);
        *(_OWORD *)(v34 + 288) = *(_OWORD *)(a1 + v33 + 192);
        *(_OWORD *)(v34 + 304) = v37;
        if (v33 == -192) {
          break;
        }
        float v38 = *(double *)&v48;
        float v53 = v38;
        float v52 = (float)(int)sub_10106EC00((uint64_t)&v46);
        float v39 = sub_100CC65E4(&v53, &v52);
        float v40 = *(double *)(v34 + 128);
        float v53 = v40;
        float v52 = (float)(int)sub_10106EC00(v34 + 96);
        float v41 = sub_100CC65E4(&v53, &v52);
        v33 -= 96;
        if (v39 <= 0.0 || v39 <= v41)
        {
          long long v42 = (_OWORD *)(a1 + v33 + 288);
          goto LABEL_17;
        }
      }
      long long v42 = (_OWORD *)a1;
LABEL_17:
      long long v43 = v49;
      v42[2] = v48;
      v42[3] = v43;
      long long v44 = v51;
      v42[4] = v50;
      v42[5] = v44;
      long long v45 = v47;
      ++v24;
      *long long v42 = v46;
      v42[1] = v45;
      if (v24 == 8) {
        return v22 + 96 == a2;
      }
    }
    uint64_t v21 = v22;
    v23 += 96;
    v22 += 96;
    if (v22 == a2) {
      return 1;
    }
  }
}

void sub_100CC85E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100CC7F28(a1, a2, a3);
  float v8 = *(double *)(a4 + 32);
  *(float *)&long long v50 = v8;
  float v49 = (float)(int)sub_10106EC00(a4);
  float v9 = sub_100CC65E4((float *)&v50, &v49);
  float v10 = *(double *)(a3 + 32);
  *(float *)&long long v50 = v10;
  float v49 = (float)(int)sub_10106EC00(a3);
  float v11 = sub_100CC65E4((float *)&v50, &v49);
  if (v9 > 0.0 && v9 > v11)
  {
    long long v13 = *(_OWORD *)(a3 + 48);
    long long v52 = *(_OWORD *)(a3 + 32);
    long long v53 = v13;
    long long v14 = *(_OWORD *)(a3 + 80);
    long long v54 = *(_OWORD *)(a3 + 64);
    long long v55 = v14;
    long long v15 = *(_OWORD *)(a3 + 16);
    long long v50 = *(_OWORD *)a3;
    long long v51 = v15;
    long long v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v16;
    long long v17 = *(_OWORD *)(a4 + 80);
    long long v19 = *(_OWORD *)(a4 + 32);
    long long v18 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v17;
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v18;
    long long v20 = v55;
    *(_OWORD *)(a4 + 64) = v54;
    *(_OWORD *)(a4 + 80) = v20;
    long long v21 = v53;
    *(_OWORD *)(a4 + 32) = v52;
    *(_OWORD *)(a4 + 48) = v21;
    long long v22 = v51;
    *(_OWORD *)a4 = v50;
    *(_OWORD *)(a4 + 16) = v22;
    *(float *)&long long v21 = *(double *)(a3 + 32);
    LODWORD(v50) = v21;
    float v49 = (float)(int)sub_10106EC00(a3);
    float v23 = sub_100CC65E4((float *)&v50, &v49);
    float v24 = *(double *)(a2 + 32);
    *(float *)&long long v50 = v24;
    float v49 = (float)(int)sub_10106EC00(a2);
    float v25 = sub_100CC65E4((float *)&v50, &v49);
    if (v23 > 0.0 && v23 > v25)
    {
      long long v26 = *(_OWORD *)(a2 + 48);
      long long v52 = *(_OWORD *)(a2 + 32);
      long long v53 = v26;
      long long v27 = *(_OWORD *)(a2 + 80);
      long long v54 = *(_OWORD *)(a2 + 64);
      long long v55 = v27;
      long long v28 = *(_OWORD *)(a2 + 16);
      long long v50 = *(_OWORD *)a2;
      long long v51 = v28;
      long long v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      long long v30 = *(_OWORD *)(a3 + 80);
      long long v32 = *(_OWORD *)(a3 + 32);
      long long v31 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v30;
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a2 + 48) = v31;
      long long v33 = v55;
      *(_OWORD *)(a3 + 64) = v54;
      *(_OWORD *)(a3 + 80) = v33;
      long long v34 = v53;
      *(_OWORD *)(a3 + 32) = v52;
      *(_OWORD *)(a3 + 48) = v34;
      long long v35 = v51;
      *(_OWORD *)a3 = v50;
      *(_OWORD *)(a3 + 16) = v35;
      *(float *)&long long v34 = *(double *)(a2 + 32);
      LODWORD(v50) = v34;
      float v49 = (float)(int)sub_10106EC00(a2);
      float v36 = sub_100CC65E4((float *)&v50, &v49);
      float v37 = *(double *)(a1 + 32);
      *(float *)&long long v50 = v37;
      float v49 = (float)(int)sub_10106EC00(a1);
      float v38 = sub_100CC65E4((float *)&v50, &v49);
      if (v36 > 0.0 && v36 > v38)
      {
        long long v39 = *(_OWORD *)(a1 + 48);
        long long v52 = *(_OWORD *)(a1 + 32);
        long long v53 = v39;
        long long v40 = *(_OWORD *)(a1 + 80);
        long long v54 = *(_OWORD *)(a1 + 64);
        long long v55 = v40;
        long long v41 = *(_OWORD *)(a1 + 16);
        long long v50 = *(_OWORD *)a1;
        long long v51 = v41;
        long long v42 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v42;
        long long v43 = *(_OWORD *)(a2 + 80);
        long long v45 = *(_OWORD *)(a2 + 32);
        long long v44 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v43;
        *(_OWORD *)(a1 + 32) = v45;
        *(_OWORD *)(a1 + 48) = v44;
        long long v46 = v55;
        *(_OWORD *)(a2 + 64) = v54;
        *(_OWORD *)(a2 + 80) = v46;
        long long v47 = v53;
        *(_OWORD *)(a2 + 32) = v52;
        *(_OWORD *)(a2 + 48) = v47;
        long long v48 = v51;
        *(_OWORD *)a2 = v50;
        *(_OWORD *)(a2 + 16) = v48;
      }
    }
  }
}

_OWORD *sub_100CC8830(uint64_t **a1, void *a2, uint64_t a3, _OWORD **a4)
{
  float v6 = (void **)sub_100CC88CC((uint64_t)a1, &v15, a2);
  float v7 = *v6;
  if (!*v6)
  {
    float v8 = (uint64_t **)v6;
    float v7 = operator new(0x88uLL);
    float v9 = *a4;
    long long v10 = (*a4)[1];
    uint64_t v7[2] = **a4;
    v7[3] = v10;
    long long v11 = v9[2];
    long long v12 = v9[3];
    long long v13 = v9[5];
    void v7[6] = v9[4];
    v7[7] = v13;
    void v7[4] = v11;
    v7[5] = v12;
    *((unsigned char *)v7 + 128) = 0;
    sub_1000EDF90(a1, v15, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_100CC88CC(uint64_t a1, void *a2, void *a3)
{
  BOOL v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        float v7 = v4;
        float v8 = v4 + 4;
        if (!sub_10106EAF8(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        BOOL v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_10106EAF8(v8, a3)) {
        break;
      }
      BOOL v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    float v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

float *sub_100CC8960(float *result, float *a2, uint64_t a3, char a4)
{
  float v9 = result;
  while (2)
  {
    unint64_t v10 = (unint64_t)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v9 = (float *)v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(a2 - 1) > *(float *)(v10 + 4))
                {
                  uint64_t v42 = *(void *)v10;
                  *(void *)unint64_t v10 = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v42;
                }
                break;
              case 3uLL:
                BOOL result = sub_100CC9088((float *)v10, (float *)(v10 + 8), a2 - 2);
                break;
              case 4uLL:
                BOOL result = sub_100CC931C((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), (uint64_t)(a2 - 2));
                break;
              case 5uLL:
                BOOL result = sub_100CC931C((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), v10 + 24);
                if (*(a2 - 1) > *(float *)(v10 + 28))
                {
                  uint64_t v43 = *(void *)(v10 + 24);
                  *(void *)(v10 + 24) = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v43;
                  if (*(float *)(v10 + 28) > *(float *)(v10 + 20))
                  {
                    uint64_t v45 = *(void *)(v10 + 16);
                    uint64_t v44 = *(void *)(v10 + 24);
                    *(void *)(v10 + 16) = v44;
                    *(void *)(v10 + 24) = v45;
                    if (*(float *)(v10 + 12) < *((float *)&v44 + 1))
                    {
                      uint64_t v46 = *(void *)(v10 + 8);
                      *(void *)(v10 + 8) = v44;
                      *(void *)(v10 + 16) = v46;
                      if (*(float *)(v10 + 4) < *((float *)&v44 + 1))
                      {
                        uint64_t v47 = *(void *)v10;
                        *(void *)unint64_t v10 = v44;
                        *(void *)(v10 + 8) = v47;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            long long v48 = (float *)(v10 + 8);
            BOOL v50 = (float *)v10 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                unint64_t v52 = v10;
                do
                {
                  float v53 = *(float *)(v52 + 12);
                  float v54 = *(float *)(v52 + 4);
                  unint64_t v52 = (unint64_t)v48;
                  if (v53 > v54)
                  {
                    float v55 = *v48;
                    uint64_t v56 = v51;
                    while (1)
                    {
                      *(void *)(v10 + v56 + 8) = *(void *)(v10 + v56);
                      if (!v56) {
                        break;
                      }
                      float v57 = *(float *)(v10 + v56 - 4);
                      v56 -= 8;
                      if (v57 >= v53)
                      {
                        uint64_t v58 = v10 + v56 + 8;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v58 = v10;
LABEL_85:
                    *(float *)uint64_t v58 = v55;
                    *(float *)(v58 + 4) = v53;
                  }
                  long long v48 = (float *)(v52 + 8);
                  v51 += 8;
                }
                while ((float *)(v52 + 8) != a2);
              }
            }
            else if (!v50)
            {
              do
              {
                float v83 = v9[3];
                float v84 = v9[1];
                float v9 = v48;
                if (v83 > v84)
                {
                  float v85 = *v48;
                  do
                  {
                    long long v86 = v48;
                    uint64_t v87 = *((void *)v48 - 1);
                    v48 -= 2;
                    *(void *)long long v86 = v87;
                  }
                  while (*(v86 - 3) < v83);
                  *long long v48 = v85;
                  v48[1] = v83;
                }
                long long v48 = v9 + 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              int64_t v59 = (v12 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  unint64_t v63 = v10 + 8 * v62;
                  if (2 * v61 + 2 < (uint64_t)v12 && *(float *)(v63 + 4) > *(float *)(v63 + 12))
                  {
                    v63 += 8;
                    uint64_t v62 = 2 * v61 + 2;
                  }
                  float v64 = *(float *)(v10 + 8 * v61 + 4);
                  if (*(float *)(v63 + 4) <= v64)
                  {
                    unint64_t v65 = v10 + 8 * v61;
                    int v66 = *(_DWORD *)v65;
                    do
                    {
                      long long v67 = (void *)v65;
                      unint64_t v65 = v63;
                      *long long v67 = *(void *)v63;
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v68 = 2 * v62;
                      uint64_t v62 = (2 * v62) | 1;
                      unint64_t v63 = v10 + 8 * v62;
                      uint64_t v69 = v68 + 2;
                      if (v69 < (uint64_t)v12 && *(float *)(v63 + 4) > *(float *)(v63 + 12))
                      {
                        v63 += 8;
                        uint64_t v62 = v69;
                      }
                    }
                    while (*(float *)(v63 + 4) <= v64);
                    *(_DWORD *)unint64_t v65 = v66;
                    *(float *)(v65 + 4) = v64;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v70 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v71 = 0;
                uint64_t v72 = *(void *)v10;
                unint64_t v73 = v10;
                do
                {
                  long long v74 = (void *)v73;
                  v73 += 8 * (v71 + 1);
                  uint64_t v75 = 2 * v71;
                  uint64_t v71 = (2 * v71) | 1;
                  uint64_t v76 = v75 + 2;
                  if (v76 < v70 && *(float *)(v73 + 4) > *(float *)(v73 + 12))
                  {
                    v73 += 8;
                    uint64_t v71 = v76;
                  }
                  *long long v74 = *(void *)v73;
                }
                while (v71 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                a2 -= 2;
                if ((float *)v73 == a2)
                {
                  *(void *)unint64_t v73 = v72;
                }
                else
                {
                  *(void *)unint64_t v73 = *(void *)a2;
                  *(void *)a2 = v72;
                  uint64_t v77 = v73 - v10 + 8;
                  if (v77 >= 9)
                  {
                    unint64_t v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                    float v79 = *(float *)(v73 + 4);
                    if (*(float *)(v10 + 8 * v78 + 4) > v79)
                    {
                      int v80 = *(_DWORD *)v73;
                      do
                      {
                        double v81 = (void *)v73;
                        unint64_t v73 = v10 + 8 * v78;
                        void *v81 = *(void *)v73;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                      }
                      while (*(float *)(v10 + 8 * v78 + 4) > v79);
                      *(_DWORD *)unint64_t v73 = v80;
                      *(float *)(v73 + 4) = v79;
                    }
                  }
                }
              }
              while (v70-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          long long v14 = (float *)(v10 + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            sub_100CC9088(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            sub_100CC9088(v9 + 2, v14 - 2, a2 - 4);
            sub_100CC9088(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            BOOL result = sub_100CC9088(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)float v9 = *(void *)v14;
            *(void *)long long v14 = v15;
          }
          else
          {
            BOOL result = sub_100CC9088(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          float v16 = v9[1];
          if (*(v9 - 1) > v16) {
            goto LABEL_13;
          }
          if (*(a2 - 1) >= v16)
          {
            long long v33 = v9 + 2;
            do
            {
              unint64_t v10 = (unint64_t)v33;
              if (v33 >= a2) {
                break;
              }
              float v34 = v33[1];
              v33 += 2;
            }
            while (v34 >= v16);
          }
          else
          {
            long long v31 = v9;
            do
            {
              unint64_t v10 = (unint64_t)(v31 + 2);
              float v32 = v31[3];
              v31 += 2;
            }
            while (v32 >= v16);
          }
          long long v35 = a2;
          if (v10 < (unint64_t)a2)
          {
            float v36 = a2;
            do
            {
              long long v35 = v36 - 2;
              float v37 = *(v36 - 1);
              v36 -= 2;
            }
            while (v37 < v16);
          }
          float v38 = *v9;
          while (v10 < (unint64_t)v35)
          {
            uint64_t v39 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v35;
            *(void *)long long v35 = v39;
            do
            {
              float v40 = *(float *)(v10 + 12);
              v10 += 8;
            }
            while (v40 >= v16);
            do
            {
              float v41 = *(v35 - 1);
              v35 -= 2;
            }
            while (v41 < v16);
          }
          BOOL v4 = v10 - 8 >= (unint64_t)v9;
          BOOL v5 = v10 - 8 == (void)v9;
          if ((float *)(v10 - 8) != v9) {
            *(void *)float v9 = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(float *)(v10 - 8) = v38;
          *(float *)(v10 - 4) = v16;
        }
        float v16 = v9[1];
LABEL_13:
        uint64_t v17 = 0;
        float v18 = *v9;
        do
        {
          float v19 = v9[v17 + 3];
          v17 += 2;
        }
        while (v19 > v16);
        long long v20 = &v9[v17];
        long long v21 = a2;
        if (v17 == 2)
        {
          float v24 = a2;
          while (v20 < v24)
          {
            long long v22 = v24 - 2;
            float v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 > v16) {
              goto LABEL_23;
            }
          }
          long long v22 = v24;
        }
        else
        {
          do
          {
            long long v22 = v21 - 2;
            float v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 <= v16);
        }
LABEL_23:
        unint64_t v10 = (unint64_t)v20;
        if (v20 < v22)
        {
          long long v26 = v22;
          do
          {
            uint64_t v27 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v26;
            *(void *)long long v26 = v27;
            do
            {
              float v28 = *(float *)(v10 + 12);
              v10 += 8;
            }
            while (v28 > v16);
            do
            {
              float v29 = *(v26 - 1);
              v26 -= 2;
            }
            while (v29 <= v16);
          }
          while (v10 < (unint64_t)v26);
        }
        if ((float *)(v10 - 8) != v9) {
          *(void *)float v9 = *(void *)(v10 - 8);
        }
        *(float *)(v10 - 8) = v18;
        *(float *)(v10 - 4) = v16;
        if (v20 >= v22) {
          break;
        }
LABEL_34:
        BOOL result = (float *)sub_100CC8960(v9, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = sub_100CC9120((uint64_t)v9, v10 - 8);
      BOOL result = (float *)sub_100CC9120(v10, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = (float *)(v10 - 8);
    if (!v30) {
      continue;
    }
    return result;
  }
}

float *sub_100CC9088(float *result, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a3[1];
  if (v3 <= result[1])
  {
    if (v4 > v3)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (a2[1] > result[1])
      {
        uint64_t v7 = *(void *)result;
        *(void *)BOOL result = *(void *)a2;
        *(void *)a2 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)result;
    if (v4 <= v3)
    {
      *(void *)BOOL result = *(void *)a2;
      *(void *)a2 = v5;
      if (a3[1] <= *((float *)&v5 + 1)) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
    }
    else
    {
      *(void *)BOOL result = *(void *)a3;
    }
    *(void *)a3 = v5;
  }
  return result;
}

BOOL sub_100CC9120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 4))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      sub_100CC9088((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      sub_100CC931C((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      sub_100CC931C((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      if (*(float *)(a2 - 4) > *(float *)(a1 + 28))
      {
        uint64_t v16 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v16;
        if (*(float *)(a1 + 28) > *(float *)(a1 + 20))
        {
          uint64_t v18 = *(void *)(a1 + 16);
          uint64_t v17 = *(void *)(a1 + 24);
          *(void *)(a1 + 16) = v17;
          *(void *)(a1 + 24) = v18;
          if (*(float *)(a1 + 12) < *((float *)&v17 + 1))
          {
            uint64_t v19 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v17;
            *(void *)(a1 + 16) = v19;
            if (*(float *)(a1 + 4) < *((float *)&v17 + 1))
            {
              uint64_t v20 = *(void *)a1;
              *(void *)a1 = v17;
              *(void *)(a1 + 8) = v20;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 16;
      sub_100CC9088((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)(v8 + 4);
    if (v11 > *(float *)(v7 + 4))
    {
      int v12 = *(_DWORD *)v8;
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 12);
        v13 -= 8;
        if (v14 >= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v15 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v15 = v12;
      *(float *)(v15 + 4) = v11;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

float *sub_100CC931C(float *a1, float *a2, float *a3, uint64_t a4)
{
  BOOL result = sub_100CC9088(a1, a2, a3);
  if (*(float *)(a4 + 4) > a3[1])
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    if (a3[1] > a2[1])
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (a2[1] > a1[1])
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

void *sub_100CC93B4(uint64_t a1, uint64_t *a2)
{
  float v2 = (void *)(a1 + 8);
  float v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    uint64_t v9 = *a2;
    BOOL v6 = sub_100B391A0(v3 + 4, &v9);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    float v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2) {
    return v2;
  }
  uint64_t v9 = v5[4];
  if (sub_100B391A0(a2, &v9)) {
    return v2;
  }
  return v5;
}

void *sub_100CC9448(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        uint64_t v10 = v4[4];
        if (!sub_100B391A0(a3, &v10)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      uint64_t v10 = *a3;
      if (!sub_100B391A0(v8, &v10)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *sub_100CC94F4(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (uint64_t **)sub_1009206EC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100CC95A0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100CC9614((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100CC95A0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x120uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = sub_10048AEC0(v6 + 32, *a2);
  *((_DWORD *)v6 + 70) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100CC95FC(_Unwind_Exception *a1)
{
  sub_100CC9614(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100CC9614(uint64_t a1, uint64_t a2)
{
  float v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100CC966C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100CC966C(uint64_t a1)
{
  float v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    float v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_100CC9700(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  unint64_t v82 = a2;
  uint64_t v83 = a1;
  while (1)
  {
    uint64_t v10 = v8 - v9;
    uint64_t v11 = 0xEFBEFBEFBEFBEFBFLL * ((v8 - v9) >> 3);
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          unint64_t v82 = v8 - 504;
          if (*(unsigned char *)(v8 - 28)) {
            BOOL v42 = *(unsigned char *)(v9 + 476) == 0;
          }
          else {
            BOOL v42 = 0;
          }
          if (v42 || *(double *)(v8 - 16) < *(double *)(v9 + 488)) {
            sub_100CCA13C(&v83, (uint64_t *)&v82);
          }
          break;
        case 3:
          unint64_t v82 = v8 - 504;
          sub_100CCA2D4(v9, v9 + 504, v8 - 504);
          break;
        case 4:
          unint64_t v82 = v8 - 504;
          sub_100CCAC88(v9, v9 + 504, v9 + 1008, v8 - 504);
          break;
        case 5:
          unint64_t v82 = v8 - 504;
          sub_100CCA1B0(v9, v9 + 504, v9 + 1008, v9 + 1512, v8 - 504);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 12095) {
      break;
    }
    if (!a3)
    {
      if (v9 != v8)
      {
        int64_t v51 = (unint64_t)(v11 - 2) >> 1;
        int64_t v52 = v51;
        do
        {
          int64_t v53 = v52;
          if (v51 >= v52)
          {
            uint64_t v54 = (2 * v52) | 1;
            uint64_t v55 = v9 + 504 * v54;
            if (2 * v52 + 2 < v11)
            {
              BOOL v56 = *(unsigned char *)(v9 + 504 * v54 + 476) && *(unsigned char *)(v55 + 980) == 0;
              if (v56 || *(double *)(v9 + 504 * v54 + 488) < *(double *)(v55 + 992))
              {
                v55 += 504;
                uint64_t v54 = 2 * v52 + 2;
              }
            }
            if (*(unsigned char *)(v55 + 476)) {
              BOOL v57 = *(unsigned char *)(v9 + 504 * v52 + 476) == 0;
            }
            else {
              BOOL v57 = 0;
            }
            if (!v57 && *(double *)(v55 + 488) >= *(double *)(v9 + 504 * v52 + 488))
            {
              uint64_t v58 = v9 + 504 * v52;
              sub_100CCA78C((uint64_t)v86, v58);
              do
              {
                uint64_t v59 = v55;
                sub_100CCA68C(v58, v55);
                if (v51 < v54) {
                  break;
                }
                uint64_t v60 = (2 * v54) | 1;
                uint64_t v55 = v9 + 504 * v60;
                if (2 * v54 + 2 < v11)
                {
                  BOOL v61 = *(unsigned char *)(v9 + 504 * v60 + 476) && *(unsigned char *)(v55 + 980) == 0;
                  if (v61 || *(double *)(v9 + 504 * v60 + 488) < *(double *)(v55 + 992))
                  {
                    v55 += 504;
                    uint64_t v60 = 2 * v54 + 2;
                  }
                }
                if (*(unsigned char *)(v55 + 476) && v87 == 0) {
                  break;
                }
                uint64_t v58 = v59;
                uint64_t v54 = v60;
              }
              while (*(double *)(v55 + 488) >= v88);
              sub_100CCA68C(v59, (uint64_t)v86);
              sub_100CBE224(v86);
            }
          }
          int64_t v52 = v53 - 1;
        }
        while (v53);
        int64_t v63 = v10 / 0x1F8uLL;
        do
        {
          sub_100CCA78C((uint64_t)v84, v9);
          uint64_t v64 = 0;
          uint64_t v65 = v9;
          do
          {
            uint64_t v66 = v64 + 1;
            uint64_t v67 = v65 + 504 * (v64 + 1);
            uint64_t v68 = 2 * v64;
            uint64_t v64 = (2 * v64) | 1;
            int64_t v69 = v68 + 2;
            if (v69 < v63)
            {
              BOOL v70 = *(unsigned char *)(v65 + 504 * v66 + 476) && *(unsigned char *)(v67 + 980) == 0;
              if (v70 || *(double *)(v65 + 504 * v66 + 488) < *(double *)(v67 + 992))
              {
                v67 += 504;
                uint64_t v64 = v69;
              }
            }
            sub_100CCA68C(v65, v67);
            uint64_t v65 = v67;
          }
          while (v64 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
          v8 -= 504;
          if (v67 == v8)
          {
            sub_100CCA68C(v67, (uint64_t)v84);
          }
          else
          {
            sub_100CCA68C(v67, v8);
            sub_100CCA68C(v8, (uint64_t)v84);
            uint64_t v71 = v67 - v9 + 504;
            if (v71 >= 505)
            {
              unint64_t v72 = (v71 / 0x1F8uLL - 2) >> 1;
              BOOL v73 = *(unsigned char *)(v9 + 504 * v72 + 476) && *(unsigned char *)(v67 + 476) == 0;
              if (v73 || *(double *)(v9 + 504 * v72 + 488) < *(double *)(v67 + 488))
              {
                sub_100CCA78C((uint64_t)v86, v67);
                do
                {
                  uint64_t v74 = v67;
                  uint64_t v67 = v9 + 504 * v72;
                  sub_100CCA68C(v74, v67);
                  if (!v72) {
                    break;
                  }
                  unint64_t v72 = (v72 - 1) >> 1;
                  BOOL v75 = *(unsigned char *)(v9 + 504 * v72 + 476) && v87 == 0;
                }
                while (v75 || *(double *)(v9 + 504 * v72 + 488) < v88);
                sub_100CCA68C(v67, (uint64_t)v86);
                sub_100CBE224(v86);
              }
            }
          }
          sub_100CBE224(v84);
        }
        while (v63-- > 2);
      }
      return;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = v8 - 504;
    if ((unint64_t)v10 < 0xFC01)
    {
      sub_100CCA2D4(v9 + 504 * v12, v9, v13);
    }
    else
    {
      sub_100CCA2D4(v9, v9 + 504 * v12, v13);
      uint64_t v14 = 504 * v12 - 504;
      sub_100CCA2D4(v83 + 504, v83 + v14, v82 - 1008);
      sub_100CCA2D4(v83 + 1008, v83 + 504 * v12 + 504, v82 - 1512);
      sub_100CCA2D4(v83 + v14, v83 + 504 * v12, v83 + 504 * v12 + 504);
      v86[0] = v83 + 504 * v12;
      sub_100CCA3D8(&v83, v86);
    }
    --a3;
    uint64_t v15 = v83;
    if ((a4 & 1) == 0)
    {
      BOOL v16 = *(unsigned char *)(v83 - 28) && *(unsigned char *)(v83 + 476) == 0;
      if (!v16 && *(double *)(v83 - 16) >= *(double *)(v83 + 488))
      {
        unint64_t v33 = v82;
        unint64_t v85 = v82;
        sub_100CCA78C((uint64_t)v86, v83);
        int v34 = *(unsigned __int8 *)(v82 - 28);
        if ((!v87 || *(unsigned char *)(v82 - 28)) && v88 >= *(double *)(v82 - 16))
        {
          unint64_t v41 = v15 + 504;
          do
          {
            unint64_t v36 = v41;
            if (v41 >= v82 || v87 && !*(unsigned char *)(v41 + 476)) {
              break;
            }
            v41 += 504;
          }
          while (v88 >= *(double *)(v36 + 488));
        }
        else
        {
          unint64_t v35 = v15 + 504;
          do
          {
            unint64_t v36 = v35;
            if (v87 && !*(unsigned char *)(v35 + 476)) {
              break;
            }
            v35 += 504;
          }
          while (v88 >= *(double *)(v36 + 488));
        }
        v84[0] = v36;
        if (v36 < v82)
        {
          float v37 = (unsigned __int8 *)(v82 - 532);
          if (v87) {
            goto LABEL_71;
          }
LABEL_72:
          while (v88 < *(double *)(v37 + 516))
          {
            while (1)
            {
              int v34 = *v37;
              v37 -= 504;
              if (!v87) {
                break;
              }
LABEL_71:
              if (v34) {
                goto LABEL_72;
              }
            }
          }
          unint64_t v33 = (unint64_t)(v37 + 28);
          unint64_t v85 = (unint64_t)(v37 + 28);
        }
        if (v36 < v33)
        {
          do
          {
            sub_100CCA13C(v84, (uint64_t *)&v85);
            uint64_t v38 = v84[0] + 504;
            do
            {
              unint64_t v36 = v38;
              if (v87 && !*(unsigned char *)(v38 + 476)) {
                break;
              }
              v38 += 504;
            }
            while (v88 >= *(double *)(v36 + 488));
            v84[0] = v36;
            unint64_t v39 = v85;
            do
            {
              do
              {
                v39 -= 504;
                unint64_t v85 = v39;
              }
              while (v87 && !*(unsigned char *)(v39 + 476));
            }
            while (v88 < *(double *)(v39 + 488));
          }
          while (v36 < v39);
        }
        uint64_t v40 = v36 - 504;
        if (v36 - 504 != v15) {
          sub_100CCA68C(v15, v36 - 504);
        }
        sub_100CCA68C(v40, (uint64_t)v86);
        uint64_t v9 = v84[0];
        sub_100CBE224(v86);
        a4 = 0;
        goto LABEL_60;
      }
    }
    unint64_t v17 = v82;
    sub_100CCA78C((uint64_t)v86, v83);
    for (uint64_t i = 0; ; i += 504)
    {
      BOOL v19 = *(unsigned char *)(v15 + i + 980) && v87 == 0;
      if (!v19 && *(double *)(v15 + i + 992) >= v88) {
        break;
      }
    }
    uint64_t v20 = v15 + i;
    unint64_t v21 = v15 + i + 504;
    v84[0] = v21;
    if (i)
    {
      unint64_t v22 = v82 - 504;
      do
      {
        unint64_t v17 = v22;
        if (*(unsigned char *)(v22 + 476)) {
          BOOL v23 = v87 == 0;
        }
        else {
          BOOL v23 = 0;
        }
        if (v23) {
          break;
        }
        v22 -= 504;
      }
      while (*(double *)(v17 + 488) >= v88);
    }
    else
    {
      while (v21 < v17)
      {
        unint64_t v24 = v17 - 504;
        if (*(unsigned char *)(v17 - 28)) {
          BOOL v25 = v87 == 0;
        }
        else {
          BOOL v25 = 0;
        }
        if (!v25)
        {
          double v26 = *(double *)(v17 - 16);
          v17 -= 504;
          if (v26 >= v88) {
            continue;
          }
        }
        unint64_t v17 = v24;
        break;
      }
    }
    unint64_t v85 = v17;
    if (v21 < v17)
    {
      do
      {
        sub_100CCA13C(v84, (uint64_t *)&v85);
        unint64_t v27 = v84[0];
        do
        {
          v27 += 504;
          if (*(unsigned char *)(v27 + 476)) {
            BOOL v28 = v87 == 0;
          }
          else {
            BOOL v28 = 0;
          }
        }
        while (v28 || *(double *)(v27 + 488) < v88);
        v84[0] = v27;
        unint64_t v29 = v85 - 504;
        do
        {
          unint64_t v30 = v29;
          if (*(unsigned char *)(v29 + 476)) {
            BOOL v31 = v87 == 0;
          }
          else {
            BOOL v31 = 0;
          }
          if (v31) {
            break;
          }
          v29 -= 504;
        }
        while (*(double *)(v30 + 488) >= v88);
        unint64_t v85 = v30;
      }
      while (v27 < v30);
      uint64_t v20 = v27 - 504;
    }
    if (v20 != v15) {
      sub_100CCA68C(v15, v20);
    }
    sub_100CCA68C(v20, (uint64_t)v86);
    sub_100CBE224(v86);
    if (v21 < v17) {
      goto LABEL_59;
    }
    int v32 = sub_100CCA44C(v83, v20);
    uint64_t v9 = v20 + 504;
    if (!sub_100CCA44C(v20 + 504, v82))
    {
      if (!v32)
      {
LABEL_59:
        sub_100CC9700(v83, v20, a3, a4 & 1);
        a4 = 0;
        uint64_t v9 = v20 + 504;
      }
LABEL_60:
      uint64_t v83 = v9;
      goto LABEL_61;
    }
    if (v32) {
      return;
    }
    unint64_t v82 = v20;
    uint64_t v9 = v83;
LABEL_61:
    uint64_t v8 = v82;
  }
  if (a4)
  {
    if (v9 == v8) {
      return;
    }
    uint64_t v43 = v9 + 504;
    if (v9 + 504 == v8) {
      return;
    }
    uint64_t v44 = 0;
    uint64_t v45 = v9;
    while (2)
    {
      uint64_t v46 = v43;
      if (*(unsigned char *)(v45 + 980)) {
        BOOL v47 = *(unsigned char *)(v45 + 476) == 0;
      }
      else {
        BOOL v47 = 0;
      }
      if (v47 || *(double *)(v45 + 992) < *(double *)(v45 + 488))
      {
        sub_100CCA78C((uint64_t)v86, v43);
        for (uint64_t j = v44; ; j -= 504)
        {
          sub_100CCA68C(v9 + j + 504, v9 + j);
          if (!j)
          {
            uint64_t v50 = v9;
            goto LABEL_124;
          }
          BOOL v49 = v87 && *(unsigned char *)(v9 + j - 28) == 0;
          if (!v49 && v88 >= *(double *)(v9 + j - 16)) {
            break;
          }
        }
        uint64_t v50 = v9 + j;
LABEL_124:
        sub_100CCA68C(v50, (uint64_t)v86);
        sub_100CBE224(v86);
      }
      uint64_t v43 = v46 + 504;
      v44 += 504;
      uint64_t v45 = v46;
      if (v46 + 504 == v8) {
        return;
      }
      continue;
    }
  }
  if (v9 != v8)
  {
    uint64_t v77 = v9 + 504;
    while (v77 != v8)
    {
      uint64_t v78 = v77;
      if (*(unsigned char *)(v9 + 980)) {
        BOOL v79 = *(unsigned char *)(v9 + 476) == 0;
      }
      else {
        BOOL v79 = 0;
      }
      if (v79 || *(double *)(v9 + 992) < *(double *)(v9 + 488))
      {
        sub_100CCA78C((uint64_t)v86, v77);
        do
        {
          uint64_t v80 = v9;
          sub_100CCA68C(v9 + 504, v9);
          v9 -= 504;
          if (v87) {
            BOOL v81 = *(unsigned char *)(v80 - 28) == 0;
          }
          else {
            BOOL v81 = 0;
          }
        }
        while (v81 || v88 < *(double *)(v80 - 16));
        sub_100CCA68C(v80, (uint64_t)v86);
        sub_100CBE224(v86);
      }
      uint64_t v77 = v78 + 504;
      uint64_t v9 = v78;
    }
  }
}

void sub_100CCA0C8(_Unwind_Exception *a1)
{
}

void *sub_100CCA13C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_100CCA78C((uint64_t)v5, *a1);
  sub_100CCA68C(v2, v3);
  sub_100CCA68C(v3, (uint64_t)v5);
  return sub_100CBE224(v5);
}

void sub_100CCA19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100CBE224((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100CCA1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  uint64_t v15 = a4;
  uint64_t v16 = a3;
  uint64_t v14 = a5;
  sub_100CCAC88(a1, a2, a3, a4);
  if (*(unsigned char *)(a5 + 476)) {
    BOOL v10 = *(unsigned char *)(a4 + 476) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10 || *(double *)(a5 + 488) < *(double *)(a4 + 488))
  {
    sub_100CCA13C(&v15, &v14);
    BOOL v11 = *(unsigned char *)(v15 + 476) && *(unsigned char *)(a3 + 476) == 0;
    if (v11 || *(double *)(v15 + 488) < *(double *)(a3 + 488))
    {
      sub_100CCA13C(&v16, &v15);
      BOOL v12 = *(unsigned char *)(v16 + 476) && *(unsigned char *)(a2 + 476) == 0;
      if (v12 || *(double *)(v16 + 488) < *(double *)(a2 + 488))
      {
        sub_100CCA13C(&v17, &v16);
        if (*(unsigned char *)(v17 + 476)) {
          BOOL v13 = *(unsigned char *)(a1 + 476) == 0;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13 || *(double *)(v17 + 488) < *(double *)(a1 + 488)) {
          sub_100CCA13C(&v18, &v17);
        }
      }
    }
  }
}

double sub_100CCA2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  double result = *(double *)(a2 + 488);
  if (*(unsigned char *)(a2 + 476)) {
    BOOL v4 = *(unsigned char *)(a1 + 476) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)(a2 + 476)) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = *(unsigned char *)(a3 + 476) == 0;
    }
    char v6 = !v5;
    if (result >= *(double *)(a1 + 488))
    {
      if ((v6 & 1) != 0 || *(double *)(a3 + 488) < result)
      {
        sub_100CCA13C(&v12, &v11);
        BOOL v10 = *(unsigned char *)(v12 + 476) && *(unsigned char *)(v13 + 476) == 0;
        if (v10 || (double result = *(double *)(v12 + 488), result < *(double *)(v13 + 488)))
        {
          uint64_t v7 = &v13;
          uint64_t v9 = &v12;
          goto LABEL_22;
        }
      }
      return result;
    }
    if (v6)
    {
LABEL_14:
      uint64_t v7 = &v13;
LABEL_21:
      uint64_t v9 = &v11;
LABEL_22:
      sub_100CCA13C(v7, v9);
      return result;
    }
  }
  if (*(double *)(a3 + 488) < result) {
    goto LABEL_14;
  }
  sub_100CCA13C(&v13, &v12);
  if (*(unsigned char *)(v11 + 476)) {
    BOOL v8 = *(unsigned char *)(v12 + 476) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || (double result = *(double *)(v11 + 488), result < *(double *)(v12 + 488)))
  {
    uint64_t v7 = &v12;
    goto LABEL_21;
  }
  return result;
}

void *sub_100CCA3D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_100CCA78C((uint64_t)v5, *a1);
  sub_100CCA68C(v2, v3);
  sub_100CCA68C(v3, (uint64_t)v5);
  return sub_100CBE224(v5);
}

void sub_100CCA438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100CBE224((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCA44C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  BOOL v4 = 1;
  switch(0xEFBEFBEFBEFBEFBFLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v17 = a2 - 504;
      if (*(unsigned char *)(a2 - 28)) {
        BOOL v5 = *(unsigned char *)(a1 + 476) == 0;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5 || *(double *)(a2 - 16) < *(double *)(a1 + 488)) {
        sub_100CCA13C(&v18, &v17);
      }
      return v4;
    case 3uLL:
      sub_100CCA2D4(a1, a1 + 504, a2 - 504);
      return v4;
    case 4uLL:
      sub_100CCAC88(a1, a1 + 504, a1 + 1008, a2 - 504);
      return v4;
    case 5uLL:
      sub_100CCA1B0(a1, a1 + 504, a1 + 1008, a1 + 1512, a2 - 504);
      return v4;
    default:
      uint64_t v6 = a1 + 1008;
      sub_100CCA2D4(a1, a1 + 504, a1 + 1008);
      uint64_t v7 = a1 + 1512;
      if (a1 + 1512 == v2) {
        return 1;
      }
      int v8 = 0;
      uint64_t v9 = a1 + 980;
      break;
  }
  while (1)
  {
    if (*(unsigned char *)(v7 + 476)) {
      BOOL v10 = *(unsigned char *)(v6 + 476) == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10 && *(double *)(v7 + 488) >= *(double *)(v6 + 488)) {
      goto LABEL_25;
    }
    sub_100CCA78C((uint64_t)v14, v7);
    for (uint64_t i = v9; ; i -= 504)
    {
      sub_100CCA68C(i + 532, i + 28);
      if (i + 28 == v18) {
        break;
      }
      BOOL v12 = v15 && *(unsigned char *)i == 0;
      if (!v12 && v16 >= *(double *)(i + 12)) {
        break;
      }
    }
    sub_100CCA68C(i + 28, (uint64_t)v14);
    if (++v8 == 8) {
      break;
    }
    sub_100CBE224(v14);
    uint64_t v2 = v17;
LABEL_25:
    uint64_t v6 = v7;
    v9 += 504;
    v7 += 504;
    if (v7 == v2) {
      return 1;
    }
  }
  BOOL v4 = v7 + 504 == v17;
  sub_100CBE224(v14);
  return v4;
}

void sub_100CCA65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100CBE224((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCA68C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    sub_100CC0D4C(a1 + 32, a2 + 32);
    *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
    long long v6 = *(_OWORD *)(a2 + 400);
    long long v7 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v7;
    *(_OWORD *)(a1 + 400) = v6;
  }
  else
  {
    sub_100CCAA40((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5));
    sub_100CC0D4C(a1 + 32, a2 + 32);
    sub_100CCAA40((char *)(a1 + 344), *(char **)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 5));
    sub_1008A9A00((char *)(a1 + 368), *(char **)(a2 + 368), *(void *)(a2 + 376), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 3));
    *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
    long long v4 = *(_OWORD *)(a2 + 400);
    long long v5 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v5;
    *(_OWORD *)(a1 + 400) = v4;
    sub_100CCAB7C((char *)(a1 + 448), *(char **)(a2 + 448), *(void *)(a2 + 456), (uint64_t)(*(void *)(a2 + 456) - *(void *)(a2 + 448)) >> 6);
  }
  long long v8 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v8;
  return a1;
}

uint64_t sub_100CCA78C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022F1898;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100CCA904((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5));
  sub_100A0D3D0(a1 + 32, a2 + 32);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  sub_100CCA904((void *)(a1 + 344), *(const void **)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 5));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  sub_1008B7A58((void *)(a1 + 368), *(const void **)(a2 + 368), *(void *)(a2 + 376), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 3));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  long long v4 = *(_OWORD *)(a2 + 400);
  long long v5 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v5;
  *(_OWORD *)(a1 + 400) = v4;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = 0;
  sub_100CCA980((void *)(a1 + 448), *(const void **)(a2 + 448), *(void *)(a2 + 456), (uint64_t)(*(void *)(a2 + 456) - *(void *)(a2 + 448)) >> 6);
  long long v6 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v6;
  return a1;
}

void sub_100CCA8B0(_Unwind_Exception *a1)
{
  sub_100CBE1CC(v3);
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void *sub_100CCA904(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    double result = sub_10064620C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100CCA964(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100CCA980(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    double result = sub_100CCA9FC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100CCA9E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100CCA9FC(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_1001D7FD4();
  }
  double result = (char *)sub_10017EAF0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

char *sub_100CCAA40(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v12 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = sub_10064620C(v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  char v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

char *sub_100CCAB7C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 6)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (a4 >> 58) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_100CCA9FC(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 6;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void sub_100CCAC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  sub_100CCA2D4(a1, a2, a3);
  if (*(unsigned char *)(a4 + 476)) {
    BOOL v8 = *(unsigned char *)(a3 + 476) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 || *(double *)(a4 + 488) < *(double *)(a3 + 488))
  {
    sub_100CCA13C(&v12, &v11);
    BOOL v9 = *(unsigned char *)(v12 + 476) && *(unsigned char *)(a2 + 476) == 0;
    if (v9 || *(double *)(v12 + 488) < *(double *)(a2 + 488))
    {
      sub_100CCA13C(&v13, &v12);
      if (*(unsigned char *)(v13 + 476)) {
        BOOL v10 = *(unsigned char *)(a1 + 476) == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10 || *(double *)(v13 + 488) < *(double *)(a1 + 488)) {
        sub_100CCA13C(&v14, &v13);
      }
    }
  }
}

void sub_100CCAD68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100CCADE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100CCAE78(_Unwind_Exception *a1)
{
}

uint64_t sub_100CCAF48(uint64_t a1, uint64_t a2)
{
  sub_100168850(v6);
  sub_10016BC44((uint64_t)v5);
  sub_100CE3798(a1, (uint64_t)v5, a2, (uint64_t)v6);
  return sub_1001687EC(v6);
}

void sub_100CCAFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCB068(uint64_t result, unint64_t *a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
  {
    sub_100168850(v7);
    sub_10016BC44((uint64_t)v6);
    sub_100CE4D88(v4, (uint64_t)v6, a2, v5, (uint64_t)v7);
    sub_100CCB93C(v3, (uint64_t)v7, 0);
    return sub_1001687EC(v7);
  }
  return result;
}

void sub_100CCB0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCB11C(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
  {
    sub_100168850(v7);
    sub_10016BC44((uint64_t)v6);
    sub_100CE4EA4(v4, (uint64_t)v6, a2, v5, (uint64_t)v7);
    sub_100CCB93C(v3, (uint64_t)v7, 0);
    return sub_1001687EC(v7);
  }
  return result;
}

void sub_100CCB194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCB1D0(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
  {
    sub_100168850(v7);
    sub_10016BC44((uint64_t)v6);
    sub_100CE4FF4(v4, (uint64_t)v6, a2, v5, (uint64_t)v7);
    sub_100CCB93C(v3, (uint64_t)v7, 0);
    return sub_1001687EC(v7);
  }
  return result;
}

void sub_100CCB248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CCB270(uint64_t a1, uint64_t *a2)
{
  BOOL v10 = (std::timed_mutex *)(a1 + 320);
  char v11 = 0;
  while (1)
  {
    *(void *)std::string buf = 500;
    if (sub_100CCB4E0((uint64_t)&v10, buf)) {
      break;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v4 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Raven: #warning,rct,timeout,mutex", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::SendToCoreNavigation(const SerializedClpLogEntry &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  if (*(unsigned char *)(a1 + 4664))
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = (uint64_t *)*a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v9 = a2[1];
    }
    [*(id *)(a1 + 4672) raiseRavenEventsFromData:+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v8, v9)];
  }
  else
  {
    raven::RavenSupervisor::RaiseEventsFrom();
  }
  if (v11) {
    std::timed_mutex::unlock(v10);
  }
}

void sub_100CCB4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::timed_mutex *a13, char a14)
{
  if (a14) {
    std::timed_mutex::unlock(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CCB4E0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * *a2;
      uint64_t result = sub_100CF0300(v2, &v5);
      *(unsigned char *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock_for: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock_for: already locked");
  return sub_100CCB56C();
}

void sub_100CCB56C(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 4472);
  if (v2 && *(void *)(v2 + 192) && (unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 184)), (v3 & 1) != 0)) {
    sub_100CCB594(*(int **)(a1 + 4472), a2);
  }
  else {
    sub_100CCB270(a1, (uint64_t *)a2);
  }
}

void sub_100CCB594(int *a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 4);
  std::mutex::lock((std::mutex *)(a1 + 4));
  sub_100CF0458((void *)a1 + 16, a2);
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 20));
  int v5 = a1[42];
  if (v5 >= 501)
  {
    sub_100CF083C((void *)a1 + 16);
    ++*a1;
  }
  std::mutex::unlock(v4);
  if (*a1 == 1)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    long long v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Raven: rct,msgQ,overflow", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::RavenThread::PushToMsgQueue(const SerializedClpLogEntry &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_100CCBB5C();
  }
  if (v5 >= 50)
  {
    double v7 = sub_10016C458();
    if (v7 > *((double *)a1 + 1) + 1.0)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      BOOL v8 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *a1;
        *(_DWORD *)std::string buf = 67240448;
        int v13 = v5;
        __int16 v14 = 1026;
        int v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Raven: rct,msgQ,blocked,size,%{public}d,dropped,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        char v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RavenThread::PushToMsgQueue(const SerializedClpLogEntry &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      *((double *)a1 + 1) = v7;
    }
  }
}

void sub_100CCB920(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100CCB93C(uint64_t a1, uint64_t a2, char a3)
{
  long long __p = 0uLL;
  uint64_t v9 = 0;
  if (wireless_diagnostics::google::protobuf::MessageLite::SerializeToString())
  {
    if (*(unsigned char *)(a1 + 4663) && (*(void *)(a1 + 312) || *(unsigned char *)(a1 + 4664)) && (a3 & 1) == 0) {
      sub_100CCB56C(a1, &__p);
    }
    uint64_t v5 = *(void *)(a1 + 4680);
    if (v5) {
      sub_100168EAC(v5, (uint64_t)&__p);
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    long long v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Raven: Could not serialize protobuf message", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::SendMessage(const CLP::LogEntry::LogEntry &, BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100CCBB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CCBB5C()
{
  uint64_t v0 = pthread_self();
  __uint64_t v34 = 0;
  if (pthread_threadid_np(v0, &v34))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v1 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      int v2 = *__error();
      unsigned __int8 v3 = __error();
      uint64_t v4 = strerror(*v3);
      *(_DWORD *)std::string buf = 67240450;
      *(_DWORD *)BOOL v42 = v2;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = v4;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Raven: rct,threadParam,threadid,failed,%{public}d,%{public}s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v5 = *__error();
    long long v6 = __error();
    double v7 = strerror(*v6);
    int v35 = 67240450;
    *(_DWORD *)unint64_t v36 = v5;
    *(_WORD *)&v36[4] = 2082;
    *(void *)&v36[6] = v7;
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n", v8);
    if (v8 == (char *)buf) {
      return;
    }
LABEL_42:
    free(v8);
    return;
  }
  uint64_t v9 = [+[NSThread currentThread] name];
  if ([(NSString *)v9 length]) {
    label = [(NSString *)v9 UTF8String];
  }
  else {
    label = dispatch_queue_get_label(0);
  }
  char v11 = label;
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v12 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446466;
    *(void *)BOOL v42 = v11;
    *(_WORD *)&_OWORD v42[8] = 2050;
    *(void *)&v42[10] = v34;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadParam,%{public}s,id,0x%{public}llx", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v35 = 136446466;
    *(void *)unint64_t v36 = v11;
    *(_WORD *)&v36[8] = 2050;
    *(void *)&v36[10] = v34;
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  int v32 = -1;
  if (pthread_getschedparam(v0, &v32, &v33))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v13 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      int v14 = *__error();
      int v15 = __error();
      double v16 = strerror(*v15);
      *(_DWORD *)std::string buf = 136446722;
      *(void *)BOOL v42 = v11;
      *(_WORD *)&_OWORD v42[8] = 1026;
      *(_DWORD *)&v42[10] = v14;
      *(_WORD *)&v42[14] = 2082;
      *(void *)&v42[16] = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Raven: rct,threadParam,getschedparam,%{public}s,failed,%{public}d,%{public}s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v17 = *__error();
      uint64_t v18 = __error();
      BOOL v19 = strerror(*v18);
      int v35 = 136446722;
      *(void *)unint64_t v36 = v11;
      *(_WORD *)&v36[8] = 1026;
      *(_DWORD *)&v36[10] = v17;
      *(_WORD *)&v36[14] = 2082;
      *(void *)&v36[16] = v19;
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n");
      goto LABEL_41;
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v20 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = v32;
      int sched_priority = v33.sched_priority;
      priority_miuint64_t n = sched_get_priority_min(v32);
      int priority_max = sched_get_priority_max(v32);
      int v25 = sched_get_priority_max(4);
      *(_DWORD *)std::string buf = 136447490;
      *(void *)BOOL v42 = v11;
      *(_WORD *)&_OWORD v42[8] = 1026;
      *(_DWORD *)&v42[10] = v21;
      *(_WORD *)&v42[14] = 1026;
      *(_DWORD *)&v42[16] = sched_priority;
      *(_WORD *)&v42[20] = 1026;
      *(_DWORD *)&v42[22] = priority_min;
      __int16 v43 = 1026;
      int v44 = priority_max;
      __int16 v45 = 1026;
      int v46 = v25;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadParam,%{public}s,policy,%{public}d,priority,%{public}d,currMin,%{public}d,currMax,%{public}d,allMax,%{public}d", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v27 = v32;
      int v28 = v33.sched_priority;
      int v29 = sched_get_priority_min(v32);
      int v30 = sched_get_priority_max(v32);
      int v31 = sched_get_priority_max(4);
      int v35 = 136447490;
      *(void *)unint64_t v36 = v11;
      *(_WORD *)&v36[8] = 1026;
      *(_DWORD *)&v36[10] = v27;
      *(_WORD *)&v36[14] = 1026;
      *(_DWORD *)&v36[16] = v28;
      *(_WORD *)&v36[20] = 1026;
      *(_DWORD *)&v36[22] = v29;
      __int16 v37 = 1026;
      int v38 = v30;
      __int16 v39 = 1026;
      int v40 = v31;
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::RavenThread::LogThreadParam()", "%s\n");
LABEL_41:
      if (v8 == (char *)buf) {
        return;
      }
      goto LABEL_42;
    }
  }
}

void sub_100CCC278(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  int v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadFunction,entry", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(v19) = 0;
    double v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RavenThread::EntryFunction()", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  pthread_setname_np("RavenThread");
  sub_100CCBB5C();
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 184));
  if (v3)
  {
    do
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
      __lk.__owns_ = 1;
      std::mutex::lock((std::mutex *)(a1 + 16));
      v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v7.__d_.__rep_ = 500000000;
      if (v6.__d_.__rep_)
      {
        if (v6.__d_.__rep_ >= 1)
        {
          if ((unint64_t)v6.__d_.__rep_ <= 0x20C49BA5E353F7)
          {
LABEL_19:
            if (v6.__d_.__rep_ < 0x20C49BA5DBB2D8)
            {
              v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 500000000;
              goto LABEL_22;
            }
          }
          v7.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_22;
        }
        if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          goto LABEL_19;
        }
        v7.__d_.__rep_ = 0x800000001DCD6500;
      }
LABEL_22:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 80), &__lk, v7);
      if (std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_ > 499999999)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        BOOL v8 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Raven: #warning,rct,timeout,cv", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::RavenThread::EntryFunction()", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      long long v9 = v20;
      long long v10 = *(_OWORD *)(a1 + 128);
      long long v11 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 144) = v9;
      long long v19 = v10;
      long long v20 = v11;
      long long v12 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 160) = v21;
      long long v21 = v12;
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      while (*((void *)&v21 + 1))
      {
        unsigned __int8 v13 = atomic_load((unsigned __int8 *)(a1 + 184));
        if ((v13 & 1) == 0) {
          break;
        }
        sub_100CCB270(*(void *)(a1 + 200), (uint64_t *)(*(void *)(*((void *)&v19 + 1) + 8 * ((unint64_t)v21 / 0xAA))+ 24 * ((unint64_t)v21 % 0xAA)));
        sub_100CF083C(&v19);
      }
      sub_100CEE3BC(&v19);
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)(a1 + 184));
    }
    while ((v14 & 1) != 0);
  }
  std::promise<void>::set_value((std::promise<void> *)(a1 + 176));
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadFunction,exit", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(v19) = 0;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RavenThread::EntryFunction()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_100CCC838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, uint64_t a16)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  sub_100CEE3BC(&a16);
  _Unwind_Resume(a1);
}

void sub_100CCC874(uint64_t a1, unsigned __int8 a2)
{
  atomic_store(a2, (unsigned __int8 *)(a1 + 184));
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  unsigned __int8 v3 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 184));
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4 & 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Raven: rct,updateThreadState,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    atomic_load((unsigned __int8 *)(a1 + 184));
    std::chrono::steady_clock::time_point v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RavenThread::SetThreadState(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
}

void sub_100CCCA48(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1018212795;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  std::promise<void>::promise((std::promise<void> *)(a1 + 176));
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a2;
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  unsigned __int8 v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Raven: rct,RavenThread,enter", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    std::chrono::steady_clock::time_point v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::RavenThread::RavenThread(CLRavenController &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100CCC874(a1, 1u);
  *(void *)std::string buf = sub_100CCC278;
  uint64_t v7 = 0;
  sub_100CF08C4();
}

void sub_100CCCDF4(_Unwind_Exception *a1)
{
  std::thread::~thread(v5);
  std::promise<void>::~promise(v4);
  sub_100CEE3BC((void *)(v1 + 128));
  std::condition_variable::~condition_variable(v3);
  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100CCCE3C(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  int v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Raven: rct,~RavenThread,enter", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(v16.__state_) = 0;
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_100CCC874(a1, 0);
  if (*(void *)(a1 + 192))
  {
    std::promise<void>::get_future((std::promise<void> *)(a1 + 176));
    *(void *)std::string buf = std::chrono::steady_clock::now().__d_.__rep_ + 300000000;
    unsigned int v3 = sub_100CF0B2C((uint64_t)v16.__state_, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)buf);
    if (v3 == 1)
    {
      unsigned int v4 = 0;
      do
      {
        sub_100CCC874(a1, 0);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        std::chrono::steady_clock::time_point v5 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Raven: #warning,rct,~RavenThread,retryToStop,%{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          int v17 = 67240192;
          unsigned int v18 = v4;
          uint64_t v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
        *(void *)std::string buf = std::chrono::steady_clock::now().__d_.__rep_ + 300000000;
        unsigned int v3 = sub_100CF0B2C((uint64_t)v16.__state_, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)buf);
        if (v3 != 1) {
          break;
        }
      }
      while (v4++ < 0xC7);
    }
    if (v3)
    {
      sub_100CCBB5C();
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      BOOL v8 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Raven: rct,~RavenThread,status,%{public}d,failedJoin", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v17 = 67240192;
        unsigned int v18 = v3;
        unsigned __int8 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    std::thread::join((std::thread *)(a1 + 192));
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    long long v9 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Raven: rct,~RavenThread,done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v17) = 0;
      unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    std::future<void>::~future(&v16);
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    long long v10 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Raven: rct,~RavenThread,notJoinable", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v16.__state_) = 0;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  std::thread::~thread((std::thread *)(a1 + 192));
  std::promise<void>::~promise((std::promise<void> *)(a1 + 176));
  sub_100CEE3BC((void *)(a1 + 128));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_100CCD5A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CCD5B8()
{
  return 1;
}

uint64_t sub_100CCD5C0()
{
  return 1;
}

uint64_t sub_100CCD5C8()
{
  return 0;
}

void *sub_100CCD5D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "RavenControllerDisabledState");
}

uint64_t sub_100CCD5E0(uint64_t a1)
{
  sub_100CCD764(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3)
  {
    sub_1008C17E8(v3);
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v11 = 0;
  long long v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 1;
  if (*(unsigned char *)(v2 + 4664))
  {
    double v4 = sub_10016C458();
    std::chrono::steady_clock::time_point v5 = (std::timed_mutex *)(*(void *)(a1 + 8) + 320);
    std::timed_mutex::lock(v5);
    std::chrono::system_clock::time_point v6 = *(void **)(*(void *)(a1 + 8) + 4672);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100CCD9A8;
    v10[3] = &unk_1022F1980;
    *(double *)&void v10[5] = v4;
    void v10[4] = &v11;
    [v6 pauseResetAndFreeRavenSupervisorWithCompletion:v10];
  }
  else
  {
    if (!*(void *)(v2 + 312)) {
      goto LABEL_8;
    }
    std::chrono::steady_clock::time_point v5 = (std::timed_mutex *)(v2 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(v2 + 320));
    cnframework::Supervisor::Pause(*(cnframework::Supervisor **)(*(void *)(a1 + 8) + 312));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(*(void *)(a1 + 8) + 312));
  }
  std::timed_mutex::unlock(v5);
LABEL_8:
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 4680);
  if (v7) {
    sub_101212CAC(v7);
  }
  uint64_t v8 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_100CCD72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

char *sub_100CCD764(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 4633);
  sub_100CDC26C(a1);
  if (*v2)
  {
    uint64_t v3 = *(void *)(a1 + 168);
    if (v3) {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:2];
    }
    *uint64_t v2 = 0;
  }
  sub_100CDC424(a1);
  sub_100CDC5DC(a1);
  sub_100CDC7B0(a1);
  if (v2[4])
  {
    uint64_t v4 = *(void *)(a1 + 136);
    if (v4) {
      [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:36];
    }
    v2[4] = 0;
  }
  if (v2[5])
  {
    uint64_t v5 = *(void *)(a1 + 144);
    if (v5) {
      [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:10];
    }
    v2[5] = 0;
  }
  sub_100CDC828(a1);
  sub_100CDC9E0(a1);
  if (v2[8])
  {
    uint64_t v6 = *(void *)(a1 + 168);
    if (v6) {
      [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:0];
    }
    v2[8] = 0;
  }
  if (v2[9])
  {
    uint64_t v7 = *(void *)(a1 + 176);
    if (v7) {
      [*(id *)(v7 + 16) unregister:*(void *)(v7 + 8) forNotification:25];
    }
    v2[9] = 0;
  }
  if (v2[10])
  {
    uint64_t v8 = *(void *)(a1 + 184);
    if (v8) {
      [*(id *)(v8 + 16) unregister:*(void *)(v8 + 8) forNotification:1];
    }
    v2[10] = 0;
  }
  if (v2[11])
  {
    uint64_t v9 = *(void *)(a1 + 192);
    if (v9) {
      [*(id *)(v9 + 16) unregister:*(void *)(v9 + 8) forNotification:0];
    }
    v2[11] = 0;
  }
  if (v2[12])
  {
    uint64_t v10 = *(void *)(a1 + 200);
    if (v10) {
      [*(id *)(v10 + 16) unregister:*(void *)(v10 + 8) forNotification:2];
    }
    v2[12] = 0;
  }
  if (v2[13])
  {
    if (*(void *)(a1 + 232))
    {
      uint64_t v11 = *(void **)(a1 + 240);
      if (v11) {
        [v11 unregisterForUpdates:];
      }
    }
    v2[13] = 0;
  }
  sub_100CDCC00(a1);
  sub_100CDCDB8(a1);
  if (v2[16])
  {
    uint64_t v12 = *(void *)(a1 + 248);
    if (v12) {
      [*(id *)(v12 + 16) unregister:*(void *)(v12 + 8) forNotification:0];
    }
    v2[16] = 0;
  }
  if (v2[17])
  {
    uint64_t v13 = *(void *)(a1 + 256);
    if (v13) {
      [*(id *)(v13 + 16) unregister:*(void *)(v13 + 8) forNotification:0];
    }
    v2[17] = 0;
  }
  if (v2[18])
  {
    [*(id *)(a1 + 264) setNextFireDelay:1.79769313e308];
    v2[18] = 0;
  }
  sub_100CDCF7C(a1);
  sub_100CDD134(a1);
  if (v2[21])
  {
    uint64_t v14 = *(void *)(a1 + 272);
    if (v14) {
      [*(id *)(v14 + 16) unregister:*(void *)(v14 + 8) forNotification:30];
    }
    v2[21] = 0;
  }
  if (v2[22])
  {
    if (*(void *)(a1 + 280))
    {
      int v15 = *(void **)(a1 + 288);
      if (v15) {
        [v15 deregisterForVisionNotifications:];
      }
    }
    v2[22] = 0;
  }

  return sub_100CDD2EC((char *)a1);
}

void sub_100CCD9A8(uint64_t a1, int a2)
{
  double v4 = sub_10016C458();
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v5 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = (v4 - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)std::string buf = 67240448;
    int v11 = a2;
    __int16 v12 = 2050;
    double v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,Raven,RavenControllerDisabledState,pauseResetAndFreeRavenSupervisorWithCompletion,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRavenController::RavenControllerDisabledState::HandleStateEntry()_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if ((a2 & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v7 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Raven,Failed to pause, reset, and free raven supervisor", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLRavenController::RavenControllerDisabledState::HandleStateEntry()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void *sub_100CCDCE8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "RavenControllerBestEffortState");
}

void sub_100CCDCF8(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_1000C7F88(buf);
  id v2 = sub_100520A18(*(uint64_t *)buf);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v3 = [v2 allKeys];
  id v4 = [v3 countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v32;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v32 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v6);
        if ([v7 hasPrefix:@"ravenconfig_"])
        {
          sub_100134750(v29, (char *)[[objc_msgSend(v7 substringFromIndex:objc_msgSend(@"ravenconfig_", "length")) stringByUTF8String]);
          sub_100134750(__p, (char *)[[[v2 objectForKeyedSubscript:v7] description] UTF8String]);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v8 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v9 = v29;
            if ((v30 & 0x80u) != 0) {
              uint64_t v9 = (void **)v29[0];
            }
            uint64_t v10 = __p;
            if ((v28 & 0x80u) != 0) {
              uint64_t v10 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136380931;
            *(void *)&uint8_t buf[4] = v9;
            *(_WORD *)&unsigned char buf[12] = 2081;
            *(void *)&buf[14] = v10;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Raven: daemon setting,%{private}s,%{private}s", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            unint64_t v22 = v29;
            if ((v30 & 0x80u) != 0) {
              unint64_t v22 = (void **)v29[0];
            }
            BOOL v23 = __p;
            if ((v28 & 0x80u) != 0) {
              BOOL v23 = (void **)__p[0];
            }
            LODWORD(v35.__r_.__value_.__l.__data_) = 136380931;
            *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
            WORD2(v35.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
            unint64_t v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "std::string RavenParametersStringFromDaemonDefaults()", "%s\n", v24);
            if (v24 != (char *)buf) {
              free(v24);
            }
          }
          if ((v30 & 0x80u) == 0) {
            size_t v11 = v30;
          }
          else {
            size_t v11 = (size_t)v29[1];
          }
          sub_1001110E4((uint64_t)&v26, v11 + 2);
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v12 = &v26;
          }
          else {
            __int16 v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          if (v11)
          {
            if ((v30 & 0x80u) == 0) {
              double v13 = v29;
            }
            else {
              double v13 = (void **)v29[0];
            }
            memmove(v12, v13, v11);
          }
          strcpy((char *)v12 + v11, ": ");
          if ((v28 & 0x80u) == 0) {
            uint64_t v14 = __p;
          }
          else {
            uint64_t v14 = (void **)__p[0];
          }
          if ((v28 & 0x80u) == 0) {
            std::string::size_type v15 = v28;
          }
          else {
            std::string::size_type v15 = (std::string::size_type)__p[1];
          }
          std::future<void> v16 = std::string::append(&v26, (const std::string::value_type *)v14, v15);
          long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          unsigned int v18 = std::string::append(&v35, "\n");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v18->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if ((buf[23] & 0x80u) == 0) {
            long long v20 = buf;
          }
          else {
            long long v20 = *(uint8_t **)buf;
          }
          if ((buf[23] & 0x80u) == 0) {
            std::string::size_type v21 = buf[23];
          }
          else {
            std::string::size_type v21 = *(void *)&buf[8];
          }
          std::string::append(a1, (const std::string::value_type *)v20, v21);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v26.__r_.__value_.__l.__data_);
          }
          if ((char)v28 < 0) {
            operator delete(__p[0]);
          }
          if ((char)v30 < 0) {
            operator delete(v29[0]);
          }
        }
        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v25 = [v3 countByEnumeratingWithState:&v31 objects:v37 count:16];
      id v4 = v25;
    }
    while (v25);
  }
}

void sub_100CCE188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v54 + 23) < 0) {
    operator delete(*(void **)v54);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100CCE258(uint64_t a1)
{
  *(double *)(a1 + 16) = sub_10016C458();
  *(_WORD *)(a1 + 24) = 0;
  sub_100168850(v64);
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 4680)
    && (sub_10120EFA4(*(void *)(v2 + 4680)), uint64_t v2 = *(void *)(a1 + 8), *(void *)(v2 + 4680))
    || *(unsigned char *)(v2 + 4664))
  {
    sub_100CCEAD8(v2, (uint64_t)v64, (uint64_t)v59);
    if (v63 < 0) {
      operator delete(__p);
    }
    if (v61 < 0) {
      operator delete(v60);
    }
  }
  uint64_t v55 = 0;
  BOOL v56 = &v55;
  uint64_t v57 = 0x2020000000;
  char v58 = 1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 4664))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,CLRavenController", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v54.__r_.__value_.__l.__data_) = 0;
      BOOL v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    sub_100CCDCF8(&v54);
    int v6 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
    std::string::size_type v7 = v54.__r_.__value_.__r.__words[0];
    NSStringEncoding v8 = +[NSString defaultCStringEncoding];
    if (v6 >= 0) {
      uint64_t v9 = &v54;
    }
    else {
      uint64_t v9 = (std::string *)v7;
    }
    uint64_t v10 = +[NSString stringWithCString:v9 encoding:v8];
    int64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    char v11 = wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
    if (v11)
    {
      if (v53 >= 0) {
        __int16 v12 = &v51;
      }
      else {
        __int16 v12 = v51;
      }
      if (v53 >= 0) {
        uint64_t v13 = HIBYTE(v53);
      }
      else {
        uint64_t v13 = v52;
      }
      uint64_t v14 = +[NSData dataWithBytes:v12 length:v13];
      double v15 = sub_10016C458();
      std::future<void> v16 = (std::timed_mutex *)(*(void *)(a1 + 8) + 320);
      std::timed_mutex::lock(v16);
      long long v17 = *(void **)(*(void *)(a1 + 8) + 4672);
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      _OWORD v49[2] = sub_100CCEF00;
      _DWORD v49[3] = &unk_1022F1980;
      *(double *)&v49[5] = v15;
      v49[4] = &v55;
      [v17 configureInitializeAndStartRavenSupervisorWithPlatformInfo:v14 withParametersOverrideString:v10 withCompletion:v49];
      std::timed_mutex::unlock(v16);
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      long long v19 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Raven: Could not serialize protobuf message", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        __int16 v50 = 0;
        long long v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(v51);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if ((v11 & 1) == 0) {
      goto LABEL_81;
    }
  }
  else if (*(void *)(v3 + 312))
  {
    unsigned int v18 = (std::timed_mutex *)(v3 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(v3 + 320));
    cnframework::Supervisor::Start(*(cnframework::Supervisor **)(*(void *)(a1 + 8) + 312));
    std::timed_mutex::unlock(v18);
  }
  if (!*((unsigned char *)v56 + 24))
  {
LABEL_81:
    BOOL v45 = 0;
    goto LABEL_82;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    sub_100CCF240(*(void *)(a1 + 8));
    sub_100CCF404(*(void *)(a1 + 8));
    sub_100CCF5C8(*(void *)(a1 + 8));
    sub_100CCF7B8(*(void *)(a1 + 8));
    sub_100CCF984(*(void *)(a1 + 8));
  }
  sub_100CCFB48(*(void *)(a1 + 8));
  sub_100CCFD08(*(void *)(a1 + 8));
  uint64_t v20 = *(void *)(a1 + 8);
  std::string::size_type v21 = (unsigned char *)(v20 + 4637);
  if (!*(unsigned char *)(v20 + 4637))
  {
    uint64_t v22 = *(void *)(v20 + 136);
    if (v22)
    {
      [*(id *)(v22 + 16) register:*(void *)(v22 + 8) forNotification:36 registrationInfo:0];
      uint64_t v20 = *(void *)(a1 + 8);
    }
    *std::string::size_type v21 = 1;
  }
  BOOL v23 = (unsigned char *)(v20 + 4638);
  if (!*(unsigned char *)(v20 + 4638))
  {
    uint64_t v24 = *(void *)(v20 + 144);
    if (v24)
    {
      [*(id *)(v24 + 16) register:*(void *)(v24 + 8) forNotification:10 registrationInfo:0];
      uint64_t v20 = *(void *)(a1 + 8);
    }
    *BOOL v23 = 1;
  }
  sub_100CCFEEC(v20);
  uint64_t v25 = *(void *)(a1 + 8);
  std::string v26 = (unsigned char *)(v25 + 4641);
  if (!*(unsigned char *)(v25 + 4641))
  {
    uint64_t v27 = *(void *)(v25 + 168);
    if (v27)
    {
      [*(id *)(v27 + 16) register:*(void *)(v27 + 8) forNotification:0 registrationInfo:0];
      uint64_t v25 = *(void *)(a1 + 8);
    }
    unsigned char *v26 = 1;
  }
  unsigned __int8 v28 = (unsigned char *)(v25 + 4642);
  if (!*(unsigned char *)(v25 + 4642))
  {
    uint64_t v29 = *(void *)(v25 + 176);
    if (v29)
    {
      [*(id *)(v29 + 16) register:*(void *)(v29 + 8) forNotification:25 registrationInfo:0];
      uint64_t v25 = *(void *)(a1 + 8);
    }
    *unsigned __int8 v28 = 1;
  }
  unsigned __int8 v30 = (unsigned char *)(v25 + 4643);
  if (!*(unsigned char *)(v25 + 4643))
  {
    uint64_t v31 = *(void *)(v25 + 184);
    if (v31)
    {
      [*(id *)(v31 + 16) register:*(void *)(v31 + 8) forNotification:1 registrationInfo:0];
      uint64_t v25 = *(void *)(a1 + 8);
    }
    *unsigned __int8 v30 = 1;
  }
  long long v32 = (unsigned char *)(v25 + 4644);
  if (!*(unsigned char *)(v25 + 4644))
  {
    uint64_t v33 = *(void *)(v25 + 192);
    if (v33)
    {
      [*(id *)(v33 + 16) register:*(void *)(v33 + 8) forNotification:0 registrationInfo:0];
      uint64_t v25 = *(void *)(a1 + 8);
    }
    unsigned char *v32 = 1;
  }
  long long v34 = (unsigned char *)(v25 + 4645);
  if (!*(unsigned char *)(v25 + 4645))
  {
    uint64_t v35 = *(void *)(v25 + 200);
    if (v35)
    {
      [*(id *)(v35 + 16) register:*(void *)(v35 + 8) forNotification:2 registrationInfo:0];
      uint64_t v25 = *(void *)(a1 + 8);
    }
    unsigned char *v34 = 1;
  }
  sub_100CD01C8(v25);
  sub_100CD051C(*(void *)(a1 + 8));
  uint64_t v36 = *(void *)(a1 + 8);
  __int16 v37 = (unsigned char *)(v36 + 4649);
  if (!*(unsigned char *)(v36 + 4649))
  {
    uint64_t v38 = *(void *)(v36 + 248);
    if (v38)
    {
      [*(id *)(v38 + 16) register:*(void *)(v38 + 8) forNotification:0 registrationInfo:0];
      *__int16 v37 = 1;
      uint64_t v36 = *(void *)(a1 + 8);
    }
  }
  __int16 v39 = (unsigned char *)(v36 + 4650);
  if (!*(unsigned char *)(v36 + 4650))
  {
    uint64_t v40 = *(void *)(v36 + 256);
    if (v40)
    {
      [*(id *)(v40 + 16) register:*(void *)(v40 + 8) forNotification:0 registrationInfo:0];
      *__int16 v39 = 1;
      uint64_t v36 = *(void *)(a1 + 8);
    }
  }
  unint64_t v41 = (unsigned char *)(v36 + 4651);
  if (!*(unsigned char *)(v36 + 4651))
  {
    [*(id *)(v36 + 264) setNextFireDelay:0.1 interval:0.1];
    *unint64_t v41 = 1;
    uint64_t v36 = *(void *)(a1 + 8);
  }
  sub_100CD06E8(v36);
  sub_100CD08A8(*(void *)(a1 + 8));
  uint64_t v42 = *(void *)(a1 + 8);
  __int16 v43 = (unsigned char *)(v42 + 4654);
  if (!*(unsigned char *)(v42 + 4654))
  {
    uint64_t v44 = *(void *)(v42 + 272);
    if (v44)
    {
      [*(id *)(v44 + 16) register:*(void *)(v44 + 8) forNotification:30 registrationInfo:0];
      uint64_t v42 = *(void *)(a1 + 8);
    }
    *__int16 v43 = 1;
  }
  sub_100CD0A68(v42);
  sub_100CD0C2C(*(void *)(a1 + 8));
  BOOL v45 = *((unsigned char *)v56 + 24) != 0;
LABEL_82:
  _Block_object_dispose(&v55, 8);
  sub_1001687EC(v64);
  return v45;
}