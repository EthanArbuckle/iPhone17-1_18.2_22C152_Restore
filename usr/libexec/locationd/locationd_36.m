void sub_1017EE148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a67;
  char a72;

  if (a52 < 0) {
    operator delete(__p);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  _Unwind_Resume(a1);
}

void *sub_1017EE214(uint64_t a1, int *a2)
{
  sub_100103240();
  result = (void *)sub_10073CAD0();
  if (result)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 880);
      int v7 = *a2;
      int v8 = a2[10];
      int v9 = a2[12];
      int v10 = a2[13];
      *(_DWORD *)buf = 67110144;
      int v30 = v6;
      __int16 v31 = 1024;
      int v32 = v7;
      __int16 v33 = 1024;
      int v34 = v8;
      __int16 v35 = 1024;
      int v36 = v9;
      __int16 v37 = 1024;
      int v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,sendLPPConfigToBaseband,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v12 = *(_DWORD *)(a1 + 880);
      int v13 = *a2;
      int v14 = a2[10];
      int v15 = a2[12];
      int v16 = a2[13];
      int v19 = 67110144;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v16;
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::sendLPPConfigToBaseband(const CLEmergencyController::LocationSettings &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    v18[0] = off_10233EDB8;
    v18[1] = a2;
    v18[3] = v18;
    uint64_t v11 = *(void *)(a1 + 200);
    if (!v11) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v18);
    return sub_1017DD378(v18);
  }
  return result;
}

void sub_1017EE49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1017EE4B8(void *a1, int a2, uint64_t a3)
{
}

void *sub_1017EE4C4(void *a1)
{
  sub_1017EE594((uint64_t)a1);
  sub_1017D5A6C((uint64_t)(a1 + 64));
  sub_1017DC09C(a1 + 407);
  v2 = (std::__shared_weak_count *)a1[293];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  v3 = (std::__shared_weak_count *)a1[291];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  v4 = (std::__shared_weak_count *)a1[289];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  v5 = (std::__shared_weak_count *)a1[287];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[285];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_10084DD34((uint64_t)(a1 + 111));
  uint64_t v7 = a1[105];
  a1[105] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1017DBE30(a1 + 26);
  sub_1017DBDAC(a1 + 22);
  sub_1017DBD28(a1 + 18);
  sub_1017FAEE8((uint64_t)(a1 + 1));
  return a1;
}

double sub_1017EE594(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,resetStateData", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::resetStateData()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  v4 = *(std::__shared_weak_count **)(a1 + 2312);
  long long v5 = 0uLL;
  *(_OWORD *)(a1 + 2304) = 0u;
  if (v4)
  {
    sub_1000DB0A0(v4);
    long long v5 = 0uLL;
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 2328);
  *(_OWORD *)(a1 + 2320) = v5;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 2280);
  *(_OWORD *)(a1 + 2272) = 0u;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  *(void *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 868) = -1;
  *(void *)(a1 + 856) = 0;
  *(unsigned char *)(a1 + 877) = 0;
  sub_101804FAC(*(void **)(a1 + 64), (void *)(a1 + 72), a1 + 8);
  uint64_t v8 = *(void *)(a1 + 840);
  if (*(int *)(v8 + 8) >= 1) {
    sub_100EBC6AC(v8);
  }
  sub_1017D5A6C(a1 + 240);
  *(void *)(a1 + 784) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 800) = _Q0;
  *(_WORD *)(a1 + 822) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 816) = 0;
  *(unsigned char *)(a1 + 820) = 0;
  *(_DWORD *)(a1 + 824) = 1;
  bzero(buf, 0x328uLL);
  uint64_t v14 = 0;
  *(void *)&buf[8] = -1;
  *(_DWORD *)&buf[16] = -1;
  do
  {
    int v15 = &buf[v14];
    *((_WORD *)v15 + 14) = 0;
    *(_DWORD *)(v15 + 30) = 0x7FFFFFFF;
    v14 += 12;
  }
  while (v14 != 768);
  buf[790] = 0;
  buf[800] = 0;
  memcpy((void *)(a1 + 2436), buf, 0x328uLL);
  double result = NAN;
  *(_OWORD *)(a1 + 2416) = xmmword_101D23030;
  *(unsigned char *)(a1 + 2434) = 0;
  *(_WORD *)(a1 + 2432) = 0;
  *(void *)(a1 + 3248) = 0;
  return result;
}

void sub_1017EE860(uint64_t a1, char a2)
{
  if ((sub_10073CBFC() & 1) == 0)
  {
    *(unsigned char *)(a1 + 138) = a2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 880);
      int v6 = *(unsigned __int8 *)(a1 + 138);
      *(_DWORD *)buf = 67109376;
      v9[0] = v5;
      LOWORD(v9[1]) = 1024;
      *(_DWORD *)((char *)&v9[1] + 2) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,setLockOutNILR,fLockOutNILR,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::setLockOutNILR(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (*(unsigned char *)(a1 + 138))
    {
      *(void *)&v9[3] = 0;
      v9[5] = 0;
      v9[2] = *(_DWORD *)(a1 + 856);
      *(void *)int v9 = *(void *)(a1 + 860);
      *(void *)(a1 + 2376) = buf;
      sub_1017EEA80(a1 + 8, 11);
      *(void *)(a1 + 2376) = 0;
    }
  }
}

uint64_t sub_1017EEA80(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v90 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_10180BC48();
    goto LABEL_169;
  }
  int v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_10180BDB4(qword_1024193D0 == -1);
    goto LABEL_169;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    uint64_t v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    uint64_t v8 = *(int *)(a1 + 4);
    if (v8 > 3) {
      int v9 = "StateUnknown";
    }
    else {
      int v9 = off_10233F258[v8];
    }
    sub_100134750(__p, v9);
    int v10 = SHIBYTE(v94);
    uint64_t v11 = *(unsigned char **)__p;
    sub_1017F4204(a2, v101);
    int v12 = __p;
    if (v10 < 0) {
      int v12 = v11;
    }
    if (v104 >= 0) {
      int v13 = v101;
    }
    else {
      int v13 = *(unsigned char **)v101;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v97 = 2080;
    v98 = v12;
    __int16 v99 = 2080;
    v100 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    int v3 = &qword_102419000;
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    v63 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      v63 = (void *)*v63;
    }
    sub_1017F4E88(*(_DWORD *)(a1 + 4), v101);
    int v64 = v104;
    v65 = *(unsigned char **)v101;
    sub_1017F4204(a2, v88);
    v66 = v101;
    if (v64 < 0) {
      v66 = v65;
    }
    if (v89 >= 0) {
      v67 = v88;
    }
    else {
      v67 = (void **)v88[0];
    }
    *(_DWORD *)__p = 136315650;
    *(void *)&__p[4] = v63;
    __int16 v92 = 2080;
    v93 = v66;
    __int16 v94 = 2080;
    v95 = v67;
    v68 = (char *)_os_log_send_and_compose_impl();
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    int v3 = &qword_102419000;
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_31;
  }
  int v15 = (uint64_t **)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 4);
  uint64_t v17 = a1 + 16;
  do
  {
    int v18 = *(_DWORD *)(v14 + 32);
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      int v20 = (uint64_t *)v14;
    }
    else {
      int v20 = (uint64_t *)(v14 + 8);
    }
    if (!v19) {
      uint64_t v17 = v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_10180BF28();
    goto LABEL_169;
  }
  __int16 v21 = *(uint64_t (**)(void *, uint64_t))(v17 + 40);
  uint64_t v22 = *(void *)(v17 + 48);
  __int16 v23 = (void *)(*(void *)(a1 + 32) + (v22 >> 1));
  if (v22) {
    __int16 v21 = *(uint64_t (**)(void *, uint64_t))(*v23 + v21);
  }
  uint64_t v24 = v21(v23, a2);
  uint64_t v25 = v24;
  int v87 = v24;
  if (a2 <= 1 && v24 != v90)
  {
    sub_10180C36C();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v27 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v27 = (void *)*v27;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      v72 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        v72 = (void *)*v72;
      }
      *(_DWORD *)__p = 136315138;
      *(void *)&__p[4] = v72;
      v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v28 = qword_1024193D8;
  os_log_type_t v29 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v29))
  {
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    if (v25 > 3) {
      __int16 v31 = "StateUnknown";
    }
    else {
      __int16 v31 = off_10233F258[(int)v25];
    }
    sub_100134750(buf, v31);
    if (v99 >= 0) {
      int v32 = buf;
    }
    else {
      int v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)__p = 136315394;
    *(void *)&__p[4] = v30;
    __int16 v92 = 2080;
    v93 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v99) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    v69 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      v69 = (void *)*v69;
    }
    sub_1017F4E88(v25, __p);
    if (v94 >= 0) {
      v70 = __p;
    }
    else {
      v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)v101 = 136315394;
    *(void *)&v101[4] = v69;
    __int16 v102 = 2080;
    v103 = v70;
    v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v25 != v90)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      __int16 v35 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v35 = (void *)*v35;
      }
      if (v90 > 3) {
        int v36 = "StateUnknown";
      }
      else {
        int v36 = off_10233F258[v90];
      }
      sub_100134750(__p, v36);
      __int16 v37 = v3;
      int v38 = SHIBYTE(v94);
      v39 = *(unsigned char **)__p;
      sub_100134750(v101, "Exit");
      v40 = __p;
      if (v38 < 0) {
        v40 = v39;
      }
      if (v104 >= 0) {
        v41 = v101;
      }
      else {
        v41 = *(unsigned char **)v101;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v35;
      __int16 v97 = 2080;
      v98 = v40;
      __int16 v99 = 2080;
      v100 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      int v3 = v37;
      if (SHIBYTE(v94) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      v74 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        v74 = (void *)*v74;
      }
      sub_1017F4E88(v90, v101);
      v75 = v3;
      int v76 = v104;
      v77 = *(unsigned char **)v101;
      sub_100134750(v88, "Exit");
      v78 = v101;
      if (v76 < 0) {
        v78 = v77;
      }
      if (v89 >= 0) {
        v79 = v88;
      }
      else {
        v79 = (void **)v88[0];
      }
      *(_DWORD *)__p = 136315650;
      *(void *)&__p[4] = v74;
      __int16 v92 = 2080;
      v93 = v78;
      __int16 v94 = 2080;
      v95 = v79;
      v80 = (char *)_os_log_send_and_compose_impl();
      if (v89 < 0) {
        operator delete(v88[0]);
      }
      int v3 = v75;
      int v15 = (uint64_t **)(a1 + 8);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v80);
      if (v80 != buf) {
        free(v80);
      }
    }
    uint64_t v42 = *(void *)(a1 + 32);
    *(void *)buf = &v90;
    v43 = sub_1000C5658(v15, (int *)&v90, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    v44 = v43[5];
    uint64_t v45 = (uint64_t)v43[6];
    v46 = (void *)(v42 + (v45 >> 1));
    if (v45) {
      v44 = *(uint64_t **)(*v46 + v44);
    }
    int v47 = ((uint64_t (*)(void *, uint64_t))v44)(v46, 1);
    if (v47 == v90)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      v48 = qword_1024193D8;
      os_log_type_t v49 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v49))
      {
        v50 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          v50 = (void *)*v50;
        }
        if (v25 > 3) {
          v51 = "StateUnknown";
        }
        else {
          v51 = off_10233F258[(int)v25];
        }
        sub_100134750(__p, v51);
        v52 = v3;
        int v53 = SHIBYTE(v94);
        v54 = *(unsigned char **)__p;
        sub_100134750(v101, "Enter");
        v55 = __p;
        if (v53 < 0) {
          v55 = v54;
        }
        if (v104 >= 0) {
          v56 = v101;
        }
        else {
          v56 = *(unsigned char **)v101;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v50;
        __int16 v97 = 2080;
        v98 = v55;
        __int16 v99 = 2080;
        v100 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        int v3 = v52;
        if (SHIBYTE(v94) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        v81 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          v81 = (void *)*v81;
        }
        sub_1017F4E88(v25, v101);
        int v82 = v104;
        v83 = *(unsigned char **)v101;
        sub_100134750(v88, "Enter");
        v84 = v101;
        if (v82 < 0) {
          v84 = v83;
        }
        if (v89 >= 0) {
          v85 = v88;
        }
        else {
          v85 = (void **)v88[0];
        }
        *(_DWORD *)__p = 136315650;
        *(void *)&__p[4] = v81;
        __int16 v92 = 2080;
        v93 = v84;
        __int16 v94 = 2080;
        v95 = v85;
        v86 = (char *)_os_log_send_and_compose_impl();
        if (v89 < 0) {
          operator delete(v88[0]);
        }
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
      }
      uint64_t v57 = *(void *)(a1 + 32);
      *(void *)buf = &v87;
      v58 = sub_1000C5658(v15, &v87, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      v59 = v58[5];
      uint64_t v60 = (uint64_t)v58[6];
      v61 = (void *)(v57 + (v60 >> 1));
      if (v60) {
        v59 = *(uint64_t **)(*v61 + v59);
      }
      uint64_t v25 = ((uint64_t (*)(void *, void))v59)(v61, 0);
      if (v25 == v87) {
        goto LABEL_101;
      }
      sub_10180C094();
    }
    else
    {
      sub_10180C200();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_1017EF808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void *sub_1017EF868(uint64_t a1, int a2, int a3)
{
  v12[0] = *(_DWORD *)(a1 + 880) != 0;
  v12[1] = a2;
  v12[2] = 0;
  v12[3] = a3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  os_log_type_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109888;
    int v23 = v7;
    __int16 v24 = 1024;
    int v25 = v7;
    __int16 v26 = 1024;
    int v27 = a2;
    __int16 v28 = 1024;
    int v29 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SendAbortCnf,instance,%d,posProtocol,%d,sessionId,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v10 = *(_DWORD *)(a1 + 880);
    int v14 = 67109888;
    int v15 = v10;
    __int16 v16 = 1024;
    int v17 = v10;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::sendAbortCnf(gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  v13[0] = off_10233DC88;
  v13[1] = v12;
  v13[3] = v13;
  uint64_t v8 = *(void *)(a1 + 200);
  if (!v8) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v13);
  return sub_1017DD378(v13);
}

void sub_1017EFAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void *sub_1017EFAF4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if (a3)
  {
    uint64_t v32 = -1;
    LOWORD(v33) = 0;
    BYTE2(v33) = -1;
    v34[0] = -1;
    *(void *)((char *)v34 + 7) = -1;
    v34[2] = 0xFFFFFFFF00000004;
    __int16 v35 = -1;
    char v36 = -1;
    int v37 = -1;
    __int16 v38 = 0;
    uint64_t v39 = 0x7FFFFFFF000000FFLL;
    int v40 = 0x7FFFFFFF;
    char v41 = -1;
    long long v42 = xmmword_101E37500;
    *(void *)v43 = 0xFFFFFFFF7FFFFFFFLL;
    *(_DWORD *)((char *)&v43[1] + 3) = -1;
    *(void *)&v43[3] = 0x8000000080000000;
    __int16 v44 = -1;
    v43[5] = -1;
    *(void *)&long long v9 = 0x8000000080000000;
    *((void *)&v9 + 1) = 0x8000000080000000;
    long long v45 = v9;
    __int16 v46 = -1;
    char v47 = -1;
    memset_pattern16(v48, &unk_101E37510, 0x78uLL);
    v48[120] = -1;
    int v49 = 255;
    v50[2] = -1;
    v50[0] = -1;
    *(void *)((char *)v50 + 7) = -1;
    int v51 = 0;
    uint64_t v52 = 0;
    BOOL v10 = *(_DWORD *)(a1 + 880) != 0;
    HIDWORD(v31) = a4;
    LODWORD(v32) = a5;
    int v30 = 0;
    LODWORD(v31) = 0;
    v28[0] = v10;
    int v29 = a2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67110144;
      int v104 = v12;
      __int16 v105 = 1024;
      int v106 = v12;
      __int16 v107 = 1024;
      int v108 = a4;
      __int16 v109 = 1024;
      int v110 = a5;
      __int16 v111 = 1024;
      int v112 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#ins%d,nilr,posResponseFailure,posProtocol,%d,sessionId,%d,result,%d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v24 = *(_DWORD *)(a1 + 880);
      int v93 = 67110144;
      int v94 = v24;
      __int16 v95 = 1024;
      int v96 = v24;
      __int16 v97 = 1024;
      int v98 = a4;
      __int16 v99 = 1024;
      int v100 = a5;
      __int16 v101 = 1024;
      int v102 = a2;
      int v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::sendMeasurementFailure(gnss::Emergency::Cplane::ErrorCodes, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    v91[0] = off_10233DFC8;
    v91[1] = v28;
    v91[3] = v91;
    uint64_t v13 = *(void *)(a1 + 200);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v13 + 48))(v13, v91);
    int v14 = v91;
  }
  else
  {
    int v29 = 0;
    LOBYTE(v30) = 0;
    uint64_t v31 = -1;
    uint64_t v32 = -1;
    uint64_t v15 = 9;
    int v33 = -1;
    do
    {
      __int16 v16 = &v28[v15];
      *(_WORD *)__int16 v16 = 0x7FFF;
      *(_DWORD *)((char *)v16 + 2) = -1;
      *(_DWORD *)((char *)v16 + 5) = -1;
      *(void *)(v16 + 3) = 0xFFFFFFFF00000004;
      *((unsigned char *)v16 + 20) = -1;
      v15 += 6;
    }
    while (v16 + 6 != &v53);
    int v53 = 0;
    uint64_t v54 = -1;
    int v55 = 33619967;
    __int16 v56 = -1;
    int v60 = -1;
    char v61 = -1;
    uint64_t v57 = -1;
    uint64_t v58 = -1;
    char v59 = -1;
    char v62 = -1;
    *(_DWORD *)((char *)v63 + 7) = -1;
    v63[0] = -1;
    int v64 = 4;
    uint64_t v65 = -1;
    int v66 = 0;
    int v70 = -1;
    uint64_t v71 = -1;
    __int16 v69 = -1;
    uint64_t v68 = -1;
    uint64_t v67 = -1;
    char v72 = -1;
    int v74 = -1;
    uint64_t v75 = -1;
    uint64_t v73 = -1;
    __int16 v76 = -1;
    int v77 = -1;
    __int16 v78 = -1;
    int v82 = -1;
    uint64_t v79 = -1;
    uint64_t v80 = -1;
    __int16 v81 = -1;
    __int16 v83 = -129;
    int v84 = -1;
    char v85 = -1;
    int v86 = 5;
    __int16 v87 = -1;
    char v88 = -1;
    uint64_t v17 = 157;
    do
    {
      __int16 v18 = &v28[v17];
      *__int16 v18 = -32769;
      *((unsigned char *)v18 + 4) = -1;
      *((void *)v18 + 1) = 0xFF00000004;
      *((_WORD *)v18 + 8) = -1;
      v18[5] = -1;
      v17 += 6;
    }
    while (v18 + 6 != v89);
    char v90 = 0;
    BOOL v19 = *(_DWORD *)(a1 + 880) != 0;
    v89[1] = -1;
    HIDWORD(v31) = a4;
    LODWORD(v32) = a5;
    LODWORD(v31) = 0;
    v28[0] = v19;
    int v29 = a2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67110144;
      int v104 = v21;
      __int16 v105 = 1024;
      int v106 = v21;
      __int16 v107 = 1024;
      int v108 = a4;
      __int16 v109 = 1024;
      int v110 = a5;
      __int16 v111 = 1024;
      int v112 = a2;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#ins%d,nilr,measResponseFailure,posProtocol,%d,sessionId,%d,result,%d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v26 = *(_DWORD *)(a1 + 880);
      int v93 = 67110144;
      int v94 = v26;
      __int16 v95 = 1024;
      int v96 = v26;
      __int16 v97 = 1024;
      int v98 = a4;
      __int16 v99 = 1024;
      int v100 = a5;
      __int16 v101 = 1024;
      int v102 = a2;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::sendMeasurementFailure(gnss::Emergency::Cplane::ErrorCodes, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    v92[0] = off_10233DE28;
    v92[1] = v28;
    v92[3] = v92;
    uint64_t v22 = *(void *)(a1 + 200);
    if (!v22) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v22 + 48))(v22, v92);
    int v14 = v92;
  }
  return sub_1017DD378(v14);
}

void sub_1017F01E8(_Unwind_Exception *a1)
{
}

void sub_1017F0210(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 876))
  {
    v3[0] = off_10233E168;
    v3[1] = a1;
    v3[3] = v3;
    uint64_t v2 = *(void *)(a1 + 168);
    if (!v2) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v3);
    sub_1017DCC68(v3);
  }
  sub_1017F0304(a1);
  sub_1017F0504(a1 + 8, 18);
  *(unsigned char *)(a1 + 876) = 0;
}

void sub_1017F02E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1017F0304(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane,reportSessionEnd", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::reportSessionEnd()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(void *)(a1 + 232))
  {
    *(_DWORD *)(a1 + 240) = 2;
    uint64_t v4 = a1 + 240;
    *(CFAbsoluteTime *)(v4 + 32) = CFAbsoluteTimeGetCurrent();
    uint64_t v5 = *(void *)(v4 - 8);
    if (!v5) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v4);
  }
}

void sub_1017F0504(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (long long v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    BOOL v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_1017F4204(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      int v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v14 = (void *)*v14;
      }
      sub_1017F4204(a2, buf);
      if (v25 >= 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrCplane>::cancelTimeoutEvent(Event) [T = CLNilrCplane]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v18 = (void *)*v18;
      }
      sub_1017F4204(a2, __p);
      if (v31 >= 0) {
        BOOL v19 = __p;
      }
      else {
        BOOL v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      int v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v20 = (void *)*v20;
      }
      sub_1017F4204(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_1017F0998(uint64_t a1, unsigned __int16 *a2)
{
  *(_DWORD *)(a1 + 856) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(a1 + 860) = *((_DWORD *)a2 + 9);
  *(_DWORD *)(a1 + 868) = *((_DWORD *)a2 + 1);
  if (*a2)
  {
    double v4 = (double)((8389 * (*a2 >> 3)) >> 20) + 10.0;
  }
  else
  {
    double v4 = (double)a2[4];
    if (!a2[4]) {
      double v4 = 30.0;
    }
  }
  *(double *)(a1 + 848) = v4;
  __int16 v22 = 257;
  unint64_t v23 = 0xBFF0000000000000;
  int v24 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 880);
    int v7 = *(unsigned __int8 *)(a1 + 893);
    int v8 = *(unsigned __int8 *)(a1 + 892);
    int v9 = *(unsigned __int8 *)(a1 + 944);
    sub_101030488(*(_DWORD *)(a1 + 948), &__p);
    BOOL v10 = (v32 & 0x8000) == 0 ? &__p : (void **)__p;
    int v11 = *(unsigned __int8 *)(a1 + 992);
    *(_DWORD *)buf = 67110402;
    int v38 = v6;
    __int16 v39 = 1024;
    int v40 = v7;
    __int16 v41 = 1024;
    int v42 = v8;
    __int16 v43 = 1024;
    int v44 = v9;
    __int16 v45 = 2080;
    __int16 v46 = v10;
    __int16 v47 = 1024;
    int v48 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,earlyReturn,%d,HELO,%d,provideHELOUnsolicited,%d,measTimeStampSource,%s,configureVerticalUncertainty,%d", buf, 0x2Au);
    if (SBYTE1(v32) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v13 = *(_DWORD *)(a1 + 880);
    int v14 = *(unsigned __int8 *)(a1 + 893);
    int v15 = *(unsigned __int8 *)(a1 + 892);
    int v16 = *(unsigned __int8 *)(a1 + 944);
    sub_101030488(*(_DWORD *)(a1 + 948), v20);
    if (v21 >= 0) {
      uint64_t v17 = v20;
    }
    else {
      uint64_t v17 = (void **)v20[0];
    }
    int v18 = *(unsigned __int8 *)(a1 + 992);
    LODWORD(__p) = 67110402;
    HIDWORD(__p) = v13;
    __int16 v27 = 1024;
    int v28 = v14;
    __int16 v29 = 1024;
    int v30 = v15;
    __int16 v31 = 1024;
    int v32 = v16;
    __int16 v33 = 2080;
    os_log_type_t v34 = v17;
    __int16 v35 = 1024;
    int v36 = v18;
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::startRildSession(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  __int16 v22 = *(_WORD *)(a1 + 892);
  if (*(unsigned char *)(a1 + 992)) {
    unint64_t v23 = *(void *)(a1 + 1000);
  }
  LOBYTE(v24) = *(unsigned char *)(a1 + 944);
  HIBYTE(v24) = *(_DWORD *)(a1 + 948) == 1;
  v25[0] = off_10233E1E8;
  v25[1] = a2;
  v25[2] = &v22;
  v25[3] = v25;
  uint64_t v12 = *(void *)(a1 + 168);
  if (!v12) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v25);
  sub_1017DCC68(v25);
  sub_1017F0D88(a1);
  *(unsigned char *)(a1 + 876) = 1;
  sub_1017F0FD4(a1 + 8, 18, *(double *)(a1 + 848));
}

void sub_1017F0D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1017F0D88(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane,reportSessionStart", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::reportSessionStart()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(void *)(a1 + 232))
  {
    *(_DWORD *)(a1 + 240) = 1;
    uint64_t v4 = a1 + 240;
    *(void *)(v4 + 8) = *(void *)(v4 + 608);
    *(void *)(v4 + 40) = *(void *)(v4 + 616);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    LOWORD(v6) = *(_WORD *)(v4 + 1996);
    *(double *)(v4 + 16) = (double)v6;
    *(CFAbsoluteTime *)(v4 + 24) = Current;
    *(long double *)(v4 + 56) = sub_101811540(*(unsigned __int8 *)(v4 + 1998));
    *(_DWORD *)(v4 + 136) = *(_DWORD *)(v4 + 1992);
    *(unsigned char *)(v4 + 152) = *(unsigned char *)(v4 + 2004);
    *(_DWORD *)(v4 + 156) = *(_DWORD *)(v4 + 2012);
    *(unsigned char *)(v4 + 160) = *(unsigned char *)(v4 + 2018);
    *(_DWORD *)(v4 + 164) = *(unsigned __int16 *)(v4 + 1988);
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v7) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v4);
  }
}

void sub_1017F0FD4(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v33 = (void *)*v33;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v37 = (void *)*v37;
      }
      *(_DWORD *)__p = 136315138;
      *(void *)&__p[4] = v37;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrCplane>::setTimeoutEvent(Event, double) [T = CLNilrCplane]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    os_log_type_t v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
    }
    __int16 v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
    }
    int v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v8 = (void *)*v8;
      }
      sub_1017F4204(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_1017F4204(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)__p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      int v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrCplane>::setTimeoutEvent(Event, double) [T = CLNilrCplane]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        uint64_t v17 = (uint64_t *)v13;
      }
      else {
        uint64_t v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      int v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        char v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          unint64_t v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            unint64_t v23 = (void *)*v23;
          }
          sub_1017F4204(v41, __p);
          if (v49 >= 0) {
            int v24 = __p;
          }
          else {
            int v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233DBD8);
          }
          char v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            char v25 = (void *)*v25;
          }
          sub_1017F4204(v41, v42);
          if (v45 >= 0) {
            int v26 = v42;
          }
          else {
            int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)__p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          int v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          uint64_t v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrCplane>::setTimeoutEvent(Event, double) [T = CLNilrCplane]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  BOOL v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    int v18 = v19;
    *(void *)buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1017FF7CC;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  __int16 v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v28 = (void *)*v28;
    }
    sub_1017F4204(a2, buf);
    if (buf[23] >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)__p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    int v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_1017F4204(a2, __p);
    if (v49 >= 0) {
      __int16 v31 = __p;
    }
    else {
      __int16 v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)int v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    int v44 = v31;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

BOOL sub_1017F1AC0(uint64_t a1, uint64_t a2)
{
  if ((sub_10073CCBC() & 1) != 0 || !*(_WORD *)a2) {
    return 1;
  }
  BOOL v4 = *(_WORD *)a2 != 2000 || *(unsigned char *)(a1 + 872) == 0;
  if (!v4 && *(unsigned __int8 *)(a2 + 32) == 255 && *(_DWORD *)(a2 + 4) == 1) {
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  unint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 880);
    int v8 = *(unsigned __int16 *)(a1 + 2228);
    int v9 = *(unsigned __int8 *)(a1 + 2260);
    int v10 = *(_DWORD *)(a1 + 2232);
    *(_DWORD *)buf = 67110144;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Unsupported periodic request,instance,%d,interval,%d,reportingAmount,%d,method,%d", buf, 0x20u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrCplane::isSessionAllowed(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
    return 0;
  }
  return result;
}

void sub_1017F1D18(_DWORD *a1, uint64_t a2)
{
  if (a1[214] == *(_DWORD *)(a2 + 40) && a1[215] == *(_DWORD *)(a2 + 36))
  {
    sub_1017F0998((uint64_t)a1, (unsigned __int16 *)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    BOOL v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = a1[220];
      int v6 = a1[215];
      int v7 = a1[214];
      int v8 = *(_DWORD *)(a2 + 36);
      int v9 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)buf = 67110400;
      int v12 = v5;
      __int16 v13 = 1024;
      int v14 = v5;
      __int16 v15 = 1024;
      int v16 = v6;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      __int16 v21 = 1024;
      int v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#ins%d,#Warning Concurrent session, overriding with new one, ending currentSession,%d,%d,withNewSession,%d,%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::handleMeasurementRequestUpdate(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    a1[61] = 8;
    sub_1017EFAF4((uint64_t)a1, -2, a1[217], a1[215], a1[214]);
    sub_1017F2000((uint64_t)a1, 8u, a1[217], a1[215], a1[214], 1, a1[556], 1);
    sub_1017F0210((uint64_t)a1);
    sub_1017F0998((uint64_t)a1, (unsigned __int16 *)a2);
  }
}

uint64_t sub_1017F2000(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  __int16 v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v14 = *(_DWORD *)(a1 + 880);
    __int16 v15 = &v45;
    sub_101810A00(a4, &v45);
    int v16 = a7;
    int v17 = a8;
    if (SBYTE1(v51) < 0) {
      __int16 v15 = v45;
    }
    sub_101810A30(a3, v43);
    int v18 = v44;
    __int16 v19 = (void **)v43[0];
    sub_1018109A8(a2, __p);
    int v20 = v43;
    if (v18 < 0) {
      int v20 = v19;
    }
    __int16 v21 = __p;
    if (v42 < 0) {
      __int16 v21 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67111170;
    unsigned int v63 = v14;
    *(_WORD *)int v64 = 1024;
    *(_DWORD *)&v64[2] = v14;
    *(_WORD *)&v64[6] = 1024;
    *(_DWORD *)&v64[8] = a5;
    *(_WORD *)&v64[12] = 2080;
    *(void *)&v64[14] = v15;
    *(_WORD *)&v64[22] = 2080;
    *(void *)&v64[24] = v20;
    *(_WORD *)uint64_t v65 = 2080;
    *(void *)&v65[2] = v21;
    *(_WORD *)&v65[10] = 1024;
    int v66 = a6;
    LOWORD(v67) = 1024;
    a7 = v16;
    *(_DWORD *)((char *)&v67 + 2) = v16;
    HIWORD(v67) = 1024;
    a8 = v17;
    int v68 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,overridingSessionType,%d,overridingCommType,%d,waitToPostToAWD,%d", buf, 0x44u);
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (SBYTE1(v51) < 0) {
      operator delete(v45);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v28 = *(_DWORD *)(a1 + 880);
    __int16 v29 = v43;
    sub_101810A00(a4, v43);
    int v30 = a6;
    if (v44 < 0) {
      __int16 v29 = (void **)v43[0];
    }
    sub_101810A30(a3, __p);
    int v31 = v42;
    int v32 = (void **)__p[0];
    sub_1018109A8(a2, v39);
    __int16 v33 = __p;
    if (v31 < 0) {
      __int16 v33 = v32;
    }
    os_log_type_t v34 = v39;
    if (v40 < 0) {
      os_log_type_t v34 = (void **)v39[0];
    }
    LODWORD(v45) = 67111170;
    HIDWORD(v45) = v28;
    __int16 v46 = 1024;
    int v47 = v28;
    __int16 v48 = 1024;
    int v49 = a5;
    __int16 v50 = 2080;
    int v51 = v29;
    __int16 v52 = 2080;
    int v53 = v33;
    __int16 v54 = 2080;
    int v55 = v34;
    __int16 v56 = 1024;
    a6 = v30;
    int v57 = v30;
    __int16 v58 = 1024;
    int v59 = a7;
    __int16 v60 = 1024;
    int v61 = a8;
    __int16 v35 = (char *)_os_log_send_and_compose_impl();
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, Emergency::PositionSession, Emergency::CommunicationType, BOOL)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  uint64_t result = *(void *)(a1 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)int v64 = _Q0;
    *(_OWORD *)&v64[16] = _Q0;
    uint64_t v67 = 0;
    LOBYTE(v68) = 0;
    int64x2_t v69 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v70 = xmmword_101D2A480;
    long long v71 = _Q0;
    unint64_t v72 = 0xBFF0000000000000;
    uint64_t v73 = 0;
    char v77 = 0;
    v75[0] = 0;
    *(void *)((char *)v75 + 5) = 0;
    unint64_t v78 = 0xFFFFFFFF00000000;
    int v79 = -1;
    int64x2_t v80 = v69;
    unint64_t v81 = 0xBFF0000000000000;
    unint64_t v82 = 0xFFFFFFFF00000000;
    int v83 = 0;
    __int16 v84 = 255;
    char v90 = 0;
    uint64_t v89 = 0;
    int64x2_t v91 = v69;
    unint64_t v92 = 0xBFF0000000000000;
    int v76 = 0;
    int v74 = a3;
    *(_DWORD *)uint64_t v65 = a5;
    *(_DWORD *)&v65[4] = a4;
    *(_DWORD *)&v65[8] = 0;
    *(_DWORD *)buf = 3;
    unsigned int v63 = a2;
    int v85 = 1;
    int v86 = a6;
    int v87 = a7;
    char v88 = a8;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)result + 48))(result, buf);
  }
  return result;
}

void sub_1017F24B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1017F251C(uint64_t a1, uint64_t a2)
{
  v4[0] = off_10233E268;
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = v4;
  uint64_t v2 = *(void *)(a1 + 200);
  if (!v2) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v4);
  return sub_1017DD378(v4);
}

void sub_1017F25D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DD378((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1017F25E4(uint64_t a1, uint64_t a2)
{
  v4[0] = off_10233E408;
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = v4;
  uint64_t v2 = *(void *)(a1 + 200);
  if (!v2) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v4);
  return sub_1017DD378(v4);
}

void sub_1017F2698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DD378((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1017F26AC(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = a2[385];
    int v7 = a2[386];
    int v8 = a2[387];
    int v9 = *(unsigned __int8 *)a2;
    *(_DWORD *)buf = 67110400;
    int v37 = v5;
    __int16 v38 = 1024;
    int v39 = v5;
    __int16 v40 = 1024;
    int v41 = v6;
    __int16 v42 = 1024;
    int v43 = v7;
    __int16 v44 = 1024;
    int v45 = v8;
    __int16 v46 = 1024;
    int v47 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,ephCount,%d\n", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v14 = *(_DWORD *)(a1 + 880);
    int v15 = a2[385];
    int v16 = a2[386];
    int v17 = a2[387];
    int v18 = *(unsigned __int8 *)a2;
    int v24 = 67110400;
    int v25 = v14;
    __int16 v26 = 1024;
    int v27 = v14;
    __int16 v28 = 1024;
    int v29 = v15;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 1024;
    int v33 = v17;
    __int16 v34 = 1024;
    int v35 = v18;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (*(unsigned __int8 *)a2 - 1 > 0xF)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v12 = *(_DWORD *)(a1 + 880);
      int v13 = *(unsigned __int8 *)a2;
      *(_DWORD *)buf = 67109376;
      int v37 = v12;
      __int16 v38 = 1026;
      int v39 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Badly formed assistance,nrOfSats,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v20 = *(_DWORD *)(a1 + 880);
      int v21 = *(unsigned __int8 *)a2;
      int v24 = 67109376;
      int v25 = v20;
      __int16 v26 = 1026;
      int v27 = v21;
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrCplane::inject_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  else
  {
    v23[0] = off_10233E9A8;
    v23[1] = a1;
    v23[2] = a2;
    v23[3] = v23;
    uint64_t v10 = *(void *)(a1 + 168);
    if (!v10) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v10 + 48))(v10, v23);
    sub_1017DCC68(v23);
    *(unsigned char *)(a1 + 450) = 1;
    *(_DWORD *)(a1 + 444) = *(unsigned __int8 *)a2;
    *(unsigned char *)(a1 + 722) = 1;
  }
}

void sub_1017F2AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1017F2AF4(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = a2[67];
    int v7 = a2[68];
    int v8 = a2[69];
    int v9 = *((unsigned __int16 *)a2 + 2);
    int v10 = *a2;
    *(_DWORD *)buf = 67110656;
    int v36 = v5;
    __int16 v37 = 1024;
    int v38 = v5;
    __int16 v39 = 1024;
    int v40 = v6;
    __int16 v41 = 1024;
    int v42 = v7;
    __int16 v43 = 1024;
    int v44 = v8;
    __int16 v45 = 1024;
    int v46 = v9;
    __int16 v47 = 1024;
    int v48 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,week,%d,tow,%d", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v13 = *(_DWORD *)(a1 + 880);
    int v14 = a2[67];
    int v15 = a2[68];
    int v16 = a2[69];
    int v17 = *((unsigned __int16 *)a2 + 2);
    int v18 = *a2;
    int v21 = 67110656;
    int v22 = v13;
    __int16 v23 = 1024;
    int v24 = v13;
    __int16 v25 = 1024;
    int v26 = v14;
    __int16 v27 = 1024;
    int v28 = v15;
    __int16 v29 = 1024;
    int v30 = v16;
    __int16 v31 = 1024;
    int v32 = v17;
    __int16 v33 = 1024;
    int v34 = v18;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  v20[0] = off_10233EA28;
  v20[1] = a1;
  v20[2] = a2;
  v20[3] = v20;
  uint64_t v11 = *(void *)(a1 + 168);
  if (!v11) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v20);
  uint64_t result = sub_1017DCC68(v20);
  *(unsigned char *)(a1 + 448) = 1;
  *(_DWORD *)(a1 + 408) = *((unsigned __int16 *)a2 + 2);
  *(_DWORD *)(a1 + 412) = *a2;
  *(unsigned char *)(a1 + 720) = 1;
  return result;
}

void sub_1017F2DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1017F2DD8(uint64_t a1, long long *a2)
{
  long long v4 = a2[1];
  long long v48 = *a2;
  long long v49 = v4;
  if (*((unsigned __int8 *)a2 + 13) <= 0x44u) {
    BYTE13(v48) = 69;
  }
  if (*((unsigned __int8 *)a2 + 14) <= 0x44u) {
    BYTE14(v48) = 69;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 880);
    int v7 = *((unsigned __int8 *)a2 + 13);
    int v8 = *((unsigned __int8 *)a2 + 14);
    *(_DWORD *)buf = 67111681;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v70) = 1026;
    *(_DWORD *)((char *)&v70 + 2) = v6;
    HIWORD(v70) = 1026;
    *(_DWORD *)long long v71 = DWORD1(v49);
    *(_WORD *)&v71[4] = 1026;
    *(_DWORD *)&v71[6] = DWORD2(v49);
    LOWORD(v72) = 1026;
    *(_DWORD *)((char *)&v72 + 2) = HIDWORD(v49);
    HIWORD(v72) = 1025;
    int v73 = DWORD1(v48);
    __int16 v74 = 1025;
    int v75 = DWORD2(v48);
    __int16 v76 = 1026;
    int v77 = v7;
    __int16 v78 = 1026;
    int v79 = v8;
    __int16 v80 = 1026;
    int v81 = BYTE13(v48);
    __int16 v82 = 1026;
    int v83 = BYTE14(v48);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%{public}d,sessionProtocol,%{public}d,posProtocol,%{public}d,sessionId,%{public}d,lat,%{private}d,lon,%{private}d,uncert,%{public}d,%{public}d,inflated,%{public}d,%{public}d", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v33 = *(_DWORD *)(a1 + 880);
    int v34 = *((unsigned __int8 *)a2 + 13);
    int v35 = *((unsigned __int8 *)a2 + 14);
    int v51 = 67111681;
    int v52 = v33;
    __int16 v53 = 1026;
    int v54 = v33;
    __int16 v55 = 1026;
    *(_DWORD *)__int16 v56 = DWORD1(v49);
    *(_WORD *)&v56[4] = 1026;
    *(_DWORD *)&v56[6] = DWORD2(v49);
    LOWORD(v57) = 1026;
    *(_DWORD *)((char *)&v57 + 2) = HIDWORD(v49);
    HIWORD(v57) = 1025;
    int v58 = DWORD1(v48);
    __int16 v59 = 1025;
    int v60 = DWORD2(v48);
    __int16 v61 = 1026;
    int v62 = v34;
    __int16 v63 = 1026;
    int v64 = v35;
    __int16 v65 = 1026;
    int v66 = BYTE13(v48);
    __int16 v67 = 1026;
    int v68 = BYTE14(v48);
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  sub_1000E9354();
  CFStringRef v45 = 0;
  CFStringRef str = 0;
  sub_1000C7F88(buf);
  if (sub_100012960(*(uint64_t *)buf, "GpsNWReferenceLocation", v47)
    && sub_1004D12F8((uint64_t)v47, "Latitude", (CFTypeRef *)&str))
  {
    int v9 = sub_1004D12F8((uint64_t)v47, "Longitude", (CFTypeRef *)&v45);
    if (v70) {
      sub_1000DB0A0(v70);
    }
    if (v9)
    {
      double DoubleValue = CFStringGetDoubleValue(str);
      DWORD1(v48) = sub_1018115E8((int)DoubleValue);
      double v11 = CFStringGetDoubleValue(v45);
      DWORD2(v48) = (int)sub_1018115FC((int)v11);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(_DWORD *)(a1 + 880);
        int v14 = *((_DWORD *)a2 + 1);
        int v15 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 67110401;
        *(_DWORD *)&uint8_t buf[4] = v13;
        LOWORD(v70) = 1026;
        *(_DWORD *)((char *)&v70 + 2) = v13;
        HIWORD(v70) = 1025;
        *(_DWORD *)long long v71 = v14;
        *(_WORD *)&v71[4] = 1025;
        *(_DWORD *)&v71[6] = v15;
        LOWORD(v72) = 1025;
        *(_DWORD *)((char *)&v72 + 2) = DWORD1(v48);
        HIWORD(v72) = 1025;
        int v73 = DWORD2(v48);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%{public}d,NWRefLocationOverride,latitudePrior,%{private}d,longitudePrior,%{private}d,latitudeNew,%{private}d,longitudeNew,%{private}d", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v16 = *(_DWORD *)(a1 + 880);
        int v17 = *((_DWORD *)a2 + 1);
        int v18 = *((_DWORD *)a2 + 2);
        int v51 = 67110401;
        int v52 = v16;
        __int16 v53 = 1026;
        int v54 = v16;
        __int16 v55 = 1025;
        *(_DWORD *)__int16 v56 = v17;
        *(_WORD *)&v56[4] = 1025;
        *(_DWORD *)&v56[6] = v18;
        LOWORD(v57) = 1025;
        *(_DWORD *)((char *)&v57 + 2) = DWORD1(v48);
        HIWORD(v57) = 1025;
        int v58 = DWORD2(v48);
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
  }
  else if (v70)
  {
    sub_1000DB0A0(v70);
  }
  v50[0] = off_10233EAA8;
  v50[1] = a1;
  v50[2] = &v48;
  void v50[3] = v50;
  uint64_t v20 = *(void *)(a1 + 168);
  if (!v20) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v20 + 48))(v20, v50);
  sub_1017DCC68(v50);
  double v21 = sub_1018115AC(*((_DWORD *)a2 + 1));
  *(double *)(a1 + 416) = v21;
  if (*((unsigned char *)a2 + 1)) {
    *(double *)(a1 + 416) = -v21;
  }
  *(unsigned char *)(a1 + 449) = 1;
  *(double *)(a1 + 424) = sub_1018115D0(*((_DWORD *)a2 + 2));
  *(_DWORD *)(a1 + 440) = *((unsigned __int8 *)a2 + 17);
  double v22 = sub_101811540(*((unsigned __int8 *)a2 + 13));
  long double v23 = sub_101811540(*((unsigned __int8 *)a2 + 14));
  *(double *)(a1 + 432) = sqrt(v23 * v23 + v22 * v22);
  if (*(_DWORD *)(a1 + 440) != 90)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233DBF8);
    }
    int v24 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(a1 + 880);
      int v26 = *(_DWORD *)(a1 + 440);
      uint64_t v27 = *(void *)(a1 + 432);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v25;
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = v26;
      HIWORD(v70) = 2048;
      *(void *)long long v71 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,NW Ref location confidence,%d,uncertainity,%f", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233DBF8);
      }
      int v41 = *(_DWORD *)(a1 + 880);
      int v42 = *(_DWORD *)(a1 + 440);
      uint64_t v43 = *(void *)(a1 + 432);
      int v51 = 67109632;
      int v52 = v41;
      __int16 v53 = 1024;
      int v54 = v42;
      __int16 v55 = 2048;
      *(void *)__int16 v56 = v43;
      int v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
  }
  memcpy((void *)(a1 + 512), (const void *)(a1 + 240), 0x110uLL);
  if (!sub_1000EF68C(*(double *)(a1 + 416), *(double *)(a1 + 424))
    || sub_1000EF668(*(double *)(a1 + 416), *(double *)(a1 + 424)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v28 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = *(_DWORD *)(a1 + 880);
      uint64_t v30 = *(void *)(a1 + 416);
      uint64_t v31 = *(void *)(a1 + 424);
      *(_DWORD *)buf = 67109889;
      *(_DWORD *)&uint8_t buf[4] = v29;
      LOWORD(v70) = 1026;
      *(_DWORD *)((char *)&v70 + 2) = v29;
      HIWORD(v70) = 2049;
      *(void *)long long v71 = v30;
      *(_WORD *)&v71[8] = 2049;
      uint64_t v72 = v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning referencePositionInvalid,instance,%{public}d,lat,%{private}.8f,lon,%{private}.8f", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = *(_DWORD *)(a1 + 880);
      uint64_t v38 = *(void *)(a1 + 416);
      uint64_t v39 = *(void *)(a1 + 424);
      int v51 = 67109889;
      int v52 = v37;
      __int16 v53 = 1026;
      int v54 = v37;
      __int16 v55 = 2049;
      *(void *)__int16 v56 = v38;
      *(_WORD *)&v56[8] = 2049;
      uint64_t v57 = v39;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  return sub_10013F3C4(v47);
}

void sub_1017F3748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1017F379C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v41 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,inject_AssistanceAcquisition received \n", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v16 = *(_DWORD *)(a1 + 880);
    int v28 = 67109120;
    int v29 = v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 880);
    int v8 = *(_DWORD *)(a2 + 364);
    int v9 = *(_DWORD *)(a2 + 368);
    int v10 = *(_DWORD *)(a2 + 372);
    int v11 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)buf = 67110400;
    int v41 = v7;
    __int16 v42 = 1024;
    int v43 = v7;
    __int16 v44 = 1024;
    int v45 = v8;
    __int16 v46 = 1024;
    int v47 = v9;
    __int16 v48 = 1024;
    int v49 = v10;
    __int16 v50 = 1024;
    int v51 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,acqCount,%d\n", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v18 = *(_DWORD *)(a1 + 880);
    int v19 = *(_DWORD *)(a2 + 364);
    int v20 = *(_DWORD *)(a2 + 368);
    int v21 = *(_DWORD *)(a2 + 372);
    int v22 = *(unsigned __int8 *)(a2 + 4);
    int v28 = 67110400;
    int v29 = v18;
    __int16 v30 = 1024;
    int v31 = v18;
    __int16 v32 = 1024;
    int v33 = v19;
    __int16 v34 = 1024;
    int v35 = v20;
    __int16 v36 = 1024;
    int v37 = v21;
    __int16 v38 = 1024;
    int v39 = v22;
    long double v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (*(unsigned __int8 *)(a2 + 4) - 1 > 0xF)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v14 = *(_DWORD *)(a1 + 880);
      int v15 = *(unsigned __int8 *)(a2 + 4);
      *(_DWORD *)buf = 67109376;
      int v41 = v14;
      __int16 v42 = 1026;
      int v43 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Badly formed acquisition assistance,nrOfSats,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v24 = *(_DWORD *)(a1 + 880);
      int v25 = *(unsigned __int8 *)(a2 + 4);
      int v28 = 67109376;
      int v29 = v24;
      __int16 v30 = 1026;
      int v31 = v25;
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  else
  {
    v27[0] = off_10233EB28;
    v27[1] = a1;
    v27[2] = a2;
    v27[3] = v27;
    uint64_t v12 = *(void *)(a1 + 168);
    if (!v12) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v27);
    sub_1017DCC68(v27);
    *(unsigned char *)(a1 + 451) = 1;
    *(unsigned char *)(a1 + 723) = 1;
  }
}

void sub_1017F3D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017F3D24(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v11 = *(_DWORD *)(a1 + 880);
    uint64_t v12 = &v43;
    sub_101810A00(a4, &v43);
    uint64_t v36 = a1;
    int v13 = a3;
    int v14 = a4;
    unsigned int v15 = a2;
    if (SBYTE1(v49) < 0) {
      uint64_t v12 = v43;
    }
    int v34 = v13;
    sub_101810A30(v13, v41);
    int v16 = v42;
    int v17 = (void **)v41[0];
    sub_1018109A8(v15, __p);
    int v18 = v41;
    if (v16 < 0) {
      int v18 = v17;
    }
    if (v40 >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110402;
    unsigned int v55 = v11;
    *(_WORD *)__int16 v56 = 1024;
    *(_DWORD *)&v56[2] = v11;
    *(_WORD *)&v56[6] = 1024;
    *(_DWORD *)&v56[8] = a5;
    *(_WORD *)&v56[12] = 2080;
    *(void *)&v56[14] = v12;
    *(_WORD *)&v56[22] = 2080;
    *(void *)&v56[24] = v18;
    *(_WORD *)uint64_t v57 = 2080;
    *(void *)&v57[2] = v19;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Reject,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s", buf, 0x32u);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    a2 = v15;
    a4 = v14;
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    a3 = v34;
    a1 = v36;
    if (SBYTE1(v49) < 0) {
      operator delete(v43);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v26 = *(_DWORD *)(a1 + 880);
    uint64_t v27 = v41;
    sub_101810A00(a4, v41);
    int v35 = a4;
    unsigned int v28 = a2;
    if (v42 < 0) {
      uint64_t v27 = (void **)v41[0];
    }
    sub_101810A30(a3, __p);
    int v29 = v40;
    __int16 v30 = (void **)__p[0];
    sub_1018109A8(v28, v37);
    int v31 = __p;
    if (v29 < 0) {
      int v31 = v30;
    }
    if (v38 >= 0) {
      __int16 v32 = v37;
    }
    else {
      __int16 v32 = (void **)v37[0];
    }
    LODWORD(v43) = 67110402;
    HIDWORD(v43) = v26;
    __int16 v44 = 1024;
    int v45 = v26;
    __int16 v46 = 1024;
    int v47 = a5;
    __int16 v48 = 2080;
    int v49 = v27;
    __int16 v50 = 2080;
    int v51 = v31;
    __int16 v52 = 2080;
    __int16 v53 = v32;
    int v33 = (char *)_os_log_send_and_compose_impl();
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    a2 = v28;
    a4 = v35;
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::logRejectedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  uint64_t result = *(void *)(a1 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)__int16 v56 = _Q0;
    *(_OWORD *)&v56[16] = _Q0;
    uint64_t v58 = 0;
    char v59 = 0;
    int64x2_t v60 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v61 = xmmword_101D2A480;
    long long v62 = _Q0;
    unint64_t v63 = 0xBFF0000000000000;
    uint64_t v64 = 0;
    char v68 = 0;
    v66[0] = 0;
    *(void *)((char *)v66 + 5) = 0;
    unint64_t v69 = 0xFFFFFFFF00000000;
    int v70 = -1;
    int64x2_t v71 = v60;
    unint64_t v72 = 0xBFF0000000000000;
    unint64_t v73 = 0xFFFFFFFF00000000;
    int v74 = 0;
    __int16 v75 = 255;
    int v76 = 1;
    char v78 = 0;
    uint64_t v77 = 0;
    char v80 = 0;
    uint64_t v79 = 0;
    int64x2_t v81 = v60;
    unint64_t v82 = 0xBFF0000000000000;
    int v67 = 0;
    int v65 = a3;
    *(_DWORD *)uint64_t v57 = a5;
    *(_DWORD *)&v57[4] = a4;
    *(_DWORD *)&v57[8] = 0;
    *(_DWORD *)buf = 3;
    unsigned int v55 = a2;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)result + 48))(result, buf);
  }
  return result;
}

void sub_1017F419C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1017F4204@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x1D) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = off_10233F168[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_1017F4230(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,inject_AssistanceFTA1x received \n", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v18 = *(_DWORD *)(a1 + 880);
    int v31 = 67109120;
    int v32 = v18;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceFTA1x(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 880);
    int v8 = *(_DWORD *)(a2 + 4);
    int v9 = *(_DWORD *)(a2 + 12);
    int v10 = *(unsigned __int16 *)(a2 + 16);
    int v11 = *(unsigned __int16 *)(a2 + 8);
    int v12 = *(_DWORD *)(a2 + 20);
    int v13 = *(_DWORD *)(a2 + 24);
    int v14 = *(unsigned __int16 *)(a2 + 28);
    int v15 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)buf = 67111424;
    int v52 = v7;
    __int16 v53 = 1024;
    int v54 = v7;
    __int16 v55 = 1024;
    int v56 = v8;
    __int16 v57 = 1024;
    int v58 = v9;
    __int16 v59 = 1024;
    int v60 = v10;
    __int16 v61 = 1024;
    int v62 = v11;
    __int16 v63 = 1024;
    int v64 = v12;
    __int16 v65 = 1024;
    int v66 = v13;
    __int16 v67 = 1024;
    int v68 = v14;
    __int16 v69 = 1024;
    int v70 = v15;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,networkType,%d,eutranTime.earfcn,%d,eutranTime.sfnk,%d,eutranTime.physicalCellId,%d,cdmaTime.cdmaTow.intPart,%d,cdmaTime.cdmaTow.fracPart,%d,cdmaTime.weekNum,%d,cdmaTime.absoluteRmsAcc,%d\n", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v20 = *(_DWORD *)(a1 + 880);
    int v21 = *(_DWORD *)(a2 + 4);
    int v22 = *(_DWORD *)(a2 + 12);
    int v23 = *(unsigned __int16 *)(a2 + 16);
    int v24 = *(unsigned __int16 *)(a2 + 8);
    int v25 = *(_DWORD *)(a2 + 20);
    int v26 = *(_DWORD *)(a2 + 24);
    int v27 = *(unsigned __int16 *)(a2 + 28);
    int v28 = *(_DWORD *)(a2 + 32);
    int v31 = 67111424;
    int v32 = v20;
    __int16 v33 = 1024;
    int v34 = v20;
    __int16 v35 = 1024;
    int v36 = v21;
    __int16 v37 = 1024;
    int v38 = v22;
    __int16 v39 = 1024;
    int v40 = v23;
    __int16 v41 = 1024;
    int v42 = v24;
    __int16 v43 = 1024;
    int v44 = v25;
    __int16 v45 = 1024;
    int v46 = v26;
    __int16 v47 = 1024;
    int v48 = v27;
    __int16 v49 = 1024;
    int v50 = v28;
    int v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceFTA1x(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  v30[0] = off_10233EBA8;
  v30[1] = a1;
  v30[2] = a2;
  v30[3] = v30;
  uint64_t v16 = *(void *)(a1 + 168);
  if (!v16) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v16 + 48))(v16, v30);
  return sub_1017DCC68(v30);
}

void sub_1017F4670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017F468C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 928);
  *(unsigned char *)(a1 + 816) = v2 != 0;
  *(unsigned char *)(a1 + 817) = *(_DWORD *)(a1 + 936) != 0;
  if (!v2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233DBF8);
    }
    int v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      int v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,discard Wlan request as feature disabled", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233DBF8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrCplane::isWlanSessionAllowed()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 2434) > 1u) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 2434)) {
    return *(_DWORD *)(a1 + 928) != 0;
  }
  *(unsigned char *)(a1 + 818) = 1;
  if (*(_DWORD *)(a1 + 928) && *(_DWORD *)(a1 + 936)) {
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233DBF8);
  }
  int v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,discard Wlan request as feature RSSI is requested when disabled", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233DBF8);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrCplane::isWlanSessionAllowed()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

void *sub_1017F49F8(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,reportWlanMeasFailure", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::reportWlanMeasFailure(gnss::Emergency::Cplane::ErrorCodes)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(_DWORD *)(a1 + 2440) = a2;
  *(_DWORD *)(a1 + 2452) = *(_DWORD *)(a1 + 2428);
  *(void *)(a1 + 2444) = *(void *)(a1 + 2420);
  *(unsigned char *)(a1 + 3236) = 1;
  *(_DWORD *)(a1 + 3240) = 2;
  *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
  return sub_1017F63D8(a1, a1 + 2436);
}

uint64_t sub_1017F4BF8(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    sub_1018109D4(a2[1], &v19);
    int v6 = SHIBYTE(v23) >= 0 ? (void **)&v19 : v19;
    *(_DWORD *)buf = 67109634;
    int v14 = v5;
    __int16 v15 = 1024;
    int v16 = v5;
    __int16 v17 = 2080;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Wlan,Reject,instance,%d,result,%s", buf, 0x18u);
    if (SHIBYTE(v23) < 0) {
      operator delete(v19);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v8 = *(_DWORD *)(a1 + 880);
    sub_1018109D4(a2[1], __p);
    if (v12 >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    LODWORD(v19) = 67109634;
    HIDWORD(v19) = v8;
    __int16 v20 = 1024;
    int v21 = v8;
    __int16 v22 = 2080;
    int v23 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::logFailedWlanSession(CLNilrTypes::WlanSessionStatus)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *a2 = 3;
  uint64_t result = *(void *)(a1 + 3280);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)result + 48))(result, a2);
  }
  return result;
}

void *sub_1017F4E88@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    int v2 = "StateUnknown";
  }
  else {
    int v2 = off_10233F258[a1];
  }
  return sub_100134750(a2, v2);
}

uint64_t sub_1017F4EB4(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  char v12 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v13 = &qword_102419000;
  int v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = *(_DWORD *)(a1 + 880);
    sub_101810A00(a4, &v54);
    uint64_t v46 = a1;
    int v16 = a3;
    int v17 = a4;
    int v18 = a5;
    int v19 = a6;
    if (SBYTE1(v60) >= 0) {
      __int16 v20 = &v54;
    }
    else {
      __int16 v20 = v54;
    }
    int v44 = v16;
    sub_101810A30(v16, v52);
    int v21 = v53;
    __int16 v22 = (void **)v52[0];
    sub_1018109A8(a2, __p);
    int v23 = v52;
    if (v21 < 0) {
      int v23 = v22;
    }
    if (v51 >= 0) {
      int v24 = __p;
    }
    else {
      int v24 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110658;
    unsigned int v68 = v15;
    *(_WORD *)__int16 v69 = 1024;
    *(_DWORD *)&v69[2] = v15;
    *(_WORD *)&v69[6] = 1024;
    a5 = v18;
    *(_DWORD *)&v69[8] = v18;
    *(_WORD *)&v69[12] = 2080;
    *(void *)&v69[14] = v20;
    *(_WORD *)&v69[22] = 2080;
    *(void *)&v69[24] = v23;
    *(_WORD *)int v70 = 2080;
    *(void *)&v70[2] = v24;
    *(_WORD *)&v70[10] = 1024;
    a6 = v19;
    int v71 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,waitToPostToAWD,%d", buf, 0x38u);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    a4 = v17;
    a1 = v46;
    char v12 = &qword_102419000;
    int v13 = &qword_102419000;
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    a3 = v44;
    if (SBYTE1(v60) < 0) {
      operator delete(v54);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v33 = *(_DWORD *)(a1 + 880);
    sub_101810A00(a4, v52);
    uint64_t v47 = a1;
    int v45 = a4;
    int v34 = a5;
    int v35 = a6;
    if (v53 >= 0) {
      int v36 = v52;
    }
    else {
      int v36 = (void **)v52[0];
    }
    sub_101810A30(a3, __p);
    int v37 = v51;
    int v38 = (void **)__p[0];
    sub_1018109A8(a2, v48);
    __int16 v39 = __p;
    if (v37 < 0) {
      __int16 v39 = v38;
    }
    if (v49 >= 0) {
      int v40 = v48;
    }
    else {
      int v40 = (void **)v48[0];
    }
    LODWORD(v54) = 67110658;
    HIDWORD(v54) = v33;
    __int16 v55 = 1024;
    int v56 = v33;
    __int16 v57 = 1024;
    a5 = v34;
    int v58 = v34;
    __int16 v59 = 2080;
    int v60 = v36;
    __int16 v61 = 2080;
    int v62 = v39;
    __int16 v63 = 2080;
    int v64 = v40;
    __int16 v65 = 1024;
    LOBYTE(a6) = v35;
    int v66 = v35;
    __int16 v41 = (char *)_os_log_send_and_compose_impl();
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    a4 = v45;
    a1 = v47;
    char v12 = &qword_102419000;
    int v13 = &qword_102419000;
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, BOOL)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  if (v12[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v25 = v13[123];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v26 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    unsigned int v68 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,submitting AWD", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v12[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v42 = *(_DWORD *)(a1 + 880);
    LODWORD(v54) = 67109120;
    HIDWORD(v54) = v42;
    __int16 v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, BOOL)", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  uint64_t result = *(void *)(a1 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)__int16 v69 = _Q0;
    *(_OWORD *)&v69[16] = _Q0;
    uint64_t v72 = 0;
    char v73 = 0;
    int64x2_t v74 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v75 = xmmword_101D2A480;
    long long v76 = _Q0;
    unint64_t v77 = 0xBFF0000000000000;
    uint64_t v78 = 0;
    char v82 = 0;
    v80[0] = 0;
    *(void *)((char *)v80 + 5) = 0;
    unint64_t v83 = 0xFFFFFFFF00000000;
    int v84 = -1;
    int64x2_t v85 = v74;
    unint64_t v86 = 0xBFF0000000000000;
    unint64_t v87 = 0xFFFFFFFF00000000;
    int v88 = 0;
    __int16 v89 = 255;
    int v90 = 1;
    uint64_t v91 = 0;
    char v94 = 0;
    uint64_t v93 = 0;
    int64x2_t v95 = v74;
    unint64_t v96 = 0xBFF0000000000000;
    int v81 = 0;
    int v79 = a3;
    *(_DWORD *)int v70 = a5;
    *(_DWORD *)&v70[4] = a4;
    *(_DWORD *)&v70[8] = 0;
    *(_DWORD *)buf = 3;
    unsigned int v68 = a2;
    char v92 = a6;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)result + 48))(result, buf);
  }
  return result;
}

void sub_1017F54A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017F550C(uint64_t a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, __int32 a8, __int32 a9, unsigned __int8 a10)
{
  unsigned __int8 v16 = a10;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v17 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = *(_DWORD *)(a1 + 880);
    sub_101810A00(a4, &v62);
    int v45 = a4;
    unsigned int v48 = a2;
    if (SBYTE1(v68) >= 0) {
      int v19 = &v62;
    }
    else {
      int v19 = v62;
    }
    sub_101810A30(a3, v60);
    int v47 = a5;
    if (v61 >= 0) {
      __int16 v20 = v60;
    }
    else {
      __int16 v20 = (void **)v60[0];
    }
    sub_1018109A8(v48, v58);
    unsigned int v21 = a7;
    if (v59 >= 0) {
      __int16 v22 = v58;
    }
    else {
      __int16 v22 = (void **)v58[0];
    }
    unsigned int v43 = a6;
    sub_10192B574(a6, v56);
    int v23 = v57;
    int v24 = (void **)v56[0];
    sub_10192B650(v21, __p);
    int v25 = v56;
    if (v23 < 0) {
      int v25 = v24;
    }
    if (v55 >= 0) {
      unsigned int v26 = __p;
    }
    else {
      unsigned int v26 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67111682;
    unsigned int v84 = v18;
    *(_WORD *)int64x2_t v85 = 1024;
    *(_DWORD *)&v85[2] = v18;
    *(_WORD *)&v85[6] = 1024;
    *(_DWORD *)&v85[8] = v47;
    *(_WORD *)&v85[12] = 2080;
    *(void *)&v85[14] = v19;
    *(_WORD *)&v85[22] = 2080;
    *(void *)&v85[24] = v20;
    *(_WORD *)unint64_t v86 = 2080;
    *(void *)&v86[2] = v22;
    *(_WORD *)&v86[10] = 2080;
    *(void *)unint64_t v87 = v25;
    *(_WORD *)&v87[8] = 2080;
    *(void *)&v87[10] = v26;
    __int16 v88 = 1024;
    v89.i32[0] = a8;
    v89.i16[2] = 1024;
    *(__int32 *)((char *)&v89.i32[1] + 2) = a9;
    v89.i16[5] = 1024;
    v89.i32[3] = a10;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,overridingSessionType,%s,overridingCommType,%soverRidingPositionMethod,%d,overRidingMethodType,%d,waitToPostToAWD,%d", buf, 0x58u);
    if (v55 < 0) {
      operator delete(__p[0]);
    }
    a7 = v21;
    a6 = v43;
    a4 = v45;
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    a5 = v47;
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    a2 = v48;
    if (v61 < 0) {
      operator delete(v60[0]);
    }
    if (SBYTE1(v68) < 0) {
      operator delete(v62);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v33 = *(_DWORD *)(a1 + 880);
    int v34 = v60;
    sub_101810A00(a4, v60);
    int v46 = a4;
    unsigned int v49 = a2;
    if (v61 < 0) {
      int v34 = (void **)v60[0];
    }
    int v35 = v58;
    sub_101810A30(a3, v58);
    if (v59 < 0) {
      int v35 = (void **)v58[0];
    }
    int v36 = v56;
    sub_1018109A8(a2, v56);
    __int32 v37 = a8;
    if (v57 < 0) {
      int v36 = (void **)v56[0];
    }
    unsigned int v44 = a6;
    sub_10192B574(a6, __p);
    int v38 = v55;
    __int16 v39 = (void **)__p[0];
    sub_10192B650(a7, v52);
    int v40 = __p;
    if (v38 < 0) {
      int v40 = v39;
    }
    if (v53 >= 0) {
      __int16 v41 = v52;
    }
    else {
      __int16 v41 = (void **)v52[0];
    }
    LODWORD(v62) = 67111682;
    HIDWORD(v62) = v33;
    __int16 v63 = 1024;
    int v64 = v33;
    __int16 v65 = 1024;
    int v66 = a5;
    __int16 v67 = 2080;
    unsigned int v68 = v34;
    __int16 v69 = 2080;
    int v70 = v35;
    __int16 v71 = 2080;
    uint64_t v72 = v36;
    __int16 v73 = 2080;
    int64x2_t v74 = v40;
    __int16 v75 = 2080;
    long long v76 = v41;
    __int16 v77 = 1024;
    __int32 v78 = v37;
    __int16 v79 = 1024;
    __int32 v80 = a9;
    __int16 v81 = 1024;
    unsigned __int8 v16 = a10;
    int v82 = a10;
    int v42 = (char *)_os_log_send_and_compose_impl();
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    a6 = v44;
    a4 = v46;
    a2 = v49;
    if (v55 < 0) {
      operator delete(__p[0]);
    }
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    if (v61 < 0) {
      operator delete(v60[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, Emergency::PositionSession, Emergency::CommunicationType, uint32_t, uint32_t, BOOL)", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  uint64_t result = *(void *)(a1 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)int64x2_t v85 = _Q0;
    *(_OWORD *)&v85[16] = _Q0;
    *(void *)&v87[4] = 0;
    v87[12] = 0;
    int64x2_t v89 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v90 = xmmword_101D2A480;
    long long v91 = _Q0;
    unint64_t v92 = 0xBFF0000000000000;
    uint64_t v93 = 0;
    char v97 = 0;
    v95[0] = 0;
    *(void *)((char *)v95 + 5) = 0;
    unint64_t v98 = 0xFFFFFFFF00000000;
    int v99 = -1;
    int64x2_t v100 = v89;
    unint64_t v101 = 0xBFF0000000000000;
    unint64_t v102 = 0xFFFFFFFF00000000;
    int v103 = 0;
    __int16 v104 = 255;
    char v110 = 0;
    uint64_t v109 = 0;
    int64x2_t v111 = v89;
    unint64_t v112 = 0xBFF0000000000000;
    int v96 = 0;
    int v94 = a3;
    *(_DWORD *)unint64_t v86 = a5;
    *(_DWORD *)&v86[4] = a4;
    *(_DWORD *)&v86[8] = 0;
    *(_DWORD *)buf = 3;
    unsigned int v84 = a2;
    int v105 = 1;
    unsigned int v106 = a6;
    unsigned int v107 = a7;
    unsigned __int8 v108 = v16;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)result + 48))(result, buf);
  }
  return result;
}

void sub_1017F5AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017F5BAC(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v14 = *(_DWORD *)(a1 + 880);
    unsigned int v15 = &v50;
    sub_101810A00(a4, &v50);
    int v40 = a4;
    unsigned int v16 = a2;
    int v17 = a5;
    int v18 = a3;
    int v19 = a7;
    if (SBYTE1(v56) < 0) {
      unsigned int v15 = v50;
    }
    int v41 = v18;
    sub_101810A30(v18, v48);
    int v20 = v49;
    unsigned int v21 = (void **)v48[0];
    sub_1018109A8(v16, __p);
    __int16 v22 = v48;
    if (v20 < 0) {
      __int16 v22 = v21;
    }
    if (v47 >= 0) {
      int v23 = __p;
    }
    else {
      int v23 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110914;
    unsigned int v66 = v14;
    *(_WORD *)__int16 v67 = 1024;
    *(_DWORD *)&v67[2] = v14;
    *(_WORD *)&v67[6] = 1024;
    a5 = v17;
    *(_DWORD *)&v67[8] = v17;
    *(_WORD *)&v67[12] = 2080;
    *(void *)&v67[14] = v15;
    *(_WORD *)&v67[22] = 2080;
    *(void *)&v67[24] = v22;
    *(_WORD *)unsigned int v68 = 2080;
    *(void *)&v68[2] = v23;
    *(_WORD *)&v68[10] = 1024;
    int v69 = a6;
    LOWORD(v70) = 1024;
    a7 = v19;
    *(_DWORD *)((char *)&v70 + 2) = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,abortReason,%d,waitToPostToAWD,%d", buf, 0x3Eu);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    a2 = v16;
    a3 = v41;
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    a4 = v40;
    if (SBYTE1(v56) < 0) {
      operator delete(v50);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v30 = *(_DWORD *)(a1 + 880);
    int v31 = v48;
    sub_101810A00(a4, v48);
    int v32 = a5;
    int v33 = a3;
    int v34 = a6;
    if (v49 < 0) {
      int v31 = (void **)v48[0];
    }
    int v42 = v33;
    sub_101810A30(v33, __p);
    int v35 = v47;
    int v36 = (void **)__p[0];
    sub_1018109A8(a2, v44);
    __int32 v37 = __p;
    if (v35 < 0) {
      __int32 v37 = v36;
    }
    int v38 = v44;
    if (v45 < 0) {
      int v38 = (void **)v44[0];
    }
    LODWORD(v50) = 67110914;
    HIDWORD(v50) = v30;
    __int16 v51 = 1024;
    int v52 = v30;
    __int16 v53 = 1024;
    a5 = v32;
    int v54 = v32;
    __int16 v55 = 2080;
    int v56 = v31;
    __int16 v57 = 2080;
    int v58 = v37;
    __int16 v59 = 2080;
    int v60 = v38;
    __int16 v61 = 1024;
    a6 = v34;
    int v62 = v34;
    __int16 v63 = 1024;
    int v64 = a7;
    __int16 v39 = (char *)_os_log_send_and_compose_impl();
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    a3 = v42;
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, gnss::Emergency::Cplane::AbortReason, BOOL)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  uint64_t result = *(void *)(a1 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)__int16 v67 = _Q0;
    *(_OWORD *)&v67[16] = _Q0;
    uint64_t v70 = 0;
    char v71 = 0;
    int64x2_t v72 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v73 = xmmword_101D2A480;
    long long v74 = _Q0;
    unint64_t v75 = 0xBFF0000000000000;
    uint64_t v76 = 0;
    char v80 = 0;
    v78[0] = 0;
    *(void *)((char *)v78 + 5) = 0;
    unint64_t v81 = 0xFFFFFFFF00000000;
    int v82 = -1;
    int64x2_t v83 = v72;
    unint64_t v84 = 0xBFF0000000000000;
    unint64_t v85 = 0xFFFFFFFF00000000;
    int v86 = 0;
    __int16 v87 = 255;
    uint64_t v89 = 0;
    char v92 = 0;
    uint64_t v91 = 0;
    int64x2_t v93 = v72;
    unint64_t v94 = 0xBFF0000000000000;
    int v79 = 0;
    int v77 = a3;
    *(_DWORD *)unsigned int v68 = a5;
    *(_DWORD *)&v68[4] = a4;
    *(_DWORD *)&v68[8] = 0;
    *(_DWORD *)buf = 3;
    unsigned int v66 = a2;
    int v88 = a6;
    char v90 = a7;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)result + 48))(result, buf);
  }
  return result;
}

void sub_1017F6068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1017F60D0(uint64_t a1)
{
  if (!*(void *)(a1 + 2336))
  {
    sub_10180C4D8();
    __break(1u);
  }
  v3[0] = off_10233EFD8;
  v3[1] = a1;
  v3[3] = v3;
  uint64_t v1 = *(void *)(a1 + 200);
  if (!v1) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 48))(v1, v3);
  return sub_1017DD378(v3);
}

void sub_1017F6194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DD378((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1017F61AC(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,startWlanSession", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v7 = *(_DWORD *)(a1 + 880);
    int v10 = 67109120;
    int v11 = v7;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::startWlanSession(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 860) = *(_DWORD *)(a2 + 8);
  int v6 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1017FA960;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_async(v6, block);
  sub_1017F0FD4(a1 + 8, 27, *(double *)(a1 + 3248));
}

void *sub_1017F63D8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,reportWlanMeasurements", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v8 = *(_DWORD *)(a1 + 880);
    int v11 = 67109120;
    int v12 = v8;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::reportWlanMeasurements(gnss::Emergency::Cplane::WlanMeasReport &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  v10[0] = off_10233EE38;
  v10[1] = a2;
  v10[2] = a1;
  v10[3] = v10;
  uint64_t v6 = *(void *)(a1 + 200);
  if (!v6) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, v10);
  return sub_1017DD378(v10);
}

void sub_1017F65F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1017F6610(uint64_t a1, int a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 2224) = a3;
  int v6 = *(unsigned __int8 *)(a1 + 832);
  *(unsigned char *)(a1 + 832) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 880);
    sub_10192B650(a3, &__p);
    int v9 = SBYTE1(v22) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67109890;
    int v24 = v8;
    __int16 v25 = 1024;
    int v26 = v8;
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 2080;
    int v30 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,emergency,%d,commType,%s", buf, 0x1Eu);
    if (SBYTE1(v22) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = *(_DWORD *)(a1 + 880);
    sub_10192B650(a3, v14);
    if (v15 >= 0) {
      int v12 = v14;
    }
    else {
      int v12 = (void **)v14[0];
    }
    LODWORD(__p) = 67109890;
    HIDWORD(__p) = v11;
    __int16 v17 = 1024;
    int v18 = v11;
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 2080;
    __int16 v22 = v12;
    int v13 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_EmergencyMode(BOOL, Emergency::CommunicationType)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (v6)
  {
    if (*(unsigned char *)(a1 + 832)) {
      return;
    }
    uint64_t v10 = 3;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 832)) {
      return;
    }
    uint64_t v10 = 2;
  }
  sub_1017EEA80(a1 + 8, v10);
}

uint64_t sub_1017F68B4(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = *(_DWORD *)(a2 + 8);
    int v7 = *(_DWORD *)(a2 + 12);
    int v8 = *(_DWORD *)(a2 + 16);
    int v9 = *(unsigned __int8 *)(a2 + 4);
    int v10 = *(unsigned __int16 *)(a2 + 20);
    int v11 = *(unsigned __int16 *)(a2 + 22);
    int v12 = *(unsigned __int8 *)(a2 + 24);
    int v13 = *(unsigned __int8 *)(a2 + 25);
    *(_DWORD *)buf = 67111424;
    int v17 = v5;
    __int16 v18 = 1024;
    int v19 = v5;
    __int16 v20 = 1024;
    int v21 = v6;
    __int16 v22 = 1024;
    int v23 = v7;
    __int16 v24 = 1024;
    int v25 = v8;
    __int16 v26 = 1024;
    int v27 = v9;
    __int16 v28 = 1024;
    int v29 = v10;
    __int16 v30 = 1024;
    int v31 = v11;
    __int16 v32 = 1024;
    int v33 = v12;
    __int16 v34 = 1024;
    int v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,responseType,%u,aidMask,%u,gWeek,%u,gToe,%u,numOfSats,%u", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    char v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceDataNeeded(const gnss::Emergency::Cplane::AssistanceNeededReport &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return sub_1017EEA80(a1 + 8, 13);
}

uint64_t sub_1017F6B48(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = *a2;
    *(_DWORD *)buf = 67109632;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,networkType,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_Fta1xAssistanceDataNeeded(const gnss::Emergency::Cplane::CellFTAssistanceRequest &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_1017EEA80(a1 + 8, 23);
}

void sub_1017F6D3C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 138))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring acquistion assistance due to NILR lock out", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    *(void *)(a1 + 2392) = a2;
    sub_1017EEA80(a1 + 8, 22);
    *(void *)(a1 + 2392) = 0;
  }
}

void sub_1017F6F0C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 138))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring FT assistance due to NILR lock out", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_CellFT1xAssistance(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    *(void *)(a1 + 2400) = a2;
    sub_1017EEA80(a1 + 8, 24);
    *(void *)(a1 + 2400) = 0;
  }
}

void sub_1017F70DC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 138))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance ephemeris due to NILR lock out", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    *(void *)(a1 + 2352) = a2;
    sub_1017EEA80(a1 + 8, 4);
    *(void *)(a1 + 2352) = 0;
  }
}

void sub_1017F72AC(uint64_t a1, void *__src)
{
  if (*(unsigned char *)(a1 + 138))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 880);
      LODWORD(buf) = 67109120;
      HIDWORD(buf) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance time due to NILR lock out", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v5 = *(_DWORD *)(a1 + 880);
      __dst[0] = 67109120;
      __dst[1] = v5;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v6);
      if (v6 != (char *)&buf) {
        free(v6);
      }
    }
  }
  else
  {
    __int16 v14 = 0;
    if (*(unsigned char *)(a1 + 878))
    {
      sub_1000C7F88(&buf);
      char v8 = sub_1004D0240(buf, "GpsWeekOffset", &v14);
      if (v23) {
        sub_1000DB0A0(v23);
      }
      if ((v8 & 1) == 0) {
        __int16 v14 = 1024;
      }
    }
    memcpy(__dst, __src, sizeof(__dst));
    sub_100103240();
    if (sub_10010145C() && sub_100119964())
    {
      unsigned __int16 v9 = v14 + *((_WORD *)__src + 2);
      LOWORD(__dst[1]) = v9;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(a1 + 880);
        LODWORD(buf) = 67109632;
        HIDWORD(buf) = v11;
        LOWORD(v23) = 1024;
        *(_DWORD *)((char *)&v23 + 2) = v9;
        HIWORD(v23) = 1024;
        int v24 = __dst[0];
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,week,%d,gpsTow,%d", (uint8_t *)&buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v12 = *(_DWORD *)(a1 + 880);
        int v15 = 67109632;
        int v16 = v12;
        __int16 v17 = 1024;
        int v18 = v9;
        __int16 v19 = 1024;
        int v20 = __dst[0];
        __int16 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v13);
        if (v13 != (char *)&buf) {
          free(v13);
        }
      }
    }
    *(void *)(a1 + 2360) = __dst;
    sub_1017EEA80(a1 + 8, 6);
    *(void *)(a1 + 2360) = 0;
  }
}

void sub_1017F7698(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1017F76B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 138))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance location due to NILR lock out", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    *(void *)(a1 + 2368) = a2;
    sub_1017EEA80(a1 + 8, 8);
    *(void *)(a1 + 2368) = 0;
  }
}

void sub_1017F7888(uint64_t a1, long long *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = *((_DWORD *)a2 + 9);
    int v7 = *((_DWORD *)a2 + 10);
    int v8 = *((_DWORD *)a2 + 1);
    int v9 = *((unsigned __int16 *)a2 + 4);
    int v10 = *((unsigned __int8 *)a2 + 10);
    int v11 = *((_DWORD *)a2 + 6);
    int v12 = *((unsigned __int8 *)a2 + 30);
    *(_DWORD *)uint64_t buf = 67111168;
    int v20 = v5;
    __int16 v21 = 1024;
    int v22 = v5;
    __int16 v23 = 1024;
    int v24 = v6;
    __int16 v25 = 1024;
    int v26 = v7;
    __int16 v27 = 1024;
    int v28 = v8;
    __int16 v29 = 1024;
    int v30 = v9;
    __int16 v31 = 1024;
    int v32 = v10;
    __int16 v33 = 1024;
    int v34 = v11;
    __int16 v35 = 1024;
    int v36 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,posProtocol,%d,sessionId,%d,method,%d,responseTime,%d,accuracy,%d,assistanceAvailability,%d,locCordinateTypeAllowed,%d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionRequest(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (*(unsigned char *)(a1 + 138))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      int v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring position request due to NILR lock out", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionRequest(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else
  {
    long long v16 = *a2;
    long long v17 = a2[1];
    *(_OWORD *)(a1 + 2256) = *(long long *)((char *)a2 + 28);
    *(_OWORD *)(a1 + 2228) = v16;
    *(_OWORD *)(a1 + 2244) = v17;
    if (sub_10073CBA4()) {
      *(_DWORD *)(a1 + 2240) = 0;
    }
    sub_1017EEA80(a1 + 8, 10);
  }
}

uint64_t sub_1017F7C7C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_SessionAbort(const gnss::Emergency::Cplane::GnssAbortReqParams &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(void *)(a1 + 2376) = a2;
  uint64_t result = sub_1017EEA80(a1 + 8, 11);
  *(void *)(a1 + 2376) = 0;
  return result;
}

uint64_t sub_1017F7E48(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = a2[2];
    int v7 = a2[3];
    int v8 = a2[4];
    int v9 = *a2;
    int v10 = a2[1];
    int v11 = a2[16];
    *(_DWORD *)uint64_t buf = 67110912;
    int v39 = v5;
    __int16 v40 = 1024;
    int v41 = v5;
    __int16 v42 = 1024;
    int v43 = v6;
    __int16 v44 = 1024;
    int v45 = v7;
    __int16 v46 = 1024;
    *(_DWORD *)char v47 = v8;
    *(_WORD *)&v47[4] = 1024;
    *(_DWORD *)&v47[6] = v9;
    LOWORD(v48) = 1024;
    *(_DWORD *)((char *)&v48 + 2) = v10;
    HIWORD(v48) = 1024;
    *(_DWORD *)char v49 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u,result,%d,responseType,%d,shapeType,%d", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionResponse(const gnss::Emergency::Cplane::PositionReport &, const gnss::Fix &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  int v12 = a2[16];
  *(unsigned char *)(a1 + 304) = v12;
  if (v12 == 3)
  {
    *(double *)(a1 + 312) = sub_1018115AC(a2[20]);
    *(double *)(a1 + 320) = sub_1018115D0(a2[21]);
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 360) = 0;
    *(long double *)(a1 + 344) = sub_101811540(*((unsigned __int8 *)a2 + 88));
    *(long double *)(a1 + 352) = sub_101811540(*((unsigned __int8 *)a2 + 89));
    *(_DWORD *)(a1 + 368) = *((unsigned __int8 *)a2 + 91);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(a1 + 880);
      int v26 = a2[20];
      int v27 = a2[21];
      uint64_t v28 = *(void *)(a1 + 312);
      uint64_t v29 = *(void *)(a1 + 320);
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = *(void *)(a1 + 352);
      int v32 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)uint64_t buf = 67111169;
      int v39 = v25;
      __int16 v40 = 1026;
      int v41 = v25;
      __int16 v42 = 1025;
      int v43 = v26;
      __int16 v44 = 1025;
      int v45 = v27;
      __int16 v46 = 2049;
      *(void *)char v47 = v28;
      *(_WORD *)&v47[8] = 2049;
      uint64_t v48 = v29;
      *(_WORD *)char v49 = 2050;
      *(void *)&v49[2] = v30;
      __int16 v50 = 2050;
      uint64_t v51 = v31;
      __int16 v52 = 1026;
      LODWORD(v53) = v32;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,pointUncertainEllipse,instance,%{public}d,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,conf,%{public}d", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_33:
        __int32 v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionResponse(const gnss::Emergency::Cplane::PositionReport &, const gnss::Fix &)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
        return sub_1017EEA80(a1 + 8, 14);
      }
LABEL_35:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      goto LABEL_33;
    }
  }
  else if (v12 == 9)
  {
    *(double *)(a1 + 312) = sub_1018115AC(a2[23]);
    *(double *)(a1 + 320) = sub_1018115D0(a2[24]);
    *(double *)(a1 + 328) = sub_101811524(*((_WORD *)a2 + 50));
    *(long double *)(a1 + 360) = sub_101811574(*((unsigned __int8 *)a2 + 105));
    *(long double *)(a1 + 344) = sub_101811540(*((unsigned __int8 *)a2 + 102));
    *(long double *)(a1 + 352) = sub_101811540(*((unsigned __int8 *)a2 + 103));
    *(_DWORD *)(a1 + 368) = *((unsigned __int8 *)a2 + 106);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(a1 + 880);
      int v15 = a2[23];
      int v16 = a2[24];
      uint64_t v17 = *(void *)(a1 + 312);
      uint64_t v18 = *(void *)(a1 + 320);
      uint64_t v19 = *(void *)(a1 + 328);
      uint64_t v21 = *(void *)(a1 + 352);
      uint64_t v20 = *(void *)(a1 + 360);
      uint64_t v22 = *(void *)(a1 + 344);
      int v23 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)uint64_t buf = 67111681;
      int v39 = v14;
      __int16 v40 = 1026;
      int v41 = v14;
      __int16 v42 = 1025;
      int v43 = v15;
      __int16 v44 = 1025;
      int v45 = v16;
      __int16 v46 = 2049;
      *(void *)char v47 = v17;
      *(_WORD *)&v47[8] = 2049;
      uint64_t v48 = v18;
      *(_WORD *)char v49 = 2049;
      *(void *)&v49[2] = v19;
      __int16 v50 = 2050;
      uint64_t v51 = v20;
      __int16 v52 = 2050;
      uint64_t v53 = v22;
      __int16 v54 = 2050;
      uint64_t v55 = v21;
      __int16 v56 = 1026;
      int v57 = v23;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,pointAltitudeUncertainEllipsoid,instance,%{public}d,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,alt,%{private}.3f,uncAlt,%{public}.3f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,confidence,%{public}d", buf, 0x5Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_33;
      }
      goto LABEL_35;
    }
  }
  else
  {
    *(void *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 344) = 0;
    *(_DWORD *)(a1 + 368) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v33 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v34 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      int v39 = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning FIREDBG:Unsupported", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_33;
      }
      goto LABEL_35;
    }
  }
  return sub_1017EEA80(a1 + 8, 14);
}

uint64_t sub_1017F863C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = *(_DWORD *)(a2 + 8);
    int v7 = *(_DWORD *)(a2 + 12);
    int v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)uint64_t buf = 67110144;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane received measurement response,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_MeasurementResponse(const gnss::Emergency::Cplane::MeasurementReport &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  char v9 = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 452) = v9;
  *(unsigned char *)(a1 + 724) = v9;
  return sub_1017EEA80(a1 + 8, 16);
}

uint64_t sub_1017F8864(uint64_t a1, int *a2, double a3)
{
  int v5 = *a2;
  if (*a2 == -9)
  {
    int v6 = 4;
  }
  else if (v5)
  {
    if (v5 == -4) {
      int v6 = 3;
    }
    else {
      int v6 = 11;
    }
  }
  else
  {
    int v6 = 1;
  }
  *(_DWORD *)(a1 + 244) = v6;
  *(unsigned char *)(a1 + 453) = 1;
  LODWORD(a3) = a2[119];
  double v7 = (double)*(unint64_t *)&a3 * 0.00000536441803;
  *(double *)(a1 + 312) = v7;
  LODWORD(v7) = a2[120];
  *(double *)(a1 + 320) = (double)*(unint64_t *)&v7 * 0.00000536441803 + -360.0;
  double v8 = sub_101811610(*((unsigned __int8 *)a2 + 485));
  double v9 = sub_101811610(*((unsigned __int8 *)a2 + 486));
  if (v8 > 0.0 && v9 > 0.0) {
    *(double *)(a1 + 336) = sqrt(v9 * v9 + v8 * v8);
  }
  if (*((unsigned char *)a2 + 512))
  {
    double v10 = sub_10181150C(*((_WORD *)a2 + 257));
    *(double *)(a1 + 328) = v10;
    LOBYTE(v10) = *((unsigned char *)a2 + 516);
    *(double *)(a1 + 360) = (double)*(unint64_t *)&v10;
  }
  *(unsigned char *)(a1 + 452) = *((unsigned char *)a2 + 27);
  memcpy((void *)(a1 + 512), (const void *)(a1 + 240), 0x110uLL);
  if (a2[122] == -1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v29 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = *(_DWORD *)(a1 + 880);
      int v31 = *a2;
      int v32 = *((unsigned __int8 *)a2 + 4);
      int v33 = a2[2];
      int v34 = a2[3];
      int v35 = a2[4];
      int v36 = a2[122];
      int v37 = *((unsigned __int8 *)a2 + 27);
      *(_DWORD *)uint64_t buf = 67110912;
      int v41 = v30;
      __int16 v42 = 1024;
      int v43 = v31;
      __int16 v44 = 1024;
      int v45 = v32;
      __int16 v46 = 1024;
      int v47 = v33;
      __int16 v48 = 1024;
      int v49 = v34;
      __int16 v50 = 1024;
      int v51 = v35;
      __int16 v52 = 1024;
      int v53 = v36;
      __int16 v54 = 1024;
      int v55 = v37;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,process_MeasurementReportWithEstimateResponse,result,%d,responseType,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u,locationIndication,fixtype,%d,gpsMeasurements,nrOfSats,%d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(_DWORD *)(a1 + 880);
      int v13 = *a2;
      int v14 = *((unsigned __int8 *)a2 + 4);
      int v15 = a2[2];
      int v16 = a2[3];
      int v17 = a2[4];
      int v18 = a2[119];
      int v19 = a2[120];
      int v20 = *((unsigned __int8 *)a2 + 484);
      int v21 = *((unsigned __int8 *)a2 + 485);
      int v22 = *((unsigned __int8 *)a2 + 486);
      int v23 = a2[122];
      int v24 = *((unsigned __int8 *)a2 + 27);
      uint64_t v25 = *(void *)(a1 + 312);
      uint64_t v26 = *(void *)(a1 + 320);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v27 = *(void *)(a1 + 336);
      *(_DWORD *)uint64_t buf = 67113217;
      int v41 = v12;
      __int16 v42 = 1026;
      int v43 = v13;
      __int16 v44 = 1026;
      int v45 = v14;
      __int16 v46 = 1026;
      int v47 = v15;
      __int16 v48 = 1026;
      int v49 = v16;
      __int16 v50 = 1026;
      int v51 = v17;
      __int16 v52 = 1025;
      int v53 = v18;
      __int16 v54 = 1025;
      int v55 = v19;
      __int16 v56 = 1026;
      int v57 = v20;
      __int16 v58 = 1026;
      int v59 = v21;
      __int16 v60 = 1026;
      int v61 = v22;
      __int16 v62 = 1026;
      int v63 = v23;
      __int16 v64 = 1026;
      int v65 = v24;
      __int16 v66 = 2049;
      uint64_t v67 = v25;
      __int16 v68 = 2049;
      uint64_t v69 = v26;
      __int16 v70 = 2050;
      uint64_t v71 = v27;
      __int16 v72 = 2049;
      uint64_t v73 = v28;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,process_MeasurementReportWithEstimateResponse,result,%{public}d,responseType,%{public}d,sessionProtocol,%{public}d,posProtocol,%{public}d,sessionId,%{public}u,locationIndication,lat,%{private}d,lon,%{private}d,locUncAng,%{public}d,locUncA,%{public}d,locUncP,%{public}d,fixtype,%{public}d,gpsMeasurements,nrOfSats,%{public}d,lat(m),%{private}f,lon(m),%{private}f,acc,%{public}f,alt,%{private}f", buf, 0x78u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_28:
        int v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_MeasurementReportWithEstimateResponse(const gnss::Emergency::Cplane::MeasurementReportWithEstimate &)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
        return sub_1017EEA80(a1 + 8, 29);
      }
LABEL_30:
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      goto LABEL_28;
    }
  }
  return sub_1017EEA80(a1 + 8, 29);
}

uint64_t sub_1017F8E40(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_OTADelete(const gnss::Emergency::Cplane::ResetDataReqParams &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1017EEA80(a1 + 8, 12);
}

uint64_t sub_1017F9000(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)uint64_t buf = 67109632;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,CPlane,instance,%d,isPowered,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_BasebandPowerStatus(BOOL)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (a2)
  {
    sub_1017EE214(a1, (int *)(a1 + 888));
    uint64_t v6 = 19;
  }
  else
  {
    uint64_t v6 = 20;
  }
  return sub_1017EEA80(a1 + 8, v6);
}

void sub_1017F9204(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 20) == 1)
  {
    *(void *)(a1 + 2384) = a2;
    sub_1017EEA80(a1 + 8, 21);
    *(void *)(a1 + 2384) = 0;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Only session end indication is handled in Control plane state machine", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrCplane::process_BasebandSessionInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_1017F93DC(uint64_t a1, _DWORD *a2)
{
  int v4 = (std::__shared_weak_count *)operator new(0x780uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_10233EC28;
  memcpy(&v4[1], a2, 0x768uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 880);
    int v7 = a2[2];
    int v8 = a2[3];
    int v9 = a2[4];
    *(_DWORD *)uint64_t buf = 67110144;
    int v29 = v6;
    __int16 v30 = 1024;
    int v31 = v6;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    int v35 = v8;
    __int16 v36 = 1024;
    int v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = *(_DWORD *)(a1 + 880);
    int v12 = a2[2];
    int v13 = a2[3];
    int v14 = a2[4];
    int v18 = 67110144;
    int v19 = v11;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    __int16 v24 = 1024;
    int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_AssistanceDataNeeded(const gnss::Emergency::Cplane::AssistanceNeededReport &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  int v10 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017F96C4;
  block[3] = &unk_10233DAE8;
  block[4] = a1;
  void block[5] = v4 + 1;
  int v17 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v10, block);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  sub_1000DB0A0(v4);
}

void sub_1017F96AC(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017F96C4(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v2 + 2272) = v1;
  int v4 = *(std::__shared_weak_count **)(v2 + 2280);
  *(void *)(v2 + 2280) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    uint64_t v1 = *(void *)(v2 + 2272);
  }
  if (v1)
  {
    return sub_1017F68B4(v2, v1);
  }
  else
  {
    uint64_t v6 = sub_10180C644();
    return sub_1017F972C(v6, v7);
  }
}

uint64_t sub_1017F972C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1017F9748(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1017F9758(uint64_t a1, _DWORD *a2)
{
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_10233EC78;
  LODWORD(v4[1].__vftable) = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 880);
    int v7 = *a2;
    *(_DWORD *)uint64_t buf = 67109632;
    int v21 = v6;
    __int16 v22 = 1024;
    int v23 = v6;
    __int16 v24 = 1024;
    int v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,networkType,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v9 = *(_DWORD *)(a1 + 880);
    int v10 = *a2;
    int v14 = 67109632;
    int v15 = v9;
    __int16 v16 = 1024;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_FT1xAssistanceDataNeeded(const gnss::Emergency::Cplane::CellFTAssistanceRequest &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v8 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017F9A10;
  block[3] = &unk_10233DB18;
  block[4] = a1;
  void block[5] = v4 + 1;
  int v13 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v8, block);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  sub_1000DB0A0(v4);
}

void sub_1017F99F8(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017F9A10(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v1 = (int *)a1[5];
  uint64_t v3 = a1[6];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v2 + 2288) = v1;
  int v4 = *(std::__shared_weak_count **)(v2 + 2296);
  *(void *)(v2 + 2296) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    uint64_t v1 = *(int **)(v2 + 2288);
  }
  if (v1)
  {
    return sub_1017F6B48(v2, v1);
  }
  else
  {
    uint64_t v6 = sub_10180C7A8();
    return sub_1017F9A78(v6, v7);
  }
}

uint64_t sub_1017F9A78(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1017F9A94(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1017F9AA4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x150uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_10233ECC8;
  memcpy(&v6[1], a2, 0x138uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 880);
    int v9 = a2[2];
    int v10 = a2[3];
    int v11 = a2[4];
    *(_DWORD *)uint64_t buf = 67110144;
    int v32 = v8;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    int v36 = v9;
    __int16 v37 = 1024;
    int v38 = v10;
    __int16 v39 = 1024;
    int v40 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v13 = *(_DWORD *)(a1 + 880);
    int v14 = a2[2];
    int v15 = a2[3];
    int v16 = a2[4];
    int v21 = 67110144;
    int v22 = v13;
    __int16 v23 = 1024;
    int v24 = v13;
    __int16 v25 = 1024;
    int v26 = v14;
    __int16 v27 = 1024;
    int v28 = v15;
    __int16 v29 = 1024;
    int v30 = v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_PositionResponse(const gnss::Emergency::Cplane::PositionReport &, const gnss::Fix &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  int v12 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017F9D98;
  block[3] = &unk_10233DB48;
  block[4] = a1;
  void block[5] = v6 + 1;
  int v19 = v6;
  uint64_t v20 = a3;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v12, block);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  sub_1000DB0A0(v6);
}

void sub_1017F9D80(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017F9D98(void *a1)
{
  uint64_t v2 = a1[4];
  BOOL v3 = sub_10073CBA4();
  int v4 = (int *)a1[5];
  if (v3)
  {
    v4[1] &= ~4u;
    v4[68] = 255;
  }
  uint64_t v5 = a1[6];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v2 + 2304) = v4;
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 2312);
  *(void *)(v2 + 2312) = v5;
  if (v6)
  {
    sub_1000DB0A0(v6);
    int v4 = *(int **)(v2 + 2304);
  }
  if (v4)
  {
    return sub_1017F7E48(v2, v4);
  }
  else
  {
    uint64_t v8 = sub_10180C90C();
    return sub_1017F9E24(v8, v9);
  }
}

uint64_t sub_1017F9E24(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1017F9E40(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1017F9E50(uint64_t a1, _DWORD *a2)
{
  int v4 = (std::__shared_weak_count *)operator new(0x590uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_10233ED18;
  memcpy(&v4[1], a2, 0x578uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 880);
    int v7 = a2[2];
    int v8 = a2[3];
    int v9 = a2[4];
    *(_DWORD *)uint64_t buf = 67110144;
    int v29 = v6;
    __int16 v30 = 1024;
    int v31 = v6;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    int v35 = v8;
    __int16 v36 = 1024;
    int v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = *(_DWORD *)(a1 + 880);
    int v12 = a2[2];
    int v13 = a2[3];
    int v14 = a2[4];
    int v18 = 67110144;
    int v19 = v11;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    __int16 v24 = 1024;
    int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_MeasurementResponse(const gnss::Emergency::Cplane::MeasurementReport &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  int v10 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017FA138;
  block[3] = &unk_10233DB78;
  block[4] = a1;
  void block[5] = v4 + 1;
  int v17 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v10, block);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  sub_1000DB0A0(v4);
}

void sub_1017FA120(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FA138(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v2 + 2320) = v1;
  int v4 = *(std::__shared_weak_count **)(v2 + 2328);
  *(void *)(v2 + 2328) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    uint64_t v1 = *(void *)(v2 + 2320);
  }
  if (v1)
  {
    return sub_1017F863C(v2, v1);
  }
  else
  {
    uint64_t v6 = sub_10180CA70();
    return sub_1017FA1A0(v6, v7);
  }
}

uint64_t sub_1017FA1A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1017FA1BC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1017FA1CC(uint64_t a1, _DWORD *a2)
{
  int v4 = (std::__shared_weak_count *)operator new(0x228uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_10233ED68;
  memcpy(&v4[1], a2, 0x210uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 880);
    int v7 = a2[2];
    int v8 = a2[3];
    int v9 = a2[4];
    *(_DWORD *)uint64_t buf = 67110144;
    int v29 = v6;
    __int16 v30 = 1024;
    int v31 = v6;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    int v35 = v8;
    __int16 v36 = 1024;
    int v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,NilrCPlane,Dispatch,MeasurementReportWithEstimateResponse,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = *(_DWORD *)(a1 + 880);
    int v12 = a2[2];
    int v13 = a2[3];
    int v14 = a2[4];
    int v18 = 67110144;
    int v19 = v11;
    __int16 v20 = 1024;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    __int16 v24 = 1024;
    int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_MeasurementReportWithEstimateResponse(const gnss::Emergency::Cplane::MeasurementReportWithEstimate &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  int v10 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017FA4B4;
  block[3] = &unk_10233DBA8;
  block[4] = a1;
  void block[5] = v4 + 1;
  int v17 = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_async(v10, block);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  sub_1000DB0A0(v4);
}

void sub_1017FA49C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FA4B4(void *a1, double a2)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (int *)a1[5];
  uint64_t v4 = a1[6];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v3 + 2336) = v2;
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 2344);
  *(void *)(v3 + 2344) = v4;
  if (v5)
  {
    sub_1000DB0A0(v5);
    uint64_t v2 = *(int **)(v3 + 2336);
  }
  if (v2)
  {
    return sub_1017F8864(v3, v2, a2);
  }
  else
  {
    uint64_t v7 = sub_10180CBD4();
    return sub_1017FA51C(v7, v8);
  }
}

uint64_t sub_1017FA51C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1017FA538(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

uint64_t sub_1017FA548(_DWORD *a1, int *a2)
{
  if (a2[10] != a1[232] || a2[12] != a1[234] || a2[13] != a1[235]) {
    sub_1017EE214((uint64_t)a1, a2);
  }

  return sub_10083C6B4((uint64_t)(a1 + 222), (uint64_t *)a2);
}

void *sub_1017FA5C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 512), 0x110uLL);
}

void sub_1017FA5D0(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    int v6 = *a2;
    int v7 = *((unsigned __int16 *)a2 + 8);
    *(_DWORD *)uint64_t buf = 67109632;
    int v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,process_CplaneWlanRequest,nInstance,%d,responseTime,%d,", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (*(unsigned char *)(a1 + 138))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)uint64_t buf = 67109120;
      int v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,#nilr,#cplane,process_CplaneWlanRequest,ignoring wlan request due to NILR lock out", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 2431) = *(int *)((char *)a2 + 15);
    *(_OWORD *)(a1 + 2416) = v11;
    unsigned int v12 = *((unsigned __int16 *)a2 + 8);
    *(double *)(a1 + 3248) = (double)v12 + -2.0;
    *(_WORD *)(a1 + 822) = v12;
    *(CFAbsoluteTime *)(a1 + 800) = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)(a1 + 792) = 6;
    sub_1017EEA80(a1 + 8, 25);
  }
}

uint64_t sub_1017FA960(uint64_t a1)
{
  return sub_101990234(*(void *)(*(void *)(a1 + 32) + 2408), *(void *)(*(void *)(a1 + 32) + 928), *(_DWORD *)(*(void *)(a1 + 32) + 936), (int)*(double *)(*(void *)(a1 + 32) + 3248));
}

uint64_t sub_1017FA97C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,wlanMeasurementHandler", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrCplane::wlanMeasurementHandler(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  *(_DWORD *)(a1 + 2452) = *(_DWORD *)(a1 + 2428);
  *(void *)(a1 + 2444) = *(void *)(a1 + 2420);
  if (*(_DWORD *)a2 == 1)
  {
    *(_DWORD *)(a1 + 788) = 1;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 2456) = -85 * ((v6 - v7) >> 2);
    *(_DWORD *)(a1 + 2440) = 0;
    if (v6 != v7)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      int v10 = *(unsigned __int8 *)(a1 + 819);
      do
      {
        for (uint64_t i = 0; i != 6; ++i)
          *(unsigned char *)(a1 + 2458 + v8 + i) = *(unsigned char *)(*(void *)(a2 + 8) + v8 + i);
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = v12 + 12 * v9;
        int v14 = *(unsigned __int8 *)(v13 + 6);
        uint64_t v15 = a1 + 12 * v9;
        *(unsigned char *)(v15 + 2464) = v14;
        v10 |= v14;
        *(unsigned char *)(a1 + 819) = v10;
        *(unsigned char *)(v15 + 2465) = *(unsigned char *)(v13 + 7);
        *(_DWORD *)(v15 + 2466) = *(_DWORD *)(v13 + 8);
        ++v9;
        v8 += 12;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 16) - v12) >> 2) > v9);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 2440) = -2;
    *(unsigned char *)(a1 + 3236) = 1;
    *(_DWORD *)(a1 + 3240) = 2;
    *(_DWORD *)(a1 + 788) = 4;
  }
  *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
  return sub_1017EEA80(a1 + 8, 26);
}

void sub_1017FAC4C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1017FAC7C(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1017FACB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1017FACEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1017FAD30(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_10180CD38();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    uint64_t v8 = &v11;
  }
  else {
    uint64_t v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_1017FAEA4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FAEE8(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_101804FAC(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1017FAF5C()
{
}

void *sub_1017FAF70(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233DC88;
  result[1] = v3;
  return result;
}

uint64_t sub_1017FAFB8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233DC88;
  a2[1] = v2;
  return result;
}

void *sub_1017FAFE4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    v5[0] = off_10233DD88;
    v5[3] = v5;
    sub_1017FB0E0((uint64_t)result, 52, v4, 38, (uint64_t)v5);
    return sub_1017FC590(v5);
  }
  return result;
}

void sub_1017FB080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017FC590((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FB094(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FB0D4()
{
}

void *sub_1017FB0E0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  v10[0] = 0;
  v10[1] = 0;
  int v11 = 0;
  sub_1018EA548(a3, v10);
  sub_1017FC430((uint64_t)v12, a5);
  sub_1017FB1A4(a1, a2, (char *)v10, a4, (uint64_t)v12);
  return sub_1017FC590(v12);
}

void sub_1017FB188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1017FC590((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1017FB1A4(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    int v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D168((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        v36[0] = v17 >> 26;
        LOWORD(v36[1]) = 1024;
        *(_DWORD *)((char *)&v36[1] + 2) = (v18 >> 15) & 0x3FF;
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_1017FB744;
      v26[3] = &unk_10233DD18;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_1017FC430((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_1017FC590(v27);
    }
    else
    {
      memset(v36, 255, sizeof(v36));
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v30 = 67240192;
        int v31 = v22;
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1017FB6F0(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1017FC25C;
    block[3] = &unk_10233DD48;
    int v25 = a2;
    sub_1017FC430((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_1017FC590(v24);
  }
}

void sub_1017FB6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FB6F0(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1017FB744(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  *(void *)((char *)&v32 + 4) = -1;
  HIDWORD(v32) = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v50 = Gmid;
    __int16 v51 = 1024;
    unsigned int v52 = v7;
    __int16 v53 = 1024;
    int v54 = (v8 >> 15) & 0x3FF;
    __int16 v55 = 1024;
    unsigned int v56 = v9;
    __int16 v57 = 1024;
    unsigned int v58 = v9 >> 26;
    __int16 v59 = 1024;
    int v60 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v37 = 67110400;
    int v38 = v22;
    __int16 v39 = 1024;
    unsigned int v40 = v23 >> 26;
    __int16 v41 = 1024;
    int v42 = (v24 >> 15) & 0x3FF;
    __int16 v43 = 1024;
    unsigned int v44 = v25;
    __int16 v45 = 1024;
    unsigned int v46 = v25 >> 26;
    __int16 v47 = 1024;
    int v48 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v50 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = 67109120;
      int v38 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v37) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189E3D4(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v37) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v37) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  unsigned int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017FC220;
  block[3] = &unk_10233DCE8;
  sub_1017FC430((uint64_t)v34, a1 + 40);
  int v35 = v14;
  long long v36 = v32;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v50 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = 67240192;
      int v38 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v50 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = 67109120;
      int v38 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_1017FC590(v34);
}

void sub_1017FC1FC(_Unwind_Exception *a1)
{
  sub_1017FC590(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FC220(uint64_t a1)
{
  return sub_1017FB6F0(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_1017FC234(uint64_t a1, uint64_t a2)
{
  return sub_1017FC430(a1 + 32, a2 + 32);
}

void *sub_1017FC240(uint64_t a1)
{
  return sub_1017FC590((void *)(a1 + 32));
}

uint64_t sub_1017FC248(uint64_t a1, uint64_t a2)
{
  return sub_1017FC430(a1 + 40, a2 + 40);
}

void *sub_1017FC254(uint64_t a1)
{
  return sub_1017FC590((void *)(a1 + 40));
}

uint64_t sub_1017FC25C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1017FB6F0(a1 + 32, 3);
}

uint64_t sub_1017FC430(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017FC4CC()
{
}

void *sub_1017FC4E0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_10233DD88;
  return result;
}

void sub_1017FC518(uint64_t a1, void *a2)
{
  *a2 = off_10233DD88;
}

uint64_t sub_1017FC544(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FC584()
{
}

void *sub_1017FC590(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017FC618()
{
}

void *sub_1017FC62C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233DE28;
  result[1] = v3;
  return result;
}

uint64_t sub_1017FC674(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233DE28;
  a2[1] = v2;
  return result;
}

void *sub_1017FC6A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    v5[0] = off_10233DF28;
    v5[3] = v5;
    sub_1017FC79C((uint64_t)result, 51, v4, 37, (uint64_t)v5);
    return sub_1017FDC8C(v5);
  }
  return result;
}

void sub_1017FC73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017FDC8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FC750(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FC790()
{
}

void *sub_1017FC79C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  memset(v10, 0, 512);
  sub_1018EA358(a3, (uint64_t)v10);
  sub_1017FDB2C((uint64_t)v11, a5);
  sub_1017FC8A4(a1, a2, (char *)v10, a4, (uint64_t)v11);
  return sub_1017FDC8C(v11);
}

void sub_1017FC888(_Unwind_Exception *a1)
{
  sub_1017FDC8C((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1017FC8A4(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    int v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D034((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        LOWORD(v37) = 1024;
        *(_DWORD *)((char *)&v37 + 2) = (v18 >> 15) & 0x3FF;
        BOOL v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_1017FCE38;
      v26[3] = &unk_10233DEB8;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_1017FDB2C((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_1017FDC8C(v27);
    }
    else
    {
      uint64_t v37 = -1;
      int v38 = -1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v30 = 67240192;
        int v31 = v22;
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1017FCDE4(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1017FD958;
    block[3] = &unk_10233DEE8;
    int v25 = a2;
    sub_1017FDB2C((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_1017FDC8C(v24);
  }
}

void sub_1017FCDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FCDE4(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1017FCE38(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  *((void *)&v32 + 1) = -1;
  int v33 = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v52 = Gmid;
    __int16 v53 = 1024;
    unsigned int v54 = v7;
    __int16 v55 = 1024;
    int v56 = (v8 >> 15) & 0x3FF;
    __int16 v57 = 1024;
    unsigned int v58 = v9;
    __int16 v59 = 1024;
    unsigned int v60 = v9 >> 26;
    __int16 v61 = 1024;
    int v62 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v39 = 67110400;
    int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v23 >> 26;
    __int16 v43 = 1024;
    int v44 = (v24 >> 15) & 0x3FF;
    __int16 v45 = 1024;
    unsigned int v46 = v25;
    __int16 v47 = 1024;
    unsigned int v48 = v25 >> 26;
    __int16 v49 = 1024;
    int v50 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v52 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189E460(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  unsigned int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017FD91C;
  block[3] = &unk_10233DE88;
  sub_1017FDB2C((uint64_t)v35, a1 + 40);
  int v36 = v14;
  long long v37 = v32;
  int v38 = v33;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67240192;
      int v40 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_1017FDC8C(v35);
}

void sub_1017FD8F8(_Unwind_Exception *a1)
{
  sub_1017FDC8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FD91C(uint64_t a1)
{
  return sub_1017FCDE4(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_1017FD930(uint64_t a1, uint64_t a2)
{
  return sub_1017FDB2C(a1 + 32, a2 + 32);
}

void *sub_1017FD93C(uint64_t a1)
{
  return sub_1017FDC8C((void *)(a1 + 32));
}

uint64_t sub_1017FD944(uint64_t a1, uint64_t a2)
{
  return sub_1017FDB2C(a1 + 40, a2 + 40);
}

void *sub_1017FD950(uint64_t a1)
{
  return sub_1017FDC8C((void *)(a1 + 40));
}

uint64_t sub_1017FD958(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1017FCDE4(a1 + 32, 3);
}

uint64_t sub_1017FDB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017FDBC8()
{
}

void *sub_1017FDBDC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_10233DF28;
  return result;
}

void sub_1017FDC14(uint64_t a1, void *a2)
{
  *a2 = off_10233DF28;
}

uint64_t sub_1017FDC40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FDC80()
{
}

void *sub_1017FDC8C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017FDD14()
{
}

void *sub_1017FDD28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233DFC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1017FDD70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233DFC8;
  a2[1] = v2;
  return result;
}

void *sub_1017FDD9C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result)
  {
    int v4 = *(_DWORD **)(a1 + 8);
    v5[0] = off_10233E0C8;
    v5[3] = v5;
    sub_1017FDE98((uint64_t)result, 49, v4, 35, (uint64_t)v5);
    return sub_1017FF38C(v5);
  }
  return result;
}

void sub_1017FDE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017FF38C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FDE4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FDE8C()
{
}

void *sub_1017FDE98(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  memset(v10, 0, 460);
  sub_1018EA2B4(a3, (uint64_t)v10);
  sub_1017FF22C((uint64_t)v11, a5);
  sub_1017FDFA4(a1, a2, v10, a4, (uint64_t)v11);
  return sub_1017FF38C(v11);
}

void sub_1017FDF88(_Unwind_Exception *a1)
{
  sub_1017FF38C((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1017FDFA4(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    int v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189CD20((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        LOWORD(v37) = 1024;
        *(_DWORD *)((char *)&v37 + 2) = (v18 >> 15) & 0x3FF;
        BOOL v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_1017FE538;
      v26[3] = &unk_10233E058;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_1017FF22C((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_1017FF38C(v27);
    }
    else
    {
      uint64_t v37 = -1;
      int v38 = -1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v30 = 67240192;
        int v31 = v22;
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1017FE4E4(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1017FF058;
    block[3] = &unk_10233E088;
    int v25 = a2;
    sub_1017FF22C((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_1017FF38C(v24);
  }
}

void sub_1017FE4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FE4E4(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1017FE538(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  *((void *)&v32 + 1) = -1;
  int v33 = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v52 = Gmid;
    __int16 v53 = 1024;
    unsigned int v54 = v7;
    __int16 v55 = 1024;
    int v56 = (v8 >> 15) & 0x3FF;
    __int16 v57 = 1024;
    unsigned int v58 = v9;
    __int16 v59 = 1024;
    unsigned int v60 = v9 >> 26;
    __int16 v61 = 1024;
    int v62 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v39 = 67110400;
    int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v23 >> 26;
    __int16 v43 = 1024;
    int v44 = (v24 >> 15) & 0x3FF;
    __int16 v45 = 1024;
    unsigned int v46 = v25;
    __int16 v47 = 1024;
    unsigned int v48 = v25 >> 26;
    __int16 v49 = 1024;
    int v50 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v52 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189E510(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  unsigned int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1017FF01C;
  block[3] = &unk_10233E028;
  sub_1017FF22C((uint64_t)v35, a1 + 40);
  int v36 = v14;
  long long v37 = v32;
  int v38 = v33;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67240192;
      int v40 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_1017FF38C(v35);
}

void sub_1017FEFF8(_Unwind_Exception *a1)
{
  sub_1017FF38C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017FF01C(uint64_t a1)
{
  return sub_1017FE4E4(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_1017FF030(uint64_t a1, uint64_t a2)
{
  return sub_1017FF22C(a1 + 32, a2 + 32);
}

void *sub_1017FF03C(uint64_t a1)
{
  return sub_1017FF38C((void *)(a1 + 32));
}

uint64_t sub_1017FF044(uint64_t a1, uint64_t a2)
{
  return sub_1017FF22C(a1 + 40, a2 + 40);
}

void *sub_1017FF050(uint64_t a1)
{
  return sub_1017FF38C((void *)(a1 + 40));
}

uint64_t sub_1017FF058(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1017FE4E4(a1 + 32, 3);
}

uint64_t sub_1017FF22C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1017FF2C8()
{
}

void *sub_1017FF2DC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_10233E0C8;
  return result;
}

void sub_1017FF314(uint64_t a1, void *a2)
{
  *a2 = off_10233E0C8;
}

uint64_t sub_1017FF340(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FF380()
{
}

void *sub_1017FF38C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1017FF414()
{
}

void *sub_1017FF428(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233E168;
  result[1] = v3;
  return result;
}

uint64_t sub_1017FF470(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233E168;
  a2[1] = v2;
  return result;
}

uint64_t sub_1017FF49C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 880);
    int v6 = *(_DWORD *)(v3 + 856);
    *(_DWORD *)uint64_t buf = 67109632;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,stopPositionRequest(instance,%d,fSessionId,%d)", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::endRildSession()::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_10195B8E0(a2, *(_DWORD *)(v3 + 856));
}

uint64_t sub_1017FF690(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1017FF6D0()
{
}

void sub_1017FF6E0()
{
}

__n128 sub_1017FF6F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233E1E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1017FF740(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233E1E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1017FF770(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1017FF780(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FF7C0()
{
}

uint64_t sub_1017FF7CC(uint64_t a1)
{
  return sub_1017EEA80(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1017FF7E0()
{
}

__n128 sub_1017FF7F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233E268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1017FF840(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233E268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1017FF870(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v4 + 880);
    uint64_t v7 = *(void *)(a1 + 16);
    int v8 = *(_DWORD *)(v7 + 8);
    uint64_t v10 = v7 + 12;
    LODWORD(v7) = *(_DWORD *)(v7 + 12);
    int v9 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)uint64_t buf = 67110144;
    LODWORD(v26[0]) = v6;
    WORD2(v26[0]) = 1024;
    *(_DWORD *)((char *)v26 + 6) = v6;
    WORD1(v26[1]) = 1024;
    HIDWORD(v26[1]) = v9;
    LOWORD(v26[2]) = 1024;
    *(_DWORD *)((char *)&v26[2] + 2) = v8;
    HIWORD(v26[2]) = 1024;
    LODWORD(v26[3]) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildAssistanceDataNeeded,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v19 = *(_DWORD *)(v4 + 880);
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(v20 + 8);
    uint64_t v23 = v20 + 12;
    LODWORD(v20) = *(_DWORD *)(v20 + 12);
    int v22 = *(_DWORD *)(v23 + 4);
    LODWORD(v28) = 67110144;
    HIDWORD(v28) = v19;
    __int16 v29 = 1024;
    int v30 = v19;
    __int16 v31 = 1024;
    int v32 = v22;
    __int16 v33 = 1024;
    *(_DWORD *)int v34 = v21;
    *(_WORD *)&void v34[4] = 1024;
    *(_DWORD *)&v34[6] = v20;
    unsigned int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::handleAssistanceNeeded(const gnss::Emergency::Cplane::AssistanceNeededReport &)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  LODWORD(v26[0]) = 0;
  BYTE4(v26[0]) = 0;
  v26[1] = -1;
  LODWORD(v26[2]) = -1;
  WORD2(v26[2]) = 0;
  *(_DWORD *)((char *)&v26[2] + 6) = -1;
  BYTE2(v26[3]) = -1;
  *(void *)((char *)&v26[3] + 3) = 0;
  *(void *)((char *)&v26[4] + 1) = 0;
  BYTE1(v26[5]) = -1;
  *(void *)((char *)&v26[5] + 2) = 0;
  __int16 v11 = (int *)&v26[13];
  v26[6] = 0;
  uint64_t v12 = 116;
  LOBYTE(v26[7]) = -1;
  uint64_t v13 = 266;
  BYTE4(v26[7]) = 0;
  do
  {
    *__int16 v11 = 5;
    *((_WORD *)v11 + 2) = 0;
    uint64_t v14 = v12;
    *((unsigned char *)v11 + 6) = -1;
    do
    {
      uint64_t v15 = &buf[v14];
      *uint64_t v15 = -1;
      *((_DWORD *)v15 + 1) = -1;
      v14 += 8;
    }
    while (v15 + 8 != (uint8_t *)(v11 + 32));
    v11[32] = -1;
    *((_WORD *)v11 + 66) = -1;
    *(int *)((char *)v11 + 134) = -256;
    *(void *)((char *)v11 + 138) = 0;
    *((void *)v11 + 18) = 0;
    v11[38] = -1;
    uint64_t v16 = v13;
    *((unsigned char *)v11 + 156) = -1;
    do
    {
      unsigned int v17 = &buf[v16];
      uint8_t *v17 = -1;
      *((_WORD *)v17 + 1) = -1;
      v16 += 4;
    }
    while (v17 + 4 != (uint8_t *)((char *)v11 + 218));
    *(int *)((char *)v11 + 218) = -1;
    v11 += 56;
    v12 += 224;
    v13 += 224;
  }
  while (v11 != &v27);
  *(_DWORD *)uint64_t buf = *(_DWORD *)(v4 + 880) != 0;
  memcpy(v26, *(const void **)(a1 + 16), sizeof(v26));
  sub_100103240();
  if ((sub_10073C990() & 1) != 0 || (sub_100103240(), __n128 result = (void *)sub_10073C6AC(), result))
  {
    __n128 result = *(void **)(a2 + 32);
    if (result)
    {
      int v28 = off_10233E368;
      *(void *)&v34[2] = &v28;
      sub_1017FFC6C((uint64_t)result, 48, (uint64_t)buf, 34, (uint64_t)&v28);
      return sub_10180115C(&v28);
    }
  }
  return result;
}

void sub_1017FFC04(_Unwind_Exception *a1)
{
  sub_10180115C((void *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1017FFC20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017FFC60()
{
}

void *sub_1017FFC6C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  memset(v11, 0, 512);
  sub_1018EA3E0(a3, (uint64_t)v11);
  sub_101800FFC((uint64_t)v10, a5);
  sub_1017FFD74(a1, a2, (char *)v11, a4, (uint64_t)v10);
  return sub_10180115C(v10);
}

void sub_1017FFD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1017FFD74(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    uint64_t v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D238((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        LOWORD(v37) = 1024;
        *(_DWORD *)((char *)&v37 + 2) = (v18 >> 15) & 0x3FF;
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_101800308;
      v26[3] = &unk_10233E2F8;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_101800FFC((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_10180115C(v27);
    }
    else
    {
      uint64_t v37 = -1;
      int v38 = -1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v30 = 67240192;
        int v31 = v22;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1018002B4(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    uint64_t v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_101800E28;
    block[3] = &unk_10233E328;
    int v25 = a2;
    sub_101800FFC((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_10180115C(v24);
  }
}

void sub_101800270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018002B4(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_101800308(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  *((void *)&v32 + 1) = -1;
  int v33 = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v52 = Gmid;
    __int16 v53 = 1024;
    unsigned int v54 = v7;
    __int16 v55 = 1024;
    int v56 = (v8 >> 15) & 0x3FF;
    __int16 v57 = 1024;
    unsigned int v58 = v9;
    __int16 v59 = 1024;
    unsigned int v60 = v9 >> 26;
    __int16 v61 = 1024;
    int v62 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v39 = 67110400;
    int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v23 >> 26;
    __int16 v43 = 1024;
    int v44 = (v24 >> 15) & 0x3FF;
    __int16 v45 = 1024;
    unsigned int v46 = v25;
    __int16 v47 = 1024;
    unsigned int v48 = v25 >> 26;
    __int16 v49 = 1024;
    int v50 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v52 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189E5C0(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  unsigned int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101800DEC;
  block[3] = &unk_10233E2C8;
  sub_101800FFC((uint64_t)v35, a1 + 40);
  int v36 = v14;
  long long v37 = v32;
  int v38 = v33;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67240192;
      int v40 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_10180115C(v35);
}

void sub_101800DC8(_Unwind_Exception *a1)
{
  sub_10180115C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101800DEC(uint64_t a1)
{
  return sub_1018002B4(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_101800E00(uint64_t a1, uint64_t a2)
{
  return sub_101800FFC(a1 + 32, a2 + 32);
}

void *sub_101800E0C(uint64_t a1)
{
  return sub_10180115C((void *)(a1 + 32));
}

uint64_t sub_101800E14(uint64_t a1, uint64_t a2)
{
  return sub_101800FFC(a1 + 40, a2 + 40);
}

void *sub_101800E20(uint64_t a1)
{
  return sub_10180115C((void *)(a1 + 40));
}

uint64_t sub_101800E28(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1018002B4(a1 + 32, 3);
}

uint64_t sub_101800FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101801098()
{
}

void *sub_1018010AC()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233E368;
  return result;
}

void sub_1018010E4(uint64_t a1, void *a2)
{
  *a2 = off_10233E368;
}

uint64_t sub_101801110(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101801150()
{
}

void *sub_10180115C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1018011E4()
{
}

__n128 sub_1018011F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233E408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101801244(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233E408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_101801274(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v4 = *(unsigned int **)(a1 + 16);
  v13[0] = *(_DWORD *)(v5 + 880) != 0;
  v13[1] = *v4;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v5 + 880);
    int v8 = **(_DWORD **)(a1 + 16);
    *(_DWORD *)uint64_t buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v7;
    __int16 v19 = 1024;
    int v20 = v7;
    __int16 v21 = 1024;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Fta1xAssistanceNeeded,instance,%d,networkType,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v10 = *(_DWORD *)(v5 + 880);
    int v11 = **(_DWORD **)(a1 + 16);
    v13[2] = 67109632;
    v13[3] = v10;
    __int16 v14 = 1024;
    unsigned int v15 = v10;
    __int16 v16 = 1024;
    int v17 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::handleFta1xAssistanceNeeded(const gnss::Emergency::Cplane::CellFTAssistanceRequest &)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_100103240();
  __n128 result = (void *)sub_10073C990();
  if (result)
  {
    __n128 result = *(void **)(a2 + 32);
    if (result)
    {
      *(void *)uint64_t buf = off_10233E508;
      unsigned int v23 = buf;
      sub_101801544((uint64_t)result, 58, v13, 44, (uint64_t)buf);
      return sub_1018029DC(buf);
    }
  }
  return result;
}

void sub_1018014DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1018029DC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018014F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101801538()
{
}

void *sub_101801544(uint64_t a1, int a2, unsigned int *a3, int a4, uint64_t a5)
{
  uint64_t v10 = sub_1018EA73C(a3);
  sub_10180287C((uint64_t)v11, a5);
  sub_101801600(a1, a2, (char *)&v10, a4, (uint64_t)v11);
  return sub_1018029DC(v11);
}

void sub_1018015E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1018029DC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101801600(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    uint64_t v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D44C((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v36 = 1024;
        int v37 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        LODWORD(v30) = 67109376;
        HIDWORD(v30) = v17 >> 26;
        __int16 v31 = 1024;
        int v32 = (v18 >> 15) & 0x3FF;
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_101801B98;
      v26[3] = &unk_10233E498;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_10180287C((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_1018029DC(v27);
    }
    else
    {
      uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      unsigned int v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v33 = 67240192;
        int v34 = v22;
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_101801B44(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    __int16 v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1018026AC;
    block[3] = &unk_10233E4C8;
    int v25 = a2;
    sub_10180287C((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_1018029DC(v24);
  }
}

void sub_101801B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101801B44(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_101801B98(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v50 = Gmid;
    __int16 v51 = 1024;
    unsigned int v52 = v7;
    __int16 v53 = 1024;
    int v54 = (v8 >> 15) & 0x3FF;
    __int16 v55 = 1024;
    unsigned int v56 = v9;
    __int16 v57 = 1024;
    unsigned int v58 = v9 >> 26;
    __int16 v59 = 1024;
    int v60 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v37 = 67110400;
    int v38 = v22;
    __int16 v39 = 1024;
    unsigned int v40 = v23 >> 26;
    __int16 v41 = 1024;
    int v42 = (v24 >> 15) & 0x3FF;
    __int16 v43 = 1024;
    unsigned int v44 = v25;
    __int16 v45 = 1024;
    unsigned int v46 = v25 >> 26;
    __int16 v47 = 1024;
    int v48 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v50 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = 67109120;
      int v38 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v37) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189EC90(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      __int16 v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v37) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v37) = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  unsigned int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101802670;
  block[3] = &unk_10233E468;
  sub_10180287C((uint64_t)v34, a1 + 40);
  int v35 = v14;
  uint64_t v36 = v32;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v50 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = 67240192;
      int v38 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v50 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v37 = 67109120;
      int v38 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_1018029DC(v34);
}

void sub_10180264C(_Unwind_Exception *a1)
{
  sub_1018029DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101802670(uint64_t a1)
{
  return sub_101801B44(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_101802684(uint64_t a1, uint64_t a2)
{
  return sub_10180287C(a1 + 32, a2 + 32);
}

void *sub_101802690(uint64_t a1)
{
  return sub_1018029DC((void *)(a1 + 32));
}

uint64_t sub_101802698(uint64_t a1, uint64_t a2)
{
  return sub_10180287C(a1 + 40, a2 + 40);
}

void *sub_1018026A4(uint64_t a1)
{
  return sub_1018029DC((void *)(a1 + 40));
}

uint64_t sub_1018026AC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_101801B44(a1 + 32, 3);
}

uint64_t sub_10180287C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101802918()
{
}

void *sub_10180292C()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233E508;
  return result;
}

void sub_101802964(uint64_t a1, void *a2)
{
  *a2 = off_10233E508;
}

uint64_t sub_101802990(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018029D0()
{
}

void *sub_1018029DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101802A64()
{
}

void *sub_101802A78(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233E5A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101802AC0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233E5A8;
  a2[1] = v2;
  return result;
}

void *sub_101802AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 880);
    int v6 = *(_DWORD **)(v3 + 2304);
    int v8 = v6[3];
    int v7 = v6[4];
    int v9 = v6[2];
    LODWORD(v6) = *v6;
    *(_DWORD *)uint64_t buf = 67110400;
    int v28 = v5;
    LOWORD(v29[0]) = 1024;
    *(_DWORD *)((char *)v29 + 2) = v5;
    HIWORD(v29[1]) = 1024;
    v29[2] = v7;
    LOWORD(v29[3]) = 1024;
    *(_DWORD *)((char *)&v29[3] + 2) = v9;
    HIWORD(v29[4]) = 1024;
    v29[5] = v8;
    LOWORD(v29[6]) = 1024;
    *(_DWORD *)((char *)&v29[6] + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v12 = *(_DWORD *)(v3 + 880);
    unsigned int v13 = *(_DWORD **)(v3 + 2304);
    int v15 = v13[3];
    int v14 = v13[4];
    int v16 = v13[2];
    LODWORD(v13) = *v13;
    LODWORD(v18) = 67110400;
    HIDWORD(v18) = v12;
    __int16 v19 = 1024;
    int v20 = v12;
    __int16 v21 = 1024;
    int v22 = v14;
    __int16 v23 = 1024;
    *(_DWORD *)unsigned int v24 = v16;
    *(_WORD *)&void v24[4] = 1024;
    *(_DWORD *)&v24[6] = v15;
    __int16 v25 = 1024;
    int v26 = (int)v13;
    unsigned int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  *(_DWORD *)uint64_t buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v29, *(const void **)(v3 + 2304), sizeof(v29));
  sub_100103240();
  if (((sub_10073C990() & 1) != 0 || (sub_100103240(), sub_10073C6AC()))
    && (uint64_t v10 = *(void *)(a2 + 32)) != 0)
  {
    unsigned int v18 = off_10233E618;
    *(void *)&v24[2] = &v18;
    sub_1017FDE98(v10, 49, buf, 35, (uint64_t)&v18);
    return sub_1017FF38C(&v18);
  }
  else
  {
    sub_100103240();
    __n128 result = (void *)sub_10073CCBC();
    if (result)
    {
      __n128 result = *(void **)(a2 + 40);
      if (result) {
        return sub_1017BD0B8((uint64_t)result, buf);
      }
    }
  }
  return result;
}

void sub_101802DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017FF38C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101802DDC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101802E1C()
{
}

void sub_101802E2C()
{
}

void *sub_101802E40()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233E618;
  return result;
}

void sub_101802E78(uint64_t a1, void *a2)
{
  *a2 = off_10233E618;
}

uint64_t sub_101802EA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101802EE4()
{
}

void sub_101802EF4()
{
}

void *sub_101802F08(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233E6A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101802F50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233E6A8;
  a2[1] = v2;
  return result;
}

void *sub_101802F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v35 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane, Measurement report to ICE", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v17 = *(_DWORD *)(v3 + 880);
    LODWORD(v25) = 67109120;
    HIDWORD(v25) = v17;
    unsigned int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v3 + 880);
    int v8 = *(_DWORD **)(v3 + 2320);
    int v10 = v8[3];
    int v9 = v8[4];
    int v11 = v8[2];
    LODWORD(v8) = *v8;
    *(_DWORD *)uint64_t buf = 67110400;
    int v35 = v7;
    LOWORD(v36[0]) = 1024;
    *(_DWORD *)((char *)v36 + 2) = v7;
    HIWORD(v36[0]) = 1024;
    LODWORD(v36[1]) = v9;
    WORD2(v36[1]) = 1024;
    *(_DWORD *)((char *)&v36[1] + 6) = v11;
    WORD1(v36[2]) = 1024;
    HIDWORD(v36[2]) = v10;
    LOWORD(v36[3]) = 1024;
    *(_DWORD *)((char *)&v36[3] + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v19 = *(_DWORD *)(v3 + 880);
    int v20 = *(_DWORD **)(v3 + 2320);
    int v22 = v20[3];
    int v21 = v20[4];
    int v23 = v20[2];
    LODWORD(v20) = *v20;
    LODWORD(v25) = 67110400;
    HIDWORD(v25) = v19;
    __int16 v26 = 1024;
    int v27 = v19;
    __int16 v28 = 1024;
    int v29 = v21;
    __int16 v30 = 1024;
    *(_DWORD *)int v31 = v23;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v22;
    __int16 v32 = 1024;
    int v33 = (int)v20;
    unsigned int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  LODWORD(v36[0]) = 0;
  memset(&v36[1], 255, 20);
  uint64_t v12 = 36;
  BYTE4(v36[0]) = 0;
  do
  {
    unsigned int v13 = &buf[v12];
    *(_WORD *)unsigned int v13 = 0x7FFF;
    *(_DWORD *)(v13 + 2) = -1;
    *(_DWORD *)(v13 + 5) = -1;
    *(void *)(v13 + 12) = 0xFFFFFFFF00000004;
    v13[20] = -1;
    v12 += 24;
  }
  while (v13 + 24 != (uint8_t *)((char *)&v36[51] + 4));
  HIDWORD(v36[51]) = 0;
  v36[52] = -1;
  LODWORD(v36[53]) = 33619967;
  WORD2(v36[53]) = -1;
  HIDWORD(v36[56]) = -1;
  LOBYTE(v36[57]) = -1;
  memset(&v36[54], 255, 17);
  BYTE4(v36[57]) = -1;
  *(_DWORD *)((char *)&v36[58] + 7) = -1;
  v36[58] = -1;
  LODWORD(v36[60]) = 4;
  *(void *)((char *)&v36[60] + 4) = -1;
  LODWORD(v36[62]) = 0;
  HIDWORD(v36[65]) = -1;
  v36[66] = -1;
  memset(&v36[63], 255, 18);
  LOBYTE(v36[67]) = -1;
  HIDWORD(v36[68]) = -1;
  v36[69] = -1;
  *(void *)((char *)&v36[67] + 2) = -1;
  LOWORD(v36[70]) = -1;
  HIDWORD(v36[70]) = -1;
  LOWORD(v36[71]) = -1;
  LODWORD(v36[74]) = -1;
  *(void *)((char *)&v36[71] + 4) = -1;
  *(void *)((char *)&v36[72] + 4) = -1;
  WORD2(v36[73]) = -1;
  WORD2(v36[74]) = -129;
  LODWORD(v36[75]) = -1;
  LOBYTE(v36[76]) = -1;
  HIDWORD(v36[76]) = 5;
  LOWORD(v36[77]) = -1;
  BYTE2(v36[77]) = -1;
  uint64_t v14 = 628;
  do
  {
    int v15 = &buf[v14];
    *(_DWORD *)int v15 = -32769;
    v15[4] = -1;
    *((void *)v15 + 1) = 0xFF00000004;
    *((_WORD *)v15 + 8) = -1;
    *((_DWORD *)v15 + 5) = -1;
    v14 += 24;
  }
  while (v15 + 24 != (uint8_t *)((char *)&v36[173] + 4));
  LODWORD(v36[174]) = -1;
  BYTE4(v36[174]) = 0;
  *(_DWORD *)uint64_t buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v36, *(const void **)(v3 + 2320), 0x575uLL);
  sub_100103240();
  __n128 result = (void *)sub_10073C990();
  if (result)
  {
    __n128 result = *(void **)(a2 + 32);
    if (result)
    {
      __int16 v25 = off_10233E718;
      *(void *)&v31[2] = &v25;
      sub_1017FC79C((uint64_t)result, 51, (uint64_t)buf, 37, (uint64_t)&v25);
      return sub_1017FDC8C(&v25);
    }
  }
  return result;
}

void sub_1018034DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017FDC8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018034F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101803538()
{
}

void sub_101803548()
{
}

void *sub_10180355C()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233E718;
  return result;
}

void sub_101803594(uint64_t a1, void *a2)
{
  *a2 = off_10233E718;
}

uint64_t sub_1018035C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101803600()
{
}

void sub_101803610()
{
}

void *sub_101803624(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233E7A8;
  result[1] = v3;
  return result;
}

uint64_t sub_10180366C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233E7A8;
  a2[1] = v2;
  return result;
}

void *sub_101803698(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 880);
    int v6 = *(_DWORD **)(v3 + 2304);
    int v8 = v6[3];
    int v7 = v6[4];
    int v9 = v6[2];
    LODWORD(v6) = *v6;
    *(_DWORD *)uint64_t buf = 67110400;
    int v27 = v5;
    LOWORD(v28[0]) = 1024;
    *(_DWORD *)((char *)v28 + 2) = v5;
    HIWORD(v28[1]) = 1024;
    _DWORD v28[2] = v7;
    LOWORD(v28[3]) = 1024;
    *(_DWORD *)((char *)&v28[3] + 2) = v9;
    HIWORD(v28[4]) = 1024;
    v28[5] = v8;
    LOWORD(v28[6]) = 1024;
    *(_DWORD *)((char *)&v28[6] + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = *(_DWORD *)(v3 + 880);
    uint64_t v12 = *(_DWORD **)(v3 + 2304);
    int v14 = v12[3];
    int v13 = v12[4];
    int v15 = v12[2];
    LODWORD(v12) = *v12;
    LODWORD(v17) = 67110400;
    HIDWORD(v17) = v11;
    __int16 v18 = 1024;
    int v19 = v11;
    __int16 v20 = 1024;
    int v21 = v13;
    __int16 v22 = 1024;
    *(_DWORD *)int v23 = v15;
    *(_WORD *)&void v23[4] = 1024;
    *(_DWORD *)&v23[6] = v14;
    __int16 v24 = 1024;
    int v25 = (int)v12;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  *(_DWORD *)uint64_t buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v28, *(const void **)(v3 + 2304), sizeof(v28));
  sub_100103240();
  if ((sub_10073C990() & 1) != 0 || (sub_100103240(), __n128 result = (void *)sub_10073C6AC(), result))
  {
    __n128 result = *(void **)(a2 + 32);
    if (result)
    {
      int v17 = off_10233E818;
      *(void *)&v23[2] = &v17;
      sub_1017FDE98((uint64_t)result, 49, buf, 35, (uint64_t)&v17);
      return sub_1017FF38C(&v17);
    }
  }
  return result;
}

void sub_10180394C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017FF38C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101803968(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018039A8()
{
}

void sub_1018039B8()
{
}

void *sub_1018039CC()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233E818;
  return result;
}

void sub_101803A04(uint64_t a1, void *a2)
{
  *a2 = off_10233E818;
}

uint64_t sub_101803A30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101803A70()
{
}

void sub_101803A80()
{
}

void *sub_101803A94(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233E8A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101803ADC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233E8A8;
  a2[1] = v2;
  return result;
}

void *sub_101803B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane, Measurement report to ICE", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v11 = *(_DWORD *)(v3 + 880);
    LODWORD(v13[0]) = 67109120;
    HIDWORD(v13[0]) = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  LODWORD(v16[0]) = 0;
  memset(&v16[1], 255, 20);
  uint64_t v6 = 36;
  BYTE4(v16[0]) = 0;
  do
  {
    int v7 = &buf[v6];
    *(_WORD *)int v7 = 0x7FFF;
    *(_DWORD *)(v7 + 2) = -1;
    *(_DWORD *)(v7 + 5) = -1;
    *(void *)(v7 + 12) = 0xFFFFFFFF00000004;
    v7[20] = -1;
    v6 += 24;
  }
  while (v7 + 24 != (uint8_t *)((char *)&v16[51] + 4));
  HIDWORD(v16[51]) = 0;
  v16[52] = -1;
  LODWORD(v16[53]) = 33619967;
  WORD2(v16[53]) = -1;
  HIDWORD(v16[56]) = -1;
  LOBYTE(v16[57]) = -1;
  memset(&v16[54], 255, 17);
  BYTE4(v16[57]) = -1;
  *(_DWORD *)((char *)&v16[58] + 7) = -1;
  v16[58] = -1;
  LODWORD(v16[60]) = 4;
  *(void *)((char *)&v16[60] + 4) = -1;
  LODWORD(v16[62]) = 0;
  HIDWORD(v16[65]) = -1;
  v16[66] = -1;
  memset(&v16[63], 255, 18);
  LOBYTE(v16[67]) = -1;
  HIDWORD(v16[68]) = -1;
  v16[69] = -1;
  *(void *)((char *)&v16[67] + 2) = -1;
  LOWORD(v16[70]) = -1;
  HIDWORD(v16[70]) = -1;
  LOWORD(v16[71]) = -1;
  LODWORD(v16[74]) = -1;
  *(void *)((char *)&v16[71] + 4) = -1;
  *(void *)((char *)&v16[72] + 4) = -1;
  WORD2(v16[73]) = -1;
  WORD2(v16[74]) = -129;
  LODWORD(v16[75]) = -1;
  LOBYTE(v16[76]) = -1;
  HIDWORD(v16[76]) = 5;
  LOWORD(v16[77]) = -1;
  BYTE2(v16[77]) = -1;
  uint64_t v8 = 628;
  do
  {
    int v9 = &buf[v8];
    *(_DWORD *)int v9 = -32769;
    v9[4] = -1;
    *((void *)v9 + 1) = 0xFF00000004;
    *((_WORD *)v9 + 8) = -1;
    *((_DWORD *)v9 + 5) = -1;
    v8 += 24;
  }
  while (v9 + 24 != (uint8_t *)((char *)&v16[173] + 4));
  LODWORD(v16[174]) = -1;
  BYTE4(v16[174]) = 0;
  *(_DWORD *)uint64_t buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v16, *(const void **)(v3 + 2320), 0x575uLL);
  sub_100103240();
  __n128 result = (void *)sub_10073C990();
  if (result)
  {
    __n128 result = *(void **)(a2 + 32);
    if (result)
    {
      v13[0] = off_10233E918;
      v13[3] = v13;
      sub_1017FC79C((uint64_t)result, 51, (uint64_t)buf, 37, (uint64_t)v13);
      return sub_1017FDC8C(v13);
    }
  }
  return result;
}

void sub_101803EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017FDC8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101803EBC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101803EFC()
{
}

void sub_101803F0C()
{
}

void *sub_101803F20()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233E918;
  return result;
}

void sub_101803F58(uint64_t a1, void *a2)
{
  *a2 = off_10233E918;
}

uint64_t sub_101803F84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101803FC4()
{
}

void sub_101803FD4()
{
}

__n128 sub_101803FE8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233E9A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101804034(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233E9A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_101804064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_10195BF40(a2, *(_DWORD **)(a1 + 16));
}

uint64_t sub_101804234(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101804274()
{
}

void sub_101804284()
{
}

__n128 sub_101804298(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233EA28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1018042E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233EA28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_101804314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceReferenceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_10195BAB8(a2, *(void *)(a1 + 16));
}

uint64_t sub_1018044E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101804524()
{
}

void sub_101804534()
{
}

__n128 sub_101804548(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233EAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101804594(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233EAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1018045C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_10195BCFC(a2, *(unsigned __int8 **)(a1 + 16));
}

uint64_t sub_101804794(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018047D4()
{
}

void sub_1018047E4()
{
}

__n128 sub_1018047F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233EB28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101804844(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233EB28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_101804874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_10195C184(a2, *(void *)(a1 + 16));
}

uint64_t sub_101804A44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101804A84()
{
}

void sub_101804A94()
{
}

__n128 sub_101804AA8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233EBA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101804AF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233EBA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_101804B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,device.injectFt1xAssistance()", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceFTA1x(const gnss::Emergency::Cplane::CellFTAssistance &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_10195C3C8(a2, *(void *)(a1 + 16));
}

uint64_t sub_101804CF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101804D34()
{
}

void sub_101804D40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10233EC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101804D60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10233EC28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101804DBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10233EC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101804DDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10233EC78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101804E38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10233ECC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101804E58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10233ECC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101804EB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10233ED18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101804ED4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10233ED18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101804F30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10233ED68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101804F50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10233ED68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101804FAC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      sub_1017F0504(a3, *((_DWORD *)v5 + 8));
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_101805030()
{
}

void *sub_101805044(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233EDB8;
  result[1] = v3;
  return result;
}

uint64_t sub_10180508C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233EDB8;
  a2[1] = v2;
  return result;
}

void sub_1018050B8(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  if ((sub_10073C990() & 1) != 0 || (sub_100103240(), sub_10073C6AC()))
  {
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      int v5 = *(unsigned int **)(a1 + 8);
      unsigned int v6 = *v5;
      BOOL v7 = v5[10] != 0;
      BOOL v8 = v5[12] != 0;
      BOOL v9 = v5[13] != 0;
      sub_101994858(v4, v6, v7, v8, v9);
    }
  }
}

uint64_t sub_101805140(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101805180()
{
}

void sub_101805190()
{
}

__n128 sub_1018051A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10233EE38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1018051F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233EE38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_101805220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  **(_DWORD **)(a1 + 8) = *(_DWORD *)(v4 + 880) != 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v4 + 880);
    BOOL v7 = *(int **)(a1 + 8);
    int v9 = v7[3];
    int v8 = v7[4];
    int v10 = *v7;
    uint64_t v12 = v7 + 1;
    LODWORD(v7) = v7[1];
    int v11 = v12[1];
    *(_DWORD *)uint64_t buf = 67110400;
    *(_DWORD *)&uint8_t buf[4] = v6;
    __int16 v17 = 1024;
    int v18 = v10;
    __int16 v19 = 1024;
    int v20 = v8;
    __int16 v21 = 1024;
    *(_DWORD *)__int16 v22 = v11;
    *(_WORD *)&v22[4] = 1024;
    *(_DWORD *)&v22[6] = v9;
    __int16 v23 = 1024;
    int v24 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,reportWlanMeasurementsToModem,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::reportWlanMeasurements(gnss::Emergency::Cplane::WlanMeasReport &)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_100103240();
  __n128 result = (void *)sub_10073C990();
  if (result)
  {
    __n128 result = *(void **)(a2 + 32);
    if (result)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      *(void *)uint64_t buf = off_10233EF38;
      *(void *)&v22[2] = buf;
      sub_101805528((uint64_t)result, 60, v14, 46, (uint64_t)buf);
      return sub_101806A18(buf);
    }
  }
  return result;
}

void sub_1018054C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_101806A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018054DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10180551C()
{
}

void *sub_101805528(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  memset(v10, 0, 512);
  sub_1018ED7C8(a3, v10);
  sub_1018068B8((uint64_t)v11, a5);
  sub_101805630(a1, a2, v10, a4, (uint64_t)v11);
  return sub_101806A18(v11);
}

void sub_101805614(_Unwind_Exception *a1)
{
  sub_101806A18((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_101805630(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    int v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D4A8((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        LOWORD(v37) = 1024;
        *(_DWORD *)((char *)&v37 + 2) = (v18 >> 15) & 0x3FF;
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_101805BC4;
      v26[3] = &unk_10233EEC8;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_1018068B8((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_101806A18(v27);
    }
    else
    {
      uint64_t v37 = -1;
      int v38 = -1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v30 = 67240192;
        int v31 = v22;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_101805B70(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    uint64_t v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1018066E4;
    block[3] = &unk_10233EEF8;
    int v25 = a2;
    sub_1018068B8((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_101806A18(v24);
  }
}

void sub_101805B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101805B70(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_101805BC4(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  *((void *)&v32 + 1) = -1;
  int v33 = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v52 = Gmid;
    __int16 v53 = 1024;
    unsigned int v54 = v7;
    __int16 v55 = 1024;
    int v56 = (v8 >> 15) & 0x3FF;
    __int16 v57 = 1024;
    unsigned int v58 = v9;
    __int16 v59 = 1024;
    unsigned int v60 = v9 >> 26;
    __int16 v61 = 1024;
    int v62 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v39 = 67110400;
    int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v23 >> 26;
    __int16 v43 = 1024;
    int v44 = (v24 >> 15) & 0x3FF;
    __int16 v45 = 1024;
    unsigned int v46 = v25;
    __int16 v47 = 1024;
    unsigned int v48 = v25 >> 26;
    __int16 v49 = 1024;
    int v50 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v52 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189F23C(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  unsigned int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018066A8;
  block[3] = &unk_10233EE98;
  sub_1018068B8((uint64_t)v35, a1 + 40);
  int v36 = v14;
  long long v37 = v32;
  int v38 = v33;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67240192;
      int v40 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_101806A18(v35);
}

void sub_101806684(_Unwind_Exception *a1)
{
  sub_101806A18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018066A8(uint64_t a1)
{
  return sub_101805B70(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_1018066BC(uint64_t a1, uint64_t a2)
{
  return sub_1018068B8(a1 + 32, a2 + 32);
}

void *sub_1018066C8(uint64_t a1)
{
  return sub_101806A18((void *)(a1 + 32));
}

uint64_t sub_1018066D0(uint64_t a1, uint64_t a2)
{
  return sub_1018068B8(a1 + 40, a2 + 40);
}

void *sub_1018066DC(uint64_t a1)
{
  return sub_101806A18((void *)(a1 + 40));
}

uint64_t sub_1018066E4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_101805B70(a1 + 32, 3);
}

uint64_t sub_1018068B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101806954()
{
}

void *sub_101806968()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233EF38;
  return result;
}

void sub_1018069A0(uint64_t a1, void *a2)
{
  *a2 = off_10233EF38;
}

uint64_t sub_1018069CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101806A0C()
{
}

void *sub_101806A18(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101806AA0()
{
}

void *sub_101806AB4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233EFD8;
  result[1] = v3;
  return result;
}

uint64_t sub_101806AFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233EFD8;
  a2[1] = v2;
  return result;
}

void *sub_101806B28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 880);
    int v6 = *(_DWORD **)(v3 + 2336);
    int v8 = v6[3];
    int v7 = v6[4];
    int v9 = v6[2];
    LODWORD(v6) = *v6;
    *(_DWORD *)uint64_t buf = 67110400;
    LODWORD(v29[0]) = v5;
    WORD2(v29[0]) = 1024;
    *(_DWORD *)((char *)v29 + 6) = v5;
    WORD1(v29[1]) = 1024;
    HIDWORD(v29[1]) = v7;
    LOWORD(v29[2]) = 1024;
    *(_DWORD *)((char *)&v29[2] + 2) = v9;
    HIWORD(v29[2]) = 1024;
    LODWORD(v29[3]) = v8;
    WORD2(v29[3]) = 1024;
    *(_DWORD *)((char *)&v29[3] + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,reportMeasurementsWithEstimate,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v13 = *(_DWORD *)(v3 + 880);
    int v14 = *(_DWORD **)(v3 + 2336);
    int v16 = v14[3];
    int v15 = v14[4];
    int v17 = v14[2];
    LODWORD(v14) = *v14;
    LODWORD(v19) = 67110400;
    HIDWORD(v19) = v13;
    __int16 v20 = 1024;
    int v21 = v13;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    *(_DWORD *)unsigned int v25 = v17;
    *(_WORD *)&void v25[4] = 1024;
    *(_DWORD *)&v25[6] = v16;
    __int16 v26 = 1024;
    int v27 = (int)v14;
    unsigned int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrCplane::reportMeasurementsWithEstimate()::(anonymous class)::operator()(CLModemController &) const", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  LODWORD(v29[0]) = 0;
  memset(&v29[1], 255, 20);
  uint64_t v10 = 32;
  BYTE4(v29[0]) = 0;
  do
  {
    int v11 = &buf[v10];
    *(_WORD *)int v11 = 0x7FFF;
    *(_DWORD *)(v11 + 2) = -1;
    *(_DWORD *)(v11 + 5) = -1;
    *(void *)(v11 + 12) = 0xFFFFFFFF00000004;
    v11[20] = -1;
    v10 += 24;
  }
  while (v11 + 24 != (uint8_t *)((char *)&v29[51] + 4));
  *(void *)((char *)&v29[51] + 4) = 0xFFFFFFFF00000000;
  *(void *)((char *)&v29[52] + 4) = 0x200FFFFFFFFFFFFLL;
  WORD2(v29[53]) = -1;
  HIDWORD(v29[56]) = -1;
  LOBYTE(v29[57]) = -1;
  memset(&v29[54], 255, 17);
  BYTE4(v29[57]) = -1;
  v29[58] = -1;
  *(_DWORD *)((char *)&v29[58] + 7) = -1;
  LODWORD(v29[61]) = -1;
  *(_DWORD *)((char *)&v29[60] + 3) = -1;
  *(void *)((char *)&v29[59] + 4) = -1;
  BYTE4(v29[61]) = 0;
  *(_DWORD *)((char *)&v29[61] + 6) = -1;
  BYTE2(v29[62]) = -1;
  BYTE4(v29[62]) = 0;
  LODWORD(v29[63]) = -1;
  WORD2(v29[63]) = -1;
  LOBYTE(v29[64]) = 0;
  WORD1(v29[64]) = -1;
  BYTE4(v29[64]) = -1;
  LODWORD(v29[65]) = 0;
  BYTE4(v29[65]) = 0;
  *(_DWORD *)uint64_t buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v29, *(const void **)(v3 + 2336), 0x20DuLL);
  sub_100103240();
  __n128 result = (void *)sub_10073C990();
  if (result)
  {
    __n128 result = *(void **)(a2 + 32);
    if (result)
    {
      BOOL v19 = off_10233F0D8;
      *(void *)&v25[2] = &v19;
      sub_101806F20((uint64_t)result, 61, (uint64_t)buf, 47, (uint64_t)&v19);
      return sub_101808410(&v19);
    }
  }
  return result;
}

void sub_101806EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101808410((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101806ED4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101806F14()
{
}

void *sub_101806F20(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  memset(v10, 0, 512);
  sub_1018EDCB8(a3, (uint64_t)v10);
  sub_1018082B0((uint64_t)v11, a5);
  sub_101807028(a1, a2, (uint64_t)v10, a4, (uint64_t)v11);
  return sub_101808410(v11);
}

void sub_10180700C(_Unwind_Exception *a1)
{
  sub_101808410((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_101807028(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    uint64_t v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D740((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        LOWORD(v37) = 1024;
        *(_DWORD *)((char *)&v37 + 2) = (v18 >> 15) & 0x3FF;
        BOOL v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_1018075BC;
      v26[3] = &unk_10233F068;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_1018082B0((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_101808410(v27);
    }
    else
    {
      uint64_t v37 = -1;
      int v38 = -1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233DBD8);
        }
        int v30 = 67240192;
        int v31 = v22;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_101807568(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1018080DC;
    block[3] = &unk_10233F098;
    int v25 = a2;
    sub_1018082B0((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_101808410(v24);
  }
}

void sub_101807524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101807568(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1018075BC(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  *((void *)&v32 + 1) = -1;
  int v33 = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v52 = Gmid;
    __int16 v53 = 1024;
    unsigned int v54 = v7;
    __int16 v55 = 1024;
    int v56 = (v8 >> 15) & 0x3FF;
    __int16 v57 = 1024;
    unsigned int v58 = v9;
    __int16 v59 = 1024;
    unsigned int v60 = v9 >> 26;
    __int16 v61 = 1024;
    int v62 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v39 = 67110400;
    int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v23 >> 26;
    __int16 v43 = 1024;
    int v44 = (v24 >> 15) & 0x3FF;
    __int16 v45 = 1024;
    unsigned int v46 = v25;
    __int16 v47 = 1024;
    unsigned int v48 = v25 >> 26;
    __int16 v49 = 1024;
    int v50 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v52 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189F2EC(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      LOWORD(v39) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  unsigned int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1018080A0;
  block[3] = &unk_10233F038;
  sub_1018082B0((uint64_t)v35, a1 + 40);
  int v36 = v14;
  long long v37 = v32;
  int v38 = v33;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    __int16 v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67240192;
      int v40 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233DBD8);
      }
      int v39 = 67109120;
      int v40 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_101808410(v35);
}

void sub_10180807C(_Unwind_Exception *a1)
{
  sub_101808410(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018080A0(uint64_t a1)
{
  return sub_101807568(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_1018080B4(uint64_t a1, uint64_t a2)
{
  return sub_1018082B0(a1 + 32, a2 + 32);
}

void *sub_1018080C0(uint64_t a1)
{
  return sub_101808410((void *)(a1 + 32));
}

uint64_t sub_1018080C8(uint64_t a1, uint64_t a2)
{
  return sub_1018082B0(a1 + 40, a2 + 40);
}

void *sub_1018080D4(uint64_t a1)
{
  return sub_101808410((void *)(a1 + 40));
}

uint64_t sub_1018080DC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_101807568(a1 + 32, 3);
}

uint64_t sub_1018082B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10180834C()
{
}

void *sub_101808360()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_10233F0D8;
  return result;
}

void sub_101808398(uint64_t a1, void *a2)
{
  *a2 = off_10233F0D8;
}

uint64_t sub_1018083C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101808404()
{
}

void *sub_101808410(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_1018084A8()
{
  uint64_t v2 = *(NSObject **)(v0 + 984);
  return os_signpost_enabled(v2);
}

void sub_1018084C0()
{
  sub_100857C1C();
  if (!v1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

#error "10180869C: call analysis failed (funcsize=74)"

#error "10180880C: call analysis failed (funcsize=72)"

#error "101808978: call analysis failed (funcsize=72)"

#error "101808AE4: call analysis failed (funcsize=72)"

#error "101808C50: call analysis failed (funcsize=72)"

#error "101808DC0: call analysis failed (funcsize=74)"

#error "101808F30: call analysis failed (funcsize=72)"

#error "10180909C: call analysis failed (funcsize=72)"

#error "101809208: call analysis failed (funcsize=72)"

#error "101809374: call analysis failed (funcsize=72)"

#error "1018094E0: call analysis failed (funcsize=72)"

#error "10180964C: call analysis failed (funcsize=72)"

#error "1018097B8: call analysis failed (funcsize=72)"

#error "101809928: call analysis failed (funcsize=74)"

#error "101809A98: call analysis failed (funcsize=72)"

#error "101809C04: call analysis failed (funcsize=72)"

#error "101809D70: call analysis failed (funcsize=72)"

#error "101809EDC: call analysis failed (funcsize=72)"

#error "10180A048: call analysis failed (funcsize=72)"

#error "10180A1B4: call analysis failed (funcsize=72)"

#error "10180A320: call analysis failed (funcsize=72)"

#error "10180A48C: call analysis failed (funcsize=72)"

#error "10180A5F8: call analysis failed (funcsize=72)"

#error "10180A764: call analysis failed (funcsize=72)"

#error "10180A8D0: call analysis failed (funcsize=72)"

#error "10180AA3C: call analysis failed (funcsize=72)"

#error "10180ABA8: call analysis failed (funcsize=72)"

#error "10180AD14: call analysis failed (funcsize=72)"

#error "10180AE80: call analysis failed (funcsize=72)"

#error "10180AFEC: call analysis failed (funcsize=72)"

#error "10180B158: call analysis failed (funcsize=72)"

#error "10180B2C4: call analysis failed (funcsize=72)"

#error "10180B430: call analysis failed (funcsize=72)"

#error "10180B59C: call analysis failed (funcsize=72)"

#error "10180B708: call analysis failed (funcsize=72)"

#error "10180B874: call analysis failed (funcsize=72)"

#error "10180B9E4: call analysis failed (funcsize=74)"

#error "10180BB54: call analysis failed (funcsize=72)"

#error "10180BCC0: call analysis failed (funcsize=72)"

#error "10180BE30: call analysis failed (funcsize=74)"

#error "10180BFA0: call analysis failed (funcsize=72)"

#error "10180C10C: call analysis failed (funcsize=72)"

#error "10180C278: call analysis failed (funcsize=72)"

#error "10180C3E4: call analysis failed (funcsize=72)"

#error "10180C550: call analysis failed (funcsize=72)"

#error "10180C6BC: call analysis failed (funcsize=71)"

#error "10180C820: call analysis failed (funcsize=71)"

#error "10180C984: call analysis failed (funcsize=71)"

#error "10180CAE8: call analysis failed (funcsize=71)"

#error "10180CC4C: call analysis failed (funcsize=71)"

void sub_10180CD38()
{
  sub_100857C1C();
  if (!v1) {
    dispatch_once(&qword_1024193D0, &stru_10233DBD8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233DBD8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

uint64_t sub_10180CE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_101810234((uint64_t)v20, a3);
  sub_1018102CC((uint64_t)v19, a4);
  sub_10180D218((void *)a1, (uint64_t)v20, (uint64_t)v19);
  sub_1018101B0(v19);
  sub_10181012C(v20);
  *(void *)a1 = off_10233F288;
  *(void *)(a1 + 80) = a2;
  sub_10084F794(a1 + 96, a5);
  *(void *)(a1 + 128) = 850045863;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 1018212795;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 7;
  *(_WORD *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 850045863;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 88) = dispatch_queue_create("com.apple.gpsd.sendq", 0);
  sub_1000C7F88(buf);
  int v16 = 0;
  int v9 = sub_10006EF84(*(uint64_t *)&buf[0], "GpsdResponseTimeout", &v16);
  uint64_t v10 = v16;
  if (!v9) {
    uint64_t v10 = 20000;
  }
  *(void *)(a1 + 256) = v10;
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  sub_10180D294(a1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  uint64_t v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 256);
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gpsdClient,Constructor,ResponseTimeoutMs,%lld", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v14 = *(void *)(a1 + 256);
    int v16 = 134217984;
    uint64_t v17 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGpsdClient::CLGpsdClient(dispatch_queue_t, ResponseCallback_t, IndicationCallback_t, ShutdownCallback_t)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return a1;
}

void sub_10180D198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::mutex::~mutex(v18);
  std::condition_variable::~condition_variable(v17);
  std::mutex::~mutex(v16);
  sub_10068280C(v15);
  sub_10180D4AC(v14);
  _Unwind_Resume(a1);
}

void *sub_10180D218(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &off_10233F308;
  uint64_t v5 = (uint64_t)(a1 + 5);
  sub_101810234((uint64_t)(a1 + 1), a2);
  sub_1018102CC(v5, a3);
  return a1;
}

void sub_10180D280(_Unwind_Exception *a1)
{
  sub_10181012C(v1);
  _Unwind_Resume(a1);
}

void sub_10180D294(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsdClient,initXPCConnection", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    __int16 v6 = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::initXPCConnection()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 265));
  mach_service = xpc_connection_create_mach_service("com.apple.gpsd", *(dispatch_queue_t *)(a1 + 80), 0);
  *(void *)(a1 + 72) = mach_service;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10180D6F0;
  handler[3] = &unk_1022C9C78;
  handler[4] = a1;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 72));
  sub_10180D504(a1);
}

void *sub_10180D4AC(void *a1)
{
  *a1 = &off_10233F308;
  uint64_t v2 = a1 + 1;
  sub_1018101B0(a1 + 5);
  sub_10181012C(v2);
  return a1;
}

void sub_10180D504(uint64_t a1)
{
  uint64_t v2 = sub_101877458();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsdClient,sendGpsdConnectionMessage,%{public}llu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::sendGpsdConnectionMessage()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "connection_ns", v2);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), v4);
  xpc_release(v4);
}

void sub_10180D6F0(uint64_t a1, void *a2)
{
}

void sub_10180D6F8(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    __int16 v6 = "CONNECTION_INVALID";
    uint64_t v7 = "DEFAULT";
    if (object == &_xpc_error_termination_imminent) {
      uint64_t v7 = "TERMINATION_IMMINENT";
    }
    if (object != &_xpc_error_connection_invalid) {
      __int16 v6 = v7;
    }
    if (object == &_xpc_error_connection_interrupted) {
      uint64_t v8 = "CONNECTION_INTERRUPTED";
    }
    else {
      uint64_t v8 = v6;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 136446466;
      __int16 v20 = v8;
      __int16 v21 = 2080;
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsdClient,XPC_ERROR_%{public}s,ErrorDesc,%s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233F328);
      }
      *(_DWORD *)length = 136446466;
      *(void *)&length[4] = v8;
      __int16 v17 = 2080;
      unsigned int v18 = xpc_dictionary_get_string(object, _xpc_error_key_description);
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (object == &_xpc_error_connection_interrupted)
    {
      sub_10180E1B0(a1);
    }
    else if (object == &_xpc_error_termination_imminent)
    {
      sub_10180E028();
    }
    else if (object == &_xpc_error_connection_invalid)
    {
      sub_10180E37C(a1);
    }
    return;
  }
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    *(void *)length = 0;
    if (xpc_dictionary_get_data(object, "gpsdResponse", (size_t *)length)) {
      operator new();
    }
    size_t v15 = 0;
    if (xpc_dictionary_get_data(object, "gpsdIndication", &v15)) {
      operator new();
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsdClient,#Warning,Received XPC dictionary without gpsdResponse or gpsdIndication", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233F328);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v12);
      goto LABEL_61;
    }
    return;
  }
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Unexpected XPC_TYPE_CONNECTION", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_44;
    }
LABEL_63:
    dispatch_once(&qword_1024193D0, &stru_10233F328);
    goto LABEL_44;
  }
  if (type == (xpc_type_t)&_xpc_type_endpoint)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Unexpected XPC_TYPE_ENDPOINT", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_44:
      *(_WORD *)length = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v12);
LABEL_61:
      if (v12 != (char *)buf) {
        free(v12);
      }
      return;
    }
    goto LABEL_63;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Unexpected unknown xpc_type_t", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_44;
    }
    goto LABEL_63;
  }
}

void sub_10180DF94(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_10180E028()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "#gpsdClient,handleXPCConnectionTermination", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::handleXPCConnectionTermination()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_10180E1B0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsdClient,handleXPCConnectionInterrupted", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::handleXPCConnectionInterrupted()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_10180D504(a1);
  uint64_t v3 = *(void *)(a1 + 120);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
}

void sub_10180E37C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsdClient,handleXpcConnectionInvalid", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::handleXpcConnectionInvalid()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 265));
}

void sub_10180E518(std::mutex *a1, void *a2)
{
  if (!*a2)
  {
    sub_101810364();
    __break(1u);
LABEL_18:
    dispatch_once(&qword_1024193D0, &stru_10233F328);
    goto LABEL_5;
  }
  xpc_object_t v4 = a2;
  uint64_t v3 = a1;
  uint64_t v2 = a1 + 2;
  std::mutex::lock(a1 + 2);
  *(_DWORD *)&v3[3].__m_.__opaque[40] = 2;
  if (*(_DWORD *)&v3[3].__m_.__opaque[44] == *(_DWORD *)(*v4 + 16))
  {
    *(_DWORD *)&v3[3].__m_.__opaque[48] = sub_101874A64(*(_DWORD *)(*v4 + 20));
    std::condition_variable::notify_one((std::condition_variable *)&v3[3]);
    goto LABEL_16;
  }
  uint64_t v5 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_18;
  }
LABEL_5:
  __int16 v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    sub_1018779E8(*(_DWORD *)(*v4 + 16), (uint64_t)v26);
    int v7 = v27;
    uint64_t v8 = (void **)v26[0];
    sub_1018779E8(*(_DWORD *)&v3[3].__m_.__opaque[44], (uint64_t)__p);
    int v9 = v26;
    if (v7 < 0) {
      int v9 = v8;
    }
    if (v17 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v19 = 2082;
    __int16 v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsdClient,Response mismatch,ReceivedType,%{public}s,BlockedType,%{public}s", buf, 0x16u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(v26, 0x65CuLL);
    if (v5[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    sub_1018779E8(*(_DWORD *)(*v4 + 16), (uint64_t)__p);
    int v11 = v17;
    uint64_t v12 = (void **)__p[0];
    sub_1018779E8(*(_DWORD *)&v3[3].__m_.__opaque[44], (uint64_t)buf);
    uint64_t v13 = __p;
    if (v11 < 0) {
      uint64_t v13 = v12;
    }
    if (v21 >= 0) {
      uint64_t v14 = buf;
    }
    else {
      uint64_t v14 = *(unsigned char **)buf;
    }
    int v22 = 136446466;
    unsigned int v23 = v13;
    __int16 v24 = 2082;
    unsigned int v25 = v14;
    size_t v15 = (char *)_os_log_send_and_compose_impl();
    if (v21 < 0) {
      operator delete(*(void **)buf);
    }
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsdClient::gpsdResponseHandler(std::unique_ptr<proto::gpsd::Response>)", "%s\n", v15);
    if (v15 != (char *)v26) {
      free(v15);
    }
  }
LABEL_16:
  std::mutex::unlock(v2);
}

void sub_10180E814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::mutex::unlock(v30);
  _Unwind_Resume(a1);
}

void sub_10180E868(std::mutex *a1, wireless_diagnostics::google::protobuf::MessageLite **a2, uint64_t a3)
{
  if (!*a2)
  {
    sub_1018104DC();
    __break(1u);
LABEL_85:
    dispatch_once(&qword_1024193D0, &stru_10233F328);
LABEL_28:
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#gpsdClient, gpsd restarted while waiting for response,do not post response event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v4[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233F328);
      }
      *(_WORD *)int v62 = 0;
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v19);
      if (v19 != buf) {
        goto LABEL_125;
      }
    }
    goto LABEL_81;
  }
  uint64_t v3 = (uint64_t)a1;
  if (*((_DWORD *)*a2 + 5) == 34) {
    uint64_t sig = 4 * a1[4].__m_.__sig;
  }
  else {
    uint64_t sig = a1[4].__m_.__sig;
  }
  __lk.__m_ = a1 + 2;
  __lk.__owns_ = 1;
  std::mutex::lock(a1 + 2);
  *(_DWORD *)(v3 + 244) = *((_DWORD *)*a2 + 5);
  unint64_t v8 = sub_101877458();
  *(_DWORD *)(v3 + 240) = 0;
  int v9 = *a2;
  *a2 = 0;
  __int16 v47 = v9;
  sub_10180F450(v3, &v47, a3);
  __int16 v47 = 0;
  if (v9) {
    (*(void (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(void *)v9 + 8))(v9);
  }
  std::mutex::lock((std::mutex *)(v3 + 272));
  int v10 = *(unsigned __int8 *)(v3 + 264);
  std::mutex::unlock((std::mutex *)(v3 + 272));
  v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * sig;
  do
  {
    if (*(_DWORD *)(v3 + 240)) {
      goto LABEL_25;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v11.__d_.__rep_) {
      break;
    }
    v12.__d_.__rep_ = v11.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v12.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v13.__d_.__rep_)
      {
        if (v13.__d_.__rep_ < 1)
        {
          if ((unint64_t)v13.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0x8000000000000000;
            goto LABEL_21;
          }
        }
        else if ((unint64_t)v13.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_19;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 1000 * v13.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0;
      }
LABEL_19:
      if (v14 > (v12.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v15.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_22:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v3 + 192), &__lk, v15);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_21:
      v15.__d_.__rep_ = v14 + v12.__d_.__rep_;
      goto LABEL_22;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v11.__d_.__rep_);
  if (*(_DWORD *)(v3 + 240))
  {
LABEL_25:
    unint64_t v16 = sub_101877458();
    int v17 = *(_DWORD *)(v3 + 240);
    if (v17 == 2)
    {
      unint64_t v20 = v16;
      if (*(_DWORD *)(v3 + 248) == 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233F328);
        }
        char v21 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)buf);
          int v22 = v61 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)int v62 = 136446210;
          *(void *)&v62[4] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#gpsdClient,Response,Success,%{public}s", v62, 0xCu);
          if (SHIBYTE(v61) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233F328);
          }
          sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)v62);
          if (v66 >= 0) {
            int v36 = v62;
          }
          else {
            int v36 = *(unsigned char **)v62;
          }
          *(_DWORD *)__int16 v53 = 136446210;
          *(void *)&v53[4] = v36;
          long long v37 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v66) < 0) {
            operator delete(*(void **)v62);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v37);
          if (v37 != buf) {
            free(v37);
          }
        }
        int v23 = 1;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233F328);
        }
        int v28 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)buf);
          int v29 = SHIBYTE(v61);
          int v30 = *(unsigned char **)buf;
          sub_101874A00(*(_DWORD *)(v3 + 248), v62);
          int v31 = buf;
          if (v29 < 0) {
            int v31 = v30;
          }
          if (v66 >= 0) {
            long long v32 = v62;
          }
          else {
            long long v32 = *(unsigned char **)v62;
          }
          *(_DWORD *)__int16 v53 = 136446466;
          *(void *)&v53[4] = v31;
          __int16 v54 = 2082;
          __int16 v55 = v32;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Response,Failure,%{public}s,%{public}s", v53, 0x16u);
          if (SHIBYTE(v66) < 0) {
            operator delete(*(void **)v62);
          }
          if (SHIBYTE(v61) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233F328);
          }
          sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)v62);
          int v38 = SHIBYTE(v66);
          int v39 = *(unsigned char **)v62;
          sub_101874A00(*(_DWORD *)(v3 + 248), v53);
          int v40 = v62;
          if (v38 < 0) {
            int v40 = v39;
          }
          if (v56 >= 0) {
            __int16 v41 = v53;
          }
          else {
            __int16 v41 = *(unsigned char **)v53;
          }
          int v49 = 136446466;
          int v50 = v40;
          __int16 v51 = 2082;
          int v52 = v41;
          unsigned int v42 = (char *)_os_log_send_and_compose_impl();
          if (v56 < 0) {
            operator delete(*(void **)v53);
          }
          if (SHIBYTE(v66) < 0) {
            operator delete(*(void **)v62);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v42);
          if (v42 != buf) {
            free(v42);
          }
        }
        int v23 = 2;
      }
      sub_10180F860(v3 + 8, *(_DWORD *)(v3 + 244), v23, (uint64_t)(v20 - v8) / 1000000);
      goto LABEL_81;
    }
    if (v17 != 1) {
      goto LABEL_81;
    }
    xpc_object_t v4 = &qword_102419000;
    if (qword_1024193D0 != -1) {
      goto LABEL_85;
    }
    goto LABEL_28;
  }
  unint64_t v24 = sub_101877458();
  std::mutex::lock((std::mutex *)(v3 + 272));
  int v25 = *(unsigned __int8 *)(v3 + 264);
  std::mutex::unlock((std::mutex *)(v3 + 272));
  if (v10 == v25)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    __int16 v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)buf);
      char v27 = v61 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v62 = 136446210;
      *(void *)&v62[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Response timeout,%{public}s", v62, 0xCu);
      if (SHIBYTE(v61) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233F328);
      }
      sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)v62);
      if (v66 >= 0) {
        __int16 v43 = v62;
      }
      else {
        __int16 v43 = *(unsigned char **)v62;
      }
      *(_DWORD *)__int16 v53 = 136446210;
      *(void *)&v53[4] = v43;
      int v44 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v66) < 0) {
        operator delete(*(void **)v62);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v44);
      if (v44 != buf) {
        free(v44);
      }
    }
    sub_10180F860(v3 + 8, *(_DWORD *)(v3 + 244), 4, (uint64_t)(v24 - v8) / 1000000);
    goto LABEL_81;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  int v33 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)v62);
    int v34 = v66 >= 0 ? v62 : *(unsigned char **)v62;
    int v35 = *(unsigned __int8 *)(v3 + 264);
    *(_DWORD *)uint64_t buf = 136446722;
    *(void *)&uint8_t buf[4] = v34;
    __int16 v58 = 1026;
    int v59 = v10;
    __int16 v60 = 1026;
    int v61 = v35;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Transaction ID changed while waiting for response,%{public}s,do not post timeout eventcurrentTransactionId,%{public}d,fActiveTransactionId,%{public}d", buf, 0x18u);
    if (SHIBYTE(v66) < 0) {
      operator delete(*(void **)v62);
    }
  }
  if (!sub_10013D1A0(115, 2)) {
    goto LABEL_81;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  sub_1018779E8(*(_DWORD *)(v3 + 244), (uint64_t)v53);
  if (v56 >= 0) {
    __int16 v45 = v53;
  }
  else {
    __int16 v45 = *(unsigned char **)v53;
  }
  int v46 = *(unsigned __int8 *)(v3 + 264);
  *(_DWORD *)int v62 = 136446722;
  *(void *)&v62[4] = v45;
  __int16 v63 = 1026;
  int v64 = v10;
  __int16 v65 = 1026;
  int v66 = v46;
  __int16 v19 = (char *)_os_log_send_and_compose_impl();
  if (v56 < 0) {
    operator delete(*(void **)v53);
  }
  sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v19);
  if (v19 == buf) {
    goto LABEL_81;
  }
LABEL_125:
  free(v19);
LABEL_81:
  *(_DWORD *)(v3 + 244) = 0;
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_10180F3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10180F450(uint64_t a1, wireless_diagnostics::google::protobuf::MessageLite **a2, uint64_t a3)
{
  if (*a2)
  {
    uint64_t v8 = a3;
    __int16 v6 = a2;
    int v7 = (*(uint64_t (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(void *)*a2 + 72))(*a2);
    size_t v5 = v7;
    int v10 = malloc_type_malloc(v7, 0x425291C9uLL);
    uint64_t v3 = &qword_102419000;
    if (v10)
    {
      xpc_object_t v4 = v10;
      if (qword_1024193D0 == -1) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
    sub_1018107F0(qword_1024193D0 == -1);
  }
  else
  {
    sub_101810678();
  }
  __break(1u);
LABEL_15:
  dispatch_once(&qword_1024193D0, &stru_10233F328);
LABEL_4:
  std::chrono::steady_clock::time_point v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1018779E8(*((_DWORD *)*v6 + 5), (uint64_t)__p);
    uint64_t v12 = v8;
    uint64_t v13 = a1;
    int v14 = SBYTE3(v34);
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v15 = *(unsigned char **)__p;
    uint64_t v16 = qword_102489058;
    unint64_t v17 = sub_101877458();
    unsigned int v18 = __p;
    if (v14 < 0) {
      unsigned int v18 = v15;
    }
    uint64_t v8 = v12;
    *(_DWORD *)uint64_t buf = 136446978;
    int v38 = v18;
    __int16 v39 = 1026;
    int v40 = v7;
    __int16 v41 = 2050;
    uint64_t v42 = v16;
    __int16 v43 = 1026;
    int v44 = (v17 - v12) / 0xF4240;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gpsdClient,Request,%{public}s,size,%{public}d,requestNumber,%{public}llu,queueDelayMs,%{public}d", buf, 0x22u);
    if (SBYTE3(v34) < 0) {
      operator delete(*(void **)__p);
    }
    a1 = v13;
    uint64_t v3 = &qword_102419000;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    sub_1018779E8(*((_DWORD *)*v6 + 5), (uint64_t)v28);
    uint64_t v20 = v8;
    uint64_t v27 = a1;
    int v21 = v29;
    int v22 = (void **)v28[0];
    uint64_t v23 = qword_102489058;
    unint64_t v24 = sub_101877458();
    int v25 = v28;
    if (v21 < 0) {
      int v25 = v22;
    }
    uint64_t v8 = v20;
    *(_DWORD *)__p = 136446978;
    *(void *)&__p[4] = v25;
    __int16 v31 = 1026;
    int v32 = v7;
    __int16 v33 = 2050;
    uint64_t v34 = v23;
    __int16 v35 = 1026;
    int v36 = (v24 - v20) / 0xF4240;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsdClient::sendGpsdRequest(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v26);
    a1 = v27;
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray(*v6, v4);
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_data(v19, "gpsdRequest", v4, v5);
  xpc_dictionary_set_uint64(v19, "requestNumber", qword_102489058);
  xpc_dictionary_set_uint64(v19, "timeNs", v8);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), v19);
  ++qword_102489058;
  xpc_release(v19);
  free(v4);
}

void sub_10180F828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10180F860(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v8 = a2;
  int v7 = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_10180F8C4(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 272);
  std::mutex::lock((std::mutex *)(a1 + 272));
  unsigned __int8 v3 = *(unsigned char *)(a1 + 264) + 1;
  *(unsigned char *)(a1 + 264) = v3;
  std::mutex::unlock(v2);
  uint64_t v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  *(_DWORD *)(a1 + 240) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F328);
  }
  size_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsdClient,cancelPendingGpsdRequests,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGpsdClient::cancelPendingGpsdRequests()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  std::mutex::unlock(v4);
}

void sub_10180FABC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10180FAD4()
{
  sub_101877458();
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x3812000000;
  v0[3] = sub_100178130;
  v0[4] = sub_100177808;
  v0[5] = 0;
  operator new();
}

void sub_10180FC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _Block_object_dispose(&a18, 8);
  uint64_t v25 = a24;
  a24 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  _Unwind_Resume(a1);
}

wireless_diagnostics::google::protobuf::MessageLite *sub_10180FCA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  std::mutex::lock((std::mutex *)(v2 + 272));
  int v3 = *(unsigned __int8 *)(a1 + 56);
  int v4 = *(unsigned __int8 *)(v2 + 264);
  std::mutex::unlock((std::mutex *)(v2 + 272));
  if (v3 == v4)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(wireless_diagnostics::google::protobuf::MessageLite **)(v5 + 48);
    *(void *)(v5 + 48) = 0;
    uint64_t v20 = v6;
    sub_10180E868((std::mutex *)v2, &v20, *(void *)(a1 + 48));
    __n128 result = v20;
    if (v20)
    {
      int v8 = *(uint64_t (**)(void))(*(void *)v20 + 8);
      return (wireless_diagnostics::google::protobuf::MessageLite *)v8();
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F328);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1018779E8(*(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) + 20), (uint64_t)v27);
      int v10 = v31 >= 0 ? v27 : *(unsigned char **)v27;
      int v11 = *(unsigned __int8 *)(a1 + 56);
      int v12 = *(unsigned __int8 *)(v2 + 264);
      *(_DWORD *)uint64_t buf = 136446722;
      int v22 = v10;
      __int16 v23 = 1026;
      int v24 = v11;
      __int16 v25 = 1026;
      int v26 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Transaction ID mismatch,Dropping type,%{public}s,currentTransactionId,%{public}d,fActiveTransactionId,%{public}d", buf, 0x18u);
      if (SHIBYTE(v31) < 0) {
        operator delete(*(void **)v27);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233F328);
      }
      sub_1018779E8(*(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) + 20), (uint64_t)__p);
      if (v19 >= 0) {
        int v14 = __p;
      }
      else {
        int v14 = (void **)__p[0];
      }
      int v15 = *(unsigned __int8 *)(a1 + 56);
      int v16 = *(unsigned __int8 *)(v2 + 264);
      *(_DWORD *)uint64_t v27 = 136446722;
      *(void *)&void v27[4] = v14;
      __int16 v28 = 1026;
      int v29 = v15;
      __int16 v30 = 1026;
      int v31 = v16;
      unint64_t v17 = (char *)_os_log_send_and_compose_impl();
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGpsdClient::sendRequest(const proto::gpsd::Request &)_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
    __n128 result = *(wireless_diagnostics::google::protobuf::MessageLite **)(v13 + 48);
    *(void *)(v13 + 48) = 0;
    if (result) {
      return (wireless_diagnostics::google::protobuf::MessageLite *)(*(uint64_t (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101810004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    sub_101810654(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_101810028(uint64_t a1)
{
  sub_101810090(a1);

  operator delete();
}

void sub_101810060(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101810090(uint64_t a1)
{
  *(void *)a1 = off_10233F288;
  uint64_t v2 = (void *)(a1 + 40);
  std::mutex::~mutex((std::mutex *)(a1 + 272));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  sub_10068280C((void *)(a1 + 96));
  *(void *)a1 = &off_10233F308;
  sub_1018101B0(v2);
  sub_10181012C((void *)(a1 + 8));
  return a1;
}

void *sub_10181012C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1018101B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_101810234(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1018102CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

#error "1018103E0: call analysis failed (funcsize=75)"

#error "101810558: call analysis failed (funcsize=75)"

uint64_t sub_101810654(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

#error "1018106F4: call analysis failed (funcsize=75)"

#error "101810874: call analysis failed (funcsize=80)"

void *sub_10181097C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    uint64_t v2 = "StatusUnknown";
  }
  else {
    uint64_t v2 = (&off_10233F4D8)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_1018109A8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x1A) {
    uint64_t v2 = "ResultUnknown";
  }
  else {
    uint64_t v2 = (&off_10233F368)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_1018109D4@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 8) {
    uint64_t v2 = "WlanResultUnknown";
  }
  else {
    uint64_t v2 = (&off_10233F440)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_101810A00@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 + 1) > 5) {
    uint64_t v2 = "ProtocolUnknown";
  }
  else {
    uint64_t v2 = (&off_10233F488)[a1 + 1];
  }
  return sub_100134750(a2, v2);
}

void *sub_101810A30@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 + 1) > 3) {
    uint64_t v2 = "MethodUnknown";
  }
  else {
    uint64_t v2 = (&off_10233F4B8)[a1 + 1];
  }
  return sub_100134750(a2, v2);
}

void sub_101810A60(int *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F348);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a1;
    if (v5 > 3) {
      uint64_t v6 = "StatusUnknown";
    }
    else {
      uint64_t v6 = (&off_10233F4D8)[v5];
    }
    sub_100134750(v76, v6);
    if (v79 >= 0) {
      int v7 = v76;
    }
    else {
      int v7 = *(unsigned char **)v76;
    }
    int v8 = a1[10];
    sub_101810A00(a1[11], v74);
    if (v75 >= 0) {
      int v9 = v74;
    }
    else {
      int v9 = (void **)v74[0];
    }
    unsigned int v10 = a1[34] + 1;
    if (v10 > 3) {
      int v11 = "MethodUnknown";
    }
    else {
      int v11 = (&off_10233F4B8)[v10];
    }
    sub_100134750(v72, v11);
    int v12 = v73;
    uint64_t v13 = (void **)v72[0];
    sub_1018109A8(a1[1], __p);
    if (v12 >= 0) {
      int v14 = v72;
    }
    else {
      int v14 = v13;
    }
    int v15 = *((unsigned __int8 *)a1 + 160);
    if (v71 >= 0) {
      int v16 = __p;
    }
    else {
      int v16 = (void **)__p[0];
    }
    uint64_t v17 = *((void *)a1 + 7);
    int v18 = *((unsigned __int8 *)a1 + 152);
    int v19 = a1[39];
    int v20 = a1[42];
    int v21 = a1[43];
    double v22 = *((double *)a1 + 22);
    double v23 = *((double *)a1 + 23);
    if (v22 == 1.79769313e308) {
      double v22 = -1.0;
    }
    if (v23 == 1.79769313e308) {
      double v23 = -1.0;
    }
    int v24 = a1[51];
    uint64_t v26 = *((void *)a1 + 1);
    uint64_t v25 = *((void *)a1 + 2);
    int v27 = a1[41];
    double v28 = *((double *)a1 + 3);
    double v29 = *((double *)a1 + 4);
    int v30 = *((unsigned __int8 *)a1 + 64);
    double v31 = *((double *)a1 + 9);
    double v32 = *((double *)a1 + 10);
    if (v31 == 1.79769313e308) {
      double v31 = -1.0;
    }
    if (v32 == 1.79769313e308) {
      double v32 = -1.0;
    }
    if (*((double *)a1 + 11) == 1.79769313e308) {
      double v33 = -1.0;
    }
    else {
      double v33 = *((double *)a1 + 11);
    }
    uint64_t v35 = *((void *)a1 + 13);
    uint64_t v34 = *((void *)a1 + 14);
    uint64_t v36 = *((void *)a1 + 15);
    int v37 = a1[32];
    *(_DWORD *)uint64_t buf = 136322307;
    uint64_t v134 = a2;
    __int16 v135 = 2080;
    v136 = v7;
    __int16 v137 = 1024;
    int v138 = v8;
    __int16 v139 = 2080;
    v140 = v9;
    __int16 v141 = 2080;
    v142 = v14;
    __int16 v143 = 2080;
    v144 = v16;
    __int16 v145 = 1024;
    int v146 = v15;
    __int16 v147 = 2048;
    uint64_t v148 = v17;
    __int16 v149 = 1024;
    int v150 = v18;
    __int16 v151 = 1024;
    int v152 = v19;
    __int16 v153 = 1024;
    int v154 = v20;
    __int16 v155 = 1024;
    int v156 = v21;
    __int16 v157 = 2049;
    double v158 = v22;
    __int16 v159 = 2049;
    double v160 = v23;
    __int16 v161 = 1024;
    int v162 = v24;
    __int16 v163 = 2048;
    uint64_t v164 = v25;
    __int16 v165 = 2048;
    uint64_t v166 = v26;
    __int16 v167 = 1024;
    int v168 = v27;
    __int16 v169 = 2048;
    double v170 = v28;
    __int16 v171 = 2048;
    double v172 = v29;
    __int16 v173 = 2048;
    double v174 = v29 - v28;
    __int16 v175 = 1024;
    int v176 = v30;
    __int16 v177 = 2049;
    double v178 = v31;
    __int16 v179 = 2049;
    double v180 = v32;
    __int16 v181 = 2048;
    double v182 = v33;
    __int16 v183 = 2048;
    uint64_t v184 = v35;
    __int16 v185 = 2048;
    uint64_t v186 = v34;
    __int16 v187 = 2048;
    uint64_t v188 = v36;
    __int16 v189 = 1024;
    int v190 = v37;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,NilrDbg,%s,%s,sessionId,%u,proto,%s,method,%s,result,%s,locType,%x,reqAcc,%.2f,reqConf,%d,asstAvail,%d,refWeek,%d,refTow,%d,refLat,%{private}.8f,refLon,%{private}.8f,ephSvs,%d,timeout,%.1f,timeoutUsed,%.1f,interval,%u,start,%.2f,end,%.2f,ttff,%.1f,rspType,%d,lat,%{private}.8f,lon,%{private}.8f,alt,%.2f,uncSmj,%.2f,uncSmn,%.2f,uncAlt,%.2f,conf,%d", buf, 0xFCu);
    if (v71 < 0) {
      operator delete(__p[0]);
    }
    if (v73 < 0) {
      operator delete(v72[0]);
    }
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    if (SHIBYTE(v79) < 0) {
      operator delete(*(void **)v76);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F348);
    }
    sub_10181097C(*a1, v74);
    if (v75 >= 0) {
      int v38 = v74;
    }
    else {
      int v38 = (void **)v74[0];
    }
    int v39 = a1[10];
    int v40 = v72;
    sub_101810A00(a1[11], v72);
    if (v73 < 0) {
      int v40 = (void **)v72[0];
    }
    sub_101810A30(a1[34], __p);
    int v41 = v71;
    uint64_t v42 = (void **)__p[0];
    sub_1018109A8(a1[1], v68);
    if (v41 >= 0) {
      __int16 v43 = __p;
    }
    else {
      __int16 v43 = v42;
    }
    int v44 = *((unsigned __int8 *)a1 + 160);
    if (v69 >= 0) {
      __int16 v45 = v68;
    }
    else {
      __int16 v45 = (void **)v68[0];
    }
    uint64_t v46 = *((void *)a1 + 7);
    int v47 = *((unsigned __int8 *)a1 + 152);
    int v48 = a1[39];
    int v49 = a1[42];
    int v50 = a1[43];
    double v51 = *((double *)a1 + 22);
    double v52 = *((double *)a1 + 23);
    if (v51 == 1.79769313e308) {
      double v51 = -1.0;
    }
    if (v52 == 1.79769313e308) {
      double v52 = -1.0;
    }
    int v53 = a1[51];
    uint64_t v55 = *((void *)a1 + 1);
    uint64_t v54 = *((void *)a1 + 2);
    int v56 = a1[41];
    double v57 = *((double *)a1 + 3);
    double v58 = *((double *)a1 + 4);
    int v59 = *((unsigned __int8 *)a1 + 64);
    double v60 = *((double *)a1 + 9);
    double v61 = *((double *)a1 + 10);
    if (v60 == 1.79769313e308) {
      double v60 = -1.0;
    }
    if (v61 == 1.79769313e308) {
      double v61 = -1.0;
    }
    if (*((double *)a1 + 11) == 1.79769313e308) {
      double v62 = -1.0;
    }
    else {
      double v62 = *((double *)a1 + 11);
    }
    uint64_t v64 = *((void *)a1 + 13);
    uint64_t v63 = *((void *)a1 + 14);
    uint64_t v65 = *((void *)a1 + 15);
    int v66 = a1[32];
    *(_DWORD *)uint64_t v76 = 136322307;
    *(void *)&v76[4] = a2;
    __int16 v77 = 2080;
    __int32 v78 = v38;
    __int16 v79 = 1024;
    int v80 = v39;
    __int16 v81 = 2080;
    int v82 = v40;
    __int16 v83 = 2080;
    unint64_t v84 = v43;
    __int16 v85 = 2080;
    int v86 = v45;
    __int16 v87 = 1024;
    int v88 = v44;
    __int16 v89 = 2048;
    uint64_t v90 = v46;
    __int16 v91 = 1024;
    int v92 = v47;
    __int16 v93 = 1024;
    int v94 = v48;
    __int16 v95 = 1024;
    int v96 = v49;
    __int16 v97 = 1024;
    int v98 = v50;
    __int16 v99 = 2049;
    double v100 = v51;
    __int16 v101 = 2049;
    double v102 = v52;
    __int16 v103 = 1024;
    int v104 = v53;
    __int16 v105 = 2048;
    uint64_t v106 = v54;
    __int16 v107 = 2048;
    uint64_t v108 = v55;
    __int16 v109 = 1024;
    int v110 = v56;
    __int16 v111 = 2048;
    double v112 = v57;
    __int16 v113 = 2048;
    double v114 = v58;
    __int16 v115 = 2048;
    double v116 = v58 - v57;
    __int16 v117 = 1024;
    int v118 = v59;
    __int16 v119 = 2049;
    double v120 = v60;
    __int16 v121 = 2049;
    double v122 = v61;
    __int16 v123 = 2048;
    double v124 = v62;
    __int16 v125 = 2048;
    uint64_t v126 = v64;
    __int16 v127 = 2048;
    uint64_t v128 = v63;
    __int16 v129 = 2048;
    uint64_t v130 = v65;
    __int16 v131 = 1024;
    int v132 = v66;
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    if (v69 < 0) {
      operator delete(v68[0]);
    }
    if (v71 < 0) {
      operator delete(__p[0]);
    }
    if (v73 < 0) {
      operator delete(v72[0]);
    }
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrTypes::SessionStatus::log(const char *) const", "%s\n", v67);
    if (v67 != (char *)buf) {
      free(v67);
    }
  }
}

void sub_1018110C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10181115C(double *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233F348);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(int *)a1;
    if (v5 > 3) {
      uint64_t v6 = "StatusUnknown";
    }
    else {
      uint64_t v6 = (&off_10233F4D8)[v5];
    }
    sub_100134750(v32, v6);
    int v7 = SHIBYTE(v35);
    int v8 = *(unsigned char **)v32;
    sub_1018109D4(*((_DWORD *)a1 + 1), __p);
    int v9 = v32;
    unsigned int v10 = (void **)__p[0];
    if (v7 < 0) {
      int v9 = v8;
    }
    int v11 = *((unsigned __int8 *)a1 + 32);
    if (v31 >= 0) {
      unsigned int v10 = __p;
    }
    int v12 = *((unsigned __int8 *)a1 + 33);
    int v13 = *((unsigned __int8 *)a1 + 34);
    int v14 = *((unsigned __int8 *)a1 + 35);
    int v15 = *((unsigned __int16 *)a1 + 19);
    double v16 = a1[3] - a1[2];
    *(_DWORD *)uint64_t buf = 136317186;
    uint64_t v50 = a2;
    __int16 v51 = 2080;
    double v52 = v9;
    __int16 v53 = 2080;
    uint64_t v54 = v10;
    __int16 v55 = 1024;
    int v56 = v11;
    __int16 v57 = 1024;
    int v58 = v12;
    __int16 v59 = 1024;
    int v60 = v13;
    __int16 v61 = 1024;
    int v62 = v14;
    __int16 v63 = 1024;
    int v64 = v15;
    __int16 v65 = 2048;
    double v66 = v16;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#wlan,NilrDbg,%s,%s,result,%s,isWlanFeatureEnabled,%d,isRssiReportingEnabled,%d,isRssiRequested,%d,wasServingApSent,%d,timeout,%d,ttff,%f", buf, 0x48u);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(*(void **)v32);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233F348);
    }
    sub_10181097C(*(_DWORD *)a1, __p);
    int v17 = v31;
    int v18 = (void **)__p[0];
    sub_1018109D4(*((_DWORD *)a1 + 1), v28);
    int v19 = __p;
    if (v17 < 0) {
      int v19 = v18;
    }
    if (v29 >= 0) {
      int v20 = v28;
    }
    else {
      int v20 = (void **)v28[0];
    }
    int v21 = *((unsigned __int8 *)a1 + 32);
    int v22 = *((unsigned __int8 *)a1 + 33);
    int v23 = *((unsigned __int8 *)a1 + 34);
    int v24 = *((unsigned __int8 *)a1 + 35);
    int v25 = *((unsigned __int16 *)a1 + 19);
    double v26 = a1[3] - a1[2];
    *(_DWORD *)double v32 = 136317186;
    *(void *)&v32[4] = a2;
    __int16 v33 = 2080;
    uint64_t v34 = v19;
    __int16 v35 = 2080;
    uint64_t v36 = v20;
    __int16 v37 = 1024;
    int v38 = v21;
    __int16 v39 = 1024;
    int v40 = v22;
    __int16 v41 = 1024;
    int v42 = v23;
    __int16 v43 = 1024;
    int v44 = v24;
    __int16 v45 = 1024;
    int v46 = v25;
    __int16 v47 = 2048;
    double v48 = v26;
    int v27 = (char *)_os_log_send_and_compose_impl();
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrTypes::WlanSessionStatus::log(const char *) const", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
}

void sub_1018114D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10181150C(__int16 a1)
{
  return (double)(a1 & 0x3FFF) + -500.0;
}

double sub_101811524(__int16 a1)
{
  double result = (double)(a1 & 0x7FFF);
  if (a1 < 0) {
    return -(double)(a1 & 0x7FFF);
  }
  return result;
}

long double sub_101811540(unsigned int a1)
{
  return (pow(1.1, (double)a1) + -1.0) * 10.0;
}

long double sub_101811574(unsigned int a1)
{
  return (pow(1.025, (double)a1) + -1.0) * 45.0;
}

double sub_1018115AC(int a1)
{
  double result = -((double)(a1 & 0x7FFFFF) * 0.0000107288373);
  if ((a1 & 0x800000) == 0) {
    return (double)(a1 & 0x7FFFFF) * 0.0000107288373;
  }
  return result;
}

double sub_1018115D0(int a1)
{
  return (double)a1 * 0.0000107288373 + (double)a1 * 0.0000107288373;
}

double sub_1018115E8(int a1)
{
  return (double)a1 / 0.0000107288373;
}

double sub_1018115FC(int a1)
{
  return (double)a1 / 0.0000214576747;
}

long double sub_101811610(unsigned int a1)
{
  if (a1 > 0x1F) {
    return -1.0;
  }
  char v2 = a1;
  unsigned int v3 = a1 >> 1;
  double v4 = ldexp(1.0, (a1 >> 1) - 1);
  return v4 + (double)(v2 & 1) * ldexp(1.0, v3 - 2);
}

uint64_t sub_101811674(unsigned int a1)
{
  uint64_t v1 = 127;
  if (a1)
  {
    unsigned int v2 = (int)(log((double)a1 / 10.0 + 1.0) / 0.0953101798);
    if (v2 >= 0x7F) {
      return 127;
    }
    else {
      return v2;
    }
  }
  return v1;
}

void sub_1018116CC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

BOOL sub_1018116FC(uint64_t a1, double a2, double a3)
{
  double v6 = *(double *)(a1 + 20);
  if (*(double *)(a1 + 60) < 0.0 || (double v7 = *(double *)(a1 + 68), v7 <= 0.0))
  {
    BOOL v9 = 0;
  }
  else
  {
    sub_1018119D0();
    BOOL v9 = v7 < v8;
  }
  if (*(double *)(a1 + 44) < 0.0 || (double v10 = *(double *)(a1 + 52), v10 <= 0.0))
  {
    BOOL v12 = 0;
  }
  else
  {
    sub_101811A5C();
    BOOL v12 = v10 < v11;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10233F4F8);
  }
  int v13 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134350080;
    double v21 = a3;
    __int16 v22 = 1026;
    BOOL v23 = v6 <= a3;
    __int16 v24 = 1026;
    BOOL v25 = v12;
    __int16 v26 = 1026;
    BOOL v27 = v9;
    __int16 v28 = 2050;
    double v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLRhythmicGnssHelper,desiredAccuracy met,%{public}.3lf,huncValid,%{public}d,speedValid,%{public}d,courseValid,%{public}d,sessionTime,%{public}.1lf", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10233F4F8);
    }
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssHelper::isFixQualified(const CLDaemonLocation &, double, double)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  BOOL v14 = v6 <= a3 && v12;
  if (v14 && v9)
  {
    sub_101811AE4();
    if (v15 <= a2) {
      return 1;
    }
  }
  if (v14)
  {
    sub_101811B6C();
    if (v16 <= a2) {
      return 1;
    }
    goto LABEL_23;
  }
  if (v6 <= a3)
  {
LABEL_23:
    sub_101811B6C();
    return v18 <= a2;
  }
  return 0;
}

void sub_1018119D0()
{
  sub_1000C7F88(&v0);
  uint64_t v2 = 0;
  sub_1000A699C(v0, "CourseAccuracyThresholdDeg", &v2);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_101811A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101811A5C()
{
  sub_1000C7F88(&v0);
  uint64_t v2 = 0;
  sub_1000A699C(v0, "SpeedAccuracyThresholdMps", &v2);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_101811ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101811AE4()
{
  sub_1000C7F88(&v0);
  uint64_t v2 = 0;
  sub_1000A699C(v0, "MinSessionTime", &v2);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_101811B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101811B6C()
{
  sub_1000C7F88(&v0);
  uint64_t v2 = 0;
  sub_1000A699C(v0, "MinSessionTimeWithCourseInvalid", &v2);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_101811BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101811BF4(unsigned int a1)
{
  return (a1 < 5) & (0x19u >> a1);
}

BOOL sub_101811C0C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 1) {
    return *(unsigned char *)(a2 + 24) && *(_DWORD *)(a2 + 8) == 1;
  }
  return result;
}

uint64_t sub_101811C30(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) & 1;
}

uint64_t sub_101811C3C(int a1, int a2)
{
  return a1 & ~a2;
}

void sub_101811C44(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_101811C74(uint64_t a1)
{
  for (uint64_t i = 0; i != -120; i -= 24)
  {
    unsigned int v3 = *(void **)(a1 + i + 216);
    if (v3)
    {
      *(void *)(a1 + i + 224) = v3;
      operator delete(v3);
    }
  }
  for (uint64_t j = 0; j != -120; j -= 24)
  {
    uint64_t v5 = *(void **)(a1 + j + 96);
    if (v5)
    {
      *(void *)(a1 + j + 104) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_101811CE0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  sub_1018319E0((uint64_t)v28, a4);
  sub_10084F664((uint64_t)v27, a5);
  v26[3] = 0;
  sub_101831A78((uint64_t)v25, a7);
  sub_100852564((uint64_t)v24, a8);
  sub_1008525FC((uint64_t)v23, a9);
  sub_10084F6FC((uint64_t)v22, a10);
  sub_1008527DC((uint64_t)v21, a11);
  sub_1019269C0(a1, a3, (uint64_t)v28, (uint64_t)v27, (uint64_t)v26, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21, a12, a13);
  sub_10084FC8C(v21);
  sub_10084FC08(v22);
  sub_100850B38(v23);
  sub_100850AB4(v24);
  sub_1008524E0(v25);
  sub_1008522FC(v26);
  sub_10084FB84(v27);
  sub_1008520A8(v28);
  *(void *)a1 = off_10233F528;
  *(void *)(a1 + 1672) = +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", [objc_alloc((Class)CLDispatchSilo) initWithUnderlyingQueue:a2]);
  *(_DWORD *)(a1 + 1680) = 255;
  *(unsigned char *)(a1 + 1684) = 0;
  *(void *)(a1 + 1688) = 0;
  *(unsigned char *)(a1 + 1696) = 0;
  v20[0] = off_10233FBC8;
  v20[1] = a1;
  unsigned char v20[3] = v20;
  sub_1018D63BC(a1 + 1704);
  sub_1017C6FF0(v20);
  *(unsigned char *)(a1 + 2016) = 0;
  *(void *)(a1 + 2024) = 0;
  *(void *)(a1 + 2032) = dispatch_queue_create("com.apple.locationd.telephony_timemark", 0);
  *(unsigned char *)(a1 + 2040) = 0;
  *(unsigned char *)(a1 + 2056) = 0;
  *(unsigned char *)(a1 + 2064) = 0;
  *(unsigned char *)(a1 + 2136) = 0;
  *(void *)(a1 + 2144) = 0x500000014000;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(unsigned char *)(a1 + 2184) = a13;
  *(unsigned char *)(a1 + 2185) = a12;
  v19[0] = off_10233FC48;
  v19[1] = a1;
  v19[3] = v19;
  sub_1018AA37C((void *)(a1 + 2192), a2, (uint64_t)v19);
  sub_10183184C(v19);
  *(void *)(a1 + 2232) = 0;
  sub_1018318D0((void *)(a1 + 2248));
}

void sub_101812DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, qmi::Client **a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  a36 = (void **)(v36 + 4104);
  sub_1000FA7C8(&a36);
  sub_101849058(a17);
  __int16 v41 = *(std::__shared_weak_count **)(v36 + 3544);
  if (v41) {
    sub_1000DB0A0(v41);
  }
  uint64_t v42 = *a12;
  *a12 = 0;
  if (v42) {
    sub_1017C6CD8((uint64_t)a12, v42);
  }
  sub_10071874C(v36 + 3472);
  sub_10181712C((uint64_t *)(v36 + 3192), 0);
  sub_1017C765C(a15, 0);
  sub_1018C755C(a13);
  if (*(char *)(v36 + 2951) < 0) {
    operator delete(*(void **)(v36 + 2928));
  }
  sub_101811C74(a14);
  __int16 v43 = *(std::__shared_weak_count **)(v36 + 2672);
  if (v43) {
    sub_1000DB0A0(v43);
  }
  int v44 = *(std::__shared_weak_count **)(v36 + 2656);
  if (v44) {
    sub_1000DB0A0(v44);
  }
  __int16 v45 = *(std::__shared_weak_count **)(v36 + 2640);
  if (v45) {
    sub_1000DB0A0(v45);
  }
  sub_10071874C(v36 + 2568);
  uint64_t v46 = *(void *)(v36 + 2248);
  *(void *)(v36 + 2248) = 0;
  if (v46) {
    sub_101831594(v39, v46);
  }
  sub_101831990(a16, 0);
  sub_10183184C((void *)(v36 + 2200));
  if (*(char *)(v36 + 2175) < 0) {
    operator delete(*v38);
  }
  sub_101824858((const void **)(v36 + 2024), 0);
  sub_1017BC9D8(v37);
  sub_101926DBC(v36);
  _Unwind_Resume(a1);
}

#error "1018131DC: call analysis failed (funcsize=19)"

void sub_1018131E0(uint64_t a1)
{
}

void sub_1018131E8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2016);
    int v4 = *(unsigned __int8 *)(a1 + 2264);
    int v5 = *(_DWORD *)(a1 + 2260);
    int v6 = *(_DWORD *)(a1 + 2256);
    *(_DWORD *)uint64_t buf = 68290050;
    int v25 = 0;
    __int16 v26 = 2082;
    BOOL v27 = "";
    __int16 v28 = 1026;
    int v29 = v3;
    __int16 v30 = 1026;
    int v31 = v4;
    __int16 v32 = 1026;
    int v33 = v5;
    __int16 v34 = 1026;
    int v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,triggered\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
  }
  if (*(unsigned char *)(a1 + 2016))
  {
    ++*(_DWORD *)(a1 + 2260);
    v23[0] = off_102342D80;
    v23[1] = a1;
    v23[3] = v23;
    sub_1018D6764(a1 + 1704, (uint64_t)v23);
    sub_1017C825C(v23);
    int v7 = *(_DWORD *)(a1 + 2260);
    if (v7 < 8)
    {
      if (v7 >= 2)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        double v18 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(unsigned __int8 *)(a1 + 2016);
          int v20 = *(unsigned __int8 *)(a1 + 2264);
          int v21 = *(_DWORD *)(a1 + 2260);
          int v22 = *(_DWORD *)(a1 + 2256);
          *(_DWORD *)uint64_t buf = 68290050;
          int v25 = 0;
          __int16 v26 = 2082;
          BOOL v27 = "";
          __int16 v28 = 1026;
          int v29 = v19;
          __int16 v30 = 1026;
          int v31 = v20;
          __int16 v32 = 1026;
          int v33 = v21;
          __int16 v34 = 1026;
          int v35 = v22;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,missed response\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
        }
      }
    }
    else
    {
      sub_10182DC90(a1, "locationd,bbNoResponse");
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(unsigned __int8 *)(a1 + 2016);
      int v10 = *(unsigned __int8 *)(a1 + 2264);
      int v11 = *(_DWORD *)(a1 + 2260);
      int v12 = *(_DWORD *)(a1 + 2256);
      *(_DWORD *)uint64_t buf = 68290050;
      int v25 = 0;
      __int16 v26 = 2082;
      BOOL v27 = "";
      __int16 v28 = 1026;
      int v29 = v9;
      __int16 v30 = 1026;
      int v31 = v10;
      __int16 v32 = 1026;
      int v33 = v11;
      __int16 v34 = 1026;
      int v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,skipped\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    int v13 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v14 = *(unsigned __int8 *)(a1 + 2016);
      int v15 = *(unsigned __int8 *)(a1 + 2264);
      int v16 = *(_DWORD *)(a1 + 2260);
      int v17 = *(_DWORD *)(a1 + 2256);
      *(_DWORD *)uint64_t buf = 68290050;
      int v25 = 0;
      __int16 v26 = 2082;
      BOOL v27 = "";
      __int16 v28 = 1026;
      int v29 = v14;
      __int16 v30 = 1026;
      int v31 = v15;
      __int16 v32 = 1026;
      int v33 = v16;
      __int16 v34 = 1026;
      int v35 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,#trkstate,skipped", "{\"msg%{public}.0s\":\"#bb.e,#trkstate,skipped\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
    }
  }
}

void sub_1018135A4(_Unwind_Exception *exception_object)
{
}

void sub_1018135C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10181360C(v1);
  uint64_t v2 = (void *)(v1 + 2928);
  if (*(char *)(v1 + 2951) < 0) {
    uint64_t v2 = (void *)*v2;
  }

  sub_101813700(v1, (uint64_t)v2);
}

id sub_10181360C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,clearQmiPdsErrorRecovery\"}", (uint8_t *)v4, 0x12u);
  }
  *(unsigned char *)(a1 + 2290) = 0;
  *(_WORD *)(a1 + 2288) = 0;
  return [*(id *)(a1 + 2920) setNextFireDelay:1.79769313e308];
}

void sub_101813700(uint64_t a1, uint64_t a2)
{
  if (sub_100D33A54(a1 + 2268))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,Cannot reset during emergency, scheduling reinit at end of call\"}", (uint8_t *)&v7, 0x12u);
    }
    *(unsigned char *)(a1 + 2288) = 1;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    int v6 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,Reset device", "{\"msg%{public}.0s\":\"#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
    }
    sub_1018D4B10(a1 + 1704);
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1672), "vendor"), "proxyForService:", @"CLTelephonyService"), "resetModemWithReason:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)];
  }
}

id sub_10181395C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#timingadvance,reset timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaController::CLEurekaController(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  id result = [*(id *)(v1 + 1688) setNextFireDelay:1.79769313e308];
  *(unsigned char *)(v1 + 1684) = 0;
  return result;
}

void sub_101813B04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
}

void sub_101813B28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2184) || *(unsigned char *)(a1 + 2185))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(unsigned __int8 *)(a1 + 2184);
      int v4 = *(unsigned __int8 *)(a1 + 2185);
      *(_DWORD *)uint64_t buf = 67240448;
      int v68 = v3;
      __int16 v69 = 1026;
      int v70 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rti,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v48 = *(unsigned __int8 *)(a1 + 2184);
      int v49 = *(unsigned __int8 *)(a1 + 2185);
      LODWORD(v66[0]) = 67240448;
      DWORD1(v66[0]) = v48;
      WORD4(v66[0]) = 1026;
      *(_DWORD *)((char *)v66 + 10) = v49;
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::injectAllFormsOfRti()", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
  }
  else
  {
    ++*(void *)(a1 + 616);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 168))(&v52, a1);
    sub_10188E6C0(a1 + 8, (const char *)(v52 + 24), 1, 3, 0);
    if (!*(unsigned char *)(a1 + 2016)) {
      sub_10181446C(a1);
    }
    if (v52) {
      sub_1018AD340(a1 + 2192, (uint64_t *)(v52 + 24));
    }
    sub_1019BC0F4(v66);
    if ((sub_101814518() & 1) == 0)
    {
      sub_10181458C(*(_DWORD *)(a1 + 1284), a1 + 2680, (uint64_t)buf);
      for (uint64_t i = 0; i != 120; i += 24)
        sub_1000F4EBC((uint64_t)v66 + i, (__n128 *)&buf[i]);
      for (uint64_t j = 120; j != 240; j += 24)
        sub_1000F4EBC((uint64_t)v66 + j, (__n128 *)&buf[j]);
      for (uint64_t k = 0; k != -120; k -= 24)
      {
        int v8 = *(void **)&v71[k + 120];
        if (v8)
        {
          *(void *)&v71[k + 128] = v8;
          operator delete(v8);
        }
      }
      for (uint64_t m = 0; m != -120; m -= 24)
      {
        int v10 = *(void **)&v71[m];
        if (v10)
        {
          *(void *)&v71[m + 8] = v10;
          operator delete(v10);
        }
      }
    }
    if (*(unsigned char *)(a1 + 1284))
    {
      sub_10181458C(1, (uint64_t)v66, (uint64_t)buf);
      for (uint64_t n = 0; n != 120; n += 24)
        sub_1000F4EBC((uint64_t)v66 + n, (__n128 *)&buf[n]);
      for (iuint64_t i = 120; ii != 240; ii += 24)
        sub_1000F4EBC((uint64_t)v66 + ii, (__n128 *)&buf[ii]);
      for (juint64_t j = 0; jj != -120; jj -= 24)
      {
        int v14 = *(void **)&v71[jj + 120];
        if (v14)
        {
          *(void *)&v71[jj + 128] = v14;
          operator delete(v14);
        }
      }
      for (kuint64_t k = 0; kk != -120; kk -= 24)
      {
        int v16 = *(void **)&v71[kk];
        if (v16)
        {
          *(void *)&v71[kk + 8] = v16;
          operator delete(v16);
        }
      }
    }
    if (sub_100D33A54(a1 + 2268))
    {
      int v17 = *(_DWORD **)(a1 + 3528);
      sub_10183163C((uint64_t)v55, (uint64_t)v66);
      if (v17[5]) {
        BOOL v18 = v17[17] == 0;
      }
      else {
        BOOL v18 = 1;
      }
      int v19 = v18;
      if (v17[6]) {
        BOOL v20 = v17[18] == 0;
      }
      else {
        BOOL v20 = 1;
      }
      int v21 = v20;
      if (v17[7]) {
        BOOL v22 = v17[19] == 0;
      }
      else {
        BOOL v22 = 1;
      }
      int v23 = v22;
      if (v17[9]) {
        BOOL v24 = v17[21] == 0;
      }
      else {
        BOOL v24 = 1;
      }
      int v25 = v24;
      if (sub_1000FFBA8())
      {
        __int16 v26 = (_DWORD *)sub_1017BE0C0((void *)(a1 + 3528), 1);
        BOOL v27 = (_DWORD *)sub_1017BE0C0((void *)(a1 + 3528), 1);
        if (v27[5]) {
          char v28 = v19;
        }
        else {
          char v28 = 1;
        }
        int v19 = (v28 & 1) != 0 || v26[17] == 0;
        if (v27[6]) {
          char v34 = v21;
        }
        else {
          char v34 = 1;
        }
        int v21 = (v34 & 1) != 0 || v26[18] == 0;
        if (v27[7]) {
          char v35 = v23;
        }
        else {
          char v35 = 1;
        }
        int v23 = (v35 & 1) != 0 || v26[19] == 0;
        if (v27[9]) {
          char v36 = v25;
        }
        else {
          char v36 = 1;
        }
        int v25 = (v36 & 1) != 0 || v26[21] == 0;
      }
      sub_10181480C(v19, (uint64_t)&v58, v62);
      sub_10181480C(v21, (uint64_t)v61, v65);
      sub_10181480C(v23, (uint64_t)&v59, v63);
      sub_10181480C(v25, (uint64_t)&v60, v64);
      sub_1019BC508((uint64_t)v55);
      int v37 = sub_101814768(a1, (uint64_t)v55);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v38 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v68 = v37;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#rti,injectedBlockList in emergency,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v53 = 67240192;
        int v54 = v37;
        __int16 v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::injectAllFormsOfRti()", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
      for (muint64_t m = 0; mm != -15; mm -= 3)
      {
        int v40 = (void *)v65[mm];
        if (v40)
        {
          v65[mm + 1] = v40;
          operator delete(v40);
        }
      }
      for (nuint64_t n = 0; nn != -120; nn -= 24)
      {
        uint64_t v42 = *(void **)&v61[nn];
        if (v42)
        {
          *(void *)&v61[nn + 8] = v42;
          operator delete(v42);
        }
      }
    }
    else
    {
      int v29 = sub_101814768(a1, (uint64_t)v66);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = *(_DWORD *)(a1 + 1284);
        *(_DWORD *)uint64_t buf = 67240448;
        int v68 = v29;
        __int16 v69 = 1026;
        int v70 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#rti,injectedBlockList,%{public}d,blockedcons,0x%{public}x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v32 = *(_DWORD *)(a1 + 1284);
        v55[0] = 67240448;
        v55[1] = v29;
        __int16 v56 = 1026;
        int v57 = v32;
        int v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::injectAllFormsOfRti()", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
    }
    if (!*(unsigned char *)(a1 + 2016)) {
      sub_101814948(a1);
    }
    for (uint64_t i1 = 0; i1 != -120; i1 -= 24)
    {
      int v44 = *(void **)((char *)&v66[13] + i1 + 8);
      if (v44)
      {
        *(void *)((char *)&v66[14] + i1) = v44;
        operator delete(v44);
      }
    }
    for (uint64_t i2 = 0; i2 != -120; i2 -= 24)
    {
      uint64_t v46 = *(void **)((char *)&v66[6] + i2);
      if (v46)
      {
        *(void *)((char *)&v66[6] + i2 + 8) = v46;
        operator delete(v46);
      }
    }
    uint64_t v47 = v52;
    uint64_t v52 = 0;
    if (v47) {
      sub_100852AF8((uint64_t)&v52, v47);
    }
  }
}

void sub_1018143FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_101811C74((uint64_t)&a15);
  sub_101811C74((uint64_t)&a45);
  uint64_t v46 = a12;
  a12 = 0;
  if (v46) {
    sub_100852AF8((uint64_t)&a12, v46);
  }
  _Unwind_Resume(a1);
}

void *sub_10181446C(uint64_t a1)
{
  uint64_t v1 = 3;
  if (!*(unsigned char *)(a1 + 2184)) {
    uint64_t v1 = 1;
  }
  v3[0] = off_102340A08;
  v3[1] = v1;
  v3[3] = v3;
  sub_1018D6764(a1 + 1704, (uint64_t)v3);
  return sub_1017C825C(v3);
}

void sub_101814504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101814518()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102489078, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102489078))
  {
    byte_102489070 = sub_10073CE10();
    __cxa_guard_release(&qword_102489078);
  }
  return byte_102489070;
}

void sub_101814574(_Unwind_Exception *a1)
{
}

void sub_10181458C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10183163C(a3, a2);
  if (a1)
  {
    if ((a1 & 4) != 0)
    {
      unsigned int v5 = sub_1019BC03C(3);
      unsigned __int8 v10 = 1;
      sub_100BC9C68(__p, v5, &v10);
      sub_1019BC224(a3, 3, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
    if ((a1 & 8) != 0)
    {
      unsigned int v6 = sub_1019BC03C(4);
      unsigned __int8 v10 = 1;
      sub_100BC9C68(__p, v6, &v10);
      sub_1019BC224(a3, 4, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
    if ((a1 & 2) != 0)
    {
      unsigned int v7 = sub_1019BC03C(1);
      unsigned __int8 v10 = 1;
      sub_100BC9C68(__p, v7, &v10);
      sub_1019BC224(a3, 1, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
    if (a1)
    {
      unsigned int v8 = sub_1019BC03C(0);
      unsigned __int8 v10 = 1;
      sub_100BC9C68(__p, v8, &v10);
      sub_1019BC224(a3, 0, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
    if ((a1 & 0x10) != 0)
    {
      unsigned int v9 = sub_1019BC03C(2);
      unsigned __int8 v10 = 1;
      sub_100BC9C68(__p, v9, &v10);
      sub_1019BC224(a3, 2, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_10181470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  sub_101811C74(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_101814768(uint64_t a1, uint64_t a2)
{
  v4[0] = off_1023406E8;
  v4[1] = a2;
  v4[3] = v4;
  uint64_t v2 = sub_1018D6764(a1 + 1704, (uint64_t)v4);
  sub_1017C825C(v4);
  return v2;
}

void sub_1018147F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10181480C(int a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    sub_101831748((void **)a2, ((uint64_t)(a3[1] - *a3) >> 1) + ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1));
    unsigned int v5 = (_WORD *)*a3;
    unsigned int v6 = (_WORD *)a3[1];
    if ((_WORD *)*a3 != v6)
    {
      unsigned int v7 = (void *)(a2 + 16);
      unsigned int v8 = *(_WORD **)(a2 + 8);
      do
      {
        if ((unint64_t)v8 >= *v7)
        {
          uint64_t v10 = *(_WORD **)a2;
          uint64_t v11 = (uint64_t)v8 - *(void *)a2;
          if (v11 <= -3) {
            sub_1001D7FD4();
          }
          uint64_t v12 = v11 >> 1;
          unint64_t v13 = *v7 - (void)v10;
          if (v13 <= (v11 >> 1) + 1) {
            uint64_t v14 = v12 + 1;
          }
          else {
            uint64_t v14 = *v7 - (void)v10;
          }
          if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v15 = v14;
          }
          if (v15)
          {
            int v16 = (char *)sub_100C3D5E0(a2 + 16, v15);
            uint64_t v10 = *(_WORD **)a2;
            unsigned int v8 = *(_WORD **)(a2 + 8);
          }
          else
          {
            int v16 = 0;
          }
          int v17 = &v16[2 * v12];
          *(_WORD *)int v17 = *v5;
          unsigned int v9 = v17 + 2;
          while (v8 != v10)
          {
            __int16 v18 = *--v8;
            *((_WORD *)v17 - 1) = v18;
            v17 -= 2;
          }
          *(void *)a2 = v17;
          *(void *)(a2 + 8) = v9;
          *(void *)(a2 + 16) = &v16[2 * v15];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *unsigned int v8 = *v5;
          unsigned int v9 = v8 + 1;
        }
        *(void *)(a2 + 8) = v9;
        ++v5;
        unsigned int v8 = v9;
      }
      while (v5 != v6);
      unsigned int v5 = (_WORD *)*a3;
    }
    a3[1] = v5;
  }
}

void *sub_101814948(uint64_t a1)
{
  uint64_t v1 = 2 * *(unsigned __int8 *)(a1 + 2184);
  v3[0] = off_102340968;
  v3[1] = v1;
  v3[3] = v3;
  sub_1018D6764(a1 + 1704, (uint64_t)v3);
  return sub_1017C825C(v3);
}

void sub_1018149D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1018149EC(uint64_t a1)
{
  sub_1019275C0(a1);
  id result = (void *)sub_101814518();
  if (result)
  {
    int v3 = (*(_DWORD *)(a1 + 1284) & 0x26 | (16 * ((*(_DWORD *)(a1 + 1284) >> 3) & 1)) | (*(_DWORD *)(a1 + 1284) >> 1) & 8) ^ 0x3F;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#bb,constellationControl,0x%{public}x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v9 = 67240192;
      int v10 = v3;
      unsigned int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::sendPermanentConstellationConfig()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    unsigned int v6 = off_102340788;
    int v7 = v3;
    unsigned int v8 = &v6;
    sub_1018D6764(a1 + 1704, (uint64_t)&v6);
    return sub_1017C825C(&v6);
  }
  return result;
}

void sub_101814C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_101814C20(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 2264);
  *(unsigned char *)(a1 + 2264) = 1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 2264);
    v7[0] = 68289794;
    v7[1] = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = "onConnected";
    __int16 v12 = 1026;
    int v13 = v2 ^ 1;
    __int16 v14 = 1026;
    int v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"wasDisconnected\":%{public}hhd, \"fConnected\":%{public}hhd}", (uint8_t *)v7, 0x28u);
  }
  if (!v2)
  {
    sub_101814D9C(a1);
    sub_101934EC0(**(void **)(a1 + 2248));
    if (sub_1000FFBA8())
    {
      unsigned int v5 = (uint64_t *)sub_101813194(a1 + 2248, 1);
      sub_101934EC0(*v5);
    }
  }
  sub_1019271B8(a1, 1);
  sub_10181360C(a1);
  sub_10189AD38(*(void *)(a1 + 2648), 1);
  return sub_10184B760(a1 + 3792, 1);
}

void *sub_101814D9C(uint64_t a1)
{
  sub_1018220FC(a1);
  sub_101822250(a1);
  sub_101936ED0(**(void **)(a1 + 2248));
  if (sub_1000FFBA8())
  {
    int v2 = (uint64_t *)sub_101813194(a1 + 2248, 1);
    sub_101936ED0(*v2);
  }
  sub_1018223B4(a1);
  sub_101822454(a1);
  sub_1018224FC(a1);
  sub_101822598(a1);
  sub_101819C54(a1);
  sub_101817614(a1, 1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    int v10 = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2081;
    __int16 v14 = "sendSetGnssEngineMonitorConfig";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v8[0] = off_102341DF8;
  v8[3] = v8;
  sub_1018D6764(a1 + 1704, (uint64_t)v8);
  sub_1017C825C(v8);
  unsigned __int16 v6 = sub_100743C68();
  if (v6 >= 0x100u)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2081;
      __int16 v14 = "sendSetWwanAntTuneL5BlankingControl";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    v7[0] = off_102341E98;
    v7[1] = &v6;
    v7[3] = v7;
    sub_1018D6764(a1 + 1704, (uint64_t)v7);
    sub_1017C825C(v7);
  }
  id result = sub_1018149EC(a1);
  if (*(unsigned char *)(a1 + 2184)) {
    return sub_101814948(a1);
  }
  return result;
}

void sub_101815034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017C825C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10181505C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2264);
    v5[0] = 68289538;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2082;
    int v9 = "onDisConnected";
    __int16 v10 = 1026;
    int v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"fConnected\":%{public}hhd}", (uint8_t *)v5, 0x22u);
  }
  *(unsigned char *)(a1 + 2264) = 0;
  sub_1019271B8(a1, 0);
  sub_10181360C(a1);
  sub_10189AD38(*(void *)(a1 + 2648), 0);
  return sub_10184B760(a1 + 3792, 0);
}

uint64_t sub_101815188(uint64_t a1)
{
  *(void *)a1 = off_10233F528;
  uint64_t v2 = a1 + 1704;
  v18[3] = 0;
  sub_1018D0594(a1 + 1704, 1, (uint64_t)v18);
  sub_10068280C(v18);
  v17[3] = 0;
  sub_1018D0594(v2, 0, (uint64_t)v17);
  sub_10068280C(v17);
  v16[3] = 0;
  sub_1018D066C(v2, (uint64_t)v16);
  sub_1017C6FF0(v16);
  dispatch_release(*(dispatch_object_t *)(a1 + 2032));

  *(void *)(a1 + 1672) = 0;
  int v15 = (void **)(a1 + 4104);
  sub_1000FA7C8(&v15);
  sub_101849058(a1 + 3792);
  int v3 = *(std::__shared_weak_count **)(a1 + 3544);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 3528);
  *(void *)(a1 + 3528) = 0;
  if (v4) {
    sub_1017C6CD8(a1 + 3528, v4);
  }
  sub_10071874C(a1 + 3472);
  sub_10181712C((uint64_t *)(a1 + 3192), 0);
  sub_1017C765C((qmi::Client **)(a1 + 3184), 0);
  sub_1018C755C(a1 + 2952);
  if (*(char *)(a1 + 2951) < 0) {
    operator delete(*(void **)(a1 + 2928));
  }
  for (uint64_t i = 0; i != -120; i -= 24)
  {
    __int16 v6 = *(void **)(a1 + i + 2896);
    if (v6)
    {
      *(void *)(a1 + i + 2904) = v6;
      operator delete(v6);
    }
  }
  for (uint64_t j = 0; j != -120; j -= 24)
  {
    __int16 v8 = *(void **)(a1 + j + 2776);
    if (v8)
    {
      *(void *)(a1 + j + 2784) = v8;
      operator delete(v8);
    }
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 2672);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  __int16 v10 = *(std::__shared_weak_count **)(a1 + 2656);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  int v11 = *(std::__shared_weak_count **)(a1 + 2640);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  sub_10071874C(a1 + 2568);
  uint64_t v12 = *(void *)(a1 + 2248);
  *(void *)(a1 + 2248) = 0;
  if (v12) {
    sub_101831594(a1 + 2248, v12);
  }
  sub_101831990((uint64_t *)(a1 + 2232), 0);
  sub_10183184C((void *)(a1 + 2200));
  if (*(char *)(a1 + 2175) < 0) {
    operator delete(*(void **)(a1 + 2152));
  }
  sub_101824858((const void **)(a1 + 2024), 0);
  *(void *)(a1 + 1704) = off_10233C6A0;
  __int16 v13 = *(std::__shared_weak_count **)(a1 + 1976);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  sub_1018D046C(v2);
  sub_101926DBC(a1);
  return a1;
}

void sub_1018153D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1018153E0(uint64_t a1)
{
  sub_101815188(a1);

  operator delete();
}

uint64_t sub_101815418(uint64_t a1, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(a1 + 3560) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 3556) = v2;
  return sub_10184B11C(a1 + 3792, 0, 1);
}

uint64_t sub_101815438(uint64_t a1)
{
  return sub_10184B4B8((void *)(a1 + 3792), 0);
}

void sub_101815444(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,onGnssStartComplete,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::onGnssStartComplete(BOOL)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_1018155F0(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,onGnssStopComplete,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::onGnssStopComplete(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 3788))
  {
    *(unsigned char *)(a1 + 3788) = 0;
    if (a2) {
      int v5 = 7;
    }
    else {
      int v5 = 8;
    }
    sub_1019271B8(a1, v5);
  }
}

uint64_t sub_1018157C0(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gnss,setBasebandCausesL1InterferenceAssertion,state,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t result = sub_100743AA0();
  if (result)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnss,concurrency", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return (uint64_t)sub_1019271B8(a1, 7);
  }
  else if (*(unsigned __int8 *)(a1 + 3789) != a2)
  {
    *(unsigned char *)(a1 + 3789) = a2;
    if (a2)
    {
      *(unsigned char *)(a1 + 3788) = 1;
      return sub_10184B11C(a1 + 3792, 1, 0);
    }
    else
    {
      return sub_10184B4B8((void *)(a1 + 3792), 1);
    }
  }
  return result;
}

BOOL sub_101815AF4(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,startInternal()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    LOWORD(v31) = 0;
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  int v5 = *(unsigned __int8 *)(a1 + 2016);
  if (*(unsigned char *)(a1 + 2016))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,Early return, already started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v31) = 0;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v7);
LABEL_47:
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10233FB68);
    }
    int v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 1, Eureka", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10233FB68);
      }
      LOWORD(v31) = 0;
      char v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    if (sub_10015F760())
    {
      id v31 = [[objc_msgSend(*(id *)(a1 + 1672), "silo") queue];
      sub_101816308();
    }
    *(unsigned char *)(a1 + 2016) = 1;
    int v9 = *a2;
    *(_WORD *)(a1 + 3560) = *((_WORD *)a2 + 2);
    *(_DWORD *)(a1 + 3556) = v9;
    *(unsigned char *)(a1 + 2291) = 0;
    *(double *)(a1 + 88) = sub_10016C458();
    ++*(_DWORD *)(a1 + 1240);
    if (*(unsigned char *)(a1 + 2056)) {
      *(unsigned char *)(a1 + 2056) = 0;
    }
    if (*(unsigned char *)(a1 + 2136)) {
      *(unsigned char *)(a1 + 2136) = 0;
    }
    sub_10181446C(a1);
    sub_1018149EC(a1);
    if (*(unsigned char *)(a1 + 2294)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 272))(a1, 1);
    }
    v30[0] = off_102340828;
    v30[1] = a1;
    v30[3] = v30;
    sub_1018D6764(a1 + 1704, (uint64_t)v30);
    sub_1017C825C(v30);
    *(unsigned char *)(a1 + 1666) = 1;
    *(void *)__int16 v43 = 0;
    *(_OWORD *)&v43[16] = 0u;
    *(_OWORD *)&v41[16] = 0u;
    *(void *)__int16 v41 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)uint64_t buf = 0u;
    long long v33 = 0u;
    DWORD2(v37) = 1;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&v41[8] = _Q1;
    long long v42 = _Q1;
    *(_OWORD *)&v43[8] = _Q1;
    long long v44 = 0u;
    memset(v45, 0, sizeof(v45));
    uint64_t v46 = 0;
    uint64_t v47 = 1065353216;
    long long v48 = 0x100000005uLL;
    *(_OWORD *)(a1 + 2368) = 0u;
    *(_OWORD *)(a1 + 2352) = 0u;
    *(_OWORD *)(a1 + 2336) = 0u;
    *(_OWORD *)(a1 + 2320) = 0u;
    long long v15 = v36;
    long long v16 = v37;
    long long v17 = v38;
    *(_OWORD *)(a1 + 2432) = v39;
    *(_OWORD *)(a1 + 2416) = v17;
    *(_OWORD *)(a1 + 2400) = v16;
    *(_OWORD *)(a1 + 2384) = v15;
    long long v18 = v40;
    long long v19 = *(_OWORD *)v41;
    long long v20 = *(_OWORD *)&v41[16];
    *(_OWORD *)(a1 + 2496) = v42;
    *(_OWORD *)(a1 + 2480) = v20;
    *(_OWORD *)(a1 + 2464) = v19;
    *(_OWORD *)(a1 + 2448) = v18;
    long long v21 = *(_OWORD *)v43;
    long long v22 = *(_OWORD *)&v43[16];
    long long v23 = v44;
    *(void *)(a1 + 2560) = *(void *)&v45[0];
    *(_OWORD *)(a1 + 2544) = v23;
    *(_OWORD *)(a1 + 2528) = v22;
    *(_OWORD *)(a1 + 2512) = v21;
    sub_10084E2F4(a1 + 2568, (uint64_t *)v45 + 1);
    *(_OWORD *)(a1 + 2608) = v48;
    sub_10071874C((uint64_t)v45 + 8);
    sub_101816434(a1);
    if (*(void *)(a1 + 3192)) {
      *(_WORD *)(a1 + 2297) = 0;
    }
    sub_101813B28(a1);
    sub_101816574(a1, *(_DWORD *)(a1 + 2144));
    (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 208))(a1);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    BOOL v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v25 = *(_DWORD *)(a1 + 4096);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "XOCalibState,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v29 = *(_DWORD *)(a1 + 4096);
      LODWORD(v31) = 67240192;
      HIDWORD(v31) = v29;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v7);
      goto LABEL_47;
    }
  }
  return v5 != 0;
}

void sub_1018162EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101816308()
{
}

void sub_1018163F0(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10084FC8C((uint64_t *)va);
  sub_10084FB84((uint64_t *)va1);
  operator delete();
}

void sub_101816434(uint64_t a1)
{
  *(void *)(a1 + 2256) = 0;
  uint64_t v2 = *(void *)(a1 + 3536);
  if (v2) {
    sub_1019A5934(v2);
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 2240), 0, 0xEE6B2800uLL, 0x1DCD6500uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 2016);
    int v5 = *(unsigned __int8 *)(a1 + 2264);
    int v6 = *(_DWORD *)(a1 + 2260);
    int v7 = *(_DWORD *)(a1 + 2256);
    v8[0] = 68290050;
    v8[1] = 0;
    __int16 v9 = 2082;
    int v10 = "";
    __int16 v11 = 1026;
    int v12 = v4;
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 1026;
    int v16 = v6;
    __int16 v17 = 1026;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,started\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)v8, 0x2Au);
  }
}

void sub_101816574(uint64_t a1, unsigned int a2)
{
  int v4 = (const char *)(a1 + 2152);
  int v5 = *(char *)(a1 + 2175);
  if (v5 < 0)
  {
    if (!*(void *)(a1 + 2160)) {
      goto LABEL_18;
    }
    int v6 = *(const char **)v4;
  }
  else
  {
    int v6 = (const char *)(a1 + 2152);
    if (!v5)
    {
LABEL_18:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#ee,empty filename", v29, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v29, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        *(_WORD *)uint64_t buf = 0;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::injectXtra(uint32_t)", "%s\n", v12);
LABEL_39:
        if (v12 != v29) {
          free(v12);
        }
        return;
      }
      return;
    }
  }
  if (sub_1000A569C(v6))
  {
    sub_100826DE8((void (__cdecl ***)(std::ifstream *__hidden))v29);
    *(_DWORD *)&v29[*(void *)(*(void *)v29 - 24) + 8] &= ~0x1000u;
    *(void *)(a1 + 2176) = sub_100B617A4(v29);
    unsigned __int8 v16 = 0;
    double v7 = sub_10187A068(a1 + 3200, &v16) + (double)*(unint64_t *)(a1 + 2176) * -0.000000001;
    double v15 = v7;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = v4;
      if (*(char *)(a1 + 2175) < 0) {
        __int16 v9 = *(const char **)v4;
      }
      uint64_t v10 = *(void *)(a1 + 2176);
      *(_DWORD *)uint64_t buf = 68290307;
      *(_DWORD *)int v18 = 0;
      *(_WORD *)&void v18[4] = 2082;
      *(void *)&v18[6] = "";
      __int16 v19 = 2081;
      long long v20 = v9;
      __int16 v21 = 1026;
      unsigned int v22 = a2;
      __int16 v23 = 2050;
      uint64_t v24 = v10;
      __int16 v25 = 2050;
      double v26 = v7;
      __int16 v27 = 1026;
      int v28 = v16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ee,feeding assistance\", \"file\":%{private, location:escape_only}s, \"maxSize\":%{public}d, \"header GPS ns\":%{public}llu, \"ageSeconds\":\"%{public}f\", \"isAgeReliable\":%{public}hhd}", buf, 0x3Cu);
    }
    ++*(void *)(a1 + 624);
    sub_10188E6C0(a1 + 8, v4, 1, 2, &v15);
    if (!*(unsigned char *)(a1 + 2016)) {
      sub_10181446C(a1);
    }
    sub_1018AA3AC((uint64_t *)(a1 + 2192), v4, a2, *(unsigned __int8 *)(a1 + 2185));
    if (!*(unsigned char *)(a1 + 2016)) {
      sub_101814948(a1);
    }
    std::filebuf::~filebuf();
    std::istream::~istream();
    std::ios::~ios();
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v14 = v4;
      if (*(char *)(a1 + 2175) < 0) {
        int v14 = *(const char **)v4;
      }
      *(_DWORD *)int v29 = 136380675;
      *(void *)&v29[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ee,file does not exist,%{private}s", v29, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v29, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      if (*(char *)(a1 + 2175) < 0) {
        int v4 = *(const char **)v4;
      }
      *(_DWORD *)uint64_t buf = 136380675;
      *(void *)int v18 = v4;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::injectXtra(uint32_t)", "%s\n", v12);
      goto LABEL_39;
    }
  }
}

void sub_101816AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_100826FAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101816B0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2664);
  if (result) {
    return sub_1018B1F7C(result);
  }
  return result;
}

uint64_t sub_101816B1C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2664);
  if (result) {
    return sub_1018B2CFC(result);
  }
  return result;
}

BOOL sub_101816B2C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,stopInternal()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaController::stopInternal()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  int v3 = *(unsigned __int8 *)(a1 + 2016);
  if (*(unsigned char *)(a1 + 2016))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10233FB68);
    }
    int v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 0, Eureka", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10233FB68);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaController::stopInternal()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_101816FF8(a1);
    v10[0] = off_1023408E8;
    v10[1] = a1;
    v10[3] = v10;
    sub_1018D6764(a1 + 1704, (uint64_t)v10);
    sub_1017C825C(v10);
    *(_WORD *)(a1 + 2297) = 0;
    if (*(unsigned char *)(a1 + 2056)) {
      *(unsigned char *)(a1 + 2056) = 0;
    }
    if (*(unsigned char *)(a1 + 2136)) {
      *(unsigned char *)(a1 + 2136) = 0;
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
    sub_101814948(a1);
    *(unsigned char *)(a1 + 2016) = 0;
    sub_10181712C((uint64_t *)(a1 + 3192), 0);
    *(double *)(a1 + 2304) = sub_10016C458();
    *(unsigned char *)(a1 + 2312) = 1;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Early return, was not started, hence not stopping", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaController::stopInternal()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return v3 == 0;
}

void sub_101816FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101816FF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3536);
  if (v2) {
    sub_1019A59B8(v2);
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 2240), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 2016);
    int v5 = *(unsigned __int8 *)(a1 + 2264);
    int v6 = *(_DWORD *)(a1 + 2260);
    int v7 = *(_DWORD *)(a1 + 2256);
    v8[0] = 68290050;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 1026;
    int v12 = v4;
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 1026;
    int v16 = v6;
    __int16 v17 = 1026;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,stopped\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)v8, 0x2Au);
  }
}

uint64_t sub_10181712C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101835284(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10181717C(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10233FB68);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@ClxGps, shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10233FB68);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::shutdown()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return sub_1018D6664(a1 + 1704);
}

void *sub_101817340(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v4[0] = off_102340AA8;
  v4[1] = a2;
  _DWORD v4[2] = a3;
  v4[3] = v4;
  sub_1018D6764(a1 + 1704, (uint64_t)v4);
  return sub_1017C825C(v4);
}

void sub_1018173CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1018173E0(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240448;
    BOOL v15 = sub_100D33A54(a1 + 2268);
    __int16 v16 = 1026;
    int v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SignalEnvConfig,inEmergency,%{public}d,fSignalEnvironment,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v10 = 67240448;
    BOOL v11 = sub_100D33A54(a1 + 2268);
    __int16 v12 = 1026;
    int v13 = a2;
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::injectAssistanceSignalEnv(CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  int v7 = off_102340B48;
  int v8 = a2;
  __int16 v9 = &v7;
  sub_1018D6764(a1 + 1704, (uint64_t)&v7);
  return sub_1017C825C(&v7);
}

void sub_1018175F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_101817614(uint64_t a1, int a2)
{
  int v4 = sub_1000FFBA8();
  int v5 = *(unsigned __int8 *)(*(void *)(a1 + 3528) + 5);
  if (!v4) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(*(void *)(a1 + 3528) + 5))
  {
    int v5 = *(unsigned __int8 *)(sub_1017BE0C0((void *)(a1 + 3528), 1) + 5);
LABEL_4:
    int v6 = v5 != 0;
    goto LABEL_5;
  }
  int v6 = 0;
LABEL_5:
  if (sub_100D33A54(a1 + 2268))
  {
    *(unsigned char *)(a1 + 2296) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "earlyReturnConfig,NotAllowed,InEmergency,isEnabled,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_12;
      }
      goto LABEL_35;
    }
  }
  else if ((a2 & 1) != 0 || *(unsigned __int8 *)(a1 + 2295) != v6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(unsigned __int8 *)(a1 + 2295);
      *(_DWORD *)uint64_t buf = 67109632;
      int v22 = a2;
      __int16 v23 = 1024;
      int v24 = v11;
      __int16 v25 = 1024;
      int v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "earlyReturnConfig,Allowed,isForcedUpdate,%d,fIsEarlyReturnEnabled,%d,isEnabled,%d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v12 = *(unsigned __int8 *)(a1 + 2295);
      int v15 = 67109632;
      int v16 = a2;
      __int16 v17 = 1024;
      int v18 = v12;
      __int16 v19 = 1024;
      int v20 = v6;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::updateEarlyReturnConfig(BOOL)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *(unsigned char *)(a1 + 2295) = v6;
    v14[0] = off_102340BE8;
    v14[1] = a1;
    v14[3] = v14;
    sub_1018D6764(a1 + 1704, (uint64_t)v14);
    sub_1017C825C(v14);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "earlyReturnConfig,NotNeeded,isEnabled,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_12:
        int v15 = 67109120;
        int v16 = v6;
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::updateEarlyReturnConfig(BOOL)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
LABEL_35:
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
      goto LABEL_12;
    }
  }
}

void sub_101817B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101817B2C(uint64_t a1)
{
  sub_10102ECD4((uint64_t)&v48, *(uint64_t **)(a1 + 3528));
  char v147 = *(unsigned char *)(a1 + 2292);
  char v2 = v147;
  __int16 v149 = 0;
  int v3 = (char *)operator new(0x548uLL);
  *(void *)int v3 = off_102340C88;
  char v4 = v49;
  *((void *)v3 + 1) = v48;
  v3[16] = v4;
  long long v5 = v52;
  *(_OWORD *)(v3 + 72) = v53;
  long long v6 = v55;
  *(_OWORD *)(v3 + 88) = v54;
  *(_OWORD *)(v3 + 104) = v6;
  *((void *)v3 + 15) = v56;
  long long v7 = v51;
  *(_OWORD *)(v3 + 24) = v50;
  *(_OWORD *)(v3 + 40) = v7;
  *(_OWORD *)(v3 + 56) = v5;
  *((_OWORD *)v3 + 8) = v57;
  long long v57 = 0u;
  uint64_t v8 = v59;
  *((void *)v3 + 18) = v58;
  *((void *)v3 + 19) = v8;
  *((_OWORD *)v3 + 10) = v60;
  *((void *)v3 + 22) = v61;
  long long v60 = 0u;
  uint64_t v58 = 0;
  uint64_t v61 = 0;
  long long v9 = v63;
  *(_OWORD *)(v3 + 184) = v62;
  *(_OWORD *)(v3 + 200) = v9;
  long long v10 = v64;
  *((void *)v3 + 29) = v65;
  *(_OWORD *)(v3 + 216) = v10;
  uint64_t v65 = 0;
  long long v64 = 0u;
  v3[240] = v66;
  *(_OWORD *)(v3 + 248) = v67;
  *((void *)v3 + 33) = v68;
  long long v67 = 0u;
  *((_DWORD *)v3 + 68) = v69;
  LOWORD(v8) = v70;
  v3[282] = v71;
  *((_WORD *)v3 + 140) = v8;
  long long v11 = v72;
  *((void *)v3 + 38) = v73;
  *((_OWORD *)v3 + 18) = v11;
  long long v72 = 0u;
  uint64_t v68 = 0;
  uint64_t v73 = 0;
  long long v12 = v74;
  uint64_t v13 = v77;
  *((void *)v3 + 41) = v75;
  *(_OWORD *)(v3 + 312) = v12;
  long long v74 = 0u;
  long long v14 = v76;
  *((void *)v3 + 44) = v13;
  *((_OWORD *)v3 + 21) = v14;
  long long v76 = 0u;
  uint64_t v75 = 0;
  uint64_t v77 = 0;
  long long v15 = v78;
  uint64_t v16 = v81;
  *((void *)v3 + 47) = v79;
  *(_OWORD *)(v3 + 360) = v15;
  long long v17 = v80;
  *((void *)v3 + 50) = v16;
  *((_OWORD *)v3 + 24) = v17;
  long long v80 = 0u;
  uint64_t v81 = 0;
  *((_WORD *)v3 + 204) = v82;
  *((_OWORD *)v3 + 26) = v83;
  *((void *)v3 + 54) = v84;
  long long v83 = 0u;
  uint64_t v84 = 0;
  long long v18 = v86;
  *(_OWORD *)(v3 + 440) = v85;
  *(_OWORD *)(v3 + 456) = v18;
  long long v19 = v87;
  long long v20 = v88;
  long long v21 = v90;
  *(_OWORD *)(v3 + 504) = v89;
  *(_OWORD *)(v3 + 520) = v21;
  *(_OWORD *)(v3 + 472) = v19;
  *(_OWORD *)(v3 + 488) = v20;
  long long v22 = v91;
  long long v23 = v92;
  *(_OWORD *)(v3 + 596) = *(_OWORD *)&v94[12];
  long long v24 = *(_OWORD *)v94;
  *(_OWORD *)(v3 + 568) = v93;
  *(_OWORD *)(v3 + 584) = v24;
  *(_OWORD *)(v3 + 536) = v22;
  *(_OWORD *)(v3 + 552) = v23;
  *((_WORD *)v3 + 308) = v95;
  v3[618] = v96;
  *((_OWORD *)v3 + 39) = *(_OWORD *)v97;
  *((void *)v3 + 80) = *(void *)&v97[16];
  *(void *)__int16 v97 = 0;
  *(_OWORD *)(v3 + 648) = v98;
  *((void *)v3 + 83) = v99;
  uint64_t v99 = 0;
  *(_OWORD *)&v97[8] = 0u;
  long long v98 = 0u;
  long long v25 = v100;
  *((void *)v3 + 86) = v101;
  *((_OWORD *)v3 + 42) = v25;
  long long v100 = 0u;
  uint64_t v101 = 0;
  long long v26 = v102;
  *((void *)v3 + 89) = v103;
  *(_OWORD *)(v3 + 696) = v26;
  long long v27 = v104;
  *((void *)v3 + 92) = v105;
  *((_OWORD *)v3 + 45) = v27;
  long long v104 = 0u;
  uint64_t v105 = 0;
  *((_WORD *)v3 + 372) = v106;
  *((_OWORD *)v3 + 47) = v107;
  *((void *)v3 + 96) = v108;
  long long v107 = 0u;
  uint64_t v108 = 0;
  long long v28 = v110;
  *(_OWORD *)(v3 + 776) = v109;
  *(_OWORD *)(v3 + 792) = v28;
  long long v29 = v111;
  long long v30 = v112;
  long long v31 = v114;
  *(_OWORD *)(v3 + 840) = v113;
  *(_OWORD *)(v3 + 856) = v31;
  *(_OWORD *)(v3 + 808) = v29;
  *(_OWORD *)(v3 + 824) = v30;
  long long v32 = v115;
  long long v33 = v116;
  *(_OWORD *)(v3 + 932) = *(_OWORD *)&v118[12];
  long long v34 = *(_OWORD *)v118;
  *(_OWORD *)(v3 + 904) = v117;
  *(_OWORD *)(v3 + 920) = v34;
  *(_OWORD *)(v3 + 872) = v32;
  *(_OWORD *)(v3 + 888) = v33;
  *(_OWORD *)(v3 + 952) = v119;
  *((void *)v3 + 121) = *(void *)v120;
  long long v35 = *(_OWORD *)&v120[8];
  long long v119 = 0u;
  *(_OWORD *)double v120 = 0u;
  *((_OWORD *)v3 + 61) = v35;
  *((void *)v3 + 124) = *(void *)&v120[24];
  *((void *)v3 + 125) = v121;
  *((_DWORD *)v3 + 252) = v122;
  long long v36 = v123;
  long long v37 = v124;
  long long v38 = v125;
  *((void *)v3 + 133) = v126;
  *(_OWORD *)(v3 + 1048) = v38;
  *(_OWORD *)(v3 + 1016) = v36;
  *(_OWORD *)(v3 + 1032) = v37;
  v3[1072] = v127;
  long long v39 = v128;
  *((void *)v3 + 137) = v129;
  *(_OWORD *)(v3 + 1080) = v39;
  uint64_t v129 = 0;
  *(_OWORD *)&v120[16] = 0u;
  long long v128 = 0u;
  long long v40 = v130[0];
  *(_OWORD *)(v3 + 1116) = *(_OWORD *)((char *)v130 + 12);
  *((_OWORD *)v3 + 69) = v40;
  *((_OWORD *)v3 + 71) = v131;
  *((void *)v3 + 144) = v132;
  long long v131 = 0u;
  uint64_t v132 = 0;
  v3[1160] = v133;
  long long v41 = v134;
  *((void *)v3 + 148) = v135;
  *((_OWORD *)v3 + 73) = v41;
  long long v134 = 0u;
  uint64_t v135 = 0;
  long long v42 = v136[0];
  *(_OWORD *)(v3 + 1204) = *(_OWORD *)((char *)v136 + 12);
  *(_OWORD *)(v3 + 1192) = v42;
  *(_OWORD *)(v3 + 1224) = v137;
  *((void *)v3 + 155) = v138;
  long long v137 = 0u;
  uint64_t v138 = 0;
  long long v43 = v139;
  *((void *)v3 + 158) = v140;
  *((_OWORD *)v3 + 78) = v43;
  long long v139 = 0u;
  uint64_t v140 = 0;
  long long v44 = v141;
  *((void *)v3 + 161) = v142;
  *(_OWORD *)(v3 + 1272) = v44;
  uint64_t v142 = 0;
  long long v141 = 0u;
  long long v45 = v143;
  *((void *)v3 + 164) = v144;
  *((_OWORD *)v3 + 81) = v45;
  long long v143 = 0u;
  uint64_t v144 = 0;
  long long v46 = v145;
  *((void *)v3 + 167) = v146;
  *(_OWORD *)(v3 + 1320) = v46;
  uint64_t v146 = 0;
  long long v145 = 0u;
  v3[1344] = v2;
  __int16 v149 = v3;
  sub_1018D6764(a1 + 1704, (uint64_t)v148);
  sub_1017C825C(v148);
  return sub_10084DD34((uint64_t)&v48);
}

void sub_1018180C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((void *)(v2 - 72));
  sub_10084DD34((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1018180F4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "fetchUmtsApn", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v7 = 0;
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfig()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id v3 = [[[*(id *)(a1 + 1672) vendor] proxyForService:@"CLTelephonyService" forClient:@"CLGnssProvider"];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1018182F4;
  v6[3] = &unk_10233F698;
  v6[4] = a1;
  return [v3 fetchUmtsApnWithReply:v6];
}

void sub_1018182F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  [*(id *)(v3 + 1672) silo];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v15, a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    p_src = &__src;
    if (v17 < 0) {
      p_src = (long long *)__src;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    long long v23 = p_src;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SUPL: UMTS apn:%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v10 = &__src;
    if (v17 < 0) {
      long long v10 = (long long *)__src;
    }
    int v20 = 136315138;
    long long v21 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfig()_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v6 = HIBYTE(v17);
  if (v17 < 0) {
    uint64_t v6 = *((void *)&__src + 1);
  }
  if (v6)
  {
    uint64_t v12 = v15;
    if (SHIBYTE(v17) < 0)
    {
      sub_1000DC48C(&__p, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      long long __p = __src;
      uint64_t v14 = v17;
    }
    long long v19 = 0;
    long long v9 = operator new(0x28uLL);
    *long long v9 = off_102340D88;
    v9[1] = v12;
    *((_OWORD *)v9 + 1) = __p;
    v9[4] = v14;
    long long __p = 0uLL;
    uint64_t v14 = 0;
    long long v19 = v9;
    sub_1018D6764(v3 + 1704, (uint64_t)v18);
    sub_1017C825C(v18);
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "SUPL: can't find usable APN", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v20) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::sendSuplApnConfig()_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__src);
  }
}

void sub_1018186E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10181873C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "fetchUmtsApn,instance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v10 = 67109120;
    int v11 = a2;
    __int16 v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  id v5 = [[[*(id *)(a1 + 1672) vendor] proxyForService:@"CLTelephonyService" forClient:@"CLGnssProvider"];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_101818960;
  v8[3] = &unk_10233C650;
  void v8[4] = a1;
  int v9 = a2;
  return [v5 fetchUmtsApnForInstance:a2 WithReply:v8];
}

void sub_101818960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  [*(id *)(v4 + 1672) silo];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v20, a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  id v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    p_src = &__src;
    if (v22 < 0) {
      p_src = (long long *)__src;
    }
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 136315394;
    long long v30 = p_src;
    __int16 v31 = 1024;
    int v32 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "SUPL: UMTS apn:%s,instance,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v13 = &__src;
    if (v22 < 0) {
      int v13 = (long long *)__src;
    }
    int v14 = *(_DWORD *)(a1 + 40);
    int v25 = 136315394;
    long long v26 = v13;
    __int16 v27 = 1024;
    int v28 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t v8 = HIBYTE(v22);
  if (v22 < 0) {
    uint64_t v8 = *((void *)&__src + 1);
  }
  if (v8)
  {
    uint64_t v16 = v20;
    if (SHIBYTE(v22) < 0)
    {
      sub_1000DC48C(&__p, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      long long __p = __src;
      uint64_t v18 = v22;
    }
    int v11 = *(_DWORD *)(a1 + 40);
    int v19 = v11;
    long long v24 = 0;
    uint64_t v12 = operator new(0x30uLL);
    *uint64_t v12 = off_102340E28;
    v12[1] = v16;
    *((_OWORD *)v12 + 1) = __p;
    void v12[4] = v18;
    long long __p = 0uLL;
    uint64_t v18 = 0;
    *((_DWORD *)v12 + 10) = v11;
    long long v24 = v12;
    sub_1018D6764(v4 + 1704, (uint64_t)v23);
    sub_1017C825C(v23);
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SUPL: can't find usable APN", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v25) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__src);
  }
}

void sub_101818D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101818DE4(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    *(_DWORD *)uint64_t buf = 67109376;
    int v21 = a2;
    __int16 v22 = 1024;
    int v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#supl,sendInjectSuplCertReq,index,%d,len,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v9 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    int v16 = 67109376;
    int v17 = a2;
    __int16 v18 = 1024;
    int v19 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long __p = 0;
  sub_10016989C(&__p, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  uint64_t v15 = 0;
  uint64_t v8 = operator new(0x28uLL);
  *(void *)uint64_t v8 = off_102340EA8;
  v8[8] = a2;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 2) = 0;
  sub_10016989C((void *)v8 + 2, __p, (uint64_t)v12, v12 - (unsigned char *)__p);
  uint64_t v15 = v8;
  sub_1018D6764(a1 + 1704, (uint64_t)v14);
  sub_1017C825C(v14);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_101819060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1018190A4(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendDeleteSuplCert,index,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v10 = 67109120;
    int v11 = a2;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  int v7 = off_102340F28;
  char v8 = a2;
  int v9 = &v7;
  sub_1018D6764(a1 + 1704, (uint64_t)&v7);
  return sub_1017C825C(&v7);
}

void sub_101819290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_1018192AC(uint64_t a1, int a2)
{
  uint64_t v3 = off_102340FA8;
  int v4 = a2;
  id v5 = &v3;
  sub_1018D6764(a1 + 1704, (uint64_t)&v3);
  return sub_1017C825C(&v3);
}

void sub_101819338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_10181934C(uint64_t a1)
{
  v2[0] = off_102341048;
  v2[3] = v2;
  sub_1018D6764(a1 + 1704, (uint64_t)v2);
  return sub_1017C825C(v2);
}

void sub_1018193D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1018193E8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onNilrBegin", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::onNilrBegin()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 2293) = 1;
  return sub_1019271B8(a1, 4);
}

uint64_t *sub_101819590(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onNilrEnd", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::onNilrEnd()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 2293) = 0;
  return sub_1019271B8(a1, 5);
}

BOOL sub_101819734(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != *a3;
}

void sub_101819748()
{
  memset(&v9, 0, sizeof(v9));
  int v7 = 0;
  long long v8 = 0uLL;
  if (sub_100740B14())
  {
    sub_100134750(&__str, "https://iphone-ld.apple.com/xtra/xtra3Mgrbeji.bin");
    std::string::operator=(&v9, &__str);
    sub_101844E1C((uint64_t)&v5);
    uint64_t v0 = std::string::append(&v5, "xtra3Mgrbeji.bin");
  }
  else
  {
    sub_100134750(&__str, "https://iphone-ld.apple.com/xtra/xtra3Mgrbej.bin");
    std::string::operator=(&v9, &__str);
    sub_101844E1C((uint64_t)&v5);
    uint64_t v0 = std::string::append(&v5, "xtra3Mgrbej.bin");
  }
  uint64_t v1 = (void *)v0->__r_.__value_.__r.__words[0];
  v10[0] = v0->__r_.__value_.__l.__size_;
  *(void *)((char *)v10 + 7) = *(std::string::size_type *)((char *)&v0->__r_.__value_.__r.__words[1] + 7);
  char v2 = HIBYTE(v0->__r_.__value_.__r.__words[2]);
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  *(void *)((char *)&v8 + 7) = *(void *)((char *)v10 + 7);
  int v7 = v1;
  *(void *)&long long v8 = v10[0];
  HIBYTE(v8) = v2;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_1000C7F88(&v5);
  memset(&__p, 0, sizeof(__p));
  sub_1005B66DC((uint64_t)v5.__r_.__value_.__l.__data_, "GpsAssistanceUrl", &__p, (uint64_t)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v5.__r_.__value_.__l.__size_);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::operator=(&v9, &__str);
  }
  operator new();
}

void sub_101819934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_101819A08(uint64_t a1, const std::string *a2)
{
  char v2 = a2;
  std::string::operator=((std::string *)(a1 + 2152), a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
      char v2 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 68289283;
    int v8 = 0;
    __int16 v9 = 2082;
    int v10 = "";
    __int16 v11 = 2081;
    uint64_t v12 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ee,injectAssistanceFile\", \"file\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 2264))
  {
    sub_101819C54(a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    std::string v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ee,InjectAssistanceFile,BB not ready", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectAssistanceFile(std::string)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_101819C54(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ee,force BB to request,enter", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::forceBbToRequestXtra()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  v8[0] = off_102342E00;
  v8[1] = a1;
  v8[3] = v8;
  int v3 = sub_1018D6764(a1 + 1704, (uint64_t)v8);
  sub_1017C825C(v8);
  if (v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ee,force BB to request,sent", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      std::string v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::forceBbToRequestXtra()", "%s\n", v5);
LABEL_28:
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ee,force BB to request,send failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      std::string v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::forceBbToRequestXtra()", "%s\n", v5);
      goto LABEL_28;
    }
  }
}

void sub_10181A060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10181A07C()
{
  sub_100134750(&v9, "https://iphone-ld.apple.com/xtra/xtra3Mint.bin");
  sub_101844E1C((uint64_t)&__str);
  uint64_t v0 = std::string::append(&__str, "xtra3Mint.bin");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v7 = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_1000C7F88(&v4);
  memset(&__p, 0, sizeof(__p));
  sub_1005B66DC(v4, "GpsRtiUrl", &__p, (uint64_t)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::operator=(&v9, &__str);
  }
  sub_10181A22C();
}

void sub_10181A1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_10181A22C()
{
}

void sub_10181A304(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_10181A358(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2264))
  {
    sub_101813B28(a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v1 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#ee,injectRtiFile,BB not ready", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      char v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectRtiFile(std::string)", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
}

uint64_t sub_10181A524@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100740A24();
  if (result)
  {
    sub_100134750(&v12, "https://iphone-ld.apple.com/xtra/xtra3Mapc.bin");
    sub_101844E1C((uint64_t)&__str);
    int v3 = std::string::append(&__str, "xtra3Mapc.bin");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v10 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_1000C7F88(&v7);
    memset(&__p, 0, sizeof(__p));
    sub_1005B66DC(v7, "GnssApcUrl", &__p, (uint64_t)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      sub_1000DB0A0(v8);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size) {
      std::string::operator=(&v12, &__str);
    }
    operator new();
  }
  *a1 = 0;
  return result;
}

void sub_10181A670(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t sub_10181A714@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100740A24();
  if (result)
  {
    memset(&v11, 0, sizeof(v11));
    std::string v9 = 0;
    long long v10 = 0uLL;
    if (sub_100740B14())
    {
      std::string::assign(&v11, "https://iphone-ld.apple.com/xtra/xtra3Mgrbeji_eph.bin");
      sub_101844E1C((uint64_t)&__str);
      int v3 = std::string::append(&__str, "xtra3Mgrbeji_eph.bin");
    }
    else
    {
      std::string::assign(&v11, "https://iphone-ld.apple.com/xtra/xtra3Mgrbej_eph.bin");
      sub_101844E1C((uint64_t)&__str);
      int v3 = std::string::append(&__str, "xtra3Mgrbej_eph.bin");
    }
    long long v4 = (void *)v3->__r_.__value_.__r.__words[0];
    *(void *)&long long v12 = v3->__r_.__value_.__l.__size_;
    *(void *)((char *)&v12 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v10 + 7) = *(void *)((char *)&v12 + 7);
    std::string v9 = v4;
    *(void *)&long long v10 = v12;
    HIBYTE(v10) = v5;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_1000C7F88(&v12);
    memset(&__p, 0, sizeof(__p));
    sub_1005B66DC(v12, "GnssBroadcastEphemerisUrl", &__p, (uint64_t)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v12 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v12 + 1));
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size) {
      std::string::operator=(&v11, &__str);
    }
    operator new();
  }
  *a1 = 0;
  return result;
}

void sub_10181A8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_10181A998(uint64_t a1)
{
  if (!sub_100740A24()) {
    return;
  }
  if (!*(unsigned char *)(a1 + 2264))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    std::string::size_type v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#apc,injectApcFile,BB not ready", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_59:
      LOWORD(v20) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectApcFile()", "%s\n", v7);
LABEL_60:
      if (v7 != (char *)buf) {
        free(v7);
      }
      return;
    }
LABEL_69:
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
    goto LABEL_59;
  }
  if (!*(void *)(a1 + 3192))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    std::string v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#apc,measurement processor not ready", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_59;
    }
    goto LABEL_69;
  }
  if (!*(unsigned char *)(a1 + 2184) && !*(unsigned char *)(a1 + 2185))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 184))(&v19, a1);
    if (v19)
    {
      long long v10 = (const char *)(v19 + 24);
      if (*(char *)(v19 + 47) < 0) {
        long long v10 = *(const char **)v10;
      }
      if (sub_1000A569C(v10))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        std::string v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          long long v12 = (void *)(v19 + 24);
          if (*(char *)(v19 + 47) < 0) {
            long long v12 = (void *)*v12;
          }
          *(_DWORD *)uint64_t buf = 68289283;
          *(_DWORD *)int v23 = 0;
          *(_WORD *)&void v23[4] = 2082;
          *(void *)&v23[6] = "";
          __int16 v24 = 2081;
          int v25 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#apc,feeding assistance\", \"file\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
        if (!*(unsigned char *)(a1 + 2016)) {
          sub_10181446C(a1);
        }
        sub_1018AD68C(a1 + 2192, (uint64_t *)(v19 + 24));
        if (!*(unsigned char *)(a1 + 2016)) {
          sub_101814948(a1);
        }
LABEL_56:
        uint64_t v17 = v19;
        uint64_t v19 = 0;
        if (v17) {
          sub_100852AF8((uint64_t)&v19, v17);
        }
        return;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v16 = (void *)(v19 + 24);
        if (*(char *)(v19 + 47) < 0) {
          int v16 = (void *)*v16;
        }
        *(_DWORD *)uint64_t buf = 136380675;
        *(void *)int v23 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#apc,file does not exist,%{private}s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v18 = (void *)(v19 + 24);
      if (*(char *)(v19 + 47) < 0) {
        __int16 v18 = (void *)*v18;
      }
      int v20 = 136380675;
      *(void *)int v21 = v18;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectApcFile()", "%s\n", v14);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#apc,empty filename", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v20) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectApcFile()", "%s\n", v14);
    }
    if (v14 != (char *)buf) {
      free(v14);
    }
    goto LABEL_56;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2184);
    int v4 = *(unsigned __int8 *)(a1 + 2185);
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)int v23 = v3;
    *(_WORD *)&void v23[4] = 1026;
    *(_DWORD *)&v23[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#apc,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = *(unsigned __int8 *)(a1 + 2184);
    int v6 = *(unsigned __int8 *)(a1 + 2185);
    int v20 = 67240448;
    *(_DWORD *)int v21 = v5;
    *(_WORD *)&void v21[4] = 1026;
    *(_DWORD *)&v21[6] = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::injectApcFile()", "%s\n", v7);
    goto LABEL_60;
  }
}

void sub_10181B198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    sub_100852AF8((uint64_t)&a12, v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10181B1C8(uint64_t a1)
{
  if (!sub_100740A24()) {
    return;
  }
  if (*(unsigned char *)(a1 + 2264))
  {
    if (*(unsigned char *)(a1 + 2184) || *(unsigned char *)(a1 + 2185))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      char v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v3 = *(unsigned __int8 *)(a1 + 2184);
        int v4 = *(unsigned __int8 *)(a1 + 2185);
        *(_DWORD *)uint64_t buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v3;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#eph,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v5 = *(unsigned __int8 *)(a1 + 2184);
        int v6 = *(unsigned __int8 *)(a1 + 2185);
        *(_DWORD *)__int16 v22 = 67240448;
        *(_DWORD *)int v23 = v5;
        *(_WORD *)&void v23[4] = 1026;
        *(_DWORD *)&v23[6] = v6;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v7);
LABEL_54:
        if (v7 != buf) {
          free(v7);
        }
        return;
      }
      return;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 200))(&v21, a1);
    if (v21)
    {
      std::string v9 = (const char *)(v21 + 24);
      if (*(char *)(v21 + 47) < 0) {
        std::string v9 = *(const char **)v9;
      }
      if (sub_1000A569C(v9))
      {
        sub_100826DE8((void (__cdecl ***)(std::ifstream *__hidden))buf);
        *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 8] &= ~0x1000u;
        uint64_t v10 = sub_100B6356C(buf);
        unsigned __int8 v20 = 0;
        double v19 = sub_10187A068(a1 + 3200, &v20) + (double)(unint64_t)v10 * -0.000000001;
        sub_10188E6C0(a1 + 8, (const char *)(v21 + 24), 1, 1, &v19);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        std::string v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          long long v12 = (void *)(v21 + 24);
          if (*(char *)(v21 + 47) < 0) {
            long long v12 = (void *)*v12;
          }
          *(_DWORD *)__int16 v22 = 68290051;
          *(_DWORD *)int v23 = 0;
          *(_WORD *)&void v23[4] = 2082;
          *(void *)&v23[6] = "";
          __int16 v24 = 2081;
          int v25 = v12;
          __int16 v26 = 2050;
          uint64_t v27 = v10;
          __int16 v28 = 2050;
          double v29 = v19;
          __int16 v30 = 1026;
          int v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eph,feeding assistance\", \"file\":%{private, location:escape_only}s, \"header GPS ns\":%{public}llu, \"ageSeconds\":\"%{public}f\", \"isAgeReliable\":%{public}hhd}", v22, 0x36u);
        }
        if (!*(unsigned char *)(a1 + 2016)) {
          sub_10181446C(a1);
        }
        sub_1018AD9D8(a1 + 2192, v21 + 24, *(_DWORD *)(a1 + 2148));
        if (!*(unsigned char *)(a1 + 2016)) {
          sub_101814948(a1);
        }
        sub_100826FAC(buf);
LABEL_49:
        uint64_t v17 = v21;
        uint64_t v21 = 0;
        if (v17) {
          sub_100852AF8((uint64_t)&v21, v17);
        }
        return;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v16 = (void *)(v21 + 24);
        if (*(char *)(v21 + 47) < 0) {
          int v16 = (void *)*v16;
        }
        *(_DWORD *)uint64_t buf = 136380675;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#eph,file does not exist,%{private}s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_49;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v18 = (void *)(v21 + 24);
      if (*(char *)(v21 + 47) < 0) {
        __int16 v18 = (void *)*v18;
      }
      *(_DWORD *)__int16 v22 = 136380675;
      *(void *)int v23 = v18;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v14);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#eph,empty filename", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_49;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      *(_WORD *)__int16 v22 = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v14);
    }
    if (v14 != buf) {
      free(v14);
    }
    goto LABEL_49;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  std::string::size_type v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#eph,injectBroadcastEphemerisFile,BB not ready", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    *(_WORD *)__int16 v22 = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v7);
    goto LABEL_54;
  }
}

void sub_10181B974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v24 = a14;
  a14 = 0;
  if (v24) {
    sub_100852AF8((uint64_t)&a14, v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10181B9C0(uint64_t a1, qmi::Client *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289026;
    __int16 v24 = 2082;
    int v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,Register PDS\"}", (uint8_t *)&buf, 0x12u);
  }
  *(unsigned char *)(a1 + 2290) = 0;
  v22[0] = off_1023410E8;
  v22[1] = a1;
  v22[3] = v22;
  sub_10181BFE0(a1, (uint64_t)a2, (uint64_t)v22);
  sub_1017C91FC(v22);
  v21[0] = off_102341168;
  v21[1] = a1;
  v21[3] = v21;
  sub_10181C110(a1, (uint64_t)a2, (uint64_t)v21);
  sub_1017C967C(v21);
  v20[0] = off_102341218;
  v20[1] = a1;
  unsigned char v20[3] = v20;
  sub_10181C240(a1, (uint64_t)a2, (uint64_t)v20);
  sub_101838558(v20);
  v19[0] = off_1023412D8;
  v19[1] = a1;
  v19[3] = v19;
  sub_10181C370(a1, (uint64_t)a2, (uint64_t)v19);
  sub_1018389D8(v19);
  v18[0] = off_102341398;
  v18[1] = a1;
  void v18[3] = v18;
  sub_10181C4A0(a1, (uint64_t)a2, (uint64_t)v18);
  sub_101838E58(v18);
  v17[0] = off_102341458;
  v17[1] = a1;
  v17[3] = v17;
  sub_10181C5D0(a1, (uint64_t)a2, (uint64_t)v17);
  sub_1018392D8(v17);
  v16[0] = off_102341518;
  v16[1] = a1;
  v16[3] = v16;
  sub_10181C700(a1, (uint64_t)a2, (uint64_t)v16);
  sub_101839754(v16);
  v15[0] = off_1023415D8;
  v15[1] = a1;
  v15[3] = v15;
  sub_10181C830(a1, (uint64_t)a2, (uint64_t)v15);
  sub_101839BD4(v15);
  v14[0] = off_102341698;
  v14[1] = a1;
  void v14[3] = v14;
  sub_10181C960(a1, (uint64_t)a2, (uint64_t)v14);
  sub_10183A054(v14);
  v13[0] = off_102341758;
  v13[1] = a1;
  v13[3] = v13;
  sub_10181CA90(a1, (uint64_t)a2, (uint64_t)v13);
  sub_10183A4D4(v13);
  v12[0] = off_102341818;
  v12[1] = a1;
  v12[3] = v12;
  sub_10181CBC0(a1, (uint64_t)a2, (uint64_t)v12);
  sub_10183A954(v12);
  v11[0] = off_1023418D8;
  v11[1] = a1;
  v11[3] = v11;
  sub_10181CCF0(a1, (uint64_t)a2, (uint64_t)v11);
  sub_10183ADD4(v11);
  v10[0] = off_102341998;
  v10[1] = a1;
  v10[3] = v10;
  sub_10181CE20(a1, (uint64_t)a2, (uint64_t)v10);
  sub_10183B254(v10);
  v9[0] = off_102341A58;
  v9[1] = a1;
  v9[3] = v9;
  sub_10181CF50(a1, (uint64_t)a2, (uint64_t)v9);
  sub_10183B6D4(v9);
  v8[0] = off_102341B18;
  v8[1] = a1;
  v8[3] = v8;
  sub_10181D080(a1, (uint64_t)a2, (uint64_t)v8);
  sub_10183BB50(v8);
  v7[0] = off_102341BD8;
  v7[1] = a1;
  v7[3] = v7;
  sub_10181D1B0(a1, (uint64_t)a2, (uint64_t)v7);
  sub_10183BFD0(v7);
  v6[0] = off_102341C68;
  v6[1] = a1;
  v6[3] = v6;
  sub_10181D2E0(a1, (uint64_t)a2, (uint64_t)v6);
  sub_1017CA878(v6);
  sub_100103240();
  uint64_t result = sub_10073E3D4();
  if (result) {
    return qmi::Client::setIndShouldWake(a2);
  }
  return result;
}

void sub_10181BEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10181BFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017C9084((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017C91FC(v4);
}

void sub_10181C0F4(_Unwind_Exception *a1)
{
  sub_1017C91FC(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017C9504((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017C967C(v4);
}

void sub_10181C224(_Unwind_Exception *a1)
{
  sub_1017C967C(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1018383E0((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_101838558(v4);
}

void sub_10181C354(_Unwind_Exception *a1)
{
  sub_101838558(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101838860((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1018389D8(v4);
}

void sub_10181C484(_Unwind_Exception *a1)
{
  sub_1018389D8(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101838CE0((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_101838E58(v4);
}

void sub_10181C5B4(_Unwind_Exception *a1)
{
  sub_101838E58(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101839160((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1018392D8(v4);
}

void sub_10181C6E4(_Unwind_Exception *a1)
{
  sub_1018392D8(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1018395E0((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_101839754(v4);
}

void sub_10181C814(_Unwind_Exception *a1)
{
  sub_101839754(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101839A5C((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_101839BD4(v4);
}

void sub_10181C944(_Unwind_Exception *a1)
{
  sub_101839BD4(v1);
  _Unwind_Resume(a1);
}

void *sub_10181C960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101839EDC((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183A054(v4);
}

void sub_10181CA74(_Unwind_Exception *a1)
{
  sub_10183A054(v1);
  _Unwind_Resume(a1);
}

void *sub_10181CA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10183A35C((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183A4D4(v4);
}

void sub_10181CBA4(_Unwind_Exception *a1)
{
  sub_10183A4D4(v1);
  _Unwind_Resume(a1);
}

void *sub_10181CBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10183A7DC((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183A954(v4);
}

void sub_10181CCD4(_Unwind_Exception *a1)
{
  sub_10183A954(v1);
  _Unwind_Resume(a1);
}

void *sub_10181CCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10183AC5C((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183ADD4(v4);
}

void sub_10181CE04(_Unwind_Exception *a1)
{
  sub_10183ADD4(v1);
  _Unwind_Resume(a1);
}

void *sub_10181CE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10183B0DC((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183B254(v4);
}

void sub_10181CF34(_Unwind_Exception *a1)
{
  sub_10183B254(v1);
  _Unwind_Resume(a1);
}

void *sub_10181CF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10183B55C((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183B6D4(v4);
}

void sub_10181D064(_Unwind_Exception *a1)
{
  sub_10183B6D4(v1);
  _Unwind_Resume(a1);
}

void *sub_10181D080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10183B9DC((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183BB50(v4);
}

void sub_10181D194(_Unwind_Exception *a1)
{
  sub_10183BB50(v1);
  _Unwind_Resume(a1);
}

void *sub_10181D1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10183BE58((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_10183BFD0(v4);
}

void sub_10181D2C4(_Unwind_Exception *a1)
{
  sub_10183BFD0(v1);
  _Unwind_Resume(a1);
}

void *sub_10181D2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1017CA700((uint64_t)v4, a3);
  qmi::Client::setIndHandler();
  return sub_1017CA878(v4);
}

void sub_10181D3F4(_Unwind_Exception *a1)
{
  sub_1017CA878(v1);
  _Unwind_Resume(a1);
}

void sub_10181D410(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10181D5AC;
  v5[3] = &unk_10233F6C0;
  void v5[4] = &v6;
  *(void *)uint64_t buf = v5;
  sub_1017C8D58(a2, 16, (uint64_t)buf);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = v7[3];
    *(void *)uint64_t buf = 68289282;
    __int16 v11 = 2082;
    long long v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"SpoofingDetected\", \"detectedInconsistency\":%{public, location:qmi::pds::SpoofDetectionEvent}lld}", buf, 0x1Cu);
  }
  *(unsigned char *)(a1 + 2291) = v7[3] != 0;
  _Block_object_dispose(&v6, 8);
}

void sub_10181D594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10181D5AC(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_10181D5C0(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109120;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ec,#imag,device report,0x%x", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(unsigned char *)(a1 + 2291) = 0;
  if (*(unsigned char *)a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ec,#imag,device flag,pos", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if ((*(unsigned char *)a2 & 2) != 0)
  {
    *(unsigned char *)(a1 + 2291) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ec,#imag,device flag,time", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    *(unsigned char *)(a1 + 2291) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ec,#imag,device flag,nav", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_10181DB24(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v10 = 0;
  __int16 v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10181DFD4;
  v9[3] = &unk_10233F6E8;
  void v9[4] = &v10;
  *(void *)uint64_t buf = v9;
  sub_1017C8D58(a2, 16, (uint64_t)buf);
  uint64_t v2 = v11[3];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "EngineMonitorStatus,%{public}u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v14 = 67240192;
    int v15 = v2;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssEngineMonitorStatus(const pds::gnssEngineMonitorIndication::Indication &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (v2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,EngineMonitorStatus,meas report unavailable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v14) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssEngineMonitorStatus(const pds::gnssEngineMonitorIndication::Indication &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  if ((v2 & 2) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,EngineMonitorStatus,pos report unavailable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v14) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssEngineMonitorStatus(const pds::gnssEngineMonitorIndication::Indication &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  _Block_object_dispose(&v10, 8);
}

void sub_10181DFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10181DFD4(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_10181DFE8(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = a1[399];
  if (v3)
  {
    if (sub_1018B4E9C(v3, a2, (uint64_t)(a1 + 321), (uint64_t)(a1 + 54)) && !sub_1018C28F0(a1[399] + 640))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tt,GNSS meas RX sync pulse,enabling session", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        LOWORD(v11[0]) = 0;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      if (a1[191])
      {
        sub_10065AB34((uint64_t)v13, (uint64_t)(a1 + 184));
        sub_10183C268((uint64_t)v12, (uint64_t)(a1 + 188));
        (*(void (**)(void *, uint8_t *, void *))(*a1 + 224))(a1, v13, v12);
        sub_10183C300(v12);
        uint64_t v5 = v13;
      }
      else
      {
        *(void *)uint64_t buf = off_102341CE8;
        int v15 = buf;
        v11[0] = off_102341D68;
        v11[3] = v11;
        sub_10065AB34((uint64_t)v10, (uint64_t)buf);
        sub_10183C268((uint64_t)v9, (uint64_t)v11);
        (*(void (**)(void *, void *, void *))(*a1 + 224))(a1, v10, v9);
        sub_10183C300(v9);
        sub_10065ABCC(v10);
        sub_10183C300(v11);
        uint64_t v5 = buf;
      }
      sub_10065ABCC(v5);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,meas indication without processor to handle", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v11[0]) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_10181E3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

void sub_10181E444(uint64_t a1, qmi::MessageBase *a2)
{
  if (*(void *)(a1 + 3192))
  {
    uint64_t v2 = *(void *)(a1 + 3192);
    sub_1018BC5FC(v2, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gnssmeas,poly indication without processor to handle", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10181E61C(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2 = *(void *)(a1 + 3192);
  if (v2)
  {
    sub_1018BEF2C(v2, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gnssmeas,time conv indication without processor to handle", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10181E7E8(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssmeas,klobuchar,indication", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsKlobucharParamReport(const pds::GnssKlobucharParamIndication::Indication &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = *(void *)(a1 + 3192);
  if (v5)
  {
    sub_1018C1224(v5, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,klobuchar indication without processor to handle", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsKlobucharParamReport(const pds::GnssKlobucharParamIndication::Indication &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_10181EAC4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v24 = 0;
  int v25 = (float *)&v24;
  uint64_t v26 = 0x2020000000;
  int v27 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10181EEC4;
  v15[3] = &unk_10233F710;
  void v15[4] = &v24;
  *(void *)uint64_t buf = v15;
  sub_10183C87C(a2, 16, (uint64_t)buf);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10181EED8;
  void v14[3] = &unk_10233F738;
  void v14[4] = &v20;
  *(void *)uint64_t buf = v14;
  sub_1017CACF0(a2, 17, (uint64_t)buf);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10181EEFC;
  v13[3] = &unk_10233F760;
  void v13[4] = &v16;
  *(void *)uint64_t buf = v13;
  sub_1017CACF0(a2, 18, (uint64_t)buf);
  float v4 = v25[6];
  uint64_t v5 = v21[3];
  uint64_t v6 = v17[3];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v8 = v4;
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134349824;
    *(double *)&uint8_t buf[4] = v8;
    __int16 v37 = 2050;
    uint64_t v38 = v5;
    __int16 v39 = 2050;
    uint64_t v40 = v6;
    __int16 v41 = 2050;
    CFAbsoluteTime v42 = Current;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "PwrMeas,avgMw,%{public}.3f,durationSeconds,%{public}.3f,activeSeconds,%{public}.3f,time,%{public}.3f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v28 = 134349824;
    double v29 = v8;
    __int16 v30 = 2050;
    uint64_t v31 = v5;
    __int16 v32 = 2050;
    uint64_t v33 = v6;
    __int16 v34 = 2050;
    CFAbsoluteTime v35 = Current;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsPwrConsumptionReport(const pds::GnssPowerConsumptionIndication::Indication &)", "%s\n", v11);
    if (v11 != buf) {
      free(v11);
    }
  }
  uint64_t v10 = *(void *)(a1 + 1560);
  if (v10)
  {
    *(CFAbsoluteTime *)uint64_t v12 = Current;
    v12[1] = v5;
    v12[2] = v6;
    *(double *)&v12[3] = v8;
    void v12[4] = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v10 + 48))(v10, v12);
  }
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
}

void sub_10181EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

float sub_10181EEC4(uint64_t a1, float *a2)
{
  float result = *a2;
  *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return result;
}

double sub_10181EED8(uint64_t a1, _DWORD *a2, double a3)
{
  LODWORD(a3) = *a2;
  double result = (double)*(unint64_t *)&a3 * 0.001;
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

double sub_10181EEFC(uint64_t a1, _DWORD *a2, double a3)
{
  LODWORD(a3) = *a2;
  double result = (double)*(unint64_t *)&a3 * 0.001;
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10181EF20(uint64_t a1, qmi::MessageBase *a2)
{
  v9[0] = 0;
  sub_1017CC710(a2, 1, (uint64_t)v9);
  if (v9[0])
  {
    int v3 = v10;
    *(_DWORD *)(a1 + 4096) = v10;
    *(_DWORD *)(a1 + 1116) = v3;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    float v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v5 = *(_DWORD *)(a1 + 4096);
      *(_DWORD *)uint64_t buf = 67240192;
      int v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "XOCalibState,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v6 = *(_DWORD *)(a1 + 4096);
      int v11 = 67240192;
      int v12 = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsXOCalibrationState(const pds::XOCalibrationStateIndication::Indication &)", "%s\n", v7);
LABEL_19:
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "XOCalibState err", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v11) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handlePdsXOCalibrationState(const pds::XOCalibrationStateIndication::Indication &)", "%s\n", v7);
      goto LABEL_19;
    }
  }
}

void sub_10181F220(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  float v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssmeas,apc,indication", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  int v5 = *(void **)(a1 + 3192);
  if (v5)
  {
    sub_1018C16C4(v5, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,apc,indication measurement processor not ready", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_10181F4FC(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10181F764;
  v8[3] = &unk_10233C458;
  void v8[5] = &v13;
  v8[6] = a1;
  void v8[4] = &v17;
  *(void *)uint64_t buf = v8;
  sub_1017C8CB0(a2, 1, (uint64_t)buf);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10181F8B8;
  v7[3] = &unk_10233C480;
  void v7[4] = &v9;
  *(void *)uint64_t buf = v7;
  sub_1017C8D58(a2, 16, (uint64_t)buf);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *((unsigned __int8 *)v18 + 24);
    int v5 = *((unsigned __int8 *)v14 + 24);
    uint64_t v6 = v10[3];
    *(void *)uint64_t buf = 68289794;
    __int16 v22 = 2082;
    uint64_t v23 = "";
    __int16 v24 = 1026;
    int v25 = v4;
    __int16 v26 = 1026;
    int v27 = v5;
    __int16 v28 = 1026;
    int v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PdsServiceState\", \"unlock\":%{public}hhd, \"trackingState\":%{public}d, \"allowedServices\":%{public}d}", buf, 0x24u);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_10181F730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10181F764(void *a1, unsigned char *a2)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *a2;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a2[1];
  if (*(unsigned char *)(v2 + 2016)
    && (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24) || *(unsigned char *)(*(void *)(a1[5] + 8) + 24) != 2))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      int v6 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
      v7[0] = 68289538;
      v7[1] = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 1026;
      int v11 = v5;
      __int16 v12 = 1026;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,service state indication hints tracking state mismatch\", \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)v7, 0x1Eu);
    }
  }
}

uint64_t sub_10181F8B8(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_10181F8CC(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v34 = 0;
  CFAbsoluteTime v35 = &v34;
  uint64_t v36 = 0x2020000000;
  char v37 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  __int16 v33 = 0;
  uint64_t v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10181FF48;
  v21[3] = &unk_10233F788;
  void v21[4] = &v34;
  *(void *)uint64_t buf = v21;
  sub_10183C924(a2, 1, (uint64_t)buf);
  if (qmi::MessageBase::findTlvValue(a2))
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10181FF5C;
    unsigned char v20[3] = &unk_10233F7B0;
    void v20[4] = &v30;
    v20[5] = &v26;
    *(void *)uint64_t buf = v20;
    sub_10183C9CC(a2, 16, (uint64_t)buf);
  }
  if (qmi::MessageBase::findTlvValue(a2))
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10181FF80;
    v19[3] = &unk_10233F7D8;
    void v19[4] = &v22;
    *(void *)uint64_t buf = v19;
    sub_1017C8D58(a2, 17, (uint64_t)buf);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *((unsigned __int8 *)v35 + 24);
    int v6 = *((unsigned __int16 *)v31 + 12);
    int v7 = *((_DWORD *)v27 + 6);
    uint64_t v8 = v23[3];
    *(_DWORD *)uint64_t buf = 68290050;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v5;
    *(_WORD *)long long v45 = 1026;
    *(_DWORD *)&_OWORD v45[2] = v6;
    __int16 v46 = 1026;
    int v47 = v7;
    __int16 v48 = 2050;
    uint64_t v49 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"handlePdsDpoState\", \"engaged\":%{public}d, \"gps_week\":%{public}d, \"gps_tow_ms\":%{public}d, \"disengage_mask\":%{public, location:qmi::pds::QmiDpoDisengageFlags}lld}", buf, 0x2Eu);
  }
  if (*((unsigned char *)v35 + 24))
  {
    int v9 = 2;
  }
  else
  {
    uint64_t v10 = v23[3];
    if (v10)
    {
      if ((v10 & 0x303) != 0) {
        int v9 = 1;
      }
      else {
        int v9 = 2;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Unknown DPO disengagement state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        LOWORD(v38) = 0;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsDpoState(const pds::DpoStateIndication::Indication &)", "%s\n", v18);
        if (v18 != buf) {
          free(v18);
        }
      }
      int v9 = 0;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  __int16 v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    if (*((unsigned char *)v35 + 24)) {
      int v13 = "ENGAGED";
    }
    else {
      int v13 = "DISENGAGED";
    }
    uint64_t v14 = v23[3];
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)long long v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "DPO: %s,0x%08llx,sigqual:, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    if (*((unsigned char *)v35 + 24)) {
      uint64_t v15 = "ENGAGED";
    }
    else {
      uint64_t v15 = "DISENGAGED";
    }
    uint64_t v16 = v23[3];
    int v38 = 136315650;
    __int16 v39 = v15;
    __int16 v40 = 2048;
    uint64_t v41 = v16;
    __int16 v42 = 1024;
    int v43 = v9;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsDpoState(const pds::DpoStateIndication::Indication &)", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  if (*(void *)(a1 + 1624)) {
    sub_100852788(a1 + 1600, v9);
  }
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
}

void sub_10181FEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t sub_10181FF48(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t sub_10181FF5C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_WORD *)a2;
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t sub_10181FF80(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_10181FF94(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1004BA69C();
  sub_1004BA750(*(unsigned __int8 *)(a2 + 14));
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 15);
    v6[0] = 68289794;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2050;
    uint64_t v10 = v5;
    __int16 v11 = 1026;
    int v12 = v3;
    __int16 v13 = 1026;
    int v14 = sub_1004BA69C();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gpsUtcLeapSecondUpdate\", \"UtcTimestampMs\":%{public}llu, \"OldGpsUtcLeapSec\":%{public}d, \"NewGpsUtcLeapSec\":%{public}d}", (uint8_t *)v6, 0x28u);
  }
}

void sub_1018200B0(uint64_t a1, qmi::MessageBase *this)
{
  if (qmi::MessageBase::findTlvValue(this))
  {
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2020000000;
    char v24 = 0;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1018208D4;
    unsigned char v20[3] = &unk_10233F800;
    void v20[4] = &v21;
    *(void *)uint64_t buf = v20;
    sub_10183C924(this, 1, (uint64_t)buf);
    uint64_t v4 = *(void *)(a1 + 3192);
    if (v4 && !sub_1018C28F0(v4 + 640))
    {
      if (*((unsigned char *)v22 + 24))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        uint64_t v5 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#tt,GNSS meas RX sync pulse,sending", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          LOWORD(v25) = 0;
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        (*(void (**)(uint64_t, void))(*(void *)a1 + 240))(a1, 0);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        __int16 v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#tt,GNSS meas RX sync pulse,not ready", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          LOWORD(v25) = 0;
          uint64_t v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
    }
    if (*(unsigned char *)(a1 + 2185) && *(unsigned char *)(a1 + 2298))
    {
      if (*((unsigned char *)v22 + 24))
      {
        char v8 = 1;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        __int16 v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#tt,simulator mode pulse config,not ready for pulse", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          LOWORD(v25) = 0;
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
        char v8 = 0;
        *(unsigned char *)(a1 + 2298) = 0;
      }
      *(unsigned char *)(a1 + 2297) = v8;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *((unsigned __int8 *)v22 + 24);
        int v12 = *(unsigned __int8 *)(a1 + 2297);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v11;
        __int16 v30 = 1024;
        int v31 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#tt,simulator mode isReadyForPulse,%hhu,fSimulatorModeTimeTransferActive,%hhu", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v14 = *((unsigned __int8 *)v22 + 24);
        int v15 = *(unsigned __int8 *)(a1 + 2297);
        int v25 = 67109376;
        int v26 = v14;
        __int16 v27 = 1024;
        int v28 = v15;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
    sub_101926FE8(a1, *((unsigned char *)v22 + 24));
    if (qmi::MessageBase::findTlvValue(this))
    {
      *(void *)uint64_t buf = &stru_10233F840;
      sub_10183CA7C(this, 16, (uint64_t)buf);
    }
    _Block_object_dispose(&v21, 8);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#error, #tt, mandatory ready tlv not received in time transfer status indication", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v21) = 0;
      __int16 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    sub_101926FE8(a1, 0);
  }
}

void sub_10182089C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1018208D4(uint64_t result, unsigned char *a2)
{
  if (*a2 == 1) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1018208F4(id a1, const timeTransferData *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int var0 = a2->var0;
    unsigned int var1 = a2->var1;
    double var2 = a2->var2;
    double var3 = a2->var3;
    int var4 = a2->var4;
    int var5 = a2->var5;
    int var6 = a2->var6;
    v11[0] = 68290818;
    __int16 v12 = 2082;
    v11[1] = 0;
    __int16 v13 = "";
    __int16 v14 = 1026;
    int v15 = var0;
    __int16 v16 = 1026;
    unsigned int v17 = var1;
    __int16 v18 = 2050;
    double v19 = var2;
    __int16 v20 = 2050;
    double v21 = var3;
    __int16 v22 = 1026;
    int v23 = var4;
    __int16 v24 = 1026;
    int v25 = var5;
    __int16 v26 = 1026;
    int v27 = var6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, time info\", \"week\":%{public}u, \"ms\":%{public}u, \"bias\":\"%{public}f\", \"uncertainty\":\"%{public}f\", \"source\":%{public}hhd, \"leap seconds\":%{public}hd, \"leap second uncertainty\":%{public}hd}", (uint8_t *)v11, 0x44u);
  }
}

void sub_101820A30(_DWORD *a1, qmi::MessageBase *a2)
{
  v15[0] = 0;
  sub_1017CC710(a2, 16, (uint64_t)v15);
  v13[0] = 0;
  sub_1017CC710(a2, 17, (uint64_t)v13);
  v11[0] = 0;
  sub_1017CC710(a2, 18, (uint64_t)v11);
  v9[0] = 0;
  sub_1017CC710(a2, 19, (uint64_t)v9);
  if (v15[0]) {
    a1[275] += v16;
  }
  if (v13[0]) {
    a1[276] += v14;
  }
  if (v11[0]) {
    a1[277] += v12;
  }
  if (v9[0]) {
    a1[278] += v10;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    if (v15[0]) {
      int v5 = v16;
    }
    else {
      int v5 = -1;
    }
    if (v13[0]) {
      int v6 = v14;
    }
    else {
      int v6 = -1;
    }
    if (v11[0]) {
      int v7 = v12;
    }
    else {
      int v7 = -1;
    }
    if (v9[0]) {
      int v8 = v10;
    }
    else {
      int v8 = -1;
    }
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 1026;
    int v22 = v5;
    __int16 v23 = 1026;
    int v24 = v6;
    __int16 v25 = 1026;
    int v26 = v7;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#wwanAntTuneL5Blanking,report\", \"L5BestDurationMsec\":%{public}d, \"L5OtherDurationMsec\":%{public}d, \"L5WorstDurationMsec\":%{public}d, \"wwanAntTuneL5BlankingDurationMsec\":%{public}d}", buf, 0x2Au);
  }
}

void sub_101820C28(uint64_t a1, qmi::MessageBase *a2)
{
  sub_101820E34(a2, v7);
  if (v7[0])
  {
    uint64_t v2 = (unsigned __int8 *)v8[0];
    int v3 = (unsigned __int8 *)v8[1];
    while (v2 != v3)
    {
      sub_100D1EC5C(v2);
      v2 += 24;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "consolidated NMEA without payload", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handleConsolidatedNmea(const pds::ConsolidatedNmeaIndication::Indication &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  if (v7[0])
  {
    *(void *)uint64_t buf = v8;
    sub_1000A7B4C((void ***)buf);
  }
}

void sub_101820DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (*(unsigned char *)(v13 - 72))
  {
    a13 = v13 - 64;
    sub_1000A7B4C((void ***)&a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_101820E34(qmi::MessageBase *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  *a2 = 0;
  sub_10183CC7C(a1, 1, a2);
}

void sub_101820E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned char *a10)
{
  if (*v10)
  {
    a10 = v10 + 8;
    sub_1000A7B4C((void ***)&a10);
    *int v10 = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_101820E94(uint64_t a1, qmi::MessageBase *this)
{
  if (qmi::MessageBase::findTlvValue(this) && qmi::MessageBase::findTlvValue(this))
  {
    uint64_t v31 = 0;
    uint64_t v32 = &v31;
    uint64_t v33 = 0x2020000000;
    char v34 = 0;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10182163C;
    v30[3] = &unk_10233F868;
    void v30[4] = &v31;
    *(void *)uint64_t buf = v30;
    sub_10183C924(this, 1, (uint64_t)buf);
    if (*((unsigned char *)v32 + 24))
    {
      *(void *)uint64_t buf = 0;
      *(void *)&long long v51 = buf;
      *((void *)&v51 + 1) = 0x7812000000;
      long long v52 = sub_100178140;
      long long v53 = nullsub_59;
      long long v54 = "";
      uint64_t v55 = 0;
      int v56 = -1082130432;
      char v57 = 0;
      int v58 = 0;
      long long v59 = xmmword_101E3A320;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v60 = 0;
      int v63 = 0;
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_101821658;
      v29[3] = &unk_10233F890;
      v29[4] = buf;
      v29[5] = a1;
      *(void *)CFAbsoluteTime v35 = v29;
      sub_10183CA7C(this, 2, (uint64_t)v35);
      if (qmi::MessageBase::findTlvValue(this))
      {
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        _DWORD v28[2] = sub_101821B1C;
        v28[3] = &unk_10233F8B8;
        void v28[4] = buf;
        v28[5] = a1;
        *(void *)CFAbsoluteTime v35 = v28;
        sub_10183D180(this, 16, v35);
      }
      else if (qmi::MessageBase::findTlvValue(this))
      {
        v26[0] = 0;
        sub_10183D22C(this, 21, (uint64_t)v26);
        if (v26[0]) {
          double v14 = v27;
        }
        else {
          double v14 = -1.0;
        }
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_101821DA8;
        v25[3] = &unk_10233F8E0;
        void v25[4] = buf;
        *(void *)CFAbsoluteTime v35 = v25;
        sub_1017C8D58(this, 20, (uint64_t)v35);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v15 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v16 = (unint64_t)((double)*(unint64_t *)(v51 + 72) * 0.000001);
          if (*(unsigned char *)(a1 + 2056))
          {
            uint64_t v17 = *(void *)(a1 + 2040);
            uint64_t v18 = *(void *)(a1 + 2048);
          }
          else
          {
            uint64_t v17 = 0;
            uint64_t v18 = 0;
          }
          uint64_t v22 = *(void *)(v51 + 48);
          double v23 = *(float *)(v51 + 56);
          *(_DWORD *)CFAbsoluteTime v35 = 68290562;
          *(_DWORD *)&void v35[4] = 0;
          __int16 v36 = 2082;
          char v37 = "";
          __int16 v38 = 2050;
          unint64_t v39 = v16;
          __int16 v40 = 2050;
          double v41 = v14;
          __int16 v42 = 2050;
          uint64_t v43 = v17;
          __int16 v44 = 2050;
          uint64_t v45 = v18;
          __int16 v46 = 2050;
          uint64_t v47 = v22;
          __int16 v48 = 2050;
          double v49 = v23;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#rxClockConv,pulse\", \"rxRtcMs\":%{public}llu, \"rxRtcUncMs\":\"%{public}.3f\", \"machAbsTicksBefore\":%{public}llu, \"machAbsTicksAfter\":%{public}llu, \"gpsNs\":%{public}llu, \"gpsUncNs\":\"%{public}.3f\"}", v35, 0x4Eu);
        }
      }
      uint64_t v4 = v51 + 48;
      int v5 = (_OWORD *)(a1 + 2064);
      if (*(unsigned char *)(a1 + 2136))
      {
        _OWORD *v5 = *(_OWORD *)v4;
        long long v6 = *(_OWORD *)(v4 + 16);
        long long v7 = *(_OWORD *)(v4 + 32);
        long long v8 = *(_OWORD *)(v4 + 48);
        *(_DWORD *)(a1 + 2128) = *(_DWORD *)(v4 + 64);
        *(_OWORD *)(a1 + 2096) = v7;
        *(_OWORD *)(a1 + 2112) = v8;
        *(_OWORD *)(a1 + 2080) = v6;
      }
      else
      {
        _OWORD *v5 = *(_OWORD *)v4;
        long long v19 = *(_OWORD *)(v4 + 16);
        long long v20 = *(_OWORD *)(v4 + 32);
        long long v21 = *(_OWORD *)(v4 + 48);
        *(void *)(a1 + 2128) = *(void *)(v4 + 64);
        *(_OWORD *)(a1 + 2096) = v20;
        *(_OWORD *)(a1 + 2112) = v21;
        *(_OWORD *)(a1 + 2080) = v19;
        *(unsigned char *)(a1 + 2136) = 1;
      }
      sub_101821DD0(a1);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#tt, pulse not valid", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        *(_WORD *)CFAbsoluteTime v35 = 0;
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransferPulse(const pds::TimeTransferPulseIndication::Indication &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      if (*(unsigned char *)(a1 + 2056)) {
        *(unsigned char *)(a1 + 2056) = 0;
      }
      if (*(unsigned char *)(a1 + 2136)) {
        *(unsigned char *)(a1 + 2136) = 0;
      }
    }
    _Block_object_dispose(&v31, 8);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v51) = 2082;
      *(void *)((char *)&v51 + 2) = "";
      WORD5(v51) = 1026;
      HIDWORD(v51) = qmi::MessageBase::findTlvValue(this) != 0;
      LOWORD(v52) = 1026;
      *(_DWORD *)((char *)&v52 + 2) = qmi::MessageBase::findTlvValue(this) != 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#tt pulse indication is not valid\", \"validity tlv\":%{public}hhd, \"time tlv\":%{public}hhd}", buf, 0x1Eu);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    int v10 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      BOOL v11 = qmi::MessageBase::findTlvValue(this) != 0;
      BOOL v12 = qmi::MessageBase::findTlvValue(this) != 0;
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v51) = 2082;
      *(void *)((char *)&v51 + 2) = "";
      WORD5(v51) = 1026;
      HIDWORD(v51) = v11;
      LOWORD(v52) = 1026;
      *(_DWORD *)((char *)&v52 + 2) = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#tt pulse indication is not valid", "{\"msg%{public}.0s\":\"#tt pulse indication is not valid\", \"validity tlv\":%{public}hhd, \"time tlv\":%{public}hhd}", buf, 0x1Eu);
    }
    if (*(unsigned char *)(a1 + 2056)) {
      *(unsigned char *)(a1 + 2056) = 0;
    }
    if (*(unsigned char *)(a1 + 2136)) {
      *(unsigned char *)(a1 + 2136) = 0;
    }
  }
}

void sub_1018215F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_10182163C(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2 == 1;
  return result;
}

void sub_101821658(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  unsigned int v4 = *((_DWORD *)a2 + 1);
  if (v4 <= 0x240C83FF
    && ((v5 = *((float *)a2 + 2), v5 >= -0.5) ? (BOOL v6 = v5 <= 0.5) : (BOOL v6 = 0),
        v6 && (int v7 = *((unsigned __int8 *)a2 + 17), *((unsigned char *)a2 + 17))))
  {
    if (!*((unsigned char *)a2 + 18))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = 604800000000000 * *a2 + 1000000 * v4;
      *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) = *((float *)a2 + 3) * 1000000.0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 60) = 1;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 64) = v7;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 80) = (uint64_t)(float)(v5 * 1000000.0);
      LOBYTE(v18) = *((unsigned char *)a2 + 16);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 112) = sub_10182194C(v3, &v18, (float *)(*(void *)(*(void *)(a1 + 32) + 8)+ 48));
      return;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *((_DWORD *)a2 + 1);
      double v10 = *((float *)a2 + 2);
      int v11 = *((unsigned __int8 *)a2 + 17);
      int v12 = *((unsigned __int8 *)a2 + 18);
      int v18 = 68290050;
      int v19 = 0;
      __int16 v20 = 2082;
      long long v21 = "";
      __int16 v22 = 1026;
      int v23 = v9;
      __int16 v24 = 2050;
      double v25 = v10;
      __int16 v26 = 1026;
      int v27 = v11;
      __int16 v28 = 1026;
      int v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#tt invalid data\", \"millseconds\":%{public}u, \"bias\":\"%{public}f\", \"leap seconds\":%{public}hd, \"leap second uncertainty\":%{public}hd}", (uint8_t *)&v18, 0x2Eu);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    uint64_t v13 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v14 = *((_DWORD *)a2 + 1);
      double v15 = *((float *)a2 + 2);
      int v16 = *((unsigned __int8 *)a2 + 17);
      int v17 = *((unsigned __int8 *)a2 + 18);
      int v18 = 68290050;
      int v19 = 0;
      __int16 v20 = 2082;
      long long v21 = "";
      __int16 v22 = 1026;
      int v23 = v14;
      __int16 v24 = 2050;
      double v25 = v15;
      __int16 v26 = 1026;
      int v27 = v16;
      __int16 v28 = 1026;
      int v29 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#tt invalid data", "{\"msg%{public}.0s\":\"#tt invalid data\", \"millseconds\":%{public}u, \"bias\":\"%{public}f\", \"leap seconds\":%{public}hd, \"leap second uncertainty\":%{public}hd}", (uint8_t *)&v18, 0x2Eu);
    }
  }
  if (*(unsigned char *)(v3 + 2056)) {
    *(unsigned char *)(v3 + 2056) = 0;
  }
  if (*(unsigned char *)(v3 + 2136)) {
    *(unsigned char *)(v3 + 2136) = 0;
  }
}

uint64_t sub_10182194C(uint64_t a1, unsigned char *a2, float *a3)
{
  uint64_t result = 3;
  switch(*a2)
  {
    case 1:
    case 0xC:
    case 0xD:
      return result;
    case 2:
    case 0xF:
    case 0x10:
      uint64_t result = 4;
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t result = sub_100D67E10((uint64_t *)(a1 + 2320), a3);
      break;
    case 9:
    case 0xA:
    case 0xB:
      LODWORD(result) = sub_100D67E10((uint64_t *)(a1 + 2320), a3);
      if (result == 2) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = result;
      }
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      BOOL v6 = qword_1024193D8;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v7)
      {
        int v8 = (char)*a2;
        v9[0] = 68289282;
        v9[1] = 0;
        __int16 v10 = 2082;
        int v11 = "";
        __int16 v12 = 1026;
        int v13 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt, unexpected time source\", \"source\":%{public}d}", (uint8_t *)v9, 0x18u);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

void sub_101821B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 72) = (unint64_t)((double)*(unint64_t *)a2
                                                                                 * 1000000.0);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  float v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v6 = *(void *)a2;
    int v7 = *(_DWORD *)(a2 + 8);
    uint64_t v8 = *(void *)(v4 + 2040);
    uint64_t v9 = *(void *)(v4 + 2048);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v11 = *(void *)(v10 + 48);
    double v12 = *(float *)(v10 + 56);
    *(_DWORD *)uint64_t buf = 134350336;
    unint64_t v15 = v6;
    __int16 v16 = 1026;
    int v17 = v7;
    __int16 v18 = 2050;
    uint64_t v19 = v8;
    __int16 v20 = 2050;
    uint64_t v21 = v9;
    __int16 v22 = 2048;
    uint64_t v23 = v11;
    __int16 v24 = 2050;
    double v25 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#rxClockConv,pulse,rxRtcMs,%{public}llu,rxRtcUnc,%{public}u,machAbsTicks,%{public}llu,%{public}llu,gpsNs,%llu,gpsUncNs,%{public}.3f", buf, 0x3Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransferPulse(const pds::TimeTransferPulseIndication::Indication &)_block_invoke", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

double sub_101821DA8(uint64_t a1, unint64_t *a2)
{
  double result = (double)*a2 * 1000000.0;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 72) = (unint64_t)result;
  return result;
}

void sub_101821DD0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2056);
    int v4 = *(unsigned __int8 *)(a1 + 2136);
    *(_DWORD *)uint64_t buf = 67109376;
    int v18 = v3;
    __int16 v19 = 1024;
    int v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt,check for async device data,mark,%d,ind,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v8 = *(unsigned __int8 *)(a1 + 2056);
    int v9 = *(unsigned __int8 *)(a1 + 2136);
    int v13 = 67109376;
    int v14 = v8;
    __int16 v15 = 1024;
    int v16 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::checkForAllTimeTransferDataCompletion()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*(unsigned char *)(a1 + 2136) && *(unsigned char *)(a1 + 2056))
  {
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a1 + 2040);
    *(void *)(a1 + 2104) = *(void *)(a1 + 2176);
    uint64_t v5 = *(void *)(a1 + 3192);
    if (!v5 || (sub_1018C08E8(v5, a1 + 2064), *(unsigned char *)(a1 + 2136)))
    {
      if (!sub_101822038(a1 + 2064))
      {
LABEL_13:
        if (*(unsigned char *)(a1 + 2056)) {
          *(unsigned char *)(a1 + 2056) = 0;
        }
        if (*(unsigned char *)(a1 + 2136)) {
          *(unsigned char *)(a1 + 2136) = 0;
        }
        return;
      }
      if (*(unsigned char *)(a1 + 2136))
      {
        long long v6 = *(_OWORD *)(a1 + 2112);
        _DWORD v11[2] = *(_OWORD *)(a1 + 2096);
        v11[3] = v6;
        uint64_t v12 = *(void *)(a1 + 2128);
        long long v7 = *(_OWORD *)(a1 + 2080);
        v11[0] = *(_OWORD *)(a1 + 2064);
        v11[1] = v7;
        sub_1019272CC(a1, (uint64_t)v11);
        goto LABEL_13;
      }
    }
    sub_10020D700();
  }
}

BOOL sub_101822038(uint64_t a1)
{
  float v1 = *(float *)(a1 + 8);
  if (v1 >= 1.0e11)
  {
    if (v1 <= 0.0) {
      return 0;
    }
  }
  else if (v1 <= 0.0 || *(void *)a1 == 0)
  {
    return 0;
  }
  if (*(void *)(a1 + 24) == -1) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    return v3;
  }
  unint64_t v4 = *(void *)(a1 + 56);
  BOOL v5 = v4 > v3;
  unint64_t v6 = v4 - v3;
  if (!v5
    || *(void *)(a1 + 32) == 0x8000000000000000
    || 604800000000000 * (unint64_t)dword_10248AC08 >= *(void *)a1)
  {
    return 0;
  }
  unint64_t v3 = 0;
  if (*(unsigned char *)(a1 + 12) && v6 <= 0xF4240) {
    return *(_DWORD *)(a1 + 64) != 0;
  }
  return v3;
}

void *sub_1018220FC(uint64_t a1)
{
  if (sub_10015F760()) {
    uint64_t v2 = 0x2000;
  }
  else {
    uint64_t v2 = 0;
  }
  if (sub_10015F760()) {
    v2 |= 5uLL;
  }
  if (sub_100740ABC())
  {
    BOOL v11 = 0;
    sub_1000C7F88(&v9);
    int v3 = sub_1000D2988(v9, "gpsEnableVerboseBdsNmea", &v11);
    if (v11) {
      int v4 = v3;
    }
    else {
      int v4 = 0;
    }
    if (v10) {
      sub_1000DB0A0(v10);
    }
    uint64_t v5 = 1280;
    if (v4) {
      uint64_t v5 = 5888;
    }
    v2 |= v5;
  }
  int v6 = sub_100740B14();
  uint64_t v7 = v2 | 0x8000;
  if (!v6) {
    uint64_t v7 = v2;
  }
  v12[0] = off_102341F38;
  v12[1] = 0;
  v12[2] = v7 | 0x4000;
  v12[3] = v12;
  sub_1018D6764(a1 + 1704, (uint64_t)v12);
  return sub_1017C825C(v12);
}

void sub_101822220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, char a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101822250(uint64_t a1)
{
  uint64_t v8 = 0x3727C5AC3D800000;
  int v9 = 20;
  char v10 = 0;
  uint64_t v11 = 0xE41C80000;
  char v12 = 0;
  long long v13 = xmmword_101E3A330;
  __int16 v15 = 2562;
  char v16 = 0;
  int v17 = 120;
  uint64_t v14 = 0x2800000000;
  char v7 = 1;
  sub_1000C7F88(&v5);
  int v2 = sub_1000D2988(v5, "GpsUseHighRateInertialAiding", (BOOL *)&v7);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2)
  {
    char v3 = v7;
  }
  else
  {
    char v3 = 1;
    char v7 = 1;
  }
  char v12 = v3;
  v18[0] = off_102342058;
  v18[1] = &v8;
  void v18[3] = v18;
  sub_1018D6764(a1 + 1704, (uint64_t)v18);
  return sub_1017C825C(v18);
}

void sub_101822384(_Unwind_Exception *a1)
{
  sub_1017C825C((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *sub_1018223B4(uint64_t a1)
{
  v2[0] = off_102341FD8;
  v2[1] = a1;
  v2[3] = v2;
  sub_1018D6764(a1 + 1704, (uint64_t)v2);
  return sub_1017C825C(v2);
}

void sub_101822440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_101822454(uint64_t a1)
{
  double result = (void *)sub_10015F760();
  if (result)
  {
    v3[0] = off_1023420F8;
    v3[1] = a1;
    v3[3] = v3;
    sub_1018D6764(a1 + 1704, (uint64_t)v3);
    return sub_1017C825C(v3);
  }
  return result;
}

void sub_1018224E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1018224FC(uint64_t a1)
{
  v2[0] = off_102342178;
  v2[3] = v2;
  sub_1018D6764(a1 + 1704, (uint64_t)v2);
  return sub_1017C825C(v2);
}

void sub_101822584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101822598(uint64_t a1)
{
  long long v5 = 0uLL;
  int v6 = 0;
  if (sub_10073FDC8((uint64_t)&v5))
  {
    int v2 = (char *)operator new(0x20uLL);
    *(void *)int v2 = off_102342218;
    *(_OWORD *)(v2 + 8) = v5;
    *((_DWORD *)v2 + 6) = v6;
    v7[3] = v2;
    sub_1018D6764(a1 + 1704, (uint64_t)v7);
    sub_1017C825C(v7);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    char v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "expected L1 rf params to be known for this platform", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::sendL1RfConfig()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_101822790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1018227AC(uint64_t a1, long long *a2)
{
  switch(*((_DWORD *)a2 + 205))
  {
    case 0:
      int v4 = (void *)(a1 + 504);
      goto LABEL_4;
    case 1:
      int v4 = (void *)(a1 + 512);
LABEL_4:
      ++*v4;
      if (sub_100D33CD4(a1 + 2268))
      {
        double v5 = *(double *)((char *)a2 + 36);
        if (v5 > 0.0)
        {
          double v6 = *(double *)(a1 + 3668);
          if (v6 <= 0.0 || v5 < v6)
          {
            long long v8 = *a2;
            *(_OWORD *)(a1 + 3648) = a2[1];
            *(_OWORD *)(a1 + 3632) = v8;
            long long v9 = a2[2];
            long long v10 = a2[3];
            long long v11 = a2[4];
            *(_OWORD *)(a1 + 3712) = a2[5];
            *(_OWORD *)(a1 + 3696) = v11;
            *(_OWORD *)(a1 + 3680) = v10;
            *(_OWORD *)(a1 + 3664) = v9;
            long long v12 = a2[6];
            long long v13 = a2[7];
            long long v14 = a2[8];
            *(_OWORD *)(a1 + 3772) = *(long long *)((char *)a2 + 140);
            *(_OWORD *)(a1 + 3760) = v14;
            *(_OWORD *)(a1 + 3744) = v13;
            *(_OWORD *)(a1 + 3728) = v12;
          }
        }
      }
      v23[0] = off_1023422B8;
      v23[1] = a1;
      v23[2] = a2;
      void v23[3] = v23;
      sub_1018D6764(a1 + 1704, (uint64_t)v23);
      sub_1017C825C(v23);
      uint64_t v15 = *(void *)(a1 + 3192);
      if (v15) {
        sub_1018C11E0(v15);
      }
      return;
    case 2:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      char v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)((char *)a2 + 76);
        *(_DWORD *)uint64_t buf = 134217984;
        uint64_t v22 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "EurekaController,%.1lf,TEPA suppressed", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_28;
      }
      goto LABEL_30;
    case 3:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v18 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)((char *)a2 + 76);
        *(_DWORD *)uint64_t buf = 134217984;
        uint64_t v22 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Warning,EurekaController,%.1lf,Unknown position assistance type", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_28;
      }
LABEL_30:
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
LABEL_28:
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
      return;
    default:
      return;
  }
}

void sub_101822BAC(_Unwind_Exception *a1)
{
  sub_1017C825C((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_101822BD8(uint64_t a1, double a2, double a3, double a4)
{
  if (a2 <= 0.0 || a3 <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2050;
      double v22 = a2;
      __int16 v23 = 2050;
      double v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#gnss Invalid time assistance\", \"time\":\"%{public}f\", \"timeUncertainty_s\":\"%{public}.09f\"}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    long long v13 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2050;
      double v22 = a2;
      __int16 v23 = 2050;
      double v24 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#gnss Invalid time assistance", "{\"msg%{public}.0s\":\"#gnss Invalid time assistance\", \"time\":\"%{public}f\", \"timeUncertainty_s\":\"%{public}.09f\"}", buf, 0x26u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss feeding assistance time\"}", buf, 0x12u);
    }
    *(unsigned char *)(a1 + 648) = 1;
    ++*(void *)(a1 + 592);
    if (sub_10073DC4C()) {
      unsigned int v9 = 100;
    }
    else {
      unsigned int v9 = 1000;
    }
    double v10 = a3 * 1000.0;
    double v11 = (double)v9;
    if (v10 <= (double)v9)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      long long v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289538;
        int v18 = 0;
        __int16 v19 = 2082;
        int v20 = "";
        __int16 v21 = 2050;
        double v22 = v10;
        __int16 v23 = 1026;
        LODWORD(v24) = v9;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss time injection \", \"tunc(ms)\":\"%{public}f\", \"flooring,tuncNew(ms)\":%{public}u}", buf, 0x22u);
      }
    }
    else
    {
      double v11 = v10;
    }
    v16[0] = off_102342358;
    *(double *)&v16[1] = a2;
    *(double *)&v16[2] = v11;
    v16[3] = v16;
    sub_1018D6764(a1 + 1704, (uint64_t)v16);
    sub_1017C825C(v16);
    uint64_t v15 = *(void *)(a1 + 3192);
    if (v15) {
      sub_1018C06F0(v15, a2, a4);
    }
  }
}

void sub_101822F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101822F78(uint64_t a1, int a2, int a3)
{
  if (*(unsigned char *)(a1 + 2264))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ec,multiband mode,L1,%d,L5,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v15 = 67109376;
      int v16 = a2;
      __int16 v17 = 1024;
      int v18 = a3;
      unsigned int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::setRfBandEnable(BOOL, BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if ((a2 & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      char v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ec,multiband mode,cannot disable primary", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        LOWORD(v15) = 0;
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::setRfBandEnable(BOOL, BOOL)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    long long v12 = off_1023423F8;
    char v13 = a3;
    long long v14 = &v12;
    sub_1018D6764(a1 + 1704, (uint64_t)&v12);
    sub_1017C825C(&v12);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ec,device not in connected state", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v15) = 0;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::setRfBandEnable(BOOL, BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_1018233E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101823404(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 3192);
  if (v1) {
    sub_1018BE8BC(v1);
  }
}

void sub_101823414(uint64_t a1, int a2)
{
  if (a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ec,unexpected enable of duty cycling", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      char v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::sendAllowGnssDwellDutyCycling(BOOL)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1018235A0(uint64_t a1, double *a2)
{
  unint64_t v6 = (unint64_t)((*a2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0);
  float v2 = a2[6];
  float v3 = a2[7];
  float v7 = v2;
  float v8 = v3;
  char v9 = 3;
  if (v2 < 0.0 || v3 <= 0.01)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"DOT,invalid assistance\"}", buf, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    double v5 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "DOT,invalid assistance", "{\"msg%{public}.0s\":\"DOT,invalid assistance\"}", buf, 0x12u);
    }
  }
  else
  {
    v10[0] = off_102342478;
    v10[1] = &v6;
    v10[3] = v10;
    sub_1018D6764(a1 + 1704, (uint64_t)v10);
    sub_1017C825C(v10);
  }
}

void sub_1018237A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1018237BC(uint64_t a1, uint64_t a2)
{
  v3[0] = off_102342518;
  v3[1] = a2;
  v3[3] = v3;
  sub_1018D6764(a1 + 1704, (uint64_t)v3);
  return sub_1017C825C(v3);
}

void sub_101823844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_101823858(void *result, int *a2)
{
  if (*((unsigned char *)result + 2294)) {
    return result;
  }
  float v2 = result;
  if (!*((unsigned char *)result + 2016)) {
    return result;
  }
  long long v12 = 0uLL;
  int v13 = -65536;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)uint64_t buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    int v18 = "";
    __int16 v19 = 1026;
    int v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"injectAssistanceMotion\", \"type\":%{public}d}", buf, 0x18u);
  }
  uint64_t v6 = 0;
  int v7 = *a2;
  if (*a2 <= 40)
  {
    switch(v7)
    {
      case 1:
        HIDWORD(v12) = 1120402145;
        *(void *)&long long v12 = 1;
        uint64_t v6 = 0x300000000;
        break;
      case 2:
        float v10 = 95.0;
        if (a2[1] == 2) {
          float v10 = 99.9;
        }
        *((float *)&v12 + 3) = v10;
        *(void *)&long long v12 = 1;
        uint64_t v6 = (uint64_t)&_mh_execute_header;
        break;
      case 3:
      case 7:
      case 9:
        goto LABEL_14;
      case 4:
        HIDWORD(v12) = 1119092736;
        LODWORD(v12) = 2;
        uint64_t v6 = 0x200000002;
        if ((a2[1] - 1) <= 1)
        {
          HIDWORD(v12) = 1120272384;
          *(void *)((char *)&v12 + 4) = 0x100000001;
        }
        break;
      case 5:
        goto LABEL_18;
      case 6:
        HIDWORD(v12) = 1119092736;
        LODWORD(v12) = 2;
        uint64_t v6 = 0x200000004;
        break;
      case 8:
        *(void *)&long long v12 = 0x100000002;
        *((void *)&v12 + 1) = 0x42C7CCCD00000002;
        uint64_t v6 = 0x200000005;
        break;
      case 10:
        HIDWORD(v12) = 1120402145;
        *(void *)&long long v12 = 0x200000001;
        uint64_t v6 = 0x300000003;
        break;
      case 11:
        float v11 = 95.0;
        if (a2[1] == 2) {
          float v11 = 99.9;
        }
        *((float *)&v12 + 3) = v11;
        *(void *)&long long v12 = 0x200000001;
        uint64_t v6 = 0x100000003;
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (v7 > 55)
  {
    if (v7 != 56)
    {
      if (v7 == 18240)
      {
        *(void *)&long long v12 = 0x300000002;
        *((void *)&v12 + 1) = 0x42C7CCCD00000000;
        uint64_t v6 = 0x200000006;
      }
      goto LABEL_23;
    }
LABEL_18:
    HIDWORD(v12) = 1119092736;
    LODWORD(v12) = 2;
    if ((a2[1] - 1) <= 1)
    {
      float v8 = 99.0;
      if (a2[3] == 1) {
        float v8 = 99.9;
      }
      *((float *)&v12 + 3) = v8;
      DWORD1(v12) = 2;
      uint64_t v6 = 0x200000003;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v7 != 41)
  {
    if (v7 != 52) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
LABEL_14:
  HIDWORD(v12) = 1119092736;
  LODWORD(v12) = 2;
LABEL_22:
  uint64_t v6 = 0x200000001;
LABEL_23:
  v2[43] = v6;
  if (a2[3] == 1) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  *((_DWORD *)v2 + 88) = v9;
  ++v2[73];
  ++v2[80];
  v14[0] = off_1023425B8;
  v14[1] = &v12;
  void v14[3] = v14;
  sub_1018D6764((uint64_t)(v2 + 213), (uint64_t)v14);
  return sub_1017C825C(v14);
}

void sub_101823C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_101823C44(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 2294) = a2;
  float v3 = off_102342658;
  char v4 = a2;
  int v5 = &v3;
  sub_1018D6764(a1 + 1704, (uint64_t)&v3);
  return sub_1017C825C(&v3);
}

void sub_101823CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101823CE8(uint64_t a1, double *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 3);
    *(_DWORD *)uint64_t buf = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2050;
    uint64_t v15 = v5;
    __int16 v16 = 2050;
    uint64_t v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"injectAssistancePedometerSpeed\", \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\"}", buf, 0x26u);
  }
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *a2 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v7 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    float v8 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeed,invalid validity time\"}";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
    return;
  }
  if (((void)a2[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[2] < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v7 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    float v8 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeed,invalid speed\"}";
    goto LABEL_24;
  }
  if (((void)a2[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a2[3] > 0.0)
  {
    v9[0] = off_1023426F8;
    v9[1] = a2;
    v9[3] = v9;
    sub_1018D6764(a1 + 1704, (uint64_t)v9);
    sub_1017C825C(v9);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    float v8 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeed,invalid estimated speed error\"}";
    goto LABEL_24;
  }
}

void sub_101823FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101823FF8(uint64_t a1, double *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *((void *)a2 + 3);
    uint64_t v6 = *((void *)a2 + 4);
    *(_DWORD *)uint64_t buf = 68289538;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v5;
    __int16 v17 = 2050;
    uint64_t v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"injectAssistancePedometerSpeedConstraint\", \"min\":\"%{public}f\", \"max\":\"%{public}f\"}", buf, 0x26u);
  }
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *a2 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    float v8 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    int v9 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid validity time\"}";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x12u);
    return;
  }
  if (((void)a2[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[2] <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    float v8 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    int v9 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid duration\"}";
    goto LABEL_30;
  }
  double v7 = a2[3];
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v7 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    float v8 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    int v9 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid minimum speed bound\"}";
    goto LABEL_30;
  }
  if (((void)a2[4] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a2[4] >= v7)
  {
    v10[0] = off_102342798;
    v10[1] = a2;
    v10[3] = v10;
    sub_1018D6764(a1 + 1704, (uint64_t)v10);
    sub_1017C825C(v10);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  float v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    int v9 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid maximum speed bound\"}";
    goto LABEL_30;
  }
}

void sub_101824380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101824394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 2264))
  {
    sub_10065AB34((uint64_t)v9, a2);
    sub_10183C268((uint64_t)v8, a3);
    sub_101926E60(a1, (uint64_t)v9, (uint64_t)v8);
    sub_10183C300(v8);
    sub_10065ABCC(v9);
    v7[0] = off_102342838;
    v7[1] = a1;
    v7[3] = v7;
    sub_1018D6764(a1 + 1704, (uint64_t)v7);
    sub_1017C825C(v7);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#tt,device not in connected state", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::startTimeTransfer(TimeTransferStateCallback, TimeTransferCallback)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_10182459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017C825C(va);
  _Unwind_Resume(a1);
}

void sub_1018245D8(uint64_t a1)
{
  float v2 = *(NSObject **)(a1 + 2032);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101824848;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v2, block);
  if (*(unsigned char *)(a1 + 2264))
  {
    v6[0] = off_1023428E0;
    v6[3] = v6;
    sub_1018D6764(a1 + 1704, (uint64_t)v6);
    sub_1017C825C(v6);
    sub_101926F8C((void *)a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    float v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#tt,device not in connected state", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      char v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::stopTimeTransfer()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(_WORD *)(a1 + 2297) = 0;
    if (*(unsigned char *)(a1 + 2056)) {
      *(unsigned char *)(a1 + 2056) = 0;
    }
    if (*(unsigned char *)(a1 + 2136)) {
      *(unsigned char *)(a1 + 2136) = 0;
    }
  }
}

void sub_10182482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101824848(uint64_t a1)
{
}

void sub_101824858(const void **a1, const void *a2)
{
  float v3 = *a1;
  *a1 = a2;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_101824884(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2056) || *(unsigned char *)(a1 + 2136))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    float v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v3 = *(unsigned __int8 *)(a1 + 2056);
      int v4 = *(unsigned __int8 *)(a1 + 2136);
      *(_DWORD *)uint64_t buf = 67240448;
      int v18 = v3;
      __int16 v19 = 1026;
      int v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#tt,states not cleared,mark,%{public}d,ind,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v8 = *(unsigned __int8 *)(a1 + 2056);
      int v9 = *(unsigned __int8 *)(a1 + 2136);
      int v13 = 67240448;
      int v14 = v8;
      __int16 v15 = 1026;
      int v16 = v9;
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::timeTransferPulse(const BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if (*(unsigned char *)(a1 + 2056)) {
    *(unsigned char *)(a1 + 2056) = 0;
  }
  if (*(unsigned char *)(a1 + 2136)) {
    *(unsigned char *)(a1 + 2136) = 0;
  }
  if (*(void *)(a1 + 2032))
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 1672), "silo") queue];
    uint64_t v6 = *(NSObject **)(a1 + 2032);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101824C18;
    block[3] = &unk_1022A56E0;
    void block[4] = v5;
    void block[5] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#tt,no timemark queue", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v13) = 0;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::timeTransferPulse(const BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_101824C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v9 + 2024);
  if (v10)
  {
    int v11 = *(NSObject **)(a1 + 32);
    sub_101824DE4(v9, v10, v11, a4, a5, a6, a7, a8);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#warning, #tt, tried to send pulse without telephony bb ref", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::timeTransferPulse(const BOOL)_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_101824DE4(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    sub_10184471C(a1, 0, (uint64_t)a3, a4, a5, a6, a7, a8, v19, v20, v21, (uint64_t)block, v23, (uint64_t)v24, (uint64_t)v25, v26, v27, *((uint64_t *)&v27 + 1), v28,
  }
      *((uint64_t *)&v28 + 1),
      v29,
      *((uint64_t *)&v29 + 1),
      buf,
      *((uint64_t *)&buf + 1),
      v31,
      v32,
      v33,
      v34);
  if (!a3) {
    sub_10184489C(a1, a2, 0, a4, a5, a6, a7, a8, v19, v20, v21, (uint64_t)block, v23, (uint64_t)v24, (uint64_t)v25, v26, v27, *((uint64_t *)&v27 + 1), v28,
  }
      *((uint64_t *)&v28 + 1),
      v29,
      *((uint64_t *)&v29 + 1),
      buf,
      *((uint64_t *)&buf + 1),
      v31,
      v32,
      v33,
      v34);
  long long v28 = 0uLL;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#tt,trigger pulse to BB", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    LOWORD(v29) = 0;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::wrapBasebandTimemarkPulse(TelephonyBasebandControllerRef, dispatch_queue_t)", "%s\n", v16);
    if (v16 != (char *)&buf) {
      free(v16);
    }
  }
  double v11 = sub_10016C458();
  if (TelephonyBasebandAPTimeSync())
  {
    double v12 = sub_10016C458();
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v13 = v12 - v11;
    int v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(double *)((char *)&buf + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#tt,completed pulse to BB,delay_sec,%.3f", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LODWORD(v29) = 134217984;
      *(double *)((char *)&v29 + 4) = v13;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::wrapBasebandTimemarkPulse(TelephonyBasebandControllerRef, dispatch_queue_t)", "%s\n", v17);
      if (v17 != (char *)&buf) {
        free(v17);
      }
    }
    if (v13 > 30.0) {
      sub_10187A1C8([objc_msgSend(*(id *)(a1 + 1672), "silo") queue], @"timemark", @"sync_api_slow", 0);
    }
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v23 = 3221225472;
    double v24 = sub_1018252C0;
    double v25 = &unk_1022B8680;
    uint64_t v26 = a1;
    long long v27 = v28;
    dispatch_async(a3, &block);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#warning, #tt, pulse failed", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LOWORD(v29) = 0;
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::wrapBasebandTimemarkPulse(TelephonyBasebandControllerRef, dispatch_queue_t)", "%s\n", v18);
      if (v18 != (char *)&buf) {
        free(v18);
      }
    }
  }
}

void sub_1018252C0(uint64_t a1)
{
}

void sub_1018252D0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + 2056))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#tt, previous time bounds not consumed before end of new pulse", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::onTimeTransferPulseCompletion(TelephonyBasebandAPTimeSyncOutput)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    int v7 = *(unsigned __int8 *)(a1 + 2056);
    *(void *)(a1 + 2040) = a2;
    *(void *)(a1 + 2048) = a3;
    if (v7)
    {
      if (!a2) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else
  {
    *(void *)(a1 + 2040) = a2;
    *(void *)(a1 + 2048) = a3;
  }
  *(unsigned char *)(a1 + 2056) = 1;
  if (!a2)
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = *(double *)(a1 + 2040);
      uint64_t v10 = *(void *)(a1 + 2048);
      *(_DWORD *)long long buf = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 2050;
      double v22 = v9;
      __int16 v23 = 2050;
      uint64_t v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: #tt received unexpected or invalid data\", \"timeMarkBefore\":%{public}llu, \"timeMarkAfter\":%{public}llu}", buf, 0x26u);
    }
    return;
  }
LABEL_12:
  if (a3 < a2) {
    goto LABEL_13;
  }
  double v11 = sub_1000D3D90(a2 + ((a3 - a2) >> 1));
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a1 + 2040);
    uint64_t v14 = *(void *)(a1 + 2048);
    *(_DWORD *)long long buf = 68289794;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2050;
    double v22 = v11;
    __int16 v23 = 2050;
    uint64_t v24 = v13;
    __int16 v25 = 2050;
    uint64_t v26 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt\", \"apMachPulseTime\":\"%{public}f\", \"timeMarkBefore\":%{public}llu, \"timeMarkAfter\":%{public}llu}", buf, 0x30u);
  }
  v16[0] = off_102342980;
  v16[1] = (unint64_t)(v11 * 1000000000.0);
  v16[3] = v16;
  sub_1018D6764(a1 + 1704, (uint64_t)v16);
  sub_1017C825C(v16);
  sub_101821DD0(a1);
}

void sub_101825658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101825674(uint64_t a1, unint64_t *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102489068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102489068))
  {
    *(double *)&qword_102489060 = (double)sub_1004BDA0C() * 604800.0;
    __cxa_guard_release(&qword_102489068);
  }
  if (*a2 > 0x2260FF928FFFFLL)
  {
    double v7 = (double)*a2 * 0.000000001;
    if (v7 - *(double *)&qword_102489060 < -1209600.0)
    {
      a2[37] |= 1uLL;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134349312;
        double v14 = v7;
        __int16 v15 = 2050;
        uint64_t v16 = qword_102489060;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#imag,Warning,build time detection,%{public}.1f,build,%{public}.1f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::performSpoofingChecks(GNSS::PerEpochData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    unint64_t v9 = *(void *)(a1 + 2176);
    if (v9)
    {
      double v10 = (double)v9 * 0.000000001;
      if (v7 - v10 < -2.0 || v7 - v10 > 1209600.0)
      {
        a2[37] |= 2uLL;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        double v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134349312;
          double v14 = v7;
          __int16 v15 = 2050;
          uint64_t v16 = *(void *)&v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#imag,EE time,detection,fix,%{public}.1f,ee,%{public}.1f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          uint64_t v6 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::performSpoofingChecks(GNSS::PerEpochData &)", "%s\n", v6);
          goto LABEL_33;
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      double v5 = (double)*a2 * 0.000000001;
      *(_DWORD *)long long buf = 134217984;
      double v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#imag,fix is in week 0,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::performSpoofingChecks(GNSS::PerEpochData &)", "%s\n", v6);
LABEL_33:
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_101825BEC(_Unwind_Exception *a1)
{
}

void sub_101825C0C(uint64_t a1, int a2, uint64_t a3, int a4, double a5)
{
  int v13 = a2;
  double v12 = a5;
  if (sub_100D33CD4(a1 + 2268)
    && a4
    && (double v8 = *(double *)(a1 + 3668), v8 < 10.0)
    && v8 > 0.0
    && *(double *)(a3 + 544) > 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    unint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Not feeding DEM assistance, DEM Deweight area, suitably accurate vertical assistance already provided", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else if ((*(_DWORD *)(a3 + 96) | 8) == 9 && *(double *)(a3 + 36) < 100.0)
  {
    ++*(void *)(a1 + 536);
    double v11 = operator new(0x20uLL);
    *double v11 = off_102342A20;
    v11[1] = &v13;
    _DWORD v11[2] = a3;
    v11[3] = &v12;
    void v14[3] = v11;
    sub_1018D6764(a1 + 1704, (uint64_t)v14);
    sub_1017C825C(v14);
  }
}

void sub_101825E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101825E78(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v139 = 0;
  uint64_t v140 = &v139;
  uint64_t v141 = 0x16012000000;
  uint64_t v142 = sub_101827260;
  long long v143 = sub_1018272E0;
  uint64_t v144 = "";
  long long v149 = 0u;
  long long v150 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  int v151 = 1;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  char v155 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v156 = _Q1;
  char v157 = 0;
  long long v158 = _Q1;
  char v159 = 0;
  long long v160 = _Q1;
  char v161 = 0;
  uint64_t v164 = 0;
  memset(v163, 0, sizeof(v163));
  long long v162 = 0u;
  int v165 = 1065353216;
  uint64_t v166 = 0x100000005;
  uint64_t v167 = 0;
  uint64_t v135 = 0;
  v136 = &v135;
  uint64_t v137 = 0x2020000000;
  int v138 = 9;
  uint64_t v131 = 0;
  uint64_t v132 = &v131;
  uint64_t v133 = 0x2020000000;
  char v134 = 0;
  uint64_t v127 = 0;
  long long v128 = &v127;
  uint64_t v129 = 0x2020000000;
  char v130 = 0;
  uint64_t v123 = 0;
  long long v124 = &v123;
  uint64_t v125 = 0x2020000000;
  char v126 = 0;
  char v148 = 0;
  v122[0] = _NSConcreteStackBlock;
  v122[1] = 3221225472;
  v122[2] = sub_1018272E8;
  v122[3] = &unk_10233F900;
  v122[4] = a1;
  __p[0] = v122;
  sub_1017CACF0(a2, 31, (uint64_t)__p);
  v121[0] = _NSConcreteStackBlock;
  v121[1] = 3221225472;
  v121[2] = sub_1018274F8;
  v121[3] = &unk_1022ACDD8;
  v121[4] = a1;
  __p[0] = v121;
  sub_1018415C4(a2, 16, (uint64_t)__p);
  v120[0] = _NSConcreteStackBlock;
  v120[1] = 3221225472;
  v120[2] = sub_101827568;
  v120[3] = &unk_1022ACDD8;
  v120[4] = a1;
  __p[0] = v120;
  sub_101841848(a2, 17, (uint64_t)__p);
  v119[0] = _NSConcreteStackBlock;
  v119[1] = 3221225472;
  v119[2] = sub_1018275F0;
  v119[3] = &unk_10233F928;
  v119[4] = &v135;
  __p[0] = v119;
  sub_1018419FC(a2, 18, (uint64_t)__p);
  v118[0] = _NSConcreteStackBlock;
  v118[1] = 3221225472;
  v118[2] = sub_101827604;
  v118[3] = &unk_10233F950;
  v118[8] = a1;
  v118[4] = &v123;
  v118[5] = &v139;
  v118[6] = &v131;
  v118[7] = &v127;
  __p[0] = v118;
  sub_1017CAD98(a2, 19, __p);
  v117[0] = _NSConcreteStackBlock;
  v117[1] = 3221225472;
  v117[2] = sub_101827DE8;
  v117[3] = &unk_10233F970;
  v117[4] = a1;
  __p[0] = v117;
  sub_101841AA4(a2, 20, (uint64_t)__p);
  v116[0] = _NSConcreteStackBlock;
  v116[1] = 3221225472;
  v116[2] = sub_101827F5C;
  v116[3] = &unk_1022ACDD8;
  v116[4] = a1;
  __p[0] = v116;
  sub_101841B4C(a2, 23, (uint64_t)__p);
  v115[0] = _NSConcreteStackBlock;
  v115[1] = 3221225472;
  v115[2] = sub_10182837C;
  v115[3] = &unk_1022ACDD8;
  v115[4] = a1;
  __p[0] = v115;
  sub_1017CA8FC(a2, 26, (uint64_t)__p);
  v114[0] = _NSConcreteStackBlock;
  v114[1] = 3221225472;
  v114[2] = sub_101828508;
  v114[3] = &unk_10233C4A0;
  v114[4] = a1;
  __p[0] = v114;
  sub_1017C8CB0(a2, 27, (uint64_t)__p);
  v113[0] = _NSConcreteStackBlock;
  v113[1] = 3221225472;
  v113[2] = sub_1018286B4;
  v113[3] = &unk_10233F998;
  v113[5] = a1;
  v113[4] = &v139;
  __p[0] = v113;
  sub_1017CACF0(a2, 28, (uint64_t)__p);
  v112[0] = _NSConcreteStackBlock;
  v112[1] = 3221225472;
  v112[2] = sub_1018288CC;
  v112[3] = &unk_10233F9C0;
  v112[5] = a1;
  v112[4] = &v139;
  __p[0] = v112;
  sub_1017C8CB0(a2, 32, (uint64_t)__p);
  v111[0] = _NSConcreteStackBlock;
  v111[1] = 3221225472;
  v111[2] = sub_101828AB8;
  v111[3] = &unk_10233F9E8;
  v111[5] = a1;
  v111[4] = &v139;
  __p[0] = v111;
  sub_101842094(a2, 34, (uint64_t)__p);
  v110[0] = _NSConcreteStackBlock;
  v110[1] = 3221225472;
  v110[2] = sub_101828D38;
  v110[3] = &unk_10233FA10;
  v110[5] = a1;
  v110[4] = &v139;
  __p[0] = v110;
  sub_10184226C(a2, 36, (uint64_t)__p);
  v109[0] = _NSConcreteStackBlock;
  v109[1] = 3221225472;
  v109[2] = sub_101828D7C;
  v109[3] = &unk_1022ACDD8;
  v109[4] = a1;
  __p[0] = v109;
  sub_1018415C4(a2, 37, (uint64_t)__p);
  v108[0] = _NSConcreteStackBlock;
  v108[1] = 3221225472;
  v108[2] = sub_101828DEC;
  v108[3] = &unk_10233FA30;
  v108[4] = a1;
  __p[0] = v108;
  sub_101842418(a2, 38, (uint64_t)__p);
  v107[0] = _NSConcreteStackBlock;
  v107[1] = 3221225472;
  v107[2] = sub_101828F60;
  v107[3] = &unk_10233C4C0;
  v107[4] = a1;
  __p[0] = v107;
  sub_1017CACF0(a2, 39, (uint64_t)__p);
  v106[0] = _NSConcreteStackBlock;
  v106[1] = 3221225472;
  v106[2] = sub_101829118;
  v106[3] = &unk_10233C4E0;
  v106[4] = a1;
  __p[0] = v106;
  sub_1017CACF0(a2, 40, (uint64_t)__p);
  v105[0] = _NSConcreteStackBlock;
  v105[1] = 3221225472;
  v105[2] = sub_1018292D0;
  v105[3] = &unk_10233FA50;
  v105[4] = a1;
  __p[0] = v105;
  sub_1017CACF0(a2, 48, (uint64_t)__p);
  v104[0] = _NSConcreteStackBlock;
  v104[1] = 3221225472;
  v104[2] = sub_101829488;
  v104[3] = &unk_10233C500;
  v104[4] = a1;
  __p[0] = v104;
  sub_1017CACF0(a2, 50, (uint64_t)__p);
  v103[0] = _NSConcreteStackBlock;
  v103[1] = 3221225472;
  v103[2] = sub_101829728;
  v103[3] = &unk_10233FA70;
  v103[4] = a1;
  __p[0] = v103;
  sub_1017C8D58(a2, 53, (uint64_t)__p);
  uint64_t v71 = 0;
  long long v72 = &v71;
  uint64_t v73 = 0x11012000000;
  long long v74 = sub_101829730;
  uint64_t v75 = sub_101829824;
  long long v76 = "";
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  long long v78 = 0;
  char v82 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  long long v83 = 0;
  char v86 = 9;
  long long v90 = 0;
  uint64_t v91 = 0;
  long long v89 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  __int16 v92 = -1;
  uint64_t v95 = 0;
  long long v93 = 0;
  int v94 = 0;
  char v96 = -1;
  uint64_t v99 = 0;
  int v100 = 0;
  __int16 v97 = 0;
  long long v98 = 0;
  __int16 v101 = 255;
  uint64_t v102 = 0;
  uint64_t v81 = 0xFFFFFFFFLL;
  int v77 = 0;
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472;
  v70[2] = sub_1018298AC;
  v70[3] = &unk_10233C548;
  v70[4] = &v71;
  __p[0] = v70;
  sub_1017CACF0(a2, 43, (uint64_t)__p);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_1018299C0;
  v69[3] = &unk_10233C570;
  v69[4] = &v71;
  __p[0] = v69;
  sub_1017CACF0(a2, 41, (uint64_t)__p);
  v68[0] = _NSConcreteStackBlock;
  v68[1] = 3221225472;
  v68[2] = sub_101829AD4;
  v68[3] = &unk_10233C598;
  v68[4] = &v71;
  __p[0] = v68;
  sub_1017CAE68(a2, 42, (uint64_t)__p);
  double v8 = v72;
  *((_WORD *)v72 + 130) = 255;
  *((_DWORD *)v8 + 64) = 255;
  v8[33] = 0;
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  v67[2] = sub_101829BF0;
  v67[3] = &unk_10233FA98;
  v67[4] = &v71;
  __p[0] = v67;
  sub_1017CACF0(a2, 55, (uint64_t)__p);
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472;
  void v66[2] = sub_101829C04;
  v66[3] = &unk_10233C5E8;
  v66[4] = &v71;
  __p[0] = v66;
  sub_1017C8D58(a2, 54, (uint64_t)__p);
  int v9 = *((_DWORD *)v72 + 64);
  if (v9 == 1) {
    int v10 = 1;
  }
  else {
    int v10 = 255;
  }
  if (v9 == 1) {
    char v11 = 1;
  }
  else {
    char v11 = -1;
  }
  _ZF = v9 == 0;
  if (v9) {
    char v13 = v11;
  }
  else {
    char v13 = 0;
  }
  *((unsigned char *)v72 + 260) = v13;
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3221225472;
  v64[2] = sub_101829C40;
  void v64[3] = &unk_10233C610;
  if (_ZF) {
    int v14 = 0;
  }
  else {
    int v14 = v10;
  }
  v64[4] = &v71;
  v64[5] = a1;
  int v65 = v14;
  __p[0] = v64;
  sub_1017CAFD0(a2, 25, (uint64_t)__p);
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472;
  void v63[2] = sub_10182A3F0;
  void v63[3] = &unk_10233FAC0;
  v63[4] = &v135;
  v63[5] = &v127;
  v63[6] = a1;
  __p[0] = v63;
  sub_1017CACF0(a2, 49, (uint64_t)__p);
  if (sub_10073CBFC())
  {
    if (*((_DWORD *)v136 + 6) != 9)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        sub_1019BCEC8(*((_DWORD *)v136 + 6), __p);
        uint64_t v16 = v173 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "sessionFixStatus,%s", buf, 0xCu);
        if (v173 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        sub_1019BCEC8(*((_DWORD *)v136 + 6), buf);
        if (v169 >= 0) {
          uint64_t v61 = buf;
        }
        else {
          uint64_t v61 = *(unsigned char **)buf;
        }
        int v170 = 136315138;
        __int16 v171 = v61;
        uint64_t v62 = (char *)_os_log_send_and_compose_impl();
        if (v169 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsEventReport(const pds::eventReportInd::Indication &)", "%s\n", v62);
        if (v62 != (char *)__p) {
          free(v62);
        }
      }
    }
    if (sub_100D33A54(a1 + 2268) && *((_DWORD *)v136 + 6) == 8) {
      sub_10182A684(a1, "locationd,E911InProgress");
    }
    if (*((unsigned char *)v124 + 24))
    {
      unsigned int v17 = *((unsigned __int8 *)v128 + 24);
      if (v17 > 2)
      {
        if (v17 == 3 || v17 == 255)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          uint64_t v45 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v17;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "InvalidFixMode,%d", (uint8_t *)__p, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10233FB48);
            }
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v17;
            __int16 v46 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handlePdsEventReport(const pds::eventReportInd::Indication &)", "%s\n", v46);
            if (v46 != (char *)__p) {
              free(v46);
            }
          }
        }
      }
      else
      {
        if (v17 - 1 < 2)
        {
          sub_10182A888(a1, (uint64_t)(v140 + 6), (int *)v136 + 6, *((unsigned __int8 *)v128 + 24));
          int v18 = v140;
          __int16 v19 = v140 + 6;
          long long v20 = *((_OWORD *)v140 + 6);
          long long v22 = *((_OWORD *)v140 + 3);
          long long v21 = *((_OWORD *)v140 + 4);
          *(_OWORD *)(a1 + 3256) = *((_OWORD *)v140 + 5);
          *(_OWORD *)(a1 + 3272) = v20;
          *(_OWORD *)(a1 + 3224) = v22;
          *(_OWORD *)(a1 + 3240) = v21;
          long long v23 = *((_OWORD *)v18 + 10);
          long long v25 = *((_OWORD *)v18 + 7);
          long long v24 = *((_OWORD *)v18 + 8);
          *(_OWORD *)(a1 + 3320) = *((_OWORD *)v18 + 9);
          *(_OWORD *)(a1 + 3336) = v23;
          *(_OWORD *)(a1 + 3288) = v25;
          *(_OWORD *)(a1 + 3304) = v24;
          long long v26 = *((_OWORD *)v18 + 14);
          long long v28 = *((_OWORD *)v18 + 11);
          long long v27 = *((_OWORD *)v18 + 12);
          *(_OWORD *)(a1 + 3384) = *((_OWORD *)v18 + 13);
          *(_OWORD *)(a1 + 3400) = v26;
          *(_OWORD *)(a1 + 3352) = v28;
          *(_OWORD *)(a1 + 3368) = v27;
          long long v30 = *((_OWORD *)v18 + 16);
          long long v29 = *((_OWORD *)v18 + 17);
          long long v31 = *((_OWORD *)v18 + 15);
          *(void *)(a1 + 3464) = v18[36];
          *(_OWORD *)(a1 + 3432) = v30;
          *(_OWORD *)(a1 + 3448) = v29;
          *(_OWORD *)(a1 + 3416) = v31;
          if ((void *)(a1 + 3224) == v19)
          {
LABEL_38:
            *(_OWORD *)(a1 + 3512) = *((_OWORD *)v18 + 21);
            goto LABEL_66;
          }
LABEL_37:
          *(_DWORD *)(a1 + 3504) = *((_DWORD *)v18 + 82);
          sub_10084EEAC((void *)(a1 + 3472), (uint64_t *)v18[39], 0);
          goto LABEL_38;
        }
        if (!*((unsigned char *)v128 + 24))
        {
          uint64_t v47 = (uint64_t)(v140 + 6);
          *((_DWORD *)v140 + 85) = 2 * *(unsigned __int8 *)(a1 + 2291);
          sub_10182AA6C(a1, v47);
          sub_10182AC90(a1, *((unsigned __int8 *)v132 + 24), (uint64_t)(v140 + 6));
          __int16 v48 = v140;
          double v49 = sub_10016C458();
          double v50 = *(double *)(a1 + 2624);
          if (v50 <= 0.0 || (double v51 = v49 - v50, v51 < 0.0) || v51 > 0.5) {
            *((_DWORD *)v48 + 47) = 0;
          }
          long long v52 = v140;
          if (v140 + 6 != (uint64_t *)(a1 + 2320))
          {
            long long v53 = v140 + 37;
            *((_DWORD *)v140 + 82) = *(_DWORD *)(a1 + 2600);
            sub_10084EEAC(v53, *(uint64_t **)(a1 + 2584), 0);
            long long v52 = v140;
          }
LABEL_65:
          sub_10182AD34((__n128 *)a1, *((_DWORD *)v136 + 6), (uint64_t)(v52 + 6), *((unsigned __int8 *)v128 + 24));
        }
      }
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 2016) || sub_100D33A54(a1 + 2268) || *(unsigned char *)(a1 + 2184))
    {
      if (!*((unsigned char *)v124 + 24)) {
        goto LABEL_66;
      }
      sub_10182A888(a1, (uint64_t)(v140 + 6), (int *)v136 + 6, *((unsigned __int8 *)v128 + 24));
      sub_10182B740(a1, *((_DWORD *)v136 + 6), (uint64_t)(v140 + 6), *((unsigned __int8 *)v128 + 24));
      int v18 = v140;
      uint64_t v32 = v140 + 6;
      long long v33 = *((_OWORD *)v140 + 6);
      long long v35 = *((_OWORD *)v140 + 3);
      long long v34 = *((_OWORD *)v140 + 4);
      *(_OWORD *)(a1 + 3256) = *((_OWORD *)v140 + 5);
      *(_OWORD *)(a1 + 3272) = v33;
      *(_OWORD *)(a1 + 3224) = v35;
      *(_OWORD *)(a1 + 3240) = v34;
      long long v36 = *((_OWORD *)v18 + 10);
      long long v38 = *((_OWORD *)v18 + 7);
      long long v37 = *((_OWORD *)v18 + 8);
      *(_OWORD *)(a1 + 3320) = *((_OWORD *)v18 + 9);
      *(_OWORD *)(a1 + 3336) = v36;
      *(_OWORD *)(a1 + 3288) = v38;
      *(_OWORD *)(a1 + 3304) = v37;
      long long v39 = *((_OWORD *)v18 + 14);
      long long v41 = *((_OWORD *)v18 + 11);
      long long v40 = *((_OWORD *)v18 + 12);
      *(_OWORD *)(a1 + 3384) = *((_OWORD *)v18 + 13);
      *(_OWORD *)(a1 + 3400) = v39;
      *(_OWORD *)(a1 + 3352) = v41;
      *(_OWORD *)(a1 + 3368) = v40;
      long long v43 = *((_OWORD *)v18 + 16);
      long long v42 = *((_OWORD *)v18 + 17);
      long long v44 = *((_OWORD *)v18 + 15);
      *(void *)(a1 + 3464) = v18[36];
      *(_OWORD *)(a1 + 3432) = v43;
      *(_OWORD *)(a1 + 3448) = v42;
      *(_OWORD *)(a1 + 3416) = v44;
      if ((void *)(a1 + 3224) == v32) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    if (*((unsigned char *)v124 + 24))
    {
      uint64_t v54 = (uint64_t)(v140 + 6);
      *((_DWORD *)v140 + 85) = 2 * *(unsigned __int8 *)(a1 + 2291);
      sub_10182AA6C(a1, v54);
      sub_10182AC90(a1, *((unsigned __int8 *)v132 + 24), (uint64_t)(v140 + 6));
      uint64_t v55 = v140;
      double v56 = sub_10016C458();
      double v57 = *(double *)(a1 + 2624);
      if (v57 <= 0.0 || (double v58 = v56 - v57, v58 < 0.0) || v58 > 0.5) {
        *((_DWORD *)v55 + 47) = 0;
      }
      long long v52 = v140;
      if (v140 + 6 != (uint64_t *)(a1 + 2320))
      {
        long long v59 = v140 + 37;
        *((_DWORD *)v140 + 82) = *(_DWORD *)(a1 + 2600);
        sub_10084EEAC(v59, *(uint64_t **)(a1 + 2584), 0);
        long long v52 = v140;
      }
      goto LABEL_65;
    }
  }
LABEL_66:
  _Block_object_dispose(&v71, 8);
  if (v97)
  {
    long long v98 = v97;
    operator delete(v97);
  }
  if (v93)
  {
    int v94 = v93;
    operator delete(v93);
  }
  if (v89)
  {
    long long v90 = v89;
    operator delete(v89);
  }
  if (v83)
  {
    uint64_t v84 = v83;
    operator delete(v83);
  }
  if (SHIBYTE(v80) < 0) {
    operator delete(v78);
  }
  _Block_object_dispose(&v123, 8);
  _Block_object_dispose(&v127, 8);
  _Block_object_dispose(&v131, 8);
  _Block_object_dispose(&v135, 8);
  _Block_object_dispose(&v139, 8);
  return sub_10071874C((uint64_t)&v163[8]);
}

void sub_101827170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  sub_1017BFE20(v51 + 48);
  _Block_object_dispose(&STACK[0x5C0], 8);
  _Block_object_dispose(&STACK[0x5E0], 8);
  _Block_object_dispose(&STACK[0x600], 8);
  _Block_object_dispose(&STACK[0x620], 8);
  _Block_object_dispose(&STACK[0x640], 8);
  sub_10071874C((uint64_t)&STACK[0x768]);
  _Unwind_Resume(a1);
}

__n128 sub_101827260(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  long long v12 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  long long v13 = *(_OWORD *)(a2 + 240);
  long long v14 = *(_OWORD *)(a2 + 256);
  long long v15 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 272) = v15;
  *(_OWORD *)(a1 + 240) = v13;
  sub_1000E2908(a1 + 296, (uint64_t *)(a2 + 296));
  __n128 result = *(__n128 *)(a2 + 336);
  *(__n128 *)(a1 + 336) = result;
  return result;
}

uint64_t sub_1018272E0(uint64_t a1)
{
  return sub_10071874C(a1 + 296);
}

void *sub_1018272E8(uint64_t a1, uint64_t a2)
{
  return sub_1018272F0(*(void *)(a1 + 32), a2);
}

void *sub_1018272F0(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::referenceCounter", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleReferenceCounter(const pds::tlv::referenceCounter &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)long long buf = (sub_1000D3E50() * 1000.0);
  v7[0] = off_102342BC0;
  v7[1] = a2;
  _DWORD v7[2] = buf;
  v7[3] = v7;
  sub_1018D6764(a1 + 1704, (uint64_t)v7);
  return sub_1017C825C(v7);
}

void sub_1018274DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1018274FC(uint64_t a1, char **a2)
{
  sub_1016FC410(__p, *a2, a2[1], a2[1] - *a2);
  sub_100D1EC5C((unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10182754C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10182756C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(char **)(a2 + 8);
  uint64_t v2 = a2 + 8;
  char v3 = v4;
  if (*(char *)(v2 + 23) < 0)
  {
    unint64_t v5 = *(void *)(v2 + 8);
  }
  else
  {
    char v3 = (char *)v2;
    unint64_t v5 = *(unsigned __int8 *)(v2 + 23);
  }
  sub_1016FC410(__p, v3, &v3[v5], v5);
  sub_100D1EC5C((unsigned __int8 *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1018275D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018275F0(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_101827604(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[8];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  sub_101827684(v4, (int *)a2, *(void *)(a1[5] + 8) + 48, (unsigned char *)(*(void *)(a1[6] + 8) + 24));
  sub_101825674(v4, (unint64_t *)(*(void *)(a1[5] + 8) + 48));
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = *(unsigned char *)(a2 + 104);
}

void sub_101827684(uint64_t a1, int *a2, uint64_t a3, unsigned char *a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  long long v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)((char *)a2 + 15);
    uint64_t v10 = *a2;
    uint64_t v11 = *(void *)((char *)a2 + 27);
    uint64_t v12 = *(void *)((char *)a2 + 35);
    double v13 = *(float *)((char *)a2 + 43);
    double v14 = *(float *)((char *)a2 + 63);
    double v15 = *(float *)((char *)a2 + 67);
    double v16 = *(float *)((char *)a2 + 71);
    double v17 = *(float *)((char *)a2 + 51);
    double v18 = *(float *)((char *)a2 + 83);
    int v19 = *((unsigned __int8 *)a2 + 91);
    int v20 = *((unsigned __int8 *)a2 + 104);
    *(_DWORD *)long long buf = 68292099;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    uint64_t v49 = v9;
    __int16 v50 = 2049;
    uint64_t v51 = v10;
    __int16 v52 = 2049;
    uint64_t v53 = v11;
    __int16 v54 = 2049;
    uint64_t v55 = v12;
    __int16 v56 = 2049;
    double v57 = v13;
    __int16 v58 = 2049;
    double v59 = v14;
    __int16 v60 = 2049;
    double v61 = v15;
    __int16 v62 = 2049;
    double v63 = v16;
    __int16 v64 = 2049;
    double v65 = v17;
    __int16 v66 = 2049;
    double v67 = v18;
    __int16 v68 = 1025;
    int v69 = v19;
    __int16 v70 = 1025;
    int v71 = v20;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PositionDataEvent\", \"utc\":%{private}lld, \"valid\":%{private}ld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"horAcc\":\"%{private}f\", \"uncMaj\":\"%{private}f\", \"uncMinor\":\"%{private}f\", \"horzSpeed\":\"%{private}f\", \"horzSpeedUnc\":\"%{private}f\", \"horzConf\":%{private}d, \"fixMode\":%{private}d}", buf, 0x82u);
  }
  sub_10016BC44((uint64_t)&v42);
  *(void *)(a3 + 8) = v43;
  uint64_t v21 = sub_1004BA69C();
  *(_DWORD *)(a3 + 40) = v21;
  if ((~*a2 & 0x4F8FF) == 0)
  {
    int v22 = *((unsigned __int8 *)a2 + 14);
    if (v21 != v22 && *(unsigned int *)((char *)a2 + 23) <= 0xF9)
    {
      *(_DWORD *)(a3 + 40) = v22;
      sub_10181FF94(v21, (uint64_t)a2);
    }
  }
  double v23 = -(kCFAbsoluteTimeIntervalSince1970 - (double)*(unint64_t *)((char *)a2 + 15) * 0.001);
  *(double *)(a3 + 16) = v23;
  *(int8x16_t *)(a3 + 24) = vextq_s8(v42, v42, 8uLL);
  *(float *)(a3 + 44) = (float)*(unsigned int *)((char *)a2 + 23);
  uint64_t v41 = 0;
  sub_1004BD8CC((int *)&v41 + 1, &v41, v23);
  LODWORD(v24) = v41;
  *(void *)a3 = (unint64_t)((double)v24 * 1000000.0
                                   + (double)(604800 * HIDWORD(v41)) * 1000000000.0);
  *(unsigned char *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  long long v25 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    double v26 = *(double *)(a3 + 8) - *(double *)(a3 + 16);
    *(_DWORD *)long long buf = 134349056;
    *(double *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#ec,pedApparentCfTimeErr,%{public}.4f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v34 = *(double *)(a3 + 8) - *(double *)(a3 + 16);
    int v44 = 134349056;
    *(double *)uint64_t v45 = v34;
    long long v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleParsedPositionData(const pds::tlv::parsedPositionData &, GNSS::PerEpochData &, uint8_t &)", "%s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  if ((*(unsigned char *)a2 & 0x30) != 0 && !sub_1000EF668(*(double *)((char *)a2 + 27), *(double *)((char *)a2 + 35)))
  {
    *(unsigned char *)(a3 + 48) = 1;
    *(_OWORD *)(a3 + 56) = *(_OWORD *)((char *)a2 + 27);
    *(double *)(a3 + 72) = *(float *)((char *)a2 + 43);
  }
  int v27 = *a2;
  if ((*a2 & 0x40) != 0)
  {
    double v28 = *(float *)((char *)a2 + 43);
    *(double *)(a3 + 72) = v28;
    if ((v27 & 0x80) != 0) {
      *(double *)(a3 + 80) = v28 - *(float *)((char *)a2 + 47);
    }
  }
  if ((v27 & 0x800) != 0)
  {
    *(double *)(a3 + 96) = *(float *)((char *)a2 + 63);
    if ((v27 & 0x1000) == 0)
    {
LABEL_22:
      if ((v27 & 0x2000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_46;
    }
  }
  else if ((v27 & 0x1000) == 0)
  {
    goto LABEL_22;
  }
  *(double *)(a3 + 112) = *(float *)((char *)a2 + 67);
  if ((v27 & 0x2000) == 0)
  {
LABEL_23:
    if ((v27 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_47;
  }
LABEL_46:
  *(double *)(a3 + 120) = *(float *)((char *)a2 + 71);
  if ((v27 & 0x4000) == 0)
  {
LABEL_24:
    if ((v27 & 0x8000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_48;
  }
LABEL_47:
  *(double *)(a3 + 128) = *(float *)((char *)a2 + 75);
  if ((v27 & 0x8000) == 0)
  {
LABEL_25:
    if ((v27 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_49;
  }
LABEL_48:
  *(double *)(a3 + 104) = *(float *)((char *)a2 + 79);
  if ((v27 & 0x100) == 0)
  {
LABEL_26:
    if ((v27 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_49:
  *(unsigned char *)(a3 + 144) = 1;
  *(double *)(a3 + 152) = *(float *)((char *)a2 + 51);
  *(double *)(a3 + 160) = *(float *)((char *)a2 + 83);
  if ((v27 & 0x400) != 0)
  {
LABEL_27:
    *(unsigned char *)(a3 + 168) = 1;
    *(double *)(a3 + 176) = *(float *)((char *)a2 + 59);
  }
LABEL_28:
  *a4 = 0;
  if ((*((unsigned char *)a2 + 2) & 4) != 0) {
    *a4 = *((unsigned char *)a2 + 91);
  }
  if (*(unsigned char *)(a3 + 48)
    && (sub_1000FEF64() || sub_1000FEED0() && *(unsigned char *)(a1 + 1290))
    && *(double *)(a3 + 112) <= *(float *)(a1 + 1292)
    && *(unsigned char *)(a1 + 1696)
    && !*(unsigned char *)(a1 + 1684))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v29 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *(unsigned __int8 *)(a3 + 48);
      int v31 = *(unsigned __int8 *)(a1 + 1290);
      int v32 = *(unsigned __int8 *)(a1 + 1696);
      *(_DWORD *)long long buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&uint8_t buf[16] = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#timingadvance,GNSS is active,query timing advance,isGnssValid,%{public}d,isTimingAdvanceEnabled,%{public}d,isDeviceInRRCState,%{public}d ", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v36 = *(unsigned __int8 *)(a3 + 48);
      int v37 = *(unsigned __int8 *)(a1 + 1290);
      int v38 = *(unsigned __int8 *)(a1 + 1696);
      int v44 = 67240704;
      *(_DWORD *)uint64_t v45 = v36;
      *(_WORD *)&v45[4] = 1026;
      *(_DWORD *)&unsigned char v45[6] = v37;
      __int16 v46 = 1026;
      int v47 = v38;
      long long v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleParsedPositionData(const pds::tlv::parsedPositionData &, GNSS::PerEpochData &, uint8_t &)", "%s\n", v39);
      if (v39 != buf) {
        free(v39);
      }
    }
    [*(id *)(a1 + 1688) setNextFireDelay:*(float *)(a1 + 1296)];
    int v33 = *(_DWORD *)(a1 + 1680);
    memset(v40, 0, sizeof(v40));
    sub_1000F71D8(v40, *(void *)(a1 + 4104), *(void *)(a1 + 4112), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a1 + 4112) - *(void *)(a1 + 4104)) >> 3));
    sub_1019D4850(v33, v40, a1 + 1704, *(void *)(a1 + 1672));
    *(void *)long long buf = v40;
    sub_1000FA7C8((void ***)buf);
    *(unsigned char *)(a1 + 1684) = 1;
  }
}

void sub_101827DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1000FA7C8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101827DE8(uint64_t a1, unsigned __int16 *a2)
{
  return sub_101827DF0(*(unsigned int **)(a1 + 32), a2);
}

uint64_t sub_101827DF0(unsigned int *a1, unsigned __int16 *a2)
{
  a1[536] = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v4 = a1[536];
    v6[0] = 68289539;
    v6[1] = 0;
    __int16 v7 = 2082;
    long long v8 = "";
    __int16 v9 = 2081;
    uint64_t v10 = "handleExternalXtraDataBaseRequest";
    __int16 v11 = 1026;
    unsigned int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ee,bbRequest\", \"request\":%{private, location:escape_only}s, \"maxSize\":%{public}d}", (uint8_t *)v6, 0x22u);
  }
  sub_101813B28((uint64_t)a1);
  sub_101816574((uint64_t)a1, a1[536]);
  (*(void (**)(unsigned int *))(*(void *)a1 + 192))(a1);
  return (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 208))(a1);
}

void sub_101827F60(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    float v4 = *(float *)a2;
    *(_DWORD *)long long buf = 67109120;
    float v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "satelliteInfo,validMask,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleSatelliteInfo(const pds::tlv::satelliteInfo &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  unint64_t v5 = (float *)*((void *)a2 + 1);
  for (uint64_t i = (int *)*((void *)a2 + 2); v5 != (float *)i; v5 += 5)
  {
    if (*(_DWORD *)v5)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        float v8 = *v5;
        int v9 = *((unsigned __int8 *)v5 + 4);
        int v10 = *((unsigned __int8 *)v5 + 5);
        int v11 = *((unsigned __int8 *)v5 + 6);
        int v12 = *((unsigned __int8 *)v5 + 7);
        int v13 = *((unsigned __int8 *)v5 + 8);
        int v14 = *((unsigned __int8 *)v5 + 9);
        int v15 = (int)v5[3];
        int v16 = *((unsigned __int16 *)v5 + 8);
        int v17 = *((unsigned __int16 *)v5 + 9);
        *(_DWORD *)long long buf = 67111424;
        float v21 = v8;
        __int16 v22 = 1024;
        int v23 = v9;
        __int16 v24 = 1024;
        int v25 = v10;
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 1024;
        int v29 = v12;
        __int16 v30 = 1024;
        int v31 = v13;
        __int16 v32 = 1024;
        int v33 = v14;
        __int16 v34 = 1024;
        int v35 = v15;
        __int16 v36 = 1024;
        int v37 = v16;
        __int16 v38 = 1024;
        int v39 = v17;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "valid,%d,system,%d,prn,%d,health,%d,processingStatus,%d,ephemerisAvailable,%d,almanacAvailable,%d,elevation,%d,azimuth,%d,cno,%d", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        double v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleSatelliteInfo(const pds::tlv::satelliteInfo &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
  }
}

void sub_101828380()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Recvd pds::tlv::umtsCpNetworkPrompt", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleUmtsCpNetworkPrompt(const pds::tlv::umtsCpNetworkPrompt &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101828508(uint64_t a1, char *a2)
{
}

void sub_101828510(uint64_t a1, char *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  float v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Recvd pds::tlv::commEvent", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleCommEvent(const pds::tlv::commEvent &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_10196903C(*(void *)(a1 + 2232), a2);
}

void sub_1018286B4(uint64_t a1, int *a2)
{
}

void sub_1018286C4(uint64_t a1, int *a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 136) = *a2 & 0x101 | (*a2 >> 1) & 2 | (*a2 >> 3) & 4 | (*a2 >> 2) & 0x10 | (*a2 >> 4) & 8 | (32 * ((*a2 >> 4) & 1)) & 0xFFFFFFBF | (((*a2 >> 3) & 1) << 6) | (*a2 << 6) & 0x80;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  float v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)long long buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::positionSource,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePositionSource(const pds::tlv::positionSource &, GNSS::PerEpochData &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1018288CC(uint64_t a1, unsigned char *a2)
{
}

void sub_1018288E0(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  long long v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::positionReliability", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePositionReliability(const pds::tlv::positionReliability &, GNSS::PerEpochData &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(double *)(a1 + 2624) = sub_10016C458();
  *(_DWORD *)(a3 + 140) = 0;
  if ((*a2 - 1) <= 3u) {
    *(_DWORD *)(a3 + 140) = dword_101E3A360[(char)(*a2 - 1)];
  }
}

void sub_101828AB8(uint64_t a1, uint64_t a2)
{
}

void sub_101828AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10016BC44((uint64_t)&v17);
  int v5 = *(unsigned __int16 *)(a2 + 8);
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  *(void *)a3 = (unint64_t)((double)v6 * 1000000.0 + (double)(604800 * v5) * 1000000000.0);
  *(void *)(a3 + 8) = v18;
  *(double *)(a3 + 16) = sub_1004BDA9C(v5, v6);
  *(int8x16_t *)(a3 + 24) = vextq_s8(v17, v17, 8uLL);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  __int16 v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(char *)(a2 + 1);
    double v9 = *(float *)(a2 + 4);
    int v10 = *(unsigned __int16 *)(a2 + 8);
    int v11 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)long long buf = 67109888;
    int v28 = v8;
    __int16 v29 = 2048;
    double v30 = v9;
    __int16 v31 = 1024;
    int v32 = v10;
    __int16 v33 = 1024;
    int v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::timeSource,source,%d,unc,%.2f,week,%d,tow,%d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v12 = *(char *)(a2 + 1);
    double v13 = *(float *)(a2 + 4);
    int v14 = *(unsigned __int16 *)(a2 + 8);
    int v15 = *(_DWORD *)(a2 + 12);
    int v19 = 67109888;
    int v20 = v12;
    __int16 v21 = 2048;
    double v22 = v13;
    __int16 v23 = 1024;
    int v24 = v14;
    __int16 v25 = 1024;
    int v26 = v15;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleTimeSource(const pds::tlv::timeSource &, GNSS::PerEpochData &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
}

void sub_101828D38(uint64_t a1, float *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*a2 <= 0.0) {
    *(unsigned char *)(v2 + 216) = 0;
  }
  else {
    *(double *)(v2 + 232) = sub_1004BABF8(*a2);
  }
}

void sub_101828D80(uint64_t a1, char **a2)
{
  sub_1016FC410(__p, *a2, a2[1], a2[1] - *a2);
  sub_100D1EC5C((unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_101828DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101828DEC(uint64_t a1, unsigned int *a2)
{
  return sub_101828DF4(*(unsigned int **)(a1 + 32), a2);
}

uint64_t sub_101828DF4(unsigned int *a1, unsigned int *a2)
{
  a1[536] = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v4 = a1[536];
    v6[0] = 68289539;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2081;
    int v10 = "handleExtendedExternalXtraDataBaseRequest";
    __int16 v11 = 1026;
    unsigned int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ee,bbRequest\", \"request\":%{private, location:escape_only}s, \"maxSize\":%{public}d}", (uint8_t *)v6, 0x22u);
  }
  sub_101813B28((uint64_t)a1);
  sub_101816574((uint64_t)a1, a1[536]);
  (*(void (**)(unsigned int *))(*(void *)a1 + 192))(a1);
  return (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 208))(a1);
}

void sub_101828F64(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recvd tlv::resetState,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleResetState(const pds::tlv::resetState &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10182911C(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recvd tlv::sessionEndReason,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleSessionEndReason(const pds::tlv::sessionEndReason &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1018292D4(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  char v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *a2;
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recvd tlv::CdmaCpNiFailureReason,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleCdmaCpNiFailureReason(const pds::tlv::CdmaCpNiFailureReason &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_101829488(uint64_t a1, int *a2)
{
}

void sub_101829490(uint64_t a1, int *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1019BCAD4(*a2, __p);
    int v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@EmergencyGps Emergency Event ,EmergencyEvent,%{public}s", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233FB88);
    }
    sub_1019BCAD4(*a2, buf);
    if (v11 >= 0) {
      int v8 = buf;
    }
    else {
      int v8 = *(unsigned char **)buf;
    }
    int v12 = 136446210;
    double v13 = v8;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    if (v11 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handleEmergencyEvent(const pds::tlv::emergencyEvent &)", "%s\n", v9);
    if (v9 != (char *)__p) {
      free(v9);
    }
  }
  if (sub_10073CBFC() && *(unsigned char *)(a1 + 2016) && (*a2 == 7 || !*a2)) {
    sub_10182B924(a1);
  }
  sub_101969E30(*(void *)(a1 + 2232), *a2);
  if (!sub_1000FFBA8())
  {
    uint64_t v6 = 0;
    goto LABEL_19;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 3552);
  if (v6 <= 1)
  {
LABEL_19:
    int v7 = (uint64_t *)sub_101813194(a1 + 2248, v6);
    sub_101937904(*v7, *a2);
  }
  if (*a2 == 9) {
    *(_DWORD *)(a1 + 3552) = 255;
  }
}

void sub_101829728(uint64_t a1, uint64_t *a2)
{
}

__n128 sub_101829730(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  long long v2 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v2;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  int v3 = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v3;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v4 = *(_OWORD *)(a2 + 120);
  long long v5 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 120) = v4;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 160) = 0;
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 192) = 0;
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  __n128 result = *(__n128 *)(a2 + 256);
  *(__n128 *)(a1 + 256) = result;
  return result;
}

void sub_101829824(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 200) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(void *)(a1 + 168) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v6 = *(void **)(a1 + 56);
    operator delete(v6);
  }
}

void sub_1018298AC(uint64_t a1, _DWORD *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 49) = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 80) = *a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  int v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 80);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,SuplInitSource\", \"suplinitsource\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_1018299C0(uint64_t a1, _DWORD *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 50) = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 84) = *a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  int v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 84);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplTriggerType\", \"supltriggertype\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_101829AD4(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = 1;
  std::string::operator=((std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 56), a2);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  int v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v5 = (void *)(v4 + 56);
    if (*(char *)(v4 + 79) < 0) {
      long long v5 = (void *)*v5;
    }
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 2082;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplEmergencyNotification\", \"suplemergencynotification\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
}

uint64_t sub_101829BF0(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 256) = *a2;
  return result;
}

uint64_t sub_101829C04(uint64_t result, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 261) = 1;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 264) = *a2;
  return result;
}

uint64_t sub_101829C28(int a1)
{
  if (a1 == 1) {
    unsigned __int8 v1 = 1;
  }
  else {
    unsigned __int8 v1 = -1;
  }
  if (!a1) {
    return 0;
  }
  return v1;
}

void sub_101829C40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  uint64_t v104 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 51) = 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 88) = *(_DWORD *)a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 92) = *(unsigned char *)(a2 + 4);
  do
  {
    long long v5 = *(void **)(*(void *)(v3 + 32) + 8);
    uint64_t v6 = *(void *)(a2 + 8) >> (8 * v4);
    __int16 v8 = (unsigned char *)v5[13];
    unint64_t v7 = v5[14];
    if ((unint64_t)v8 >= v7)
    {
      unint64_t v10 = v5[12];
      char v11 = &v8[-v10];
      uint64_t v12 = (uint64_t)&v8[-v10 + 1];
      if (v12 < 0) {
LABEL_117:
      }
        sub_1001D7FD4();
      unint64_t v13 = v7 - v10;
      if (2 * v13 > v12) {
        uint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        char v15 = (char *)operator new(v14);
      }
      else {
        char v15 = 0;
      }
      int v16 = &v11[(void)v15];
      v11[(void)v15] = v6;
      uint64_t v9 = (uint64_t)&v11[(void)v15 + 1];
      if (v8 != (unsigned char *)v10)
      {
        int8x16_t v17 = &v8[~v10];
        do
        {
          char v18 = *--v8;
          (v17--)[(void)v15] = v18;
        }
        while (v8 != (unsigned char *)v10);
        __int16 v8 = (unsigned char *)v5[12];
        int v16 = v15;
      }
      v5[12] = v16;
      v5[13] = v9;
      v5[14] = &v15[v14];
      uint64_t v3 = a1;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *__int16 v8 = v6;
      uint64_t v9 = (uint64_t)(v8 + 1);
    }
    v5[13] = v9;
    ++v4;
  }
  while (v4 != 8);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 120) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 124) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 128) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 132) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 136) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 140) = *(_OWORD *)(a2 + 36);
  if (*(char *)(a2 + 79) >= 0) {
    size_t v19 = *(unsigned __int8 *)(a2 + 79);
  }
  else {
    size_t v19 = *(void *)(a2 + 64);
  }
  sub_10008AB10((unint64_t *)(*(void *)(*(void *)(v3 + 32) + 8) + 160), v19);
  BOOL v20 = *(char *)(a2 + 79) < 0;
  uint64_t v21 = *(unsigned __int8 *)(a2 + 79);
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a2 + 64);
  }
  if (v21)
  {
    unint64_t v22 = 0;
    do
    {
      __int16 v23 = *(void **)(*(void *)(v3 + 32) + 8);
      if (v20) {
        uint64_t v24 = *(void *)(a2 + 56);
      }
      else {
        uint64_t v24 = a2 + 56;
      }
      char v25 = *(unsigned char *)(v24 + v22);
      int v27 = (unsigned char *)v23[21];
      unint64_t v26 = v23[22];
      if ((unint64_t)v27 >= v26)
      {
        unint64_t v29 = v23[20];
        double v30 = &v27[-v29];
        uint64_t v31 = (uint64_t)&v27[-v29 + 1];
        if (v31 < 0) {
          goto LABEL_117;
        }
        unint64_t v32 = v26 - v29;
        if (2 * v32 > v31) {
          uint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v33 = v31;
        }
        if (v33) {
          int v34 = (char *)operator new(v33);
        }
        else {
          int v34 = 0;
        }
        int v35 = &v30[(void)v34];
        __int16 v36 = &v30[(void)v34];
        *__int16 v36 = v25;
        int v28 = v36 + 1;
        if (v27 != (unsigned char *)v29)
        {
          int v37 = &v27[~v29];
          do
          {
            char v38 = *--v27;
            (v37--)[(void)v34] = v38;
          }
          while (v27 != (unsigned char *)v29);
          int v27 = (unsigned char *)v23[20];
          int v35 = v34;
        }
        v23[20] = v35;
        v23[21] = v28;
        v23[22] = &v34[v33];
        uint64_t v3 = a1;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *int v27 = v25;
        int v28 = v27 + 1;
      }
      v23[21] = v28;
      ++v22;
      BOOL v20 = *(char *)(a2 + 79) < 0;
      unint64_t v39 = *(unsigned __int8 *)(a2 + 79);
      if ((v39 & 0x80u) != 0) {
        unint64_t v39 = *(void *)(a2 + 64);
      }
    }
    while (v39 > v22);
  }
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 184) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 185) = *(unsigned char *)(a2 + 81);
  if (*(char *)(a2 + 111) >= 0) {
    size_t v40 = *(unsigned __int8 *)(a2 + 111);
  }
  else {
    size_t v40 = *(void *)(a2 + 96);
  }
  sub_10008AB10((unint64_t *)(*(void *)(*(void *)(v3 + 32) + 8) + 192), v40);
  BOOL v41 = *(char *)(a2 + 111) < 0;
  uint64_t v42 = *(unsigned __int8 *)(a2 + 111);
  if ((v42 & 0x80u) != 0) {
    uint64_t v42 = *(void *)(a2 + 96);
  }
  if (v42)
  {
    unint64_t v43 = 0;
    do
    {
      int v44 = *(void **)(*(void *)(v3 + 32) + 8);
      if (v41) {
        uint64_t v45 = *(void *)(a2 + 88);
      }
      else {
        uint64_t v45 = a2 + 88;
      }
      char v46 = *(unsigned char *)(v45 + v43);
      __int16 v48 = (unsigned char *)v44[25];
      unint64_t v47 = v44[26];
      if ((unint64_t)v48 >= v47)
      {
        unint64_t v50 = v44[24];
        uint64_t v51 = &v48[-v50];
        uint64_t v52 = (uint64_t)&v48[-v50 + 1];
        if (v52 < 0) {
          goto LABEL_117;
        }
        unint64_t v53 = v47 - v50;
        if (2 * v53 > v52) {
          uint64_t v52 = 2 * v53;
        }
        if (v53 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v54 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v54 = v52;
        }
        if (v54) {
          uint64_t v55 = (char *)operator new(v54);
        }
        else {
          uint64_t v55 = 0;
        }
        __int16 v56 = &v51[(void)v55];
        double v57 = &v51[(void)v55];
        *double v57 = v46;
        uint64_t v49 = v57 + 1;
        if (v48 != (unsigned char *)v50)
        {
          __int16 v58 = &v48[~v50];
          do
          {
            char v59 = *--v48;
            (v58--)[(void)v55] = v59;
          }
          while (v48 != (unsigned char *)v50);
          __int16 v48 = (unsigned char *)v44[24];
          __int16 v56 = v55;
        }
        v44[24] = v56;
        v44[25] = v49;
        v44[26] = &v55[v54];
        uint64_t v3 = a1;
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        unsigned char *v48 = v46;
        uint64_t v49 = v48 + 1;
      }
      v44[25] = v49;
      ++v43;
      BOOL v41 = *(char *)(a2 + 111) < 0;
      unint64_t v60 = *(unsigned __int8 *)(a2 + 111);
      if ((v60 & 0x80u) != 0) {
        unint64_t v60 = *(void *)(a2 + 96);
      }
    }
    while (v60 > v43);
  }
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 216) = *(unsigned char *)(a2 + 112);
  if (*(char *)(a2 + 143) >= 0) {
    size_t v61 = *(unsigned __int8 *)(a2 + 143);
  }
  else {
    size_t v61 = *(void *)(a2 + 128);
  }
  sub_10008AB10((unint64_t *)(*(void *)(*(void *)(v3 + 32) + 8) + 224), v61);
  BOOL v62 = *(char *)(a2 + 143) < 0;
  uint64_t v63 = *(unsigned __int8 *)(a2 + 143);
  if ((v63 & 0x80u) != 0) {
    uint64_t v63 = *(void *)(a2 + 128);
  }
  if (v63)
  {
    unint64_t v64 = 0;
    do
    {
      double v65 = *(void **)(*(void *)(v3 + 32) + 8);
      if (v62) {
        uint64_t v66 = *(void *)(a2 + 120);
      }
      else {
        uint64_t v66 = a2 + 120;
      }
      char v67 = *(unsigned char *)(v66 + v64);
      int v69 = (unsigned char *)v65[29];
      unint64_t v68 = v65[30];
      if ((unint64_t)v69 >= v68)
      {
        unint64_t v71 = v65[28];
        long long v72 = &v69[-v71];
        uint64_t v73 = (uint64_t)&v69[-v71 + 1];
        if (v73 < 0) {
          goto LABEL_117;
        }
        unint64_t v74 = v68 - v71;
        if (2 * v74 > v73) {
          uint64_t v73 = 2 * v74;
        }
        if (v74 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v75 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v75 = v73;
        }
        if (v75) {
          long long v76 = (char *)operator new(v75);
        }
        else {
          long long v76 = 0;
        }
        int v77 = &v72[(void)v76];
        long long v78 = &v72[(void)v76];
        unsigned char *v78 = v67;
        __int16 v70 = v78 + 1;
        if (v69 != (unsigned char *)v71)
        {
          uint64_t v79 = &v69[~v71];
          do
          {
            char v80 = *--v69;
            (v79--)[(void)v76] = v80;
          }
          while (v69 != (unsigned char *)v71);
          int v69 = (unsigned char *)v65[28];
          int v77 = v76;
        }
        v65[28] = v77;
        v65[29] = v70;
        v65[30] = &v76[v75];
        uint64_t v3 = a1;
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        unsigned char *v69 = v67;
        __int16 v70 = v69 + 1;
      }
      v65[29] = v70;
      ++v64;
      BOOL v62 = *(char *)(a2 + 143) < 0;
      unint64_t v81 = *(unsigned __int8 *)(a2 + 143);
      if ((v81 & 0x80u) != 0) {
        unint64_t v81 = *(void *)(a2 + 128);
      }
    }
    while (v81 > v64);
  }
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 248) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 249) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 250) = *(unsigned char *)(a2 + 146);
  *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 251) = *(unsigned char *)(a2 + 147);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  char v82 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v83 = *(void *)(*(void *)(v3 + 32) + 8);
    int v84 = *(_DWORD *)(v83 + 88);
    int v85 = *(unsigned __int8 *)(v83 + 92);
    int v86 = *(unsigned __int8 *)(v83 + 120);
    int v87 = *(_DWORD *)(v83 + 124);
    int v88 = *(_DWORD *)(v83 + 128);
    int v89 = *(_DWORD *)(v83 + 132);
    int v90 = *(_DWORD *)(v83 + 136);
    int v91 = *(unsigned __int8 *)(v83 + 184);
    int v92 = *(unsigned __int8 *)(v83 + 185);
    int v93 = *(unsigned __int8 *)(v83 + 216);
    int v94 = *(unsigned __int8 *)(v83 + 248);
    int v95 = *(unsigned __int8 *)(v83 + 249);
    int v96 = *(unsigned __int8 *)(v83 + 250);
    int v97 = *(unsigned __int8 *)(v83 + 251);
    int v98 = *(_DWORD *)(v83 + 256);
    int v99 = *(unsigned __int8 *)(v83 + 260);
    int v100 = *(unsigned __int8 *)(v83 + 261);
    uint64_t v101 = *(void *)(v83 + 264);
    *(_DWORD *)long long buf = 68293634;
    int v107 = 0;
    __int16 v108 = 2082;
    long long v109 = "";
    __int16 v110 = 1026;
    int v111 = v84;
    __int16 v112 = 1026;
    int v113 = v85;
    __int16 v114 = 1026;
    int v115 = v86;
    __int16 v116 = 1026;
    int v117 = v87;
    __int16 v118 = 1026;
    int v119 = v88;
    __int16 v120 = 1026;
    int v121 = v89;
    __int16 v122 = 1026;
    int v123 = v90;
    __int16 v124 = 1026;
    int v125 = v91;
    __int16 v126 = 1026;
    int v127 = v92;
    __int16 v128 = 1026;
    int v129 = v93;
    __int16 v130 = 1026;
    int v131 = v94;
    __int16 v132 = 1026;
    int v133 = v95;
    __int16 v134 = 1026;
    int v135 = v96;
    __int16 v136 = 1026;
    int v137 = v97;
    __int16 v138 = 1026;
    int v139 = v98;
    __int16 v140 = 1026;
    int v141 = v99;
    __int16 v142 = 1026;
    int v143 = v100;
    __int16 v144 = 2050;
    uint64_t v145 = v101;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,SuplInit\", \"validmask\":%{public}d, \"privacy\":%{public}d, \"mode\":%{public}d, \"sessionid\":%{public}d, \"slpserveripv4port\":%{public}d, \"slpserveripv4addr\":%{public}d, \"slpserveripv6port\":%{public}d, \"dcs\":%{public}d, \"requestoriddcs\":%{public}d, \"clientnamedcs\":%{public}d, \"qophorizacc\":%{public}d, \"qopvertzacc\":%{public}d, \"qopmaxlocage\":%{public}d, \"qopdelay\":%{public}d, \"instance\":%{public}d, \"certIndex\":%{public}d, \"isMaskPresent\":%{public}hhd, \"mask\":%{public}llu}", buf, 0x82u);
  }
  uint64_t v102 = *(unsigned int *)(v3 + 48);
  if (v102 != 255)
  {
    uint64_t v103 = (uint64_t *)sub_101813194(v104 + 2248, v102);
    sub_101936620(*v103, *(void *)(*(void *)(v3 + 32) + 8) + 48);
  }
}

void sub_10182A3F0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(v3 + 3552);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  long long v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = *a2;
    *(_DWORD *)long long buf = 68289538;
    int v12 = 0;
    __int16 v13 = 2082;
    size_t v14 = "";
    __int16 v15 = 1026;
    unsigned int v16 = v6;
    __int16 v17 = 1026;
    int v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplEndReason\", \"suplendreason\":%{public}d, \"instance\":%{public}d}", buf, 0x1Eu);
  }
  if (v4 > 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "NonMatchingSuplEnd", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaController::handlePdsEventReport(const pds::eventReportInd::Indication &)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t *)sub_101813194(v3 + 2248, v4);
    sub_10193672C(*v7, a2);
    __int16 v8 = (uint64_t *)sub_101813194(v3 + 2248, v4);
    sub_101936EE0(*v8, v3 + 3224);
  }
}

void sub_10182A684(uint64_t a1, char *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int8 *)(a1 + 2016);
    int v6 = *(unsigned __int8 *)(a1 + 2264);
    int v7 = *(_DWORD *)(a1 + 2260);
    int v8 = *(_DWORD *)(a1 + 2256);
    int v14 = 68290306;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2082;
    size_t v19 = a2;
    __int16 v20 = 1026;
    int v21 = v5;
    __int16 v22 = 1026;
    int v23 = v6;
    __int16 v24 = 1026;
    int v25 = v7;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
  }
  uint64_t v9 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    int v10 = *(unsigned __int8 *)(a1 + 2016);
    int v11 = *(unsigned __int8 *)(a1 + 2264);
    int v12 = *(_DWORD *)(a1 + 2260);
    int v13 = *(_DWORD *)(a1 + 2256);
    int v14 = 68290306;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2082;
    size_t v19 = a2;
    __int16 v20 = 1026;
    int v21 = v10;
    __int16 v22 = 1026;
    int v23 = v11;
    __int16 v24 = 1026;
    int v25 = v12;
    __int16 v26 = 1026;
    int v27 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,#trkstate,error", "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
  }
  sub_10182E158(a1, a2, 1);
}

void sub_10182A888(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  int v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *a3;
    uint64_t v10 = *(void *)(a2 + 56);
    uint64_t v11 = *(void *)(a2 + 64);
    uint64_t v13 = *(void *)(a2 + 96);
    uint64_t v12 = *(void *)(a2 + 104);
    int v17 = *(_DWORD *)(a2 + 136);
    sub_1019BCEC8(*a3, __p);
    int v14 = __p;
    if (v19 < 0) {
      int v14 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 68291075;
    int v21 = 0;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 1026;
    int v25 = v9;
    __int16 v26 = 2049;
    uint64_t v27 = v10;
    __int16 v28 = 2049;
    uint64_t v29 = v11;
    __int16 v30 = 2049;
    uint64_t v31 = v13;
    __int16 v32 = 2049;
    uint64_t v33 = v12;
    __int16 v34 = 1025;
    int v35 = v17;
    __int16 v36 = 2082;
    int v37 = v14;
    __int16 v38 = 1026;
    int v39 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#NILR Session Status\", \"session status\":%{public}d, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"hunc\":\"%{private}f\", \"vunc\":\"%{private}f\", \"position_source\":%{private}d, \"sessionFixStatus\":%{public, location:escape_only}s, \"mode\":%{public}d}", buf, 0x56u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10196A2A8(*(void *)(a1 + 2232), a2, (unsigned int *)a3, a4);
  if (!sub_1000FFBA8())
  {
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  uint64_t v15 = *(unsigned int *)(a1 + 3552);
  if (v15 <= 1)
  {
LABEL_12:
    __int16 v16 = (uint64_t *)sub_101813194(a1 + 2248, v15);
    sub_101937778(*v16, a4);
  }
}

void sub_10182AA6C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 144))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "InvalidSpeed";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reject Speed/Course\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
    }
    goto LABEL_15;
  }
  double v3 = *(double *)(a2 + 160);
  if (v3 < 0.0 || v3 > 12.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a2 + 152);
      uint64_t v7 = *(void *)(a2 + 160);
      uint64_t v8 = *(void *)(a2 + 176);
      uint64_t v9 = *(void *)(a2 + 184);
      int v12 = 68290306;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "OutOfRangeSpeedUnc";
      __int16 v18 = 2050;
      uint64_t v19 = v6;
      __int16 v20 = 2050;
      uint64_t v21 = v7;
      __int16 v22 = 2050;
      uint64_t v23 = v8;
      __int16 v24 = 2050;
      uint64_t v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reject Speed/Course\", \"reason\":%{public, location:escape_only}s, \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\", \"course\":\"%{public}f\", \"courseUnc\":\"%{public}f\"}", (uint8_t *)&v12, 0x44u);
    }
    *(unsigned char *)(a2 + 144) = 0;
LABEL_15:
    *(unsigned char *)(a2 + 168) = 0;
    return;
  }
  if (*(double *)(a2 + 152) < 0.1)
  {
    if (*(unsigned char *)(a1 + 2368))
    {
      if (*(unsigned char *)(a1 + 2464))
      {
        double v11 = *(double *)(a1 + 2480);
        if (v11 > 0.0 && v3 < v11 && *(double *)(a1 + 2472) > 0.1) {
          *(double *)(a2 + 160) = v11;
        }
      }
    }
  }
}

BOOL sub_10182AC90(BOOL result, int a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 48))
  {
    double v4 = *(double *)(a3 + 112);
    if (v4 > 0.0)
    {
      double v5 = *(double *)(a3 + 120);
      if (v5 > 0.0)
      {
        if (a2 == 95)
        {
          double v6 = sqrt(v5 * v5 + v4 * v4) * 0.408163265;
          *(double *)(a3 + 96) = v6;
        }
        else
        {
          double v6 = *(double *)(a3 + 96);
        }
        double v7 = *(double *)(a3 + 104);
        if (v7 > 1200.0) {
          double v7 = 1200.0;
        }
        *(double *)(a3 + 104) = v7;
        if (v6 > 400.0)
        {
          __n128 result = sub_100D33A44(result + 2268);
          if (!result) {
            *(unsigned char *)(a3 + 48) = 0;
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_10182AD34(__n128 *a1, int a2, uint64_t a3, int a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1019BCEC8(a2, __p);
    uint64_t v9 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v45 = 1024;
    LODWORD(v46) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "handlePositionData,sessionFixStatus,%s,mode,%d", buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    sub_1019BCEC8(a2, buf);
    if (v47 >= 0) {
      int v37 = buf;
    }
    else {
      int v37 = *(unsigned char **)buf;
    }
    int v49 = 136315394;
    unint64_t v50 = v37;
    __int16 v51 = 1024;
    int v52 = a4;
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    if (v47 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v38);
    if (v38 != __p) {
      free(v38);
    }
  }
  if (a2 || !*(unsigned char *)(a3 + 48))
  {
    unint64_t v24 = a1[85].n128_u64[1];
    if (v24)
    {
      __p[0] = 0;
      char v69 = 0;
      (*(void (**)(unint64_t, unsigned char *))(*(void *)v24 + 48))(v24, __p);
      if (v69) {
        sub_10071874C((uint64_t)v68);
      }
    }
  }
  else
  {
    uint64_t v11 = a1[166].n128_i64[1];
    if (v11) {
      sub_1018B2CF4(v11);
    }
    if (a1[85].n128_u64[1])
    {
      if (sub_1000EF668(*(double *)(a3 + 56), *(double *)(a3 + 64)))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10233FB68);
        }
        int v12 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string __p = 136380931;
          *(void *)&__p[4] = "gps, null";
          *(_WORD *)&unsigned char __p[12] = 2081;
          *(void *)&__p[14] = "eureka";
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __p, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10233FB68);
          }
          *(_DWORD *)long long buf = 136380931;
          *(void *)&uint8_t buf[4] = "gps, null";
          __int16 v45 = 2081;
          char v46 = "eureka";
          int v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v39);
          if (v39 != __p) {
            free(v39);
          }
        }
        AnalyticsSendEventLazy();
      }
      if (*(double *)(a3 + 56) == -1.0 && *(double *)(a3 + 64) == -1.0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10233FB68);
        }
        int v13 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string __p = 136380931;
          *(void *)&__p[4] = "gps, sentinel";
          *(_WORD *)&unsigned char __p[12] = 2081;
          *(void *)&__p[14] = "eureka";
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __p, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10233FB68);
          }
          *(_DWORD *)long long buf = 136380931;
          *(void *)&uint8_t buf[4] = "gps, sentinel";
          __int16 v45 = 2081;
          char v46 = "eureka";
          size_t v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v40);
          if (v40 != __p) {
            free(v40);
          }
        }
        AnalyticsSendEventLazy();
      }
      if (a1[85].n128_u64[1])
      {
        long long v14 = *(_OWORD *)(a3 + 208);
        long long v64 = *(_OWORD *)(a3 + 192);
        long long v65 = v14;
        long long v66 = *(_OWORD *)(a3 + 224);
        uint64_t v67 = *(void *)(a3 + 240);
        long long v15 = *(_OWORD *)(a3 + 144);
        long long v60 = *(_OWORD *)(a3 + 128);
        long long v61 = v15;
        long long v16 = *(_OWORD *)(a3 + 176);
        long long v62 = *(_OWORD *)(a3 + 160);
        long long v63 = v16;
        long long v17 = *(_OWORD *)(a3 + 80);
        long long v56 = *(_OWORD *)(a3 + 64);
        long long v57 = v17;
        long long v18 = *(_OWORD *)(a3 + 112);
        long long v58 = *(_OWORD *)(a3 + 96);
        long long v59 = v18;
        long long v19 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)std::string __p = *(_OWORD *)a3;
        *(_OWORD *)&__p[16] = v19;
        long long v20 = *(_OWORD *)(a3 + 48);
        long long v54 = *(_OWORD *)(a3 + 32);
        long long v55 = v20;
        sub_100A326C4((uint64_t)v68, a3 + 248);
        *(_OWORD *)&v68[40] = *(_OWORD *)(a3 + 288);
        char v69 = 1;
        unint64_t v21 = a1[85].n128_u64[1];
        if (!v21) {
          sub_10015E48C();
        }
        (*(void (**)(unint64_t, unsigned char *))(*(void *)v21 + 48))(v21, __p);
        if (v69) {
          sub_10071874C((uint64_t)v68);
        }
      }
      uint64_t v22 = a1[199].n128_i64[1];
      if (v22) {
        sub_1018C11E0(v22);
      }
      if (a1[136].n128_u8[9] && a1[199].n128_u64[1])
      {
        if (a1[143].n128_u8[9])
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          uint64_t v23 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string __p = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#tt,simulator mode pulse,sending", __p, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10233FB48);
            }
            *(_WORD *)long long buf = 0;
            BOOL v41 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v41);
            if (v41 != __p) {
              free(v41);
            }
          }
          (*(void (**)(__n128 *, void))(a1->n128_u64[0] + 240))(a1, 0);
        }
        else if (!a1[143].n128_u8[10])
        {
          *(void *)std::string __p = off_102342AC0;
          *(void *)&__p[24] = __p;
          *(void *)long long buf = off_102342B40;
          __int16 v48 = buf;
          sub_10065AB34((uint64_t)v43, (uint64_t)__p);
          sub_10183C268((uint64_t)v42, (uint64_t)buf);
          (*(void (**)(__n128 *, void *, void *))(a1->n128_u64[0] + 224))(a1, v43, v42);
          sub_10183C300(v42);
          sub_10065ABCC(v43);
          a1[143].n128_u8[10] = 1;
          sub_10183C300(buf);
          sub_10065ABCC(__p);
        }
      }
    }
    __n128 v25 = *(__n128 *)a3;
    __n128 v26 = *(__n128 *)(a3 + 16);
    __n128 v27 = *(__n128 *)(a3 + 32);
    a1[148] = *(__n128 *)(a3 + 48);
    a1[147] = v27;
    a1[146] = v26;
    a1[145] = v25;
    __n128 v28 = *(__n128 *)(a3 + 64);
    __n128 v29 = *(__n128 *)(a3 + 80);
    __n128 v30 = *(__n128 *)(a3 + 96);
    a1[152] = *(__n128 *)(a3 + 112);
    a1[151] = v30;
    a1[150] = v29;
    a1[149] = v28;
    __n128 v31 = *(__n128 *)(a3 + 128);
    __n128 v32 = *(__n128 *)(a3 + 144);
    __n128 v33 = *(__n128 *)(a3 + 160);
    a1[156] = *(__n128 *)(a3 + 176);
    a1[155] = v33;
    a1[154] = v32;
    a1[153] = v31;
    __n128 v34 = *(__n128 *)(a3 + 192);
    __n128 v35 = *(__n128 *)(a3 + 208);
    __n128 v36 = *(__n128 *)(a3 + 224);
    a1[160].n128_u64[0] = *(void *)(a3 + 240);
    a1[159] = v36;
    a1[158] = v35;
    a1[157] = v34;
    if (&a1[145] != (__n128 *)a3)
    {
      a1[162].n128_u32[2] = *(_DWORD *)(a3 + 280);
      sub_10084EEAC(&a1[160].n128_u64[1], *(uint64_t **)(a3 + 264), 0);
    }
    __n128 result = *(__n128 *)(a3 + 288);
    a1[163] = result;
  }
  return result;
}

void sub_10182B6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void sub_10182B740(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (!a2 && *(unsigned char *)(a3 + 48) && !*(unsigned char *)(a1 + 2185) && a4 != 2 && !*(unsigned char *)(a1 + 2184))
  {
    BOOL v21 = 0;
    sub_1000C7F88(v17);
    char v6 = sub_1000D2988(*(uint64_t *)&v17[0], "GpsForceMSBFixAsGnss", &v21);
    if (v21) {
      char v7 = v6;
    }
    else {
      char v7 = 0;
    }
    if (*((void *)&v17[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v17[0] + 1));
    }
    if (*(_DWORD *)(a3 + 136) & 0x101 | (*(_DWORD *)(a3 + 136) >> 1) & 2 | (*(_DWORD *)(a3 + 136) >> 3) & 4 | (*(_DWORD *)(a3 + 136) >> 2) & 0x10 | (*(_DWORD *)(a3 + 136) >> 4) & 8) {
      char v8 = 1;
    }
    else {
      char v8 = v7;
    }
    if ((v8 & 1) != 0 && *(void *)(a1 + 1368))
    {
      long long v9 = *(_OWORD *)(a3 + 208);
      v17[12] = *(_OWORD *)(a3 + 192);
      v17[13] = v9;
      v17[14] = *(_OWORD *)(a3 + 224);
      uint64_t v18 = *(void *)(a3 + 240);
      long long v10 = *(_OWORD *)(a3 + 144);
      v17[8] = *(_OWORD *)(a3 + 128);
      v17[9] = v10;
      long long v11 = *(_OWORD *)(a3 + 176);
      v17[10] = *(_OWORD *)(a3 + 160);
      v17[11] = v11;
      long long v12 = *(_OWORD *)(a3 + 80);
      void v17[4] = *(_OWORD *)(a3 + 64);
      v17[5] = v12;
      long long v13 = *(_OWORD *)(a3 + 112);
      v17[6] = *(_OWORD *)(a3 + 96);
      v17[7] = v13;
      long long v14 = *(_OWORD *)(a3 + 16);
      v17[0] = *(_OWORD *)a3;
      v17[1] = v14;
      long long v15 = *(_OWORD *)(a3 + 48);
      v17[2] = *(_OWORD *)(a3 + 32);
      v17[3] = v15;
      sub_100A326C4((uint64_t)v19, a3 + 248);
      *(_OWORD *)&v19[40] = *(_OWORD *)(a3 + 288);
      char v20 = 1;
      uint64_t v16 = *(void *)(a1 + 1368);
      if (!v16) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, _OWORD *))(*(void *)v16 + 48))(v16, v17);
      if (v20) {
        sub_10071874C((uint64_t)v19);
      }
    }
  }
}

void sub_10182B8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a47) {
    sub_10071874C(v47);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_10182B90C(id a1)
{
  return (NSDictionary *)&off_102397838;
}

NSDictionary *__cdecl sub_10182B918(id a1)
{
  return (NSDictionary *)&off_102397860;
}

void *sub_10182B924(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#bb.e,#trkstate,checkConcurrency", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::checkConcurrency()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  v5[0] = off_102342D00;
  v5[1] = a1;
  v5[3] = v5;
  sub_1018D6764(a1 + 1704, (uint64_t)v5);
  return sub_1017C825C(v5);
}

void sub_10182BAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_10182BB0C(uint64_t a1)
{
  return sub_10189BC90(*(void *)(a1 + 2648), 1);
}

uint64_t sub_10182BB18(uint64_t a1)
{
  v3[0] = off_102342C60;
  v3[3] = v3;
  sub_1018D6764(a1 + 1704, (uint64_t)v3);
  sub_1017C825C(v3);
  return sub_10189BC90(*(void *)(a1 + 2648), 0);
}

void sub_10182BBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_10182BBCC(uint64_t a1, int *a2, void **a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  char v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v7 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v7, (uint64_t)v48);
    char v8 = (SBYTE7(v49) & 0x80u) == 0 ? v48 : *(uint8_t **)v48;
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v40 = 2082;
    BOOL v41 = "";
    __int16 v42 = 2082;
    *(void *)unint64_t v43 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onTelephonyNotification\", \"ontelephonynotification\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SBYTE7(v49) < 0) {
      operator delete(*(void **)v48);
    }
  }
  if (sub_1000FEF64() || (uint64_t result = sub_1000FEED0(), result))
  {
    long long v10 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(v10, @"kCellInfoNotification"))
    {
      *(_OWORD *)__int16 v48 = 0u;
      long long v49 = 0u;
      int v50 = 1065353216;
      if (sub_1000FF5A4(*a3, (uint64_t)v48))
      {
        sub_10182C650(a1, 0, (uint64_t)v48);
        if (sub_1000FFBA8()) {
          sub_10182C650(a1, 1, (uint64_t)v48);
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        long long v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#timingadvance,kCellInfoNotification,error fetching cell info", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          LOWORD(v35[0]) = 0;
          __n128 v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v33);
          if (v33 != (char *)buf) {
            free(v33);
          }
        }
      }
      return sub_1000FF568((uint64_t)v48);
    }
    long long v11 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(v11, @"kSubscriptionChangeNotification"))
    {
      uint64_t result = (uint64_t)*a3;
      if (*a3)
      {
        *(_OWORD *)__int16 v48 = 0u;
        long long v49 = 0u;
        int v50 = 1065353216;
        if (sub_101332B64((void *)result, (uint64_t)v48))
        {
          int v37 = 0;
          *(void *)long long buf = &v37;
          int v12 = *((unsigned __int8 *)sub_100980B28((uint64_t)v48, &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
          *(void *)long long buf = &v37;
          int v13 = *((unsigned __int8 *)sub_100980B28((uint64_t)v48, &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 22);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          long long v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            int v15 = v37;
            v35[0] = &v37;
            int v16 = *((unsigned __int8 *)sub_100980B28((uint64_t)v48, &v37, (uint64_t)&unk_101D0B290, v35) + 21);
            *(_DWORD *)long long buf = 68290050;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v40 = 2082;
            BOOL v41 = "";
            __int16 v42 = 1026;
            *(_DWORD *)unint64_t v43 = v15;
            *(_WORD *)&void v43[4] = 1026;
            *(_DWORD *)&_DWORD v43[6] = v12;
            __int16 v44 = 1026;
            int v45 = v16;
            __int16 v46 = 1026;
            int v47 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#timingadvance,kSubscriptionChangeNotification for sim1\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", buf, 0x2Au);
          }
          if (v12 && v13)
          {
            *(_DWORD *)(a1 + 1680) = 0;
          }
          else if (sub_1000FFBA8())
          {
            int v36 = 1;
            *(void *)long long buf = &v36;
            int v26 = *((unsigned __int8 *)sub_100980B28((uint64_t)v48, &v36, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
            *(void *)long long buf = &v36;
            int v27 = *((unsigned __int8 *)sub_100980B28((uint64_t)v48, &v36, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 22);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10233FB48);
            }
            __n128 v28 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v29 = v36;
              v35[0] = &v36;
              int v30 = *((unsigned __int8 *)sub_100980B28((uint64_t)v48, &v36, (uint64_t)&unk_101D0B290, v35) + 21);
              *(_DWORD *)long long buf = 68290050;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v40 = 2082;
              BOOL v41 = "";
              __int16 v42 = 1026;
              *(_DWORD *)unint64_t v43 = v29;
              *(_WORD *)&void v43[4] = 1026;
              *(_DWORD *)&_DWORD v43[6] = v26;
              __int16 v44 = 1026;
              int v45 = v30;
              __int16 v46 = 1026;
              int v47 = v27;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ta,kSubscriptionChangeNotification for sim2\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", buf, 0x2Au);
            }
            if (v26 && v27) {
              *(_DWORD *)(a1 + 1680) = 1;
            }
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          unint64_t v24 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#timingadvance,kSubscriptionChangeNotification,error fetching context", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10233FB48);
            }
            LOWORD(v35[0]) = 0;
            __n128 v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
        }
        return sub_1000D7D80((uint64_t)v48);
      }
      return result;
    }
    uint64_t v18 = (const void *)sub_1000FA17C(a2);
    uint64_t result = CFEqual(v18, @"kCLCellularTransmitStateNotification");
    if (!result || !*a3) {
      return result;
    }
    sub_10013FA80((int)v35, (CFDictionaryRef)*a3);
    long long v19 = (BOOL *)(a1 + 1696);
    if (sub_1000D29FC((uint64_t)v35, @"kCLCellularTransmitStateNotification", v19))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      char v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        BOOL v21 = *v19;
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#timingadvance,kTransmitStateNotification, %d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return sub_10013F3C4(v35);
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      BOOL v22 = *v19;
      *(_DWORD *)__int16 v48 = 67109120;
      *(_DWORD *)&v48[4] = v22;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v23);
      if (v23 == (char *)buf) {
        return sub_10013F3C4(v35);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __n128 v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000FECE0(@"kCLCellularTransmitStateNotification", (uint64_t)buf);
        __n128 v32 = v43[3] >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)__int16 v48 = 136446210;
        *(void *)&v48[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning,#timingadvance,key,%{public}s,notExist", v48, 0xCu);
        if ((v43[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return sub_10013F3C4(v35);
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      sub_1000FECE0(@"kCLCellularTransmitStateNotification", (uint64_t)v48);
      if ((SBYTE7(v49) & 0x80u) == 0) {
        __n128 v34 = v48;
      }
      else {
        __n128 v34 = *(uint8_t **)v48;
      }
      int v37 = 136446210;
      __int16 v38 = v34;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE7(v49) < 0) {
        operator delete(*(void **)v48);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v23);
      if (v23 == (char *)buf) {
        return sub_10013F3C4(v35);
      }
    }
    free(v23);
    return sub_10013F3C4(v35);
  }
  return result;
}

void sub_10182C5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10182C650(uint64_t a1, int a2, uint64_t a3)
{
  int v10 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v12 = &v10;
  if (*((void *)sub_10010D968(a3, &v10, (uint64_t)&unk_101D0B290, &v12) + 3))
  {
    sub_10010D904(v10, a3, &v7);
    if ((uint64_t *)(a1 + 4104) != &v7) {
      sub_1000FAFC4(a1 + 4104, v7, v8, 0x66FD0EB66FD0EB67 * ((v8 - v7) >> 3));
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#timingadvance,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      LODWORD(v12) = 67109120;
      HIDWORD(v12) = v10;
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  *(void *)long long buf = &v7;
  sub_1000FA7C8((void ***)buf);
}

void sub_10182C894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_1000FA7C8(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10182C8B4(uint64_t a1, _DWORD *a2)
{
  double v4 = (_OWORD *)(a1 + 2268);
  BOOL v5 = sub_100D33A54(a1 + 2268);
  int v6 = a2[4];
  _OWORD *v4 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 2284) = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100D335B8(a2, __p);
    uint64_t v8 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "EMERGENCY: state,%s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    sub_100D335B8(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v26 = 136315138;
    int v27 = p_buf;
    int v16 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v16);
    if (v16 != __p) {
      free(v16);
    }
  }
  BOOL v9 = sub_100D33A54((uint64_t)a2);
  uint64_t v10 = *(void *)(a1 + 2232);
  long long v23 = *(_OWORD *)a2;
  int v24 = a2[4];
  sub_1019680FC(v10, (unsigned int *)&v23);
  if (!v5 || v9)
  {
    if (!v5 && v9) {
      sub_10182CF64(a1);
    }
  }
  else
  {
    sub_10182CBC0((unsigned char *)a1);
  }
  uint64_t v11 = *(void *)(a1 + 2232);
  long long v21 = *(_OWORD *)a2;
  int v22 = a2[4];
  sub_10196812C(v11, (uint64_t)&v21);
  uint64_t v12 = **(void **)(a1 + 2248);
  long long v19 = *(_OWORD *)a2;
  int v20 = a2[4];
  sub_1019363A8(v12, &v19);
  uint64_t result = sub_1000FFBA8();
  if (result)
  {
    uint64_t v14 = *(void *)sub_101813194(a1 + 2248, 1);
    long long v17 = *(_OWORD *)a2;
    int v18 = a2[4];
    return sub_1019363A8(v14, &v17);
  }
  return result;
}

void sub_10182CBC0(unsigned char *a1)
{
  *((void *)a1 + 511) = 0xBFF0000000000000;
  if (a1[2289])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Restart GPS at end of emergency mode\"}", buf, 0x12u);
    }
    sub_10181360C((uint64_t)a1);
    if (a1[2016])
    {
      (*(void (**)(unsigned char *))(*(void *)a1 + 24))(a1);
      (*(void (**)(unsigned char *, unsigned char *))(*(void *)a1 + 16))(a1, a1 + 3556);
    }
  }
  else if (a1[2288])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Restart QMI connection to enable reinitialization\"}", buf, 0x12u);
    }
    sub_10181360C((uint64_t)a1);
    sub_1018D63C0((uint64_t)(a1 + 1704));
  }
  else
  {
    sub_101813B28((uint64_t)a1);
  }
  if (a1[2296])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = a1[2295];
      BOOL v6 = sub_100D33A44((uint64_t)(a1 + 2268));
      *(_DWORD *)std::string buf = 67109376;
      int v9 = v5;
      __int16 v10 = 1024;
      LODWORD(v11) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EarlyReturnConfig,fIsEarlyReturnEnabled,%d,inEmergency,%d,config@exitEmergency", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      sub_100D33A44((uint64_t)(a1 + 2268));
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::onEmergencyExit()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_101817614((uint64_t)a1, 1);
    a1[2296] = 0;
  }
  if (!a1[2292]) {
    sub_101819590((uint64_t)a1);
  }
}

void sub_10182CF64(uint64_t a1)
{
  *(_OWORD *)(a1 + 3728) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 3744) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 3760) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 3772) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 3664) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 3680) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 3696) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 3712) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 3632) = xmmword_101D82EB8;
  *(void *)(a1 + 4088) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3648) = xmmword_101D82EC8;
  if (!*(unsigned char *)(a1 + 2292)) {
    sub_1018193E8(a1);
  }
  sub_101813B28(a1);

  sub_101819C54(a1);
}

void sub_10182D004(uint64_t a1, uint64_t *a2, int a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  BOOL v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10101AE9C(a3, v24);
    uint64_t v7 = v25 >= 0 ? v24 : (void **)v24[0];
    int v8 = *(_DWORD *)a2;
    *(_DWORD *)std::string buf = 68289538;
    int v17 = 0;
    __int16 v18 = 2082;
    long long v19 = "";
    __int16 v20 = 2082;
    long long v21 = v7;
    __int16 v22 = 1026;
    int v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"emergency settings changed\", \"reason\":%{public, location:escape_only}s, \"instance\":%{public}d}", buf, 0x22u);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  int v9 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2) {
    goto LABEL_13;
  }
  if (v9 == 1 && sub_1000FFBA8())
  {
    int v9 = *(_DWORD *)a2;
LABEL_13:
    uint64_t v10 = sub_1017BE0C0((void *)(a1 + 3528), v9);
    sub_10083C6B4(v10, a2);
    sub_10196B000(*(void *)(a1 + 2232), a2);
    uint64_t v11 = (uint64_t *)sub_101813194(a1 + 2248, *(unsigned int *)a2);
    sub_101935FAC(*v11, a2, a3);
    sub_101817614(a1, 0);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v13 = *(_DWORD *)a2;
    *(_DWORD *)std::string buf = 67109120;
    int v17 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "InvalidArgs for handleEmergencySettingsChange,instance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v14 = *(_DWORD *)a2;
    LODWORD(v24[0]) = 67109120;
    HIDWORD(v24[0]) = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEurekaController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

uint64_t sub_10182D2F8(uint64_t a1, int a2)
{
  uint64_t result = sub_10073CBFC();
  if ((result & 1) == 0)
  {
    *(unsigned char *)(a1 + 2292) = a2;
    if (a2)
    {
      if (*(unsigned char *)(a1 + 2293)) {
        sub_101819590(a1);
      }
    }
    else if (!*(unsigned char *)(a1 + 2293) && sub_100D33A54(a1 + 2268))
    {
      sub_1018193E8(a1);
    }
    return sub_101817B2C(a1);
  }
  return result;
}

double sub_10182D378(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Resetting control plane status", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEurekaController::resetControlPlaneStatus()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 3568) = _Q0;
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3600) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3608) = 0xBFF0000000000000;
  double result = NAN;
  *(void *)(a1 + 3616) = -1;
  *(_DWORD *)(a1 + 3624) = 0;
  return result;
}

uint64_t sub_10182D534(uint64_t a1, _OWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 3568);
    uint64_t v6 = *(void *)(a1 + 3576);
    uint64_t v7 = *(void *)(a1 + 3584);
    uint64_t v8 = *(void *)(a1 + 3592);
    uint64_t v9 = *(void *)(a1 + 3600);
    uint64_t v10 = *(void *)(a1 + 3608);
    int v11 = *(_DWORD *)(a1 + 3624);
    *(_DWORD *)std::string buf = 134350593;
    uint64_t v18 = v5;
    __int16 v19 = 2050;
    uint64_t v20 = v6;
    __int16 v21 = 2049;
    uint64_t v22 = v7;
    __int16 v23 = 2049;
    uint64_t v24 = v8;
    __int16 v25 = 2050;
    uint64_t v26 = v9;
    __int16 v27 = 2050;
    uint64_t v28 = v10;
    __int16 v29 = 1026;
    int v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getControlPlaneStatusReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLEurekaController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 3568);
  long long v13 = *(_OWORD *)(a1 + 3584);
  long long v14 = *(_OWORD *)(a1 + 3600);
  *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)(a1 + 3612);
  a2[1] = v13;
  a2[2] = v14;
  *a2 = v12;
  return 1;
}

__n128 sub_10182D7B8(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    uint64_t v8 = *(void *)(a1 + 3592);
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    int v11 = *((_DWORD *)a2 + 14);
    *(_DWORD *)std::string buf = 134350593;
    uint64_t v17 = v5;
    __int16 v18 = 2050;
    uint64_t v19 = v6;
    __int16 v20 = 2049;
    uint64_t v21 = v7;
    __int16 v22 = 2049;
    uint64_t v23 = v8;
    __int16 v24 = 2050;
    uint64_t v25 = v9;
    __int16 v26 = 2050;
    uint64_t v27 = v10;
    __int16 v28 = 1026;
    int v29 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processCplaneReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::processCplaneReport(const CLGnssControlPlaneStatusReport &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  __n128 result = *(__n128 *)a2;
  long long v13 = *((_OWORD *)a2 + 1);
  long long v14 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 3612) = *(_OWORD *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 3600) = v14;
  *(_OWORD *)(a1 + 3584) = v13;
  *(__n128 *)(a1 + 3568) = result;
  return result;
}

__n128 sub_10182DA28(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    int v11 = *((_DWORD *)a2 + 14);
    *(_DWORD *)std::string buf = 134350593;
    uint64_t v17 = v5;
    __int16 v18 = 2050;
    uint64_t v19 = v6;
    __int16 v20 = 2049;
    uint64_t v21 = v7;
    __int16 v22 = 2049;
    uint64_t v23 = v8;
    __int16 v24 = 2050;
    uint64_t v25 = v9;
    __int16 v26 = 2050;
    uint64_t v27 = v10;
    __int16 v28 = 1026;
    int v29 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processSuplReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::processSuplReport(const CLGnssControlPlaneStatusReport &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  __n128 result = *(__n128 *)a2;
  long long v13 = *((_OWORD *)a2 + 1);
  long long v14 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 3612) = *(_OWORD *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 3600) = v14;
  *(_OWORD *)(a1 + 3584) = v13;
  *(__n128 *)(a1 + 3568) = result;
  return result;
}

void sub_10182DC90(uint64_t a1, char *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int8 *)(a1 + 2016);
    int v6 = *(unsigned __int8 *)(a1 + 2264);
    int v7 = *(_DWORD *)(a1 + 2260);
    int v8 = *(_DWORD *)(a1 + 2256);
    int v14 = 68290306;
    int v15 = 0;
    __int16 v16 = 2082;
    uint64_t v17 = "";
    __int16 v18 = 2082;
    uint64_t v19 = a2;
    __int16 v20 = 1026;
    int v21 = v5;
    __int16 v22 = 1026;
    int v23 = v6;
    __int16 v24 = 1026;
    int v25 = v7;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
  }
  uint64_t v9 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    int v10 = *(unsigned __int8 *)(a1 + 2016);
    int v11 = *(unsigned __int8 *)(a1 + 2264);
    int v12 = *(_DWORD *)(a1 + 2260);
    int v13 = *(_DWORD *)(a1 + 2256);
    int v14 = 68290306;
    int v15 = 0;
    __int16 v16 = 2082;
    uint64_t v17 = "";
    __int16 v18 = 2082;
    uint64_t v19 = a2;
    __int16 v20 = 1026;
    int v21 = v10;
    __int16 v22 = 1026;
    int v23 = v11;
    __int16 v24 = 1026;
    int v25 = v12;
    __int16 v26 = 1026;
    int v27 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,#trkstate,error", "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
  }
  sub_10182E158(a1, a2, 2);
}

void sub_10182DE94(uint64_t a1, int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 2016);
    int v8 = *(unsigned __int8 *)(a1 + 2264);
    int v9 = *(_DWORD *)(a1 + 2260);
    int v10 = *(_DWORD *)(a1 + 2256);
    int v17 = 68290562;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 1026;
    int v22 = v7;
    __int16 v23 = 1026;
    int v24 = v8;
    __int16 v25 = 1026;
    int v26 = v9;
    __int16 v27 = 1026;
    int v28 = v10;
    __int16 v29 = 1026;
    int v30 = a2;
    __int16 v31 = 1026;
    int v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,acceptibility check\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d, \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)&v17, 0x36u);
  }
  if (*(unsigned char *)(a1 + 2016))
  {
    if (a3 == 2 && (a2 & 1) != 0)
    {
      *(_DWORD *)(a1 + 2256) = 0;
    }
    else
    {
      ++*(_DWORD *)(a1 + 2256);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int8 *)(a1 + 2016);
        int v14 = *(unsigned __int8 *)(a1 + 2264);
        int v15 = *(_DWORD *)(a1 + 2260);
        int v16 = *(_DWORD *)(a1 + 2256);
        int v17 = 68290562;
        int v18 = 0;
        __int16 v19 = 2082;
        __int16 v20 = "";
        __int16 v21 = 1026;
        int v22 = v13;
        __int16 v23 = 1026;
        int v24 = v14;
        __int16 v25 = 1026;
        int v26 = v15;
        __int16 v27 = 1026;
        int v28 = v16;
        __int16 v29 = 1026;
        int v30 = a2;
        __int16 v31 = 1026;
        int v32 = a3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,mismatch\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d, \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)&v17, 0x36u);
      }
      if (*(int *)(a1 + 2256) >= 8) {
        sub_10182DC90(a1, "locationd,trackStateMismatch");
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 68289026;
      int v18 = 0;
      __int16 v19 = 2082;
      __int16 v20 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,acceptibility check skipped\"}", (uint8_t *)&v17, 0x12u);
    }
  }
}

void sub_10182E158(uint64_t a1, char *a2, int a3)
{
  if (*(unsigned char *)(a1 + 2290))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)int v11 = 68289026;
      *(_WORD *)&v11[8] = 2082;
      *(void *)&v11[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,ErrorHandlingInProgress\"}", v11, 0x12u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2290) = 1;
    if (sub_100D33A54(a1 + 2268))
    {
      if (a3 == 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)int v11 = 68289026;
          *(_WORD *)&v11[8] = 2082;
          *(void *)&v11[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,InEmergency,restart@OnEmergencyExit\"}", v11, 0x12u);
        }
        *(unsigned char *)(a1 + 2289) = 1;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)int v11 = 68289026;
          *(_WORD *)&v11[8] = 2082;
          *(void *)&v11[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,InEmergency,reinit@OnEmergencyExit\"}", v11, 0x12u);
        }
        *(unsigned char *)(a1 + 2288) = 1;
      }
    }
    else
    {
      sub_100134750(v11, a2);
      int v8 = (void **)(a1 + 2928);
      if (*(char *)(a1 + 2951) < 0) {
        operator delete(*v8);
      }
      *(_OWORD *)int v8 = *(_OWORD *)v11;
      *(void *)(a1 + 2944) = *(void *)&v11[16];
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)int v11 = 68289282;
        *(_WORD *)&v11[8] = 2082;
        *(void *)&v11[10] = "";
        *(_WORD *)&v11[18] = 1026;
        *(_DWORD *)&v11[20] = 18;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,NotInEmergency,deferring Reset\", \"delay\":%{public}d}", v11, 0x18u);
      }
      [*(id *)(a1 + 2920) setNextFireDelay:18.0];
    }
  }
}

void sub_10182E464(uint64_t a1, char *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2082;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,InitError\", \"error\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  sub_10182E158(a1, a2, 0);
}

void sub_10182E564(uint64_t a1, int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  __int16 v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v9 = a2;
    __int16 v10 = 1024;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#supl,setSuplSessionStatus,instance,%d,inSession,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::setSuplSessionStatus(CLTelephonyService_Type::SimInstance, BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a3) {
    *(_DWORD *)(a1 + 3552) = a2;
  }
}

uint64_t sub_10182E740(char a1)
{
  if (a1) {
    unsigned int v1 = 0;
  }
  else {
    unsigned int v1 = 3;
  }
  if (a1 == 1) {
    unsigned int v1 = 2;
  }
  if (a1 == 2) {
    return 1;
  }
  else {
    return v1;
  }
}

std::string *sub_10182E764(std::string *a1, uint64_t a2)
{
  sub_1000FFBA8();
  a1[42].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a2 + 7);
  a1[42].__r_.__value_.__s.__data_[9] = *(unsigned char *)(a2 + 56);
  a1[44].__r_.__value_.__s.__data_[12] = (*(_DWORD *)(a2 + 40) | *(_DWORD *)(a2 + 88)) != 0;
  int v4 = *(_DWORD *)(a2 + 48);
  a1[44].__r_.__value_.__s.__data_[13] = (*(_DWORD *)(a2 + 52) | *(_DWORD *)(a2 + 100)) != 0;
  a1[44].__r_.__value_.__s.__data_[14] = (v4 | *(_DWORD *)(a2 + 96)) != 0;
  std::string::operator=(a1 + 40, (const std::string *)(a2 + 1240));

  return std::string::operator=(a1 + 41, (const std::string *)(a2 + 1264));
}

void sub_10182E804(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "handlePdsSessionStatisticsReport,enter", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    LOWORD(v165) = 0;
    int v107 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v107);
    if (v107 != buf) {
      free(v107);
    }
  }
  *(void *)&long long v165 = 0xBFF0000000000000;
  DWORD2(v165) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  int64x2_t v166 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  long long v167 = _Q1;
  long long v168 = _Q1;
  long long v169 = _Q1;
  LOBYTE(v170) = 0;
  DWORD1(v170) = 0;
  *((void *)&v170 + 1) = 0xBFF0000000000000;
  LOWORD(v171) = 0;
  *((void *)&v171 + 1) = -1;
  __asm { FMOV            V1.4S, #-1.0 }
  long long v172 = (__int128)v166;
  long long v173 = _Q1;
  *(_WORD *)double v174 = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)&v174[24] = _D0;
  LODWORD(v175) = -1082130432;
  WORD2(v175) = 0;
  *((void *)&v175 + 1) = 0xBF80000000000000;
  LOBYTE(v177) = 0;
  DWORD2(v177) = 0;
  *((void *)&v178 + 1) = 0;
  LOBYTE(v179) = 0;
  memset(&v164, 0, sizeof(v164));
  v204[0] = 0;
  sub_101843864(a2, 16, (uint64_t)v204);
  if (v204[0])
  {
    v166.i64[0] = v205;
  }
  else
  {
    sub_100134750(buf, "refLat,");
    if (SBYTE3(v208) >= 0) {
      int v12 = buf;
    }
    else {
      int v12 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v13 = BYTE3(v208);
    }
    else {
      std::string::size_type v13 = *(void *)&buf[8];
    }
    std::string::append(&v164, v12, v13);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v202[0] = 0;
  sub_101843864(a2, 17, (uint64_t)v202);
  if (v202[0])
  {
    v166.i64[1] = v203;
  }
  else
  {
    sub_100134750(buf, "refLong,");
    if (SBYTE3(v208) >= 0) {
      int v14 = buf;
    }
    else {
      int v14 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v15 = BYTE3(v208);
    }
    else {
      std::string::size_type v15 = *(void *)&buf[8];
    }
    std::string::append(&v164, v14, v15);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v162[0] = 0;
  sub_10183D22C(a2, 18, (uint64_t)v162);
  if (v162[0])
  {
    *(double *)&long long v167 = v163;
  }
  else
  {
    sub_100134750(buf, "refAlt,");
    if (SBYTE3(v208) >= 0) {
      int v16 = buf;
    }
    else {
      int v16 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v17 = BYTE3(v208);
    }
    else {
      std::string::size_type v17 = *(void *)&buf[8];
    }
    std::string::append(&v164, v16, v17);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v160[0] = 0;
  sub_10183D22C(a2, 19, (uint64_t)v160);
  if (v160[0])
  {
    *((double *)&v167 + 1) = v161;
  }
  else
  {
    sub_100134750(buf, "refAltUnc,");
    if (SBYTE3(v208) >= 0) {
      int v18 = buf;
    }
    else {
      int v18 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v19 = BYTE3(v208);
    }
    else {
      std::string::size_type v19 = *(void *)&buf[8];
    }
    std::string::append(&v164, v18, v19);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v158[0] = 0;
  sub_10183D22C(a2, 20, (uint64_t)v158);
  if (v158[0])
  {
    *(double *)&long long v168 = v159;
  }
  else
  {
    sub_100134750(buf, "refUncSemiMaj,");
    if (SBYTE3(v208) >= 0) {
      __int16 v20 = buf;
    }
    else {
      __int16 v20 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v21 = BYTE3(v208);
    }
    else {
      std::string::size_type v21 = *(void *)&buf[8];
    }
    std::string::append(&v164, v20, v21);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v156[0] = 0;
  sub_10183D22C(a2, 21, (uint64_t)v156);
  if (v156[0])
  {
    *((double *)&v168 + 1) = v157;
  }
  else
  {
    sub_100134750(buf, "refUncSemMin,");
    if (SBYTE3(v208) >= 0) {
      int v22 = buf;
    }
    else {
      int v22 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v23 = BYTE3(v208);
    }
    else {
      std::string::size_type v23 = *(void *)&buf[8];
    }
    std::string::append(&v164, v22, v23);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v154[0] = 0;
  sub_10183D22C(a2, 22, (uint64_t)v154);
  if (v154[0])
  {
    *((double *)&v169 + 1) = v155;
  }
  else
  {
    sub_100134750(buf, "refUncAngle,");
    if (SBYTE3(v208) >= 0) {
      int v24 = buf;
    }
    else {
      int v24 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v25 = BYTE3(v208);
    }
    else {
      std::string::size_type v25 = *(void *)&buf[8];
    }
    std::string::append(&v164, v24, v25);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v153[0] = 0;
  sub_1017CC7D8(a2, 23, v153);
  if (v153[0])
  {
    LOBYTE(v170) = v153[1];
  }
  else
  {
    sub_100134750(buf, "refConf,");
    if (SBYTE3(v208) >= 0) {
      int v26 = buf;
    }
    else {
      int v26 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v27 = BYTE3(v208);
    }
    else {
      std::string::size_type v27 = *(void *)&buf[8];
    }
    std::string::append(&v164, v26, v27);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v151[0] = 0;
  sub_1017CC710(a2, 24, (uint64_t)v151);
  if (v151[0])
  {
    DWORD1(v170) = v152;
  }
  else
  {
    sub_100134750(buf, "nwTimeOut,");
    if (SBYTE3(v208) >= 0) {
      int v28 = buf;
    }
    else {
      int v28 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v29 = BYTE3(v208);
    }
    else {
      std::string::size_type v29 = *(void *)&buf[8];
    }
    std::string::append(&v164, v28, v29);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v149[0] = 0;
  sub_10183D22C(a2, 25, (uint64_t)v149);
  if (v149[0])
  {
    *((double *)&v170 + 1) = v150;
  }
  else
  {
    sub_100134750(buf, "nwHorzAcc,");
    if (SBYTE3(v208) >= 0) {
      int v30 = buf;
    }
    else {
      int v30 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v31 = BYTE3(v208);
    }
    else {
      std::string::size_type v31 = *(void *)&buf[8];
    }
    std::string::append(&v164, v30, v31);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v148[0] = 0;
  int v32 = sub_1017CC7D8(a2, 26, v148);
  if (v148[0])
  {
    DWORD2(v165) = sub_101830918((uint64_t)v32, v148[1]);
  }
  else
  {
    sub_100134750(buf, "endReason,");
    if (SBYTE3(v208) >= 0) {
      __n128 v33 = buf;
    }
    else {
      __n128 v33 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v34 = BYTE3(v208);
    }
    else {
      std::string::size_type v34 = *(void *)&buf[8];
    }
    std::string::append(&v164, v33, v34);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v147[0] = 0;
  sub_1017CC7D8(a2, 27, v147);
  if (v147[0])
  {
    LOBYTE(v171) = v147[1];
  }
  else
  {
    sub_100134750(buf, "cpiAccepted,");
    if (SBYTE3(v208) >= 0) {
      __n128 v35 = buf;
    }
    else {
      __n128 v35 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v36 = BYTE3(v208);
    }
    else {
      std::string::size_type v36 = *(void *)&buf[8];
    }
    std::string::append(&v164, v35, v36);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v146[0] = 0;
  sub_1017CC7D8(a2, 28, v146);
  if (v146[0])
  {
    BYTE1(v171) = v146[1];
  }
  else
  {
    sub_100134750(buf, "cpiFusedWithGNSS,");
    if (SBYTE3(v208) >= 0) {
      int v37 = buf;
    }
    else {
      int v37 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v38 = BYTE3(v208);
    }
    else {
      std::string::size_type v38 = *(void *)&buf[8];
    }
    std::string::append(&v164, v37, v38);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v200[0] = 0;
  sub_1017CC774(a2, 29, (uint64_t)v200);
  if (v200[0])
  {
    *((void *)&v171 + 1) = v201;
  }
  else
  {
    sub_100134750(buf, "cpiTimestamp,");
    if (SBYTE3(v208) >= 0) {
      int v39 = buf;
    }
    else {
      int v39 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v40 = BYTE3(v208);
    }
    else {
      std::string::size_type v40 = *(void *)&buf[8];
    }
    std::string::append(&v164, v39, v40);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v198[0] = 0;
  sub_101843864(a2, 30, (uint64_t)v198);
  if (v198[0])
  {
    *(void *)&long long v172 = v199;
  }
  else
  {
    sub_100134750(buf, "cpiLatitude,");
    if (SBYTE3(v208) >= 0) {
      BOOL v41 = buf;
    }
    else {
      BOOL v41 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v42 = BYTE3(v208);
    }
    else {
      std::string::size_type v42 = *(void *)&buf[8];
    }
    std::string::append(&v164, v41, v42);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v196[0] = 0;
  sub_101843864(a2, 31, (uint64_t)v196);
  if (v196[0])
  {
    *((void *)&v172 + 1) = v197;
  }
  else
  {
    sub_100134750(buf, "cpiLongitude,");
    if (SBYTE3(v208) >= 0) {
      unint64_t v43 = buf;
    }
    else {
      unint64_t v43 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v44 = BYTE3(v208);
    }
    else {
      std::string::size_type v44 = *(void *)&buf[8];
    }
    std::string::append(&v164, v43, v44);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v144[0] = 0;
  sub_10183D22C(a2, 32, (uint64_t)v144);
  if (v144[0])
  {
    LODWORD(v173) = v145;
  }
  else
  {
    sub_100134750(buf, "cpiEllipsoidAltitude,");
    if (SBYTE3(v208) >= 0) {
      int v45 = buf;
    }
    else {
      int v45 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v46 = BYTE3(v208);
    }
    else {
      std::string::size_type v46 = *(void *)&buf[8];
    }
    std::string::append(&v164, v45, v46);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v142[0] = 0;
  sub_10183D22C(a2, 33, (uint64_t)v142);
  if (v142[0])
  {
    DWORD1(v173) = v143;
  }
  else
  {
    sub_100134750(buf, "cpiMSLAltitude,");
    if (SBYTE3(v208) >= 0) {
      int v47 = buf;
    }
    else {
      int v47 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v48 = BYTE3(v208);
    }
    else {
      std::string::size_type v48 = *(void *)&buf[8];
    }
    std::string::append(&v164, v47, v48);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v140[0] = 0;
  sub_10183D22C(a2, 34, (uint64_t)v140);
  if (v140[0])
  {
    DWORD2(v173) = v141;
  }
  else
  {
    sub_100134750(buf, "cpiHorizontalUncertaintyCircular,");
    if (SBYTE3(v208) >= 0) {
      long long v49 = buf;
    }
    else {
      long long v49 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v50 = BYTE3(v208);
    }
    else {
      std::string::size_type v50 = *(void *)&buf[8];
    }
    std::string::append(&v164, v49, v50);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v138[0] = 0;
  sub_10183D22C(a2, 35, (uint64_t)v138);
  if (v138[0])
  {
    HIDWORD(v173) = v139;
  }
  else
  {
    sub_100134750(buf, "cpiVerticalUncertaintyCircular,");
    if (SBYTE3(v208) >= 0) {
      __int16 v51 = buf;
    }
    else {
      __int16 v51 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v52 = BYTE3(v208);
    }
    else {
      std::string::size_type v52 = *(void *)&buf[8];
    }
    std::string::append(&v164, v51, v52);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v137[0] = 0;
  sub_1017CC7D8(a2, 36, v137);
  if (v137[0])
  {
    v174[0] = v137[1];
  }
  else
  {
    sub_100134750(buf, "cpiHorizontalConfidence,");
    if (SBYTE3(v208) >= 0) {
      unint64_t v53 = buf;
    }
    else {
      unint64_t v53 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v54 = BYTE3(v208);
    }
    else {
      std::string::size_type v54 = *(void *)&buf[8];
    }
    std::string::append(&v164, v53, v54);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v136[0] = 0;
  sub_1017CC7D8(a2, 37, v136);
  if (v136[0])
  {
    v174[1] = v136[1];
  }
  else
  {
    sub_100134750(buf, "cpiVerticalConfidence,");
    if (SBYTE3(v208) >= 0) {
      long long v55 = buf;
    }
    else {
      long long v55 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v56 = BYTE3(v208);
    }
    else {
      std::string::size_type v56 = *(void *)&buf[8];
    }
    std::string::append(&v164, v55, v56);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v134[0] = 0;
  sub_1018438C0(a2, 38, (uint64_t)v134);
  if (v134[0])
  {
    *(_DWORD *)&v174[4] = v135;
  }
  else
  {
    sub_100134750(buf, "cpiPosSource,");
    if (SBYTE3(v208) >= 0) {
      long long v57 = buf;
    }
    else {
      long long v57 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v58 = BYTE3(v208);
    }
    else {
      std::string::size_type v58 = *(void *)&buf[8];
    }
    std::string::append(&v164, v57, v58);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v133[0] = 0;
  sub_1017CC7D8(a2, 39, v133);
  if (v133[0])
  {
    v174[8] = v133[1];
  }
  else
  {
    sub_100134750(buf, "cpiTimeType,");
    if (SBYTE3(v208) >= 0) {
      long long v59 = buf;
    }
    else {
      long long v59 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v60 = BYTE3(v208);
    }
    else {
      std::string::size_type v60 = *(void *)&buf[8];
    }
    std::string::append(&v164, v59, v60);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  char v131 = 0;
  sub_101842FDC(a2, 40, (uint64_t)&v131);
  if (v131)
  {
    *(_WORD *)&v174[9] = v132;
  }
  else
  {
    sub_100134750(buf, "cpiReliability,");
    if (SBYTE3(v208) >= 0) {
      long long v61 = buf;
    }
    else {
      long long v61 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v62 = BYTE3(v208);
    }
    else {
      std::string::size_type v62 = *(void *)&buf[8];
    }
    std::string::append(&v164, v61, v62);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v193[0] = 0;
  sub_101843924(a2, 41, v193);
  if (v193[0])
  {
    *(void *)&v174[12] = v194;
    *(_DWORD *)&v174[20] = v195;
  }
  else
  {
    sub_100134750(buf, "cpiAltitudeInfo,");
    if (SBYTE3(v208) >= 0) {
      long long v63 = buf;
    }
    else {
      long long v63 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v64 = BYTE3(v208);
    }
    else {
      std::string::size_type v64 = *(void *)&buf[8];
    }
    std::string::append(&v164, v63, v64);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v190[0] = 0;
  sub_1018439C0(a2, 42, v190);
  if (v190[0])
  {
    *(void *)&v174[24] = v191;
    LODWORD(v175) = v192;
  }
  else
  {
    sub_100134750(buf, "cpiHorizontalUncEllipsoid,");
    if (SBYTE3(v208) >= 0) {
      long long v65 = buf;
    }
    else {
      long long v65 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v66 = BYTE3(v208);
    }
    else {
      std::string::size_type v66 = *(void *)&buf[8];
    }
    std::string::append(&v164, v65, v66);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v129[0] = 0;
  sub_101843A44(a2, 43, (uint64_t)v129);
  if (v129[0])
  {
    WORD2(v175) = v130;
  }
  else
  {
    sub_100134750(buf, "nwGpsWeek,");
    if (SBYTE3(v208) >= 0) {
      uint64_t v67 = buf;
    }
    else {
      uint64_t v67 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v68 = BYTE3(v208);
    }
    else {
      std::string::size_type v68 = *(void *)&buf[8];
    }
    std::string::append(&v164, v67, v68);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v127[0] = 0;
  sub_1017CC710(a2, 44, (uint64_t)v127);
  if (v127[0])
  {
    DWORD2(v175) = v128;
  }
  else
  {
    sub_100134750(buf, "nwGpsMsec,");
    if (SBYTE3(v208) >= 0) {
      char v69 = buf;
    }
    else {
      char v69 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v70 = BYTE3(v208);
    }
    else {
      std::string::size_type v70 = *(void *)&buf[8];
    }
    std::string::append(&v164, v69, v70);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v125[0] = 0;
  sub_10183D22C(a2, 45, (uint64_t)v125);
  if (v125[0])
  {
    HIDWORD(v175) = v126;
  }
  else
  {
    sub_100134750(buf, "nwRefTimeUncertainty,");
    if (SBYTE3(v208) >= 0) {
      unint64_t v71 = buf;
    }
    else {
      unint64_t v71 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v72 = BYTE3(v208);
    }
    else {
      std::string::size_type v72 = *(void *)&buf[8];
    }
    std::string::append(&v164, v71, v72);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v188[0] = 0;
  sub_1017CC774(a2, 46, (uint64_t)v188);
  if (v188[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v73 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v188[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v189;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "#ca,nwAssistanceReceived,0x%x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      if (!v188[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)double v182 = 67109120;
      *(_DWORD *)&v182[4] = v189;
      __int16 v108 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v108);
      if (v108 != buf) {
        free(v108);
      }
    }
    if (!v188[0]) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    *(void *)&long long v176 = v189;
  }
  else
  {
    sub_100134750(buf, "nwAssistanceReceived,");
    if (SBYTE3(v208) >= 0) {
      unint64_t v74 = buf;
    }
    else {
      unint64_t v74 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v75 = BYTE3(v208);
    }
    else {
      std::string::size_type v75 = *(void *)&buf[8];
    }
    std::string::append(&v164, v74, v75);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v186[0] = 0;
  sub_1017CC774(a2, 47, (uint64_t)v186);
  if (v186[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v76 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v186[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v187;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "#ca,nwAssistanceDropped,0x%x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      if (!v186[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)double v182 = 67109120;
      *(_DWORD *)&v182[4] = v187;
      long long v109 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v109);
      if (v109 != buf) {
        free(v109);
      }
    }
    if (!v186[0]) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    *((void *)&v176 + 1) = v187;
  }
  else
  {
    sub_100134750(buf, "nwAssistanceDropped,");
    if (SBYTE3(v208) >= 0) {
      int v77 = buf;
    }
    else {
      int v77 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v78 = BYTE3(v208);
    }
    else {
      std::string::size_type v78 = *(void *)&buf[8];
    }
    std::string::append(&v164, v77, v78);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v124[0] = 0;
  sub_1017CC7D8(a2, 48, v124);
  if (v124[0])
  {
    LOBYTE(v177) = v124[1];
  }
  else
  {
    sub_100134750(buf, "networkSpecifiedHorConfidence,");
    if (SBYTE3(v208) >= 0) {
      uint64_t v79 = buf;
    }
    else {
      uint64_t v79 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v80 = BYTE3(v208);
    }
    else {
      std::string::size_type v80 = *(void *)&buf[8];
    }
    std::string::append(&v164, v79, v80);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v122[0] = 0;
  sub_1017CC710(a2, 49, (uint64_t)v122);
  if (v122[0])
  {
    DWORD1(v177) = v123;
  }
  else
  {
    sub_100134750(buf, "subId,");
    if (SBYTE3(v208) >= 0) {
      unint64_t v81 = buf;
    }
    else {
      unint64_t v81 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v82 = BYTE3(v208);
    }
    else {
      std::string::size_type v82 = *(void *)&buf[8];
    }
    std::string::append(&v164, v81, v82);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v120[0] = 0;
  sub_1017CC710(a2, 50, (uint64_t)v120);
  if (v120[0])
  {
    DWORD2(v177) = v121;
  }
  else
  {
    sub_100134750(buf, "numSvsEphemerisAssistance,");
    if (SBYTE3(v208) >= 0) {
      uint64_t v83 = buf;
    }
    else {
      uint64_t v83 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v84 = BYTE3(v208);
    }
    else {
      std::string::size_type v84 = *(void *)&buf[8];
    }
    std::string::append(&v164, v83, v84);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v184[0] = 0;
  sub_1017CC774(a2, 51, (uint64_t)v184);
  if (v184[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v85 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v184[0]) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v185;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "#ca,nilrRequestTypeMask,0x%x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      if (!v184[0]) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      *(_DWORD *)double v182 = 67109120;
      *(_DWORD *)&v182[4] = v185;
      __int16 v110 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v110);
      if (v110 != buf) {
        free(v110);
      }
    }
    if (!v184[0]) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    if (v185)
    {
      uint64_t v90 = 1;
    }
    else if ((v185 & 2) != 0)
    {
      uint64_t v90 = 2;
    }
    else if ((v185 & 4) != 0)
    {
      uint64_t v90 = 4;
    }
    else
    {
      if ((v185 & 8) == 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v86 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(void *)&uint8_t buf[4] = v178;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "#ca,unexpected request type,%llu", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10233FB48);
          }
          *(_DWORD *)double v182 = 134217984;
          *(void *)&v182[4] = v178;
          int v87 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v87);
          if (v87 != buf) {
            free(v87);
          }
        }
        goto LABEL_404;
      }
      uint64_t v90 = 8;
    }
    *(void *)&long long v178 = v90;
LABEL_404:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v91 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      sub_1019BD4D4(v178, buf);
      int v92 = SBYTE3(v208) >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)double v182 = 136315138;
      *(void *)&v182[4] = v92;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "#ca,nilrRequestType,%s", v182, 0xCu);
      if (SBYTE3(v208) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      sub_1019BD4D4(v178, v182);
      if (v183 >= 0) {
        int v113 = v182;
      }
      else {
        int v113 = *(unsigned char **)v182;
      }
      int v180 = 136315138;
      *(void *)__int16 v181 = v113;
      __int16 v114 = (char *)_os_log_send_and_compose_impl();
      if (v183 < 0) {
        operator delete(*(void **)v182);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v114);
      if (v114 != buf) {
        free(v114);
      }
    }
    goto LABEL_413;
  }
  sub_100134750(buf, "nilrRequestType,");
  if (SBYTE3(v208) >= 0) {
    int v88 = buf;
  }
  else {
    int v88 = *(const std::string::value_type **)buf;
  }
  if (SBYTE3(v208) >= 0) {
    std::string::size_type v89 = BYTE3(v208);
  }
  else {
    std::string::size_type v89 = *(void *)&buf[8];
  }
  std::string::append(&v164, v88, v89);
  if (SBYTE3(v208) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_413:
  LOBYTE(v180) = 0;
  sub_1017CC774(a2, 52, (uint64_t)&v180);
  if ((_BYTE)v180)
  {
    *((void *)&v178 + 1) = *(void *)&v181[4];
  }
  else
  {
    sub_100134750(buf, "rawTimeTick,");
    if (SBYTE3(v208) >= 0) {
      int v93 = buf;
    }
    else {
      int v93 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v94 = BYTE3(v208);
    }
    else {
      std::string::size_type v94 = *(void *)&buf[8];
    }
    std::string::append(&v164, v93, v94);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  v119[0] = 0;
  sub_1017CC7D8(a2, 53, v119);
  if (v119[0])
  {
    LOBYTE(v179) = v119[1];
  }
  else
  {
    sub_100134750(buf, "ecidCellReportCount,");
    if (SBYTE3(v208) >= 0) {
      int v95 = buf;
    }
    else {
      int v95 = *(const std::string::value_type **)buf;
    }
    if (SBYTE3(v208) >= 0) {
      std::string::size_type v96 = BYTE3(v208);
    }
    else {
      std::string::size_type v96 = *(void *)&buf[8];
    }
    std::string::append(&v164, v95, v96);
    if (SBYTE3(v208) < 0) {
      operator delete(*(void **)buf);
    }
  }
  std::string::size_type size = HIBYTE(v164.__r_.__value_.__r.__words[2]);
  if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v164.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v98 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v99 = &v164;
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v99 = (std::string *)v164.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v99;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "handlePdsSessionStatisticsReport,missingTlvList,%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v111 = &v164;
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v111 = (std::string *)v164.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)double v182 = 136315138;
      *(void *)&v182[4] = v111;
      __int16 v112 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v112);
      if (v112 != buf) {
        free(v112);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v100 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_10183093C((uint64_t)&v165);
    uint64_t v101 = v183 >= 0 ? v182 : *(unsigned char **)v182;
    *(_DWORD *)std::string buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v207 = 2081;
    v208 = v101;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"QMI_PDS_SESSION_STATISTICS_REPORT\", \"SummaryReport,\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v183 < 0) {
      operator delete(*(void **)v182);
    }
  }
  *(void *)std::string buf = 0;
  uint64_t v102 = (const char *)(a1 + 2152);
  if (*(char *)(a1 + 2175) < 0)
  {
    if (!*(void *)(a1 + 2160)) {
      goto LABEL_458;
    }
    uint64_t v102 = *(const char **)v102;
  }
  else if (!*(unsigned char *)(a1 + 2175))
  {
    goto LABEL_458;
  }
  if (sub_1004BE590(v102, (double *)buf))
  {
    uint64_t v103 = (unint64_t)(CFAbsoluteTimeGetCurrent() - *(double *)buf);
    goto LABEL_459;
  }
LABEL_458:
  uint64_t v103 = -1;
LABEL_459:
  uint64_t v104 = *(void *)(a1 + 2232);
  v117[12] = v176;
  v117[13] = v177;
  v117[14] = v178;
  uint64_t v118 = v179;
  v117[8] = v173;
  v117[9] = *(_OWORD *)v174;
  v117[10] = *(_OWORD *)&v174[16];
  v117[11] = v175;
  v117[4] = v169;
  void v117[5] = v170;
  v117[6] = v171;
  v117[7] = v172;
  v117[0] = v165;
  v117[1] = (__int128)v166;
  v117[2] = v167;
  v117[3] = v168;
  sub_10196A7D4(v104, v117, v103);
  uint64_t v105 = *(unsigned int *)(a1 + 3552);
  if (v105 <= 1)
  {
    uint64_t v106 = *(void *)sub_101813194(a1 + 2248, v105);
    v115[12] = v176;
    v115[13] = v177;
    v115[14] = v178;
    uint64_t v116 = v179;
    v115[8] = v173;
    v115[9] = *(_OWORD *)v174;
    v115[10] = *(_OWORD *)&v174[16];
    v115[11] = v175;
    v115[4] = v169;
    void v115[5] = v170;
    v115[6] = v171;
    v115[7] = v172;
    v115[0] = v165;
    v115[1] = (__int128)v166;
    v115[2] = v167;
    v115[3] = v168;
    sub_101937490(v106, v115, v103);
  }
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v164.__r_.__value_.__l.__data_);
  }
}

void sub_1018306CC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101830918(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x1A) {
    return 0;
  }
  else {
    return dword_101E43620[(char)a2];
  }
}

uint64_t sub_10183093C(uint64_t a1)
{
  sub_10010F274((uint64_t)v32);
  sub_10010F274((uint64_t)v30);
  sub_100132EFC(v33, (uint64_t)"sessionStatisticsReport", 23);
  long long v2 = sub_100132EFC(v33, (uint64_t)",refLat,", 8);
  uint64_t v3 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 - 24) + 24) = 12;
  *(uint64_t *)((char *)v2 + *(void *)(v3 - 24) + 16) = 8;
  *(_DWORD *)((char *)v2 + *(void *)(v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(v3 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  int v4 = sub_100132EFC(v33, (uint64_t)",refLon,", 8);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 12;
  *(uint64_t *)((char *)v4 + *(void *)(v5 - 24) + 16) = 8;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",refAlt,", 8);
  uint64_t v6 = v32[0];
  *(void *)((char *)&v32[2] + *(void *)(v32[0] - 24)) = 2;
  *(_DWORD *)((char *)&v32[1] + *(void *)(v6 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",refAltUnc,", 11);
  uint64_t v7 = v32[0];
  *(void *)((char *)&v32[2] + *(void *)(v32[0] - 24)) = 2;
  *(_DWORD *)((char *)&v32[1] + *(void *)(v7 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",refUncSemiMaj,", 15);
  uint64_t v8 = v32[0];
  *(void *)((char *)&v32[2] + *(void *)(v32[0] - 24)) = 2;
  *(_DWORD *)((char *)&v32[1] + *(void *)(v8 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",refUncSemMin,", 14);
  uint64_t v9 = v32[0];
  *(void *)((char *)&v32[2] + *(void *)(v32[0] - 24)) = 2;
  *(_DWORD *)((char *)&v32[1] + *(void *)(v9 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",refUncAngle,", 13);
  uint64_t v10 = v32[0];
  *(void *)((char *)&v32[2] + *(void *)(v32[0] - 24)) = 2;
  *(_DWORD *)((char *)&v32[1] + *(void *)(v10 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",refConf,", 9);
  std::to_string(&v29, *(unsigned __int8 *)(a1 + 80));
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v11 = &v29;
  }
  else {
    int v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v33, (uint64_t)v11, size);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_100132EFC(v33, (uint64_t)",nwTimeOut,", 11);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",nwReqHorAcc,", 13);
  uint64_t v13 = v32[0];
  *(void *)((char *)&v32[2] + *(void *)(v32[0] - 24)) = 2;
  *(_DWORD *)((char *)&v32[1] + *(void *)(v13 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",nwRefTimeUncertainty,", 22);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",nwAssistanceReceived,", 22);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",nwAssistanceDropped,", 21);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",networkSpecifiedHorConfidence,", 31);
  v29.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 208);
  sub_100132EFC(v33, (uint64_t)&v29, 1);
  sub_100132EFC(v33, (uint64_t)",subId,", 7);
  sub_1019BD798(*(_DWORD *)(a1 + 212), &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v14 = &v29;
  }
  else {
    int v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v29.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v33, (uint64_t)v14, v15);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_100132EFC(v33, (uint64_t)",numSvsEphemerisAssistance,", 27);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",nilrRequestType,", 17);
  sub_1019BD4D4(*(void *)(a1 + 224), &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &v29;
  }
  else {
    int v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v29.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v33, (uint64_t)v16, v17);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_100132EFC(v33, (uint64_t)",rawTimeTick,", 13);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",ecidCellReportCount,", 21);
  v29.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 240);
  sub_100132EFC(v33, (uint64_t)&v29, 1);
  sub_100132EFC(v33, (uint64_t)",cpiAccepted,", 13);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiFusedWithGNSS,", 18);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiTimestamp,", 14);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiLatitude,", 13);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiLongitude,", 14);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiEllipsoidAltitude,", 22);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiHorizontalUncertaintyCircular,", 34);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiHorizontalConfidence,", 25);
  v29.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 144);
  sub_100132EFC(v33, (uint64_t)&v29, 1);
  sub_100132EFC(v33, (uint64_t)",cpiVerticalConfidence,", 23);
  v29.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 145);
  sub_100132EFC(v33, (uint64_t)&v29, 1);
  sub_100132EFC(v33, (uint64_t)",cpiPosSource,", 14);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",cpiTimeType,", 13);
  sub_1019BD26C(*(unsigned __int8 *)(a1 + 152), &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &v29;
  }
  else {
    int v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v29.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v33, (uint64_t)v18, v19);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_100132EFC(v33, (uint64_t)",horizontalReliability,", 23);
  sub_1019BDA78(*(unsigned __int8 *)(a1 + 153), &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v20 = &v29;
  }
  else {
    __int16 v20 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v29.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v33, (uint64_t)v20, v21);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_100132EFC(v33, (uint64_t)",verticalReliability,", 21);
  sub_1019BDA78(*(unsigned __int8 *)(a1 + 154), &v29);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v29;
  }
  else {
    int v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v29.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v33, (uint64_t)v22, v23);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_100132EFC(v33, (uint64_t)",altSource,", 11);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",altSourceLinkage,", 18);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",altUncertaintyCoverage,", 24);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",huncSemimajor,", 15);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",huncSemiminor,", 15);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",huncAzimuth,", 13);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",nwGpsWeek,", 11);
  std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)",nwGpsMsec,", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v30
  uint64_t v27 = v25;
  v30[2] = v25;
  if (v31 < 0) {
    operator delete((void *)v30[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v32[0] = v24;
  *(void *)((char *)v32 + *(void *)(v24 - 24)) = v26;
  v33[0] = v27;
  if (v34 < 0) {
    operator delete((void *)v33[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101831524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a16);
  sub_101A129A8((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_101831594(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 - 8;
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v4 = 8 * v2;
      do
      {
        sub_101833504((uint64_t *)(v3 + v4), 0);
        v4 -= 8;
      }
      while (v4);
    }
    operator delete[]();
  }
}

void sub_10183160C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_10183163C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 120; i += 24)
  {
    uint64_t v5 = (void *)(a1 + i);
    void *v5 = 0;
    v5[1] = 0;
    _DWORD v5[2] = 0;
    sub_100C3D524((void *)(a1 + i), *(const void **)(a2 + i), *(void *)(a2 + i + 8), (uint64_t)(*(void *)(a2 + i + 8) - *(void *)(a2 + i)) >> 1);
  }
  for (uint64_t j = 0; j != 120; j += 24)
  {
    uint64_t v7 = (void *)(a1 + 120 + j);
    *uint64_t v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = 0;
    sub_100C3D524(v7, *(const void **)(a2 + j + 120), *(void *)(a2 + j + 128), (uint64_t)(*(void *)(a2 + j + 128) - *(void *)(a2 + j + 120)) >> 1);
  }
  return a1;
}

void sub_1018316D0(_Unwind_Exception *exception_object)
{
  for (; v2; v2 -= 24)
  {
    uint64_t v4 = *(void **)(v1 + v2 + 96);
    if (v4)
    {
      *(void *)(v1 + v2 + 104) = v4;
      operator delete(v4);
    }
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void **)(v1 + v5 + 96);
    if (v6)
    {
      *(void *)(v1 + v5 + 104) = v6;
      operator delete(v6);
    }
    v5 -= 24;
    if (v5 == -120) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_101831748(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_100C3D5E0(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    uint64_t v9 = &v6[2 * v8];
    uint64_t v10 = (char *)*a1;
    int v11 = (char *)a1[1];
    int v12 = v7;
    if (v11 != *a1)
    {
      int v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1018317EC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10183181C(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void *sub_10183184C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1018318D0(void *a1)
{
  *a1 = 0;
  if (sub_1000FFBA8()) {
    operator new[]();
  }
  operator new[]();
}

void sub_101831968(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_101831594((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101831990(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101966684();
    operator delete();
  }
  return result;
}

uint64_t sub_1018319E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_101831A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101831B14()
{
}

void *sub_101831B28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FBC8;
  result[1] = v3;
  return result;
}

uint64_t sub_101831B70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FBC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101831B9C(uint64_t a1, qmi::Client *a2)
{
  return sub_10181B9C0(*(void *)(a1 + 8), a2);
}

uint64_t sub_101831BA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101831BE4()
{
}

void sub_101831BF4()
{
}

void *sub_101831C08(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FC48;
  result[1] = v3;
  return result;
}

uint64_t sub_101831C50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FC48;
  a2[1] = v2;
  return result;
}

void *sub_101831C7C(uint64_t a1, char *a2, int *a3, uint64_t a4, char *a5)
{
  int v6 = *a3;
  char v7 = *a5;
  char v12 = *a2;
  int v11 = v6;
  uint64_t v8 = *(void *)(a1 + 8) + 1704;
  uint64_t v9 = operator new(0x28uLL);
  *uint64_t v9 = off_10233FCB8;
  v9[1] = &v12;
  _DWORD v9[2] = &v11;
  v9[3] = a4;
  *((unsigned char *)v9 + 32) = v7;
  v13[3] = v9;
  sub_1018D6764(v8, (uint64_t)v13);
  return sub_1017C825C(v13);
}

void sub_101831D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101831D54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101831D94()
{
}

void sub_101831DA4()
{
}

__n128 sub_101831DB8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_10233FCB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_101831E0C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10233FCB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101831E44(uint64_t a1, uint64_t *a2)
{
  int v3 = **(unsigned __int8 **)(a1 + 8);
  int v4 = **(_DWORD **)(a1 + 16);
  int64_t v5 = *(void **)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_101831F18;
  v6[3] = &unk_10233D190;
  char v7 = *(unsigned char *)(a1 + 32);
  sub_101856CBC(a2, v3, v4, v5, (uint64_t)v6);
}

uint64_t sub_101831ECC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101831F0C()
{
}

void sub_101831F18(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *(unsigned __int8 *)(a1 + 32);
    *(_DWORD *)std::string buf = 68289538;
    int v10 = 0;
    __int16 v11 = 2082;
    char v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 1026;
    int v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ee,Inject\", \"response\":%{public}d, \"isLast\":%{public}hhd}", buf, 0x1Eu);
  }
  if (*(unsigned char *)(a1 + 32) && !*(_DWORD *)(a2 + 4))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    char v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Xtra download - ok", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::CLEurekaController(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)::(anonymous class)::operator()(uint8_t, uint32_t, const std::vector<uint8_t> &, BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_101832160()
{
}

void *sub_101832174(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FD48;
  result[1] = v3;
  return result;
}

uint64_t sub_1018321BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FD48;
  a2[1] = v2;
  return result;
}

BOOL sub_1018321E8(uint64_t a1)
{
  return sub_101815AF4(*(void *)(a1 + 8), (int *)(*(void *)(a1 + 8) + 3556));
}

uint64_t sub_1018321F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101832234()
{
}

void sub_101832244()
{
}

void *sub_101832258(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FDC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1018322A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FDC8;
  a2[1] = v2;
  return result;
}

BOOL sub_1018322CC(uint64_t a1)
{
  return sub_101816B2C(*(void *)(a1 + 8));
}

uint64_t sub_1018322D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101832314()
{
}

void sub_101832324()
{
}

void *sub_101832338(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FE48;
  result[1] = v3;
  return result;
}

uint64_t sub_101832380(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FE48;
  a2[1] = v2;
  return result;
}

void sub_1018323AC(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_1018323B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018323F4()
{
}

void sub_101832404()
{
}

void *sub_101832418(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FEC8;
  result[1] = v3;
  return result;
}

uint64_t sub_101832460(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FEC8;
  a2[1] = v2;
  return result;
}

void sub_10183248C(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_101832498(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018324D8()
{
}

void sub_1018324E8()
{
}

void *sub_1018324FC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FF48;
  result[1] = v3;
  return result;
}

uint64_t sub_101832544(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FF48;
  a2[1] = v2;
  return result;
}

uint64_t sub_101832570(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 2664);
  if (v2) {
    sub_1018B2D04(v2);
  }

  return sub_10181505C(v1);
}

uint64_t sub_1018325B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018325F0()
{
}

void sub_101832600()
{
}

void *sub_101832614(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_10233FFC8;
  result[1] = v3;
  return result;
}

uint64_t sub_10183265C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10233FFC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101832688(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 2664);
  if (v2) {
    sub_1018B2D0C(v2);
  }

  return sub_101814C20(v1);
}

uint64_t sub_1018326C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101832708()
{
}

void sub_101832718()
{
}

void *sub_10183272C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340048;
  result[1] = v3;
  return result;
}

uint64_t sub_101832774(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340048;
  a2[1] = v2;
  return result;
}

uint64_t sub_1018327A0(uint64_t a1, uint64_t a2)
{
  sub_1018328A0((uint64_t)v4, a2);
  if (!v5) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void))(*(void *)v5 + 48))(v5, *(void *)(a1 + 8));
  sub_101832920(v4);
  return 1;
}

void sub_101832840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101832920((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101832854(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101832894()
{
}

uint64_t sub_1018328A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_101832920(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1018329A8()
{
}

void *sub_1018329BC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023400D8;
  result[1] = v3;
  return result;
}

uint64_t sub_101832A04(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023400D8;
  a2[1] = v2;
  return result;
}

void sub_101832A30(uint64_t a1, uint64_t a2)
{
  memcpy(__dst, (const void *)a2, sizeof(__dst));
  long long v11 = *(_OWORD *)(a2 + 960);
  uint64_t v12 = *(void *)(a2 + 976);
  *(_OWORD *)(a2 + 960) = 0u;
  *(void *)(a2 + 976) = 0;
  long long v13 = *(_OWORD *)(a2 + 984);
  uint64_t v14 = *(void *)(a2 + 1000);
  *(_OWORD *)(a2 + 984) = 0u;
  *(void *)(a2 + 1000) = 0;
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a2 + 1132);
  v22[0] = *(_OWORD *)(a2 + 1120);
  long long v21 = *(_OWORD *)(a2 + 1104);
  long long v20 = *(_OWORD *)(a2 + 1088);
  long long v19 = *(_OWORD *)(a2 + 1072);
  long long v18 = *(_OWORD *)(a2 + 1056);
  long long v17 = *(_OWORD *)(a2 + 1040);
  long long v4 = *(_OWORD *)(a2 + 1008);
  long long v16 = *(_OWORD *)(a2 + 1024);
  long long v15 = v4;
  long long v23 = *(_OWORD *)(a2 + 1152);
  uint64_t v24 = *(void *)(a2 + 1168);
  *(_OWORD *)(a2 + 1152) = 0u;
  long long v5 = *(_OWORD *)(a2 + 1176);
  *(void *)(a2 + 1176) = 0;
  *(void *)(a2 + 1168) = 0;
  long long v25 = v5;
  uint64_t v26 = *(void *)(a2 + 1192);
  *(void *)(a2 + 1184) = 0;
  *(void *)(a2 + 1192) = 0;
  long long v27 = *(_OWORD *)(a2 + 1200);
  long long v28 = *(_OWORD *)(a2 + 1216);
  uint64_t v29 = *(void *)(a2 + 1232);
  uint64_t v6 = *(void *)(a1 + 8);
  double v39 = 0.0;
  char v7 = (const char *)(v6 + 2152);
  if (*(char *)(v6 + 2175) < 0)
  {
    if (!*(void *)(v6 + 2160)) {
      goto LABEL_8;
    }
    char v7 = *(const char **)v7;
  }
  else if (!*(unsigned char *)(v6 + 2175))
  {
    goto LABEL_8;
  }
  if (sub_1004BE590(v7, &v39))
  {
    BYTE2(__dst[21]) = 1;
    __dst[22] = (unint64_t)(CFAbsoluteTimeGetCurrent() - v39);
  }
LABEL_8:
  BYTE4(__dst[30]) = 1;
  LODWORD(__dst[117]) = 0;
  if (sub_100D33CB4(v6 + 2268))
  {
    int v8 = 1;
  }
  else
  {
    if (!sub_100D33CC4(v6 + 2268)) {
      goto LABEL_13;
    }
    int v8 = 2;
  }
  LODWORD(__dst[117]) = v8;
LABEL_13:
  if (*(void *)(v6 + 1592))
  {
    sub_101832D90((uint64_t)v30, (uint64_t)__dst);
    uint64_t v9 = *(void *)(v6 + 1592);
    if (!v9) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v30);
    if (v38 < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_101832CD4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x98F]) < 0) {
    operator delete((void *)STACK[0x978]);
  }
  sub_101844A1C((uint64_t)&STACK[0x4E0]);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101832D44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101832D84()
{
}

uint64_t sub_101832D90(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x3C0uLL);
  if (*(char *)(a2 + 983) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 960), *(void **)(a2 + 960), *(void *)(a2 + 968));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 960);
    *(void *)(a1 + 976) = *(void *)(a2 + 976);
    *(_OWORD *)(a1 + 960) = v4;
  }
  if (*(char *)(a2 + 1007) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 984), *(void **)(a2 + 984), *(void *)(a2 + 992));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 984);
    *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
    *(_OWORD *)(a1 + 984) = v5;
  }
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  long long v6 = *(_OWORD *)(a2 + 1024);
  long long v7 = *(_OWORD *)(a2 + 1040);
  long long v8 = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1056) = v8;
  *(_OWORD *)(a1 + 1040) = v7;
  *(_OWORD *)(a1 + 1024) = v6;
  long long v9 = *(_OWORD *)(a2 + 1088);
  long long v10 = *(_OWORD *)(a2 + 1104);
  long long v11 = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1132) = *(_OWORD *)(a2 + 1132);
  *(_OWORD *)(a1 + 1120) = v11;
  *(_OWORD *)(a1 + 1104) = v10;
  *(_OWORD *)(a1 + 1088) = v9;
  if (*(char *)(a2 + 1175) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 1152), *(void **)(a2 + 1152), *(void *)(a2 + 1160));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 1152);
    *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
    *(_OWORD *)(a1 + 1152) = v12;
  }
  long long v13 = (unsigned char *)(a1 + 1176);
  if (*(char *)(a2 + 1199) < 0)
  {
    sub_1000DC48C(v13, *(void **)(a2 + 1176), *(void *)(a2 + 1184));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 1176);
    *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
    *(_OWORD *)long long v13 = v14;
  }
  long long v15 = *(_OWORD *)(a2 + 1200);
  long long v16 = *(_OWORD *)(a2 + 1216);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(_OWORD *)(a1 + 1216) = v16;
  *(_OWORD *)(a1 + 1200) = v15;
  return a1;
}

void sub_101832F04(_Unwind_Exception *exception_object)
{
  if (v1[1175] < 0) {
    operator delete(*v4);
  }
  if (v1[1007] < 0) {
    operator delete(*v3);
  }
  if (v1[983] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101832F54()
{
}

void *sub_101832F68(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340158;
  result[1] = v3;
  return result;
}

uint64_t sub_101832FB0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340158;
  a2[1] = v2;
  return result;
}

double sub_101832FDC(uint64_t a1, uint64_t *a2)
{
  *(void *)&double result = sub_10182D7B8(*(void *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_101832FE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101833024()
{
}

void *sub_101833030(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1018330B4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183313C()
{
}

void *sub_101833150(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023401E8;
  result[1] = v3;
  return result;
}

uint64_t sub_101833198(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023401E8;
  a2[1] = v2;
  return result;
}

void sub_1018331C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 2664);
  if (v5) {
    sub_1018B2D04(v5);
  }
  uint64_t v6 = v3;
  long long v7 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101927228(v4, &v6);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

void sub_101833240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183326C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018332AC()
{
}

void sub_1018332BC()
{
}

void *sub_1018332D0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340268;
  result[1] = v3;
  return result;
}

uint64_t sub_101833318(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340268;
  a2[1] = v2;
  return result;
}

void sub_101833344(uint64_t a1, int *a2, unsigned __int8 *a3)
{
}

uint64_t sub_101833354(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101833394()
{
}

void sub_1018333A4()
{
}

void *sub_1018333B8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023402F8;
  result[1] = v3;
  return result;
}

uint64_t sub_101833400(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023402F8;
  a2[1] = v2;
  return result;
}

double sub_10183342C(uint64_t a1, uint64_t *a2)
{
  *(void *)&double result = sub_10182DA28(*(void *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_101833434(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101833474()
{
}

void *sub_101833480(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_101833504(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101932868();
    operator delete();
  }
  return result;
}

void sub_101833558()
{
}

void *sub_10183356C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340378;
  result[1] = v3;
  return result;
}

uint64_t sub_1018335B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340378;
  a2[1] = v2;
  return result;
}

double sub_1018335E0(uint64_t a1, uint64_t *a2)
{
  *(void *)&double result = sub_10182DA28(*(void *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_1018335E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101833628()
{
}

void sub_101833638()
{
}

void *sub_10183364C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023403F8;
  result[1] = v3;
  return result;
}

uint64_t sub_101833694(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023403F8;
  a2[1] = v2;
  return result;
}

void sub_1018336C0(uint64_t a1)
{
}

uint64_t sub_1018336CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183370C()
{
}

void sub_10183371C()
{
}

void *sub_101833730(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340478;
  result[1] = v3;
  return result;
}

uint64_t sub_101833778(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340478;
  a2[1] = v2;
  return result;
}

void sub_1018337A4(uint64_t a1)
{
}

uint64_t sub_1018337B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018337F4()
{
}

void *sub_101833800@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x28uLL);
  double result = sub_10183385C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101833848(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10183385C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1023404F8;
  sub_1018B3D04(a1 + 3, *a2);
  return a1;
}

void sub_1018338A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1018338BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023404F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018338DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023404F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

const char **sub_101833930(uint64_t a1)
{
  return sub_1018B3D08((const char **)(a1 + 24));
}

void sub_10183393C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102340548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10183395C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102340548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_1018339B0(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 24);
  sub_101833DE4(a1 + 56);

  return sub_10068280C(v1);
}

void sub_1018339F4()
{
}

void *sub_101833A08(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340598;
  result[1] = v3;
  return result;
}

uint64_t sub_101833A50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340598;
  a2[1] = v2;
  return result;
}

void *sub_101833A7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  v3[0] = off_102340608;
  v3[1] = v1;
  v3[3] = v3;
  sub_1018D6764(v1 + 1704, (uint64_t)v3);
  return sub_1017C825C(v3);
}

void sub_101833B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101833B1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101833B5C()
{
}

void sub_101833B6C()
{
}

void *sub_101833B80(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340608;
  result[1] = v3;
  return result;
}

uint64_t sub_101833BC8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340608;
  a2[1] = v2;
  return result;
}

void sub_101833BF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101833CDC;
  v3[3] = &unk_1022ACDD8;
  void v3[4] = v2;
  sub_1018565FC(a2, 2039807, 2, 127, 255, 127, 127, 511, 63, 511, (uint64_t)v3);
}

uint64_t sub_101833C90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101833CD0()
{
}

uint64_t sub_101833CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    long long v8 = "";
    __int16 v9 = 2081;
    uint64_t v10 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,bbResponse\", \"errorStr\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  return sub_10189BD98(*(void *)(v3 + 2648), *(_DWORD *)(a2 + 4));
}

uint64_t sub_101833DE4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_101833E54(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_101833E54(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_101833ED4(a3, *((_DWORD *)v5 + 8));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          __int16 v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          __int16 v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_101833ED4(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (__int16 v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      long long v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v12 = (void *)*v12;
      }
      sub_10189A220(a2, __p);
      if (v31 >= 0) {
        long long v13 = __p;
      }
      else {
        long long v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      long long v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v14 = (void *)*v14;
      }
      sub_10189A220(a2, buf);
      if (v25 >= 0) {
        long long v15 = buf;
      }
      else {
        long long v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      long long v27 = v14;
      __int16 v28 = 2080;
      uint64_t v29 = v15;
      long long v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaResetGnss>::cancelTimeoutEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    long long v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      long long v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v18 = (void *)*v18;
      }
      sub_10189A220(a2, __p);
      if (v31 >= 0) {
        long long v19 = __p;
      }
      else {
        long long v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      uint64_t v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      long long v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v20 = (void *)*v20;
      }
      sub_10189A220(a2, buf);
      if (v25 >= 0) {
        long long v21 = buf;
      }
      else {
        long long v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      long long v27 = v20;
      __int16 v28 = 2080;
      uint64_t v29 = v21;
      long long v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void *sub_101834368@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xF8uLL);
  double result = sub_1018343C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1018343B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1018343C4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102340698;
  sub_1019A56A8(a1 + 3, *a2);
  return a1;
}

void sub_101834410(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101834424(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102340698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101834444(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102340698;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101834498(uint64_t a1)
{
  return sub_1019A5700(a1 + 24);
}

void sub_1018344A8()
{
}

void *sub_1018344BC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023406E8;
  result[1] = v3;
  return result;
}

uint64_t sub_101834504(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023406E8;
  a2[1] = v2;
  return result;
}

void sub_101834530(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rti sendSetBlockList,send", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::injectBlocklist(const qmi::pds::BlockListSv &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_10185DA58(a2, *(void *)(a1 + 8), (uint64_t)&stru_102340748);
}

uint64_t sub_1018346DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183471C()
{
}

void sub_101834728(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((_DWORD *)a2 + 1);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    BOOL v7 = "";
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rti sendSetBlockList\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_101834818()
{
}

_DWORD *sub_10183482C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = off_102340788;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_101834878(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_102340788;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1018348A8(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1018348C0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101834900()
{
}

void sub_10183490C(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)a2;
    int v5 = *((_DWORD *)a2 + 1);
    v6[0] = 68289795;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 1026;
    int v10 = v4;
    __int16 v11 = 1026;
    int v12 = v5;
    __int16 v13 = 2081;
    uint64_t v14 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb,constellationControl response\", \"msgId\":%{public}d, \"errorCode\":%{public}d, \"errorString\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x28u);
  }
}

void sub_101834A24()
{
}

void *sub_101834A38(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340828;
  result[1] = v3;
  return result;
}

uint64_t sub_101834A80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340828;
  a2[1] = v2;
  return result;
}

void sub_101834AAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = 0;
    uint64_t v7 = 0x402000000FF0402;
    LODWORD(v8) = 400;
    WORD2(v8) = 1026;
    *(_DWORD *)((char *)&v8 + 6) = 1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ec,sendSetDefaultTrackingSession,mode,%{public}d,timeout,%{public}d,accuracy,%{public}d,period,%{public}d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::startInternal(const DeviceOperatingContext_t &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_101855CF4(a2, 0, 255, 1, 400, (uint64_t)&stru_102340888);
  *(void *)std::string buf = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472;
  *(void *)&long long v8 = sub_101834D88;
  *((void *)&v8 + 1) = &unk_1022ACDD8;
  uint64_t v9 = v3;
  sub_10185603C(a2, 1, (uint64_t)buf);
  sub_101857FA8(a2, 1, (uint64_t)&stru_1023408A8);
}

uint64_t sub_101834D38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101834D78()
{
}

uint64_t sub_101834D88(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  BOOL v4 = v2 == 26 || v2 == 0;
  return sub_10184B74C(*(void *)(a1 + 32) + 3792, v4);
}

void sub_101834DAC()
{
}

void *sub_101834DC0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023408E8;
  result[1] = v3;
  return result;
}

uint64_t sub_101834E08(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023408E8;
  a2[1] = v2;
  return result;
}

void sub_101834E34(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101834EF8;
  v3[3] = &unk_1022ACDD8;
  void v3[4] = v2;
  sub_10185603C(a2, 0, (uint64_t)v3);
}

uint64_t sub_101834EAC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101834EEC()
{
}

void sub_101834EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a2 + 4);
  if (v3 == 26 || v3 == 0)
  {
    sub_1000C7F88(buf);
    v14[0] = 0;
    if (sub_10006EF84(*(uint64_t *)buf, "GpsAssertionStopFailure", v14)) {
      int v5 = v14[0];
    }
    else {
      int v5 = 0;
    }
    if (v18) {
      sub_1000DB0A0(v18);
    }
    sub_1000C7F88(buf);
    v14[0] = 0;
    if (sub_10006EF84(*(uint64_t *)buf, "GpsAssertionStopDelay", v14)) {
      int v6 = v14[0];
    }
    else {
      int v6 = 0;
    }
    if (v18) {
      sub_1000DB0A0(v18);
    }
    if (v5 | v6)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v5;
        LOWORD(v18) = 1024;
        *(_DWORD *)((char *)&v18 + 2) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,#warning,testCodeRunWith,sendFailure,%d,sendDelay,%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        v14[0] = 67109376;
        v14[1] = v5;
        __int16 v15 = 1024;
        int v16 = v6;
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::stopInternal()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      BOOL v8 = v5 == 0;
      if (v6)
      {
        dispatch_time_t v9 = dispatch_time(0, 1000000000 * v6);
        int v10 = [[objc_msgSend(*(id *)(v2 + 1672), "silo") queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_101835270;
        block[3] = &unk_1022BBA18;
        void block[4] = v2;
        BOOL v13 = v8;
        dispatch_after(v9, v10, block);
      }
      else
      {
        sub_10184B738(v2 + 3792, v5 == 0);
      }
    }
    else
    {
      sub_10184B738(v2 + 3792, 1);
    }
  }
  else
  {
    sub_10184B738(v2 + 3792, 0);
  }
}

void sub_10183524C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101835270(uint64_t a1)
{
  return sub_10184B738(*(void *)(a1 + 32) + 3792, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_101835284(uint64_t a1)
{
  sub_10071874C(a1 + 736);
  sub_1000F5BB0(a1 + 688, *(void **)(a1 + 696));
  sub_101835390((uint64_t *)(a1 + 680), 0);
  uint64_t v2 = *(void **)(a1 + 600);
  if (v2)
  {
    *(void *)(a1 + 608) = v2;
    operator delete(v2);
  }
  sub_100E93C68(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v6) {
    operator delete();
  }
  uint64_t v7 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v7) {
    operator delete();
  }
  sub_10084FC8C((void *)(a1 + 40));
  sub_10084FB84((void *)(a1 + 8));
  return a1;
}

uint64_t *sub_101835390(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_1000D7D80(v2 + 88);
    sub_1018353F4(v2);
    operator delete();
  }
  return result;
}

uint64_t sub_1018353F4(uint64_t a1)
{
  sub_101835430(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_101835430(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_101835474(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_101835474(void *a1)
{
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
}

void sub_1018354F0()
{
}

void *sub_101835504(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340968;
  result[1] = v3;
  return result;
}

uint64_t sub_10183554C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340968;
  a2[1] = v2;
  return result;
}

void sub_101835578(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_101835590(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018355D0()
{
}

void sub_1018355E4()
{
}

void *sub_1018355F8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340A08;
  result[1] = v3;
  return result;
}

uint64_t sub_101835640(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340A08;
  a2[1] = v2;
  return result;
}

void sub_10183566C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_101835684(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018356C4()
{
}

void sub_1018356D8()
{
}

__n128 sub_1018356EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102340AA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101835738(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102340AA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101835768(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)std::string buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendNiResponse,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_10185AACC(a2, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 **)(a1 + 16), (uint64_t)&stru_102340B08);
}

uint64_t sub_101835938(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101835978()
{
}

void sub_101835984(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)a2;
    int v5 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67240707;
    int v8 = v4;
    __int16 v9 = 1026;
    int v10 = v5;
    __int16 v11 = 2081;
    uint64_t v12 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#supl,sendNiResponse,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{private}s", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    qmi::asString();
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_101835B90()
{
}

_DWORD *sub_101835BA4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_102340B48;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_101835BF0(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_102340B48;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_101835C20(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if ((v3 - 1) < 4) {
    int v4 = v3 + 1;
  }
  else {
    int v4 = 0;
  }
  sub_10185C7D4(a2, v4, (uint64_t)&stru_102340BA8);
}

uint64_t sub_101835C44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101835C84()
{
}

void sub_101835C98()
{
}

void *sub_101835CAC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102340BE8;
  result[1] = v3;
  return result;
}

uint64_t sub_101835CF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102340BE8;
  a2[1] = v2;
  return result;
}

void sub_101835D20(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_101835D3C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101835D7C()
{
}

void *sub_101835D8C(void *a1)
{
  *a1 = off_102340C88;
  sub_10084DD34((uint64_t)(a1 + 1));
  return a1;
}

void sub_101835DD0(void *a1)
{
  *a1 = off_102340C88;
  sub_10084DD34((uint64_t)(a1 + 1));

  operator delete();
}

unsigned char *sub_101835E34(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = operator new(0x548uLL);
  *(void *)uint64_t v3 = off_102340C88;
  sub_10102ECD4((uint64_t)(v3 + 8), v2);
  v3[1344] = *(unsigned char *)(a1 + 1344);
  return v3;
}

void sub_101835E9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101835EB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102340C88;
  uint64_t result = sub_10102ECD4(a2 + 8, (uint64_t *)(a1 + 8));
  *(unsigned char *)(a2 + 1344) = *(unsigned char *)(a1 + 1344);
  return result;
}

uint64_t sub_101835F04(uint64_t a1)
{
  return sub_10084DD34(a1 + 8);
}

void sub_101835F0C(void *a1)
{
  sub_10084DD34((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_101835F48(unsigned __int8 *a1, uint64_t *a2)
{
  int v4 = a1 + 8;
  sub_10185C1D0(a2, a1[12], a1[13], (uint64_t)&stru_102340CE8);
  sub_10185C4DC(a2, 0, (uint64_t)&stru_102340D08);
  sub_1018AFF88(&v8, v4);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233FB88);
  }
  int v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68290050;
    int v13 = 0;
    __int16 v14 = 2082;
    __int16 v15 = "";
    __int16 v16 = 1026;
    int v17 = v8;
    __int16 v18 = 1026;
    int v19 = v9;
    __int16 v20 = 1026;
    int v21 = v10;
    __int16 v22 = 1026;
    int v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#emergency,setUserPlanePositionModes\", \"userplanemodemask\":%{public}d, \"controlplanemodemask\":%{public}d, \"commonmodesmask\":%{public}d, \"gsmuserplanenetworkmeasurementreportsupport\":%{public}d}", buf, 0x2Au);
  }
  sub_10185CD94(a2, v8, v9, v10, v11, (uint64_t)&stru_102340D28);
  if (sub_10073DC0C())
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233FB88);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = a1[1344];
      *(_DWORD *)std::string buf = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 1026;
      int v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"E911 override config\", \"lockout\":%{public}hhd}", buf, 0x18u);
    }
    sub_10185D744(a2, a1[1344], 0, (uint64_t)&stru_102340D48);
  }
}

uint64_t sub_101836170(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018361B0()
{
}

uint64_t sub_1018361CC(uint64_t a1)
{
  *(void *)a1 = off_102340D88;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10183621C(uint64_t a1)
{
  *(void *)a1 = off_102340D88;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_10183628C(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_102340D88;
  v2[1] = v3;
  int v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1000DC48C(v4, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)int v4 = *(_OWORD *)(a1 + 16);
    void v2[4] = *(void *)(a1 + 32);
  }
  return v2;
}

void sub_101836304(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_101836318(char *result, void *a2)
{
  *a2 = off_102340D88;
  a2[1] = *((void *)result + 1);
  uint64_t v2 = a2 + 2;
  if (result[39] < 0) {
    return (char *)sub_1000DC48C(v2, *((void **)result + 2), *((void *)result + 3));
  }
  long long v3 = *((_OWORD *)result + 1);
  a2[4] = *((void *)result + 4);
  *(_OWORD *)uint64_t v2 = v3;
  return result;
}

void sub_10183636C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void sub_101836380(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void sub_1018363C4(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1 + 16;
    int v6 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v5 = *(void *)(a1 + 16);
    }
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 2080;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setApnProfilesReq,apn,%d,pdnType,%d,apnName,%s", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  int v8 = *(_DWORD *)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1000DC48C(buf, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 32);
  }
  sub_10185B548(a2, v8, v9, (uint64_t *)buf, (uint64_t)&stru_102340DE8);
  if (SHIBYTE(v12) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_101836630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101836654(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102340E08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101836694()
{
  return &off_102340E08;
}

void sub_1018366A0(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)a2;
    int v5 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67109634;
    int v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    __int16 v11 = 2080;
    uint64_t v12 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#supl,setApnProfilesRsp,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    qmi::asString();
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

uint64_t sub_1018368A8(uint64_t a1)
{
  *(void *)a1 = off_102340E28;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1018368F8(uint64_t a1)
{
  *(void *)a1 = off_102340E28;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_101836968(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = off_102340E28;
  sub_1017CE498((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1018369BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018369D0(uint64_t a1, void *a2)
{
  *a2 = off_102340E28;
  return sub_1017CE498((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1018369FC(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void sub_101836A10(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void sub_101836A54(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1 + 16;
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v5 = *(void *)(a1 + 16);
    }
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 2) = v7;
    HIWORD(v21) = 1024;
    LODWORD(v22) = v8;
    WORD2(v22) = 2080;
    *(void *)((char *)&v22 + 6) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setApnProfilesReq,instance,%d,apn,%d,pdnType,%d,apnName,%s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v13 = a1 + 16;
    int v14 = *(_DWORD *)(a1 + 40);
    int v15 = *(_DWORD *)(a1 + 8);
    int v16 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v13 = *(void *)(a1 + 16);
    }
    LODWORD(__p[0]) = 67109890;
    HIDWORD(__p[0]) = v14;
    LOWORD(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 2) = v15;
    HIWORD(__p[1]) = 1024;
    LODWORD(v19[0]) = v16;
    WORD2(v19[0]) = 2080;
    *(void *)((char *)v19 + 6) = v13;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 16), *(void *)(a1 + 24));
    unsigned int v12 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 16);
    v19[0] = *(void *)(a1 + 32);
    unsigned int v12 = v9;
  }
  *(void *)std::string buf = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472;
  *(void *)&long long v22 = sub_101836D9C;
  *((void *)&v22 + 1) = &unk_10233D0F0;
  unsigned int v23 = v12;
  sub_10185B8E0(a2, v9, v10, v11, (uint64_t *)__p, (uint64_t)buf);
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_101836D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101836D50(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102340E88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101836D90()
{
  return &off_102340E88;
}

void sub_101836D9C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 32);
    int v6 = *a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67109890;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#supl,setApnProfilesRsp,instance,%d,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    qmi::asString();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void *sub_101836FC8(void *a1)
{
  *a1 = off_102340EA8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101837018(void *a1)
{
  *a1 = off_102340EA8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

unsigned char *sub_101837088(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = off_102340EA8;
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  sub_10016989C((void *)v2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  return v2;
}

void sub_1018370F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101837104(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102340EA8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return sub_10016989C((void *)(a2 + 16), *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
}

void sub_101837144(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_10183715C(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_1018371A0(uint64_t a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_101837268;
  void v4[3] = &unk_10233D190;
  char v5 = v3;
  sub_10185E39C(a2, v3, a1 + 16, (uint64_t)v4);
}

uint64_t sub_10183721C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183725C()
{
}

void sub_101837268(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 32);
    int v6 = *a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67109890;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#supl,sendInjectSuplCertRsp,index,%d,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    qmi::asString();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_101837498()
{
}

unsigned char *sub_1018374AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = off_102340F28;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1018374F8(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_102340F28;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_101837528(uint64_t a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1018375EC;
  void v4[3] = &unk_10233D190;
  char v5 = v3;
  sub_10185E694(a2, v3, (uint64_t)v4);
}

uint64_t sub_1018375A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018375E0()
{
}

void sub_1018375EC(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 32);
    int v6 = *a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)std::string buf = 67109890;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#supl,sendDeleteSuplCert,index,%d,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    qmi::asString();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_10183781C()
{
}

_DWORD *sub_101837830(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = off_102340FA8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_10183787C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_102340FA8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1018378AC(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)std::string buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setSuplUdpPortConfig,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplUdpPortConfig(uint32_t)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_10185BBE8(a2, *(_DWORD *)(a1 + 8), (uint64_t)&stru_102341008);
}

uint64_t sub_101837A78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101837AB8()
{
}

void sub_101837ACC()
{
}

void *sub_101837AE0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_102341048;
  return result;
}

void sub_101837B18(uint64_t a1, void *a2)
{
  *a2 = off_102341048;
}

void sub_101837B40(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "cancelOngoingSession", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::cancelOngoingSession()::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10185CAC8(a2, (uint64_t)&stru_1023410A8);
}

uint64_t sub_101837CE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101837D24()
{
}

void sub_101837D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

void sub_101837E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017C8F48(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101837E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101837E6C()
{
}

void *sub_101837E80(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023410E8;
  result[1] = v3;
  return result;
}

uint64_t sub_101837EC8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023410E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101837EF4(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_101825E78(*(void *)(a1 + 8), a2);
}

uint64_t sub_101837EFC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101837F3C()
{
}

void sub_101837F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

void sub_101838018(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017C93C8(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101838068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101838080()
{
}

void *sub_101838094(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341168;
  result[1] = v3;
  return result;
}

uint64_t sub_1018380DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341168;
  a2[1] = v2;
  return result;
}

void sub_101838108(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_101838110(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101838150()
{
}

void sub_10183815C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183822C(uint64_t a1, uint64_t a2)
{
  return sub_1018383E0(a1 + 40, a2 + 40);
}

void *sub_101838238(uint64_t a1)
{
  return sub_101838558((void *)(a1 + 40));
}

void sub_101838240(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1018382A4(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101838290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018382A4(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183839C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101838358((uint64_t)a2);
  }
}

void sub_10183833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101838358(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5558u);
  return a1;
}

void sub_101838388(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183839C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5558u);
  return a1;
}

void sub_1018383CC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018383E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183847C()
{
}

void *sub_101838490(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341218;
  result[1] = v3;
  return result;
}

uint64_t sub_1018384D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341218;
  a2[1] = v2;
  return result;
}

void sub_101838504(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183850C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183854C()
{
}

void *sub_101838558(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1018385DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1018386AC(uint64_t a1, uint64_t a2)
{
  return sub_101838860(a1 + 40, a2 + 40);
}

void *sub_1018386B8(uint64_t a1)
{
  return sub_1018389D8((void *)(a1 + 40));
}

void sub_1018386C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_101838724(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101838710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101838724(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183881C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018387D8((uint64_t)a2);
  }
}

void sub_1018387BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018387D8(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x85u);
  return a1;
}

void sub_101838808(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183881C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x85u);
  return a1;
}

void sub_10183884C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101838860(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1018388FC()
{
}

void *sub_101838910(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023412D8;
  result[1] = v3;
  return result;
}

uint64_t sub_101838958(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023412D8;
  a2[1] = v2;
  return result;
}

void sub_101838984(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183898C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018389CC()
{
}

void *sub_1018389D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101838A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_101838B2C(uint64_t a1, uint64_t a2)
{
  return sub_101838CE0(a1 + 40, a2 + 40);
}

void *sub_101838B38(uint64_t a1)
{
  return sub_101838E58((void *)(a1 + 40));
}

void sub_101838B40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_101838BA4(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101838B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101838BA4(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101838C9C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101838C58((uint64_t)a2);
  }
}

void sub_101838C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101838C58(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x86u);
  return a1;
}

void sub_101838C88(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101838C9C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x86u);
  return a1;
}

void sub_101838CCC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101838CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101838D7C()
{
}

void *sub_101838D90(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341398;
  result[1] = v3;
  return result;
}

uint64_t sub_101838DD8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341398;
  a2[1] = v2;
  return result;
}

void sub_101838E04(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_101838E0C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101838E4C()
{
}

void *sub_101838E58(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101838EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_101838FAC(uint64_t a1, uint64_t a2)
{
  return sub_101839160(a1 + 40, a2 + 40);
}

void *sub_101838FB8(uint64_t a1)
{
  return sub_1018392D8((void *)(a1 + 40));
}

void sub_101838FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_101839024(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101839010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101839024(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183911C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018390D8((uint64_t)a2);
  }
}

void sub_1018390BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018390D8(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x9Fu);
  return a1;
}

void sub_101839108(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183911C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x9Fu);
  return a1;
}

void sub_10183914C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101839160(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1018391FC()
{
}

void *sub_101839210(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341458;
  result[1] = v3;
  return result;
}

uint64_t sub_101839258(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341458;
  a2[1] = v2;
  return result;
}

void sub_101839284(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183928C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018392CC()
{
}

void *sub_1018392D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183935C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183942C(uint64_t a1, uint64_t a2)
{
  return sub_1018395E0(a1 + 40, a2 + 40);
}

void *sub_101839438(uint64_t a1)
{
  return sub_101839754((void *)(a1 + 40));
}

void sub_101839440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1018394A4(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101839490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018394A4(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183959C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101839558((uint64_t)a2);
  }
}

void sub_10183953C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101839558(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA1u);
  return a1;
}

void sub_101839588(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183959C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA1u);
  return a1;
}

void sub_1018395CC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018395E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183967C()
{
}

void *sub_101839690(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341518;
  result[1] = v3;
  return result;
}

uint64_t sub_1018396D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341518;
  a2[1] = v2;
  return result;
}

uint64_t sub_101839708(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101839748()
{
}

void *sub_101839754(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1018397D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_1018398A8(uint64_t a1, uint64_t a2)
{
  return sub_101839A5C(a1 + 40, a2 + 40);
}

void *sub_1018398B4(uint64_t a1)
{
  return sub_101839BD4((void *)(a1 + 40));
}

void sub_1018398BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_101839920(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183990C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101839920(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101839A18(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018399D4((uint64_t)a2);
  }
}

void sub_1018399B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018399D4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x91u);
  return a1;
}

void sub_101839A04(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101839A18(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x91u);
  return a1;
}

void sub_101839A48(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101839A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101839AF8()
{
}

void *sub_101839B0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023415D8;
  result[1] = v3;
  return result;
}

uint64_t sub_101839B54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023415D8;
  a2[1] = v2;
  return result;
}

void sub_101839B80(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_101839B88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101839BC8()
{
}

void *sub_101839BD4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101839C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_101839D28(uint64_t a1, uint64_t a2)
{
  return sub_101839EDC(a1 + 40, a2 + 40);
}

void *sub_101839D34(uint64_t a1)
{
  return sub_10183A054((void *)(a1 + 40));
}

void sub_101839D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_101839DA0(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101839D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101839DA0(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101839E98(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101839E54((uint64_t)a2);
  }
}

void sub_101839E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101839E54(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xACu);
  return a1;
}

void sub_101839E84(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101839E98(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xACu);
  return a1;
}

void sub_101839EC8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101839EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101839F78()
{
}

void *sub_101839F8C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341698;
  result[1] = v3;
  return result;
}

uint64_t sub_101839FD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341698;
  a2[1] = v2;
  return result;
}

void sub_10183A000(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183A008(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183A048()
{
}

void *sub_10183A054(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183A0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183A1A8(uint64_t a1, uint64_t a2)
{
  return sub_10183A35C(a1 + 40, a2 + 40);
}

void *sub_10183A1B4(uint64_t a1)
{
  return sub_10183A4D4((void *)(a1 + 40));
}

void sub_10183A1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10183A220(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183A20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183A220(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183A318(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183A2D4((uint64_t)a2);
  }
}

void sub_10183A2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183A2D4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA7u);
  return a1;
}

void sub_10183A304(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183A318(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA7u);
  return a1;
}

void sub_10183A348(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10183A35C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183A3F8()
{
}

void *sub_10183A40C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341758;
  result[1] = v3;
  return result;
}

uint64_t sub_10183A454(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341758;
  a2[1] = v2;
  return result;
}

void sub_10183A480(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183A488(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183A4C8()
{
}

void *sub_10183A4D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183A558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183A628(uint64_t a1, uint64_t a2)
{
  return sub_10183A7DC(a1 + 40, a2 + 40);
}

void *sub_10183A634(uint64_t a1)
{
  return sub_10183A954((void *)(a1 + 40));
}

void sub_10183A63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10183A6A0(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183A68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183A6A0(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183A798(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183A754((uint64_t)a2);
  }
}

void sub_10183A738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183A754(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xABu);
  return a1;
}

void sub_10183A784(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183A798(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xABu);
  return a1;
}

void sub_10183A7C8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10183A7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183A878()
{
}

void *sub_10183A88C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341818;
  result[1] = v3;
  return result;
}

uint64_t sub_10183A8D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341818;
  a2[1] = v2;
  return result;
}

void sub_10183A900(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183A908(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183A948()
{
}

void *sub_10183A954(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183A9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183AAA8(uint64_t a1, uint64_t a2)
{
  return sub_10183AC5C(a1 + 40, a2 + 40);
}

void *sub_10183AAB4(uint64_t a1)
{
  return sub_10183ADD4((void *)(a1 + 40));
}

void sub_10183AABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10183AB20(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183AB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183AB20(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183AC18(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183ABD4((uint64_t)a2);
  }
}

void sub_10183ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183ABD4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB1u);
  return a1;
}

void sub_10183AC04(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183AC18(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB1u);
  return a1;
}

void sub_10183AC48(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10183AC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183ACF8()
{
}

void *sub_10183AD0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023418D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10183AD54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023418D8;
  a2[1] = v2;
  return result;
}

void sub_10183AD80(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183AD88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183ADC8()
{
}

void *sub_10183ADD4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183AE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183AF28(uint64_t a1, uint64_t a2)
{
  return sub_10183B0DC(a1 + 40, a2 + 40);
}

void *sub_10183AF34(uint64_t a1)
{
  return sub_10183B254((void *)(a1 + 40));
}

void sub_10183AF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10183AFA0(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183AF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183AFA0(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183B098(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183B054((uint64_t)a2);
  }
}

void sub_10183B038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183B054(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x98u);
  return a1;
}

void sub_10183B084(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183B098(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x98u);
  return a1;
}

void sub_10183B0C8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10183B0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183B178()
{
}

void *sub_10183B18C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341998;
  result[1] = v3;
  return result;
}

uint64_t sub_10183B1D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341998;
  a2[1] = v2;
  return result;
}

void sub_10183B200(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183B208(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183B248()
{
}

void *sub_10183B254(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183B2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183B3A8(uint64_t a1, uint64_t a2)
{
  return sub_10183B55C(a1 + 40, a2 + 40);
}

void *sub_10183B3B4(uint64_t a1)
{
  return sub_10183B6D4((void *)(a1 + 40));
}

void sub_10183B3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10183B420(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183B40C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183B420(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183B518(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183B4D4((uint64_t)a2);
  }
}

void sub_10183B4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183B4D4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB8u);
  return a1;
}

void sub_10183B504(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183B518(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB8u);
  return a1;
}

void sub_10183B548(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10183B55C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183B5F8()
{
}

void *sub_10183B60C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341A58;
  result[1] = v3;
  return result;
}

uint64_t sub_10183B654(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341A58;
  a2[1] = v2;
  return result;
}

void sub_10183B680(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183B688(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183B6C8()
{
}

void *sub_10183B6D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183B758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183B828(uint64_t a1, uint64_t a2)
{
  return sub_10183B9DC(a1 + 40, a2 + 40);
}

void *sub_10183B834(uint64_t a1)
{
  return sub_10183BB50((void *)(a1 + 40));
}

void sub_10183B83C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10183B8A0(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183B88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183B8A0(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183B998(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183B954((uint64_t)a2);
  }
}

void sub_10183B938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183B954(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB9u);
  return a1;
}

void sub_10183B984(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183B998(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB9u);
  return a1;
}

void sub_10183B9C8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10183B9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183BA78()
{
}

void *sub_10183BA8C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341B18;
  result[1] = v3;
  return result;
}

uint64_t sub_10183BAD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341B18;
  a2[1] = v2;
  return result;
}

uint64_t sub_10183BB04(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183BB44()
{
}

void *sub_10183BB50(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183BBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t sub_10183BCA4(uint64_t a1, uint64_t a2)
{
  return sub_10183BE58(a1 + 40, a2 + 40);
}

void *sub_10183BCB0(uint64_t a1)
{
  return sub_10183BFD0((void *)(a1 + 40));
}

void sub_10183BCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10183BD1C(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183BD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183BD1C(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10183BE14(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183BDD0((uint64_t)a2);
  }
}

void sub_10183BDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10183BDD0(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xBAu);
  return a1;
}

void sub_10183BE00(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10183BE14(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xBAu);
  return a1;
}

void sub_10183BE44(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10183BE58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10183BEF4()
{
}

void *sub_10183BF08(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341BD8;
  result[1] = v3;
  return result;
}

uint64_t sub_10183BF50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341BD8;
  a2[1] = v2;
  return result;
}

void sub_10183BF7C(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183BF84(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183BFC4()
{
}

void *sub_10183BFD0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183C054(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 3536);
  if (v5)
  {
    sub_1019A5704(v5);
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
      uint64_t v7 = *(void *)(v4 + 3536);
      sub_1019A57B4(v7);
      return;
    }
LABEL_10:
    sub_10015E48C();
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    goto LABEL_10;
  }
  unsigned int v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

void sub_10183C124(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1017CA5C4(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10183C174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10183C18C()
{
}

void *sub_10183C1A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341C68;
  result[1] = v3;
  return result;
}

uint64_t sub_10183C1E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341C68;
  a2[1] = v2;
  return result;
}

void sub_10183C214(uint64_t a1, qmi::MessageBase *a2)
{
}

uint64_t sub_10183C21C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183C25C()
{
}

uint64_t sub_10183C268(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10183C300(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10183C388()
{
}

void *sub_10183C39C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_102341CE8;
  return result;
}

void sub_10183C3D4(uint64_t a1, void *a2)
{
  *a2 = off_102341CE8;
}

void sub_10183C3FC(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tt,GNSS meas RX sync pulse,state callback,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)::(anonymous class)::operator()(BOOL) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_10183C5A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183C5E8()
{
}

void sub_10183C5F8()
{
}

void *sub_10183C60C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_102341D68;
  return result;
}

void sub_10183C644(uint64_t a1, void *a2)
{
  *a2 = off_102341D68;
}

void sub_10183C66C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v2 = *(void *)(a2 + 56);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134349312;
    uint64_t v7 = v3;
    __int16 v8 = 2050;
    uint64_t v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#tt,GNSS meas RX sync pulse,data callback,mach_before,%{public}llu,mach_after,%{public}llu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)::(anonymous class)::operator()(GNSS::TimeTransferPulseTime) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_10183C830(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183C870()
{
}

uint64_t sub_10183C87C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 4)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
    else
    {
      uint64_t v9 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
  }
  return result;
}

uint64_t sub_10183C924(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 1)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
    else
    {
      uint64_t v9 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
  }
  return result;
}

uint64_t sub_10183C9CC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 6)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
    else
    {
      uint64_t v9 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
  }
  return result;
}

uint64_t sub_10183CA7C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_10183CB20((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_10183CB20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = a2;
  __int16 v6 = 0;
  v7[0] = 0;
  *(void *)((char *)v7 + 7) = 0;
  int v9 = &v8;
  if (sub_10183CBA0((_WORD ***)&v9, a3, (uint64_t)&v6) || !v8) {
    return 0;
  }
  (*(void (**)(void))(*(void *)a4 + 16))();
  return 1;
}

uint64_t sub_10183CBA0(_WORD ***a1, int a2, uint64_t a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = *a1;
    *(_WORD *)a3 = ***a1;
    uint64_t v4 = (_DWORD *)(*v3 + 2);
    void *v3 = v4;
    if (a2 >= 6)
    {
      *(_DWORD *)(a3 + 4) = *v4;
      uint64_t v5 = (_DWORD *)(*v3 + 4);
      void *v3 = v5;
      if ((a2 - 10) <= 0xFFFFFFF7)
      {
        *(_DWORD *)(a3 + 8) = *v5;
        __int16 v6 = (_DWORD *)(*v3 + 4);
        void *v3 = v6;
        if ((a2 - 6) >= 8)
        {
          *(_DWORD *)(a3 + 12) = *v6;
          int v7 = (unsigned char *)(*v3 + 4);
          void *v3 = v7;
          if (a2 != 14)
          {
            *(unsigned char *)(a3 + 16) = *v7;
            uint64_t v8 = (unsigned char *)(*v3 + 1);
            void *v3 = v8;
            if (a2 != 15)
            {
              *(unsigned char *)(a3 + 17) = *v8;
              int v9 = (unsigned char *)(*v3 + 1);
              void *v3 = v9;
              if (a2 != 16)
              {
                *(unsigned char *)(a3 + 18) = *v9;
                ++*v3;
              }
            }
          }
        }
      }
    }
  }
  return (a2 - 17);
}

void sub_10183CC7C(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  v7[0] = (std::string::value_type *)qmi::MessageBase::findTlvValue(a1);
  v7[1] = v4;
  if (v7[0])
  {
    __n128 v5 = 0uLL;
    uint64_t v6 = 0;
    if (sub_10183CD2C(v7, (int)v4, (uint64_t *)&v5)) {
      v7[0] = 0;
    }
    sub_10183D10C(a3, &v5);
    uint64_t v8 = &v5;
    sub_1000A7B4C((void ***)&v8);
    if (!v7[0])
    {
      if (*a3)
      {
        v5.n128_u64[0] = (unint64_t)(a3 + 8);
        sub_1000A7B4C((void ***)&v5);
        *a3 = 0;
      }
    }
  }
}

void sub_10183CD10(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_1000A7B4C((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10183CD2C(std::string::value_type **a1, int a2, uint64_t *a3)
{
  uint64_t v5 = (a2 - 1);
  if (a2 < 1) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = *(*a1)++;
  }
  sub_10183CDB4(a3, v6);
  int v7 = (std::string *)*a3;
  uint64_t v8 = (std::string *)a3[1];
  while (v7 != v8)
    uint64_t v5 = sub_1017CAC74((int)&v10, a1, v5, v7++);
  return v5;
}

void sub_10183CDB4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_10183CE54(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
    a1[1] = v7;
  }
}

void sub_10183CE54(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int v12 = (char *)sub_1000DA5D8(v4, v11);
    }
    else {
      int v12 = 0;
    }
    __int16 v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    __int16 v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    int v17 = &v16[v14];
    sub_10183CFBC(a1, &v15);
    sub_1001D8184((uint64_t)&v15);
  }
}

void sub_10183CFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001D8184((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10183CFBC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10183D034((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10183D034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_10183D0D4((uint64_t)v12);
  return a6;
}

uint64_t sub_10183D0D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001D813C(a1);
  }
  return a1;
}

__n128 sub_10183D10C(unsigned __int8 *a1, __n128 *a2)
{
  int v5 = *a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  if (v5)
  {
    sub_100314FE8(v4);
    __n128 result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((void *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
  }
  else
  {
    uint64_t *v4 = 0;
    v4[1] = 0;
    _DWORD v4[2] = 0;
    __n128 result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((void *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *a1 = 1;
  }
  return result;
}

uint64_t sub_10183D180(qmi::MessageBase *a1, uint64_t a2, void *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 12)
    {
      uint64_t v9 = *(unsigned int *)(result + 8);
      v12[0] = *(void *)result;
      v12[1] = v9;
      (*(void (**)(void, void *))(*a3 + 16))(*a3, v12);
      return 1;
    }
    else
    {
      long long v10 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v7);
    }
  }
  return result;
}

int *sub_10183D22C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (int *)qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    int v6 = 0;
    if (v5 < 4 || (v7 = *result, ++result, int v6 = v7, v5 != 4)) {
      uint64_t result = 0;
    }
    if (!*(unsigned char *)a3) {
      *(unsigned char *)a3 = 1;
    }
    *(_DWORD *)(a3 + 4) = v6;
    if (!result) {
      *(unsigned char *)a3 = 0;
    }
  }
  return result;
}

void sub_10183D28C()
{
}

void *sub_10183D2A0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_102341DF8;
  return result;
}

void sub_10183D2D8(uint64_t a1, void *a2)
{
  *a2 = off_102341DF8;
}

void sub_10183D300(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10183D314(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183D354()
{
}

void sub_10183D360(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)a2;
    int v5 = *((_DWORD *)a2 + 1);
    v6[0] = 68290051;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2081;
    long long v10 = "sendSetGnssEngineMonitorConfig";
    __int16 v11 = 1026;
    int v12 = v4;
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x32u);
  }
}

void sub_10183D488()
{
}

void *sub_10183D49C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341E98;
  result[1] = v3;
  return result;
}

uint64_t sub_10183D4E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341E98;
  a2[1] = v2;
  return result;
}

void sub_10183D510(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  if (!v2[1]) {
    sub_10020D700();
  }
  int v4 = *v2;

  sub_10185F020(a2, v4, (uint64_t)&stru_102341EF8);
}

uint64_t sub_10183D558(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183D598()
{
}

void sub_10183D5A4(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)a2;
    int v5 = *((_DWORD *)a2 + 1);
    v6[0] = 68290051;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2081;
    long long v10 = "sendSetWwanAntTuneL5BlankingControl";
    __int16 v11 = 1026;
    int v12 = v4;
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t v16 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"errorCode\":%{public}d, \"errorString\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x32u);
  }
}

void sub_10183D6CC()
{
}

__n128 sub_10183D6E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102341F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10183D72C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102341F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10183D75C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10183D77C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183D7BC()
{
}

void sub_10183D7C8(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)std::string buf = 67240192;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ec,sendSetNmeaConfig,nack,0x%{public}x", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::initNmeaConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ec,sendSetNmeaConfig,ack", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::initNmeaConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10183DA9C()
{
}

void *sub_10183DAB0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102341FD8;
  result[1] = v3;
  return result;
}

uint64_t sub_10183DAF8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102341FD8;
  a2[1] = v2;
  return result;
}

void sub_10183DB24(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10183DBE8;
  v3[3] = &unk_1022ACDD8;
  void v3[4] = v2;
  sub_10185A7D8(a2, 0, (uint64_t)v3);
}

uint64_t sub_10183DB9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183DBDC()
{
}

void sub_10183DBE8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v5 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)std::string buf = 67240192;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#ec,initDpoConfig,nack,0x%{public}x", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::initDpoConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_10187A1C8((uint64_t)[objc_msgSend(*(id *)(v3 + 1672), "silo") queue], (uint64_t)"dpo_config", (uint64_t)"config_fail", 0);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ec,initDpoConfig,ack", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::initDpoConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_10183DEFC()
{
}

void *sub_10183DF10(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342058;
  result[1] = v3;
  return result;
}

uint64_t sub_10183DF58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342058;
  a2[1] = v2;
  return result;
}

void sub_10183DF84(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10183DF9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183DFDC()
{
}

void sub_10183DFF0()
{
}

void *sub_10183E004(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023420F8;
  result[1] = v3;
  return result;
}

uint64_t sub_10183E04C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023420F8;
  a2[1] = v2;
  return result;
}

void sub_10183E078(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v6 = 107;
  if ((unsigned __int16)sub_100743C68() >= 0x100u)
  {
    uint64_t v6 = 235;
    uint64_t v4 = 491;
  }
  else
  {
    uint64_t v4 = 363;
  }
  if (sub_100740A24()) {
    uint64_t v6 = v4;
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10183E188;
  v5[3] = &unk_1022ACDD8;
  void v5[4] = v3;
  sub_10185830C(a2, &v6, (uint64_t)v5);
}

uint64_t sub_10183E13C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183E17C()
{
}

void sub_10183E188(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v5 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)std::string buf = 67240451;
      int v10 = v5;
      __int16 v11 = 2081;
      uint64_t v12 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#gnssmeas,sendGnssReportingConfig,nack,0x%{public}x,%{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      qmi::asString();
      __int16 v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::sendGnssMeasurementConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_10187A1C8((uint64_t)[objc_msgSend(*(id *)(v3 + 1672), "silo") queue], (uint64_t)"meas_config", (uint64_t)"config_fail", 0);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,sendGnssReportingConfig,ack", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendGnssMeasurementConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_10183E4D0()
{
}

void *sub_10183E4E4()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_102342178;
  return result;
}

void sub_10183E51C(uint64_t a1, void *a2)
{
  *a2 = off_102342178;
}

void sub_10183E544(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10183E558(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183E598()
{
}

void sub_10183E5A4(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)std::string buf = 67240451;
      int v8 = v4;
      __int16 v9 = 2081;
      uint64_t v10 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "sendXOCalibrationStateConfig,nack,0x%{public}x,%{private}s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    qmi::asString();
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::sendXOCalibrationStateConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v5);
    if (v5 == (char *)buf) {
      return;
    }
LABEL_20:
    free(v5);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "sendXOCalibrationStateConfig,ack", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendXOCalibrationStateConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      goto LABEL_20;
    }
  }
}

void sub_10183E8B0()
{
}

__n128 sub_10183E8C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_102342218;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 sub_10183E918(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102342218;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10183E950(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10183E968(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183E9A8()
{
}

void sub_10183E9B4(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)std::string buf = 67240451;
      int v8 = v4;
      __int16 v9 = 2081;
      uint64_t v10 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ec,L1RfConfig,nack,0x%{public}x,%{private}s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    qmi::asString();
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::sendL1RfConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v5);
    if (v5 == (char *)buf) {
      return;
    }
LABEL_20:
    free(v5);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#ec,L1RfConfig,ack", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::sendL1RfConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      goto LABEL_20;
    }
  }
}

void sub_10183ECC0()
{
}

__n128 sub_10183ECD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023422B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10183ED20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023422B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10183ED50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v6 = *(double *)(v5 + 504);
  unint64_t v7 = (unint64_t)((*(double *)(v5 + 76) + kCFAbsoluteTimeIntervalSince1970) * 1000.0);
  double v32 = 0.0;
  sub_10187A16C(v4 + 3200, &v32, v6);
  double v8 = v32 + 315964800.0;
  double v9 = v8 - (double)(int)sub_1004BA69C();
  if (v9 <= 315964800.0) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)(v9 * 1000.0);
  }
  if (v9 <= 315964800.0) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)(v9 * 1000.0) - v7;
  }
  if (v9 <= 315964800.0) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = (unint64_t)(v9 * 1000.0);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  __int16 v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    double v14 = sub_10016C458();
    *(_DWORD *)std::string buf = 134350080;
    double v44 = v6;
    __int16 v45 = 2050;
    double v46 = v14 - v6;
    __int16 v47 = 2050;
    unint64_t v48 = v7;
    __int16 v49 = 2050;
    unint64_t v50 = v10;
    __int16 v51 = 2050;
    unint64_t v52 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#ec,position assistance time,mct,%{public}.3f,age,%{public}.3f,from cf,%{public}llu,from mct,%{public}llu,diff,%{public}lld", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    double v29 = sub_10016C458();
    int v33 = 134350080;
    double v34 = v6;
    __int16 v35 = 2050;
    double v36 = v29 - v6;
    __int16 v37 = 2050;
    unint64_t v38 = v7;
    __int16 v39 = 2050;
    unint64_t v40 = v10;
    __int16 v41 = 2050;
    unint64_t v42 = v11;
    int v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  int v15 = *(_DWORD *)(*(void *)(a1 + 16) + 800);
  if (!sub_100D33A54(v4 + 2268)) {
    goto LABEL_30;
  }
  double v16 = sub_10016C458();
  double v17 = v16;
  double v18 = *(double *)(v4 + 4088);
  if (*(unsigned char *)(*(void *)(a1 + 16) + 816) || v15 < 3)
  {
    if (v15 < 3)
    {
      unsigned int v20 = v15;
      goto LABEL_43;
    }
    *(double *)(v4 + 4088) = v16;
LABEL_30:
    unsigned int v20 = v15;
    goto LABEL_31;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v19 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v44) = v15;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ec,cappedNonTCPRelabilityToLow,prev,%d", buf, 8u);
  }
  unsigned int v20 = 2;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v33 = 67109120;
    LODWORD(v34) = v15;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
    unsigned int v20 = 2;
  }
LABEL_43:
  if (*(double *)(v4 + 4088) != -1.0)
  {
    double v27 = v17 - v18;
    if (v27 < 1.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v28 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v44 = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#ec,ignoreLowFollowingRecentHighMid,timeSinceLastCpi,%.1f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233FB48);
        }
        int v33 = 134217984;
        double v34 = v27;
        char v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      return;
    }
  }
LABEL_31:
  if (v20 >= 5) {
    unsigned __int8 v25 = 0;
  }
  else {
    unsigned __int8 v25 = v20;
  }
  unsigned int v26 = *(_DWORD *)(*(void *)(a1 + 16) + 804);
  if (v26 >= 5) {
    LOBYTE(v26) = 0;
  }
  float v22 = *(double *)(v5 + 28);
  float v23 = *(double *)(v5 + 20);
  float v24 = *(double *)(v5 + 36);
  sub_1018598AC(a2, v12, v25, v26, 7, 9, 1, 1, *(double *)(v5 + 4), *(double *)(v5 + 12), v22, v23, v24, -1.0, -1.0, 0.0, 0x44u, 0x44u, (uint64_t)&stru_102342318);
  sub_1019274A0(v4, v5);
  if (*(unsigned char *)(v4 + 1216))
  {
    if ((*(_DWORD *)(v4 + 208) & 0x80000000) != 0)
    {
      *(_DWORD *)(v4 + 1136) = v20;
      *(void *)(v4 + 1144) = *(void *)(v5 + 20);
      *(_DWORD *)(v4 + 1152) = *(_DWORD *)(*(void *)(a1 + 16) + 820);
      *(_OWORD *)(v4 + 1200) = *(_OWORD *)(v5 + 4);
    }
    *(unsigned char *)(v4 + 1216) = 0;
  }
  if (*(_DWORD *)(v5 + 96) == 4) {
    *(unsigned char *)(v4 + 1156) = 1;
  }
}

uint64_t sub_10183F3CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183F40C()
{
}

void sub_10183F418(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,injectPositionDataError\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_10183F510()
{
}

__n128 sub_10183F524(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102342358;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10183F570(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102342358;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10183F5A0(uint64_t a1, uint64_t *a2)
{
  sub_101856FE8(a2, (unint64_t)((*(double *)(a1 + 8) + kCFAbsoluteTimeIntervalSince1970) * 1000.0), *(double *)(a1 + 16), 1, 0, (uint64_t)&stru_1023423B8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = *(double *)(a1 + 16);
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 2050;
    uint64_t v10 = v4;
    __int16 v11 = 1026;
    unsigned int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#injectTimeAssistance\", \"time\":\"%{public}f\", \"uncMs\":%{public}u}", (uint8_t *)v6, 0x22u);
  }
}

uint64_t sub_10183F6E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183F724()
{
}

void sub_10183F730(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int16 v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,injectTimeAssistanceError\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_10183F828()
{
}

unsigned char *sub_10183F83C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_1023423F8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_10183F888(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1023423F8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_10183F8B8(uint64_t a1, uint64_t *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10183F97C;
  void v4[3] = &unk_10233D190;
  char v5 = v3;
  sub_10185867C(a2, v3, (uint64_t)v4);
}

uint64_t sub_10183F930(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10183F970()
{
}

void sub_10183F97C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(unsigned __int8 *)(a1 + 32);
      int v6 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)std::string buf = 67240707;
      int v11 = v5;
      __int16 v12 = 1026;
      int v13 = v6;
      __int16 v14 = 2081;
      uint64_t v15 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ec,multiband mode,%{public}d,nack,0x%{public}x,%{private}s", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      qmi::asString();
      __int16 v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::setRfBandEnable(BOOL, BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n");
LABEL_19:
      if (v7 != buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)std::string buf = 67240192;
      int v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ec,multiband mode,%{public}d,ack", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::setRfBandEnable(BOOL, BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10183FCC8()
{
}

void *sub_10183FCDC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342478;
  result[1] = v3;
  return result;
}

uint64_t sub_10183FD24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342478;
  a2[1] = v2;
  return result;
}

void sub_10183FD50(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10183FD74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183FDB4()
{
}

void sub_10183FDC8()
{
}

void *sub_10183FDDC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342518;
  result[1] = v3;
  return result;
}

uint64_t sub_10183FE24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342518;
  a2[1] = v2;
  return result;
}

void sub_10183FE50(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  double v3 = v2[4];
  double v4 = v2[3];
  float v5 = sqrt(v3 * v3 + v4 * v4) / 2.45;
  *(float *)&double v4 = v4;
  float v6 = v3;
  float v7 = v2[5];
  sub_1018598AC(a2, (unint64_t)((*v2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0), 3, 0, 7, 9, 0, 0, v2[1], v2[2], 0.0, v5, 3000.0, *(float *)&v4, v6, v7, 0x5Fu, 0x44u, (uint64_t)&stru_102342578);
}

uint64_t sub_10183FF08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10183FF48()
{
}

void sub_10183FF54(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *((_DWORD *)a2 + 1);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    float v7 = "";
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#mmp injectMapMatchedPosition\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_101840044()
{
}

void *sub_101840058(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023425B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1018400A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023425B8;
  a2[1] = v2;
  return result;
}

void sub_1018400CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_10185B1BC(a2, *(_DWORD *)v2, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), *(unsigned __int16 *)(v2 + 16), *(unsigned __int16 *)(v2 + 18), (uint64_t)&stru_102342618, *(float *)(v2 + 12));
}

uint64_t sub_1018400F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101840138()
{
}

void sub_10184014C()
{
}

unsigned char *sub_101840160(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_102342658;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1018401AC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_102342658;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_1018401DC(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ec,airborne,enter", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::feedAirborneActivity(BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v4 = 4;
    float v5 = 100.0;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ec,airborne,exit", buf, 2u);
    }
    float v5 = 0.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::feedAirborneActivity(BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    int v4 = 0;
  }
  sub_10185B1BC(a2, 0, v4, 0, 0, 0xFFFF, (uint64_t)&stru_1023426B8, v5);
}

uint64_t sub_1018404E0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101840520()
{
}

void sub_10184052C(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)std::string buf = 67240192;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ec,airborne,nack,0x%{public}x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_16:
        __int16 v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::feedAirborneActivity(BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return;
      }
LABEL_18:
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    float v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ec,airborne,ack", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
}

void sub_1018407B8()
{
}

void *sub_1018407CC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023426F8;
  result[1] = v3;
  return result;
}

uint64_t sub_101840814(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023426F8;
  a2[1] = v2;
  return result;
}

float sub_101840840(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  uint64_t v3 = vcvtad_u64_f64((*v2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0);
  double v4 = 0.001;
  if (v2[3] * 1.95996398 >= 0.001) {
    double v4 = v2[3] * 1.95996398;
  }
  float v5 = v4;
  float v6 = v2[2];
  sub_1018591F4(a2, 0, v3, (uint64_t)&stru_102342758, v6, v5);
  return result;
}

uint64_t sub_1018408A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018408E4()
{
}

void sub_1018408F8()
{
}

void *sub_10184090C(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342798;
  result[1] = v3;
  return result;
}

uint64_t sub_101840954(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342798;
  a2[1] = v2;
  return result;
}

float sub_101840980(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  float v3 = v2[3];
  float v4 = v2[4];
  sub_101859534(a2, 0, vcvtad_u64_f64((*v2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0), vcvtad_u64_f64(v2[2] * 1000.0), (uint64_t)&stru_1023427F8, v3, v4);
  return result;
}

uint64_t sub_1018409D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101840A14()
{
}

void sub_101840A28()
{
}

void *sub_101840A3C(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342838;
  result[1] = v3;
  return result;
}

uint64_t sub_101840A84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342838;
  a2[1] = v2;
  return result;
}

void sub_101840AB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  id v4 = [objc_msgSend(*(id *)(v3 + 1672), "silo") queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_101840B8C;
  v5[3] = &unk_1023428A0;
  void v5[4] = v4;
  void v5[5] = v3;
  sub_1018579C0(a2, 1, (uint64_t)v5);
}

uint64_t sub_101840B40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101840B80()
{
}

void sub_101840B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a2 + 4))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)std::string buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 1026;
      int v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt failed to enter time transfer\", \"error\":%{public}d}", buf, 0x18u);
    }
    sub_101926FE8(v2, 0);
  }
  else
  {
    float v6 = *(NSObject **)(v2 + 2032);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_101840CF8;
    v7[3] = &unk_1022A56E0;
    void v7[4] = *(void *)(a1 + 32);
    void v7[5] = v2;
    dispatch_async(v6, v7);
  }
}

void sub_101840CF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  Controller = (const void *)TelephonyBasebandCreateController();
  sub_101824858((const void **)(v2 + 2024), Controller);
  if (!*(void *)(v2 + 2024))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#tt, Could not get reference to baseband!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v8 = 0;
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::startTimeTransfer(TimeTransferStateCallback, TimeTransferCallback)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    int v5 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101840F0C;
    block[3] = &unk_1022A3020;
    void block[4] = v2;
    dispatch_async(v5, block);
  }
}

void sub_101840F0C(uint64_t a1)
{
}

void sub_101840F1C()
{
}

void *sub_101840F30()
{
  float result = operator new(0x10uLL);
  void *result = off_1023428E0;
  return result;
}

void sub_101840F68(uint64_t a1, void *a2)
{
  *a2 = off_1023428E0;
}

void sub_101840F90(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_101840FA4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101840FE4()
{
}

void sub_101840FF0(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      float v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt failed to exit timetransfer\", \"error\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_1018410E8()
{
}

void *sub_1018410FC(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342980;
  result[1] = v3;
  return result;
}

uint64_t sub_101841144(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342980;
  a2[1] = v2;
  return result;
}

void sub_101841170(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_101841188(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018411C8()
{
}

void sub_1018411D4(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      float v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt, failed to send client pulse time\", \"error\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_1018412CC()
{
}

__n128 sub_1018412E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_102342A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_101841334(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102342A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10184136C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  double v5 = *(double *)(v4 + 76);
  double v6 = *(double *)(v4 + 536);
  double v7 = **(double **)(a1 + 24);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  double v8 = v6 + v7;
  int v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = (int)**(double **)(a1 + 24);
    *(_DWORD *)std::string buf = 68291075;
    int v22 = 0;
    __int16 v23 = 2082;
    float v24 = "";
    __int16 v25 = 1040;
    int v26 = 800;
    __int16 v27 = 2097;
    uint64_t v28 = v10;
    __int16 v29 = 1026;
    int v30 = 1;
    __int16 v31 = 1026;
    int v32 = 9;
    __int16 v33 = 1026;
    int v34 = 2;
    __int16 v35 = 1026;
    int v36 = 2;
    __int16 v37 = 1026;
    int v38 = v11;
    __int16 v39 = 1025;
    int v40 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss feeding DEM assistance location\", \"location\":%{private, location:CLClientLocation}.*P, \"posSrc\":%{public}d, \"altSrc\":%{public}d, \"altLinkage\":%{public}d, \"altUncCov\":%{public}d, \"undulation parameter\":%{public}d, \"ellipsoidal altitide\":%{private}d}", buf, 0x46u);
  }
  __int16 v12 = *(double **)(a1 + 16);
  double v13 = *(double *)((char *)v12 + 4);
  double v14 = *(double *)((char *)v12 + 12);
  double v15 = *(double *)((char *)v12 + 20);
  double v16 = v12[68];
  unsigned int v17 = **(_DWORD **)(a1 + 8);
  if (v17 >= 5) {
    LOBYTE(v17) = 0;
  }
  float v18 = v16;
  float v19 = v15;
  float v20 = v8;
  sub_1018598AC(a2, (unint64_t)((v5 + kCFAbsoluteTimeIntervalSince1970) * 1000.0), 0, v17, 1, 9, 2, 2, v13, v14, v20, v19, v18, -1.0, -1.0, 0.0, 0x44u, 0x44u, (uint64_t)&stru_102342A80);
}

uint64_t sub_101841574(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018415B4()
{
}

uint64_t sub_1018415C4(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_101841668((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_101841668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  std::string __p = 0;
  uint64_t v8 = 0;
  if (sub_101841718(&v10, a3, (unint64_t *)&__p))
  {
    uint64_t v5 = 0;
    uint64_t v10 = 0;
  }
  else if (v10)
  {
    (*(void (**)(void))(*(void *)a4 + 16))();
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1018416F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101841718(void *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = a2;
  if ((int)a2 >= 1)
  {
    do
    {
      uint64_t v7 = (unsigned char *)a3[1];
      unint64_t v6 = a3[2];
      if ((unint64_t)v7 >= v6)
      {
        unint64_t v9 = *a3;
        uint64_t v10 = &v7[-*a3];
        unint64_t v11 = (unint64_t)(v10 + 1);
        if ((uint64_t)(v10 + 1) < 0) {
          sub_1001D7FD4();
        }
        unint64_t v12 = v6 - v9;
        if (2 * v12 > v11) {
          unint64_t v11 = 2 * v12;
        }
        if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v13 = v11;
        }
        if (v13) {
          double v14 = (char *)operator new(v13);
        }
        else {
          double v14 = 0;
        }
        double v15 = &v10[(void)v14];
        double v16 = &v10[(void)v14];
        *double v16 = 0;
        uint64_t v8 = v16 + 1;
        if (v7 != (unsigned char *)v9)
        {
          unsigned int v17 = &v7[~v9];
          do
          {
            char v18 = *--v7;
            (v17--)[(void)v14] = v18;
          }
          while (v7 != (unsigned char *)v9);
          uint64_t v7 = (unsigned char *)*a3;
          double v15 = v14;
        }
        *a3 = (unint64_t)v15;
        a3[1] = (unint64_t)v8;
        a3[2] = (unint64_t)&v14[v13];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *uint64_t v7 = 0;
        uint64_t v8 = v7 + 1;
      }
      a3[1] = (unint64_t)v8;
      *(v8 - 1) = *(unsigned char *)(*a1)++;
      BOOL v19 = __OFSUB__(v3, 1);
      LODWORD(v3) = v3 - 1;
    }
    while (!(((int)v3 < 0) ^ v19 | (v3 == 0)));
    return 0;
  }
  return v3;
}

uint64_t sub_101841848(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_1018418EC((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_1018418EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  v7[0] = 0;
  std::string __p = 0;
  uint64_t v9 = 0;
  unint64_t v12 = (std::string::value_type **)&v11;
  if (sub_1018419A8(&v12, a3, (uint64_t)v7))
  {
    uint64_t v5 = 0;
    uint64_t v11 = 0;
  }
  else if (v11)
  {
    (*(void (**)(void))(*(void *)a4 + 16))();
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  return v5;
}

void sub_101841988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018419A8(std::string::value_type ***a1, int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  BOOL v5 = __OFSUB__(a2, 1);
  int v6 = a2 - 1;
  if (v6 < 0 == v5) {
    *(unsigned char *)a3 = *(*v4)++;
  }
  return sub_1017CAC74((int)&v8, v4, v6, (std::string *)(a3 + 8));
}

uint64_t sub_1018419FC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 == 1)
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
    else
    {
      uint64_t v9 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
  }
  return result;
}

uint64_t sub_101841AA4(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 < 2)
    {
      uint64_t v9 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
    else
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
  }
  return result;
}

uint64_t sub_101841B4C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_101841BF0((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_101841BF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  int v7 = 0;
  char v8 = 0;
  std::string __p = 0;
  uint64_t v10 = 0;
  size_t v13 = &v12;
  if (sub_101841CB0((_DWORD ***)&v13, a3, (uint64_t)&v7))
  {
    uint64_t v5 = 0;
    uint64_t v12 = 0;
  }
  else if (v12)
  {
    (*(void (**)(void))(*(void *)a4 + 16))();
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_101841C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101841CB0(_DWORD ***a1, int a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (a2 >= 4)
  {
    *(_DWORD *)a3 = **v3;
    uint64_t v4 = *v3 + 1;
    NSObject *v3 = v4;
    if (a2 != 4)
    {
      *(unsigned char *)(a3 + 4) = *v4;
      NSObject *v3 = (_DWORD *)((char *)*v3 + 1);
    }
  }
  return sub_101841CFC(v3, a2 - 5, (uint64_t *)(a3 + 8));
}

uint64_t sub_101841CFC(_DWORD **a1, int a2, uint64_t *a3)
{
  int v9 = a1;
  uint64_t v4 = (a2 - 1);
  if (a2 < 1)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)*a1;
    *a1 = (_DWORD *)((char *)*a1 + 1);
  }
  sub_101841D80((uint64_t)a3, v5);
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    uint64_t v4 = sub_101841DBC(&v9, v4, v6);
    v6 += 20;
  }
  return v4;
}

void sub_101841D80(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_101841F20((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 20 * a2;
  }
}

uint64_t sub_101841DBC(_DWORD ***a1, int a2, uint64_t a3)
{
  if (a2 <= 3)
  {
    int v5 = a2 - 5;
  }
  else
  {
    BOOL v3 = *a1;
    *(_DWORD *)a3 = ***a1;
    unint64_t v4 = (unsigned char *)(*v3 + 4);
    void *v3 = v4;
    if (a2 == 4)
    {
      int v5 = -1;
    }
    else
    {
      *(unsigned char *)(a3 + 4) = *v4;
      uint64_t v7 = (unsigned char *)(*v3 + 1);
      void *v3 = v7;
      if (a2 < 6)
      {
        int v5 = 0;
      }
      else
      {
        int v5 = a2 - 5;
        *(unsigned char *)(a3 + 5) = *v7;
        char v8 = (unsigned char *)(*v3 + 1);
        void *v3 = v8;
        if (a2 != 6)
        {
          *(unsigned char *)(a3 + 6) = *v8;
          int v9 = (unsigned char *)(*v3 + 1);
          void *v3 = v9;
          if (a2 != 7)
          {
            *(unsigned char *)(a3 + 7) = *v9;
            uint64_t v10 = (unsigned char *)(*v3 + 1);
            void *v3 = v10;
            if (a2 == 8)
            {
              int v5 = 3;
            }
            else
            {
              *(unsigned char *)(a3 + 8) = *v10;
              uint64_t v11 = (unsigned char *)(*v3 + 1);
              void *v3 = v11;
              if (a2 == 9)
              {
                int v5 = 4;
              }
              else
              {
                *(unsigned char *)(a3 + 9) = *v11;
                uint64_t v12 = (_DWORD *)(*v3 + 1);
                void *v3 = v12;
                if ((a2 - 14) <= 0xFFFFFFFA)
                {
                  *(_DWORD *)(a3 + 12) = *v12;
                  size_t v13 = (_WORD *)(*v3 + 4);
                  void *v3 = v13;
                  if ((a2 - 10) >= 6)
                  {
                    *(_WORD *)(a3 + 16) = *v13;
                    double v14 = (_WORD *)(*v3 + 2);
                    void *v3 = v14;
                    if (((a2 - 10) & 0xFFFFFFFC) != 4)
                    {
                      *(_WORD *)(a3 + 18) = *v14;
                      *v3 += 2;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return (v5 - 13);
}

void sub_101841F20(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = &v7[20 * a2];
      do
      {
        *((_WORD *)v7 + 4) = 0;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 12) = 0;
        v7 += 20;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_10027E440(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    double v14 = &v12[20 * v8];
    double v15 = &v14[20 * a2];
    double v16 = v14;
    do
    {
      *((_WORD *)v16 + 4) = 0;
      *(void *)double v16 = 0;
      *(void *)(v16 + 12) = 0;
      v16 += 20;
    }
    while (v16 != v15);
    unsigned int v17 = &v12[20 * v11];
    BOOL v19 = (char *)*a1;
    char v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v20;
        v14 -= 20;
        v18 -= 20;
      }
      while (v18 != v19);
      char v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t sub_101842094(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_101842138((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_101842138(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v10 = a2;
  __int16 v6 = 0;
  int v7 = 0;
  __int16 v8 = 0;
  int v9 = 0;
  uint64_t v11 = &v10;
  if (sub_1018421BC((unsigned char ***)&v11, a3, (uint64_t)&v6) || !v10) {
    return 0;
  }
  (*(void (**)(void))(*(void *)a4 + 16))();
  return 1;
}

uint64_t sub_1018421BC(unsigned char ***a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  BOOL v3 = *a1;
  *(unsigned char *)a3 = ***a1;
  uint64_t v4 = (*v3)++;
  if (a2 == 1) {
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(v4 + 1);
  int v5 = (_DWORD *)(v4 + 2);
  void *v3 = v5;
  if ((a2 - 6) > 0xFFFFFFFA) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a3 + 4) = *v5;
  __int16 v6 = (_WORD *)(*v3 + 4);
  void *v3 = v6;
  if ((a2 - 8) > 0xFFFFFFF9) {
    return 0xFFFFFFFFLL;
  }
  *(_WORD *)(a3 + 8) = *v6;
  int v7 = (_DWORD *)(*v3 + 2);
  void *v3 = v7;
  if ((a2 - 12) > 0xFFFFFFF9) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)(a3 + 12) = *v7;
  *v3 += (a2 - 12) + 4;
  return result;
}

uint64_t sub_10184226C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (sub_101842310((uint64_t)a1, result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t sub_101842310(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  long long v8 = 0uLL;
  uint64_t v6 = a2;
  int v7 = &v6;
  if (sub_10184238C((_DWORD ***)&v7, a3, &v8) || !v6) {
    return 0;
  }
  (*(void (**)(void))(*(void *)a4 + 16))();
  return 1;
}

uint64_t sub_10184238C(_DWORD ***a1, int a2, _DWORD *a3)
{
  if (a2 < 4) {
    return (a2 - 16);
  }
  BOOL v3 = *a1;
  *a3 = ***a1;
  uint64_t v4 = (_DWORD *)(*v3 + 4);
  void *v3 = v4;
  if (a2 < 8) {
    return (a2 - 16);
  }
  a3[1] = *v4;
  int v5 = (_DWORD *)(*v3 + 4);
  void *v3 = v5;
  if ((a2 - 12) >= 0xFFFFFFF8) {
    return (a2 - 16);
  }
  a3[2] = *v5;
  uint64_t v6 = (_DWORD *)(*v3 + 4);
  void *v3 = v6;
  uint64_t result = (a2 - 16);
  if ((a2 - 16) <= 0xFFFFFFF7)
  {
    a3[3] = *v6;
    *v3 += 4;
  }
  return result;
}

uint64_t sub_101842418(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    if (v7 < 4)
    {
      int v9 = qmi::MessageBase::sParsingErrorHandler;
      uint64_t v10 = *(unsigned __int16 *)a1;
      return v9(v10, a2, v8, v7);
    }
    else
    {
      (*(void (**)(void))(*(void *)a3 + 16))();
      return 1;
    }
  }
  return result;
}

void sub_1018424C4()
{
}

void *sub_1018424D8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_102342AC0;
  return result;
}

void sub_101842510(uint64_t a1, void *a2)
{
  *a2 = off_102342AC0;
}

void sub_101842538(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  BOOL v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tt,sim mode pulse,state,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)::(anonymous class)::operator()(BOOL) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_1018426E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101842724()
{
}

void sub_101842734()
{
}

void *sub_101842748()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_102342B40;
  return result;
}

void sub_101842780(uint64_t a1, void *a2)
{
  *a2 = off_102342B40;
}

void sub_1018427A8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  BOOL v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a2 + 48);
    uint64_t v5 = *(void *)(a2 + 56);
    *(_DWORD *)std::string buf = 134349312;
    uint64_t v8 = v4;
    __int16 v9 = 2050;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tt,sim mode pulse,data,mach_before,%{public}llu,mach_after,%{public}llu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)::(anonymous class)::operator()(const GNSS::TimeTransferPulseTime &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

uint64_t sub_101842974(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018429B4()
{
}

void sub_1018429C4()
{
}

__n128 sub_1018429D8(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = off_102342BC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101842A24(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102342BC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101842A54(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_101842A78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101842AB8()
{
}

void sub_101842AC4(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    BOOL v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      int v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, time sync failed to sync time\", \"error\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_101842BBC()
{
}

void *sub_101842BD0()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_102342C60;
  return result;
}

void sub_101842C08(uint64_t a1, void *a2)
{
  *a2 = off_102342C60;
}

void sub_101842C30(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_101842C44(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101842C84()
{
}

void sub_101842C98()
{
}

void *sub_101842CAC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342D00;
  result[1] = v3;
  return result;
}

uint64_t sub_101842CF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342D00;
  a2[1] = v2;
  return result;
}

void sub_101842D20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101842DE4;
  v3[3] = &unk_1022ACDD8;
  void v3[4] = v2;
  sub_101855738(a2, (uint64_t)v3);
}

uint64_t sub_101842D98(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101842DD8()
{
}

void sub_101842DE4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *((_DWORD *)a2 + 1);
  if (*(unsigned char *)(v2 + 2016))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 1026;
      int v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
    }
    if (v3)
    {
      sub_10182A684(v2, "locationd,concurrencyCheckResponseFailed");
      return;
    }
    LOBYTE(v8) = 0;
    sub_101842FDC(a2, 1, (uint64_t)&v8);
    if (!(_BYTE)v8)
    {
      int v7 = "locationd,concurrencyCheckParseError";
LABEL_17:
      sub_10182A684(v2, v7);
      return;
    }
    int v7 = "locationd,concurrencyCheckStateError";
    if (!BYTE1(v8) || BYTE2(v8) != 2) {
      goto LABEL_17;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 1026;
      int v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,spurious,received after we stopped\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
    }
  }
}

unsigned __int8 *sub_101842FDC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 1)
  {
    __int16 v7 = 0;
    __int16 v6 = 0;
    goto LABEL_8;
  }
  __int16 v6 = *result;
  if (v5 == 1)
  {
    __int16 v7 = 0;
LABEL_8:
    int v8 = 0;
    goto LABEL_9;
  }
  __int16 v7 = result[1];
  if (v5 != 2) {
    goto LABEL_8;
  }
  int v8 = result + 2;
LABEL_9:
  __int16 v9 = v6 | (v7 << 8);
  if (!*(unsigned char *)a3) {
    *(unsigned char *)a3 = 1;
  }
  *(_WORD *)(a3 + 1) = v9;
  if (!v8) {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

void sub_101843068()
{
}

void *sub_10184307C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342D80;
  result[1] = v3;
  return result;
}

uint64_t sub_1018430C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342D80;
  a2[1] = v2;
  return result;
}

void sub_1018430F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1018431B4;
  v3[3] = &unk_1022ACDD8;
  void v3[4] = v2;
  sub_101855738(a2, (uint64_t)v3);
}

uint64_t sub_101843168(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018431A8()
{
}

void sub_1018431B4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *((_DWORD *)a2 + 1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 68289282;
    int v9 = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 1026;
    int v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,response\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
  }
  *(_DWORD *)(v3 + 2260) = 0;
  if (*(unsigned char *)(v3 + 2016))
  {
    if (v4)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      __int16 v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 68289282;
        int v9 = 0;
        __int16 v10 = 2082;
        uint64_t v11 = "";
        __int16 v12 = 1026;
        int v13 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,error response\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
      }
      sub_10182DC90(v3, "locationd,errorResponse");
    }
    else
    {
      LOBYTE(v8) = 0;
      sub_101842FDC(a2, 1, (uint64_t)&v8);
      if ((_BYTE)v8) {
        sub_10182DE94(v3, BYTE1(v8), BYTE2(v8));
      }
      else {
        sub_10182DC90(v3, "locationd,decodeFailed");
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 1026;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,spurious,received after we stopped\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
    }
  }
}

void sub_10184343C()
{
}

void *sub_101843450(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102342E00;
  result[1] = v3;
  return result;
}

uint64_t sub_101843498(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102342E00;
  a2[1] = v2;
  return result;
}

void sub_1018434C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v3 + 2016) && !sub_100D33A54(v3 + 2268)) {
    sub_10181446C(v3);
  }
  sub_10185632C(a2, (uint64_t)&stru_102342E60);
  if (!*(unsigned char *)(v3 + 2016) && !sub_100D33A54(v3 + 2268))
  {
    sub_101814948(v3);
  }
}

uint64_t sub_101843548(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101843588()
{
}

void sub_101843594(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)std::string buf = 67240192;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ee,force BB to request,nack,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaController::forceBbToRequestXtra()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ee,force BB to request,ack", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaController::forceBbToRequestXtra()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

uint64_t *sub_101843864(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (uint64_t *)qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = 0;
    if (v5 < 8 || (v7 = *result, ++result, uint64_t v6 = v7, v5 != 8)) {
      __n128 result = 0;
    }
    if (!*(unsigned char *)a3) {
      *(unsigned char *)a3 = 1;
    }
    *(void *)(a3 + 8) = v6;
    if (!result) {
      *(unsigned char *)a3 = 0;
    }
  }
  return result;
}

unsigned __int8 *sub_1018438C0(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 1)
  {
    int v6 = 0;
  }
  else
  {
    int v7 = *result++;
    int v6 = v7;
    if (v5 == 1) {
      goto LABEL_7;
    }
  }
  __n128 result = 0;
LABEL_7:
  if (!*(unsigned char *)a3) {
    *(unsigned char *)a3 = 1;
  }
  *(_DWORD *)(a3 + 4) = v6;
  if (!result) {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

unsigned __int8 *sub_101843924(qmi::MessageBase *a1, uint64_t a2, char *a3)
{
  __n128 result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 1)
  {
    int v7 = 0;
    unsigned int v6 = 0;
    goto LABEL_6;
  }
  unsigned int v6 = *result;
  if (v5 == 1)
  {
    int v7 = 0;
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = result[1];
  if (v5 == 2)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = result[2];
    if (v5 == 3)
    {
      char v9 = 1;
      goto LABEL_8;
    }
  }
LABEL_7:
  char v9 = 0;
LABEL_8:
  int v10 = *a3;
  *(void *)(a3 + 4) = v6 | (unint64_t)(v8 << 32);
  *((_DWORD *)a3 + 3) = v7;
  if (!v10 || (v9 & 1) == 0) {
    *a3 = v9;
  }
  return result;
}

int *sub_1018439C0(qmi::MessageBase *a1, uint64_t a2, char *a3)
{
  __n128 result = (int *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  int v6 = 0;
  if (v5 < 4)
  {
    int v7 = 0;
    goto LABEL_8;
  }
  int v7 = *result;
  if (v5 < 8)
  {
LABEL_8:
    int v8 = 0;
LABEL_9:
    char v9 = 0;
    goto LABEL_10;
  }
  int v8 = result[1];
  if ((v5 - 12) > 0xFFFFFFF7) {
    goto LABEL_9;
  }
  int v6 = result[2];
  if (v5 != 12) {
    goto LABEL_9;
  }
  char v9 = 1;
LABEL_10:
  int v10 = *a3;
  *((_DWORD *)a3 + 1) = v7;
  *((_DWORD *)a3 + 2) = v8;
  *((_DWORD *)a3 + 3) = v6;
  if (!v10 || (v9 & 1) == 0) {
    *a3 = v9;
  }
  return result;
}

__int16 *sub_101843A44(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (__int16 *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 2)
  {
    __int16 v6 = 0;
  }
  else
  {
    __int16 v7 = *result++;
    __int16 v6 = v7;
    if (v5 == 2) {
      goto LABEL_7;
    }
  }
  __n128 result = 0;
LABEL_7:
  if (!*(unsigned char *)a3) {
    *(unsigned char *)a3 = 1;
  }
  *(_WORD *)(a3 + 2) = v6;
  if (!result) {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

void sub_101843AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v27, "{\"msg%{public}.0s\":\"assert because of Control plane\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v24, v28, v29, "assert because of Control plane", "{\"msg%{public}.0s\":\"assert because of Control plane\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233FB48);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v24, v30, "{\"msg%{public}.0s\":\"assert because of Control plane\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101843C8C: call analysis failed (funcsize=71)"

#error "101843DE8: call analysis failed (funcsize=71)"

#error "101843F44: call analysis failed (funcsize=71)"

#error "1018440A0: call analysis failed (funcsize=71)"

#error "1018441FC: call analysis failed (funcsize=71)"

#error "101844358: call analysis failed (funcsize=71)"

#error "1018444B4: call analysis failed (funcsize=71)"

void sub_10184459C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v29;
  a28 = v30;
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_100219D40((void *)&_mh_execute_header, v28, v31, "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    if (sub_100857BC4())
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v28, v32, v33, "Invalid sim instance index", "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_100219D28((void *)&_mh_execute_header, v28, v34, "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
}

void sub_10184471C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v29;
  a28 = v30;
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_100219D40((void *)&_mh_execute_header, v28, v31, "{\"msg%{public}.0s\":\"null telephony handle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    if (sub_100857BC4())
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v28, v32, v33, "null telephony handle", "{\"msg%{public}.0s\":\"null telephony handle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_100219D28((void *)&_mh_execute_header, v28, v34, "{\"msg%{public}.0s\":\"null telephony handle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
}

void sub_10184489C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v29;
  a28 = v30;
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_100219D40((void *)&_mh_execute_header, v28, v31, "{\"msg%{public}.0s\":\"null gnss queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    if (sub_100857BC4())
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v28, v32, v33, "null gnss queue", "{\"msg%{public}.0s\":\"null gnss queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233FB48);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_100219D28((void *)&_mh_execute_header, v28, v34, "{\"msg%{public}.0s\":\"null gnss queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_10233FB48);
  }
}

void sub_101844A1C(uint64_t a1)
{
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*(void **)(a1 + 1152));
  }
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  if (*(char *)(a1 + 983) < 0) {
    operator delete(*(void **)(a1 + 960));
  }
}

void sub_101844A6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101844AEC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_101844B7C(_Unwind_Exception *a1)
{
}

void sub_101844B94()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_101844C4C(_Unwind_Exception *a1)
{
}

void sub_101844C64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_101844D0C(_Unwind_Exception *a1)
{
}

void sub_101844D24()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E3A394;
      v0[3] = unk_101E3A3A4;
      v0[4] = xmmword_101E3A3B4;
      v0[0] = xmmword_101E3A374;
      v0[1] = unk_101E3A384;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101844E04(_Unwind_Exception *a1)
{
}

char *sub_101844E1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)sub_1000A6958();

  return sub_1000A5670(v2, a1);
}

uint64_t sub_101844E54(uint64_t a1, uint64_t a2)
{
  if (*(void *)(sub_101845104(a1, a2) + 24))
  {
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_10184519C(qword_1024193D0 == -1);
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102342E90);
LABEL_3:
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssInterference, CLLTEBand13Handler construction", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102342E90);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLTEBand13Handler::CLLTEBand13Handler(CLLTEBand13HandlerCallBack)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return a1;
}

void sub_10184502C(_Unwind_Exception *a1)
{
  sub_10085294C(v1);
  _Unwind_Resume(a1);
}

void *sub_101845050(void *a1)
{
  sub_1000CF130((uint64_t)a1, 0, 1);

  return sub_10085294C(a1);
}

uint64_t sub_101845094(uint64_t a1)
{
  return sub_1000CF130(a1, 0, 1);
}

uint64_t sub_1018450A4(uint64_t a1, float a2)
{
  char v2 = (float)(unk_102479E90 + *(float *)&dword_102479E8C) >= a2
    && (float)(*(float *)&dword_102479E88 - unk_102479E90) <= a2;
  return sub_1000CF130(a1, v2, 0);
}

void sub_1018450D4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101845104(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10184519C(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193D0, &stru_102342E90);
  }
  uint64_t v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102342E90);
    }
  }
  char v2 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102342E90);
    }
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

unsigned int sub_10184535C(unint64_t *a1)
{
  return vcvtmd_u64_f64((double)*a1 / 1000000000.0 / 604800.0);
}

double sub_101845384(unint64_t *a1)
{
  return fmod((double)*a1 / 1000000000.0, 604800.0);
}

void *sub_1018453A4(void *a1, NSObject **a2, void (*a3)(unsigned int, const char *))
{
  *a1 = 0;
  a1[1] = 0;
  Ari::LogConfig((Ari *)0x1FF, sub_10184546C, a3);
  int v5 = *a2;
  a1[2] = *a2;
  object = v5;
  ice::Client::create();
  __int16 v6 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v9;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  return a1;
}

void sub_101845440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  __int16 v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10184546C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102342F68);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102342F68);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLIceClientProxy::CLIceClientProxy(const CLIceController &)::LocationdLogRedirect::clLog(unsigned int, const char *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_10184561C(void *a1, uint64_t a2)
{
  if (*a1)
  {
    uint64_t v2 = *(void *)(a2 + 24);
    if (!v2) {
      sub_10015E48C();
    }
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 48);
    v3();
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102342F68);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "ICE client is not created", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102342F68);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceClientProxy::executeIfCreated(std::function<void ()>)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void *sub_101845814(void *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_101845914;
  v3[3] = &unk_102342EB0;
  int v5 = 0;
  void v3[4] = a1;
  v4[0] = off_102342F98;
  v4[1] = _Block_copy(v3);
  int v5 = v4;
  sub_10184561C(a1, (uint64_t)v4);
  return sub_10068280C(v4);
}

void sub_1018458F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10068280C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101845914(uint64_t a1)
{
  uint64_t v1 = *(ice::Client ***)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102342F68);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Starting ICE client", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102342F68);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceClientProxy::start()_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return ice::Client::start(*v1);
}

void *sub_101845AB0(void *a1, int a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_101845BB8;
  v5[3] = &unk_102342ED8;
  int v6 = a2;
  void v5[4] = a3;
  void v5[5] = a1;
  int v8 = 0;
  v7[0] = off_102342F98;
  v7[1] = _Block_copy(v5);
  int v8 = v7;
  sub_10184561C(a1, (uint64_t)v7);
  return sub_10068280C(v7);
}

void sub_101845B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10068280C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101845BB8(uint64_t a1)
{
}

void sub_101845BD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1018461B8(*a3, &aBlock);
  uint64_t v3 = aBlock;
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  int v4 = v3;
  ice::Client::regEventHandlerInternal();
  if (v4) {
    _Block_release(v4);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_101845C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101845C78(void *a1, int a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_101845D80;
  v5[3] = &unk_102342F00;
  int v6 = a2;
  void v5[4] = a3;
  void v5[5] = a1;
  int v8 = 0;
  v7[0] = off_102342F98;
  v7[1] = _Block_copy(v5);
  int v8 = v7;
  sub_10184561C(a1, (uint64_t)v7);
  return sub_10068280C(v7);
}

void sub_101845D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10068280C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101845D80(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  sub_101845DD0(*v2, *(unsigned int *)(a1 + 48), (uint64_t *)(a1 + 32));
  uint64_t v3 = (ice::Client *)*v2;
  unsigned int v4 = *(_DWORD *)(a1 + 48);

  return ice::Client::setIndShouldWake(v3, v4, 1);
}

void sub_101845DD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101846260(*a3, &v4);
  aBlocuint64_t k = v4;
  unsigned int v4 = 0;
  ice::Client::regIndicationInternal();
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void sub_101845E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101845E6C(void *a1, uint64_t a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_101845F74;
  v5[3] = &unk_102342F28;
  void v5[5] = a1;
  void v5[6] = a2;
  void v5[4] = a3;
  __int16 v7 = 0;
  v6[0] = off_102342F98;
  v6[1] = _Block_copy(v5);
  __int16 v7 = v6;
  sub_10184561C(a1, (uint64_t)v6);
  return sub_10068280C(v6);
}

void sub_101845F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10068280C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101845F74(uint64_t a1)
{
  sub_101845FB0(**(void **)(a1 + 40), *(void *)(a1 + 48), (uint64_t *)(a1 + 32));
  ice::SendProxy::~SendProxy((ice::SendProxy *)v1);
}

void sub_101845FB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101846260(*a3, &aBlock);
  sub_10009AFB0(&v6, (void *)(a1 + 8));
  ice::SendProxy::SendProxy();
  if (v7) {
    sub_1000DB0A0(v7);
  }
  unsigned int v4 = aBlock;
  if (aBlock) {
    unsigned int v4 = _Block_copy(aBlock);
  }
  int v5 = v4;
  ice::SendProxy::callback();
  if (v5) {
    _Block_release(v5);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_10184605C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, uint64_t a10, uint64_t a11, void *a12)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ice::SendProxy::~SendProxy(v12);
  if (a12) {
    _Block_release(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1018460AC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_1018460DC(uint64_t a1, void *a2)
{
  *a2 = off_102342F98;
  __n128 result = *(void **)(a1 + 8);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

void sub_101846128(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

uint64_t sub_10184615C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_10184616C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102342FF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1018461AC()
{
  return &off_102342FF8;
}

void *sub_1018461B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_101846238;
  aBlock[3] = &unk_102343010;
  aBlock[4] = a1;
  __n128 result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_101846238(uint64_t a1)
{
  return 0;
}

void *sub_101846260@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_1018462E0;
  aBlock[3] = &unk_102343038;
  aBlock[4] = a1;
  __n128 result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_1018462E0(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  AriMsg::AriMsg((AriMsg *)v5, a2, a3);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  AriMsg::~AriMsg((AriMsg *)v5);
  return 0;
}

void sub_101846330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_101846344(void *a1@<X8>)
{
  v5[0] = 0;
  sub_1000C7F88(buf);
  int v2 = sub_10006EF84(*(uint64_t *)buf, "ImdCoexEnable", v5);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (!v2) {
    goto LABEL_10;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343058);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5[0];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ImdCoexEnable,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    v5[9] = 67109120;
    v5[10] = v5[0];
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssInterference> CLGnssInterference::createObject(id<CLIntersiloUniverse>, CLLTEBand13Handler::CLLTEBand13HandlerCallBack)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (v5[0]) {
LABEL_10:
  }
    operator new();
  *a1 = 0;
}

void sub_101846594(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10085294C(va);
  operator delete();
}

void sub_1018465E4(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 20) = _D0;
  *(unsigned char *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  [a2 silo];
  if (sub_100119964()) {
    operator new();
  }
  operator new();
}

void sub_101846840(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10085294C((uint64_t *)va);
  operator delete();
}

uint64_t *sub_101846900(uint64_t *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343058);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Destruction", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    __int16 v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssInterference::~CLGnssInterference()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }

  a1[8] = 0;
  uint64_t v3 = *a1;
  if (*a1)
  {
    sub_1000B0164(buf, @"kUplinkFreqBwNotification");
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:sub_1000F1244(buf)];
    uint64_t v4 = *a1;
    sub_1000B0164(buf, @"kCellInfoNotification");
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:sub_1000F1244(buf)];
  }
  sub_101847488(a1 + 7, 0);
  sub_101847438(a1 + 6, 0);
  uint64_t v5 = *a1;
  *a1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_101846B58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101846B68(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343058);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssInterference,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssInterference::start()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_101846D04(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343058);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssInterference,stop", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssInterference::stop()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t sub_101846E9C(uint64_t a1, CFDictionaryRef *a2)
{
  sub_10013FA80((int)v20, *a2);
  float v18 = -1.0;
  float v19 = -1.0;
  *(unsigned char *)(a1 + 28) = 0;
  uint64_t v3 = (unsigned char *)(a1 + 28);
  int v4 = sub_1000D29FC((uint64_t)v20, @"kUplinkFreqBwValid", (BOOL *)(a1 + 28));
  sub_1004D123C((uint64_t)v20, @"kUplinkFreqKey", &v19);
  int v6 = v5;
  sub_1004D123C((uint64_t)v20, @"kUplinkBwKey", &v18);
  int v8 = v7;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343058);
  }
  long long v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *v3;
    *(_DWORD *)std::string buf = 68290562;
    int v22 = 0;
    __int16 v23 = 2082;
    float v24 = "";
    __int16 v25 = 1026;
    *(_DWORD *)uint64_t v26 = v4;
    *(_WORD *)&unsigned char v26[4] = 1026;
    *(_DWORD *)&v26[6] = v10;
    LOWORD(v27) = 1026;
    *(_DWORD *)((char *)&v27 + 2) = v6;
    HIWORD(v27) = 2050;
    double v28 = v19;
    __int16 v29 = 1026;
    int v30 = v8;
    __int16 v31 = 2050;
    double v32 = v18;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#imd,gnss,onTelephonyNotification\", \"valid\":%{public}d, \"isCacheValid\":%{public}d, \"gotUplinkFreq\":%{public}d, \"uplinkFreq(Hz)\":\"%{public}f\", \"gotUplinkBw\":%{public}d, \"uplinkBw(Hz)\":\"%{public}f\"}", buf, 0x3Eu);
  }
  if ((v4 & v6 & v8) != 1)
  {
    unsigned char *v3 = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    double v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#error,#imd, cannot get uplink freq/bw from notification", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return sub_10013F3C4(v20);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssInterference::setCachedFreqBw(const CLTelephonyService_Type::NotificationData &)", "%s\n", v15);
LABEL_28:
    if (v15 != (char *)buf) {
      free(v15);
    }
    return sub_10013F3C4(v20);
  }
  if (*v3)
  {
    *(float32x2_t *)(a1 + 20) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v18), LODWORD(v19))), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v12 = *(float *)(a1 + 20);
      double v13 = *(float *)(a1 + 24);
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      float v24 = "";
      __int16 v25 = 2050;
      *(double *)uint64_t v26 = v12;
      *(_WORD *)&v26[8] = 2050;
      double v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#imd,Received notification\", \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", buf, 0x26u);
    }
    return sub_10013F3C4(v20);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343058);
  }
  double v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#imd,gnss,onTelephonyNotification,!isValid,clearing", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssInterference::setCachedFreqBw(const CLTelephonyService_Type::NotificationData &)", "%s\n", v15);
    goto LABEL_28;
  }
  return sub_10013F3C4(v20);
}

void sub_101847394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

float sub_1018473C0(uint64_t a1, float *a2)
{
  float result = *(float *)(a1 + 20);
  *a2 = result;
  return result;
}

float sub_1018473CC(uint64_t a1, float *a2)
{
  float result = *(float *)(a1 + 24);
  *a2 = result;
  return result;
}

void sub_1018473D8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101847408(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101847438(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1018450A0();
    operator delete();
  }
  return result;
}

uint64_t *sub_101847488(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_10085294C((void *)(v2 + 8));
    operator delete();
  }
  return result;
}

void sub_1018474E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_1001EF9DC(a1 + 40, a3);
  sub_1001EF9DC(a1 + 72, a4);
  sub_10065AB34(a1 + 104, a5);
  sub_10065AB34(a1 + 136, a6);
  sub_100134750(&__p, "#gnssAssertion,sm");
  uint64_t v10 = a1;
  operator new();
}

void sub_1018477AC()
{
}

void sub_1018477CC(_Unwind_Exception *a1)
{
  sub_10065ABCC(v5);
  sub_10065ABCC(v4);
  sub_1001EFA74(v3);
  sub_1001EFA74(v2);
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void sub_1018477D4()
{
}

void sub_1018477DC()
{
}

void sub_1018477E4()
{
}

void sub_1018477EC()
{
}

void sub_1018477F4()
{
  sub_10184BA38(v0);
  JUMPOUT(0x101847800);
}

uint64_t **sub_101847830(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v18 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    int v4 = a4;
    int v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_10184C100(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102343098);
LABEL_3:
  int v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    sub_10184B7A0(v7, __p);
    if (SBYTE3(v23) >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v25 = 1024;
    unsigned int v26 = v7;
    __int16 v27 = 2080;
    double v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    double v13 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      double v13 = (void *)*v13;
    }
    sub_10184B7A0(v7, v16);
    if (v17 >= 0) {
      double v14 = v16;
    }
    else {
      double v14 = (void **)v16[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v13;
    __int16 v20 = 1024;
    unsigned int v21 = v7;
    __int16 v22 = 2080;
    __int16 v23 = v14;
    double v15 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssAssertion>::setStateHandler(State, StateHandler) [T = CLEurekaGnssAssertion]", "%s\n", v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  *(void *)std::string buf = &v18;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_101847B00(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    sub_100180260(a1 + 136, 1);
    return 4;
  }
  if (a2 != 2) {
    return 4;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    sub_10015E48C();
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3)) {
    return 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gnssAssertion,startTriggeredWhileAlreadyStarted", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopped(CLEurekaGnssAssertion::Event)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v5 = a1 + 104;
  uint64_t v6 = 1;
  sub_100180260(v5, 1);
  return v6;
}

uint64_t sub_101847D08(uint64_t a1, int a2)
{
  uint64_t v2 = 3;
  switch(a2)
  {
    case 0:
      sub_10184905C(a1 + 168, 8, 10.0);
      break;
    case 1:
      sub_101849B48(a1 + 168, 8);
      break;
    case 2:
      uint64_t v4 = *(void *)(a1 + 64);
      if (!v4) {
        sub_10015E48C();
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343098);
        }
        uint64_t v5 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gnssAssertion,startTriggeredWhileAlreadyStarted", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343098);
          }
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
        uint64_t v2 = 1;
        sub_100180260(a1 + 104, 1);
      }
      else
      {
        uint64_t v2 = 0;
      }
      break;
    case 6:
    case 9:
      sub_100180260(a1 + 136, 1);
      uint64_t v2 = 4;
      break;
    case 7:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopFailed", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_36;
      }
      goto LABEL_29;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      unsigned int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopFailed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
LABEL_36:
        }
          dispatch_once(&qword_1024193D0, &stru_102343098);
LABEL_29:
        os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
LABEL_25:
      sub_100180260(a1 + 136, 0);
      uint64_t v2 = 5;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t sub_101848194(uint64_t a1, int a2)
{
  if (a2 == 9) {
    return 4;
  }
  if (a2 == 3)
  {
    sub_100180260(a1 + 136, 0);
    return 5;
  }
  if (a2 != 2) {
    return 5;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    sub_10015E48C();
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3)) {
    return 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gnssAssertion,startTriggeredWhileAlreadyStarted", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopFailed(CLEurekaGnssAssertion::Event)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v5 = a1 + 104;
  uint64_t v6 = 1;
  sub_100180260(v5, 1);
  return v6;
}

uint64_t sub_1018483AC(uint64_t a1, int a2)
{
  if (a2 == 9)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStarted(CLEurekaGnssAssertion::Event)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_100180260(a1 + 104, 0);
    return 1;
  }
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v3 = 1;
      sub_100180260(a1 + 104, 1);
      return v3;
    }
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 96);
  if (!v6) {
    sub_10015E48C();
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 48))(v6)) {
    return 3;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  unsigned int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStarted(CLEurekaGnssAssertion::Event)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return 4;
}

uint64_t sub_1018486F4(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 0:
      sub_10184905C(a1 + 168, 8, 10.0);
      goto LABEL_32;
    case 1:
      sub_101849B48(a1 + 168, 8);
      goto LABEL_32;
    case 3:
      uint64_t v4 = *(void *)(a1 + 96);
      if (!v4) {
        sub_10015E48C();
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4)) {
        return 3;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343098);
        }
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      return 4;
    case 4:
      uint64_t v2 = 1;
      sub_100180260(a1 + 104, 1);
      sub_101849B48(a1 + 168, 8);
      return v2;
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gnssAssertion,startFailed", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_47;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      unsigned int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssAssertion,startFailed", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_36;
      }
LABEL_47:
      dispatch_once(&qword_1024193D0, &stru_102343098);
LABEL_36:
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
LABEL_25:
      sub_100180260(a1 + 104, 0);
      uint64_t v2 = 2;
      break;
    case 9:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      int v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343098);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_100180260(a1 + 104, 0);
LABEL_32:
      uint64_t v2 = 0;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t sub_101848CC4(uint64_t a1, int a2)
{
  if (a2 == 9)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartFailed(CLEurekaGnssAssertion::Event)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
LABEL_10:
    sub_100180260(a1 + 104, 0);
    return 2;
  }
  if (a2 != 3)
  {
    if (a2 != 2) {
      return 2;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a1 + 96);
  if (!v5) {
    sub_10015E48C();
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 48))(v5)) {
    return 3;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartFailed(CLEurekaGnssAssertion::Event)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return 4;
}

uint64_t sub_101848FFC(void *a1)
{
  sub_10184BA38((uint64_t)(a1 + 21));
  sub_10065ABCC(a1 + 17);
  sub_10065ABCC(a1 + 13);
  sub_1001EFA74(a1 + 9);
  sub_1001EFA74(a1 + 5);

  return sub_1000D7D80((uint64_t)a1);
}

void sub_10184905C(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    double v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v33 = (void *)*v33;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      __int16 v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssAssertion>::setTimeoutEvent(Event, double) [T = CLEurekaGnssAssertion]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    uint64_t v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&unsigned char buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
    }
    __int16 v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&unsigned char buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
    }
    int v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&unsigned char buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    unsigned int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v8 = (void *)*v8;
      }
      sub_10184B774(a2, __p);
      if (v49 >= 0) {
        os_log_type_t v9 = __p;
      }
      else {
        os_log_type_t v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      uint64_t v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      sub_10184B774(a2, v42);
      if (v45 >= 0) {
        uint64_t v11 = v42;
      }
      else {
        uint64_t v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      unint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      double v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssAssertion>::setTimeoutEvent(Event, double) [T = CLEurekaGnssAssertion]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        char v17 = (uint64_t *)v13;
      }
      else {
        char v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      int v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343098);
        }
        unsigned int v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          __int16 v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v23 = (void *)*v23;
          }
          sub_10184B774(v41, __p);
          if (v49 >= 0) {
            float v24 = __p;
          }
          else {
            float v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&unsigned char buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343098);
          }
          __int16 v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v25 = (void *)*v25;
          }
          sub_10184B774(v41, v42);
          if (v45 >= 0) {
            unsigned int v26 = v42;
          }
          else {
            unsigned int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          unint64_t v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          double v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssAssertion>::setTimeoutEvent(Event, double) [T = CLEurekaGnssAssertion]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  float v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    int v18 = v19;
    *(void *)std::string buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10184BB28;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  __int16 v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    double v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      double v28 = (void *)*v28;
    }
    sub_10184B774(a2, buf);
    if (buf[23] >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    unint64_t v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_10184B774(a2, __p);
    if (v49 >= 0) {
      __int16 v31 = __p;
    }
    else {
      __int16 v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)unint64_t v42 = 136315394;
    *(void *)&void v42[4] = v30;
    __int16 v43 = 2082;
    double v44 = v31;
    double v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_101849B48(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (os_log_type_t v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    uint64_t v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      double v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v12 = (void *)*v12;
      }
      sub_10184B774(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      float v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_10184B774(a2, buf);
      if (v25 >= 0) {
        signed int v15 = buf;
      }
      else {
        signed int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v14;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssAssertion>::cancelTimeoutEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    char v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v18 = (void *)*v18;
      }
      sub_10184B774(a2, __p);
      if (v31 >= 0) {
        float v19 = __p;
      }
      else {
        float v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      float v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_10184B774(a2, buf);
      if (v25 >= 0) {
        unsigned int v21 = buf;
      }
      else {
        unsigned int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v20;
      __int16 v28 = 2080;
      __int16 v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

uint64_t sub_101849FDC(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    signed int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssAssertion,evaluateAssertion,noEntries,Event::kGnssStopRequest", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_27;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_30:
      os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::evaluateAssertion()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
LABEL_27:
      uint64_t v4 = 3;
      return sub_10184A3AC(a1 + 168, v4);
    }
LABEL_32:
    dispatch_once(&qword_1024193D0, &stru_102343098);
    goto LABEL_30;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    while (*((_DWORD *)v2 + 5))
    {
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_5;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    BOOL v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssAssertion,evaluateAssertion,someDisabled,Event::kGnssStopRequest", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_27;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_30;
    }
    goto LABEL_32;
  }
LABEL_5:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#gnssAssertion,evaluateAssertion,allEnable,Event::kGnssStartRequest", buf, 2u);
  }
  uint64_t v4 = 2;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::evaluateAssertion()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    uint64_t v4 = 2;
  }
  return sub_10184A3AC(a1 + 168, v4);
}

uint64_t sub_10184A3AC(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v85 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_10184C28C();
    goto LABEL_157;
  }
  uint64_t v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_10184C404(qword_1024193D0 == -1);
    goto LABEL_157;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  uint64_t v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    BOOL v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      BOOL v7 = (void *)*v7;
    }
    sub_10184B7A0(*(_DWORD *)(a1 + 4), __p);
    int v8 = SHIBYTE(v89);
    os_log_type_t v9 = *(unsigned char **)__p;
    sub_10184B774(a2, v96);
    uint64_t v10 = __p;
    if (v8 < 0) {
      uint64_t v10 = v9;
    }
    if (v99 >= 0) {
      os_log_type_t v11 = v96;
    }
    else {
      os_log_type_t v11 = *(unsigned char **)v96;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v92 = 2080;
    int v93 = v10;
    __int16 v94 = 2080;
    int v95 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    uint64_t v3 = &qword_102419000;
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    std::string::size_type v58 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      std::string::size_type v58 = (void *)*v58;
    }
    sub_10184B7A0(*(_DWORD *)(a1 + 4), v96);
    int v59 = v99;
    std::string::size_type v60 = *(unsigned char **)v96;
    sub_10184B774(a2, v83);
    long long v61 = v96;
    if (v59 < 0) {
      long long v61 = v60;
    }
    if (v84 >= 0) {
      std::string::size_type v62 = v83;
    }
    else {
      std::string::size_type v62 = (void **)v83[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v58;
    __int16 v87 = 2080;
    int v88 = v61;
    __int16 v89 = 2080;
    uint64_t v90 = v62;
    long long v63 = (char *)_os_log_send_and_compose_impl();
    if (v84 < 0) {
      operator delete(v83[0]);
    }
    uint64_t v3 = &qword_102419000;
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v63);
    if (v63 != buf) {
      free(v63);
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    goto LABEL_28;
  }
  uint64_t v13 = (uint64_t **)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 4);
  uint64_t v15 = a1 + 16;
  do
  {
    int v16 = *(_DWORD *)(v12 + 32);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      int v18 = (uint64_t *)v12;
    }
    else {
      int v18 = (uint64_t *)(v12 + 8);
    }
    if (!v17) {
      uint64_t v15 = v12;
    }
    uint64_t v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_10184C590();
    goto LABEL_157;
  }
  float v19 = *(uint64_t (**)(void *, uint64_t))(v15 + 40);
  uint64_t v20 = *(void *)(v15 + 48);
  unsigned int v21 = (void *)(*(void *)(a1 + 32) + (v20 >> 1));
  if (v20) {
    float v19 = *(uint64_t (**)(void *, uint64_t))(*v21 + v19);
  }
  uint64_t v22 = v19(v21, a2);
  uint64_t v23 = v22;
  int v82 = v22;
  if (a2 <= 1 && v22 != v85)
  {
    sub_10184C9F8();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    float v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      char v25 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v25 = (void *)*v25;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      uint64_t v67 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v67 = (void *)*v67;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v67;
      std::string::size_type v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  int v26 = qword_1024193D8;
  os_log_type_t v27 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v27))
  {
    __int16 v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v28 = (void *)*v28;
    }
    sub_10184B7A0(v23, buf);
    if (v94 >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v87 = 2080;
    int v88 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    std::string::size_type v64 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      std::string::size_type v64 = (void *)*v64;
    }
    sub_10184B7A0(v23, __p);
    if (v89 >= 0) {
      long long v65 = __p;
    }
    else {
      long long v65 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string::size_type v96 = 136315394;
    *(void *)&v96[4] = v64;
    __int16 v97 = 2080;
    int v98 = v65;
    std::string::size_type v66 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  if (v23 != v85)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    int v30 = qword_1024193D8;
    os_log_type_t v31 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v31))
    {
      double v32 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v32 = (void *)*v32;
      }
      sub_10184B7A0(v85, __p);
      uint64_t v33 = v3;
      int v34 = SHIBYTE(v89);
      __int16 v35 = *(unsigned char **)__p;
      sub_100134750(v96, "Exit");
      int v36 = __p;
      if (v34 < 0) {
        int v36 = v35;
      }
      if (v99 >= 0) {
        __int16 v37 = v96;
      }
      else {
        __int16 v37 = *(unsigned char **)v96;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v92 = 2080;
      int v93 = v36;
      __int16 v94 = 2080;
      int v95 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      uint64_t v3 = v33;
      if (SHIBYTE(v89) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      char v69 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v69 = (void *)*v69;
      }
      sub_10184B7A0(v85, v96);
      std::string::size_type v70 = v3;
      int v71 = v99;
      std::string::size_type v72 = *(unsigned char **)v96;
      sub_100134750(v83, "Exit");
      uint64_t v73 = v96;
      if (v71 < 0) {
        uint64_t v73 = v72;
      }
      if (v84 >= 0) {
        unint64_t v74 = v83;
      }
      else {
        unint64_t v74 = (void **)v83[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v69;
      __int16 v87 = 2080;
      int v88 = v73;
      __int16 v89 = 2080;
      uint64_t v90 = v74;
      std::string::size_type v75 = (char *)_os_log_send_and_compose_impl();
      if (v84 < 0) {
        operator delete(v83[0]);
      }
      uint64_t v3 = v70;
      uint64_t v13 = (uint64_t **)(a1 + 8);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v75);
      if (v75 != buf) {
        free(v75);
      }
    }
    uint64_t v38 = *(void *)(a1 + 32);
    *(void *)std::string buf = &v85;
    __int16 v39 = sub_1000C5658(v13, (int *)&v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    unsigned int v40 = v39[5];
    uint64_t v41 = (uint64_t)v39[6];
    unint64_t v42 = (void *)(v38 + (v41 >> 1));
    if (v41) {
      unsigned int v40 = *(uint64_t **)(*v42 + v40);
    }
    int v43 = ((uint64_t (*)(void *, uint64_t))v40)(v42, 1);
    if (v43 == v85)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343098);
      }
      double v44 = qword_1024193D8;
      os_log_type_t v45 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v45))
      {
        double v46 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          double v46 = (void *)*v46;
        }
        sub_10184B7A0(v23, __p);
        __int16 v47 = v3;
        int v48 = SHIBYTE(v89);
        __int16 v49 = *(unsigned char **)__p;
        sub_100134750(v96, "Enter");
        double v50 = __p;
        if (v48 < 0) {
          double v50 = v49;
        }
        if (v99 >= 0) {
          __int16 v51 = v96;
        }
        else {
          __int16 v51 = *(unsigned char **)v96;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v46;
        __int16 v92 = 2080;
        int v93 = v50;
        __int16 v94 = 2080;
        int v95 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        uint64_t v3 = v47;
        if (SHIBYTE(v89) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343098);
        }
        long long v76 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          long long v76 = (void *)*v76;
        }
        sub_10184B7A0(v23, v96);
        int v77 = v99;
        std::string::size_type v78 = *(unsigned char **)v96;
        sub_100134750(v83, "Enter");
        uint64_t v79 = v96;
        if (v77 < 0) {
          uint64_t v79 = v78;
        }
        if (v84 >= 0) {
          std::string::size_type v80 = v83;
        }
        else {
          std::string::size_type v80 = (void **)v83[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v76;
        __int16 v87 = 2080;
        int v88 = v79;
        __int16 v89 = 2080;
        uint64_t v90 = v80;
        unint64_t v81 = (char *)_os_log_send_and_compose_impl();
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v81);
        if (v81 != buf) {
          free(v81);
        }
      }
      uint64_t v52 = *(void *)(a1 + 32);
      *(void *)std::string buf = &v82;
      unint64_t v53 = sub_1000C5658(v13, &v82, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      std::string::size_type v54 = v53[5];
      uint64_t v55 = (uint64_t)v53[6];
      std::string::size_type v56 = (void *)(v52 + (v55 >> 1));
      if (v55) {
        std::string::size_type v54 = *(uint64_t **)(*v56 + v54);
      }
      uint64_t v23 = ((uint64_t (*)(void *, void))v54)(v56, 0);
      if (v23 == v82) {
        goto LABEL_89;
      }
      sub_10184C708();
    }
    else
    {
      sub_10184C880();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_10184B0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10184B11C(uint64_t a1, int a2, int a3)
{
  int v27 = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  os_log_type_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v7 = "AssertionClientUnknown";
    if (a2 == 1) {
      BOOL v7 = "kCLGDA";
    }
    if (a2) {
      int v8 = (char *)v7;
    }
    else {
      int v8 = "kGnssClient";
    }
    sub_100134750(v36, v8);
    int v9 = v37;
    uint64_t v10 = (void **)v36[0];
    os_log_type_t v11 = "AssertionLevelUnknown";
    if (a3 == 1) {
      os_log_type_t v11 = "kGnssOn";
    }
    if (a3) {
      uint64_t v12 = (char *)v11;
    }
    else {
      uint64_t v12 = "kGnssOff";
    }
    sub_100134750(__p, v12);
    uint64_t v13 = v36;
    if (v9 < 0) {
      uint64_t v13 = v10;
    }
    if (v26 >= 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v13;
    __int16 v29 = 2080;
    int v30 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssAssertion,setAssertion,client,%s,level,%s", buf, 0x16u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v37 < 0) {
      operator delete(v36[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v36, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    int v16 = "AssertionClientUnknown";
    if (a2 == 1) {
      int v16 = "kCLGDA";
    }
    if (a2) {
      BOOL v17 = (char *)v16;
    }
    else {
      BOOL v17 = "kGnssClient";
    }
    sub_100134750(__p, v17);
    int v18 = v26;
    float v19 = (void **)__p[0];
    uint64_t v20 = "AssertionLevelUnknown";
    if (a3 == 1) {
      uint64_t v20 = "kGnssOn";
    }
    if (a3) {
      unsigned int v21 = (char *)v20;
    }
    else {
      unsigned int v21 = "kGnssOff";
    }
    sub_100134750(buf, v21);
    uint64_t v22 = __p;
    if (v18 < 0) {
      uint64_t v22 = v19;
    }
    if (v31 >= 0) {
      uint64_t v23 = buf;
    }
    else {
      uint64_t v23 = *(unsigned char **)buf;
    }
    int v32 = 136315394;
    uint64_t v33 = v22;
    __int16 v34 = 2080;
    __int16 v35 = v23;
    float v24 = (char *)_os_log_send_and_compose_impl();
    if (v31 < 0) {
      operator delete(*(void **)buf);
    }
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::setAssertion(CLEurekaGnssAssertionClient, CLEurekaGnssAssertionLevel)", "%s\n", v24);
    if (v24 != (char *)v36) {
      free(v24);
    }
  }
  v36[0] = &v27;
  *((_DWORD *)sub_1000F3C48(a1, &v27, (uint64_t)&unk_101D0B290, (_DWORD **)v36) + 5) = a3;
  return sub_101849FDC(a1);
}

void sub_10184B480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10184B4B8(void *a1, int a2)
{
  int v13 = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = "AssertionClientUnknown";
    if (a2 == 1) {
      uint64_t v5 = "kCLGDA";
    }
    if (a2) {
      os_log_type_t v6 = (char *)v5;
    }
    else {
      os_log_type_t v6 = "kGnssClient";
    }
    sub_100134750(__p, v6);
    if (v19 >= 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssAssertion,clearAssertion,client,%s", buf, 0xCu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
    int v9 = "AssertionClientUnknown";
    if (a2 == 1) {
      int v9 = "kCLGDA";
    }
    if (a2) {
      uint64_t v10 = (char *)v9;
    }
    else {
      uint64_t v10 = "kGnssClient";
    }
    sub_100134750(buf, v10);
    if (v15 >= 0) {
      os_log_type_t v11 = buf;
    }
    else {
      os_log_type_t v11 = *(unsigned char **)buf;
    }
    int v16 = 136315138;
    BOOL v17 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::clearAssertion(CLEurekaGnssAssertionClient)", "%s\n", v12);
    if (v12 != (char *)__p) {
      free(v12);
    }
  }
  sub_10184BB38(a1, &v13);
  return sub_101849FDC((uint64_t)a1);
}

uint64_t sub_10184B738(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 168;
  if (a2) {
    uint64_t v3 = 6;
  }
  else {
    uint64_t v3 = 7;
  }
  return sub_10184A3AC(v2, v3);
}

uint64_t sub_10184B74C(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 168;
  if (a2) {
    uint64_t v3 = 4;
  }
  else {
    uint64_t v3 = 5;
  }
  return sub_10184A3AC(v2, v3);
}

uint64_t sub_10184B760(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 168;
  if (a2) {
    uint64_t v3 = 10;
  }
  else {
    uint64_t v3 = 9;
  }
  return sub_10184A3AC(v2, v3);
}

void *sub_10184B774@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xA) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = (&off_102343118)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10184B7A0@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 5) {
    uint64_t v2 = "StateUnknown";
  }
  else {
    uint64_t v2 = (&off_102343170)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_10184B7CC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10184B800(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10184B83C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10184B880(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  os_log_type_t v11 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      goto LABEL_5;
    }
LABEL_20:
    sub_10184CB70(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23, v24, v25,
      v26,
      v27,
      v28,
      v29,
      v30);
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*(char *)(a2 + 23) >= 0) {
    size_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v12 = *(void *)(a2 + 8);
  }
  sub_1001110E4((uint64_t)&v20, v12 + 1);
  if (v21 >= 0) {
    int v13 = &v20;
  }
  else {
    int v13 = (long long *)v20;
  }
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v14 = (const void *)a2;
    }
    else {
      int v14 = *(const void **)a2;
    }
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)v13 + v12) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)os_log_type_t v11 = v20;
  *(void *)(a1 + 112) = v21;
  return a1;
}

void sub_10184B9F4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  BOOL v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_10184BA38(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_10184BAA8(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10184BAA8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_101849B48(a3, *((_DWORD *)v5 + 8));
      os_log_type_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          os_log_type_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10184BB28(uint64_t a1)
{
  return sub_10184A3AC(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t *sub_10184BB38(void *a1, int *a2)
{
  uint64_t result = sub_10011853C(a1, a2);
  if (result)
  {
    sub_10017FB70(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void sub_10184BB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_100857C30();
  if (!v27) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v28, "{\"msg%{public}.0s\":\"fStart cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F84C())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v24, v29, v30, "fStart cannot be null", "{\"msg%{public}.0s\":\"fStart cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"fStart cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_1003C27A0(26);
  sub_100219E80();
}

void sub_10184BCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_100857C30();
  if (!v27) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v28, "{\"msg%{public}.0s\":\"fOnGnssStopCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F84C())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v24, v29, v30, "fOnGnssStopCompleteCb cannot be null", "{\"msg%{public}.0s\":\"fOnGnssStopCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"fOnGnssStopCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_1003C27A0(29);
  sub_100219E80();
}

void sub_10184BE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_100857C30();
  if (!v27) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v28, "{\"msg%{public}.0s\":\"fOnGnssStartCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F84C())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v24, v29, v30, "fOnGnssStartCompleteCb cannot be null", "{\"msg%{public}.0s\":\"fOnGnssStartCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"fOnGnssStartCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_1003C27A0(28);
  sub_100219E80();
}

void sub_10184BF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_100857C30();
  if (!v27) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v28, "{\"msg%{public}.0s\":\"fStop cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F84C())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v24, v29, v30, "fStop cannot be null", "{\"msg%{public}.0s\":\"fStop cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101329AF8();
    if (!v27) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"fStop cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_1003C27A0(27);
  sub_100219E80();
}

#error "10184C174: call analysis failed (funcsize=80)"

#error "10184C308: call analysis failed (funcsize=75)"

#error "10184C478: call analysis failed (funcsize=80)"

#error "10184C60C: call analysis failed (funcsize=75)"

#error "10184C784: call analysis failed (funcsize=75)"

#error "10184C8FC: call analysis failed (funcsize=75)"

#error "10184CA74: call analysis failed (funcsize=75)"

void sub_10184CB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343098);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v27, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343098);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v24, v30, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_10184CCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 96) = _D0;
  *(void *)(a1 + 104) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 112) = -1082130432;
  *(void *)(a1 + 120) = 0x7FF8000000000000;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1082130432;
  *(_WORD *)(a1 + 144) = 0x8000;
  *(unsigned char *)(a1 + 146) = 0;
  *(void *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 0x8000;
  sub_1008527DC(a1 + 168, a4);
  operator new();
}

void sub_10184CE84(uint64_t a1, ...)
{
  va_start(va2, a1);
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_1008522FC((uint64_t *)va);
  sub_100A1774C((uint64_t *)va1);
  sub_100A176C8((uint64_t *)va2);
  operator delete();
}

void sub_10184CEE8(void *a1, int a2)
{
  if (*a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023431A0);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      int v6 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#GnssTTPCIe,pcieDoorbellErrorCallback,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023431A0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::pcieDoorbellErrorCallback(const int32_t)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10184D09C(void *a1, int a2, uint64_t a3)
{
  if (*a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023431A0);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67240448;
      int v9 = a2;
      __int16 v10 = 2050;
      uint64_t v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#GnssTTPCIe,pcieDoorbellModemToMachTimeTransferCallback,seq,%{public}u,tick,%{public}llu", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023431A0);
      }
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::pcieDoorbellModemToMachTimeTransferCallback(const uint32_t, const uint64_t)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_10184D288((uint64_t)a1, a2, a3);
  }
}

void sub_10184D288(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023431A0);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240448;
    int v9 = a2;
    __int16 v10 = 2050;
    uint64_t v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#GnssTTPCIe,handleModemToMachTimeTransferCallback,seq,%{public}u,tickCount,%{public}llu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023431A0);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::handleModemToMachTimeTransferCallback(const uint32_t, const uint64_t)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(void *)(a1 + 32) = a3;
  if (*(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) == a2)
  {
    *(unsigned char *)(a1 + 40) = 1;
    sub_10184D98C(a1);
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    *(unsigned char *)(a1 + 12) = 1;
  }
}

void sub_10184D498(void *a1, int a2, unsigned int a3, unint64_t a4, unint64_t a5)
{
  if (*a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023431A0);
    }
    __int16 v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67241728;
      int v13 = a2;
      __int16 v14 = 1026;
      unsigned int v15 = a3;
      __int16 v16 = 2050;
      unint64_t v17 = a4;
      __int16 v18 = 2050;
      unint64_t v19 = a5;
      __int16 v20 = 2050;
      double v21 = sub_1000D3D90(a3);
      __int16 v22 = 2050;
      double v23 = sub_1000D3D90(a4);
      __int16 v24 = 2050;
      double v25 = sub_1000D3D90(a5);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#GnssTTPCIe,pcieDoorbellPulseMeasurementCallback,seq,%{public}u,dur,%{public}u,begAbs,%{public}llu,begCont,%{public}llu,durSec,%{public}f,begAbsSec,%{public}f,begContSec,%{public}f", buf, 0x40u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023431A0);
      }
      sub_1000D3D90(a3);
      sub_1000D3D90(a4);
      sub_1000D3D90(a5);
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::pcieDoorbellModemTimeReadMeasurementCallback(uint32_t, uint32_t, uint64_t, uint64_t)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_10184D73C((uint64_t)a1, a2, a3, a4);
  }
}

void sub_10184D73C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023431A0);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240704;
    int v11 = a2;
    __int16 v12 = 1026;
    int v13 = a3;
    __int16 v14 = 2050;
    uint64_t v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#GnssTTPCIe,ttSetTickTimeMeas,seq,%{public}u,measDur,%{public}u,measBeginMach,%{public}llu", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023431A0);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::handleModemTimeReadMeasurementCallback(const uint32_t, const uint32_t, const uint64_t, const uint64_t)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a3;
  if (*(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) == a2)
  {
    *(unsigned char *)(a1 + 40) = 1;
    sub_10184D98C(a1);
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    *(unsigned char *)(a1 + 12) = 1;
  }
}

uint64_t sub_10184D96C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return sub_100A16A1C(result);
  }
  return result;
}

uint64_t sub_10184D97C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return sub_100A16FA0(result);
  }
  return result;
}

void sub_10184D98C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2
    && *(_DWORD *)(a1 + 24)
    && *(void *)(a1 + 32)
    && *(unsigned char *)(a1 + 12)
    && *(unsigned char *)(a1 + 40)
    && (unint64_t v3 = *(void *)(a1 + 48)) != 0
    && *(void *)(a1 + 56) > v3
    && *(void *)(a1 + 64)
    && *(float *)(a1 + 72) > 0.0)
  {
    double v4 = sub_1000D3D90(v2);
    double v5 = sub_1000D3D90(*(unsigned int *)(a1 + 24));
    double v6 = sub_1000D3D90(*(void *)(a1 + 48));
    double v7 = sub_1000D3D90(*(void *)(a1 + 56));
    double v8 = vabdd_f64(v4, v6);
    if (v8 > 2.0 || v5 > 0.0001 || v7 - v6 > 0.0001)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023431A0);
      }
      uint64_t v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349568;
        *(double *)uint64_t v83 = v8;
        *(_WORD *)&v83[8] = 2050;
        *(double *)&v83[10] = v5;
        *(_WORD *)&v83[18] = 2050;
        *(double *)&v83[20] = v7 - v6;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#GnssTTPCIe,diffModemGpsTimeTransferStartSec,%{public}f,modeTimeReadDurationSec,%{public}f,readDurationGpsTimeSec,%{public}f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023431A0);
        }
        int v62 = 134349568;
        *(double *)long long v63 = v8;
        *(_WORD *)&v63[8] = 2050;
        *(double *)&v63[10] = v5;
        *(_WORD *)&v63[18] = 2050;
        *(double *)&v63[20] = v7 - v6;
        int v32 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n");
        goto LABEL_83;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a1 + 48) + ((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 1);
      uint64_t v10 = *(void *)(a1 + 16);
      unint64_t v11 = *(unsigned int *)(a1 + 24);
      unint64_t v12 = v10 + (v11 >> 1);
      if (v9 <= v12) {
        uint64_t v13 = v10 + (v11 >> 1);
      }
      else {
        uint64_t v13 = *(void *)(a1 + 48) + ((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 1);
      }
      if (v12 >= v9) {
        unint64_t v14 = *(void *)(a1 + 48) + ((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 1);
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v15 = v13 - v14;
      double v16 = sub_1000D3D90(v13 - v14);
      double v17 = (double)*(unint64_t *)(a1 + 32) / 19200000.0;
      if (qword_1024193D0 != -1)
      {
        double v50 = v16;
        dispatch_once(&qword_1024193D0, &stru_1023431A0);
        double v16 = v50;
      }
      double v18 = v16 * 1000.0;
      double v19 = v17 * 1000.0;
      __int16 v20 = qword_1024193D8;
      double v21 = v7 - v6;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *(_DWORD *)(a1 + 8);
        uint64_t v23 = *(void *)(a1 + 64);
        double v24 = *(float *)(a1 + 72);
        uint64_t v25 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 67243264;
        *(_DWORD *)uint64_t v83 = v22;
        *(_WORD *)&v83[4] = 2050;
        *(void *)&v83[6] = v15;
        *(_WORD *)&v83[14] = 2050;
        *(double *)&v83[16] = v18;
        *(_WORD *)&v83[24] = 2050;
        *(double *)&v83[26] = v6;
        __int16 v84 = 2050;
        double v85 = v7;
        __int16 v86 = 2050;
        double v87 = v7 - v6;
        __int16 v88 = 2050;
        uint64_t v89 = v23;
        __int16 v90 = 2050;
        double v91 = v24;
        __int16 v92 = 2050;
        double v93 = v4;
        __int16 v94 = 2050;
        double v95 = v5;
        __int16 v96 = 2050;
        double v97 = v8;
        __int16 v98 = 2050;
        uint64_t v99 = v25;
        __int16 v100 = 2050;
        double v101 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,AP-GPS-Modem timings,seq,%{public}d,machTickDiffGpsModem,%{public}llu,machDiffGpsModemMsec,%{public}f,machTimeGpsTTStart,%{public}f,machTimeGpsTTEnd,%{public}f,readDurationGPSTimeSec,%{public}f,gpsTime_Ns,%{public}llu,gpsUnc,%{public}.2lf,machTimeModemTTStart,%{public}f,readDurationModemTimeSec,%{public}f,diffModemGpsTimeTransferStartSec,%{public}f,modemClockTicks,%{public}llu,modemClockMsec,%{public}f", buf, 0x80u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023431A0);
        }
        int v51 = *(_DWORD *)(a1 + 8);
        uint64_t v52 = *(void *)(a1 + 64);
        double v53 = *(float *)(a1 + 72);
        uint64_t v54 = *(void *)(a1 + 32);
        int v62 = 67243264;
        *(_DWORD *)long long v63 = v51;
        *(_WORD *)&v63[4] = 2050;
        *(void *)&v63[6] = v15;
        *(_WORD *)&v63[14] = 2050;
        *(double *)&v63[16] = v18;
        *(_WORD *)&v63[24] = 2050;
        *(double *)&v63[26] = v6;
        __int16 v64 = 2050;
        double v65 = v7;
        __int16 v66 = 2050;
        double v67 = v7 - v6;
        __int16 v68 = 2050;
        uint64_t v69 = v52;
        __int16 v70 = 2050;
        double v71 = v53;
        __int16 v72 = 2050;
        double v73 = v4;
        __int16 v74 = 2050;
        double v75 = v5;
        __int16 v76 = 2050;
        double v77 = v8;
        __int16 v78 = 2050;
        uint64_t v79 = v54;
        __int16 v80 = 2050;
        double v81 = v19;
        uint64_t v55 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n", v55);
        if (v55 != (char *)buf) {
          free(v55);
        }
        double v21 = v7 - v6;
      }
      double v26 = -v18;
      if (v12 < v9) {
        double v26 = v18;
      }
      if (v18 <= 5.0)
      {
        double v33 = v19 + v26;
        double __y = 0.0;
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        __asm { FMOV            V10.2S, #-1.0 }
        *(void *)(a1 + 96) = _D10;
        *(void *)(a1 + 104) = 0x7FF8000000000000;
        *(void *)(a1 + 112) = 3212836864;
        *(void *)(a1 + 120) = 0x7FF8000000000000;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 136) = 3212836864;
        *(_WORD *)(a1 + 144) = 0x8000;
        *(void *)(a1 + 146) = 0;
        *(void *)(a1 + 152) = 0;
        *(_WORD *)(a1 + 160) = 0x8000;
        *(_DWORD *)(a1 + 162) = 0;
        *(_WORD *)(a1 + 166) = 0;
        *(double *)(a1 + 80) = sub_10016C458();
        *(void *)(a1 + 128) = *(void *)(a1 + 64);
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 72);
        *(_WORD *)(a1 + 144) = sub_1004BA69C();
        float v39 = (v5 + v21) * 500.0;
        *(float *)(a1 + 100) = v39;
        float v40 = modf(v33, &__y);
        unint64_t v41 = (unint64_t)__y;
        *(float *)(a1 + 96) = v40;
        *(void *)(a1 + 88) = v41;
        if (v39 < 0.1) {
          *(_DWORD *)(a1 + 100) = 1036831949;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023431A0);
        }
        unint64_t v42 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v43 = *(_DWORD *)(a1 + 8);
          uint64_t v44 = *(void *)(a1 + 64);
          uint64_t v45 = *(void *)(a1 + 88);
          double v46 = *(float *)(a1 + 96);
          *(_DWORD *)std::string buf = 67241216;
          *(_DWORD *)uint64_t v83 = v43;
          *(_WORD *)&v83[4] = 2050;
          *(double *)&v83[6] = v33;
          *(_WORD *)&v83[14] = 2050;
          *(void *)&v83[16] = v44;
          *(_WORD *)&v83[24] = 2050;
          *(void *)&v83[26] = v45;
          __int16 v84 = 2050;
          double v85 = v46;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,timeTransferNotification,final,seq,%{public}d,rtcMsec,%{public}.3lf,gnssNsec,%{public}llu,rtcIntMsec,%{public}llu,rtcSubMsec,%{public}.3lf", buf, 0x30u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023431A0);
          }
          int v56 = *(_DWORD *)(a1 + 8);
          uint64_t v57 = *(void *)(a1 + 64);
          uint64_t v58 = *(void *)(a1 + 88);
          double v59 = *(float *)(a1 + 96);
          int v62 = 67241216;
          *(_DWORD *)long long v63 = v56;
          *(_WORD *)&v63[4] = 2050;
          *(double *)&v63[6] = v33;
          *(_WORD *)&v63[14] = 2050;
          *(void *)&v63[16] = v57;
          *(_WORD *)&v63[24] = 2050;
          *(void *)&v63[26] = v58;
          __int16 v64 = 2050;
          double v65 = v59;
          std::string::size_type v60 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n", v60);
          if (v60 != (char *)buf) {
            free(v60);
          }
        }
        uint64_t v47 = *(void *)(a1 + 192);
        if (v47)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 48))(v47, a1 + 80);
          *(void *)(a1 + 80) = 0;
          *(void *)(a1 + 88) = 0;
          *(void *)(a1 + 96) = _D10;
          *(void *)(a1 + 104) = 0x7FF8000000000000;
          *(void *)(a1 + 112) = 3212836864;
          *(void *)(a1 + 120) = 0x7FF8000000000000;
          *(void *)(a1 + 128) = 0;
          *(void *)(a1 + 136) = 3212836864;
          *(_WORD *)(a1 + 144) = 0x8000;
          *(void *)(a1 + 146) = 0;
          *(void *)(a1 + 152) = 0;
          *(_WORD *)(a1 + 160) = 0x8000;
          *(_DWORD *)(a1 + 162) = 0;
          *(_WORD *)(a1 + 166) = 0;
        }
        *(void *)(a1 + 72) = 0;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_OWORD *)(a1 + 8) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023431A0);
        }
        uint64_t v27 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,drop,absMachDiffBetweenGpsAndModemTimeMSec>5.0", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023431A0);
          }
          LOWORD(v62) = 0;
LABEL_82:
          int v32 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n");
LABEL_83:
          if (v32 != buf) {
            free(v32);
          }
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023431A0);
    }
    uint64_t v28 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *(void *)(a1 + 16);
      if (v29)
      {
        LODWORD(v29) = *(_DWORD *)(a1 + 24);
        if (v29)
        {
          uint64_t v29 = *(void *)(a1 + 32);
          if (v29)
          {
            LODWORD(v29) = *(unsigned __int8 *)(a1 + 12);
            if (*(unsigned char *)(a1 + 12)) {
              LODWORD(v29) = *(unsigned __int8 *)(a1 + 40);
            }
          }
        }
      }
      unint64_t v30 = *(void *)(a1 + 48);
      if (v30)
      {
        if (*(void *)(a1 + 56) <= v30)
        {
          LODWORD(v30) = 0;
        }
        else
        {
          unint64_t v30 = *(void *)(a1 + 64);
          if (v30) {
            LODWORD(v30) = *(float *)(a1 + 72) > 0.0;
          }
        }
      }
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)uint64_t v83 = v29;
      *(_WORD *)&v83[4] = 1026;
      *(_DWORD *)&v83[6] = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,timeTransferNotification,modemTimeToMachTimeValid,%{public}d,gpsTimeToMachTimeValid,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023431A0);
      }
      uint64_t v48 = *(void *)(a1 + 16);
      if (v48)
      {
        LODWORD(v48) = *(_DWORD *)(a1 + 24);
        if (v48)
        {
          uint64_t v48 = *(void *)(a1 + 32);
          if (v48)
          {
            LODWORD(v48) = *(unsigned __int8 *)(a1 + 12);
            if (*(unsigned char *)(a1 + 12)) {
              LODWORD(v48) = *(unsigned __int8 *)(a1 + 40);
            }
          }
        }
      }
      unint64_t v49 = *(void *)(a1 + 48);
      if (v49)
      {
        if (*(void *)(a1 + 56) <= v49)
        {
          LODWORD(v49) = 0;
        }
        else
        {
          unint64_t v49 = *(void *)(a1 + 64);
          if (v49) {
            LODWORD(v49) = *(float *)(a1 + 72) > 0.0;
          }
        }
      }
      int v62 = 67240448;
      *(_DWORD *)long long v63 = v48;
      *(_WORD *)&v63[4] = 1026;
      *(_DWORD *)&v63[6] = v49;
      goto LABEL_82;
    }
  }
}

void sub_10184E4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023431A0);
  }
  uint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134349312;
    uint64_t v13 = a2;
    __int16 v14 = 2050;
    uint64_t v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#GnssTTPCIe,feedMachTimeToGPSTimeTransferNew,gpsTimeNs,%{public}llu,measBeginMach,%{public}llu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023431A0);
    }
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::feedMachTimeToGPSTimeTransfer(const uint64_t, const float, const uint64_t, const uint64_t)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a2;
  *(float *)(a1 + 72) = a5;
  sub_10184D98C(a1);
}

void sub_10184E6A4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_10184E6D4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100A15F94(result);
    operator delete();
  }
  return result;
}

void sub_10184E728()
{
}

void *sub_10184E73C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023431D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10184E784(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023431D0;
  a2[1] = v2;
  return result;
}

void sub_10184E7B0(uint64_t a1, int *a2, uint64_t *a3)
{
}

uint64_t sub_10184E7C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10184E800()
{
}

void sub_10184E810()
{
}

void *sub_10184E824(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102343260;
  result[1] = v3;
  return result;
}

uint64_t sub_10184E86C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102343260;
  a2[1] = v2;
  return result;
}

void sub_10184E898(uint64_t a1, int *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5)
{
}

uint64_t sub_10184E8B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10184E8F0()
{
}

void sub_10184E900()
{
}

void *sub_10184E914(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023432F0;
  result[1] = v3;
  return result;
}

uint64_t sub_10184E95C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023432F0;
  a2[1] = v2;
  return result;
}

void sub_10184E988(uint64_t a1, int *a2)
{
}

uint64_t sub_10184E994(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10184E9D4()
{
}

BOOL sub_10184E9E0(double a1, double a2)
{
  return a2 <= 97.98
      && a2 >= 67.08
      && a1 >= 7.07
      && a1 <= 36.63
      && (a2 <= 94.23 && a2 >= 14.1 && a1 >= 9.9 && a1 <= 91.09
       || a1 <= 23.77 && a2 <= 89.25
       || a2 <= 76.19 && a2 >= 70.81 && a1 >= 8.29 && a1 <= 12.67
       || a1 >= 17.57 && a2 >= 67.18);
}

void sub_10184EAF0(void *a1@<X8>)
{
  if (sub_10073DC4C())
  {
    int v8 = 0;
    sub_1000C7F88(buf);
    int v2 = sub_10006EF84(*(uint64_t *)buf, "GPSTTAllowed", &v8);
    if (v12) {
      sub_1000DB0A0(v12);
    }
    if (v8 == 1) {
      int v3 = 1;
    }
    else {
      int v3 = v2 ^ 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tt,create,isGpsTTAllowed,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      int v9 = 67109120;
      int v10 = v3;
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssTimeTransfer> CLGnssTimeTransfer::create(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (v3) {
      operator new();
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    double v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#warning,#tt,NotSupportByPlatform", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      LOWORD(v9) = 0;
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssTimeTransfer> CLGnssTimeTransfer::create(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  *a1 = 0;
}

void sub_10184EE78(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1008508E4(va);
  operator delete();
}

void sub_10184EEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0x8000000000000000;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 2143289344;
  *(unsigned char *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 56) = 10;
  *(_OWORD *)(a1 + 64) = xmmword_101E43E40;
  *(_DWORD *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0x7FF8000000000000;
  uint64_t v4 = sub_101853820(a1 + 96, a3);
  if (sub_10073FAF8(v4)) {
    *(void *)(a1 + 72) = 0x405E000000000000;
  }
  int v24 = 0;
  sub_1000C7F88(buf);
  int v5 = sub_10006EF84(*(uint64_t *)&buf[0], "GPSTTNumPulses", &v24);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v5)
  {
    int v6 = v24;
    if (v24 <= 5) {
      int v6 = 5;
    }
    *(_DWORD *)(a1 + 56) = v6;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  double v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(_DWORD *)(a1 + 56);
    LODWORD(buf[0]) = 67109120;
    DWORD1(buf[0]) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tt, GPSTTNumPulses,%d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    int v17 = *(_DWORD *)(a1 + 56);
    int v25 = 67109120;
    LODWORD(v26) = v17;
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssTimeTransfer::CLGnssTimeTransfer(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  int v24 = 0;
  sub_1000C7F88(buf);
  int v9 = sub_10006EF84(*(uint64_t *)&buf[0], "GPSTTRepeatInterval", &v24);
  if (v24 > 0) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v10) {
    *(double *)(a1 + 72) = (double)v24;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  unint64_t v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 72);
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#tt, GPSTTRepeatInterval,%.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    uint64_t v19 = *(void *)(a1 + 72);
    int v25 = 134217984;
    uint64_t v26 = v19;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssTimeTransfer::CLGnssTimeTransfer(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  double v23 = 0.0;
  sub_1000C7F88(buf);
  int v13 = sub_1000A699C(*(uint64_t *)&buf[0], "GPSTTInterval", &v23);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v13)
  {
    double v14 = v23;
    *(double *)(a1 + 64) = v23;
  }
  else
  {
    double v14 = *(double *)(a1 + 64);
  }
  if (v14 < 1.0) {
    *(void *)(a1 + 64) = 0x3FF0000000000000;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v15 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 64);
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#tt, GPSTTInterval,%.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    uint64_t v21 = *(void *)(a1 + 64);
    int v25 = 134217984;
    uint64_t v26 = v21;
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssTimeTransfer::CLGnssTimeTransfer(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  operator new();
}

void sub_10184F534(_Unwind_Exception *a1)
{
  sub_1008508E4(v2);
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10184F5C0(uint64_t a1)
{
  uint64_t v1 = **(void ***)(a1 + 32);
  uint64_t v2 = (*(uint64_t (**)(void *))(*v1 + 32))(v1);
  int v3 = (void *)v1[1];

  return sub_101850628(v3, v2);
}

uint64_t *sub_10184F624(uint64_t *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt, invalidating timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssTimeTransfer::~CLGnssTimeTransfer()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [(id)a1[6] invalidate];

  a1[6] = 0;
  sub_1008508E4(a1 + 12);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_10184F808(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_10184F818(unsigned char *a1, char a2)
{
  a1[84] = a2;
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 24))(*(void *)a1);
  uint64_t v4 = *(void **)(v2 + 8);

  return sub_101850628(v4, v3);
}

BOOL sub_10184F87C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = sub_10184F8BC(*a1);
  uint64_t v3 = *(void **)(v1 + 8);

  return sub_101850628(v3, (uint64_t)v2);
}

_UNKNOWN **sub_10184F8BC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    double v7 = "";
    __int16 v8 = 2082;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, stop event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
}

void sub_10184F9D0(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 56))(*a1);
  sub_101850628(*(void **)(v4 + 8), v5);
  *((unsigned char *)a1 + 40) = *(_DWORD *)(a2 + 292) != 0;
  if (a1[2] != 0x8000000000000000 && *((double *)a1 + 3) != 0.0 && *((float *)a1 + 8) > 0.0)
  {
    double v6 = sub_1000D3E50();
    double v7 = *((double *)a1 + 3);
    uint64_t v8 = *(void *)(a2 + 8);
    double v9 = (double)(a1[2] - (uint64_t)(v7 * 1000000000.0)) * 0.000000001;
    double v10 = 0.0;
    if (v6 - v7 > 0.0 && v6 - v7 < 1200.0)
    {
      float v11 = *((float *)a1 + 8);
      if (v11 > 0.0 && v11 < 2000000.0)
      {
        double v12 = *(double *)(a2 + 16) - v9;
        if (v12 > 0.0 && v12 < v6)
        {
          double v10 = v6 - v12;
          if (v6 - v12 >= 10.0)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023434F8);
            }
            uint64_t v15 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 134349056;
              double v27 = v6 - v12;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Warning,#tt,excessive mach time delay,%{public}.4lf", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023434F8);
              }
              int v25 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssTimeTransfer::adjustLocationTimestamps(GNSS::PerEpochData &)", "%s\n", v25);
              if (v25 != (char *)buf) {
                free(v25);
              }
            }
          }
          else
          {
            *(CFAbsoluteTime *)(a2 + 8) = CFAbsoluteTimeGetCurrent() - v10;
            *(double *)(a2 + 24) = v12;
            *(double *)(a2 + 32) = sub_10016C458() - v10;
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023434F8);
          }
          double v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134218240;
            double v27 = v12;
            __int16 v28 = 2048;
            double v29 = v6;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning, #tt out of bounds estimatedMachTimeOfFix,%.4lf,machNow,%.4lf,possible bb time adjusted", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023434F8);
            }
            int v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssTimeTransfer::adjustLocationTimestamps(GNSS::PerEpochData &)", "%s\n", v24);
            if (v24 != (char *)buf) {
              free(v24);
            }
          }
          a1[2] = 0x8000000000000000;
          a1[3] = 0;
          *((_DWORD *)a1 + 8) = 2143289344;
        }
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(a2 + 8);
      uint64_t v18 = *(void *)(a2 + 16);
      uint64_t v19 = (uint64_t)*((float *)a1 + 8);
      double v20 = *(double *)(a2 + 24);
      uint64_t v21 = *(void *)(a2 + 32);
      int v22 = *((unsigned __int8 *)a1 + 40);
      *(_DWORD *)std::string buf = 134220288;
      double v27 = v20;
      __int16 v28 = 2048;
      double v29 = v6;
      __int16 v30 = 2048;
      double v31 = v10;
      __int16 v32 = 2048;
      uint64_t v33 = v8;
      __int16 v34 = 2048;
      uint64_t v35 = v17;
      __int16 v36 = 2048;
      uint64_t v37 = v18;
      __int16 v38 = 2048;
      double v39 = v9;
      __int16 v40 = 2048;
      uint64_t v41 = v19;
      __int16 v42 = 2048;
      uint64_t v43 = v21;
      __int16 v44 = 1024;
      int v45 = v22;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#tt,TimestampAdjust,machTimeOfFix,%.4lf,machNow,%.4lf,delay,%.9lf,priorCfTime,%.4lf,adjustedCfTime,%.4lf,locationTimestampGps,%.4lf,bbTimeMinusMachtime,%.9lf,bbTimeUnc_ns,%lld,machContinuousTimeOfFix,%.4lf,imag,%d", buf, 0x62u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      double v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssTimeTransfer::adjustLocationTimestamps(GNSS::PerEpochData &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
}

void sub_101850040(uint64_t a1)
{
  uint64_t v2 = [objc_msgSend(*(id *)(a1 + 8), "silo") queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1018500C4;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v2, block);
}

void sub_1018500C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v7[0] = off_102343528;
  void v7[3] = v7;
  uint64_t v2 = *(void *)(v1 + 120);
  if (!v2) {
    sub_10015E48C();
  }
  char v3 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v7);
  sub_100850860(v7);
  if ((v3 & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#tt, failed to send command to stop time transfer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssTimeTransfer::stopTimeTransfer()_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_1018502BC(_Unwind_Exception *exception_object)
{
}

void sub_1018502D8(uint64_t a1)
{
  uint64_t v2 = [objc_msgSend(*(id *)(a1 + 8), "silo") queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10185035C;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v2, block);
}

void sub_10185035C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v7[0] = off_1023435B8;
  v7[1] = v1;
  void v7[2] = v1;
  void v7[3] = v7;
  uint64_t v2 = *(void *)(v1 + 120);
  if (!v2) {
    sub_10015E48C();
  }
  char v3 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v7);
  sub_100850860(v7);
  if ((v3 & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#tt, failed to send command to start time transfer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssTimeTransfer::startTimeTransfer()_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_101850554(_Unwind_Exception *exception_object)
{
}

uint64_t sub_101850570(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x8000000000000000;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 2143289344;
  if (sub_101822038(a2) && *(unsigned char *)(a2 + 12) && (*(void *)a2 & 0x8000000000000000) == 0)
  {
    *(void *)a1 = *(void *)a2 - *(void *)(a2 + 32) - 1000000000 * *(int *)(a2 + 16) - 662342400000000000;
    double v4 = sub_1000D3D90(*(void *)(a2 + 48));
    *(double *)(a1 + 8) = v4 + sub_1000D3D90(*(void *)(a2 + 56) - *(void *)(a2 + 48)) * 0.5;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  }
  return a1;
}

BOOL sub_101850628(void *a1, uint64_t a2)
{
  double v4 = (void *)*a1;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))(*a1);
  BOOL result = sub_1000E9B14(a2, *(void *)(*v4 - 8));
  if (!result)
  {
    uint64_t v7 = *a1;
    *a1 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *(void *)(a2 + 8);
    double v9 = (const char *)v8;
    if (v8 < 0)
    {
      double v10 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v11 = 5381;
      do
      {
        double v9 = (const char *)v11;
        unsigned int v12 = *v10++;
        uint64_t v11 = (33 * v11) ^ v12;
      }
      while (v12);
    }
    int v13 = "N18CLGnssTimeTransfer15NotAllowedStateE";
    if (((unint64_t)"N18CLGnssTimeTransfer15NotAllowedStateE" & 0x8000000000000000) != 0)
    {
      double v14 = (unsigned __int8 *)((unint64_t)"N18CLGnssTimeTransfer15NotAllowedStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v15 = 5381;
      do
      {
        int v13 = (const char *)v15;
        unsigned int v16 = *v14++;
        uint64_t v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    if (v9 == v13) {
      operator new();
    }
    uint64_t v17 = *(const char **)(a2 + 8);
    if (v8 < 0)
    {
      uint64_t v18 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v19 = 5381;
      do
      {
        uint64_t v17 = (const char *)v19;
        unsigned int v20 = *v18++;
        uint64_t v19 = (33 * v19) ^ v20;
      }
      while (v20);
    }
    uint64_t v21 = "N18CLGnssTimeTransfer9IdleStateE";
    if (((unint64_t)"N18CLGnssTimeTransfer9IdleStateE" & 0x8000000000000000) != 0)
    {
      int v22 = (unsigned __int8 *)((unint64_t)"N18CLGnssTimeTransfer9IdleStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v23 = 5381;
      do
      {
        uint64_t v21 = (const char *)v23;
        unsigned int v24 = *v22++;
        uint64_t v23 = (33 * v23) ^ v24;
      }
      while (v24);
    }
    if (v17 == v21) {
      operator new();
    }
    if (v8 < 0)
    {
      int v25 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v26 = 5381;
      do
      {
        uint64_t v8 = v26;
        unsigned int v27 = *v25++;
        uint64_t v26 = (33 * v26) ^ v27;
      }
      while (v27);
    }
    __int16 v28 = "N18CLGnssTimeTransfer11ActiveStateE";
    if (((unint64_t)"N18CLGnssTimeTransfer11ActiveStateE" & 0x8000000000000000) != 0)
    {
      double v29 = (unsigned __int8 *)((unint64_t)"N18CLGnssTimeTransfer11ActiveStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v30 = 5381;
      do
      {
        __int16 v28 = (const char *)v30;
        unsigned int v31 = *v29++;
        uint64_t v30 = (33 * v30) ^ v31;
      }
      while (v31);
    }
    if ((const char *)v8 == v28) {
      operator new();
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    __int16 v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v33 = *(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v36 = v33;
      __int16 v37 = 2082;
      uint64_t v38 = v5;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "#tt, unknown state %{public}s when handling event in state %{public}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssTimeTransfer::State::checkForNewState(CLGnssTimeTransfer &, std::type_index)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    operator new();
  }
  return result;
}

void sub_101850C9C()
{
}

uint64_t sub_101850CDC(void ***a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = ((uint64_t (*)(void ***))(*a1)[2])(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2082;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tt, spurious start event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  return *(void *)(**a1[1] - 8);
}

uint64_t sub_101850E04(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)std::string buf = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    double v10 = "";
    __int16 v11 = 2082;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, spurious timer event\", \"state\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  [*(id *)(a1[1] + 48) setNextFireDelay:1.79769313e308];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tt, diable timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    __int16 v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::State::timer()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return *(void *)(**(void **)a1[1] - 8);
}

uint64_t sub_101851078(uint64_t *a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = v5;
    __int16 v12 = 1026;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, device state\", \"state\":%{public, location:escape_only}s, \"enabled\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  if (a2) {
    sub_101850040(a1[1]);
  }
  return *(void *)(**(void **)a1[1] - 8);
}

uint64_t sub_1018511C4(void ***a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = ((uint64_t (*)(void ***))(*a1)[2])(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2082;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, dropped data\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  return *(void *)(**a1[1] - 8);
}

uint64_t sub_1018512EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  ++*(_DWORD *)(v1 + 80);
  return *(void *)(**(void **)v1 - 8);
}

_UNKNOWN **sub_101851318(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 2082;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, start event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  uint64_t v4 = a1[1];
  *(void *)(v4 + 88) = 0x7FF8000000000000;
  *(_DWORD *)(v4 + 80) = 0;
}

uint64_t sub_10185143C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_102343370;
  *(void *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 16) = 0;
  if ((*(void *)(a2 + 88) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *(unsigned char *)(a1 + 16) = 1;
    sub_1018517E8(a1);
  }
  else
  {
    double v3 = *(double *)(a2 + 72);
    double v4 = sub_10016C458();
    uint64_t v5 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v5 + 84))
    {
      double v6 = *(double *)(*(void *)(a1 + 8) + 88) - sub_10016C458();
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      double v7 = v6 + 10.0;
      __int16 v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#tt,fContinuousPulsingModeOn,1,timeUntilNextInterval,%f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023434F8);
        }
        __int16 v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssTimeTransfer::IdleState::IdleState(CLGnssTimeTransfer &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    else
    {
      double v7 = v3 - (v4 - *(double *)(v5 + 88));
    }
    if (v7 >= 1.0)
    {
      [*(id *)(*(void *)(a1 + 8) + 48) setNextFireDelay:v7];
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#tt, timer setNextFireDelay, %f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023434F8);
        }
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssTimeTransfer::IdleState::IdleState(CLGnssTimeTransfer &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    else
    {
      *(unsigned char *)(a1 + 16) = 1;
      sub_1018517E8(a1);
    }
  }
  return a1;
}

void sub_1018517E8(uint64_t a1)
{
  sub_1018502D8(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 84)) {
    double v3 = 3.0;
  }
  else {
    double v3 = 30.0;
  }
  [*(id *)(v2 + 48) setNextFireDelay:v3];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 84);
    *(_DWORD *)std::string buf = 134218240;
    double v8 = v3;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tt, timer setNextFireDelay,%f,continuousMode,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssTimeTransfer::IdleState::enableTT()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void *sub_1018519F0(void *a1)
{
  *a1 = off_102343370;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt, disable timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLGnssTimeTransfer::IdleState::~IdleState()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(a1[1] + 48) setNextFireDelay:1.79769313e308];
  return a1;
}

void sub_101851BB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101851BC8(void *a1)
{
  sub_1018519F0(a1);

  operator delete();
}

uint64_t sub_101851C00(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    double v7 = "";
    __int16 v8 = 2082;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, timer event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  *(unsigned char *)(a1 + 16) = 1;
  *(_DWORD *)(*(void *)(a1 + 8) + 80) = 0;
  sub_1018517E8(a1);
  return *(void *)(***(void ***)(a1 + 8) - 8);
}

_UNKNOWN **sub_101851D40(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = v5;
    __int16 v12 = 1026;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, state event\", \"state\":%{public, location:escape_only}s, \"enabled\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  if (a2 && *(unsigned char *)(a1 + 16) && *(unsigned char *)(a1 + 17)) {
  else
  }
    return *(_UNKNOWN ***)(***(void ***)(a1 + 8) - 8);
}

uint64_t sub_101851EA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 84)) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 6;
  }
  unsigned int v3 = *(_DWORD *)(v1 + 80) + 1;
  *(_DWORD *)(v1 + 80) = v3;
  if (v3 <= v2 || v3 % 0x64 == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      int v8 = *(_DWORD *)(v7 + 80);
      LODWORD(v7) = *(unsigned __int8 *)(v7 + 84);
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 1026;
      int v17 = v8;
      __int16 v18 = 1026;
      int v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, onFix\", \"NumFixesFromStart\":%{public}u, \"ContinuousMode\":%{public}d}", buf, 0x1Eu);
    }
    uint64_t v1 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v1 + 80) == v2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      uint64_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#tt, onFix, enabling", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023434F8);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::IdleState::onFix()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      *(unsigned char *)(a1 + 17) = 1;
      sub_1018517E8(a1);
      uint64_t v1 = *(void *)(a1 + 8);
    }
  }
  return *(void *)(**(void **)v1 - 8);
}

id sub_101852154(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 20);
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(v2 + 84);
  __int16 v14 = off_102343738;
  char v15 = v3;
  __int16 v16 = &v14;
  uint64_t v4 = *(void *)(v2 + 120);
  if (!v4) {
    sub_10015E48C();
  }
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(void *)v4 + 48))(v4, &v14);
  sub_100850860(&v14);
  if ((v5 & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#tt, failed to send command to pulse", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssTimeTransfer::ActiveState::pulse()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v8 = *(double *)(*(void *)(a1 + 8) + 64) + 0.5;
    *(_DWORD *)std::string buf = 134217984;
    double v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tt, timer setNextFireDelay, %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssTimeTransfer::ActiveState::pulse()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return [*(id *)(*(void *)(a1 + 8) + 48) setNextFireDelay:*(double *)(*(void *)(a1 + 8) + 64) + 0.5];
}

void sub_1018524EC(_Unwind_Exception *a1)
{
  sub_100850860((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *sub_101852508(void *a1)
{
  *a1 = off_1023433C0;
  [*(id *)(a1[1] + 48) setNextFireDelay:1.79769313e308];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt, disable timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLGnssTimeTransfer::ActiveState::~ActiveState()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return a1;
}

void sub_1018526D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1018526E0(void *a1)
{
  sub_101852508(a1);

  operator delete();
}

_UNKNOWN **sub_101852718(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    *(_DWORD *)std::string buf = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2082;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, timer event\", \"state\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#tt, did not receive a response to the previous pulse.  Stopping.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      __int16 v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual std::type_index CLGnssTimeTransfer::ActiveState::timer()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_101850040(*(void *)(a1 + 8));
  }
  else
  {
    sub_101852154(a1);
    return *(_UNKNOWN ***)(***(void ***)(a1 + 8) - 8);
  }
}

_UNKNOWN **sub_10185299C(void ***a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = ((uint64_t (*)(void ***))(*a1)[2])(a1);
    *(_DWORD *)std::string buf = 68289538;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = v5;
    __int16 v15 = 1026;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, state event\", \"state\":%{public, location:escape_only}s, \"enabled\":%{public}hhd}", buf, 0x22u);
  }
  if (a2) {
    return *(_UNKNOWN ***)(**a1[1] - 8);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#tt disabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::deviceTTState(BOOL)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

_UNKNOWN **sub_101852C1C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#tt, received data when not expecting.  Stopping", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      LOWORD(v40) = 0;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v35);
      if (v35 != buf) {
        free(v35);
      }
    }
    sub_101850040(*(void *)(a1 + 8));
    __int16 v9 = **(void ***)(a1 + 8);
    return *(_UNKNOWN ***)(*v9 - 8);
  }
  *(unsigned char *)(a1 + 16) = 0;
  if (!sub_101822038(a2)) {
    goto LABEL_45;
  }
  unint64_t v4 = *(void *)a2 / 0x2260FF9290000uLL;
  unint64_t v5 = *(void *)a2 % 0x2260FF9290000uLL / 0xF4240;
  if (sub_1004BDA4C(v4, v5))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v5;
      *(_WORD *)&buf[14] = 2050;
      *(void *)&uint8_t buf[16] = sub_1004BD97C();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#tt,imag,1,NotSettingTime,Gpsweek,%{public}d,GpsTowMs,%{public}d,BuildDate,%{public}.0lf", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      LODWORD(v40) = 67240704;
      DWORD1(v40) = v4;
      WORD4(v40) = 1026;
      *(_DWORD *)((char *)&v40 + 10) = v5;
      HIWORD(v40) = 2050;
      double v41 = sub_1004BD97C();
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v7);
LABEL_82:
      if (v7 != buf) {
        free(v7);
      }
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  unint64_t v10 = *(void *)(a2 + 40);
  if (v10 && (*(void *)a2 < v10 || *(void *)a2 > v10 + 604800000000000))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    int v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v20 = *(void *)(a2 + 40) / 0x2260FF9290000uLL;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning,#tt,NotSettingTime,GpsWeek,%{public}d,ExtEphGpsWeek,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      unint64_t v39 = *(void *)(a2 + 40) / 0x2260FF9290000uLL;
      LODWORD(v40) = 67240448;
      DWORD1(v40) = v4;
      WORD4(v40) = 1026;
      *(_DWORD *)((char *)&v40 + 10) = v39;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v7);
      goto LABEL_82;
    }
LABEL_45:
    if (*(unsigned char *)(*(void *)(a1 + 8) + 40))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      uint64_t v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#tt,#warning,#imag,ignoring TT pulse", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_58;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_73:
        LOWORD(v40) = 0;
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v36);
        if (v36 != buf) {
          free(v36);
        }
LABEL_58:
        BOOL v16 = 0;
        goto LABEL_59;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023434F8);
      }
      int v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#tt,#warning,not sending TT to TM.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_58;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_73;
      }
    }
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
    goto LABEL_73;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  __int16 v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v12 = *(void *)(a2 + 40) / 0x2260FF9290000uLL;
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#tt,GpsWeek,%{public}d,ExtEphGpsWeek,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023434F8);
    }
    unint64_t v37 = *(void *)(a2 + 40) / 0x2260FF9290000uLL;
    LODWORD(v40) = 67240448;
    DWORD1(v40) = v4;
    WORD4(v40) = 1026;
    *(_DWORD *)((char *)&v40 + 10) = v37;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v13 + 40) || *(unsigned char *)(v13 + 84)) {
    goto LABEL_45;
  }
  sub_101850570((uint64_t)&v40, a2);
  BOOL v15 = *((double *)&v40 + 1) != 0.0 && (void)v40 != 0x8000000000000000;
  BOOL v16 = *(float *)&v41 > 0.0 && v15;
  if (v16)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102489098, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_102489098))
    {
      *(_OWORD *)&buf[32] = unk_102343448;
      *(_OWORD *)uint64_t v43 = unk_102343458;
      *(_OWORD *)&v43[16] = unk_102343468;
      *(_OWORD *)std::string buf = unk_102343428;
      *(_OWORD *)&uint8_t buf[16] = unk_102343438;
      sub_101853E18((uint64_t)&unk_102489080, (int *)buf, 5);
      __cxa_atexit((void (*)(void *))sub_1018537A0, &unk_102489080, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102489098);
    }
    uint64_t v17 = *(void *)(a1 + 8);
    int v18 = LODWORD(v41);
    *(_OWORD *)(v17 + 16) = v40;
    *(_DWORD *)(v17 + 32) = v18;
    +[NSString stringWithUTF8String:*sub_1000A43BC((uint64_t)&unk_102489080, (int *)(a2 + 64))];
    TMProvideBBTime();
  }
LABEL_59:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023434F8);
  }
  uint64_t v23 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)a2;
    double v25 = *(float *)(a2 + 8);
    int v26 = *(unsigned __int8 *)(a2 + 12);
    int v27 = *(_DWORD *)(a2 + 16);
    uint64_t v29 = *(void *)(a2 + 24);
    uint64_t v28 = *(void *)(a2 + 32);
    uint64_t v30 = *(void *)(a2 + 48);
    uint64_t v31 = *(void *)(a2 + 56);
    int v32 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 84);
    *(_DWORD *)std::string buf = 68291586;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&unsigned char buf[20] = v24;
    *(_WORD *)&buf[28] = 2050;
    *(void *)&buf[30] = v28;
    *(_WORD *)&buf[38] = 2050;
    *(double *)&buf[40] = v25;
    *(_WORD *)uint64_t v43 = 1026;
    *(_DWORD *)&v43[2] = v26;
    *(_WORD *)&_DWORD v43[6] = 1026;
    *(_DWORD *)&v43[8] = v27;
    *(_WORD *)&v43[12] = 2050;
    *(void *)&v43[14] = v29;
    *(_WORD *)&v43[22] = 2050;
    *(void *)&v43[24] = v30;
    __int16 v44 = 2050;
    uint64_t v45 = v31;
    __int16 v46 = 1026;
    BOOL v47 = v16;
    __int16 v48 = 1026;
    int v49 = v32;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt,bbPulseTime\", \"gps time ns\":%{public}llu, \"bias ns\":%{public}lld, \"uncertainty\":\"%{public}f\", \"leap seconds valid\":%{public}hhd, \"leap seconds\":%{public}d, \"receiver clock\":%{public}llu, \"time before pulse\":%{public}llu, \"time after pulse\":%{public}llu, \"sent to timed\":%{public}hhd, \"continuousMode\":%{public}d}", buf, 0x66u);
  }
  uint64_t v33 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v33 + 84) || *(_DWORD *)(a1 + 20) < *(_DWORD *)(v33 + 56))
  {
    __int16 v9 = *(void **)v33;
    return *(_UNKNOWN ***)(*v9 - 8);
  }
  sub_101850040(v33);
}

void sub_101853780(_Unwind_Exception *a1)
{
}

uint64_t sub_1018537A0(uint64_t a1)
{
  return a1;
}

const char *sub_1018537CC()
{
  return "NotAllowedState";
}

const char *sub_1018537D8()
{
  return "IdleState";
}

const char *sub_1018537E4()
{
  return "ActiveState";
}

void sub_1018537F0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101853820(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1018538BC()
{
}

void *sub_1018538D0()
{
  BOOL result = operator new(0x10uLL);
  void *result = off_102343528;
  return result;
}

void sub_101853908(uint64_t a1, void *a2)
{
  *a2 = off_102343528;
}

uint64_t sub_101853930(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
}

uint64_t sub_101853958(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102343598)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101853998()
{
  return &off_102343598;
}

void sub_1018539A8()
{
}

__n128 sub_1018539BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023435B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101853A08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023435B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_101853A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v6[0] = off_102343628;
  v6[1] = v2;
  void v6[3] = v6;
  uint64_t v3 = *(void *)(a1 + 16);
  v5[0] = off_1023436A8;
  v5[1] = v3;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *, void *))(*(void *)a2 + 224))(a2, v6, v5);
  sub_10183C300(v5);
  return sub_10065ABCC(v6);
}

void sub_101853B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_10183C300((uint64_t *)va);
  sub_10065ABCC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_101853B38(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102343718)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101853B78()
{
  return &off_102343718;
}

void sub_101853B88()
{
}

void *sub_101853B9C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102343628;
  result[1] = v3;
  return result;
}

uint64_t sub_101853BE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102343628;
  a2[1] = v2;
  return result;
}

BOOL sub_101853C10(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = **(void ***)(a1 + 8);
  uint64_t v3 = (*(uint64_t (**)(void *, void))(*v2 + 40))(v2, *a2);
  unint64_t v4 = (void *)v2[1];

  return sub_101850628(v4, v3);
}

uint64_t sub_101853C78(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102343688)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101853CB8()
{
  return &off_102343688;
}

void sub_101853CC8()
{
}

void *sub_101853CDC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023436A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101853D24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023436A8;
  a2[1] = v2;
  return result;
}

BOOL sub_101853D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void ****)(a1 + 8);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 48);
  _DWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  uint64_t v5 = ((uint64_t (*)(void **, _OWORD *))(*v2)[6])(v2, v7);
  return sub_101850628(v2[1], v5);
}

uint64_t sub_101853DCC(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102343708)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101853E0C()
{
  return &off_102343708;
}

uint64_t sub_101853E18(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_1002CF424((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_101853E80(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_101853E9C()
{
}

unsigned char *sub_101853EB0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_102343738;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_101853EFC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_102343738;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t sub_101853F2C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 240))(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_101853F5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101853F9C()
{
}

void *sub_101853FA8(void *a1, uint64_t a2)
{
  *a1 = 0xC11FA40000000000;
  sub_101845104((uint64_t)(a1 + 1), a2);
  if (a1[4])
  {
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1018541E8(qword_1024193D0 == -1);
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_1023437A8);
LABEL_3:
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssInterference, CLLTEBand13Band14Handler construction", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023437A8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLLTEBand13Band14Handler::CLLTEBand13Band14Handler(CLLTEHandlerCallBack)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return a1;
}

void sub_101854194(_Unwind_Exception *a1)
{
  sub_10085294C(v1);
  _Unwind_Resume(a1);
}

void sub_1018541B8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018541E8(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193D0, &stru_1023437A8);
  }
  uint64_t v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023437A8);
    }
  }
  uint64_t v2 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023437A8);
    }
  }
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

uint64_t sub_1018543A8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 49) = a4;
  sub_100103240();
  if ((sub_10073C990() & 1) != 0 || (sub_100103240(), sub_10073C6AC()))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023437C8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Constructing CLIceController", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023437C8);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLModemController::CLModemController(dispatch_queue_t, BOOL, BOOL)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    operator new();
  }
  if (sub_10073CCBC())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023437C8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Constructing CLEurekaModemController", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023437C8);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLModemController::CLModemController(dispatch_queue_t, BOOL, BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    operator new();
  }
  *(void *)std::string buf = off_1023437F8;
  uint64_t v11 = a1;
  unint64_t v12 = buf;
  sub_101854ACC(buf, (void *)a1);
  sub_1017DBDAC(buf);
  return a1;
}

void sub_101854768(_Unwind_Exception *a1)
{
  sub_101854870(v3, 0);
  sub_101854820(v2, 0);
  sub_1017DBDAC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018547E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1017DB88C(a2, a1);
}

void sub_1018547F0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101854820(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101994810();
    operator delete();
  }
  return result;
}

uint64_t sub_101854870(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1017BD000(result);
    operator delete();
  }
  return result;
}

void sub_1018548C4()
{
}

void *sub_1018548D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1023437F8;
  result[1] = v3;
  return result;
}

uint64_t sub_101854920(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023437F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10185494C(uint64_t a1, uint64_t a2)
{
  sub_101854A4C((uint64_t)v4, a2);
  if (!v5) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void))(*(void *)v5 + 48))(v5, *(void *)(a1 + 8));
  sub_1017DD378(v4);
  return 1;
}

void sub_1018549EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DD378((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101854A00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101854A40()
{
}

uint64_t sub_101854A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_101854ACC(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101854D2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101854D38(uint64_t *a1, uint64_t a2)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v6, 0);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109378;
    int v12 = 0;
    __int16 v13 = 2080;
    uint64_t v14 = "QMI_PDS_RESET";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v7 = 67109378;
    int v8 = 0;
    __int16 v9 = 2080;
    unint64_t v10 = "QMI_PDS_RESET";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendReset(void (^)(const pds::reset::Response &)) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_101854F54(*a1, (QMIServiceMsg *)v6, a2);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v6);
}

void sub_101854F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101854F54(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10185F984;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101855000(void *a1, unsigned __int8 **a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t buf = 0x104000202;
    __int16 v21 = 2080;
    int v22 = "QMI_PDS_SET_EVENT_REPORT";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", (uint8_t *)&buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v17 = (ATCSCounted *)0x104000202;
    __int16 v18 = 2080;
    int v19 = "QMI_PDS_SET_EVENT_REPORT";
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const", "%s\n", v16);
    if (v16 != (char *)&buf) {
      free(v16);
    }
  }
  uint64_t v6 = a2 + 1;
  uint64_t v5 = a2[1];
  unint64_t v7 = 126 - 2 * __clz((v5 - *a2) >> 1);
  if (v5 == *a2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  sub_10185FD5C(*a2, v5, v8, 1);
  __int16 v9 = sub_1018608B4(*a2, *v6);
  if (*v6 == v9)
  {
    sub_10185F944(&v17, (QMIServiceMsg *)1);
    BOOL v15 = *a2;
    uint64_t v14 = a2[1];
    while (v15 != v14)
    {
      QMIServiceMsg::createTlv(&buf, v17, *v15, 1u);
      Tlv::Writer::putByte((Tlv::Writer *)&buf, v15[1]);
      v15 += 2;
    }
    (*(void (**)(void, ATCSCounted *, Block_layout *))(*(void *)*a1 + 16))(*a1, v17, &stru_102343878);
    ATCSCounted::decRef(v17);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    unint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      unsigned __int8 v11 = *v9;
      LODWORD(buf) = 16908544;
      BYTE4(buf) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "At least one duplicate tlv %{public}hhu", (uint8_t *)&buf, 5u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      unsigned __int8 v12 = *v9;
      LODWORD(v17) = 16908544;
      BYTE4(v17) = v12;
      __int16 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
  }
}

void sub_1018553FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, ATCSCounted *a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101855434(id a1, const void *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Recvd,QMI", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*((_WORD *)a2 + 22))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v5 = *((unsigned __int16 *)a2 + 6);
      int v6 = *((unsigned __int16 *)a2 + 22);
      *(_DWORD *)uint64_t buf = 67240448;
      int v10 = v5;
      __int16 v11 = 1026;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "QMI response=0x%{public}02x,code:0x%{public}02x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_101855738(uint64_t *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109378;
    int v7 = 32;
    __int16 v8 = 2080;
    __int16 v9 = "QMI_PDS_GET_GPS_SERVICE_STATE";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendGetServiceState(void (^)(const pds::getServiceState::Response &)) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)buf, 0x20u);
  sub_101855958(*a1, (QMIServiceMsg *)buf, a2);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_10185593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101855958(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101860948;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101855A04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v9 = 33;
    __int16 v10 = 2080;
    __int16 v11 = "QMI_PDS_SET_GPS_SERVICE_STATE";
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,allowedServices, 0x%08llX\n", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetServiceState(std::underlying_type<qmi::pds::ServiceState>::type, void (^)(const pds::setServiceState::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1019BDD54(a2, (qmi::MutableMessageBase *)buf);
  sub_101855C48(*a1, (QMIServiceMsg *)buf, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_101855C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101855C48(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101860BE4;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101855CF4(uint64_t *a1, char a2, int a3, int a4, int a5, uint64_t a6)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  __int16 v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 42;
    __int16 v16 = 2080;
    *(_DWORD *)uint64_t buf = 67110402;
    uint64_t v17 = "QMI_PDS_SET_DEFAULT_TRACKING_SESSION";
    __int16 v18 = 256;
    char v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,mode, %hhu, timeout, %hhu, interval,%u, accuracy, %u", buf, 0x27u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetDefaultTrackingSession(qmi::pds::SessionOperatingMode_t, uint8_t, uint32_t, uint32_t, void (^)(const pds::setDefaultTrackingSession::Response &)) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_1019BE068(a2, a3, a4, a5, (qmi::MutableMessageBase *)buf);
  sub_101855F90(*a1, (QMIServiceMsg *)buf, a6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_101855F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101855F90(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101860FBC;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185603C(uint64_t *a1, int a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v9 = 49;
    __int16 v10 = 2080;
    __int16 v11 = "QMI_PDS_SET_AUTO_TRACKING_STATE";
    __int16 v12 = 1024;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable, %d\n", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetAutoTrackingState(BOOL, void (^)(const pds::setAutoTrackingState::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1019BE0E0(a2, (qmi::MutableMessageBase *)buf);
  sub_101856280(*a1, (QMIServiceMsg *)buf, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_101856264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101856280(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101861394;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185632C(uint64_t *a1, uint64_t a2)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v6, 0x2Du);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109378;
    int v12 = 45;
    __int16 v13 = 2080;
    uint64_t v14 = "QMI_PDS_FORCE_XTRA_DOWNLOAD";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v7 = 67109378;
    int v8 = 45;
    __int16 v9 = 2080;
    __int16 v10 = "QMI_PDS_FORCE_XTRA_DOWNLOAD";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendForceXTRADownload(void (^)(const pds::forceXTRADownload::Response &)) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_101856550(*a1, (QMIServiceMsg *)v6, a2);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v6);
}

void sub_101856530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101856550(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186176C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_1018565FC(uint64_t *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11)
{
  sub_1019BDDC8(a3, a4, a5, a6, a7, a8, a9, (qmi::MutableMessageBase *)v22, a10);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  __int16 v18 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67111682;
    int v46 = 52;
    __int16 v47 = 2080;
    __int16 v48 = "QMI_PDS_RESET_GPS_SERVICE_DATA";
    __int16 v49 = 1024;
    int v50 = a2;
    __int16 v51 = 1024;
    int v52 = a3;
    __int16 v53 = 1024;
    int v54 = a4;
    __int16 v55 = 1024;
    int v56 = a5;
    __int16 v57 = 1024;
    int v58 = a6;
    __int16 v59 = 1024;
    int v60 = a7;
    __int16 v61 = 1024;
    int v62 = a8;
    __int16 v63 = 1024;
    int v64 = a9;
    __int16 v65 = 1024;
    int v66 = a10;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,resetGpsServiceData,gpsDataMask,%x,cell,%x,common,%x,gps,%x,glo,%x,bds,%x,qzss,%x,gal,%x,nic,%x", buf, 0x48u);
  }
  char v19 = a1;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v23 = 67111682;
    int v24 = 52;
    __int16 v25 = 2080;
    int v26 = "QMI_PDS_RESET_GPS_SERVICE_DATA";
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 1024;
    int v30 = a3;
    __int16 v31 = 1024;
    int v32 = a4;
    __int16 v33 = 1024;
    int v34 = a5;
    __int16 v35 = 1024;
    int v36 = a6;
    __int16 v37 = 1024;
    int v38 = a7;
    __int16 v39 = 1024;
    int v40 = a8;
    __int16 v41 = 1024;
    int v42 = a9;
    __int16 v43 = 1024;
    int v44 = a10;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendResetGpsServiceState(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, void (^)(const pds::resetGpsServiceData::Response &)) const", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  sub_10185691C(*v19, (QMIServiceMsg *)v22, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
}

void sub_1018568FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185691C(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101861B44;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_1018569C8(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C4038(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 95;
    __int16 v17 = 2080;
    __int16 v18 = "QMI_PDS_EXT_SET_CELLDB_CONTROL";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,mask,%x", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 95;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_EXT_SET_CELLDB_CONTROL";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetCellDbControlMask(uint32_t, void (^)(const pds::setCellDbControlMask::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_101856C10(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_101856BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101856C10(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101861F1C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101856CBC(uint64_t *a1, int a2, int a3, void *a4, uint64_t a5)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12, 0x37u);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109890;
    int v22 = 55;
    __int16 v23 = 2080;
    int v24 = "QMI_PDS_INJECT_XTRA_DATA";
    __int16 v25 = 1024;
    int v26 = a2;
    __int16 v27 = 1024;
    int v28 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,seqNum,%d,totalLen,%d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v13 = 67109890;
    int v14 = 55;
    __int16 v15 = 2080;
    int v16 = "QMI_PDS_INJECT_XTRA_DATA";
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectXTRAData(uint8_t, uint32_t, const std::vector<uint8_t> &, void (^)(const pds::injectXTRAData::Response &)) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (sub_1019C4AF4(a2, a3, a4, (uint64_t)v12)) {
    sub_101856F3C(*a1, (QMIServiceMsg *)v12, a5);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_101856F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101856F3C(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1018622F4;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101856FE8(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 61;
    __int16 v16 = 2080;
    *(_DWORD *)uint64_t buf = 67110402;
    __int16 v17 = "QMI_PDS_INJECT_ABSOLUTE_TIME_REF";
    __int16 v18 = 2048;
    uint64_t v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,timeMs,%llu,timeUncMs,%u,timeBase,%u,forceFlag,%d\n", buf, 0x2Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectAbsoluteTimeRef(uint64_t, uint32_t, qmi::pds::AbsoluteTimeBase, BOOL, void (^)(const pds::injectAbsTimeRef::Response &)) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_1019BE134(a2, a3, a4, a5, (qmi::MutableMessageBase *)buf);
  sub_101857284(*a1, (QMIServiceMsg *)buf, a6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_101857268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101857284(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1018626CC;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101857330(uint64_t *a1, int a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11, 0x49u);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1018575DC;
  v9[3] = &unk_102343898;
  char v10 = a2;
  int v6 = sub_101862AA4((uint64_t)v11, 1);
  sub_1018575DC((uint64_t)v9, v6);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v19 = 73;
    __int16 v20 = 2080;
    int v21 = "QMI_PDS_SET_FORCE_RECEIVER_OFF";
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,forceReceiverOff, %d\n", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v12 = 67109634;
    int v13 = 73;
    __int16 v14 = 2080;
    int v15 = "QMI_PDS_SET_FORCE_RECEIVER_OFF";
    __int16 v16 = 1024;
    int v17 = a2;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendForceReceiverOff(BOOL, void (^)(const pds::forceReceiverOff::Response &)) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_1018575E8(*a1, (QMIServiceMsg *)v11, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_1018575BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018575DC(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t sub_1018575E8(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101862CE0;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101857694(uint64_t *a1, int a2, int a3, int a4, uint64_t a5)
{
  sub_1019BE228(a2, a3, a4, (qmi::MutableMessageBase *)v12);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110146;
    int v24 = 83;
    __int16 v25 = 2080;
    int v26 = "QMI_PDS_INJECT_TIME_SYNC_DATA";
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 1024;
    int v30 = a3;
    __int16 v31 = 1024;
    int v32 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,refCounter,%d,sensorProcRxTime,%d,sensorProcTxTime,%d\n", buf, 0x24u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v13 = 67110146;
    int v14 = 83;
    __int16 v15 = 2080;
    __int16 v16 = "QMI_PDS_INJECT_TIME_SYNC_DATA";
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectTimeSyncData(uint32_t, uint32_t, uint32_t, void (^)(const pds::injectTimeSyncData::Response &)) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_101857914(*a1, (QMIServiceMsg *)v12, a5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_1018578F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101857914(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1018630B8;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_1018579C0(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019BE310(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 133;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_TIME_TRANSFER_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,TimeTransferConfig,%u\n", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 133;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_TIME_TRANSFER_CONFIG";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetTimeTransferConfig(qmi::pds::TimeTransferConfig, void (^)(const pds::setTimeTransferConfig::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_101857C08(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_101857BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101857C08(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101863490;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101857CB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1019BE3D4(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 135;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_INJECT_CLIENT_TIME_NS_REQ";
    __int16 v19 = 2048;
    uint64_t v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,pulseTime,%llun", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 135;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_INJECT_CLIENT_TIME_NS_REQ";
    __int16 v13 = 2048;
    uint64_t v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSendClientPulseTime(uint64_t, void (^)(const pds::sendClientPulseTime::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_101857EFC(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_101857EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101857EFC(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101863824;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101857FA8(uint64_t *a1, int a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11, 0x5558u);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_101858254;
  v9[3] = &unk_1023438B8;
  char v10 = a2;
  int v6 = sub_101863BFC((uint64_t)v11, 1);
  sub_101858254((uint64_t)v9, v6);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v19 = 21848;
    __int16 v20 = 2080;
    __int16 v21 = "QMI_PDS_EXT_SET_DPO_STATUS_REPORT";
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d\n", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v12 = 67109634;
    int v13 = 21848;
    __int16 v14 = 2080;
    __int16 v15 = "QMI_PDS_EXT_SET_DPO_STATUS_REPORT";
    __int16 v16 = 1024;
    int v17 = a2;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetDPOStatusReport(BOOL, void (^)(const pds::setDpoStatusReport::Response &)) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_101858260(*a1, (QMIServiceMsg *)v11, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_101858234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101858254(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t sub_101858260(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101863E38;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185830C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12, 0xA3u);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_1018585C0;
  v11[3] = &unk_1023438D8;
  _OWORD v11[4] = a2;
  int v6 = sub_1018641CC((uint64_t)v12, 1);
  sub_1018585C0((uint64_t)v11, v6);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *a2;
    *(_DWORD *)uint64_t buf = 67109634;
    int v20 = 163;
    __int16 v21 = 2080;
    __int16 v22 = "QMI_PDS_SET_GNSS_REPORTING_CONFIG";
    __int16 v23 = 1026;
    int v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,#gnssmeas,config,0x%{public}x", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v9 = *a2;
    int v13 = 67109634;
    int v14 = 163;
    __int16 v15 = 2080;
    __int16 v16 = "QMI_PDS_SET_GNSS_REPORTING_CONFIG";
    __int16 v17 = 1026;
    int v18 = v9;
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendGnssReportingConfig(const pds::tlv::GnssReportingConfig &, void (^)(const pds::SetGnssReportingConfig::Response &)) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_1018585D0(*a1, (QMIServiceMsg *)v12, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_1018585A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018585C0(uint64_t result, void *a2)
{
  *a2 = **(void **)(result + 32);
  return result;
}

uint64_t sub_1018585D0(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101864468;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185867C(uint64_t *a1, int a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11, 0xADu);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_101858928;
  v9[3] = &unk_1023438F8;
  char v10 = a2;
  int v6 = sub_101864840((uint64_t)v11, 1);
  sub_101858928((uint64_t)v9, v6);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v19 = 173;
    __int16 v20 = 2080;
    __int16 v21 = "QMI_PDS_SET_MULTIBAND_STATE";
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,multiband,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v12 = 67109634;
    int v13 = 173;
    __int16 v14 = 2080;
    __int16 v15 = "QMI_PDS_SET_MULTIBAND_STATE";
    __int16 v16 = 1024;
    int v17 = a2;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendMultibandConfig(BOOL, void (^)(const pds::SetMultibandState::Response &)) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_101858934(*a1, (QMIServiceMsg *)v11, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_101858908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101858928(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t sub_101858934(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101864A7C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_1018589E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 24))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v7 = *(float *)a2;
      double v8 = *(float *)(a2 + 4);
      int v9 = *(_DWORD *)(a2 + 8);
      int v10 = *(char *)(a2 + 12);
      double v11 = *(float *)(a2 + 16);
      int v12 = *(unsigned __int8 *)(a2 + 24);
      double v13 = *(float *)(a2 + 28);
      double v14 = *(float *)(a2 + 32);
      double v15 = *(float *)(a2 + 36);
      double v16 = *(float *)(a2 + 40);
      int v17 = *(_DWORD *)(a2 + 44);
      int v18 = *(_DWORD *)(a2 + 48);
      int v19 = *(unsigned __int8 *)(a2 + 52);
      int v20 = *(unsigned __int8 *)(a2 + 53);
      int v21 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)uint64_t buf = 67113218;
      int v34 = 87;
      __int16 v35 = 2080;
      int v36 = "QMI_PDS_SET_NAVIGATION_CONFIG";
      __int16 v37 = 2048;
      double v38 = v7;
      __int16 v39 = 2048;
      double v40 = v8;
      __int16 v41 = 1024;
      int v42 = v9;
      __int16 v43 = 1024;
      int v44 = v10;
      __int16 v45 = 2048;
      double v46 = v11;
      __int16 v47 = 1024;
      int v48 = v12;
      __int16 v49 = 2048;
      double v50 = v13;
      __int16 v51 = 2048;
      double v52 = v14;
      __int16 v53 = 2048;
      double v54 = v15;
      __int16 v55 = 2048;
      double v56 = v16;
      __int16 v57 = 1024;
      int v58 = v17;
      __int16 v59 = 1024;
      int v60 = v18;
      __int16 v61 = 1024;
      int v62 = v19;
      __int16 v63 = 1024;
      int v64 = v20;
      __int16 v65 = 1024;
      int v66 = v21;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,GyroDataVariance,%.12g,GyroBiasRandomWalk,%.12g,VirtualGyroGravityAvgLength,%u,HeadingFilterMode,%d,VelocityConstraintVariance,%.12g,UseEnhancedSettings,%d,VelocityRandomWalkSpectralDensity,%.12g,AccelerationRandomWalkSpectralDensity,%.12g,AngleRandomWalkSpectalDensity,%.12g,RateRandomWalkSpectralDensity,%.12g,SensorAlgorithmConfig,%u,MaximumDeadReckoningTime_s,%u,InsFilterCrossCheckSigmaLowThreshold,%u,InsFilterCrossCheckSigmaHighThreshold,%u,MaxVehicleDeadReckoningTime,%u\n", buf, 0x88u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_25:
        int v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetNavigationConfig(const qmi::pds::NavigationConfig &, void (^)(const pds::setNavigationConfig::Response &)) const", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
        goto LABEL_14;
      }
LABEL_27:
      dispatch_once(&qword_1024193D0, &stru_102343918);
      goto LABEL_25;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    __int16 v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v23 = *(float *)a2;
      double v24 = *(float *)(a2 + 4);
      int v25 = *(_DWORD *)(a2 + 8);
      int v26 = *(char *)(a2 + 12);
      double v27 = *(float *)(a2 + 16);
      int v28 = *(unsigned __int8 *)(a2 + 24);
      *(_DWORD *)uint64_t buf = 67110914;
      int v34 = 87;
      __int16 v35 = 2080;
      int v36 = "QMI_PDS_SET_NAVIGATION_CONFIG";
      __int16 v37 = 2048;
      double v38 = v23;
      __int16 v39 = 2048;
      double v40 = v24;
      __int16 v41 = 1024;
      int v42 = v25;
      __int16 v43 = 1024;
      int v44 = v26;
      __int16 v45 = 2048;
      double v46 = v27;
      __int16 v47 = 1024;
      int v48 = v28;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,GyroDataVariance,%.12g,GyroBiasRandomWalk,%.12g,VirtualGyroGravityAvgLength,%u,HeadingFilterMode,%d,VelocityConstraintVariance,%.12g,UseEnhancedSettings,%d\n", buf, 0x42u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
  }
LABEL_14:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  __int16 v29 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v30 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)uint64_t buf = 67109634;
    int v34 = 87;
    __int16 v35 = 2080;
    int v36 = "QMI_PDS_SET_NAVIGATION_CONFIG";
    __int16 v37 = 1024;
    LODWORD(v38) = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,PositioningMethod,0x%x\n", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    __int16 v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetNavigationConfig(const qmi::pds::NavigationConfig &, void (^)(const pds::setNavigationConfig::Response &)) const", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
  }
  sub_1019BE498(a2, (qmi::MutableMessageBase *)buf);
  sub_101859148(*a1, (QMIServiceMsg *)buf, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
}

void sub_10185912C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_101859148(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101864E54;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_1018591F4(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  sub_1019BE650(a2, a3, (qmi::MutableMessageBase *)v13, a5, a6);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  double v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110146;
    int v25 = 142;
    __int16 v26 = 2080;
    double v27 = "QMI_PDS_INJECT_SPEED_DATA";
    __int16 v28 = 1024;
    int v29 = a2;
    __int16 v30 = 2048;
    double v31 = a5;
    __int16 v32 = 2048;
    double v33 = a6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,timeType,%d,speed,%.2f,speedUncertainty,%.2f\n", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v14 = 67110146;
    int v15 = 142;
    __int16 v16 = 2080;
    int v17 = "QMI_PDS_INJECT_SPEED_DATA";
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 2048;
    double v21 = a5;
    __int16 v22 = 2048;
    double v23 = a6;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectSpeedData(qmi::pds::QMISpeedDataTimeType, uint64_t, float, float, void (^)(const pds::injectSpeedData::Response &)) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_101859488(*a1, (QMIServiceMsg *)v13, a4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_101859468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101859488(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186522C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_101859534(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7)
{
  sub_1019BE6D8(a2, a3, a4, (qmi::MutableMessageBase *)v16, a6, a7);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110658;
    int v32 = 151;
    __int16 v33 = 2080;
    int v34 = "QMI_PDS_INJECT_SPEED_INEQUALITY_CONSTRAINT";
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 2048;
    uint64_t v38 = a3;
    __int16 v39 = 1024;
    int v40 = a4;
    __int16 v41 = 2048;
    double v42 = a6;
    __int16 v43 = 2048;
    double v44 = a7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,timeType,%d,timestamp,%llu,validityDuration,%d,speedMinBound,%.2f,speedMaxBound,%.2f", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v17 = 67110658;
    int v18 = 151;
    __int16 v19 = 2080;
    __int16 v20 = "QMI_PDS_INJECT_SPEED_INEQUALITY_CONSTRAINT";
    __int16 v21 = 1024;
    int v22 = a2;
    __int16 v23 = 2048;
    uint64_t v24 = a3;
    __int16 v25 = 1024;
    int v26 = a4;
    __int16 v27 = 2048;
    double v28 = a6;
    __int16 v29 = 2048;
    double v30 = a7;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectSpeedInequalityConstraint(qmi::pds::QMISpeedInequalityConstraintTimeType, uint64_t, uint32_t, float, float, void (^)(const pds::injectSpeedInequalityConstraint::Response &)) const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_101859800(*a1, (QMIServiceMsg *)v16, a5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_1018597E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101859800(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101865604;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_1018598AC(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, double a10, float a11, float a12, float a13, float a14, float a15, float a16, unsigned __int8 a17, unsigned __int8 a18, uint64_t a19)
{
  if (a12 <= 0.0 && (a14 <= 0.0 || a15 <= 0.0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    __int16 v43 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)double v85 = 0;
      *(_WORD *)&v85[4] = 2082;
      *(void *)&v85[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#cpi,Both circular and ellipsoidal uncertainty missing\"}", buf, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
    }
    uint64_t v44 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)double v85 = 0;
      *(_WORD *)&v85[4] = 2082;
      *(void *)&v85[6] = "";
      __int16 v39 = "#bb.e,#cpi,Both circular and ellipsoidal uncertainty missing";
      int v40 = "{\"msg%{public}.0s\":\"#bb.e,#cpi,Both circular and ellipsoidal uncertainty missing\"}";
      __int16 v41 = v44;
      uint32_t v42 = 18;
      goto LABEL_31;
    }
  }
  else
  {
    if (a17 - 1 <= 0x63 && a18 - 1 < 0x64)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      __int16 v33 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(void *)double v85 = a2;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#tb,sendInjectPositionData,gpsTimestamp,%llu", buf, 0xCu);
      }
      int v34 = a4;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343918);
        }
        int v50 = 134217984;
        *(void *)__int16 v51 = a2;
        __int16 v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectPositionData(const uint64_t, const double, const double, const float, const float, const float, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiPositionSource, const qmi::pds::QmiAltSource, const qmi::pds::QmiAltSourceLinkage, const qmi::pds::QmiAltUncCoverage, const uint8_t, const uint8_t, const float, const float, const float, void (^)(const pds::injectPositionData::Response &)) const", "%s\n", v45);
        int v34 = a4;
        if (v45 != (char *)buf) {
          free(v45);
        }
      }
      char v35 = sub_10073CCBC();
      sub_1019BE7BC(v35, a2, a3, v34, a5, a6, a7, a8, (qmi::MutableMessageBase *)v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v36 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67113475;
        *(_DWORD *)double v85 = 56;
        *(_WORD *)&v85[4] = 2080;
        *(void *)&v85[6] = "QMI_PDS_INJECT_POSITION_DATA";
        __int16 v86 = 2049;
        *(double *)double v87 = a9;
        *(_WORD *)&v87[8] = 2049;
        double v88 = a10;
        __int16 v89 = 2048;
        double v90 = a11;
        __int16 v91 = 2048;
        double v92 = a12;
        __int16 v93 = 2048;
        double v94 = a13;
        __int16 v95 = 1024;
        int v96 = a17;
        __int16 v97 = 1024;
        int v98 = a18;
        __int16 v99 = 1024;
        int v100 = a5;
        __int16 v101 = 1024;
        int v102 = a6;
        __int16 v103 = 1024;
        int v104 = a7;
        __int16 v105 = 1024;
        int v106 = a8;
        __int16 v107 = 2048;
        double v108 = a14;
        __int16 v109 = 2048;
        double v110 = a15;
        __int16 v111 = 2048;
        double v112 = a16;
        __int16 v113 = 1024;
        int v114 = a3;
        __int16 v115 = 1024;
        int v116 = v34;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,#cpi,lat,%{private}.7f,lon,%{private}.7f,alt,%.1f,hunc,%.1f,vunc,%.1f,hcnf,%d,vcnf,%d,src,%d,altSrc,%d,altLinkage,%d,altUncCov,%d,huncSemiMajor,%.1f,huncSemiMinor,%.1f,huncSemiMajorAz,%.2f,hrel,%d,vrel,%d\n", buf, 0x92u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343918);
        }
        int v50 = 67113475;
        *(_DWORD *)__int16 v51 = 56;
        *(_WORD *)&v51[4] = 2080;
        *(void *)&v51[6] = "QMI_PDS_INJECT_POSITION_DATA";
        __int16 v52 = 2049;
        double v53 = a9;
        __int16 v54 = 2049;
        double v55 = a10;
        __int16 v56 = 2048;
        double v57 = a11;
        __int16 v58 = 2048;
        double v59 = a12;
        __int16 v60 = 2048;
        double v61 = a13;
        __int16 v62 = 1024;
        int v63 = a17;
        __int16 v64 = 1024;
        int v65 = a18;
        __int16 v66 = 1024;
        int v67 = a5;
        __int16 v68 = 1024;
        int v69 = a6;
        __int16 v70 = 1024;
        int v71 = a7;
        __int16 v72 = 1024;
        int v73 = a8;
        __int16 v74 = 2048;
        double v75 = a14;
        __int16 v76 = 2048;
        double v77 = a15;
        __int16 v78 = 2048;
        double v79 = a16;
        __int16 v80 = 1024;
        int v81 = a3;
        __int16 v82 = 1024;
        int v83 = a4;
        double v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectPositionData(const uint64_t, const double, const double, const float, const float, const float, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiReliabilityIndication, const qmi::pds::QmiPositionSource, const qmi::pds::QmiAltSource, const qmi::pds::QmiAltSourceLinkage, const qmi::pds::QmiAltUncCoverage, const uint8_t, const uint8_t, const float, const float, const float, void (^)(const pds::injectPositionData::Response &)) const", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
      sub_10185A0D4(*a1, (QMIServiceMsg *)v49, a19);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v49);
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    __int16 v37 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)double v85 = 0;
      *(_WORD *)&v85[4] = 2082;
      *(void *)&v85[6] = "";
      __int16 v86 = 1026;
      *(_DWORD *)double v87 = a17;
      *(_WORD *)&v87[4] = 1026;
      *(_DWORD *)&v87[6] = a18;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#cpi,Badly coded confidence\", \"horzConf\":%{public}d, \"vertConf\":%{public}d}", buf, 0x1Eu);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
    }
    uint64_t v38 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)double v85 = 0;
      *(_WORD *)&v85[4] = 2082;
      *(void *)&v85[6] = "";
      __int16 v86 = 1026;
      *(_DWORD *)double v87 = a17;
      *(_WORD *)&v87[4] = 1026;
      *(_DWORD *)&v87[6] = a18;
      __int16 v39 = "#bb.e,#cpi,Badly coded confidence";
      int v40 = "{\"msg%{public}.0s\":\"#bb.e,#cpi,Badly coded confidence\", \"horzConf\":%{public}d, \"vertConf\":%{public}d}";
      __int16 v41 = v38;
      uint32_t v42 = 30;
LABEL_31:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v39, v40, buf, v42);
    }
  }
}

void sub_10185A0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185A0D4(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1018659DC;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185A180(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019BE9AC(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 21847;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_EXT_SET_SV_IN_FIX_REPORT";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 21847;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_EXT_SET_SV_IN_FIX_REPORT";
    __int16 v13 = 1024;
    int v14 = a2;
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSvUseInFixReport(BOOL, void (^)(const pds::svUseInFixReport::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185A3C8(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185A3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185A3C8(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101865DB4;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185A474(uint64_t *a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v7 = a5;
  sub_1019BEA00(a2, a3, a4, a5, (qmi::MutableMessageBase *)buf);
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14, (const qmi::MutableMessageBase *)buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110402;
    int v28 = 39;
    __int16 v29 = 2080;
    double v30 = "QMI_PDS_SET_NMEA_CONFIG";
    __int16 v31 = 1024;
    int v32 = a2;
    __int16 v33 = 1024;
    int v34 = a3;
    __int16 v35 = 1024;
    int v36 = a4;
    __int16 v37 = 1024;
    int v38 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,nmeaSentenceMask,%x,extendedNmeaSentenceMask,%x,reportAccurateAzEl,%d,additionalNmeaSentenceMask,%x", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v15 = 67110402;
    int v16 = 39;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_NMEA_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 1024;
    int v24 = a4;
    __int16 v25 = 1024;
    int v26 = v7;
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetNmeaConfig(uint8_t, uint16_t, BOOL, uint64_t, void (^)(const pds::setNmeaConfig::Response &)) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_10185A72C(*a1, (QMIServiceMsg *)v14, a6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_10185A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185A72C(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186618C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185A7D8(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019BEAB4(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 64;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_DPO_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,dpoConfig,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 64;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_DPO_CONFIG";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetDpoConfig(qmi::pds::QmiDpoConfig, void (^)(const pds::setDpoConfig::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185AA20(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185AA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185AA20(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101866564;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185AACC(uint64_t *a1, int a2, unsigned __int8 *a3, uint64_t a4)
{
  size_t v7 = a3[31];
  size_t v8 = *((void *)a3 + 2);
  if ((v7 & 0x80u) == 0) {
    int v9 = (char *)(a3 + 8);
  }
  else {
    int v9 = (char *)*((void *)a3 + 1);
  }
  double v61 = 0;
  uint64_t v62 = 0;
  if ((v7 & 0x80u) == 0) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = v8;
  }
  std::string __p = 0;
  sub_10186693C((char *)&__p, v9, &v9[v10], v10);
  double v57 = a1;
  uint64_t v58 = a4;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  __int16 v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v12 = a3[3];
    int v13 = *a3;
    int v14 = a3[2];
    int v15 = a3[44];
    int v16 = a3[72];
    int v17 = *((_DWORD *)a3 + 19);
    int v18 = *((_DWORD *)a3 + 20);
    int v19 = *((_DWORD *)a3 + 21);
    int v20 = *((_DWORD *)a3 + 22);
    int v21 = a3[136];
    int v22 = a3[137];
    int v23 = a3[168];
    int v24 = a3[200];
    int v25 = a3[201];
    int v26 = a3[202];
    int v27 = a3[203];
    int v28 = *((_DWORD *)a3 + 9);
    int v29 = *((_DWORD *)a3 + 10);
    int v30 = *((_DWORD *)a3 + 52);
    int v31 = a3[212];
    int v32 = a3[213];
    uint64_t v33 = *((void *)a3 + 27);
    *(_DWORD *)uint64_t buf = 67116802;
    int v126 = 60;
    __int16 v127 = 2080;
    int v128 = "QMI_PDS_SEND_NI_RESPONSE";
    __int16 v129 = 1024;
    int v130 = a2;
    __int16 v131 = 1024;
    int v132 = v12;
    __int16 v133 = 1024;
    int v134 = v13;
    __int16 v135 = 1024;
    int v136 = v14;
    __int16 v137 = 1024;
    int v138 = v29;
    __int16 v139 = 1024;
    int v140 = v15;
    __int16 v141 = 2080;
    __int16 v142 = "#suplHash";
    __int16 v143 = 1024;
    int v144 = v16;
    __int16 v145 = 1024;
    int v146 = v17;
    __int16 v147 = 1024;
    int v148 = v18;
    __int16 v149 = 1024;
    int v150 = v19;
    __int16 v151 = 1024;
    int v152 = v20;
    __int16 v153 = 2080;
    long long v154 = "#suplSlpServerIpv6Addr";
    __int16 v155 = 2080;
    long long v156 = "#suplSlpServerUrl";
    __int16 v157 = 1024;
    int v158 = v21;
    __int16 v159 = 1024;
    int v160 = v22;
    __int16 v161 = 2080;
    long long v162 = "#suplRequestorId";
    __int16 v163 = 1024;
    int v164 = v23;
    __int16 v165 = 2080;
    int64x2_t v166 = "#suplClientName";
    __int16 v167 = 1024;
    int v168 = v24;
    __int16 v169 = 1024;
    int v170 = v25;
    __int16 v171 = 1024;
    int v172 = v26;
    __int16 v173 = 1024;
    int v174 = v27;
    __int16 v175 = 2080;
    long long v176 = "#url";
    __int16 v177 = 1024;
    int v178 = v28;
    __int16 v179 = 1024;
    int v180 = v30;
    __int16 v181 = 1024;
    int v182 = v31;
    __int16 v183 = 1024;
    int v184 = v32;
    __int16 v185 = 2048;
    uint64_t v186 = v33;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,response,%d,isPromptValid,%d,isUrlValid,%d,isTriggerValid,%d,validMask,%d,suplPrivacy,%d,suplHash,%s,suplMode,%d,suplSessionId,%d,suplSlpServerIpv4Port,%d,suplSlpServerIpv4Addr,%d,suplSlpServerIpv6Port,%d,suplSlpServerIpv6Addr,%s,suplSlpServerUrl,%s,suplDcs,%d,suplRequestorIdDcs,%d,suplRequestorId,%s,suplClientNameDcs,%d,suplClientName,%s,suplQopHorizAcc,%d,suplQopVertzAcc,%d,suplQopMaxLocAge,%d,suplQopDelay,%durl,%s,trigger,%dsubId,%d,certIndex,%d,isMaskPresent,%d,mask,%llx", buf, 0xDCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v34 = a3[3];
    int v35 = *a3;
    int v36 = a3[2];
    int v37 = a3[44];
    int v38 = a3[72];
    int v39 = *((_DWORD *)a3 + 19);
    int v40 = *((_DWORD *)a3 + 20);
    int v41 = *((_DWORD *)a3 + 21);
    int v42 = *((_DWORD *)a3 + 22);
    int v43 = a3[136];
    int v44 = a3[137];
    int v45 = a3[168];
    int v46 = a3[200];
    int v47 = a3[201];
    int v48 = a3[202];
    int v49 = a3[203];
    int v50 = *((_DWORD *)a3 + 9);
    int v51 = *((_DWORD *)a3 + 10);
    int v52 = *((_DWORD *)a3 + 52);
    int v53 = a3[212];
    int v54 = a3[213];
    uint64_t v55 = *((void *)a3 + 27);
    int v63 = 67116802;
    int v64 = 60;
    __int16 v65 = 2080;
    __int16 v66 = "QMI_PDS_SEND_NI_RESPONSE";
    __int16 v67 = 1024;
    int v68 = a2;
    __int16 v69 = 1024;
    int v70 = v34;
    __int16 v71 = 1024;
    int v72 = v35;
    __int16 v73 = 1024;
    int v74 = v36;
    __int16 v75 = 1024;
    int v76 = v51;
    __int16 v77 = 1024;
    int v78 = v37;
    __int16 v79 = 2080;
    __int16 v80 = "#suplHash";
    __int16 v81 = 1024;
    int v82 = v38;
    __int16 v83 = 1024;
    int v84 = v39;
    __int16 v85 = 1024;
    int v86 = v40;
    __int16 v87 = 1024;
    int v88 = v41;
    __int16 v89 = 1024;
    int v90 = v42;
    __int16 v91 = 2080;
    double v92 = "#suplSlpServerIpv6Addr";
    __int16 v93 = 2080;
    double v94 = "#suplSlpServerUrl";
    __int16 v95 = 1024;
    int v96 = v43;
    __int16 v97 = 1024;
    int v98 = v44;
    __int16 v99 = 2080;
    int v100 = "#suplRequestorId";
    __int16 v101 = 1024;
    int v102 = v45;
    __int16 v103 = 2080;
    int v104 = "#suplClientName";
    __int16 v105 = 1024;
    int v106 = v46;
    __int16 v107 = 1024;
    int v108 = v47;
    __int16 v109 = 1024;
    int v110 = v48;
    __int16 v111 = 1024;
    int v112 = v49;
    __int16 v113 = 2080;
    int v114 = "#url";
    __int16 v115 = 1024;
    int v116 = v50;
    __int16 v117 = 1024;
    int v118 = v52;
    __int16 v119 = 1024;
    int v120 = v53;
    __int16 v121 = 1024;
    int v122 = v54;
    __int16 v123 = 2048;
    uint64_t v124 = v55;
    __int16 v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &, void (^)(const pds::sendSuplNiResponse::Response &)) const", "%s\n", v56);
    if (v56 != (char *)buf) {
      free(v56);
    }
  }
  sub_1019BEB98(a2, a3[3], *a3, a3[2], (int *)a3 + 10, (char *)a3 + 44, (char *)a3 + 48, (char *)a3 + 72, (qmi::MutableMessageBase *)buf, (int *)a3 + 19, (int *)a3 + 20, (int *)a3 + 21, (int *)a3 + 22, (uint64_t)(a3 + 92), (char *)a3 + 112, (char *)a3 + 136, (char *)a3 + 137, (char *)a3 + 144, (char *)a3 + 168,
    (char *)a3 + 176,
    (char *)a3 + 200,
    (char *)a3 + 201,
    (char *)a3 + 202,
    (char *)a3 + 203,
    (char *)&__p,
    (_DWORD *)a3 + 9,
    (_DWORD *)a3 + 52,
    (char *)a3 + 212,
    a3 + 213,
    (void *)a3 + 27);
  sub_10185B110(*v57, (QMIServiceMsg *)buf, v58);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)buf);
  if (__p)
  {
    double v61 = __p;
    operator delete(__p);
  }
}

void sub_10185B0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10185B110(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1018669B0;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185B1BC(uint64_t *a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, float a8)
{
  sub_1019BEB08(a2, a3, a4, a5, a6, (qmi::MutableMessageBase *)v18, a8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110914;
    int v36 = 97;
    __int16 v37 = 2080;
    int v38 = "QMI_PDS_INJECT_MOTION_DATA";
    __int16 v39 = 1024;
    int v40 = a2;
    __int16 v41 = 1024;
    int v42 = a3;
    __int16 v43 = 1024;
    int v44 = a4;
    __int16 v45 = 2048;
    double v46 = a8;
    __int16 v47 = 1024;
    int v48 = a5;
    __int16 v49 = 1024;
    int v50 = a6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,motion_state,%d,motion_mode,%d,motion_sub_mode,%d,probability_of_state,%.2f,age,%d,timeout,%d", buf, 0x3Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v19 = 67110914;
    int v20 = 97;
    __int16 v21 = 2080;
    int v22 = "QMI_PDS_INJECT_MOTION_DATA";
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = a3;
    __int16 v27 = 1024;
    int v28 = a4;
    __int16 v29 = 2048;
    double v30 = a8;
    __int16 v31 = 1024;
    int v32 = a5;
    __int16 v33 = 1024;
    int v34 = a6;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetInjectMotionData(qmi::pds::QmiMotionDataState, qmi::pds::QmiMotionDataMode, qmi::pds::QmiMotionDataSubMode, float, uint16_t, uint16_t, void (^)(const pds::setInjectMotionData::Response &)) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_10185B49C(*a1, (QMIServiceMsg *)v18, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_10185B47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185B49C(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101866D88;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185B548(uint64_t *a1, int a2, int a3, uint64_t *a4, uint64_t a5)
{
  int v6 = a4;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C(__p, (void *)*a4, a4[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v14 = a4[2];
  }
  sub_1019C3B9C(a2, a3, (uint64_t *)__p, (qmi::MutableMessageBase *)v15);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  size_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v11 = v6;
    if (*((char *)v6 + 23) < 0) {
      __int16 v11 = (uint64_t *)*v6;
    }
    *(_DWORD *)uint64_t buf = 67110146;
    int v27 = 120;
    __int16 v28 = 2080;
    __int16 v29 = "QMI_PDS_SET_APN_PROFILES";
    __int16 v30 = 1024;
    int v31 = a2;
    __int16 v32 = 1024;
    int v33 = a3;
    __int16 v34 = 2080;
    int v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,apn,%d,pdnType,%d,apnName,%s", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    if (*((char *)v6 + 23) < 0) {
      int v6 = (uint64_t *)*v6;
    }
    int v16 = 67110146;
    int v17 = 120;
    __int16 v18 = 2080;
    int v19 = "QMI_PDS_SET_APN_PROFILES";
    __int16 v20 = 1024;
    int v21 = a2;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 2080;
    __int16 v25 = v6;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendApnConfig(uint32_t, uint32_t, std::string, void (^)(const pds::setApnProfiles::Response &)) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_10185B834(*a1, (QMIServiceMsg *)v15, a5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_10185B7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

uint64_t sub_10185B834(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101867160;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185B8E0(uint64_t *a1, unsigned int a2, int a3, int a4, uint64_t *a5, uint64_t a6)
{
  size_t v7 = a5;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C(__p, (void *)*a5, a5[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a5;
    uint64_t v16 = a5[2];
  }
  sub_1019C3C98(a2, a3, a4, (uint64_t *)__p, (qmi::MutableMessageBase *)v17);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = v7;
    if (*((char *)v7 + 23) < 0) {
      int v13 = (uint64_t *)*v7;
    }
    *(_DWORD *)uint64_t buf = 67110402;
    int v31 = 120;
    __int16 v32 = 2080;
    int v33 = "QMI_PDS_SET_APN_PROFILES";
    __int16 v34 = 1024;
    unsigned int v35 = a2;
    __int16 v36 = 1024;
    int v37 = a3;
    __int16 v38 = 1024;
    int v39 = a4;
    __int16 v40 = 2080;
    __int16 v41 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,instance,%d,apn,%d,pdnType,%d,apnName,%s", buf, 0x2Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    if (*((char *)v7 + 23) < 0) {
      size_t v7 = (uint64_t *)*v7;
    }
    int v18 = 67110402;
    int v19 = 120;
    __int16 v20 = 2080;
    int v21 = "QMI_PDS_SET_APN_PROFILES";
    __int16 v22 = 1024;
    unsigned int v23 = a2;
    __int16 v24 = 1024;
    int v25 = a3;
    __int16 v26 = 1024;
    int v27 = a4;
    __int16 v28 = 2080;
    __int16 v29 = v7;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendApnConfigForInstance(CLTelephonyService_Type::SimInstance, uint32_t, uint32_t, std::string, void (^)(const pds::setApnProfiles::Response &)) const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_10185B834(*a1, (QMIServiceMsg *)v17, a6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
}

void sub_10185BBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_10185BBE8(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C3DC4(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 131;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_SUPL_UDP_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,config,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 131;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_SUPL_UDP_CONFIG";
    __int16 v13 = 1024;
    int v14 = a2;
    size_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSuplUdpPortConfig(uint32_t, void (^)(const pds::setSuplUdpPortConfig::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185BE30(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185BE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185BE30(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101867538;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185BEDC(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C3E18(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 126;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_LPP_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enableMask,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 126;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_LPP_CONFIG";
    __int16 v13 = 1024;
    int v14 = a2;
    size_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetLppConfig(uint32_t, void (^)(const pds::setLppConfig::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185C124(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185C104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185C124(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101867910;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185C1D0(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  sub_1019C3E6C(a2, a3, (qmi::MutableMessageBase *)v10);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  size_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109890;
    int v20 = 138;
    __int16 v21 = 2080;
    __int16 v22 = "QMI_PDS_SET_EMERGENCY_SUPPORT_CONFIG";
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,isHeloEnabled,%d,isEarlyReturnEnabled,%d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v11 = 67109890;
    int v12 = 138;
    __int16 v13 = 2080;
    int v14 = "QMI_PDS_SET_EMERGENCY_SUPPORT_CONFIG";
    __int16 v15 = 1024;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a3;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEmergencySupportConfig(BOOL, BOOL, void (^)(const pds::setEmergencySupportConfig::Response &)) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10185C430(*a1, (QMIServiceMsg *)v10, a4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_10185C410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185C430(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101867CE8;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185C4DC(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C3EE0(a2 != 0, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 147;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_OTDOA_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 147;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_OTDOA_CONFIG";
    __int16 v13 = 1024;
    int v14 = a2;
    size_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetOtdoaConfig(uint32_t, void (^)(const pds::setOTDOAConfig::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185C728(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185C708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185C728(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1018680C0;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185C7D4(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019BE768(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 150;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_GNSS_SIGNAL_ENVIRONMENT";
    __int16 v19 = 1026;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,type,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 150;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_GNSS_SIGNAL_ENVIRONMENT";
    __int16 v13 = 1026;
    int v14 = a2;
    size_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetSignalEnvironmentConfig(qmi::pds::SignalEnvironment, void (^)(const pds::injectSignalEnvironment::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185CA1C(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185C9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185CA1C(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101868498;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185CAC8(uint64_t *a1, uint64_t a2)
{
  sub_1019C3F34((qmi::MutableMessageBase *)v6);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109378;
    int v12 = 132;
    __int16 v13 = 2080;
    int v14 = "QMI_PDS_CANCEL_ONGOING_SESSION";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v7 = 67109378;
    int v8 = 132;
    __int16 v9 = 2080;
    int v10 = "QMI_PDS_CANCEL_ONGOING_SESSION";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendCancelOngoingSession(void (^)(const pds::cancelOngoingSession::Response &)) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_10185CCE8(*a1, (QMIServiceMsg *)v6, a2);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v6);
}

void sub_10185CCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185CCE8(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101868870;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185CD94(uint64_t *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  sub_1019C3F40(a2, a3, a4, a5, (qmi::MutableMessageBase *)v14);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110402;
    int v28 = 116;
    __int16 v29 = 2080;
    __int16 v30 = "QMI_PDS_SET_AGNSS_POSITIONING_MODES";
    __int16 v31 = 1024;
    int v32 = a2;
    __int16 v33 = 1024;
    int v34 = a3;
    __int16 v35 = 1024;
    int v36 = a4;
    __int16 v37 = 1024;
    int v38 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,userplanemode,%d,controlplanemode,%d,commonmode,%d,gsmuserplanemode,%d", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v15 = 67110402;
    int v16 = 116;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_AGNSS_POSITIONING_MODES";
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 1024;
    int v24 = a4;
    __int16 v25 = 1024;
    int v26 = a5;
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendsetUserPlanePositionModes(uint32_t, uint32_t, uint32_t, uint8_t, void (^)(const pds::setUserPlanePositionModes::Response &)) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_10185D02C(*a1, (QMIServiceMsg *)v14, a6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_10185D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185D02C(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101868C48;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185D0D8(uint64_t *a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7)
{
  sub_1019C3FB8(a2, a3, a4, (qmi::MutableMessageBase *)v16, a6, a7);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110658;
    int v32 = 102;
    __int16 v33 = 2080;
    int v34 = "QMI_PDS_INJECT_COURSE_OVER_GROUND";
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 2048;
    uint64_t v38 = a3;
    __int16 v39 = 2048;
    double v40 = a6;
    __int16 v41 = 2048;
    double v42 = a7;
    __int16 v43 = 1024;
    int v44 = a4;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,time_type,%d,timestamp,%llun,course,%.2f,courseunc,%.2f,reliability,%d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v17 = 67110658;
    int v18 = 102;
    __int16 v19 = 2080;
    int v20 = "QMI_PDS_INJECT_COURSE_OVER_GROUND";
    __int16 v21 = 1024;
    int v22 = a2;
    __int16 v23 = 2048;
    uint64_t v24 = a3;
    __int16 v25 = 2048;
    double v26 = a6;
    __int16 v27 = 2048;
    double v28 = a7;
    __int16 v29 = 1024;
    int v30 = a4;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectDirectionOfTravel(qmi::pds::TimeType, uint64_t, float, float, qmi::pds::QmiReliabilityIndication, void (^)(const pds::setInjectDirectionOfTravel::Response &)) const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_10185D3A4(*a1, (QMIServiceMsg *)v16, a5);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_10185D384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185D3A4(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101869020;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185D450(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C408C(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 161;
    __int16 v17 = 2080;
    int v18 = "QMI_PDS_SET_GNSS_ENGINE_MONITOR_REPORT_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 161;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_GNSS_ENGINE_MONITOR_REPORT_CONFIG";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetGnssEngineMonitorConfig(BOOL, void (^)(const pds::setGnssEngineMonitorConfig::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185D698(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185D678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185D698(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1018693F8;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185D744(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_1019C40E0(a2, a3, (qmi::MutableMessageBase *)v10);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109890;
    int v20 = 169;
    __int16 v21 = 2080;
    int v22 = "QMI_PDS_SET_E911_OVERRIDE_CONFIG";
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 2048;
    uint64_t v26 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d,config,%llx", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v11 = 67109890;
    int v12 = 169;
    __int16 v13 = 2080;
    int v14 = "QMI_PDS_SET_E911_OVERRIDE_CONFIG";
    __int16 v15 = 1024;
    int v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = a3;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEmergencyModeLockoutConfig(BOOL, qmi::pds::E911OverrideConfig, void (^)(const pds::setEmergencyModeLockoutConfig::Response &)) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10185D9AC(*a1, (QMIServiceMsg *)v10, a4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_10185D98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185D9AC(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186978C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185DA58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1019C4154(a2, (qmi::MutableMessageBase *)v14);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = 139;
    __int16 v22 = 2080;
    *(void *)__int16 v23 = "QMI_PDS_SET_BLOCKLIST_SV";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,#rti\n", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v17 = 67109378;
    int v18 = 139;
    __int16 v19 = 2080;
    int v20 = "QMI_PDS_SET_BLOCKLIST_SV";
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetBlockList(const qmi::pds::BlockListSv &, void (^)(const pds::setBlocklistSv::Response &)) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = a2;
    sub_100134750(&v22, "gps-bl,");
    *(void *)&v23[11] = a2 + 120;
    sub_100134750(v24, "gps-cl,");
    v24[3] = a2 + 24;
    sub_100134750(v25, "glo-bl,");
    v25[3] = a2 + 144;
    sub_100134750(v26, "glo-cl,");
    v26[3] = a2 + 96;
    sub_100134750(v27, "gal-bl,");
    v27[3] = a2 + 216;
    sub_100134750(v28, "gal-cl,");
    v28[3] = a2 + 72;
    sub_100134750(v29, "bds-bl,");
    v29[3] = a2 + 192;
    sub_100134750(v30, "bds-cl,");
    v30[3] = a2 + 48;
    sub_100134750(v31, "qzss-bl,");
    v31[3] = a2 + 168;
    sub_100134750(v32, "qzss-cl,");
    for (uint64_t i = 0; i != 160; i += 16)
    {
      int v8 = *(uint64_t **)&buf[i * 2];
      int v9 = (void **)&buf[i * 2 + 8];
      if (SHIBYTE(v23[i + 10]) < 0)
      {
        sub_1000DC48C(__p, *v9, *(void *)&v23[i + 3]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v9;
        uint64_t v13 = *(void *)&v23[i + 7];
      }
      v15[3] = v15;
      v16[0] = off_102343B18;
      v16[3] = v16;
      v15[0] = off_102343B98;
      v15[1] = sub_10185E0EC;
      sub_10185DF5C(v8, (uint64_t)__p, v16, (uint64_t)v15);
      sub_10186ABF8(v15);
      sub_10186AAA8(v16);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v10 = 320;
    do
    {
      if ((char)buf[v10 - 1] < 0) {
        operator delete(*(void **)((char *)&v19 + v10));
      }
      v10 -= 32;
    }
    while (v10);
  }
  sub_10185E2F0(*a1, (QMIServiceMsg *)v14, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_10185DEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_10185DF5C(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!a3[3])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 16);
    }
    sub_101869B64(a3, (uint64_t *)__p);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(v10, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  sub_10186A6A8((uint64_t)v15, (uint64_t)a3);
  sub_10186A740((uint64_t)v14, a4);
  sub_101869C48(v8, v9, (uint64_t)v10, (uint64_t)v15, (uint64_t)v14);
  sub_10186ABF8(v14);
  sub_10186AAA8(v15);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_10185E094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10185E0EC()
{
  sub_10010F274((uint64_t)v4);
  uint64_t v0 = v5[0];
  *(_DWORD *)((char *)&v5[1] + *(void *)(v5[0] - 24)) = *(_DWORD *)((unsigned char *)&v5[1] + *(void *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  *(void *)((char *)&v5[3] + *(void *)(v0 - 24)) = 2;
  char v3 = 48;
  sub_10006E19C(v5, &v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v4
  v5[0] = v1;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10185E2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185E2F0(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186AC7C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185E39C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_1019C4348(a2, a3, (qmi::MutableMessageBase *)v9);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v17 = 103;
    __int16 v18 = 2080;
    __int16 v19 = "QMI_PDS_INJECT_SUPL_CERTIFICATE";
    __int16 v20 = 1024;
    int v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,suplCertId,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v10 = 67109634;
    int v11 = 103;
    __int16 v12 = 2080;
    uint64_t v13 = "QMI_PDS_INJECT_SUPL_CERTIFICATE";
    __int16 v14 = 1024;
    int v15 = a2;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &, void (^)(const pds::setInjectSuplCert::Response &)) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10185E5E8(*a1, (QMIServiceMsg *)v9, a4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
}

void sub_10185E5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185E5E8(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186B054;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185E694(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C44EC(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 104;
    __int16 v17 = 2080;
    __int16 v18 = "QMI_PDS_DELETE_SUPL_CERTIFICATE";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,suplCertId,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 104;
    __int16 v11 = 2080;
    __int16 v12 = "QMI_PDS_DELETE_SUPL_CERTIFICATE";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendDeleteSuplCert(qmi::pds::SuplCertIndex, void (^)(const pds::setDeleteSuplCert::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185E8DC(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185E8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185E8DC(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186B42C;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185E988(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C45B0(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 152;
    __int16 v17 = 2080;
    __int16 v18 = "QMI_PDS_SET_CALIBRATION_STATE_CONFIG";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,XOCalibrationConfig,%u", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 152;
    __int16 v11 = 2080;
    __int16 v12 = "QMI_PDS_SET_CALIBRATION_STATE_CONFIG";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetXOCalibrationConfig(qmi::pds::XOCalibrationStateConfig, void (^)(const pds::setXOCalibrationStateConfig::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185EBD0(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185EBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185EBD0(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186B804;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185EC7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_1019C4888(a2, (qmi::MutableMessageBase *)v18);
  uint64_t v5 = sub_10186BB98((uint64_t)v18, 17);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(__int16 *)sub_10186BE68((uint64_t)v18, 1);
    int v8 = *(unsigned __int16 *)sub_10186C0FC((uint64_t)v18, 16);
    int v9 = *(unsigned __int16 *)v5;
    int v10 = *((unsigned __int16 *)v5 + 1);
    int v11 = *((unsigned __int16 *)v5 + 2);
    *(_DWORD *)uint64_t buf = 67110658;
    int v34 = 101;
    __int16 v35 = 2080;
    int v36 = "QMI_PDS_SET_GNSS_RF_CONFIG";
    __int16 v37 = 1024;
    int v38 = v7;
    __int16 v39 = 1024;
    int v40 = v8;
    __int16 v41 = 1024;
    int v42 = v9;
    __int16 v43 = 1024;
    int v44 = v10;
    __int16 v45 = 1024;
    int v46 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,peakAntennaGainL1,%d,gpsLossL1,%u,gloLoss,%u,%u,%u", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v12 = *(__int16 *)sub_10186BE68((uint64_t)v18, 1);
    int v13 = *(unsigned __int16 *)sub_10186C0FC((uint64_t)v18, 16);
    int v14 = *(unsigned __int16 *)v5;
    int v15 = *((unsigned __int16 *)v5 + 1);
    int v16 = *((unsigned __int16 *)v5 + 2);
    int v19 = 67110658;
    int v20 = 101;
    __int16 v21 = 2080;
    __int16 v22 = "QMI_PDS_SET_GNSS_RF_CONFIG";
    __int16 v23 = 1024;
    int v24 = v12;
    __int16 v25 = 1024;
    int v26 = v13;
    __int16 v27 = 1024;
    int v28 = v14;
    __int16 v29 = 1024;
    int v30 = v15;
    __int16 v31 = 1024;
    int v32 = v16;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendL1RfConfig(const CLPlatformInfo::GnssL1RfParameters &, void (^)(const pds::SetGnssRfConfig::Response &)) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_10185EF74(*a1, (QMIServiceMsg *)v18, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_10185EF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185EF74(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186C340;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185F020(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C4DCC(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 183;
    __int16 v17 = 2080;
    __int16 v18 = "QMI_PDS_SET_WWAN_L5_BLANKING_CONTROL";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 183;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_WWAN_L5_BLANKING_CONTROL";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetWwanAntTuneL5BlankingControl(const BOOL, void (^)(const pds::setWwanAntTuneL5BlankingControl::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185F268(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185F248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185F268(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186C718;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185F314(uint64_t *a1, int a2, uint64_t a3)
{
  sub_1019C4E20(a2, (qmi::MutableMessageBase *)v8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109634;
    int v16 = 192;
    __int16 v17 = 2080;
    __int16 v18 = "QMI_PDS_SET_CONSTELLATION_CONTROL";
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,mask,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v9 = 67109634;
    int v10 = 192;
    __int16 v11 = 2080;
    int v12 = "QMI_PDS_SET_CONSTELLATION_CONTROL";
    __int16 v13 = 1024;
    int v14 = a2;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetConstellationControl(uint32_t, void (^)(const pds::setConstellationControl::Response &)) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_10185F55C(*a1, (QMIServiceMsg *)v8, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v8);
}

void sub_10185F53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185F55C(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186CAF0;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185F608(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  sub_1019C4E88(a2, a3, (qmi::MutableMessageBase *)v10);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109890;
    int v20 = 224;
    __int16 v21 = 2080;
    __int16 v22 = "MAV_QMI_PDS_GET_TIMING_ADVANCE_REPORT";
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    int v26 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,getTimingAdvance,rat,%x,sub_id,%x", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    int v11 = 67109890;
    int v12 = 224;
    __int16 v13 = 2080;
    int v14 = "MAV_QMI_PDS_GET_TIMING_ADVANCE_REPORT";
    __int16 v15 = 1024;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a3;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendGetTimingAdvance(uint8_t, uint8_t, void (^)(const pds::getTimingAdvance::Response &)) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10185F868(*a1, (QMIServiceMsg *)v10, a4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_10185F848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10185F868(uint64_t a1, QMIServiceMsg *a2, uint64_t a3)
{
  uint64_t v5 = QMIServiceMsg::create(a2, a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10186CEC8;
  void v7[3] = &unk_10233CB70;
  _OWORD v7[4] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v5, v7);
}

void sub_10185F914(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

ATCSCounted **sub_10185F944(ATCSCounted **a1, QMIServiceMsg *this)
{
  *a1 = 0;
  char v3 = (ATCSCounted *)QMIServiceMsg::create(this, (unsigned __int16)this);
  *a1 = v3;
  if (!v3) {
    sub_10186D2A0();
  }
  ATCSCounted::incRef(v3);
  return a1;
}

void sub_10185F984(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    char v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::reset::Request, ResponseType = pds::reset::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10185FC20((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10185FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10185FC20(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10185FD18(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10185FCD4((uint64_t)a2);
  }
}

void sub_10185FCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10185FCD4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0);
  return a1;
}

void sub_10185FD04(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10185FD18(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0);
  return a1;
}

void sub_10185FD48(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10185FD5C(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (a2 - v10) >> 1;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unsigned int v42 = *(a2 - 2);
                unsigned int v43 = *v10;
                if (v42 < v43)
                {
                  *int v10 = v42;
                  *(a2 - 2) = v43;
                  unsigned __int8 v44 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v44;
                }
                break;
              case 3uLL:
                uint64_t result = sub_10186050C(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = sub_101860804(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = sub_101860804(v10, v10 + 2, v10 + 4, v10 + 6);
                unsigned int v45 = *(a2 - 2);
                unsigned int v46 = v10[6];
                if (v45 < v46)
                {
                  v10[6] = v45;
                  *(a2 - 2) = v46;
                  unsigned __int8 v47 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v47;
                  unsigned int v48 = v10[6];
                  unsigned int v49 = v10[4];
                  if (v48 < v49)
                  {
                    void v10[4] = v48;
                    v10[6] = v49;
                    unsigned __int8 v50 = v10[5];
                    unsigned __int8 v51 = v10[7];
                    v10[5] = v51;
                    v10[7] = v50;
                    unsigned int v52 = v10[2];
                    if (v48 < v52)
                    {
                      void v10[2] = v48;
                      void v10[4] = v52;
                      unsigned __int8 v53 = v10[3];
                      v10[3] = v51;
                      v10[5] = v53;
                      unsigned int v54 = *v10;
                      if (v48 < v54)
                      {
                        *int v10 = v48;
                        void v10[2] = v54;
                        unsigned __int8 v55 = v10[1];
                        v10[1] = v51;
                        v10[3] = v55;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 47)
          {
            __int16 v56 = v10 + 2;
            BOOL v58 = v10 == a2 || v56 == a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                __int16 v60 = v10;
                do
                {
                  unsigned int v61 = v60[2];
                  unsigned int v62 = *v60;
                  __int16 v60 = v56;
                  if (v61 < v62)
                  {
                    __int16 v63 = *(_WORD *)v56;
                    unsigned int v64 = *(_WORD *)v60;
                    uint64_t v65 = v59;
                    while (1)
                    {
                      __int16 v66 = &v10[v65];
                      void v66[2] = v62;
                      v66[3] = v10[v65 + 1];
                      if (!v65) {
                        break;
                      }
                      unsigned int v62 = *(v66 - 2);
                      v65 -= 2;
                      if (v62 <= v64)
                      {
                        __int16 v67 = &v10[v65 + 2];
                        goto LABEL_84;
                      }
                    }
                    __int16 v67 = v10;
LABEL_84:
                    *__int16 v67 = v64;
                    v67[1] = HIBYTE(v63);
                  }
                  __int16 v56 = v60 + 2;
                  v59 += 2;
                }
                while (v60 + 2 != a2);
              }
            }
            else if (!v58)
            {
              int v100 = v10 + 3;
              do
              {
                unsigned int v101 = v9[2];
                unsigned int v102 = *v9;
                int v9 = v56;
                if (v101 < v102)
                {
                  __int16 v103 = *(_WORD *)v56;
                  unsigned int v104 = *(_WORD *)v56;
                  __int16 v105 = v100;
                  do
                  {
                    int v106 = v105;
                    *(v105 - 1) = v102;
                    unsigned __int8 v107 = *(v105 - 2);
                    v105 -= 2;
                    *int v106 = v107;
                    unsigned int v102 = *(v106 - 5);
                  }
                  while (v102 > v104);
                  *(v105 - 1) = v104;
                  *__int16 v105 = HIBYTE(v103);
                }
                __int16 v56 = v9 + 2;
                v100 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v68 = (v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  int v72 = &v10[2 * v71];
                  if (2 * v70 + 2 < (uint64_t)v12)
                  {
                    unsigned int v75 = *v72;
                    unsigned int v73 = v72[2];
                    BOOL v74 = v75 >= v73;
                    if (v75 <= v73) {
                      unsigned int v75 = v72[2];
                    }
                    if (!v74)
                    {
                      v72 += 2;
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v75 = *v72;
                  }
                  int v76 = &v10[2 * v70];
                  if (v75 >= *v76)
                  {
                    __int16 v77 = *(_WORD *)v76;
                    do
                    {
                      int v78 = v76;
                      int v76 = v72;
                      unsigned __int8 *v78 = v75;
                      v78[1] = v72[1];
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v79 = (2 * v71) | 1;
                      int v72 = &v10[2 * v79];
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < (uint64_t)v12)
                      {
                        unsigned int v75 = *v72;
                        uint64_t result = v72 + 2;
                        unsigned int v80 = v72[2];
                        BOOL v81 = v75 >= v80;
                        if (v75 <= v80) {
                          unsigned int v75 = v72[2];
                        }
                        if (v81) {
                          uint64_t v71 = v79;
                        }
                        else {
                          v72 += 2;
                        }
                      }
                      else
                      {
                        unsigned int v75 = *v72;
                        uint64_t v71 = v79;
                      }
                    }
                    while (v75 >= v77);
                    *(_WORD *)int v76 = v77;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v82 = (unint64_t)v11 >> 1;
              do
              {
                uint64_t v83 = 0;
                __int16 v84 = *(_WORD *)v10;
                __int16 v85 = v10;
                do
                {
                  uint64_t v86 = 2 * v83 + 2;
                  __int16 v87 = &v85[v86];
                  uint64_t v88 = (2 * v83) | 1;
                  if (v86 >= v82)
                  {
                    LOBYTE(v90) = *v87;
                    uint64_t v83 = (2 * v83) | 1;
                  }
                  else
                  {
                    unsigned int v89 = *v87;
                    unsigned int v90 = v87[2];
                    BOOL v91 = v89 >= v90;
                    if (v89 > v90) {
                      LOBYTE(v90) = *v87;
                    }
                    if (v91)
                    {
                      uint64_t v83 = v88;
                    }
                    else
                    {
                      v87 += 2;
                      uint64_t v83 = v86;
                    }
                  }
                  *__int16 v85 = v90;
                  v85[1] = v87[1];
                  __int16 v85 = v87;
                }
                while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
                if (v87 == a2 - 2)
                {
                  *(_WORD *)__int16 v87 = v84;
                }
                else
                {
                  *(_WORD *)__int16 v87 = *((_WORD *)a2 - 1);
                  *((_WORD *)a2 - 1) = v84;
                  uint64_t v92 = v87 - v10 + 2;
                  if (v92 >= 3)
                  {
                    unint64_t v93 = (((unint64_t)v92 >> 1) - 2) >> 1;
                    double v94 = &v10[2 * v93];
                    unsigned int v95 = *v94;
                    if (v95 < *v87)
                    {
                      __int16 v96 = *(_WORD *)v87;
                      unsigned int v97 = *(_WORD *)v87;
                      do
                      {
                        int v98 = v87;
                        __int16 v87 = v94;
                        unsigned __int8 *v98 = v95;
                        v98[1] = v94[1];
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                        double v94 = &v10[2 * v93];
                        unsigned int v95 = *v94;
                      }
                      while (v95 < v97);
                      *__int16 v87 = v97;
                      v87[1] = HIBYTE(v96);
                    }
                  }
                }
                a2 -= 2;
              }
              while (v82-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          int v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x101)
          {
            sub_10186050C(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            sub_10186050C(v9 + 2, v14 - 2, a2 - 4);
            sub_10186050C(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = sub_10186050C(v14 - 2, v14, &v9[2 * v13 + 2]);
            unsigned __int8 v15 = *v9;
            *int v9 = *v14;
            *int v14 = v15;
            unsigned __int8 v16 = v9[1];
            v9[1] = v14[1];
            v14[1] = v16;
          }
          else
          {
            uint64_t result = sub_10186050C(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(v9 - 2) < *v9) {
            break;
          }
          __int16 v31 = *(_WORD *)v9;
          unsigned int v32 = *(_WORD *)v9;
          if (*(a2 - 2) <= v32)
          {
            int v34 = v9 + 2;
            do
            {
              int v10 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 2;
            }
            while (*v10 <= v32);
          }
          else
          {
            int v10 = v9;
            do
            {
              unsigned int v33 = v10[2];
              v10 += 2;
            }
            while (v33 <= v32);
          }
          __int16 v35 = a2;
          if (v10 < a2)
          {
            __int16 v35 = a2;
            do
            {
              unsigned int v36 = *(v35 - 2);
              v35 -= 2;
            }
            while (v36 > v32);
          }
          if (v10 < v35)
          {
            unsigned __int8 v37 = *v10;
            unsigned __int8 v38 = *v35;
            do
            {
              *int v10 = v38;
              *__int16 v35 = v37;
              unsigned __int8 v39 = v10[1];
              v10[1] = v35[1];
              v35[1] = v39;
              do
              {
                unsigned int v40 = v10[2];
                v10 += 2;
                unsigned __int8 v37 = v40;
              }
              while (v40 <= v32);
              do
              {
                unsigned int v41 = *(v35 - 2);
                v35 -= 2;
                unsigned __int8 v38 = v41;
              }
              while (v41 > v32);
            }
            while (v10 < v35);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9) {
            *(_WORD *)int v9 = *((_WORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v32;
          *(v10 - 1) = HIBYTE(v31);
        }
        uint64_t v17 = 0;
        __int16 v18 = *(_WORD *)v9;
        unsigned int v19 = *(_WORD *)v9;
        do
        {
          unsigned int v20 = v9[v17 + 2];
          v17 += 2;
        }
        while (v20 < v19);
        __int16 v21 = &v9[v17];
        __int16 v22 = a2;
        if (v17 == 2)
        {
          __int16 v22 = a2;
          do
          {
            if (v21 >= v22) {
              break;
            }
            unsigned int v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v19);
        }
        else
        {
          do
          {
            unsigned int v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v19);
        }
        if (v21 >= v22)
        {
          int v10 = &v9[v17];
        }
        else
        {
          unsigned __int8 v25 = *v22;
          int v10 = &v9[v17];
          int v26 = v22;
          do
          {
            *int v10 = v25;
            *int v26 = v20;
            unsigned __int8 v27 = v10[1];
            v10[1] = v26[1];
            v26[1] = v27;
            do
            {
              unsigned int v28 = v10[2];
              v10 += 2;
              LOBYTE(v20) = v28;
            }
            while (v28 < v19);
            do
            {
              unsigned int v29 = *(v26 - 2);
              v26 -= 2;
              unsigned __int8 v25 = v29;
            }
            while (v29 >= v19);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9) {
          *(_WORD *)int v9 = *((_WORD *)v10 - 1);
        }
        *(v10 - 2) = v19;
        *(v10 - 1) = HIBYTE(v18);
        if (v21 >= v22) {
          break;
        }
LABEL_33:
        uint64_t result = (unsigned __int8 *)sub_10185FD5C(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = sub_1018605CC(v9, v10 - 2);
      uint64_t result = (unsigned __int8 *)sub_1018605CC(v10, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 2;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unsigned __int8 *sub_10186050C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  unsigned int v5 = *a3;
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      unsigned __int8 v7 = a2[1];
      a2[1] = a3[1];
      a3[1] = v7;
      unsigned int v8 = *a2;
      unsigned int v9 = *result;
      if (v8 < v9)
      {
        void *result = v8;
        *a2 = v9;
        unsigned __int8 v10 = result[1];
        result[1] = a2[1];
        a2[1] = v10;
      }
    }
  }
  else if (v5 >= v3)
  {
    void *result = v3;
    *a2 = v4;
    unsigned __int8 v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    unsigned int v12 = *a3;
    if (v12 < v4)
    {
      *a2 = v12;
      *a3 = v4;
      a2[1] = a3[1];
      a3[1] = v11;
    }
  }
  else
  {
    void *result = v5;
    *a3 = v4;
    unsigned __int8 v6 = result[1];
    result[1] = a3[1];
    a3[1] = v6;
  }
  return result;
}

BOOL sub_1018605CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = (a2 - a1) >> 1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unsigned __int8 v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_10186050C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_101860804(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_101860804(a1, a1 + 2, a1 + 4, a1 + 6);
      unsigned int v19 = *(a2 - 2);
      unsigned int v20 = a1[6];
      if (v19 < v20)
      {
        a1[6] = v19;
        *(a2 - 2) = v20;
        unsigned __int8 v21 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v21;
        unsigned int v22 = a1[6];
        unsigned int v23 = a1[4];
        if (v22 < v23)
        {
          a1[4] = v22;
          a1[6] = v23;
          unsigned __int8 v24 = a1[5];
          unsigned __int8 v25 = a1[7];
          a1[5] = v25;
          a1[7] = v24;
          unsigned int v26 = a1[2];
          if (v22 < v26)
          {
            a1[2] = v22;
            a1[4] = v26;
            unsigned __int8 v27 = a1[3];
            a1[3] = v25;
            a1[5] = v27;
            unsigned int v28 = *a1;
            if (v22 < v28)
            {
              *a1 = v22;
              a1[2] = v28;
              unsigned __int8 v29 = a1[1];
              a1[1] = v25;
              a1[3] = v29;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v9 = a1 + 4;
      sub_10186050C(a1, a1 + 2, a1 + 4);
      unsigned __int8 v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *v9;
    if (*v10 < v13)
    {
      __int16 v14 = *(_WORD *)v10;
      unsigned int v15 = *(_WORD *)v10;
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = &a1[v16];
        v17[6] = v13;
        v17[7] = a1[v16 + 5];
        if (v16 == -4) {
          break;
        }
        unsigned int v13 = v17[2];
        v16 -= 2;
        if (v13 <= v15)
        {
          __int16 v18 = &a1[v16 + 6];
          goto LABEL_13;
        }
      }
      __int16 v18 = a1;
LABEL_13:
      *__int16 v18 = v15;
      v18[1] = HIBYTE(v14);
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    unsigned int v9 = v10;
    v11 += 2;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

unsigned __int8 *sub_101860804(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  BOOL result = sub_10186050C(a1, a2, a3);
  unsigned int v9 = *a4;
  unsigned int v10 = *a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    unsigned __int8 v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unsigned int v12 = *a3;
    unsigned int v13 = *a2;
    if (v12 < v13)
    {
      *a2 = v12;
      *a3 = v13;
      unsigned __int8 v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unsigned int v15 = *a2;
      unsigned int v16 = *a1;
      if (v15 < v16)
      {
        *a1 = v15;
        *a2 = v16;
        unsigned __int8 v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_1018608B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  if (a1 != a2)
  {
    do
    {
      unsigned int v3 = a1;
      a1 += 2;
      if (a1 == a2) {
        return a2;
      }
      int v4 = *v3;
    }
    while (v4 != v3[2] || v3[1] != v3[3]);
    if (v3 + 4 != a2)
    {
      uint64_t v6 = 2;
      do
      {
        int v7 = v4;
        unsigned __int8 v8 = &a1[v6];
        int v4 = a1[v6];
        int v9 = a1[v6 + 1];
        if (v7 != v4 || v3[1] != v9)
        {
          v3[2] = v4;
          v3 += 2;
          v3[1] = v9;
        }
        v6 += 2;
      }
      while (v8 + 2 != a2);
    }
    return v3 + 2;
  }
  return v2;
}

void sub_101860948(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::getServiceState::Request, ResponseType = pds::getServiceState::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1017D09C4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101860BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101860BE4(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setServiceState::Request, ResponseType = pds::setServiceState::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101860E80((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101860E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101860E80(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101860F78(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101860F34((uint64_t)a2);
  }
}

void sub_101860F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101860F34(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x21u);
  return a1;
}

void sub_101860F64(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101860F78(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x21u);
  return a1;
}

void sub_101860FA8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101860FBC(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDefaultTrackingSession::Request, ResponseType = pds::setDefaultTrackingSession::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101861258((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101861258(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101861350(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186130C((uint64_t)a2);
  }
}

void sub_1018612F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186130C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x2Au);
  return a1;
}

void sub_10186133C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101861350(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Au);
  return a1;
}

void sub_101861380(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101861394(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setAutoTrackingState::Request, ResponseType = pds::setAutoTrackingState::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101861630((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101861614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101861630(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101861728(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018616E4((uint64_t)a2);
  }
}

void sub_1018616C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018616E4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x31u);
  return a1;
}

void sub_101861714(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101861728(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x31u);
  return a1;
}

void sub_101861758(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186176C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::forceXTRADownload::Request, ResponseType = pds::forceXTRADownload::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101861A08((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018619EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101861A08(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101861B00(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101861ABC((uint64_t)a2);
  }
}

void sub_101861AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101861ABC(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x2Du);
  return a1;
}

void sub_101861AEC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101861B00(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Du);
  return a1;
}

void sub_101861B30(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101861B44(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::resetGpsServiceData::Request, ResponseType = pds::resetGpsServiceData::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101861DE0((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101861DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101861DE0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101861ED8(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101861E94((uint64_t)a2);
  }
}

void sub_101861E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101861E94(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x34u);
  return a1;
}

void sub_101861EC4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101861ED8(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x34u);
  return a1;
}

void sub_101861F08(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101861F1C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setCellDbControlMask::Request, ResponseType = pds::setCellDbControlMask::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018621B8((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186219C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018621B8(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018622B0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186226C((uint64_t)a2);
  }
}

void sub_101862250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186226C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5Fu);
  return a1;
}

void sub_10186229C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018622B0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5Fu);
  return a1;
}

void sub_1018622E0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1018622F4(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectXTRAData::Request, ResponseType = pds::injectXTRAData::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101862590((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101862574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101862590(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101862688(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101862644((uint64_t)a2);
  }
}

void sub_101862628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101862644(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x37u);
  return a1;
}

void sub_101862674(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101862688(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x37u);
  return a1;
}

void sub_1018626B8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1018626CC(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectAbsTimeRef::Request, ResponseType = pds::injectAbsTimeRef::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101862968((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101862968(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101862A60(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101862A1C((uint64_t)a2);
  }
}

void sub_101862A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101862A1C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x3Du);
  return a1;
}

void sub_101862A4C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101862A60(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x3Du);
  return a1;
}

void sub_101862A90(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101862AA4(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  unsigned int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_101862B54();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_101862B54()
{
}

void sub_101862C84()
{
}

void sub_101862CE0(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::forceReceiverOff::Request, ResponseType = pds::forceReceiverOff::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101862F7C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101862F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101862F7C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101863074(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101863030((uint64_t)a2);
  }
}

void sub_101863014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101863030(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x49u);
  return a1;
}

void sub_101863060(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101863074(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x49u);
  return a1;
}

void sub_1018630A4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1018630B8(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectTimeSyncData::Request, ResponseType = pds::injectTimeSyncData::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101863354((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101863338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101863354(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186344C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101863408((uint64_t)a2);
  }
}

void sub_1018633EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101863408(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x53u);
  return a1;
}

void sub_101863438(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186344C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x53u);
  return a1;
}

void sub_10186347C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101863490(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setTimeTransferConfig::Request, ResponseType = pds::setTimeTransferConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186372C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101863710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186372C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018637E0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018387D8((uint64_t)a2);
  }
}

void sub_1018637C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_1018637E0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x85u);
  return a1;
}

void sub_101863810(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101863824(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::sendClientPulseTime::Request, ResponseType = pds::sendClientPulseTime::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101863AC0((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101863AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101863AC0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101863BB8(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101863B74((uint64_t)a2);
  }
}

void sub_101863B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101863B74(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x87u);
  return a1;
}

void sub_101863BA4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101863BB8(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x87u);
  return a1;
}

void sub_101863BE8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101863BFC(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  unsigned int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_101863CAC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_101863CAC()
{
}

void sub_101863DDC()
{
}

void sub_101863E38(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDpoStatusReport::Request, ResponseType = pds::setDpoStatusReport::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018640D4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018640B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018640D4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101864188(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101838358((uint64_t)a2);
  }
}

void sub_10186416C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_101864188(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5558u);
  return a1;
}

void sub_1018641B8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1018641CC(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  unsigned int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_10186427C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_10186427C()
{
}

void sub_1018643AC()
{
}

uint64_t sub_1018643C0()
{
  return 11;
}

uint64_t sub_1018643C8(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(void *)(v3 + 3) = *(void *)(result + 16);
  uint64_t v4 = *a2 + 8;
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_101864404()
{
}

void sub_101864468(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::SetGnssReportingConfig::Request, ResponseType = pds::SetGnssReportingConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101864704((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018646E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101864704(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018647FC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018647B8((uint64_t)a2);
  }
}

void sub_10186479C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018647B8(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA3u);
  return a1;
}

void sub_1018647E8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018647FC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA3u);
  return a1;
}

void sub_10186482C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_101864840(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1018648F0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1018648F0()
{
}

void sub_101864A20()
{
}

void sub_101864A7C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::SetMultibandState::Request, ResponseType = pds::SetMultibandState::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101864D18((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101864CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101864D18(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101864E10(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101864DCC((uint64_t)a2);
  }
}

void sub_101864DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101864DCC(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xADu);
  return a1;
}

void sub_101864DFC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101864E10(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xADu);
  return a1;
}

void sub_101864E40(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101864E54(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setNavigationConfig::Request, ResponseType = pds::setNavigationConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018650F0((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018650D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018650F0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018651E8(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018651A4((uint64_t)a2);
  }
}

void sub_101865188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018651A4(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x57u);
  return a1;
}

void sub_1018651D4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018651E8(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x57u);
  return a1;
}

void sub_101865218(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186522C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectSpeedData::Request, ResponseType = pds::injectSpeedData::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018654C8((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018654AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018654C8(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018655C0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186557C((uint64_t)a2);
  }
}

void sub_101865560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186557C(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x8Eu);
  return a1;
}

void sub_1018655AC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018655C0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x8Eu);
  return a1;
}

void sub_1018655F0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101865604(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectSpeedInequalityConstraint::Request, ResponseType = pds::injectSpeedInequalityConstraint::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018658A0((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101865884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018658A0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101865998(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101865954((uint64_t)a2);
  }
}

void sub_101865938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101865954(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x97u);
  return a1;
}

void sub_101865984(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101865998(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x97u);
  return a1;
}

void sub_1018659C8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1018659DC(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectPositionData::Request, ResponseType = pds::injectPositionData::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101865C78((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101865C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101865C78(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101865D70(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101865D2C((uint64_t)a2);
  }
}

void sub_101865D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101865D2C(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x38u);
  return a1;
}

void sub_101865D5C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101865D70(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x38u);
  return a1;
}

void sub_101865DA0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101865DB4(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::svUseInFixReport::Request, ResponseType = pds::svUseInFixReport::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101866050((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101866034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101866050(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101866148(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101866104((uint64_t)a2);
  }
}

void sub_1018660E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101866104(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5557u);
  return a1;
}

void sub_101866134(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101866148(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5557u);
  return a1;
}

void sub_101866178(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186618C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::svUseInFixReport::Request, ResponseType = pds::setNmeaConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101866428((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186640C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101866428(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101866520(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018664DC((uint64_t)a2);
  }
}

void sub_1018664C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018664DC(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x27u);
  return a1;
}

void sub_10186650C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101866520(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x27u);
  return a1;
}

void sub_101866550(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101866564(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDpoConfig::Request, ResponseType = pds::setDpoConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101866800((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018667E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101866800(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018668F8(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018668B4((uint64_t)a2);
  }
}

void sub_101866898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018668B4(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x40u);
  return a1;
}

void sub_1018668E4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018668F8(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x40u);
  return a1;
}

void sub_101866928(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186693C(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    BOOL result = sub_100169918(result, __sz);
    int v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_101866994(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018669B0(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::sendSuplNiResponse::Request, ResponseType = pds::sendSuplNiResponse::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101866C4C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101866C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101866C4C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101866D44(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101866D00((uint64_t)a2);
  }
}

void sub_101866CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101866D00(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x3Cu);
  return a1;
}

void sub_101866D30(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101866D44(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x3Cu);
  return a1;
}

void sub_101866D74(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101866D88(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setInjectMotionData::Request, ResponseType = pds::setInjectMotionData::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101867024((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101867008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101867024(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186711C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018670D8((uint64_t)a2);
  }
}

void sub_1018670BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018670D8(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x61u);
  return a1;
}

void sub_101867108(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186711C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x61u);
  return a1;
}

void sub_10186714C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101867160(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setApnProfiles::Request, ResponseType = pds::setApnProfiles::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018673FC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018673E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018673FC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018674F4(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018674B0((uint64_t)a2);
  }
}

void sub_101867494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018674B0(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x78u);
  return a1;
}

void sub_1018674E0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018674F4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x78u);
  return a1;
}

void sub_101867524(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101867538(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setSuplUdpPortConfig::Request, ResponseType = pds::setSuplUdpPortConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018677D4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018677B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018677D4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018678CC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101867888((uint64_t)a2);
  }
}

void sub_10186786C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101867888(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x83u);
  return a1;
}

void sub_1018678B8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018678CC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x83u);
  return a1;
}

void sub_1018678FC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101867910(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setLppConfig::Request, ResponseType = pds::setLppConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101867BAC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101867B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101867BAC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101867CA4(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101867C60((uint64_t)a2);
  }
}

void sub_101867C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101867C60(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x7Eu);
  return a1;
}

void sub_101867C90(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101867CA4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x7Eu);
  return a1;
}

void sub_101867CD4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101867CE8(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setEmergencySupportConfig::Request, ResponseType = pds::setEmergencySupportConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101867F84((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101867F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101867F84(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186807C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101868038((uint64_t)a2);
  }
}

void sub_10186801C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101868038(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x8Au);
  return a1;
}

void sub_101868068(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186807C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x8Au);
  return a1;
}

void sub_1018680AC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1018680C0(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setOTDOAConfig::Request, ResponseType = pds::setOTDOAConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186835C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101868340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186835C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101868454(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101868410((uint64_t)a2);
  }
}

void sub_1018683F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101868410(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x93u);
  return a1;
}

void sub_101868440(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101868454(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x93u);
  return a1;
}

void sub_101868484(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101868498(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::injectSignalEnvironment::Request, ResponseType = pds::injectSignalEnvironment::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101868734((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101868718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101868734(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186882C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018687E8((uint64_t)a2);
  }
}

void sub_1018687CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018687E8(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x96u);
  return a1;
}

void sub_101868818(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186882C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x96u);
  return a1;
}

void sub_10186885C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101868870(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::cancelOngoingSession::Request, ResponseType = pds::cancelOngoingSession::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101868B0C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101868AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101868B0C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101868C04(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101868BC0((uint64_t)a2);
  }
}

void sub_101868BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101868BC0(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x84u);
  return a1;
}

void sub_101868BF0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101868C04(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x84u);
  return a1;
}

void sub_101868C34(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101868C48(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setUserPlanePositionModes::Request, ResponseType = pds::setUserPlanePositionModes::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101868EE4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101868EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101868EE4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101868FDC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101868F98((uint64_t)a2);
  }
}

void sub_101868F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101868F98(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x74u);
  return a1;
}

void sub_101868FC8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101868FDC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x74u);
  return a1;
}

void sub_10186900C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101869020(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setInjectDirectionOfTravel::Request, ResponseType = pds::setInjectDirectionOfTravel::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_1018692BC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_1018692A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018692BC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018693B4(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101869370((uint64_t)a2);
  }
}

void sub_101869354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101869370(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x66u);
  return a1;
}

void sub_1018693A0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_1018693B4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x66u);
  return a1;
}

void sub_1018693E4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1018693F8(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setGnssEngineMonitorConfig::Request, ResponseType = pds::setGnssEngineMonitorConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101869694((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101869678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101869694(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101869748(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101839558((uint64_t)a2);
  }
}

void sub_10186972C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_101869748(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA1u);
  return a1;
}

void sub_101869778(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186978C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setEmergencyModeLockoutConfig::Request, ResponseType = pds::setEmergencyModeLockoutConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_101869A28((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_101869A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101869A28(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_101869B20(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101869ADC((uint64_t)a2);
  }
}

void sub_101869AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101869ADC(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA9u);
  return a1;
}

void sub_101869B0C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_101869B20(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA9u);
  return a1;
}

void sub_101869B50(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void *sub_101869B64(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)&long long v7 = a2[1];
  *(void *)((char *)&v7 + 7) = *(uint64_t *)((char *)a2 + 15);
  char v4 = *((unsigned char *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int v5 = operator new(0x20uLL);
  void *v5 = off_102343A88;
  v5[1] = v3;
  _DWORD v5[2] = v7;
  *(void *)((char *)v5 + 23) = *(void *)((char *)&v7 + 7);
  *((unsigned char *)v5 + 31) = v4;
  void v8[3] = v5;
  sub_10186A334(v8, a1);
  sub_10186AAA8(v8);
  return a1;
}

void sub_101869C30(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101869C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 - a1 < 0) {
    sub_10186D470();
  }
  if (!*(void *)(a4 + 24)) {
    sub_10186D49C();
  }
  sub_10010F274((uint64_t)v18);
  int v10 = *(char *)(a3 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = *(void *)a3;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  sub_100132EFC(v19, v11, v12);
  sub_10186A5A0(a1, a2, (uint64_t)v18, a5);
  std::stringbuf::str();
  uint64_t v13 = *(void *)(a4 + 24);
  if (!v13) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 48))(v13, &__p);
  if (v17 < 0) {
    operator delete(__p);
  }
  *(void *)((char *)v18
  v19[0] = v14;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101869E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_101869E84(uint64_t a1)
{
  *(void *)a1 = off_102343A88;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101869ED4(uint64_t a1)
{
  *(void *)a1 = off_102343A88;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void *sub_101869F44(uint64_t a1)
{
  int v2 = operator new(0x20uLL);
  void *v2 = off_102343A88;
  uint64_t v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1000DC48C(v3, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_101869FB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_101869FCC(char *result, void *a2)
{
  *a2 = off_102343A88;
  int v2 = a2 + 1;
  if (result[31] < 0) {
    return (char *)sub_1000DC48C(v2, *((void **)result + 1), *((void *)result + 2));
  }
  long long v3 = *(_OWORD *)(result + 8);
  v2[2] = *((void *)result + 3);
  *(_OWORD *)int v2 = v3;
  return result;
}

void sub_10186A018(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_10186A02C(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void sub_10186A070(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10186A078(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10186A0B8()
{
}

void sub_10186A0C4(uint64_t *a1, uint64_t a2)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_10186A134(a1, (uint64_t *)__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10186A118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10186A134(uint64_t *a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      int v5 = (uint64_t *)*a1;
    }
    uint64_t v6 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v6 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136315394;
    int v9 = v5;
    __int16 v10 = 2080;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s,%s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGpsUtilities::logRange(const std::vector<unsigned short> &, std::string, std::function<void (std::string)>, std::function<std::string (const unsigned short &)>)::(anonymous class)::operator()(std::string) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void *sub_10186A334(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10186A594(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10186A5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = *(void *)(a4 + 24);
      if (!v8) {
        sub_10015E48C();
      }
      (*(void (**)(void **__return_ptr))(*(void *)v8 + 48))(__p);
      if ((v14 & 0x80u) == 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        uint64_t v10 = v14;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      uint64_t v11 = sub_100132EFC((void *)(a3 + 16), (uint64_t)v9, v10);
      sub_100132EFC(v11, (uint64_t)",", 1);
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_10186A68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186A6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10186A740(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10186A7DC()
{
}

void *sub_10186A7F0()
{
  BOOL result = operator new(0x10uLL);
  void *result = off_102343B18;
  return result;
}

void sub_10186A828(uint64_t a1, void *a2)
{
  *a2 = off_102343B18;
}

void sub_10186A850(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = __p;
    if (v7 < 0) {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#rti,%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    char v4 = __p;
    if (v7 < 0) {
      char v4 = (void **)__p[0];
    }
    int v8 = 136315138;
    int v9 = v4;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLQmiPdsMessenger::sendSetBlockList(const qmi::pds::BlockListSv &, void (^)(const pds::setBlocklistSv::Response &))::(anonymous class)::operator()(std::string) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10186AA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186AA5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10186AA9C()
{
}

void *sub_10186AAA8(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10186AB2C(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_102343B98;
  result[1] = v3;
  return result;
}

uint64_t sub_10186AB74(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102343B98;
  a2[1] = v2;
  return result;
}

uint64_t sub_10186ABA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10186ABAC(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102343C18)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10186ABEC()
{
  return &off_102343C18;
}

void *sub_10186ABF8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10186AC7C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setBlocklistSv::Request, ResponseType = pds::setBlocklistSv::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186AF18((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186AEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186AF18(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186B010(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186AFCC((uint64_t)a2);
  }
}

void sub_10186AFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186AFCC(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x8Bu);
  return a1;
}

void sub_10186AFFC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186B010(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  char v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x8Bu);
  return a1;
}

void sub_10186B040(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186B054(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setInjectSuplCert::Request, ResponseType = pds::setInjectSuplCert::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186B2F0((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186B2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186B2F0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186B3E8(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186B3A4((uint64_t)a2);
  }
}

void sub_10186B388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186B3A4(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x67u);
  return a1;
}

void sub_10186B3D4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186B3E8(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  char v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x67u);
  return a1;
}

void sub_10186B418(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186B42C(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setDeleteSuplCert::Request, ResponseType = pds::setDeleteSuplCert::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186B6C8((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186B6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186B6C8(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186B7C0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186B77C((uint64_t)a2);
  }
}

void sub_10186B760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186B77C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x68u);
  return a1;
}

void sub_10186B7AC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186B7C0(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  char v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x68u);
  return a1;
}

void sub_10186B7F0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186B804(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  char v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setXOCalibrationStateConfig::Request, ResponseType = pds::setXOCalibrationStateConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186BAA0((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186BAA0(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186BB54(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10183B054((uint64_t)a2);
  }
}

void sub_10186BB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_10186BB54(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  char v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x98u);
  return a1;
}

void sub_10186BB84(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_10186BB98(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_10186BC48();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void sub_10186BC48()
{
}

void sub_10186BD7C()
{
}

uint64_t sub_10186BD90()
{
  return 9;
}

uint64_t sub_10186BD98(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  uint64_t v4 = *a2;
  *a2 += 2;
  *(_WORD *)(v4 + 2) = *(_WORD *)(result + 12);
  uint64_t v5 = *a2;
  *a2 += 2;
  *(_WORD *)(v5 + 2) = *(_WORD *)(result + 14);
  uint64_t v6 = *a2 + 2;
  *a2 = v6;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_10186BDFC()
{
}

char *sub_10186BE68(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_10186BF18();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void sub_10186BF18()
{
}

void sub_10186C048()
{
}

uint64_t sub_10186C05C(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  uint64_t v4 = *a2 + 2;
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_10186C098()
{
}

char *sub_10186C0FC(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_10186C1AC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void sub_10186C1AC()
{
}

void sub_10186C2DC()
{
}

void sub_10186C340(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::SetGnssRfConfig::Request, ResponseType = pds::SetGnssRfConfig::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186C5DC((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186C5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186C5DC(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186C6D4(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186C690((uint64_t)a2);
  }
}

void sub_10186C674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186C690(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x65u);
  return a1;
}

void sub_10186C6C0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186C6D4(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x65u);
  return a1;
}

void sub_10186C704(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186C718(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setWwanAntTuneL5BlankingControl::Request, ResponseType = pds::setWwanAntTuneL5BlankingControl::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186C9B4((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186C998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186C9B4(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186CAAC(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186CA68((uint64_t)a2);
  }
}

void sub_10186CA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186CA68(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB7u);
  return a1;
}

void sub_10186CA98(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186CAAC(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB7u);
  return a1;
}

void sub_10186CADC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186CAF0(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::setConstellationControl::Request, ResponseType = pds::setConstellationControl::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186CD8C((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186CD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186CD8C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186CE84(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186CE40((uint64_t)a2);
  }
}

void sub_10186CE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186CE40(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xC0u);
  return a1;
}

void sub_10186CE70(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186CE84(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xC0u);
  return a1;
}

void sub_10186CEB4(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186CEC8(uint64_t a1, unsigned __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[6];
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2081;
    uint64_t ErrorString = QMIServiceMsg::getErrorString((QMIServiceMsg *)a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,QMI,Response\", \"msgId\":0x%{public}04X, \"eCode\":%{private, location:escape_only}s}", buf, 0x22u);
  }
  if (a2[22] == 7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343918);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response to invalid QMI client", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiClientProxy::send(const RequestType &, void (^)(const ResponseType &)) const [RequestType = pds::getTimingAdvance::Request, ResponseType = pds::getTimingAdvance::Response]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      sub_10186D164((uint64_t)a2, (qmi::ResponseBase *)buf);
      (*(void (**)(uint64_t, uint8_t *))(v8 + 16))(v8, buf);
      qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    }
  }
}

void sub_10186D148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10186D164(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_10186D25C(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10186D218((uint64_t)a2);
  }
}

void sub_10186D1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186D218(uint64_t a1)
{
  char v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xE0u);
  return a1;
}

void sub_10186D248(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *sub_10186D25C(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xE0u);
  return a1;
}

void sub_10186D28C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10186D2A0()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,service msg is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
    }
    uint64_t v1 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,service msg is null", "{\"msg%{public}.0s\":\"#bb.e,service msg is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343918);
      }
    }
    char v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#bb.e,service msg is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102343918);
  }
}

void sub_10186D470()
{
  __assert_rtn("logRange", "CLGpsUtilities.h", 126, "std::distance(start, end) >= 0 && \"start must be less than equal to end\"");
}

void sub_10186D49C()
{
}

void sub_10186D4C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v21 = a1 + 16;
  *(void *)(a1 + 16) = off_1022B6DB8;
  uint64_t v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = off_1022B6DF0;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = 0;
  *((_DWORD *)v3 + 6) = 31337;
  *(void *)(a1 + 16) = off_1022C7F70;
  *(void *)(a1 + 24) = v3 + 3;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v4 = (void **)(a1 + 64);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 112) = _Q1;
  *(void *)(a1 + 128) = 0xBFF0000000000000;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 156) = -1;
  *(void *)(a1 + 164) = -1;
  *(_OWORD *)(a1 + 176) = _Q1;
  *(_DWORD *)(a1 + 192) = 0;
  __asm { FMOV            V8.2S, #-1.0 }
  *(void *)(a1 + 196) = _D8;
  *(_DWORD *)(a1 + 204) = 26;
  *(_WORD *)(a1 + 208) = 0;
  *(void *)(a1 + 212) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 220) = -1;
  *(_WORD *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 226) = 0;
  *(void *)(a1 + 232) = -1;
  *(unsigned char *)(a1 + 240) = 0;
  *(void *)(a1 + 244) = 4;
  *(_WORD *)(a1 + 252) = 0;
  *(void *)&long long v11 = -1;
  *((void *)&v11 + 1) = -1;
  *(void *)(a1 + 256) = -1;
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 294) = 0;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 304) = _Q1;
  long long v20 = _Q1;
  *(_OWORD *)(a1 + 320) = _Q1;
  *(unsigned char *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 356) = xmmword_101D47CB0;
  uint64_t v12 = (void **)(a1 + 376);
  *(_OWORD *)(a1 + 419) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 436) = xmmword_101D90440;
  *(void *)(a1 + 452) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = -1;
  *(_DWORD *)(a1 + 475) = 0;
  *(void *)(a1 + 468) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = v11;
  *(_OWORD *)(a1 + 608) = v11;
  *(void *)(a1 + 624) = -1;
  *(void *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 644) = 0;
  *(void *)(a1 + 648) = _D8;
  *(_DWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  sub_101171D90(a1 + 704);
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_DWORD *)(a1 + 768) = 0;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  __int16 v13 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd Initializing CLEmergencyAWD\n\"}", buf, 0x12u);
  }
  memset((char *)&v26[2] + 6, 0, 27);
  *(void *)((char *)&v26[5] + 7) = 0;
  long long v14 = 0uLL;
  memset(buf, 0, 60);
  v26[0] = 0;
  *(void *)((char *)v26 + 7) = 0;
  *(void *)((char *)v25 + 7) = 0;
  v25[0] = 0;
  *(void *)&long long v15 = -1;
  *((void *)&v15 + 1) = -1;
  long long v22 = v15;
  long long v23 = v15;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*v4);
    long long v14 = 0uLL;
  }
  *(_OWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 96) = v14;
  *(_OWORD *)uint64_t v4 = v14;
  *(_OWORD *)(a1 + 112) = v20;
  *(void *)(a1 + 128) = 0xBFF0000000000000;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 156) = -1;
  *(void *)(a1 + 164) = -1;
  *(_DWORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 176) = v20;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 196) = _D8;
  *(_DWORD *)(a1 + 204) = 26;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = -1;
  *(_OWORD *)(a1 + 224) = xmmword_101E449F0;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = -1;
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  long long v16 = *(_OWORD *)((char *)&v26[4] + 6);
  *(_OWORD *)(a1 + 269) = *(_OWORD *)((char *)&v26[2] + 6);
  *(_OWORD *)(a1 + 285) = v16;
  *(unsigned char *)(a1 + 301) = BYTE6(v26[6]);
  *(_WORD *)(a1 + 302) = 0;
  *(_OWORD *)(a1 + 304) = v20;
  *(_OWORD *)(a1 + 320) = v20;
  *(_OWORD *)(a1 + 336) = v14;
  *(_OWORD *)(a1 + 352) = v14;
  *(_DWORD *)(a1 + 368) = -1;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v12);
  }
  char v17 = (void **)(a1 + 400);
  *uint64_t v12 = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v17);
  }
  unsigned __int8 *v17 = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 436) = xmmword_101D90440;
  *(_DWORD *)(a1 + 452) = -1;
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 460) = 0;
  *(unsigned char *)(a1 + 463) = 0;
  *(_WORD *)(a1 + 461) = 0;
  *(_DWORD *)(a1 + 464) = -1;
  *(_DWORD *)(a1 + 475) = 0;
  *(void *)(a1 + 468) = 0;
  *(unsigned char *)(a1 + 479) = 0;
  long long v18 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 480) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 496) = v18;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 524) = *(_OWORD *)&buf[44];
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = v26[0];
  *(void *)(a1 + 559) = *(void *)((char *)v26 + 7);
  *(unsigned char *)(a1 + 567) = 0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = v25[0];
  *(void *)(a1 + 583) = *(void *)((char *)v25 + 7);
  *(unsigned char *)(a1 + 591) = 0;
  *(_OWORD *)(a1 + 592) = v22;
  *(_OWORD *)(a1 + 608) = v23;
  *(void *)(a1 + 624) = -1;
  id v19 = [objc_msgSend(*(id *)a1, "vendor", a1 + 48) proxyForService:@"CLClientManager"];
  *(void *)(a1 + 8) = v19;
  [v19 registerDelegate:sub_1000C86C4(v21) inSilo:[*(id *)a1 silo]];
  [*(id *)(a1 + 8) setDelegateEntityName:"CLEmergencyAWD"];
  sub_10060F068();
}

void sub_10186DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = *v19;
  *id v19 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  sub_1000D7D80(a17);
  uint64_t v22 = *(void *)(v18 + 632);
  *(void *)(v18 + 632) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  sub_10186DDCC(a9);
  sub_100789878(a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10186DDCC(uint64_t a1)
{
  if (*(char *)(a1 + 543) < 0) {
    operator delete(*(void **)(a1 + 520));
  }
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10186DE40(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102343DE0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyAWD::HandleStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102343DE0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      id v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyAWD::HandleStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101870EFC((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10186DFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10186E01C(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102343DE0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyAWD::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102343DE0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      id v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyAWD::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101871248((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10186E1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10186E1FC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 776) = 0;
  uint64_t v2 = *(void *)(a1 + 752);
  *(void *)(a1 + 752) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1000D7D80(a1 + 664);
  uint64_t v3 = *(void *)(a1 + 632);
  *(void *)(a1 + 632) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  sub_100789878(a1 + 16);
  return a1;
}

__n128 sub_10186E300(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd Clearing Emergency AWD stats\"}", buf, 0x12u);
  }
  memset(&buf[70], 0, 33);
  long long v3 = 0uLL;
  memset(buf, 0, 60);
  v4.n128_u64[0] = -1;
  v4.n128_u64[1] = -1;
  __n128 v17 = v4;
  __n128 v18 = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  int v5 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*v5);
    long long v3 = 0uLL;
  }
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v3;
  *(_OWORD *)int v5 = v3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 112) = _Q0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 156) = -1;
  *(void *)(a1 + 164) = -1;
  *(_DWORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 176) = _Q0;
  *(_DWORD *)(a1 + 192) = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(void *)(a1 + 196) = _D1;
  *(_DWORD *)(a1 + 204) = 26;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = -1;
  *(_OWORD *)(a1 + 224) = xmmword_101E449F0;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = -1;
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  long long v12 = *(_OWORD *)&buf[86];
  *(_OWORD *)(a1 + 269) = *(_OWORD *)&buf[70];
  *(_OWORD *)(a1 + 285) = v12;
  *(unsigned char *)(a1 + 301) = buf[102];
  *(_WORD *)(a1 + 302) = 0;
  *(_OWORD *)(a1 + 304) = _Q0;
  *(_OWORD *)(a1 + 320) = _Q0;
  *(_OWORD *)(a1 + 336) = v3;
  *(_OWORD *)(a1 + 352) = v3;
  *(_DWORD *)(a1 + 368) = -1;
  int v13 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v13);
  }
  __int16 v14 = (void **)(a1 + 400);
  *int v13 = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*v14);
  }
  *__int16 v14 = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 436) = xmmword_101D90440;
  *(void *)(a1 + 452) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 460) = 0;
  *(unsigned char *)(a1 + 463) = 0;
  *(_WORD *)(a1 + 461) = 0;
  *(_DWORD *)(a1 + 464) = -1;
  *(_DWORD *)(a1 + 475) = 0;
  *(void *)(a1 + 468) = 0;
  *(unsigned char *)(a1 + 479) = 0;
  long long v15 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 480) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 524) = *(_OWORD *)&buf[44];
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 559) = 0;
  *(unsigned char *)(a1 + 567) = 0;
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 583) = 0;
  *(unsigned char *)(a1 + 591) = 0;
  __n128 result = v17;
  *(__n128 *)(a1 + 592) = v17;
  *(__n128 *)(a1 + 608) = v18;
  *(void *)(a1 + 624) = -1;
  return result;
}

void sub_10186E610(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  *(double *)(a1 + 88) = a5;
  *(double *)(a1 + 96) = a6;
  *(double *)(a1 + 104) = a7;
  *(double *)(a1 + 112) = a8;
  *(double *)(a1 + 120) = a10;
  *(double *)(a1 + 128) = a9;
  *(_DWORD *)(a1 + 264) = a2;
  if (a4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,inapplicable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      v33[0] = 0;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    sub_1018713C0((uint64_t)v33, a1 + 48);
    if ((a3 - 1) <= 3)
    {
      if (*(void *)(a1 + 776))
      {
        id v16 = [objc_alloc((Class)CLLocation) initWithLatitude:a5 longitude:a6];
        __n128 v17 = *(void **)(a1 + 776);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3321888768;
        v20[2] = sub_10186EA7C;
        unsigned char v20[3] = &unk_102343D60;
        void v20[4] = a1;
        sub_1018713C0((uint64_t)&v21, (uint64_t)v33);
        [v17 fetchLocationOfInterestAtLocation:v16 withReply:v20];
        if (v31 < 0) {
          operator delete(__p);
        }
        if (v29 < 0) {
          operator delete(v28);
        }
        if (v27 < 0) {
          operator delete(v26);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        if (v23 < 0) {
          operator delete(v22);
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        __n128 v18 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,unavailable,error: CLRoutineMonitor is not supported", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          __int16 v32 = 0;
          id v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    if (v37 < 0) {
      operator delete(v36);
    }
    if (v35 < 0) {
      operator delete(v34);
    }
  }
}

void sub_10186EA44(_Unwind_Exception *a1)
{
}

void sub_10186EA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(id **)(a1 + 32);
  uint64_t v7 = [objc_msgSend(*v6, "silo") queue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  _DWORD v8[2] = sub_10186EB84;
  void v8[3] = &unk_102343D30;
  void v8[5] = a2;
  v8[6] = v6;
  void v8[4] = a3;
  sub_1018713C0((uint64_t)&v9, a1 + 40);
  dispatch_async(v7, v8);
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
}

void sub_10186EB84(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v23 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,unavailable,error: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      __n128 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if ([*(id *)(a1 + 32) code] != (id)1) {
      [*(id *)(a1 + 32) code];
    }
  }
  else if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#awd,locationOfInterest,available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      char v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 96);
      uint64_t v8 = *(void *)(a1 + 104);
      uint64_t v9 = *(void *)(a1 + 120);
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 134218754;
      uint64_t v23 = v7;
      __int16 v24 = 2048;
      uint64_t v25 = v8;
      __int16 v26 = 2048;
      uint64_t v27 = v9;
      __int16 v28 = 2112;
      uint64_t v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#awd,SessionFix,{%f,%f,%f},locationOfInterest,%@", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    if (*(double *)(a1 + 120) > 0.0)
    {
      [objc_msgSend(*(id *)(a1 + 40), "location") horizontalUncertainty];
      if (v11 > 0.0)
      {
        double v12 = *(double *)(a1 + 96);
        double v13 = *(double *)(a1 + 104);
        [objc_msgSend(*(id *)(a1 + 40), "location") latitude];
        double v15 = v14;
        [objc_msgSend(*(id *)(a1 + 40), "location") longitude];
        [objc_msgSend(*(id *)(a1 + 40), "location", (double)sub_1000F1648((double *)(v4 + 704), v12, v13, v15, v16, 0.0)) horizontalUncertainty];
      }
    }
    [*(id *)(a1 + 40) typeSource];
    [*(id *)(a1 + 40) type];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    char v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,#awd,locationOfInterest,unavailable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setPositionStats(double, double, double, double, double, double, uint8_t, Emergency::PositionSession, Emergency::SessionErrorCode)_block_invoke", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

uint64_t sub_10186F1F4(uint64_t a1, uint64_t a2)
{
  return sub_1018713C0(a1 + 56, a2 + 56);
}

void sub_10186F200(uint64_t a1)
{
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*(void **)(a1 + 576));
  }
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  if (*(char *)(a1 + 95) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 72);
    operator delete(v2);
  }
}

uint64_t sub_10186F288(uint64_t a1, uint64_t a2)
{
  return sub_1018713C0(a1 + 40, a2 + 40);
}

void sub_10186F294(uint64_t a1)
{
  if (*(char *)(a1 + 583) < 0) {
    operator delete(*(void **)(a1 + 560));
  }
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 56);
    operator delete(v2);
  }
}

void sub_10186F31C(uint64_t a1)
{
  sub_1018713C0((uint64_t)v46, a1 + 48);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68290051;
    __int16 v62 = 2082;
    __int16 v63 = "";
    __int16 v64 = 2049;
    uint64_t v65 = v49;
    __int16 v66 = 2049;
    uint64_t v67 = v50;
    __int16 v68 = 2049;
    uint64_t v69 = v51;
    __int16 v70 = 2049;
    uint64_t v71 = v52;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd Before deres\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\"}", (uint8_t *)&buf, 0x3Au);
  }
  uint64_t v3 = v49;
  uint64_t v4 = v50;
  uint64_t v5 = v51;
  uint64_t v6 = v52;
  uint64_t v7 = *(void **)(a1 + 8);
  id v8 = objc_alloc((Class)CLLocation);
  uint64_t v28 = v3;
  uint64_t v29 = v4;
  uint64_t v30 = v6;
  uint64_t v31 = v5;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v32 = _Q0;
  long long v33 = _Q0;
  long long v34 = _Q0;
  int v27 = 0xFFFF;
  int v35 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v36 = 0xBFF0000000000000;
  unint64_t v40 = 0xBFF0000000000000;
  int v39 = 0;
  int v41 = 0x7FFFFFFF;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  char v45 = 0;
  id v14 = [v8 initWithClientLocation:&v27];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_10186F610;
  v15[3] = &unk_102343D90;
  void v15[4] = a1;
  sub_1018713C0((uint64_t)&v16, (uint64_t)v46);
  [v7 reduceAccuracy:v14 withReply:v15];
  if (v26 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
}

void sub_10186F5E4(_Unwind_Exception *a1)
{
  sub_10186DDCC(v1);
  sub_10186DDCC((uint64_t)&STACK[0x318]);
  _Unwind_Resume(a1);
}

void sub_10186F610(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_1018713C0((uint64_t)v26, a1 + 40);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    [a2 coordinate];
    uint64_t v6 = v5;
    [a2 coordinate];
    uint64_t v8 = v7;
    [a2 altitude];
    uint64_t v10 = v9;
    [a2 horizontalAccuracy];
    uint64_t buf = 68290051;
    __int16 v41 = 2082;
    uint64_t v42 = "";
    __int16 v43 = 2049;
    uint64_t v44 = v6;
    __int16 v45 = 2049;
    uint64_t v46 = v8;
    __int16 v47 = 2049;
    uint64_t v48 = v10;
    __int16 v49 = 2049;
    uint64_t v50 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd After deres\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\"}", (uint8_t *)&buf, 0x3Au);
  }
  [a2 coordinate];
  uint64_t v29 = v12;
  [a2 coordinate];
  uint64_t v30 = v13;
  [a2 altitude];
  uint64_t v31 = v14;
  sub_1018713C0((uint64_t)&v15, (uint64_t)v26);
  sub_10186E300(v3);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
}

void sub_10186F840(_Unwind_Exception *a1)
{
}

uint64_t sub_10186F87C(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(result + 152) = 0;
  if (a2 <= 0xC && ((0x17FFu >> a2) & 1) != 0) {
    *(_DWORD *)(result + 152) = dword_101E44A20[a2];
  }
  return result;
}

void sub_10186F8A8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 192) = 0;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 - 1) >= 3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 192) = v2;
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 244);
  int v3 = *(unsigned __int8 *)(a2 + 245);
  *(unsigned char *)(a1 + 301) = v3;
  if (v3)
  {
    *(void *)(a1 + 304) = *(void *)(a2 + 248);
    *(void *)(a1 + 336) = *(void *)(a2 + 928);
    if (*(unsigned char *)(a2 + 280))
    {
      if (sub_1000E6DB4(a2 + 444))
      {
        double v6 = *(double *)(a2 + 464);
        if (*(double *)(a2 + 248) > 0.0 && v6 > 0.0)
        {
          *(long double *)(a1 + 320) = sub_1000F1648((double *)(a1 + 704), *(double *)(a2 + 912), *(double *)(a2 + 920), *(double *)(a2 + 448), *(double *)(a2 + 456), 0.0);
          double v6 = *(double *)(a2 + 464);
        }
        if (*(double *)(a2 + 56) > 0.0 && v6 > 0.0) {
          *(_DWORD *)(a1 + 368) = (int)sub_1000F1648((double *)(a1 + 704), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 448), *(double *)(a2 + 456), 0.0);
        }
      }
      uint64_t v7 = (double *)(a2 + 292);
      int v8 = sub_1000E6DB4(a2 + 288);
      double v9 = *(double *)(a2 + 248);
      if (v8 && v9 > 0.0 && *(double *)(a2 + 308) > 0.0)
      {
        *(long double *)(a1 + 312) = sub_1000F1648((double *)(a1 + 704), *(double *)(a2 + 912), *(double *)(a2 + 920), *v7, *(double *)(a2 + 300), 0.0);
        double v9 = *(double *)(a2 + 248);
      }
      if (*(unsigned char *)(a2 + 40) && v9 > 0.0 && *(double *)(a2 + 56) > 0.0) {
        *(long double *)(a1 + 328) = sub_1000F1648((double *)(a1 + 704), *(double *)(a2 + 912), *(double *)(a2 + 920), *(double *)(a2 + 24), *(double *)(a2 + 32), 0.0);
      }
      if (*(unsigned char *)(a2 + 1019)
        && sub_1000E6DB4(a2 + 288)
        && *(double *)(a2 + 1040) > 0.0
        && *(double *)(a2 + 308) > 0.0)
      {
        *(_DWORD *)(a1 + 440) = (int)sub_1000F1648((double *)(a1 + 704), *(double *)(a2 + 1024), *(double *)(a2 + 1032), *v7, *(double *)(a2 + 300), 0.0);
      }
    }
  }
}

double sub_10186FA64(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 88) & 0xFFFFFFFE) == 8)
  {
    *(_DWORD *)(a1 + 484) = *(_DWORD *)(a2 + 1092);
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 1096);
    v4.i64[0] = -1;
    v4.i64[1] = -1;
    *(int8x16_t *)(a1 + 492) = vandq_s8(*(int8x16_t *)(a2 + 1100), (int8x16_t)vcgtq_u32((uint32x4_t)xmmword_101E44A10, (uint32x4_t)vaddq_s32(*(int32x4_t *)(a2 + 1100), v4)));
    v5.i64[0] = 0x300000003;
    v5.i64[1] = 0x300000003;
    int8x16_t v6 = vandq_s8(*(int8x16_t *)(a2 + 1116), (int8x16_t)vcgtq_u32(v5, (uint32x4_t)vaddq_s32(*(int32x4_t *)(a2 + 1116), v4)));
    int8x16_t v7 = vandq_s8(*(int8x16_t *)(a2 + 1132), (int8x16_t)vcgtq_u32(v5, (uint32x4_t)vaddq_s32(*(int32x4_t *)(a2 + 1132), v4)));
    *(int8x16_t *)(a1 + 508) = v6;
    *(int8x16_t *)(a1 + 524) = v7;
    std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 1152));
    std::string::operator=((std::string *)(a1 + 568), (const std::string *)(a2 + 1176));
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 1200);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 1216);
    double result = *(double *)(a2 + 1232);
    *(double *)(a1 + 624) = result;
  }
  return result;
}

uint64_t sub_10186FB24(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(result + 204) = 26;
  if (a2 < 0x1A || a2 - 27 <= 9) {
    *(_DWORD *)(result + 204) = a2;
  }
  return result;
}

void sub_10186FB48(uint64_t a1, int a2)
{
  for (uint64_t i = *(uint64_t **)(a1 + 680); i; uint64_t i = (uint64_t *)*i)
  {
    long long v3 = *((_OWORD *)i + 2);
    long long v32 = *((_OWORD *)i + 1);
    *(_OWORD *)char v33 = v3;
    long long v4 = *((_OWORD *)i + 4);
    *(_OWORD *)&v33[16] = *((_OWORD *)i + 3);
    *(_OWORD *)&v33[32] = v4;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    uint32x4_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = v32;
      sub_101870154();
      int8x16_t v7 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 67109379;
      *(_DWORD *)&uint8_t buf[4] = v6;
      __int16 v23 = 2081;
      char v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#awd,setTelephonyInfo,TelephonyMapPrint,inst,%d,TelephonyInfo,%{private}s", buf, 0x12u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      int v8 = v32;
      sub_101870154();
      double v9 = buf;
      if (v25 < 0) {
        double v9 = *(uint8_t **)buf;
      }
      int v26 = 67109379;
      int v27 = v8;
      __int16 v28 = 2081;
      uint64_t v29 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setTelephonyInfo(uint32_t)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  LODWORD(__p[0]) = a2;
  uint64_t v11 = sub_10011853C((void *)(a1 + 664), (int *)__p);
  if (v11)
  {
    long long v12 = *(_OWORD *)(v11 + 5);
    long long v32 = *(_OWORD *)(v11 + 3);
    *(_OWORD *)char v33 = v12;
    *(_OWORD *)&v33[16] = *(_OWORD *)(v11 + 7);
    *(void *)&v33[32] = v11[9];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    uint64_t v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      sub_101870154();
      uint64_t v14 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 67109379;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v23 = 2081;
      char v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#awd,setTelephonyInfo,inst,%d,Current TelephonyInfo,%{private}s", buf, 0x12u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      sub_101870154();
      if (v25 >= 0) {
        char v17 = buf;
      }
      else {
        char v17 = *(uint8_t **)buf;
      }
      int v26 = 67109379;
      int v27 = a2;
      __int16 v28 = 2081;
      uint64_t v29 = v17;
      char v18 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::setTelephonyInfo(uint32_t)", "%s\n", v18);
      if (v18 != (char *)__p) {
        free(v18);
      }
    }
    sub_10186F87C(a1, *(unsigned int *)&v33[24]);
    *(_OWORD *)(a1 + 156) = *(_OWORD *)&v33[8];
    *(void *)(a1 + 256) = *(void *)&v33[28];
    *(_DWORD *)(a1 + 248) = a2;
    unsigned int v15 = *(_DWORD *)(a1 + 644);
    if (v15 <= 4) {
      *(_DWORD *)(a1 + 244) = v15;
    }
    *(_WORD *)(a1 + 252) = *(_WORD *)&v33[1];
    *(unsigned char *)(a1 + 225) = v33[0];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    uint64_t v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#awd,#Warning,setTelephonyInfo,fTelephonyInfoMap,null,inst,%d", (uint8_t *)__p, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      LODWORD(v32) = 67109120;
      DWORD1(v32) = a2;
      char v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAWD::setTelephonyInfo(uint32_t)", "%s\n", v19);
      if (v19 != (char *)__p) {
        free(v19);
      }
    }
  }
}

uint64_t sub_101870154()
{
  sub_10010F274((uint64_t)v12);
  sub_100132EFC(v13, (uint64_t)"context,slt,", 12);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)",userDataPreferred,", 19);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)",userDefaultVoice,", 18);
  int v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)",isSimPresent,", 14);
  long long v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)",fMcc,", 6);
  long long v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)",fMnc,", 6);
  uint32x4_t v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)",fSid,", 6);
  int v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)",fNid,", 6);
  int8x16_t v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)",fRat,", 6);
  int v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)",fSimMcc,", 9);
  double v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)",fSimMnc,", 9);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v12
  v13[0] = v10;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1018703C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018703DC(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  long long v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289026;
    __int16 v36 = 2082;
    char v37 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,handleEmergencySessionReport\"}", (uint8_t *)&buf, 0x12u);
  }
  if (*(unsigned char *)(a2 + 280)) {
    sub_10192C0E0(a2);
  }
  sub_10186E610(a1, *(unsigned __int8 *)(a2 + 208), *(_DWORD *)(a2 + 88), *(_DWORD *)(a2 + 148), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a2 + 48), *(double *)(a2 + 56), *(double *)(a2 + 72), *(double *)(a2 + 64));
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 80);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 - 1) >= 0xA) {
    int v5 = 0;
  }
  *(_DWORD *)(a1 + 140) = v5;
  int v6 = *(_DWORD *)(a2 + 88);
  if ((v6 - 1) >= 9) {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 144) = v6;
  int v7 = *(_DWORD *)(a2 + 92);
  if ((v7 - 1) >= 9) {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + 148) = v7;
  *(void *)(a1 + 196) = *(void *)(a1 + 648);
  sub_10186F8A8(a1, a2);
  sub_10186FB24(a1, *(_DWORD *)(a2 + 148));
  int v8 = *(_DWORD *)(a2 + 156);
  int v9 = *(unsigned __int8 *)(a2 + 280);
  int v10 = *(unsigned __int8 *)(a2 + 282);
  int v11 = *(_DWORD *)(a2 + 284);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 152);
  if ((v8 - 1) >= 2) {
    int v12 = 0;
  }
  else {
    int v12 = v8;
  }
  *(_DWORD *)(a1 + 212) = v12;
  if (v9)
  {
    *(unsigned char *)(a1 + 268) = v10;
    if (v10) {
      *(_DWORD *)(a1 + 272) = v11;
    }
  }
  *(void *)(a1 + 216) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 276) = *(_OWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 236);
  unsigned int v13 = *(_DWORD *)(a2 + 240);
  if (v13 <= 4) {
    *(_DWORD *)(a1 + 296) = v13;
  }
  sub_10186FA64(a1, a2);
  uint64_t v14 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 170);
  *(void *)(a1 + 232) = v14;
  int v15 = *(_DWORD *)(a1 + 656);
  *(unsigned char *)(a1 + 224) = v15 == 2;
  *(unsigned char *)(a1 + 240) = v15 != 0;
  if (*(_DWORD *)(a1 + 144) == 3) {
    *(_DWORD *)(a1 + 152) = 11;
  }
  else {
    sub_10186FB48(a1, *(_DWORD *)(a2 + 192));
  }
  *(_DWORD *)(a1 + 348) = 0;
  int v16 = *(_DWORD *)(a1 + 744);
  if ((v16 - 1) < 4 || v16 == 6) {
    *(_DWORD *)(a1 + 348) = v16;
  }
  int v17 = *(_DWORD *)(a2 + 936);
  if (v17 == 2) {
    int v18 = 2;
  }
  else {
    int v18 = v17 == 1;
  }
  *(_DWORD *)(a1 + 344) = v18;
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 940);
  unsigned int v19 = *(_DWORD *)(a2 + 944);
  if (v19 >= 0xC) {
    unsigned int v19 = 1;
  }
  *(_DWORD *)(a1 + 356) = v19;
  int v20 = *(_DWORD *)(a2 + 948);
  if ((v20 - 1) >= 9) {
    int v20 = 0;
  }
  *(_DWORD *)(a1 + 360) = v20;
  int v21 = *(_DWORD *)(a2 + 952);
  if (v21 == 2) {
    int v22 = 2;
  }
  else {
    int v22 = v21 == 1;
  }
  *(_DWORD *)(a1 + 364) = v22;
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 1016);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a2 + 960));
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 984));
  *(void *)(a1 + 424) = *(void *)(a1 + 760);
  *(_DWORD *)(a1 + 468) = *(_DWORD *)(a2 + 1080);
  int v23 = *(_DWORD *)(a2 + 1084);
  if ((v23 - 1) >= 7) {
    int v23 = 0;
  }
  *(_DWORD *)(a1 + 472) = v23;
  *(unsigned char *)(a1 + 476) = *(unsigned char *)(a2 + 1088);
  *(_WORD *)(a1 + 477) = *(_WORD *)(a2 + 1089);
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a1 + 768);
  if (*(_DWORD *)(a2 + 96) == 12) {
    *(_DWORD *)(a1 + 152) = 11;
  }
  if (*(_DWORD *)(a2 + 92) == 5)
  {
    *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 1017);
    *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 1048);
  }
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 1068);
  *(_WORD *)(a1 + 457) = *(_WORD *)(a2 + 1069);
  if ((*(_DWORD *)(a2 + 88) & 0xFFFFFFFE) == 6) {
    *(_WORD *)(a1 + 459) = *(_WORD *)(a2 + 1071);
  }
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 1076);
  if (*(unsigned char *)(a2 + 40))
  {
    sub_10186F31C(a1);
  }
  else if (*(unsigned char *)(a2 + 280))
  {
    if (sub_1000E6DB4(a2 + 288))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 292);
      *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(a2 + 308), *(int8x16_t *)(a2 + 308), 8uLL);
      sub_10186F31C(a1);
    }
    else if (sub_1000E6DB4(a2 + 600))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 604);
      *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(a2 + 620), *(int8x16_t *)(a2 + 620), 8uLL);
      sub_10186F31C(a1);
    }
    else if (sub_1000E6DB4(a2 + 444))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 448);
      *(int8x16_t *)(a1 + 104) = vextq_s8(*(int8x16_t *)(a2 + 464), *(int8x16_t *)(a2 + 464), 8uLL);
      sub_10186F31C(a1);
    }
    else if (sub_1000E6DB4(a2 + 756))
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 760);
      *(void *)(a1 + 104) = *(void *)(a2 + 784);
      *(void *)(a1 + 112) = *(void *)(a2 + 776);
      sub_10186F31C(a1);
    }
  }
  else
  {
    sub_1018713C0((uint64_t)v24, a1 + 48);
    sub_10186E300(a1);
    if (v34 < 0) {
      operator delete(__p);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
  }
}

void sub_1018708BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10186DDCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018708D8(uint64_t a1, int a2, uint64_t a3)
{
  v13[0] = a2;
  long long v4 = sub_10011853C((void *)(a1 + 664), v13);
  if (v4)
  {
    int v5 = v4;
    void v4[4] = sub_100554F5C(v13[0]);
    *(void *)uint64_t buf = v13;
    *((unsigned char *)v5 + 40) = *((unsigned char *)sub_100980B28(a3, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
    *(void *)uint64_t buf = v13;
    *((unsigned char *)v5 + 41) = *((unsigned char *)sub_100980B28(a3, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 21);
    *(void *)uint64_t buf = v13;
    *((unsigned char *)v5 + 42) = *((unsigned char *)sub_100980B28(a3, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 22);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = v13[0];
      *(void *)uint64_t buf = v13;
      int v8 = *((unsigned __int8 *)sub_100980B28(a3, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
      *(void *)uint64_t buf = v13;
      int v9 = *((unsigned __int8 *)sub_100980B28(a3, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 21);
      *(void *)uint64_t buf = v13;
      int v10 = *((unsigned __int8 *)sub_100980B28(a3, v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 22);
      *(_DWORD *)uint64_t buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v7;
      __int16 v19 = 1026;
      int v20 = v8;
      __int16 v21 = 1026;
      int v22 = v9;
      __int16 v23 = 1026;
      int v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,kSubscriptionChangeNotification\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", buf, 0x2Au);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = v13[0];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#awd,kSubscriptionChangeNotification,TelephonyInfo,null for Sim:%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      v13[1] = 67174657;
      v13[2] = v13[0];
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::handleSubscriptionChangeNotification(SimInstance, std::unordered_map<SimInstance, CLCTXPCServiceSubscriptionContext> &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_101870C48(uint64_t a1, int a2, int a3, int a4)
{
  int v13 = a2;
  uint64_t v6 = a1 + 664;
  int v7 = sub_10011853C((void *)(a1 + 664), &v13);
  if (v7)
  {
    long long v8 = *(_OWORD *)(v7 + 5);
    *(_OWORD *)__int16 v23 = *(_OWORD *)(v7 + 3);
    v24[0] = v8;
    *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)((char *)v7 + 52);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v13;
      __int16 v19 = 1025;
      int v20 = a3;
      __int16 v21 = 1025;
      int v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,handleSubscriberMccAndMncNotification\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d}", buf, 0x24u);
    }
    *(void *)uint64_t buf = &v13;
    int v10 = sub_1001170EC(v6, &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)v23;
    *(_OWORD *)(v10 + 40) = v24[0];
    *(_OWORD *)(v10 + 52) = *(_OWORD *)((char *)v24 + 12);
    *((_DWORD *)v10 + 17) = a3;
    *((_DWORD *)v10 + 18) = a4;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#awd,#Warning,handleSubscriberMccAndMncNotification,fTelephonyInfoMap,null", v23, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v23, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      *(_WORD *)uint64_t buf = 0;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAWD::handleSubscriberMccAndMncNotification(SimInstance, int32_t, int32_t)", "%s\n", v12);
      if (v12 != (char *)v23) {
        free(v12);
      }
    }
  }
}

void sub_101870EFC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 6)
  {
    *(_DWORD *)(a1 + 656) = *(_DWORD *)(a4 + 4);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 656);
      v7[0] = 68289282;
      v7[1] = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 1026;
      int v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,HandleStatusNotification\", \"reachability\":%{public}d}", (uint8_t *)v7, 0x18u);
    }
  }
}

void sub_101870FFC(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  int v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 640);
    int v4 = *(_DWORD *)(a1 + 656);
    double v5 = *(float *)(a1 + 648);
    double v6 = *(float *)(a1 + 652);
    *(_DWORD *)uint64_t buf = 68290051;
    int v19 = 0;
    __int16 v20 = 2082;
    __int16 v21 = "";
    __int16 v22 = 1025;
    int v23 = v3;
    __int16 v24 = 1026;
    int v25 = v4;
    __int16 v26 = 2050;
    *(double *)int v27 = v5;
    *(_WORD *)&v27[8] = 2050;
    double v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"DataPrefInst\":%{private}d, \"Reachability\":%{public}d, \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", buf, 0x32u);
  }
  int v7 = *(uint64_t **)(a1 + 680);
  if (v7)
  {
    uint64_t v8 = qword_1024193E0;
    do
    {
      if (v8 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      int v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *((_DWORD *)v7 + 4);
        int v11 = *((_DWORD *)v7 + 12);
        int v12 = *((_DWORD *)v7 + 13);
        int v13 = *((_DWORD *)v7 + 14);
        int v14 = *((_DWORD *)v7 + 15);
        int v16 = *((_DWORD *)v7 + 17);
        int v15 = *((_DWORD *)v7 + 18);
        int v17 = *((_DWORD *)v7 + 16);
        *(_DWORD *)uint64_t buf = 68291075;
        int v19 = 0;
        __int16 v20 = 2082;
        __int16 v21 = "";
        __int16 v22 = 1026;
        int v23 = v10;
        __int16 v24 = 1025;
        int v25 = v11;
        __int16 v26 = 1025;
        *(_DWORD *)int v27 = v12;
        *(_WORD *)&void v27[4] = 1025;
        *(_DWORD *)&v27[6] = v13;
        LOWORD(v28) = 1025;
        *(_DWORD *)((char *)&v28 + 2) = v14;
        HIWORD(v28) = 1025;
        int v29 = v16;
        __int16 v30 = 1025;
        int v31 = v15;
        __int16 v32 = 1025;
        int v33 = v17;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d, \"SimMCC\":%{private}d, \"SimMNC\":%{private}d, \"RAT\":%{private}d}", buf, 0x42u);
        uint64_t v8 = qword_1024193E0;
      }
      else
      {
        uint64_t v8 = -1;
      }
      int v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
}

uint64_t sub_101871240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 744) = a2;
  return result;
}

void sub_101871248(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    double v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      v7[0] = 68289282;
      v7[1] = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2114;
      uint64_t v11 = sub_1000E9358(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,Asset notification,CLMobileAssetManager_Type::kNotificationEmergencyCarrierSettings\", \"Asset data:\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
    }
    *(_DWORD *)(a1 + 760) = *(_DWORD *)(a4 + 20);
    *(_DWORD *)(a1 + 764) = *(_DWORD *)(a4 + 16);
  }
}

void sub_101871360(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101871390(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1018713C0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x11CuLL);
  if (*(char *)(a2 + 351) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 328), *(void **)(a2 + 328), *(void *)(a2 + 336));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 328);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = v5;
  }
  if (*(char *)(a2 + 375) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 352), *(void **)(a2 + 352), *(void *)(a2 + 360));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 352);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 376);
  long long v8 = *(_OWORD *)(a2 + 392);
  long long v9 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v9;
  *(_OWORD *)(a1 + 376) = v7;
  *(_OWORD *)(a1 + 392) = v8;
  long long v10 = *(_OWORD *)(a2 + 440);
  long long v11 = *(_OWORD *)(a2 + 456);
  long long v12 = *(_OWORD *)(a2 + 472);
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 456) = v11;
  *(_OWORD *)(a1 + 472) = v12;
  *(_OWORD *)(a1 + 440) = v10;
  if (*(char *)(a2 + 519) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 496), *(void **)(a2 + 496), *(void *)(a2 + 504));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 496);
    *(void *)(a1 + 512) = *(void *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = v13;
  }
  int v14 = (unsigned char *)(a1 + 520);
  if (*(char *)(a2 + 543) < 0)
  {
    sub_1000DC48C(v14, *(void **)(a2 + 520), *(void *)(a2 + 528));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 520);
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(_OWORD *)int v14 = v15;
  }
  long long v16 = *(_OWORD *)(a2 + 544);
  long long v17 = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)(a1 + 544) = v16;
  *(_OWORD *)(a1 + 560) = v17;
  return a1;
}

void sub_101871540(_Unwind_Exception *exception_object)
{
  if (v1[519] < 0) {
    operator delete(*v5);
  }
  if (v1[375] < 0) {
    operator delete(*v4);
  }
  if (v1[351] < 0) {
    operator delete(*v3);
  }
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018715A4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

char *sub_1018715D4(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    long long v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = (char *)operator new(0x50uLL);
  *(void *)long long v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 + 40);
  *((void *)v10 + 9) = *(void *)(a3 + 56);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)long long v10 = *v19;
LABEL_38:
    *int v19 = v10;
    goto LABEL_39;
  }
  *(void *)long long v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1018717FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101871810(int *a1, uint64_t a2, int a3)
{
  if ((*((void *)a1 + 1) & a2) != 0)
  {
    *((void *)a1 + 4) = 0;
    a1[10] = a1[6];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    long long v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v5 = *a1;
      *(_DWORD *)uint64_t buf = 67240192;
      int v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#imag,flagSet,id,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 3;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_25:
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "GNSS::SimulationAndSpoofingStatus CLGnssSimulationAndSpoofingMonitor::FlagData::tick(gnss::Fix::SpoofingFlagsBitfield, gnss::GnssContent)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      return 3;
    }
LABEL_27:
    dispatch_once(&qword_1024193D0, &stru_102343E20);
    goto LABEL_25;
  }
  if (*((unsigned char *)a1 + 28) && !sub_101874980(a3))
  {
    int v6 = 0;
    a1[9] = 0;
    int v9 = a1[10];
  }
  else
  {
    int v6 = a1[9] + 1;
    ++a1[8];
    a1[9] = v6;
    int v7 = a1[10];
    BOOL v8 = __OFSUB__(v7, 1);
    int v9 = v7 - 1;
    if (v9 < 0 != v8) {
      return a1[8] < a1[4] || v6 < a1[5];
    }
    a1[10] = v9;
  }
  if (v9 > 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    long long v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v11 = *a1;
      int v13 = a1[9];
      int v12 = a1[10];
      int v14 = a1[8];
      int v15 = a1[4];
      int v16 = a1[5];
      *(_DWORD *)uint64_t buf = 67241472;
      int v20 = v11;
      __int16 v21 = 1026;
      int v22 = v12;
      __int16 v23 = 1026;
      int v24 = v14;
      __int16 v25 = 1026;
      int v26 = v15;
      __int16 v27 = 1026;
      int v28 = v13;
      __int16 v29 = 1026;
      int v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#imag,flagStatus,id,%{public}d,remaining,%{public}d,numTot,%{public}d,threshTot,%{public}d,numConsec,%{public}d,threshConsec,%{public}d", buf, 0x26u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 3;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  return a1[8] < a1[4] || v6 < a1[5];
}

void sub_101871BB8(uint64_t a1, uint64_t a2, char a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = a3;
  *(_WORD *)(a1 + 73) = 256;
  *(_DWORD *)(a1 + 76) = 0;
  *(_WORD *)(a1 + 80) = 0;
  sub_101871E88((void *)a1);
  sub_1014CC69C();
}

void sub_101871E2C(_Unwind_Exception *exception_object)
{
  long long v4 = *(void **)(v1 + 16);
  if (v4)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  uint64_t *v2 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_101871E88(void *a1)
{
  int v2 = (void **)(a1 + 2);
  unint64_t v3 = a1[2];
  a1[3] = v3;
  int v19 = 1800;
  int v20 = 0x7FFFFFFF;
  int v17 = 1;
  int v18 = 5;
  int v15 = 1;
  int v16 = 2;
  unint64_t v4 = a1[4];
  uint64_t v5 = (void **)(a1 + 2);
  if (v3 >= v4)
  {
    int v6 = sub_10187478C(v5, &v17, &qword_101E44A58, &v16, &v15, &v19);
  }
  else
  {
    sub_101874724((uint64_t)v5, &v17, &qword_101E44A58, &v16, &v15, &v19);
    int v6 = (char *)(v3 + 48);
  }
  a1[3] = v6;
  int v16 = 2;
  int v17 = 2;
  int v15 = 1;
  if ((unint64_t)v6 >= a1[4])
  {
    int v7 = sub_10187478C(v2, &v17, &qword_101E44A60, &v16, &v15, &v19);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A60, &v16, &v15, &v19);
    int v7 = v6 + 48;
  }
  a1[3] = v7;
  int v16 = 2;
  int v17 = 3;
  int v15 = 2;
  if ((unint64_t)v7 >= a1[4])
  {
    BOOL v8 = sub_10187478C(v2, &v17, &qword_101E44A68, &v16, &v15, &v20);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A68, &v16, &v15, &v20);
    BOOL v8 = v7 + 48;
  }
  a1[3] = v8;
  int v16 = 2;
  int v17 = 4;
  int v15 = 2;
  if ((unint64_t)v8 >= a1[4])
  {
    int v9 = sub_10187478C(v2, &v17, &qword_101E44A70, &v16, &v15, &v20);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A70, &v16, &v15, &v20);
    int v9 = v8 + 48;
  }
  a1[3] = v9;
  int v16 = 13;
  int v17 = 5;
  int v15 = 7;
  if ((unint64_t)v9 >= a1[4])
  {
    long long v10 = sub_10187478C(v2, &v17, &qword_101E44A78, &v16, &v15, &v19);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A78, &v16, &v15, &v19);
    long long v10 = v9 + 48;
  }
  a1[3] = v10;
  int v16 = 13;
  int v17 = 6;
  int v15 = 7;
  if ((unint64_t)v10 >= a1[4])
  {
    int v11 = sub_10187478C(v2, &v17, &qword_101E44A80, &v16, &v15, &v19);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A80, &v16, &v15, &v19);
    int v11 = v10 + 48;
  }
  a1[3] = v11;
  int v16 = 1;
  int v17 = 7;
  int v15 = 0;
  if ((unint64_t)v11 >= a1[4])
  {
    int v12 = sub_10187478C(v2, &v17, &qword_101E44A88, &v16, &v15, &v18);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A88, &v16, &v15, &v18);
    int v12 = v11 + 48;
  }
  a1[3] = v12;
  int v16 = 13;
  int v17 = 8;
  int v15 = 7;
  if ((unint64_t)v12 >= a1[4])
  {
    int v13 = sub_10187478C(v2, &v17, &qword_101E44A90, &v16, &v15, &v19);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A90, &v16, &v15, &v19);
    int v13 = v12 + 48;
  }
  a1[3] = v13;
  int v16 = 13;
  int v17 = 9;
  int v15 = 7;
  if ((unint64_t)v13 >= a1[4])
  {
    double result = sub_10187478C(v2, &v17, &qword_101E44A98, &v16, &v15, &v19);
  }
  else
  {
    sub_101874724((uint64_t)v2, &v17, &qword_101E44A98, &v16, &v15, &v19);
    double result = v13 + 48;
  }
  a1[3] = result;
  return result;
}

void sub_1018721B0(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102343E40);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssSimulationAndSpoofingMonitor::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102343E40);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssSimulationAndSpoofingMonitor::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101874260((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10187236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101872390(void *a1)
{
  [*(id *)(a1[1] + 16) unregister:*(void *)(a1[1] + 8) forNotification:2];
  int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_10187240C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343E20);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#imag,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::start()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  while (v3 != v4)
  {
    *(void *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 40) = 0;
    v3 += 48;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 73) = 1;
  *(_DWORD *)(a1 + 76) = 0;
}

void sub_1018725D0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343E20);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#imag,stop", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::stop()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(unsigned char *)(a1 + 73) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 76) = 0;
}

uint64_t sub_101872774(uint64_t result)
{
  *(unsigned char *)(result + 81) = 0;
  return result;
}

uint64_t sub_10187277C(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1003BFEDC(*(double *)(a2 + 56), *(double *)(a2 + 64));
  int v4 = *(_DWORD *)(a2 + 136) & 0x10F;
  if (v3)
  {
    if (v4 != 2)
    {
LABEL_3:
      sub_100A326C4((uint64_t)v26, a2 + 248);
      uint64_t v5 = v27;
      if (v27)
      {
        unsigned int v6 = 0;
        int v7 = 0;
        int v8 = 0;
        unsigned int v9 = 0;
        unsigned int v10 = 0;
        do
        {
          char v11 = (float *)v5[5];
          if (v11)
          {
            int v12 = 0;
            do
            {
              if (v11[6] > 0.0 || v11[7] > 0.0) {
                ++v12;
              }
              char v11 = *(float **)v11;
            }
            while (v11);
          }
          else
          {
            int v12 = 0;
          }
          int v13 = *((_DWORD *)v5 + 4);
          switch(v13)
          {
            case 1:
              goto LABEL_19;
            case 2:
              v7 += v12;
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              break;
            case 4:
              v9 += v12;
              break;
            case 8:
              v10 += v12;
              break;
            default:
              if (v13 == 16)
              {
LABEL_19:
                v6 += v12;
              }
              else
              {
                int v14 = v12 + v8;
                if (v13 == 256) {
                  int v8 = v14;
                }
              }
              break;
          }
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        unsigned int v10 = 0;
        unsigned int v9 = 0;
        int v8 = 0;
        int v7 = 0;
        unsigned int v6 = 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      int v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 67110144;
        unsigned int v29 = v6;
        __int16 v30 = 1024;
        int v31 = v7;
        __int16 v32 = 1024;
        unsigned int v33 = v10;
        __int16 v34 = 1024;
        unsigned int v35 = v9;
        __int16 v36 = 1024;
        int v37 = v8;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#imag,numGpsQzss,%d,numGlo,%d,numGal,%d,numBds,%d,numNic,%d", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343E20);
        }
        __int16 v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssSimulationAndSpoofingMonitor::isInsufficientMulticonstellationFix(const GNSS::PerEpochData &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      BOOL v20 = v6 < 2;
      if (v3) {
        BOOL v20 = v6 < 2 && v9 < 2;
      }
      BOOL v18 = v10 < 2 && v20;
      sub_10071874C((uint64_t)v26);
      return v18;
    }
  }
  else if (v4 != 2 && v4 != 4)
  {
    goto LABEL_3;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343E20);
  }
  __int16 v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    unsigned int v17 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v29 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#imag,multiCons early exit,tracked,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    int v23 = *(_DWORD *)(a2 + 136);
    v26[0] = 67109120;
    v26[1] = v23;
    int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssSimulationAndSpoofingMonitor::isInsufficientMulticonstellationFix(const GNSS::PerEpochData &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  return 1;
}

void sub_101872C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10071874C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101872C54(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(a1 + 73)) {
    return;
  }
  int v56 = *(_DWORD *)(a2 + 292);
  if (*(unsigned char *)(a1 + 81) || !sub_10187277C(a1, a2))
  {
    int v60 = 0;
    int v8 = 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 76) + 1;
    int v60 = 1;
  }
  *(_DWORD *)(a1 + 76) = v8;
  uint64_t v58 = a3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343E20);
  }
  unsigned int v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v10 = *(unsigned __int8 *)(a2 + 48);
    int v11 = *(unsigned __int8 *)(a1 + 81);
    int v12 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)uint64_t buf = 67109888;
    *(_DWORD *)__int16 v63 = v60 ^ 1;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v10;
    LOWORD(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 2) = v11;
    HIWORD(v64) = 1024;
    *(_DWORD *)uint64_t v65 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#imag,isMultiConstellationFix,%d,fixValid,%d,prevFixValid,%d,numBlockedFix,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
  int v59 = a4;
  uint64_t v13 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 24) == v13)
  {
    uint64_t v61 = 0;
    int v16 = 0;
    int v19 = 1;
    int v18 = 1;
    int v17 = 1;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v61 = 0;
    int v16 = 0;
    int v17 = 1;
    int v18 = 1;
    int v19 = 1;
    do
    {
      int v20 = *(_DWORD *)(v13 + v14);
      int v21 = sub_101871810((int *)(v13 + v14), *(void *)(a2 + 296), *(_DWORD *)(a2 + 288));
      if (v20 == 2) {
        int v22 = v21;
      }
      else {
        int v22 = v18;
      }
      if (v20 == 5) {
        int v23 = v21;
      }
      else {
        int v23 = v19;
      }
      if (v20 == 5) {
        int v22 = v18;
      }
      if (v20 == 1)
      {
        int v17 = v21;
      }
      else
      {
        int v19 = v23;
        int v18 = v22;
      }
      if ((v21 - 2) >= 2)
      {
        if (v21) {
          LODWORD(v61) = v61 + 1;
        }
        else {
          ++HIDWORD(v61);
        }
      }
      else
      {
        ++v16;
      }
      ++v15;
      uint64_t v13 = *(void *)(a1 + 16);
      v14 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 24) - v13) >> 4) > v15);
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    BOOL v55 = 0;
    BOOL v25 = 0;
    int v24 = v59;
    goto LABEL_58;
  }
  int v24 = v59;
  if (*(unsigned char *)(a1 + 72))
  {
    BOOL v55 = 0;
    BOOL v25 = 0;
    goto LABEL_58;
  }
  double v26 = *(double *)(a2 + 32) - *(double *)(a1 + 56);
  if (v26 >= -10.0)
  {
    double v28 = fabs(v26);
    double v29 = *(double *)(a1 + 48) + v28 * 0.0001;
    double v30 = *(double *)(a2 + 16);
    double v31 = v28 + *(double *)(a1 + 40);
    double v32 = v30 - v31;
    double v33 = vabdd_f64(v30, v31);
    BOOL v55 = v33 <= v29;
    if (v33 > v29)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      uint64_t v38 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = *(void *)(a2 + 16);
        uint64_t v40 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 134350080;
        *(void *)__int16 v63 = v39;
        *(_WORD *)&v63[8] = 2050;
        double v64 = v32;
        *(_WORD *)uint64_t v65 = 2050;
        *(double *)&v65[2] = v29;
        __int16 v66 = 2050;
        *(double *)uint64_t v67 = v28;
        *(_WORD *)&v67[8] = 2050;
        uint64_t v68 = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#imag,stf_violation,cfTimeGps,%{public}.3f,offset,%{public}.1f,width,%{public}.3f,age,%{public}.1f,origWidth,%{public}.1f", buf, 0x34u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_57;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      int v37 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n");
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      __int16 v34 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *(void *)(a2 + 16);
        uint64_t v36 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 134350080;
        *(void *)__int16 v63 = v35;
        *(_WORD *)&v63[8] = 2050;
        double v64 = v32;
        *(_WORD *)uint64_t v65 = 2050;
        *(double *)&v65[2] = v29;
        __int16 v66 = 2050;
        *(double *)uint64_t v67 = v28;
        *(_WORD *)&v67[8] = 2050;
        uint64_t v68 = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#imag,stf_agreement,cfTimeGps,%{public}.3f,offset,%{public}.1f,width,%{public}.3f,age,%{public}.1f,origWidth,%{public}.1f", buf, 0x34u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_57;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      int v37 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n");
    }
    if (v37 != buf) {
      free(v37);
    }
    int v24 = v59;
LABEL_57:
    BOOL v25 = v33 > v29;
    goto LABEL_58;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343E20);
  }
  __int16 v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    *(double *)__int16 v63 = v26;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#imag,negative age,%{public}.1f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    char v54 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v54);
    if (v54 != (char *)buf) {
      free(v54);
    }
    int v24 = v59;
  }
  BOOL v55 = 0;
  BOOL v25 = 0;
  *(unsigned char *)(a1 + 64) = 0;
LABEL_58:
  unsigned int v57 = v56 & 0xFFFFFFFE;
  if (((v60 | v24) & 1) != 0 || (v17 == 3 ? (int v43 = 1) : (int v43 = v25), v43 == 1 && !*(unsigned char *)(a1 + 72)))
  {
    if (v17 == 3)
    {
      BOOL v41 = *(unsigned char *)(a1 + 72) == 0;
      if (*(unsigned char *)(a1 + 72)) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = "build_check";
      }
      if (!v25) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v42 = 0;
      BOOL v41 = 0;
      if (!v25)
      {
LABEL_81:
        if (v24 && !*(unsigned char *)(a1 + 72))
        {
          uint64_t v42 = "known_coord";
          BOOL v41 = 1;
        }
        if (v60 && *(_DWORD *)(a1 + 76) > 0x1Du)
        {
          uint64_t v42 = "multicon_fail";
          BOOL v41 = 1;
        }
        char v45 = 0;
        int v44 = 3;
        if (!*(unsigned char *)(a1 + 80) && v41)
        {
          *(unsigned char *)(a1 + 80) = 1;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343E20);
          }
          __int16 v47 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = 67241216;
            *(_DWORD *)__int16 v63 = v55;
            *(_WORD *)&v63[4] = 1026;
            *(_DWORD *)&v63[6] = v25;
            LOWORD(v64) = 1026;
            *(_DWORD *)((char *)&v64 + 2) = v17 == 3;
            HIWORD(v64) = 1026;
            *(_DWORD *)uint64_t v65 = v60;
            *(_WORD *)&v65[4] = 1026;
            *(_DWORD *)&v65[6] = v59;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "#imag,yield gated,stfAuth,%{public}d,stfFake,%{public}d,build,%{public}d,multiConstFake,%{public}d,locFake,%{public}d", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343E20);
            }
            unsigned __int8 v53 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v53);
            if (v53 != (char *)buf) {
              free(v53);
            }
          }
          ++*(_DWORD *)(v58 + 1068);
          sub_10187A1C8([*(id *)a1 silo].queue, @"imag", v42, 0);
          char v45 = 0;
          int v44 = 3;
        }
        goto LABEL_95;
      }
    }
    if (!*(unsigned char *)(a1 + 72))
    {
      uint64_t v42 = "stf_violation";
      BOOL v41 = 1;
    }
    goto LABEL_81;
  }
  int v44 = 2;
  char v45 = 1;
  if (!v16 && v57 != 2 && !*(unsigned char *)(a1 + 72))
  {
    char v46 = v55;
    if (!v18) {
      char v46 = 1;
    }
    if ((v46 & 1) != 0 || !v19)
    {
      int v44 = 0;
      ++*(_DWORD *)(v58 + 1072);
    }
    else
    {
      ++*(_DWORD *)(v58 + 1064);
      int v44 = 1;
    }
  }
LABEL_95:
  *(void *)(v58 + 1080) |= *(void *)(a2 + 296);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343E20);
  }
  uint64_t v48 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v49 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67243264;
    *(_DWORD *)__int16 v63 = v44;
    *(_WORD *)&v63[4] = 1026;
    *(_DWORD *)&v63[6] = v57 == 2;
    LOWORD(v64) = 1026;
    *(_DWORD *)((char *)&v64 + 2) = v61;
    HIWORD(v64) = 1026;
    *(_DWORD *)uint64_t v65 = HIDWORD(v61);
    *(_WORD *)&v65[4] = 1026;
    *(_DWORD *)&v65[6] = v16;
    __int16 v66 = 1026;
    *(_DWORD *)uint64_t v67 = v17 == 0;
    *(_WORD *)&v67[4] = 1026;
    *(_DWORD *)&v67[6] = v18 == 0;
    LOWORD(v68) = 1026;
    *(_DWORD *)((char *)&v68 + 2) = v19 == 0;
    HIWORD(v68) = 1026;
    int v69 = v49;
    __int16 v70 = 1026;
    BOOL v71 = v55;
    __int16 v72 = 1026;
    BOOL v73 = v25;
    __int16 v74 = 1026;
    int v75 = v60;
    __int16 v76 = 1026;
    int v77 = v59;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "#imag,result,%{public}d,deviceResult,%{public}d,unkCount,%{public}d,authCount,%{public}d,spoofedCount,%{public}d,buildTimeOk,%{public}d,eeTimeOk,%{public}d,pyTimeOk,%{public}d,simMode,%{public}d,stfAuth,%{public}d,stfFake,%{public}d,multiConstFake,%{public}d,locFake,%{public}d", buf, 0x50u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::feedAndUpdateSimulationStatus(GNSS::PerEpochData &, GNSS::GnssSessionData &, const BOOL)", "%s\n", v52);
    if (v52 != (char *)buf) {
      free(v52);
    }
  }
  if (*(unsigned char *)(a2 + 48)) {
    char v50 = v45;
  }
  else {
    char v50 = 0;
  }
  *(unsigned char *)(a1 + 81) = v50;
  *(_DWORD *)(a2 + 292) = v44;
}

void sub_101873AB8(uint64_t a1, double a2, double a3, double a4)
{
  double v30 = -1.0;
  double v31 = -1.0;
  double v8 = sub_10016C458();
  int v9 = off_102479E98((uint64_t)&v31, (uint64_t)&v30);
  int v10 = v9;
  if (a3 <= 0.0 || (a2 > 0.0 ? (BOOL v11 = v9 == 0) : (BOOL v11 = 1), v11 || v31 <= 0.0 || v30 <= 0.0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    int v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v45) = v10 != 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#imag,gti unavailable,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      int v32 = 67240192;
      LODWORD(v33) = v10 != 0;
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  else
  {
    double v12 = sub_10016C458();
    double v13 = v12 - v8;
    double v14 = v8 + (v12 - v8) * 0.5;
    double v30 = v30 + v13;
    double v15 = (v31 - a2 - v14 + a4) * (v31 - a2 - v14 + a4);
    double v16 = a3 * a3 + v30 * v30;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    int v17 = qword_1024193D8;
    double v18 = v15 / v16;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134350336;
      double v45 = v18;
      __int16 v46 = 2050;
      double v47 = v31;
      __int16 v48 = 2050;
      double v49 = a2;
      __int16 v50 = 2050;
      double v51 = v30;
      __int16 v52 = 2050;
      double v53 = a3;
      __int16 v54 = 2050;
      double v55 = v13;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#imag,gti consistency,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,queryDelay,%{public}.4f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      int v32 = 134350336;
      double v33 = v18;
      __int16 v34 = 2050;
      double v35 = v31;
      __int16 v36 = 2050;
      double v37 = a2;
      __int16 v38 = 2050;
      double v39 = v30;
      __int16 v40 = 2050;
      double v41 = a3;
      __int16 v42 = 2050;
      double v43 = v13;
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    if (v18 <= 5.0)
    {
      double v22 = v18 * 10.0;
      double v23 = a3 * 10.0;
      double v24 = v30 * 10.0;
      if (a3 * 10.0 + v22 + v30 * 10.0 >= 120.0) {
        double v25 = a3 * 10.0 + v22 + v30 * 10.0;
      }
      else {
        double v25 = 120.0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      double v26 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349824;
        double v45 = v22;
        __int16 v46 = 2050;
        double v47 = v23;
        __int16 v48 = 2050;
        double v49 = v24;
        __int16 v50 = 2050;
        double v51 = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#imag,gti inflation,%{public}.3f,%{public}.3f,%{public}.3f,result,%{public}.1f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343E20);
        }
        int v32 = 134349824;
        double v33 = v22;
        __int16 v34 = 2050;
        double v35 = v23;
        __int16 v36 = 2050;
        double v37 = v24;
        __int16 v38 = 2050;
        double v39 = v25;
        double v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      *(double *)(a1 + 40) = v31;
      *(double *)(a1 + 48) = v25;
      *(double *)(a1 + 56) = v14;
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 74);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      int v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134350336;
        double v45 = v18;
        __int16 v46 = 2050;
        double v47 = v31;
        __int16 v48 = 2050;
        double v49 = a2;
        __int16 v50 = 2050;
        double v51 = v30;
        __int16 v52 = 2050;
        double v53 = a3;
        __int16 v54 = 2050;
        double v55 = v13;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#imag,gti inconsistent,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,queryDelay,%{public}.4f", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343E20);
        }
        int v32 = 134350336;
        double v33 = v18;
        __int16 v34 = 2050;
        double v35 = v31;
        __int16 v36 = 2050;
        double v37 = a2;
        __int16 v38 = 2050;
        double v39 = v30;
        __int16 v40 = 2050;
        double v41 = a3;
        __int16 v42 = 2050;
        double v43 = v13;
        double v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      sub_10187A1C8([objc_msgSend(*(id *)a1, "silo") queue], @"imag", @"gti inconsistent", 0);
    }
  }
}

void sub_101874260(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    BOOL v14 = 0;
    if (sub_1000D2988(a4, "EnableStfCheck", &v14))
    {
      *(unsigned char *)(a1 + 74) = v14;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 74);
        *(_DWORD *)uint64_t buf = 67240192;
        int v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#imag,asset sets stf check,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343E20);
        }
        int v7 = *(unsigned __int8 *)(a1 + 74);
        int v15 = 67240192;
        int v16 = v7;
LABEL_28:
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      double v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#imag,no setting in asset", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343E20);
        }
        LOWORD(v15) = 0;
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343E20);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#imag,unexpected asset notification,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343E20);
      }
      int v11 = *a3;
      int v15 = 67109120;
      int v16 = v11;
      goto LABEL_28;
    }
  }
}

void sub_101874614(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101874644(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101874674(uint64_t a1, uint64_t a2)
{
  if (qword_1024890A0 != -1) {
    dispatch_once(&qword_1024890A0, &stru_102343E60);
  }
  int v4 = (uint64_t (*)())dlsym((void *)qword_1024890A8, "TMGetTrustedInterval");
  off_102479E98 = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void sub_1018746F8(id a1)
{
  qword_1024890A8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreTime.framework/CoreTime", 2);
}

uint64_t sub_101874724(uint64_t a1, _DWORD *a2, uint64_t *a3, int *a4, int *a5, int *a6)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *a3;
  int v9 = *a4;
  int v10 = *a5;
  int v11 = *a6;
  *(_DWORD *)uint64_t v7 = *a2;
  *(void *)(v7 + 8) = v8;
  *(_DWORD *)(v7 + 16) = v9;
  *(_DWORD *)(v7 + 20) = v10;
  *(_DWORD *)(v7 + 24) = v11;
  uint64_t result = sub_10073FAF8();
  *(unsigned char *)(v7 + 28) = result;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 0;
  *(void *)(a1 + 8) = v7 + 48;
  return result;
}

void sub_101874784(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_10187478C(void **a1, _DWORD *a2, uint64_t *a3, int *a4, int *a5, _DWORD *a6)
{
  uint64_t v7 = (char *)*a1;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x555555555555555) {
    sub_1001D7FD4();
  }
  BOOL v14 = (char *)(a1 + 2);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v7) >> 4);
  if (2 * v15 > v9) {
    unint64_t v9 = 2 * v15;
  }
  if (v15 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v16 = 0x555555555555555;
  }
  else {
    unint64_t v16 = v9;
  }
  if (v16)
  {
    int v17 = a6;
    BOOL v14 = (char *)sub_10014F86C((uint64_t)v14, v16);
    a6 = v17;
    int v18 = v14;
    uint64_t v20 = v19;
  }
  else
  {
    int v18 = 0;
    uint64_t v20 = 0;
  }
  int v21 = &v18[48 * v8];
  uint64_t v22 = *a3;
  int v23 = *a4;
  int v24 = *a5;
  int v25 = *a6;
  *(_DWORD *)int v21 = *a2;
  *((void *)v21 + 1) = v22;
  *((_DWORD *)v21 + 4) = v23;
  *((_DWORD *)v21 + 5) = v24;
  *((_DWORD *)v21 + 6) = v25;
  v21[28] = sub_10073FAF8(v14);
  *((void *)v21 + 4) = 0;
  *((_DWORD *)v21 + 10) = 0;
  double v26 = v21 + 48;
  double v28 = (char *)*a1;
  __int16 v27 = (char *)a1[1];
  if (v27 != *a1)
  {
    do
    {
      long long v29 = *((_OWORD *)v27 - 3);
      long long v30 = *((_OWORD *)v27 - 1);
      *((_OWORD *)v21 - 2) = *((_OWORD *)v27 - 2);
      *((_OWORD *)v21 - 1) = v30;
      *((_OWORD *)v21 - 3) = v29;
      v21 -= 48;
      v27 -= 48;
    }
    while (v27 != v28);
    __int16 v27 = (char *)*a1;
  }
  *a1 = v21;
  a1[1] = v26;
  a1[2] = &v18[48 * v20];
  if (v27) {
    operator delete(v27);
  }
  return v26;
}

void sub_1018748F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10187490C(int a1)
{
  return (a1 & 0xFFFFFFFE) != 2;
}

BOOL sub_10187491C(int a1)
{
  return (a1 - 25) <= 0x32 && ((1 << (a1 - 25)) & 0x4000002000001) != 0 || a1 == 10;
}

uint64_t sub_10187495C(int a1)
{
  return ((a1 - 25) < 0x33) & (0x4000002000001uLL >> (a1 - 25));
}

BOOL sub_101874980(int a1)
{
  return (a1 - 3) < 2;
}

BOOL sub_101874990(int a1)
{
  return (a1 - 2) < 3;
}

uint64_t sub_1018749A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  uint64_t v2 = *(void *)(a1 + 120);
  if (v1 == v2)
  {
    unsigned int v3 = 0;
    return v3 != 0;
  }
  unsigned int v3 = 0;
  do
  {
    v3 += *(unsigned __int8 *)(v1 + 173);
    v1 += 176;
  }
  while (v1 != v2);
  if (v3 > 4) {
    return 4;
  }
  if (v3 == 4) {
    return 3;
  }
  if (v3 <= 2) {
    return v3 != 0;
  }
  return 2;
}

void *sub_101874A00@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 8) {
    uint64_t v2 = "unknown";
  }
  else {
    uint64_t v2 = (&off_102343EC0)[a1];
  }
  return sub_100134750(a2, v2);
}

uint64_t sub_101874A2C(uint64_t result)
{
  if ((result - 25) > 0x32 || ((1 << (result - 25)) & 0x4000002000001) == 0)
  {
    if (result == 10) {
      return 10;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_101874A64(int a1)
{
  if ((a1 - 1) < 9) {
    return dword_101E44AA0[a1 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  unsigned int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsdUtil,Unhandled proto::gnss::Result enum,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Result gnss::Convert::fromProtobuf(proto::gnss::Result)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 7;
}

uint64_t sub_101874C30(unsigned int a1)
{
  if (a1 > 8) {
    return 8;
  }
  else {
    return dword_101E44AC4[a1];
  }
}

uint64_t sub_101874C50(unsigned int a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return dword_101E44AE8[a1];
  }
}

uint64_t sub_101874C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    uint64_t v3 = *(void *)(qword_10248ADE8 + 8);
  }
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 8);
  *(void *)(a2 + 16) = *(void *)(v3 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 80);
  if ((*(unsigned char *)(a1 + 132) & 2) == 0) {
    goto LABEL_211;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248ADE8 + 16);
  }
  if ((*(unsigned char *)(v4 + 44) & 1) == 0) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248AD38 + 8);
  }
  int v6 = *(_DWORD *)(v5 + 44);
  if (v6) {
    *(void *)(a2 + 40) = *(void *)(v5 + 8);
  }
  if ((v6 & 2) == 0) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AD30 + 16);
  }
  int v8 = *(_DWORD *)(v7 + 32);
  if ((v8 & 4) != 0)
  {
    *(double *)(a2 + 64) = *(float *)(v7 + 16);
    if ((v8 & 2) == 0)
    {
LABEL_16:
      if ((v8 & 8) == 0) {
        goto LABEL_17;
      }
LABEL_396:
      *(double *)(a2 + 72) = *(float *)(v7 + 20);
      if ((v8 & 1) == 0)
      {
LABEL_18:
        if ((v8 & 0x10) == 0) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      goto LABEL_397;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_16;
  }
  *(double *)(a2 + 56) = *(float *)(v7 + 12);
  if ((v8 & 8) != 0) {
    goto LABEL_396;
  }
LABEL_17:
  if ((v8 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_397:
  *(double *)(a2 + 48) = *(float *)(v7 + 8);
  if ((v8 & 0x10) != 0)
  {
LABEL_19:
    *(_WORD *)(a2 + 80) = *(unsigned __int8 *)(v7 + 24) | 0x100;
    int v6 = *(_DWORD *)(v5 + 44);
  }
LABEL_20:
  if ((v6 & 4) == 0) {
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248AD30 + 24);
  }
  int v10 = *(_DWORD *)(v9 + 52);
  if (v10)
  {
    *(void *)(a2 + 88) = *(void *)(v9 + 8);
    if ((v10 & 2) == 0)
    {
LABEL_25:
      if ((v10 & 4) == 0) {
        goto LABEL_26;
      }
      goto LABEL_401;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_25;
  }
  *(void *)(a2 + 96) = *(void *)(v9 + 16);
  if ((v10 & 4) == 0)
  {
LABEL_26:
    if ((v10 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_402;
  }
LABEL_401:
  float v175 = *(double *)(v9 + 24);
  *(float *)(a2 + 104) = v175;
  if ((v10 & 8) == 0)
  {
LABEL_27:
    if ((v10 & 0x10) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_402:
  float v176 = *(double *)(v9 + 32);
  *(float *)(a2 + 108) = v176;
  if ((v10 & 0x10) != 0)
  {
LABEL_28:
    float v11 = *(double *)(v9 + 40);
    *(float *)(a2 + 112) = v11;
  }
LABEL_29:
  if ((v6 & 8) == 0) {
    goto LABEL_38;
  }
  uint64_t v12 = *(void *)(v5 + 32);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248AD30 + 32);
  }
  int v13 = *(_DWORD *)(v12 + 40);
  if ((v13 & 8) != 0)
  {
    *(void *)(a2 + 136) = *(void *)(v12 + 24);
    if ((v13 & 1) == 0)
    {
LABEL_34:
      if ((v13 & 0x10) == 0) {
        goto LABEL_35;
      }
LABEL_406:
      *(_DWORD *)(a2 + 144) = *(_DWORD *)(v12 + 32);
      if ((v13 & 4) == 0)
      {
LABEL_36:
        if ((v13 & 2) == 0) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      goto LABEL_407;
    }
  }
  else if ((v13 & 1) == 0)
  {
    goto LABEL_34;
  }
  *(void *)(a2 + 120) = *(void *)(v12 + 8);
  if ((v13 & 0x10) != 0) {
    goto LABEL_406;
  }
LABEL_35:
  if ((v13 & 4) == 0) {
    goto LABEL_36;
  }
LABEL_407:
  *(_DWORD *)(a2 + 132) = *(_DWORD *)(v12 + 20);
  if ((v13 & 2) != 0) {
LABEL_37:
  }
    *(_DWORD *)(a2 + 128) = *(_DWORD *)(v12 + 16);
LABEL_38:
  uint64_t v14 = *(int *)(v4 + 24);
  if (v14)
  {
    unint64_t v15 = *(uint64_t **)(v4 + 16);
    int v178 = (uint64_t *)(a2 + 152);
    __int16 v177 = &v15[v14];
    do
    {
      uint64_t v16 = *v15;
      *(_DWORD *)__int16 v183 = 0;
      *(_WORD *)&v183[4] = 0;
      v183[6] = 127;
      *(void *)&v183[8] = 0;
      *(_DWORD *)&v183[15] = 0;
      *(void *)&v183[24] = -1;
      *(void *)&v183[32] = -1;
      *(void *)&long long v184 = -1;
      *((void *)&v184 + 1) = 0x7FF8000000000000;
      *(_DWORD *)__int16 v185 = -1082130432;
      *(_OWORD *)&v185[8] = xmmword_101D47590;
      *(_OWORD *)&v185[24] = xmmword_101D47590;
      *(_OWORD *)&v185[40] = xmmword_101D47590;
      LOBYTE(v186) = 1;
      *((void *)&v186 + 1) = -1;
      unint64_t v187 = -1;
      long long v188 = xmmword_101D47590;
      char v189 = 0;
      int v190 = 0;
      int v191 = -1082130432;
      __int16 v192 = 0;
      int v17 = *(_DWORD *)(v16 + 112);
      if (v17)
      {
        uint64_t v18 = *(void *)(v16 + 8);
        if (!v18) {
          uint64_t v18 = *(void *)(qword_10248AD10 + 8);
        }
        if (!sub_10187AE50(v18, (uint64_t)v183))
        {
LABEL_390:
          int v174 = v190;
          int v190 = 0;
          if (v174) {
            sub_100E93F5C((uint64_t)&v190, v174);
          }
          return 0;
        }
        int v17 = *(_DWORD *)(v16 + 112);
      }
      if ((v17 & 2) != 0)
      {
        uint64_t v20 = *(void *)(v16 + 16);
        if (!v20) {
          uint64_t v20 = *(void *)(qword_10248AD10 + 16);
        }
        int v21 = *(_DWORD *)(v20 + 96);
        if (v21)
        {
          int v22 = *(_DWORD *)(v20 + 88);
          v183[8] = 0;
          unsigned int v23 = v22 - 2;
          if (v23 <= 0xA && ((0x6FFu >> v23) & 1) != 0) {
            v183[8] = byte_101E44B0C[v23];
          }
        }
        if ((v21 & 2) != 0)
        {
          uint64_t v37 = *(void *)(v20 + 8);
          if (!v37) {
            uint64_t v37 = *(void *)(qword_10248ACC8 + 8);
          }
          int v38 = *(_DWORD *)(v37 + 16);
          if ((v38 & 2) != 0)
          {
            v183[10] = *(unsigned char *)(v37 + 9);
            if ((v38 & 4) != 0) {
              goto LABEL_133;
            }
LABEL_115:
            if ((v38 & 1) == 0) {
              goto LABEL_116;
            }
LABEL_134:
            v183[9] = *(unsigned char *)(v37 + 8);
            if ((v38 & 8) == 0) {
              goto LABEL_46;
            }
          }
          else
          {
            if ((v38 & 4) == 0) {
              goto LABEL_115;
            }
LABEL_133:
            v183[11] = *(unsigned char *)(v37 + 10);
            if (v38) {
              goto LABEL_134;
            }
LABEL_116:
            if ((v38 & 8) == 0) {
              goto LABEL_46;
            }
          }
          v183[12] = *(unsigned char *)(v37 + 11);
          goto LABEL_46;
        }
        if ((v21 & 4) != 0)
        {
          uint64_t v39 = *(void *)(v20 + 16);
          if (!v39) {
            uint64_t v39 = *(void *)(qword_10248ACC8 + 16);
          }
          int v40 = *(_DWORD *)(v39 + 20);
          if ((v40 & 0x10) != 0)
          {
            v183[13] = *(unsigned char *)(v39 + 12);
            if ((v40 & 4) == 0) {
              goto LABEL_130;
            }
          }
          else if ((v40 & 4) == 0)
          {
LABEL_130:
            if ((v40 & 8) == 0) {
              goto LABEL_160;
            }
            goto LABEL_159;
          }
          v183[11] = *(unsigned char *)(v39 + 10);
          if ((v40 & 8) == 0) {
            goto LABEL_160;
          }
LABEL_159:
          v183[12] = *(unsigned char *)(v39 + 11);
          goto LABEL_160;
        }
        if ((v21 & 8) != 0)
        {
          uint64_t v39 = *(void *)(v20 + 24);
          if (!v39) {
            uint64_t v39 = *(void *)(qword_10248ACC8 + 24);
          }
          int v40 = *(_DWORD *)(v39 + 16);
          if ((v40 & 4) != 0)
          {
            v183[11] = *(unsigned char *)(v39 + 10);
            if ((v40 & 2) == 0) {
              goto LABEL_155;
            }
          }
          else if ((v40 & 2) == 0)
          {
LABEL_155:
            if ((v40 & 8) == 0) {
              goto LABEL_173;
            }
LABEL_172:
            v183[12] = *(unsigned char *)(v39 + 11);
            goto LABEL_173;
          }
          v183[10] = *(unsigned char *)(v39 + 9);
          if ((v40 & 8) == 0) {
            goto LABEL_173;
          }
          goto LABEL_172;
        }
        if ((v21 & 0x10) != 0)
        {
          uint64_t v45 = *(void *)(v20 + 32);
          if (!v45) {
            uint64_t v45 = *(void *)(qword_10248ACC8 + 32);
          }
          int v46 = *(_DWORD *)(v45 + 20);
          if (v46)
          {
            v183[9] = *(unsigned char *)(v45 + 8);
            if ((v46 & 4) != 0) {
              goto LABEL_183;
            }
LABEL_166:
            if ((v46 & 8) == 0) {
              goto LABEL_167;
            }
LABEL_184:
            v183[12] = *(unsigned char *)(v45 + 11);
            if ((v46 & 2) != 0) {
              goto LABEL_185;
            }
LABEL_168:
            if ((v46 & 0x10) == 0) {
              goto LABEL_46;
            }
          }
          else
          {
            if ((v46 & 4) == 0) {
              goto LABEL_166;
            }
LABEL_183:
            v183[11] = *(unsigned char *)(v45 + 10);
            if ((v46 & 8) != 0) {
              goto LABEL_184;
            }
LABEL_167:
            if ((v46 & 2) == 0) {
              goto LABEL_168;
            }
LABEL_185:
            v183[10] = *(unsigned char *)(v45 + 9);
            if ((v46 & 0x10) == 0) {
              goto LABEL_46;
            }
          }
          v183[13] = *(unsigned char *)(v45 + 12);
          goto LABEL_46;
        }
        if ((v21 & 0x20) != 0)
        {
          uint64_t v47 = *(void *)(v20 + 40);
          if (!v47) {
            uint64_t v47 = *(void *)(qword_10248ACC8 + 40);
          }
          int v48 = *(_DWORD *)(v47 + 16);
          if ((v48 & 2) != 0)
          {
            v183[10] = *(unsigned char *)(v47 + 9);
            if (v48) {
              goto LABEL_195;
            }
LABEL_179:
            if ((v48 & 8) == 0) {
              goto LABEL_180;
            }
LABEL_196:
            v183[12] = *(unsigned char *)(v47 + 11);
            if ((v48 & 4) == 0) {
              goto LABEL_46;
            }
          }
          else
          {
            if ((v48 & 1) == 0) {
              goto LABEL_179;
            }
LABEL_195:
            v183[9] = *(unsigned char *)(v47 + 8);
            if ((v48 & 8) != 0) {
              goto LABEL_196;
            }
LABEL_180:
            if ((v48 & 4) == 0) {
              goto LABEL_46;
            }
          }
          v183[11] = *(unsigned char *)(v47 + 10);
          goto LABEL_46;
        }
        if ((v21 & 0x40) != 0)
        {
          uint64_t v49 = *(void *)(v20 + 48);
          if (!v49) {
            uint64_t v49 = *(void *)(qword_10248ACC8 + 48);
          }
          int v50 = *(_DWORD *)(v49 + 16);
          if ((v50 & 4) != 0)
          {
            v183[11] = *(unsigned char *)(v49 + 10);
            if ((v50 & 8) != 0) {
              goto LABEL_205;
            }
LABEL_191:
            if ((v50 & 1) == 0) {
              goto LABEL_192;
            }
LABEL_206:
            v183[9] = *(unsigned char *)(v49 + 8);
            if ((v50 & 2) == 0) {
              goto LABEL_46;
            }
          }
          else
          {
            if ((v50 & 8) == 0) {
              goto LABEL_191;
            }
LABEL_205:
            v183[12] = *(unsigned char *)(v49 + 11);
            if (v50) {
              goto LABEL_206;
            }
LABEL_192:
            if ((v50 & 2) == 0) {
              goto LABEL_46;
            }
          }
          v183[10] = *(unsigned char *)(v49 + 9);
          goto LABEL_46;
        }
        if ((v21 & 0x80) != 0)
        {
          uint64_t v39 = *(void *)(v20 + 56);
          if (!v39) {
            uint64_t v39 = *(void *)(qword_10248ACC8 + 56);
          }
          int v40 = *(_DWORD *)(v39 + 16);
          if ((v40 & 8) != 0) {
            v183[12] = *(unsigned char *)(v39 + 11);
          }
          if ((v40 & 4) != 0) {
            v183[11] = *(unsigned char *)(v39 + 10);
          }
LABEL_160:
          if ((v40 & 2) != 0) {
            v183[10] = *(unsigned char *)(v39 + 9);
          }
LABEL_173:
          if (v40) {
            v183[9] = *(unsigned char *)(v39 + 8);
          }
          goto LABEL_46;
        }
        if ((v21 & 0x100) != 0)
        {
          uint64_t v51 = *(void *)(v20 + 64);
          if (!v51) {
            uint64_t v51 = *(void *)(qword_10248ACC8 + 64);
          }
          sub_10187AFD4(v51, &v183[9]);
        }
        else
        {
          if ((v21 & 0x400) == 0) {
            goto LABEL_390;
          }
          uint64_t v24 = *(void *)(v20 + 80);
          if (!v24) {
            uint64_t v24 = *(void *)(qword_10248ACC8 + 80);
          }
          sub_10187AF8C(v24, &v183[9]);
        }
      }
LABEL_46:
      int v19 = *(_DWORD *)(v16 + 112);
      if ((v19 & 4) != 0)
      {
        *(void *)&v183[24] = *(void *)(v16 + 24);
        if ((v19 & 8) == 0)
        {
LABEL_48:
          if ((v19 & 0x10) == 0) {
            goto LABEL_49;
          }
          goto LABEL_71;
        }
      }
      else if ((v19 & 8) == 0)
      {
        goto LABEL_48;
      }
      *(void *)&v183[32] = *(void *)(v16 + 32);
      if ((v19 & 0x10) == 0)
      {
LABEL_49:
        if ((v19 & 0x20) == 0) {
          goto LABEL_80;
        }
        goto LABEL_72;
      }
LABEL_71:
      *(void *)&long long v184 = *(void *)(v16 + 40);
      if ((v19 & 0x20) == 0) {
        goto LABEL_80;
      }
LABEL_72:
      uint64_t v25 = *(void *)(v16 + 48);
      if (!v25) {
        uint64_t v25 = *(void *)(qword_10248AD10 + 48);
      }
      int v26 = *(_DWORD *)(v25 + 32);
      if (v26) {
        *((void *)&v184 + 1) = *(void *)(v25 + 8);
      }
      if ((v26 & 2) != 0)
      {
        double v27 = *(double *)(v25 + 16);
        if (v27 < 1.17549435e-38 || v27 > 3.40282347e38) {
          goto LABEL_390;
        }
        float v28 = v27;
        *(float *)__int16 v185 = v28;
      }
LABEL_80:
      if ((v19 & 0x40) != 0)
      {
        uint64_t v29 = *(void *)(v16 + 56);
        if (!v29) {
          uint64_t v29 = *(void *)(qword_10248AD10 + 56);
        }
        int v30 = *(_DWORD *)(v29 + 32);
        if (v30) {
          *(void *)&v185[8] = *(void *)(v29 + 8);
        }
        if ((v30 & 2) != 0) {
          *(void *)&v185[16] = *(void *)(v29 + 16);
        }
      }
      if ((v19 & 0x800) != 0)
      {
        uint64_t v31 = *(void *)(v16 + 88);
        if (!v31) {
          uint64_t v31 = *(void *)(qword_10248AD10 + 88);
        }
        int v32 = *(_DWORD *)(v31 + 32);
        if (v32) {
          *(void *)&v185[24] = *(void *)(v31 + 8);
        }
        if ((v32 & 2) != 0) {
          *(void *)&v185[32] = *(void *)(v31 + 16);
        }
        uint64_t v33 = *(void *)(v16 + 96);
        if (!v33) {
          uint64_t v33 = *(void *)(qword_10248AD10 + 96);
        }
        int v34 = *(_DWORD *)(v33 + 32);
        if (v34)
        {
          *(void *)&v185[40] = *(void *)(v33 + 8);
          if ((v34 & 2) == 0)
          {
LABEL_98:
            if ((v34 & 4) == 0) {
              goto LABEL_100;
            }
LABEL_99:
            LOBYTE(v186) = *(unsigned char *)(v33 + 24);
            goto LABEL_100;
          }
        }
        else if ((v34 & 2) == 0)
        {
          goto LABEL_98;
        }
        *(void *)&v185[48] = *(void *)(v33 + 16);
        if ((v34 & 4) != 0) {
          goto LABEL_99;
        }
      }
LABEL_100:
      if ((v19 & 0x80) == 0) {
        goto LABEL_109;
      }
      uint64_t v35 = *(void *)(v16 + 64);
      if (!v35) {
        uint64_t v35 = *(void *)(qword_10248AD10 + 64);
      }
      int v36 = *(_DWORD *)(v35 + 48);
      if ((v36 & 0x10) != 0)
      {
        char v189 = *(unsigned char *)(v35 + 40);
        if ((v36 & 2) == 0)
        {
LABEL_105:
          if ((v36 & 1) == 0) {
            goto LABEL_106;
          }
          goto LABEL_123;
        }
      }
      else if ((v36 & 2) == 0)
      {
        goto LABEL_105;
      }
      unint64_t v187 = *(void *)(v35 + 16);
      if ((v36 & 1) == 0)
      {
LABEL_106:
        if ((v36 & 4) == 0) {
          goto LABEL_107;
        }
        goto LABEL_124;
      }
LABEL_123:
      *((void *)&v186 + 1) = *(void *)(v35 + 8);
      if ((v36 & 4) == 0)
      {
LABEL_107:
        if ((v36 & 8) == 0) {
          goto LABEL_109;
        }
LABEL_108:
        *((void *)&v188 + 1) = *(void *)(v35 + 32);
        goto LABEL_109;
      }
LABEL_124:
      *(void *)&long long v188 = *(void *)(v35 + 24);
      if ((v36 & 8) != 0) {
        goto LABEL_108;
      }
LABEL_109:
      if ((v19 & 0x100) != 0) {
        operator new();
      }
      int v41 = *(_DWORD *)(v16 + 112);
      if ((v41 & 0x200) != 0)
      {
        int v191 = *(_DWORD *)(v16 + 80);
        if ((v41 & 0x1000) != 0)
        {
LABEL_141:
          HIBYTE(v192) = *(unsigned char *)(v16 + 104);
          if ((v41 & 0x400) == 0) {
            goto LABEL_147;
          }
          goto LABEL_142;
        }
      }
      else if ((v41 & 0x1000) != 0)
      {
        goto LABEL_141;
      }
      if ((v41 & 0x400) == 0) {
        goto LABEL_147;
      }
LABEL_142:
      int v42 = *(_DWORD *)(v16 + 84);
      LOBYTE(v192) = 0;
      if (v42 == 3)
      {
        char v43 = 1;
        goto LABEL_146;
      }
      if (v42 == 4)
      {
        char v43 = 2;
LABEL_146:
        LOBYTE(v192) = v43;
      }
LABEL_147:
      sub_10187AC94(v178, (uint64_t)v183);
      int v44 = v190;
      int v190 = 0;
      if (v44) {
        sub_100E93F5C((uint64_t)&v190, v44);
      }
      ++v15;
    }
    while (v15 != v177);
  }
LABEL_211:
  uint64_t v52 = a1;
  uint64_t v53 = *(int *)(a1 + 32);
  if (v53)
  {
    __int16 v54 = *(uint64_t **)(a1 + 24);
    int v180 = &v54[v53];
    int64x2_t v55 = vdupq_n_s64(0x7FF8000000000000uLL);
    int32x2_t v56 = vdup_n_s32(0x7FC00000u);
    long long v57 = 0uLL;
    int64x2_t v179 = v55;
    do
    {
      uint64_t v58 = *v54;
      *(_DWORD *)__int16 v183 = 0;
      *(_WORD *)&v183[4] = 0;
      v183[6] = 127;
      *(void *)&v183[8] = 0x7FF8000000000000;
      v183[16] = 0;
      *(_OWORD *)&v183[24] = v57;
      long long v184 = v57;
      *(int64x2_t *)__int16 v185 = v55;
      *(int64x2_t *)&v185[16] = v55;
      *(int32x2_t *)&v185[32] = v56;
      *(void *)&v185[40] = 0;
      *(_WORD *)&v185[48] = 0;
      unint64_t v187 = 0;
      long long v186 = 0uLL;
      LOBYTE(v188) = 0;
      int v59 = *(_DWORD *)(v58 + 172);
      if (v59)
      {
        uint64_t v60 = *(void *)(v58 + 8);
        if (!v60) {
          uint64_t v60 = *(void *)(qword_10248AD60 + 8);
        }
        if (!sub_10187AE50(v60, (uint64_t)v183))
        {
LABEL_384:
          if ((void)v186)
          {
            *((void *)&v186 + 1) = v186;
            operator delete((void *)v186);
          }
          uint64_t v173 = *((void *)&v184 + 1);
          *((void *)&v184 + 1) = 0;
          if (v173) {
            operator delete();
          }
          if (*(void *)&v183[24])
          {
            *(void *)&v183[32] = *(void *)&v183[24];
            operator delete(*(void **)&v183[24]);
          }
          return 0;
        }
        int v59 = *(_DWORD *)(v58 + 172);
      }
      if ((v59 & 4) != 0)
      {
        unsigned int v61 = *(_DWORD *)(v58 + 56) - 1;
        if (v61 > 5) {
          goto LABEL_384;
        }
        v183[16] = 0x30404020100uLL >> (8 * v61);
      }
      uint64_t v62 = *(int *)(v58 + 32);
      if (v62)
      {
        __int16 v63 = *(uint64_t **)(v58 + 24);
        double v64 = &v63[v62];
        do
        {
          uint64_t v65 = *v63;
          if ((*(unsigned char *)(*v63 + 28) & 2) != 0)
          {
            int v69 = *(void **)(v65 + 16);
            if (!v69) {
              int v69 = *(void **)(qword_10248AD50 + 16);
            }
            uint64_t v66 = v69[1];
            uint64_t v67 = v69[2];
            uint64_t v68 = v69[3];
          }
          else
          {
            uint64_t v66 = 0x7FF8000000000000;
            uint64_t v67 = 0x7FF8000000000000;
            uint64_t v68 = 0x7FF8000000000000;
          }
          uint64_t v70 = *(void *)(v65 + 8);
          BOOL v71 = *(void **)&v183[32];
          if (*(void *)&v183[32] >= (unint64_t)v184)
          {
            BOOL v73 = *(void **)&v183[24];
            uint64_t v74 = (uint64_t)(*(void *)&v183[32] - *(void *)&v183[24]) >> 5;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 59) {
              sub_1001D7FD4();
            }
            uint64_t v76 = v184 - *(void *)&v183[24];
            if ((uint64_t)(v184 - *(void *)&v183[24]) >> 4 > v75) {
              unint64_t v75 = v76 >> 4;
            }
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v77 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v77 = v75;
            }
            if (v77)
            {
              int v78 = (char *)sub_1001D9EDC((uint64_t)&v184, v77);
              BOOL v73 = *(void **)&v183[24];
              BOOL v71 = *(void **)&v183[32];
            }
            else
            {
              int v78 = 0;
            }
            uint64_t v79 = &v78[32 * v74];
            *(void *)uint64_t v79 = v70;
            *((void *)v79 + 1) = v66;
            *((void *)v79 + 2) = v67;
            *((void *)v79 + 3) = v68;
            unsigned int v80 = v79;
            if (v71 != v73)
            {
              do
              {
                long long v81 = *((_OWORD *)v71 - 1);
                *((_OWORD *)v80 - 2) = *((_OWORD *)v71 - 2);
                *((_OWORD *)v80 - 1) = v81;
                v80 -= 32;
                v71 -= 4;
              }
              while (v71 != v73);
              BOOL v73 = *(void **)&v183[24];
            }
            __int16 v72 = v79 + 32;
            *(void *)&v183[24] = v80;
            *(void *)&v183[32] = v79 + 32;
            *(void *)&long long v184 = &v78[32 * v77];
            if (v73) {
              operator delete(v73);
            }
          }
          else
          {
            **(void **)&v183[32] = v70;
            v71[1] = v66;
            __int16 v72 = v71 + 4;
            v71[2] = v67;
            v71[3] = v68;
          }
          *(void *)&v183[32] = v72;
          ++v63;
        }
        while (v63 != v64);
        int v59 = *(_DWORD *)(v58 + 172);
      }
      *(void *)__int16 v185 = *(void *)(v58 + 48);
      *(_OWORD *)&v185[8] = *(_OWORD *)(v58 + 64);
      *(_DWORD *)&v185[32] = *(_DWORD *)(v58 + 60);
      *(_DWORD *)&v185[36] = *(_DWORD *)(v58 + 80);
      if ((v59 & 0x200) != 0)
      {
        unsigned int v82 = *(_DWORD *)(v58 + 84) - 1;
        if (v82 > 3) {
          goto LABEL_384;
        }
        v185[40] = 0x2010000u >> (8 * v82);
      }
      if ((v59 & 0x400) != 0)
      {
        unsigned int v83 = *(_DWORD *)(v58 + 88) - 1;
        if (v83 > 3) {
          goto LABEL_384;
        }
        v185[42] = 0x2010000u >> (8 * v83);
      }
      if ((v59 & 0x800) != 0)
      {
        unsigned int v84 = *(_DWORD *)(v58 + 92) - 1;
        if (v84 > 3) {
          goto LABEL_384;
        }
        v185[44] = 0x2010000u >> (8 * v84);
      }
      if ((v59 & 0x1000) != 0)
      {
        unsigned int v85 = *(_DWORD *)(v58 + 96) - 1;
        if (v85 > 3) {
          goto LABEL_384;
        }
        v185[46] = 0x2010000u >> (8 * v85);
      }
      if ((v59 & 0x2000) != 0)
      {
        unsigned int v86 = *(_DWORD *)(v58 + 100) - 1;
        if (v86 > 3) {
          goto LABEL_384;
        }
        v185[48] = 0x2010000u >> (8 * v86);
      }
      if ((v59 & 0x10000) != 0)
      {
        unsigned int v87 = *(_DWORD *)(v58 + 136) - 1;
        if (v87 > 3) {
          goto LABEL_384;
        }
        v185[41] = 0x2010000u >> (8 * v87);
      }
      if ((v59 & 0x20000) != 0)
      {
        unsigned int v88 = *(_DWORD *)(v58 + 140) - 1;
        if (v88 > 3) {
          goto LABEL_384;
        }
        v185[43] = 0x2010000u >> (8 * v88);
      }
      if ((v59 & 0x40000) != 0)
      {
        unsigned int v89 = *(_DWORD *)(v58 + 144) - 1;
        if (v89 > 3) {
          goto LABEL_384;
        }
        v185[45] = 0x2010000u >> (8 * v89);
      }
      if ((v59 & 0x80000) != 0)
      {
        unsigned int v90 = *(_DWORD *)(v58 + 148) - 1;
        if (v90 > 3) {
          goto LABEL_384;
        }
        v185[47] = 0x2010000u >> (8 * v90);
      }
      if ((v59 & 0x100000) != 0)
      {
        unsigned int v91 = *(_DWORD *)(v58 + 160) - 1;
        if (v91 > 3) {
          goto LABEL_384;
        }
        v185[49] = 0x2010000u >> (8 * v91);
      }
      uint64_t v92 = *(int *)(v58 + 112);
      if (v92)
      {
        unint64_t v93 = *(uint64_t **)(v58 + 104);
        double v94 = &v93[v92];
        do
        {
          uint64_t v95 = *v93;
          if (*(unsigned char *)(*v93 + 44))
          {
            unsigned int v96 = *(_DWORD *)(v95 + 28);
            if (v96 > 2) {
              goto LABEL_384;
            }
            uint64_t v100 = *(void *)(v95 + 8);
            uint64_t v99 = *(void *)(v95 + 16);
            uint64_t v98 = *(void *)(v95 + 32);
            int v101 = *(_DWORD *)(v95 + 24) - 2;
            if v101 <= 0xA && ((0x6FFu >> v101)) {
              char v97 = byte_101E44B0C[v101];
            }
            else {
              char v97 = 0;
            }
          }
          else
          {
            unsigned int v96 = 0;
            char v97 = 0;
            uint64_t v98 = 0x7FF8000000000000;
            uint64_t v99 = 0x7FF8000000000000;
            uint64_t v100 = 0x7FF8000000000000;
          }
          uint64_t v102 = *((void *)&v186 + 1);
          if (*((void *)&v186 + 1) >= v187)
          {
            unsigned int v104 = (void *)v186;
            uint64_t v105 = (uint64_t)(*((void *)&v186 + 1) - v186) >> 5;
            unint64_t v106 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 59) {
              sub_1001D7FD4();
            }
            uint64_t v107 = v187 - v186;
            if ((uint64_t)(v187 - v186) >> 4 > v106) {
              unint64_t v106 = v107 >> 4;
            }
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v108 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v108 = v106;
            }
            if (v108)
            {
              __int16 v109 = (char *)sub_1001D9EDC((uint64_t)&v187, v108);
              uint64_t v102 = *((void *)&v186 + 1);
              unsigned int v104 = (void *)v186;
            }
            else
            {
              __int16 v109 = 0;
            }
            int v110 = &v109[32 * v105];
            *int v110 = v97;
            *((_DWORD *)v110 + 1) = v96;
            *((void *)v110 + 1) = v100;
            *((void *)v110 + 2) = v99;
            *((void *)v110 + 3) = v98;
            __int16 v111 = v110;
            if ((void *)v102 != v104)
            {
              do
              {
                long long v112 = *(_OWORD *)(v102 - 16);
                *((_OWORD *)v111 - 2) = *(_OWORD *)(v102 - 32);
                *((_OWORD *)v111 - 1) = v112;
                v111 -= 32;
                v102 -= 32;
              }
              while ((void *)v102 != v104);
              unsigned int v104 = (void *)v186;
            }
            __int16 v103 = v110 + 32;
            *(void *)&long long v186 = v111;
            *((void *)&v186 + 1) = v110 + 32;
            unint64_t v187 = (unint64_t)&v109[32 * v108];
            if (v104) {
              operator delete(v104);
            }
          }
          else
          {
            **((unsigned char **)&v186 + 1) = v97;
            *(_DWORD *)(v102 + 4) = v96;
            *(void *)(v102 + 8) = v100;
            *(void *)(v102 + 16) = v99;
            __int16 v103 = (char *)(v102 + 32);
            *(void *)(v102 + 24) = v98;
          }
          *((void *)&v186 + 1) = v103;
          ++v93;
        }
        while (v93 != v94);
      }
      unint64_t v113 = *(void *)(a2 + 184);
      if (v113 >= *(void *)(a2 + 192))
      {
        uint64_t v52 = a1;
        uint64_t v119 = sub_10187B420((uint64_t *)(a2 + 176), (uint64_t)v183);
        int v120 = (void *)v186;
        *(void *)(a2 + 184) = v119;
        if (v120)
        {
          *((void *)&v186 + 1) = v120;
          operator delete(v120);
        }
      }
      else
      {
        long long v114 = *(_OWORD *)v183;
        *(unsigned char *)(v113 + 16) = v183[16];
        *(_OWORD *)unint64_t v113 = v114;
        *(void *)(v113 + 32) = 0;
        *(void *)(v113 + 40) = 0;
        *(void *)(v113 + 24) = 0;
        *(_OWORD *)(v113 + 24) = *(_OWORD *)&v183[24];
        *(void *)(v113 + 40) = v184;
        *(void *)&v183[24] = 0;
        *(void *)&v183[32] = 0;
        uint64_t v115 = *((void *)&v184 + 1);
        long long v184 = 0uLL;
        *(void *)(v113 + 48) = v115;
        long long v116 = *(_OWORD *)v185;
        long long v117 = *(_OWORD *)&v185[16];
        long long v118 = *(_OWORD *)&v185[32];
        *(_WORD *)(v113 + 104) = *(_WORD *)&v185[48];
        *(_OWORD *)(v113 + 88) = v118;
        *(_OWORD *)(v113 + 72) = v117;
        *(_OWORD *)(v113 + 56) = v116;
        *(void *)(v113 + 112) = 0;
        *(void *)(v113 + 120) = 0;
        *(void *)(v113 + 128) = 0;
        *(_OWORD *)(v113 + 112) = v186;
        *(void *)(v113 + 128) = v187;
        long long v186 = 0uLL;
        unint64_t v187 = 0;
        *(unsigned char *)(v113 + 136) = v188;
        *(void *)(a2 + 184) = v113 + 144;
        uint64_t v52 = a1;
      }
      uint64_t v121 = *((void *)&v184 + 1);
      *((void *)&v184 + 1) = 0;
      if (v121) {
        operator delete();
      }
      if (*(void *)&v183[24])
      {
        *(void *)&v183[32] = *(void *)&v183[24];
        operator delete(*(void **)&v183[24]);
      }
      ++v54;
      int64x2_t v55 = v179;
      long long v57 = 0uLL;
    }
    while (v54 != v180);
  }
  uint64_t v122 = *(int *)(v52 + 56);
  if (v122)
  {
    __int16 v123 = *(uint64_t **)(a1 + 48);
    uint64_t v124 = &v123[v122];
    int v125 = (char **)(a2 + 200);
    do
    {
      uint64_t v126 = *v123;
      int v127 = *(_DWORD *)(*v123 + 16) - 2;
      if v127 <= 0xA && ((0x6FFu >> v127)) {
        char v128 = byte_101E44B0C[v127];
      }
      else {
        char v128 = 0;
      }
      uint64_t v129 = *(void *)(v126 + 8);
      int v131 = *(_DWORD *)(v126 + 20);
      int v130 = *(_DWORD *)(v126 + 24);
      unint64_t v133 = *(void *)(a2 + 208);
      unint64_t v132 = *(void *)(a2 + 216);
      if (v133 >= v132)
      {
        unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133 - (void)*v125) >> 3);
        unint64_t v136 = v135 + 1;
        if (v135 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132 - (void)*v125) >> 3);
        if (2 * v137 > v136) {
          unint64_t v136 = 2 * v137;
        }
        if (v137 >= 0x555555555555555) {
          unint64_t v138 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v138 = v136;
        }
        if (v138) {
          __int16 v139 = (char *)sub_1000DA5D8(a2 + 216, v138);
        }
        else {
          __int16 v139 = 0;
        }
        int v140 = &v139[24 * v135];
        *(void *)int v140 = v129;
        *((_DWORD *)v140 + 2) = v131;
        *((_DWORD *)v140 + 3) = v130;
        v140[16] = v128;
        __int16 v142 = *(char **)(a2 + 200);
        __int16 v141 = *(char **)(a2 + 208);
        __int16 v143 = v140;
        if (v141 != v142)
        {
          do
          {
            long long v144 = *(_OWORD *)(v141 - 24);
            *(v143 - 8) = *(v141 - 8);
            *(_OWORD *)(v143 - 24) = v144;
            v143 -= 24;
            v141 -= 24;
          }
          while (v141 != v142);
          __int16 v141 = *v125;
        }
        int v134 = v140 + 24;
        *(void *)(a2 + 200) = v143;
        *(void *)(a2 + 208) = v140 + 24;
        *(void *)(a2 + 216) = &v139[24 * v138];
        if (v141) {
          operator delete(v141);
        }
      }
      else
      {
        *(void *)unint64_t v133 = v129;
        *(_DWORD *)(v133 + 8) = v131;
        *(_DWORD *)(v133 + 12) = v130;
        int v134 = (char *)(v133 + 24);
        *(unsigned char *)(v133 + 16) = v128;
      }
      *(void *)(a2 + 208) = v134;
      ++v123;
    }
    while (v123 != v124);
  }
  if ((*(unsigned char *)(a1 + 132) & 0x10) != 0)
  {
    uint64_t v145 = *(void *)(a1 + 72);
    if (!v145) {
      uint64_t v145 = *(void *)(qword_10248ADE8 + 72);
    }
    if (*(unsigned char *)(v145 + 52)) {
      operator new();
    }
    if ((*(unsigned char *)(v145 + 52) & 4) != 0) {
      operator new();
    }
    if ((*(unsigned char *)(v145 + 52) & 8) != 0) {
      operator new();
    }
    if ((*(unsigned char *)(v145 + 52) & 2) != 0) {
      operator new();
    }
    if ((*(unsigned char *)(v145 + 52) & 0x10) != 0) {
      operator new();
    }
  }
  if ((*(unsigned char *)(a1 + 132) & 0x80) != 0) {
    operator new();
  }
  uint64_t v146 = *(int *)(a1 + 112);
  if (!v146) {
    return 1;
  }
  __int16 v147 = *(uint64_t **)(a1 + 104);
  int v148 = &v147[v146];
  __int16 v149 = (char **)(a2 + 272);
  int64x2_t v182 = vdupq_n_s64(0x7FF8000000000000uLL);
  while (1)
  {
    uint64_t v150 = *v147;
    *(_DWORD *)__int16 v183 = 0;
    *(_WORD *)&v183[4] = 0;
    v183[6] = 127;
    *(_WORD *)&v183[8] = 0;
    *(int64x2_t *)&v183[16] = v182;
    *(void *)&v183[32] = 0x7FF8000000000000;
    int v151 = *(_DWORD *)(v150 + 36);
    if (v151)
    {
      uint64_t v152 = *(void *)(v150 + 8);
      if (!v152) {
        uint64_t v152 = *(void *)(qword_10248ADD8 + 8);
      }
      uint64_t result = sub_10187AE50(v152, (uint64_t)v183);
      if (!result) {
        break;
      }
    }
    if ((v151 & 2) != 0)
    {
      int v154 = *(_DWORD *)(v150 + 16);
      v183[8] = 0;
      unsigned int v155 = v154 - 2;
      if (v155 <= 0xA && ((0x6FFu >> v155) & 1) != 0) {
        v183[8] = byte_101E44B0C[v155];
      }
    }
    if ((v151 & 4) != 0)
    {
      int v156 = *(_DWORD *)(v150 + 20);
      v183[9] = 0;
      unsigned int v157 = v156 - 1;
      if (v157 <= 2) {
        v183[9] = v157 + 1;
      }
    }
    if ((v151 & 8) != 0)
    {
      uint64_t v158 = *(void *)(v150 + 24);
      if (!v158) {
        uint64_t v158 = *(void *)(qword_10248ADD8 + 24);
      }
      *(_OWORD *)&v183[16] = *(_OWORD *)(v158 + 8);
      *(void *)&v183[32] = *(void *)(v158 + 24);
    }
    unint64_t v159 = *(void *)(a2 + 280);
    unint64_t v160 = *(void *)(a2 + 288);
    if (v159 >= v160)
    {
      unint64_t v162 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v159 - (void)*v149) >> 3);
      unint64_t v163 = v162 + 1;
      if (v162 + 1 > 0x666666666666666) {
        sub_1001D7FD4();
      }
      unint64_t v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v160 - (void)*v149) >> 3);
      if (2 * v164 > v163) {
        unint64_t v163 = 2 * v164;
      }
      if (v164 >= 0x333333333333333) {
        unint64_t v165 = 0x666666666666666;
      }
      else {
        unint64_t v165 = v163;
      }
      if (v165) {
        int64x2_t v166 = (char *)sub_1002E5328(a2 + 288, v165);
      }
      else {
        int64x2_t v166 = 0;
      }
      __int16 v167 = &v166[40 * v162];
      *(_OWORD *)__int16 v167 = *(_OWORD *)v183;
      *((_OWORD *)v167 + 1) = *(_OWORD *)&v183[16];
      *((void *)v167 + 4) = *(void *)&v183[32];
      __int16 v169 = *(char **)(a2 + 272);
      int v168 = *(char **)(a2 + 280);
      int v170 = v167;
      if (v168 != v169)
      {
        do
        {
          long long v171 = *(_OWORD *)(v168 - 40);
          long long v172 = *(_OWORD *)(v168 - 24);
          *((void *)v170 - 1) = *((void *)v168 - 1);
          *(_OWORD *)(v170 - 24) = v172;
          *(_OWORD *)(v170 - 40) = v171;
          v170 -= 40;
          v168 -= 40;
        }
        while (v168 != v169);
        int v168 = *v149;
      }
      __int16 v161 = v167 + 40;
      *(void *)(a2 + 272) = v170;
      *(void *)(a2 + 280) = v167 + 40;
      *(void *)(a2 + 288) = &v166[40 * v165];
      if (v168) {
        operator delete(v168);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v159 = *(_OWORD *)v183;
      *(_OWORD *)(v159 + 16) = *(_OWORD *)&v183[16];
      *(void *)(v159 + 32) = *(void *)&v183[32];
      __int16 v161 = (char *)(v159 + 40);
    }
    *(void *)(a2 + 280) = v161;
    if (++v147 == v148) {
      return 1;
    }
  }
  return result;
}

void sub_10187694C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
}

void *sub_101876990(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

unsigned int *sub_1018769F4(unsigned int *result, _DWORD *a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v3 = *result;
  if (v3 <= 0x20)
  {
    if (((1 << v3) & 0x10116) != 0)
    {
LABEL_3:
      *a2 = v3;
      *a3 = *((unsigned __int8 *)result + 4);
      return result;
    }
    if (v3 == 32)
    {
      LODWORD(v3) = 256;
      goto LABEL_3;
    }
  }
  return result;
}

double sub_101876A40@<D0>(uint64_t a1@<X8>)
{
  *(void *)&long long v5 = 0;
  BYTE8(v5) = 1;
  if (cnnavigation::LLAToECEF())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#SatReport,ECEF conversion failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<std::array<double, 3>> gnss::util::convertLlaToEcefArray(double, double, double)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0uLL;
    *(_OWORD *)(a1 + 16) = v5;
  }
  return result;
}

uint64_t *sub_101876C40(uint64_t *result, uint64_t a2, uint64_t **a3)
{
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    for (uint64_t j = (uint64_t *)i[5]; j; uint64_t j = (uint64_t *)*j)
    {
      j[3] = 0;
      *((_DWORD *)j + 11) = 0;
    }
  }
  uint64_t v7 = (unsigned int *)result[19];
  for (uint64_t k = (unsigned int *)result[20]; v7 != k; v7 += 44)
  {
    if (!*((unsigned char *)v7 + 173)) {
      continue;
    }
    unsigned int v18 = 0;
    unsigned int v19 = 0;
    sub_1018769F4(v7, &v19, &v18);
    uint64_t v20 = (int *)&v19;
    uint64_t v9 = sub_10187B838(a2, &v19, (uint64_t)&unk_101D0B290, &v20);
    uint64_t v10 = v18;
    unsigned int v17 = v18;
    uint64_t v20 = (int *)&v17;
    float v11 = sub_10187BAAC((uint64_t)(v9 + 3), (int *)&v17, (uint64_t)&unk_101D0B290, &v20);
    uint64_t v20 = (int *)(*v7 | (unint64_t)(v10 << 32));
    double result = sub_10187BCDC(a3, (int *)&v20, (uint64_t *)&v20);
    void v11[5] = v10;
    if ((*((void *)v7 + 12) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)v7 + 13) <= 0.0)
    {
      unint64_t v13 = *((void *)v7 + 15);
      if (v13 == -1) {
        goto LABEL_15;
      }
      BOOL v12 = 0;
      unint64_t v14 = *((void *)v7 + 16);
      if (v14 == -1 || v13 > v14) {
        goto LABEL_16;
      }
      if ((*((void *)v7 + 17) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
LABEL_15:
      }
        BOOL v12 = 0;
      else {
        BOOL v12 = *((double *)v7 + 18) > 0.0;
      }
    }
    else
    {
      BOOL v12 = 1;
    }
LABEL_16:
    unsigned int v15 = *((unsigned __int8 *)v7 + 8);
    if (v15 > 0xA || ((1 << v15) & 0x68D) == 0)
    {
      v11[6] = v7[42];
      if (!v12) {
        continue;
      }
      int v16 = 1;
      goto LABEL_20;
    }
    v11[7] = v7[42];
    if (v12)
    {
      int v16 = 2;
LABEL_20:
      v11[11] |= v16;
    }
  }
  return result;
}

void sub_101876E20(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  sub_101876A40((uint64_t)v13);
  if (v14)
  {
    uint64_t v9 = *(void *)(a1 + 176);
    uint64_t v10 = *(void *)(a1 + 184);
    while (v9 != v10)
    {
      if (!v14) {
        sub_10020D700();
      }
      sub_101877000(v9, a6, (uint64_t)v13, a2);
      v9 += 144;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    float v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#SatReport,RX conversion from LLA to ECEF failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      BOOL v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void gnss::util::updateSatelliteAzElFromMeasurementData(const gnss::MeasurementData &, double, double, double, double, GNSS::SatelliteVisibilityReport &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_101877000(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = 0;
  sub_1018769F4((unsigned int *)a1, (_DWORD *)&v28 + 1, &v28);
  *(void *)uint64_t buf = (char *)&v28 + 4;
  uint64_t v7 = sub_10187B838(a4, (unsigned int *)&v28 + 1, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  int v8 = v28;
  LODWORD(v36) = v28;
  *(void *)uint64_t buf = &v36;
  uint64_t v9 = (float *)sub_10187BAAC((uint64_t)(v7 + 3), (int *)&v36, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  float v10 = v9[10];
  if (v10 > 0.0 && a2 - v10 < 30.0) {
    return;
  }
  BOOL v12 = v9;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  if (v13 != v14)
  {
    unsigned int v15 = (uint64_t *)(v13 + 32 * ((v14 - v13) >> 6));
    int v16 = v15 + 1;
    unsigned int v17 = v15 + 2;
    unsigned int v18 = v15 + 3;
    goto LABEL_9;
  }
  unsigned int v19 = *(uint64_t **)(a1 + 48);
  if (v19)
  {
    int v16 = v19 + 2;
    unsigned int v17 = v19 + 6;
    unsigned int v18 = v19 + 10;
LABEL_9:
    uint64_t v20 = *v17;
    uint64_t v21 = *v18;
    uint64_t v36 = *v16;
    uint64_t v37 = v20;
    uint64_t v38 = v21;
    if (!cnnavigation::SatElAz())
    {
      *((_DWORD *)v12 + 5) = v8;
      float v24 = a2;
      v12[10] = v24;
      float v25 = sub_1004BABF8(0.0);
      v12[8] = v25;
      float v26 = sub_1004BABF8(0.0);
      v12[9] = v26;
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    int v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(v28);
      __int16 v34 = 1026;
      int v35 = v8;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#SatReport,SatElAz failed,%{public}d,%{public}u", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      int v29 = 67240448;
      int v30 = HIDWORD(v28);
      __int16 v31 = 1026;
      int v32 = v8;
      unsigned int v23 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void gnss::util::updateSatelliteAzElFromSvInfo(const gnss::SvInfo &, const std::array<double, 3> &, double, GNSS::SatelliteVisibilityReport &)", "%s\n");
LABEL_28:
      if (v23 != buf) {
        free(v23);
      }
      return;
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  double v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v28);
    __int16 v34 = 1026;
    int v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#SatReport,unable to compute SV ECEF position,%{public}d,%{public}u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    LODWORD(v36) = 67240448;
    HIDWORD(v36) = HIDWORD(v28);
    LOWORD(v37) = 1026;
    *(_DWORD *)((char *)&v37 + 2) = v8;
    unsigned int v23 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void gnss::util::updateSatelliteAzElFromSvInfo(const gnss::SvInfo &, const std::array<double, 3> &, double, GNSS::SatelliteVisibilityReport &)", "%s\n");
    goto LABEL_28;
  }
}

unint64_t sub_101877458()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024890B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024890B0))
  {
    sub_1018774F8();
    __cxa_guard_release(&qword_1024890B0);
  }
  uint64_t v0 = mach_continuous_time();
  char v1 = 8;
  if (!byte_1024890D8) {
    char v1 = 0;
  }
  return ((v0 >> v1) * qword_1024890C8 / qword_1024890D0) << v1;
}

void sub_1018774E0(_Unwind_Exception *a1)
{
}

void sub_1018774F8()
{
  if (qword_1024890C8) {
    return;
  }
  mach_timebase_info(&info);
  if (info.denom)
  {
    denouint64_t m = info.denom;
    uint32_t numer = info.numer;
    do
    {
      uint32_t v2 = denom;
      denouint64_t m = numer % denom;
      uint32_t numer = v2;
    }
    while (denom);
  }
  else
  {
    uint32_t v2 = info.numer;
  }
  qword_1024890D0 = info.denom / v2;
  qword_1024890C8 = info.numer / v2;
  unint64_t v3 = qword_1024890C8 * (unint64_t)qword_1024890D0;
  if (v3 >= 0x17D)
  {
    byte_1024890D8 = 1;
    if (v3 >> 10 > 0x5E)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsdUtil,Cannot protect against overflow in tick to ns", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_22;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      LOWORD(v12) = 0;
      long long v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const TicksToNsInfo &getTickToNsInfo()", "%s\n");
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsdUtil,Reducing tick to ns precision to avoid overflow risk", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_22;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      LOWORD(v12) = 0;
      long long v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "const TicksToNsInfo &getTickToNsInfo()", "%s\n");
    }
    if (v5 != buf) {
      free(v5);
    }
  }
LABEL_22:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    if (byte_1024890D8) {
      int v8 = 8;
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)uint64_t buf = 134218496;
    uint64_t v19 = qword_1024890C8;
    __int16 v20 = 2048;
    uint64_t v21 = qword_1024890D0;
    __int16 v22 = 1024;
    int v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gpsdUtil,Tick to ns info,Numerator,%llu,Denominator,%llu,PrecisionReductionBits,%d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    if (byte_1024890D8) {
      int v9 = 8;
    }
    else {
      int v9 = 0;
    }
    int v12 = 134218496;
    uint64_t v13 = qword_1024890C8;
    __int16 v14 = 2048;
    uint64_t v15 = qword_1024890D0;
    __int16 v16 = 1024;
    int v17 = v9;
    float v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const TicksToNsInfo &getTickToNsInfo()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

double sub_1018779C0()
{
  return (double)sub_101877458() * 0.000000001;
}

void sub_1018779E8(int __val@<W0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = "START";
  switch(__val)
  {
    case 0:
    case 57:
      uint64_t v4 = "PROTO_DEFAULT";
      goto LABEL_62;
    case 1:
      goto LABEL_62;
    case 2:
      uint64_t v4 = "STOP";
      goto LABEL_62;
    case 3:
      uint64_t v4 = "RESET";
      goto LABEL_62;
    case 4:
      uint64_t v4 = "CLEAR";
      goto LABEL_62;
    case 5:
      uint64_t v4 = "DELETE_GNSS_DATA";
      goto LABEL_62;
    case 6:
      uint64_t v4 = "SET_PVTM_REPORT";
      goto LABEL_62;
    case 7:
      uint64_t v4 = "SET_NMEA_HANDLER";
      goto LABEL_62;
    case 8:
      uint64_t v4 = "INJECT_ASSISTANCE_POSITION";
      goto LABEL_62;
    case 9:
      uint64_t v4 = "INJECT_ASSISTANCE_TIME";
      goto LABEL_62;
    case 10:
      uint64_t v4 = "INJECT_ASSISTANCE_FILE";
      goto LABEL_62;
    case 11:
      uint64_t v4 = "INJECT_RTI_FILE";
      goto LABEL_62;
    case 12:
      uint64_t v4 = "INJECT_SVID_BLOCKLIST";
      goto LABEL_62;
    case 13:
      uint64_t v4 = "SET_ASSISTANCE_PRESSURE";
      goto LABEL_62;
    case 14:
      uint64_t v4 = "SET_ASSISTANCE_ACCEL";
      goto LABEL_62;
    case 15:
      uint64_t v4 = "SET_ASSISTANCE_GYRO";
      goto LABEL_62;
    case 16:
      uint64_t v4 = "SET_ASSISTANCE_DEM";
      goto LABEL_62;
    case 17:
      uint64_t v4 = "SET_ASSISTANCE_MAP_VECTOR";
      goto LABEL_62;
    case 18:
      uint64_t v4 = "SET_ASSISTANCE_MOTION_ACTIVITY_CONTEXT";
      goto LABEL_62;
    case 19:
      uint64_t v4 = "SET_ASSISTANCE_MOUNT_STATE";
      goto LABEL_62;
    case 20:
      uint64_t v4 = "SET_ASSISTANCE_SIGNAL_ENVIRONMENT";
      goto LABEL_62;
    case 21:
      uint64_t v4 = "SET_ASSISTANCE_SPEED_CONSTRAINT";
      goto LABEL_62;
    case 22:
      uint64_t v4 = "SET_ASSISTANCE_ALONG_TRACK_VELOCITY";
      goto LABEL_62;
    case 23:
      uint64_t v4 = "SET_POWER_REPORT";
      goto LABEL_62;
    case 24:
      uint64_t v4 = "SET_CONFIG_SIMULATOR_MODE";
      goto LABEL_62;
    case 25:
      uint64_t v4 = "SET_CONFIG_ENABLE_GNSS_CONSTELLATIONS";
      goto LABEL_62;
    case 26:
      uint64_t v4 = "SET_CONFIG_DUTY_CYCLING";
      goto LABEL_62;
    case 27:
      uint64_t v4 = "SET_TIME_TRANSFER_PULSE";
      goto LABEL_62;
    case 28:
      uint64_t v4 = "CLEAN_TIME_TRANSFER_PULSE";
      goto LABEL_62;
    case 29:
      uint64_t v4 = "INJECT_XOCAL_INFO";
      goto LABEL_62;
    case 30:
      uint64_t v4 = "CNTIN_STATUS_UPDATE";
      goto LABEL_62;
    case 31:
      uint64_t v4 = "SET_THERMAL_RISK_STATE";
      goto LABEL_62;
    case 32:
      uint64_t v4 = "PING";
      goto LABEL_62;
    case 34:
      uint64_t v4 = "BUILD_DEVICE";
      goto LABEL_62;
    case 35:
      uint64_t v4 = "TERMINATION_IMMINENT";
      goto LABEL_62;
    case 36:
      uint64_t v4 = "EXIT";
      goto LABEL_62;
    case 37:
      uint64_t v4 = "FORCE_CLEAR_ALL_NV";
      goto LABEL_62;
    case 38:
      uint64_t v4 = "SET_CONFIG_RF_BAND_ENABLE";
      goto LABEL_62;
    case 51:
      uint64_t v4 = "START_EMERGENCY_PREEMPTIVE_SESSION";
      goto LABEL_62;
    case 52:
      uint64_t v4 = "STOP_EMERGENCY_PREEMPTIVE_SESSION";
      goto LABEL_62;
    case 53:
      uint64_t v4 = "SET_EMERGENCY_CONFIG";
      goto LABEL_62;
    case 54:
      uint64_t v4 = "SET_EMERGENCY_SESSION_SUMMARY_REPORT";
      goto LABEL_62;
    case 55:
      uint64_t v4 = "ENTER_EMERGENCY_MODE";
      goto LABEL_62;
    case 56:
      uint64_t v4 = "EXIT_EMERGENCY_MODE";
      goto LABEL_62;
    case 60:
      uint64_t v4 = "START_EMERGENCY_POSITION";
      goto LABEL_62;
    case 61:
      uint64_t v4 = "STOP_EMERGENCY_POSITION";
      goto LABEL_62;
    case 62:
      uint64_t v4 = "SET_EMERGENCY_POSITION_REPORT";
      goto LABEL_62;
    case 63:
      uint64_t v4 = "SET_EMERGENCY_MEASUREMENT_REPORT";
      goto LABEL_62;
    case 64:
      uint64_t v4 = "SET_NW_ASSISTANCE_NEEDED_REPORT";
      goto LABEL_62;
    case 65:
      uint64_t v4 = "SET_NW_ASSISTANCE_GPS_REF_TIME";
      goto LABEL_62;
    case 66:
      uint64_t v4 = "SET_NW_ASSISTANCE_REF_POSITION";
      goto LABEL_62;
    case 67:
      uint64_t v4 = "SET_NW_ASSISTANCE_GPS_EPHEMERIS";
      goto LABEL_62;
    case 68:
      uint64_t v4 = "SET_NW_ASSISTANCE_GPS_ACQUISITION";
      goto LABEL_62;
    case 69:
      uint64_t v4 = "INJECT_FT_ASSISTANCE";
      goto LABEL_62;
    case 70:
      uint64_t v4 = "DECODE_SUPL_INIT";
      goto LABEL_62;
    case 71:
      uint64_t v4 = "SET_SUPL_INIT";
      goto LABEL_62;
    case 72:
      uint64_t v4 = "SET_SUPL_LOCATIONID_NEEDED_REPORT";
      goto LABEL_62;
    case 73:
      uint64_t v4 = "SET_SUPL_LOCATIONID";
      goto LABEL_62;
    case 74:
      uint64_t v4 = "ABORT_SUPL_SESSION";
      goto LABEL_62;
    case 75:
      uint64_t v4 = "SET_SUPL_SESSION_STATUS_REPORT";
      goto LABEL_62;
    case 76:
      uint64_t v4 = "SET_SUPL_WLAN_MEAS";
LABEL_62:
      std::string::assign((std::string *)a2, v4);
      break;
    default:
      break;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  if (!v5)
  {
    std::to_string(&__p, __val);
    int v6 = std::string::insert(&__p, 0, "unknown");
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
    v10[0] = v6->__r_.__value_.__l.__size_;
    *(void *)((char *)v10 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v10[0];
    *(void *)(a2 + 15) = *(void *)((char *)v10 + 7);
    *(unsigned char *)(a2 + 23) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_101877DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_101877F54()
{
  if (!access("/var/db/gpsd", 0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsdUtil,home check success", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_22;
    }
    goto LABEL_76;
  }
  int v0 = *__error();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  char v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 67240450;
    uid_t v24 = v0;
    __int16 v25 = 2082;
    float v26 = strerror(v0);
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "#gpsdUtil,home check failure,%{public}d,%{public}s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    strerror(v0);
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (mkdir("/var/db/gpsd", 0x1C0u))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    uint32_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v3 = *__error();
      *(_DWORD *)uint64_t buf = 67240192;
      uid_t v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#gpsdUtil,creating home failed,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    __error();
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n");
    goto LABEL_23;
  }
  *__error() = 0;
  int v6 = getpwnam("_gpsd");
  if (*__error())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    std::string::size_type v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v8 = *__error();
      int v9 = __error();
      float v10 = strerror(*v9);
      *(_DWORD *)uint64_t buf = 67109378;
      uid_t v24 = v8;
      __int16 v25 = 2080;
      float v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsdUtil,home id error,%d,%s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    __error();
    __int16 v20 = __error();
    strerror(*v20);
LABEL_68:
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
LABEL_31:
    uid_t pw_uid = 267;
    gid_t pw_gid = 267;
    goto LABEL_38;
  }
  if (!v6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gpsdUtil,home id null", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_31;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    goto LABEL_68;
  }
  uid_t pw_uid = v6->pw_uid;
  gid_t pw_gid = v6->pw_gid;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  uint64_t v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    uid_t v24 = pw_uid;
    __int16 v25 = 1024;
    LODWORD(v26) = pw_gid;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsdUtil,home id updated,%d,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
LABEL_38:
  if (chown("/var/db/gpsd", pw_uid, pw_gid))
  {
    int v14 = *__error();
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      __int16 v16 = strerror(v14);
      *(_DWORD *)uint64_t buf = 67240450;
      uid_t v24 = v14;
      __int16 v25 = 2082;
      float v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#gpsdUtil,mod home failed,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      strerror(v14);
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n", v4);
      if (v4 != (char *)buf) {
        goto LABEL_24;
      }
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  int v17 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#gpsdUtil,home regeneration succeeded", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    return;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024193D0 == -1) {
    goto LABEL_22;
  }
LABEL_76:
  dispatch_once(&qword_1024193D0, &stru_102343EA0);
LABEL_22:
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "void gpsd::util::ensureGpsdHomeDirectoryExists()", "%s\n");
LABEL_23:
  if (v4 != (char *)buf) {
LABEL_24:
  }
    free(v4);
}

BOOL sub_101878A14(uint64_t *a1, std::string *a2)
{
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a1[1];
  }
  if (v3)
  {
    sub_10187909C(v21);
    if (v21[17])
    {
      std::istream::tellg();
      if ((__n & 0x8000000000000000) == 0)
      {
        if (__n >= 0x7FFFFFFF)
        {
          sub_10187BDC4();
          abort_report_np();
          __break(1u);
        }
        else
        {
          std::string::resize(a2, __n, 0);
          uint32_t v2 = &qword_102419000;
          if (qword_1024193D0 == -1)
          {
LABEL_8:
            int v6 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              if (*((char *)a1 + 23) >= 0) {
                std::string::size_type v7 = a1;
              }
              else {
                std::string::size_type v7 = (uint64_t *)*a1;
              }
              *(_DWORD *)uint64_t buf = 136315394;
              int v17 = v7;
              __int16 v18 = 1024;
              int v19 = __n;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gpsd,readFileIntoString,%s,size,%d", buf, 0x12u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v2[122] != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343EA0);
              }
              uint64_t v15 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL gpsd::util::readFileIntoString(const std::string &, std::string &)", "%s\n", v15);
              if (v15 != (char *)buf) {
                free(v15);
              }
            }
            std::istream::seekg();
            int v8 = (void *)std::istream::read();
            BOOL v9 = (*(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0;
            if (!std::filebuf::close()) {
              std::ios_base::clear((std::ios_base *)((char *)v21 + (unint64_t)*(v21[0] - 3)), *(_DWORD *)((char *)&v21[4] + (unint64_t)*(v21[0] - 3)) | 4);
            }
            goto LABEL_34;
          }
        }
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
        goto LABEL_8;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#gpsd,readFileIntoString,tellg failed", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0))
      {
LABEL_33:
        BOOL v9 = 0;
LABEL_34:
        std::filebuf::~filebuf();
        std::istream::~istream();
        std::ios::~ios();
        return v9;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL gpsd::util::readFileIntoString(const std::string &, std::string &)", "%s\n", v12);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      float v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a1 + 23) >= 0) {
          float v11 = a1;
        }
        else {
          float v11 = (uint64_t *)*a1;
        }
        *(_DWORD *)uint64_t buf = 136380675;
        int v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gpsd,readFileIntoString,failed to open %{private}s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL gpsd::util::readFileIntoString(const std::string &, std::string &)", "%s\n", v12);
    }
    if (v12 != (char *)buf) {
      free(v12);
    }
    goto LABEL_33;
  }
  return 0;
}

void sub_101879068(_Unwind_Exception *a1)
{
}

void (__cdecl ***sub_10187909C(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  uint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_101879234(_Unwind_Exception *a1)
{
}

void sub_10187926C(uint64_t a1@<X0>, double *a2@<X1>, std::string *a3@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  if (!sub_101878A14((uint64_t *)a1, &__p)) {
    goto LABEL_5;
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size <= 8)
  {
LABEL_5:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    std::string::size_type v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v8 = a1;
      }
      else {
        uint64_t v8 = *(void *)a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#rof,failed to read file %{public}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_13;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v22 = a1;
    }
    else {
      uint64_t v22 = *(void *)a1;
    }
    int v30 = 136446210;
    unint64_t v31 = v22;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v16);
LABEL_56:
    if (v16 != buf) {
      free(v16);
    }
LABEL_13:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_14;
  }
  unint64_t v28 = 0;
  sub_100134750(buf, "#rof");
  char v9 = sub_1018799D0((unint64_t)&__p, 8uLL, &v28, (uint64_t *)buf);
  char v10 = v9;
  if (SHIBYTE(v39) < 0)
  {
    operator delete(*(void **)buf);
    if (v10) {
      goto LABEL_19;
    }
LABEL_25:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    unint64_t v14 = v13 - 8;
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#rof,failed to compute hash,%{public}zu", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_13;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    int v30 = 134349056;
    unint64_t v31 = v14;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v16);
    goto LABEL_56;
  }
  if ((v9 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_19:
  double v27 = -1.0;
  if (*(char *)(a1 + 23) >= 0) {
    float v11 = (const char *)a1;
  }
  else {
    float v11 = *(const char **)a1;
  }
  if (sub_1004BE590(v11, &v27))
  {
    double v12 = CFAbsoluteTimeGetCurrent() - v27;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v18 = a1;
      }
      else {
        uint64_t v18 = *(void *)a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#gpsd,#rof,could not get file creation time,%{public}s", buf, 0xCu);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    double v12 = -1.0;
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v25 = a1;
      }
      else {
        uint64_t v25 = *(void *)a1;
      }
      int v30 = 136446210;
      unint64_t v31 = v25;
      float v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v26);
      if (v26 != buf) {
        free(v26);
      }
      double v12 = -1.0;
    }
  }
  *a2 = v12;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  __int16 v20 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v21 = *a2;
    *(_DWORD *)uint64_t buf = 134349568;
    *(void *)&uint8_t buf[4] = v28;
    __int16 v37 = 2050;
    double v38 = v21;
    __int16 v39 = 2050;
    double v40 = v21 / 3600.0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#rof,verified,hash,%{public}llx,ageSec,%{public}.1f,ageHours,%{public}.2f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    double v23 = *a2;
    int v30 = 134349568;
    unint64_t v31 = v28;
    __int16 v32 = 2050;
    double v33 = v23;
    __int16 v34 = 2050;
    double v35 = v23 / 3600.0;
    uid_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::string gpsd::util::readRofFileCheckHashAndReturnPayload(const std::string &, double &)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  std::string::basic_string(a3, &__p, 8uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_101879980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018799D0(unint64_t a1, unint64_t a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    if (v7 > a2)
    {
      *(_OWORD *)md = 0u;
      long long v30 = 0u;
      unint64_t v8 = a1;
      goto LABEL_6;
    }
LABEL_19:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0) {
        __int16 v16 = a4;
      }
      else {
        __int16 v16 = (uint64_t *)*a4;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      __int16 v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s,insufficient data in file", buf, 0xCu);
    }
    BOOL v17 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v17)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      if (*((char *)a4 + 23) >= 0) {
        double v27 = a4;
      }
      else {
        double v27 = (uint64_t *)*a4;
      }
      *(_DWORD *)md = 136315138;
      *(void *)&md[4] = v27;
      goto LABEL_59;
    }
    return result;
  }
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7 <= a2) {
    goto LABEL_19;
  }
  *(_OWORD *)md = 0u;
  long long v30 = 0u;
  unint64_t v8 = *(void *)a1;
LABEL_6:
  unint64_t v9 = v7 - a2;
  if (v7 - a2 <= 0x5000)
  {
    if (CC_SHA256((const void *)(v8 + a2), (int)v7 - (int)a2, md))
    {
      if (*(char *)(v6 + 23) < 0) {
        unint64_t v6 = *(void *)v6;
      }
      unint64_t v18 = _byteswap_uint64(*(void *)v6);
      *a3 = v18;
      unint64_t v19 = bswap64(*(unint64_t *)md);
      if (v18 == v19) {
        return 1;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      double v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        if (*((char *)a4 + 23) >= 0) {
          uid_t v24 = a4;
        }
        else {
          uid_t v24 = (uint64_t *)*a4;
        }
        unint64_t v25 = *a3;
        *(_DWORD *)uint64_t buf = 136315650;
        __int16 v32 = v24;
        __int16 v33 = 2050;
        unint64_t v34 = v25;
        __int16 v35 = 2050;
        unint64_t v36 = v19;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "%s,hash mismatch,file prefix,%{public}llx,computed,%{public}llx", buf, 0x20u);
      }
      BOOL v26 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v26) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_59:
        unint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL gpsd::util::fileContentsHasHashMatch(const std::string &, const size_t, uint64_t &, const std::string &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
        return 0;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      __int16 v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0) {
          double v21 = a4;
        }
        else {
          double v21 = (uint64_t *)*a4;
        }
        *(_DWORD *)uint64_t buf = 136315394;
        __int16 v32 = v21;
        __int16 v33 = 2050;
        unint64_t v34 = v9;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s,failed to compute hash,%{public}zu", buf, 0x16u);
      }
      BOOL v22 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v22) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_59;
      }
    }
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
    goto LABEL_59;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  char v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    if (*((char *)a4 + 23) >= 0) {
      float v11 = a4;
    }
    else {
      float v11 = (uint64_t *)*a4;
    }
    unint64_t v12 = *(unsigned __int8 *)(v6 + 23);
    if ((v12 & 0x80u) != 0) {
      unint64_t v12 = *(void *)(v6 + 8);
    }
    *(_DWORD *)uint64_t buf = 136315650;
    __int16 v32 = v11;
    __int16 v33 = 2050;
    unint64_t v34 = v9;
    __int16 v35 = 2050;
    unint64_t v36 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%s,size limit exceeded,%{public}zu,%{public}zu", buf, 0x20u);
  }
  BOOL v13 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    goto LABEL_59;
  }
  return result;
}

double sub_10187A068(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char *)(a1 + 16) && (v4 = sub_101877458(), unint64_t v5 = v4 - *(void *)a1, v4 >= *(void *)a1))
  {
    *a2 = 1;
    return (double)(v5 + *(void *)(a1 + 8)) * 0.000000001;
  }
  else
  {
    *a2 = 0;
    uint64_t v10 = 0;
    double Current = CFAbsoluteTimeGetCurrent();
    double v7 = sub_1004BD8CC((int *)&v10 + 1, &v10, Current);
    LODWORD(v7) = HIDWORD(v10);
    LODWORD(v8) = v10;
    return (double)v8 / 1000.0 + (double)*(unint64_t *)&v7 * 604800.0;
  }
}

double sub_10187A10C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  double v3 = sub_10187A068(a1, (unsigned char *)(a2 + 16));
  unsigned int v4 = vcvtmd_s64_f64(v3 / 604800.0);
  *(_DWORD *)a2 = v4;
  double result = v3 - (double)(604800 * v4);
  *(double *)(a2 + 8) = result;
  return result;
}

double sub_10187A16C(uint64_t a1, double *a2, double result)
{
  if (result > 0.0 && *(unsigned char *)(a1 + 16) != 0)
  {
    double result = (double)((uint64_t)(result * 1000000000.0) - *(void *)a1 + *(void *)(a1 + 8)) * 0.000000001;
    *a2 = result;
  }
  return result;
}

uint64_t sub_10187A1B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)double result = a3;
  *(void *)(result + 8) = a2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void sub_10187A1C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  unint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136446466;
    uint64_t v27 = a2;
    __int16 v28 = 2082;
    uint64_t v29 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#abc,reportIssue,%{public}s,%{public}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    int v22 = 136446466;
    uint64_t v23 = a2;
    __int16 v24 = 2082;
    uint64_t v25 = a3;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (a4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    unint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#abc,requested to collect BB logs", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      LOWORD(v22) = 0;
      BOOL v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    [v10 setObject:&__kCFBooleanTrue forKey:kSymptomDiagnosticActionDiagnosticExtensions];
    uint64_t v20 = kSymptomDiagnosticKeyPayloadDEParameters;
    double v21 = &off_1023978B0;
    float v11 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  }
  else
  {
    float v11 = 0;
    id v10 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10187A878;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_1024890C0 != -1) {
    dispatch_once(&qword_1024890C0, block);
  }
  id v12 = [[(id)qword_1024890B8 signatureWithDomain:@"Location" type:@"GNSS" subType:a2 subtypeContext:a3 detectedProcess:@"locationd" triggerThresholdValues:0];
  if (([(id)qword_1024890B8 snapshotWithSignature:v12 delay:0 events:v11 payload:v10 actions:&stru_102343E80 reply:0.0] & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    BOOL v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#abc,snapshotWithSignature failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343EA0);
      }
      LOWORD(v22) = 0;
      unint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  unint64_t v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#abc,complete", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    LOWORD(v22) = 0;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
}

id sub_10187A878(uint64_t a1)
{
  id result = [objc_alloc((Class)SDRDiagnosticReporter) initWithQueue:*(void *)(a1 + 32)];
  qword_1024890B8 = (uint64_t)result;
  return result;
}

void sub_10187A8B4(id a1, NSDictionary *a2)
{
  if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", kSymptomDiagnosticReplySuccess), "BOOLValue"))
  {
    id v3 = [(NSDictionary *)a2 objectForKeyedSubscript:kSymptomDiagnosticReplySessionID];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    unsigned int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 136380675;
      v10[0] = [v3 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#abc,accepted,%{private}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    [v3 UTF8String];
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)_block_invoke", "%s\n", v5);
    if (v5 == (char *)buf) {
      return;
    }
LABEL_20:
    free(v5);
    return;
  }
  id v6 = [(NSDictionary *)a2 objectForKeyedSubscript:kSymptomDiagnosticReplyReason];
  id v7 = [(NSDictionary *)a2 objectForKeyedSubscript:kSymptomDiagnosticReplyReasonString];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  unint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240450;
    LODWORD(v10[0]) = [v6 intValue];
    WORD2(v10[0]) = 2082;
    *(void *)((char *)v10 + 6) = [v7 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#abc,rejected code,%{public}d,rejected reason,%{public}s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
    [v6 intValue];
    [v7 UTF8String];
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void gpsd::util::triggerDiagnosticReporter(dispatch_queue_t, const char *const, const char *const, BOOL)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      goto LABEL_20;
    }
  }
}

void sub_10187AC64(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_10187AC94(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) > 0x1745D1745D1745DLL) {
      sub_1001D7FD4();
    }
    unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v20 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v20 = v18;
    }
    void v31[4] = result;
    if (v20) {
      double v21 = (char *)sub_10017EBB8(result, v20);
    }
    else {
      double v21 = 0;
    }
    int v22 = &v21[176 * v17];
    v31[0] = v21;
    v31[1] = v22;
    v31[3] = &v21[176 * v20];
    long long v23 = *(_OWORD *)(a2 + 80);
    long long v25 = *(_OWORD *)(a2 + 32);
    long long v24 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v22 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v22 + 5) = v23;
    *((_OWORD *)v22 + 2) = v25;
    *((_OWORD *)v22 + 3) = v24;
    long long v27 = *(_OWORD *)(a2 + 112);
    long long v26 = *(_OWORD *)(a2 + 128);
    long long v28 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v22 + 137) = *(_OWORD *)(a2 + 137);
    *((_OWORD *)v22 + 7) = v27;
    *((_OWORD *)v22 + 8) = v26;
    *((_OWORD *)v22 + 6) = v28;
    long long v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)int v22 = *(_OWORD *)a2;
    *((_OWORD *)v22 + 1) = v29;
    uint64_t v30 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *((void *)v22 + 20) = v30;
    LODWORD(v30) = *(_DWORD *)(a2 + 168);
    *((_WORD *)v22 + 86) = *(_WORD *)(a2 + 172);
    *((_DWORD *)v22 + 42) = v30;
    v31[2] = v22 + 176;
    sub_10187B1B4(a1, v31);
    uint64_t v16 = a1[1];
    uint64_t result = sub_10187B394((uint64_t)v31);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 32);
    long long v10 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v10;
    long long v12 = *(_OWORD *)(a2 + 96);
    long long v13 = *(_OWORD *)(a2 + 112);
    long long v14 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v7 + 137) = *(_OWORD *)(a2 + 137);
    *(_OWORD *)(v7 + 112) = v13;
    *(_OWORD *)(v7 + 128) = v14;
    *(_OWORD *)(v7 + 96) = v12;
    uint64_t v15 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *(void *)(v7 + 160) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 168);
    *(_WORD *)(v7 + 172) = *(_WORD *)(a2 + 172);
    *(_DWORD *)(v7 + 168) = v15;
    uint64_t v16 = v7 + 176;
    a1[1] = v7 + 176;
  }
  a1[1] = v16;
  return result;
}

void sub_10187AE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10187B394((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10187AE50(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)a2 = 0;
    uint64_t v4 = (v3 - 1);
    if (v4 <= 0x3F)
    {
      if (((1 << (v3 - 1)) & 0x808B) != 0)
      {
LABEL_4:
        *(_DWORD *)a2 = v3;
        goto LABEL_5;
      }
      if (v4 == 63)
      {
        int v3 = 32;
        goto LABEL_4;
      }
    }
  }
LABEL_5:
  if ((v2 & 2) == 0) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248AC78 + 8);
  }
  int v6 = *(_DWORD *)(v5 + 44);
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(v5 + 16);
  }
  else if ((v6 & 0x10) != 0)
  {
    unsigned int v7 = *(_DWORD *)(v5 + 28);
  }
  else
  {
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = *(void *)(v5 + 8);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_10248AC70 + 8);
      }
      int v10 = *(_DWORD *)(v9 + 24);
      if (v10)
      {
        int v11 = *(_DWORD *)(v9 + 16);
        if (v11 != (char)v11) {
          return 0;
        }
        *(unsigned char *)(a2 + 6) = v11;
        int v10 = *(_DWORD *)(v9 + 24);
      }
      if ((v10 & 2) != 0)
      {
        uint64_t v12 = *(void *)(v9 + 8);
        if (!v12) {
          uint64_t v12 = *(void *)(qword_10248AC68 + 8);
        }
        unsigned int v13 = *(_DWORD *)(v12 + 8);
        if (v13 > 0xFF) {
          return 0;
        }
        *(unsigned char *)(a2 + 4) = v13;
        int v14 = *(_DWORD *)(v12 + 12);
        *(unsigned char *)(a2 + 5) = 0;
        unsigned int v15 = v14 - 2;
        if (v15 <= 2) {
          *(unsigned char *)(a2 + 5) = v15 + 1;
        }
      }
      return 1;
    }
    if ((v6 & 4) != 0)
    {
      unsigned int v7 = *(_DWORD *)(v5 + 20);
    }
    else if ((v6 & 8) != 0)
    {
      unsigned int v7 = *(_DWORD *)(v5 + 24);
    }
    else
    {
      if ((v6 & 0x40) == 0) {
        return 0;
      }
      unsigned int v7 = *(_DWORD *)(v5 + 36);
    }
  }
  if (v7 > 0xFF) {
    return 0;
  }
  *(unsigned char *)(a2 + 4) = v7;
  return 1;
}

uint64_t sub_10187AF8C(uint64_t result, unsigned char *a2)
{
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 2) != 0)
  {
    a2[1] = *(unsigned char *)(result + 9);
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_3;
  }
  a2[2] = *(unsigned char *)(result + 10);
  if ((v2 & 1) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_9:
    a2[3] = *(unsigned char *)(result + 11);
    return result;
  }
LABEL_8:
  *a2 = *(unsigned char *)(result + 8);
  if ((v2 & 8) != 0) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_10187AFD4(uint64_t result, unsigned char *a2)
{
  int v2 = *(_DWORD *)(result + 24);
  if ((v2 & 0x200) != 0)
  {
    a2[9] = *(unsigned char *)(result + 17);
    if ((v2 & 0x10) == 0)
    {
LABEL_3:
      if ((v2 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  a2[4] = *(unsigned char *)(result + 12);
  if ((v2 & 8) == 0)
  {
LABEL_4:
    if ((v2 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  a2[3] = *(unsigned char *)(result + 11);
  if ((v2 & 0x100) == 0)
  {
LABEL_5:
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  a2[8] = *(unsigned char *)(result + 16);
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    if ((v2 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  a2[7] = *(unsigned char *)(result + 15);
  if ((v2 & 0x40) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  a2[6] = *(unsigned char *)(result + 14);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  a2[5] = *(unsigned char *)(result + 13);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  a2[1] = *(unsigned char *)(result + 9);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_21:
    a2[2] = *(unsigned char *)(result + 10);
    return result;
  }
LABEL_20:
  *a2 = *(unsigned char *)(result + 8);
  if ((v2 & 4) != 0) {
    goto LABEL_21;
  }
  return result;
}

void *sub_10187B07C(void *result, char *__src, char *a3, unint64_t a4)
{
  int v6 = __src;
  unsigned int v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (unsigned char *)*result;
  if (v8 - *result >= a4)
  {
    int v14 = (unsigned char *)result[1];
    if (v14 - v9 >= a4)
    {
      size_t v18 = a3 - __src;
      if (a3 != __src) {
        uint64_t result = memmove((void *)*result, __src, v18);
      }
      uint64_t v12 = &v9[v18];
    }
    else
    {
      unsigned int v15 = &__src[v14 - v9];
      if (v14 != v9)
      {
        uint64_t result = memmove((void *)*result, __src, v14 - v9);
        uint64_t v9 = (unsigned char *)v7[1];
      }
      uint64_t v12 = v9;
      if (v15 != a3)
      {
        uint64_t v12 = v9;
        uint64_t v16 = v9;
        do
        {
          char v17 = *v15++;
          *v16++ = v17;
          ++v12;
        }
        while (v15 != a3);
      }
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_1001D7FD4();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_100169918(v7, v11);
    uint64_t v12 = (unsigned char *)v7[1];
    while (v6 != a3)
    {
      char v13 = *v6++;
      *v12++ = v13;
    }
  }
  v7[1] = v12;
  return result;
}

uint64_t sub_10187B1B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10187B22C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10187B22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v21 = a6;
  *((void *)&v21 + 1) = a7;
  long long v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  void v18[2] = &v21;
  if (a3 == a5)
  {
    uint64_t v16 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 160);
      *(_OWORD *)(v7 - 176) = *(_OWORD *)(a3 - 176);
      *(_OWORD *)(v7 - 160) = v8;
      long long v9 = *(_OWORD *)(a3 - 144);
      long long v10 = *(_OWORD *)(a3 - 128);
      long long v11 = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 112) = *(_OWORD *)(a3 - 112);
      *(_OWORD *)(v7 - 96) = v11;
      *(_OWORD *)(v7 - 144) = v9;
      *(_OWORD *)(v7 - 128) = v10;
      long long v12 = *(_OWORD *)(a3 - 80);
      long long v13 = *(_OWORD *)(a3 - 64);
      long long v14 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 39) = *(_OWORD *)(a3 - 39);
      *(_OWORD *)(v7 - 64) = v13;
      *(_OWORD *)(v7 - 48) = v14;
      *(_OWORD *)(v7 - 80) = v12;
      uint64_t v15 = *(void *)(a3 - 16);
      *(void *)(a3 - 16) = 0;
      *(void *)(v7 - 16) = v15;
      LODWORD(v15) = *(_DWORD *)(a3 - 8);
      *(_WORD *)(v7 - 4) = *(_WORD *)(a3 - 4);
      *(_DWORD *)(v7 - 8) = v15;
      uint64_t v7 = *((void *)&v21 + 1) - 176;
      *((void *)&v21 + 1) -= 176;
      a3 -= 176;
    }
    while (a3 != a5);
    uint64_t v16 = v21;
  }
  char v19 = 1;
  sub_10187B304((uint64_t)v18);
  return v16;
}

uint64_t sub_10187B304(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10187B33C(a1);
  }
  return a1;
}

void sub_10187B33C(uint64_t a1)
{
  char v1 = *(void **)(*(void *)(a1 + 16) + 8);
  int v2 = *(void **)(*(void *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    int v3 = v1 + 20;
    do
    {
      uint64_t v4 = (void *)*v3;
      void *v3 = 0;
      if (v4) {
        sub_100E93F5C((uint64_t)v3, v4);
      }
      uint64_t v5 = v3 + 2;
      v3 += 22;
    }
    while (v5 != v2);
  }
}

uint64_t sub_10187B394(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10187B3CC(uint64_t a1, uint64_t a2)
{
  for (uint64_t result = *(void *)(a1 + 16); result != a2; uint64_t result = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = result - 176;
    uint64_t v7 = *(void **)(result - 16);
    uint64_t v5 = (void *)(result - 16);
    uint64_t v6 = v7;
    void *v5 = 0;
    if (v7) {
      sub_100E93F5C((uint64_t)v5, v6);
    }
  }
  return result;
}

uint64_t sub_10187B420(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  void v20[4] = a1 + 2;
  long long v10 = (char *)sub_10014E7AC(v7, v9);
  long long v11 = &v10[144 * v4];
  v20[0] = v10;
  v20[1] = v11;
  unsigned char v20[3] = &v10[144 * v12];
  char v13 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  v11[16] = v13;
  *((_OWORD *)v11 + 2) = 0u;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v14 = *(void *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *((void *)v11 + 6) = v14;
  long long v15 = *(_OWORD *)(a2 + 56);
  long long v16 = *(_OWORD *)(a2 + 72);
  long long v17 = *(_OWORD *)(a2 + 88);
  *((_WORD *)v11 + 52) = *(_WORD *)(a2 + 104);
  *(_OWORD *)(v11 + 88) = v17;
  *(_OWORD *)(v11 + 72) = v16;
  *(_OWORD *)(v11 + 56) = v15;
  *((void *)v11 + 15) = 0;
  *((void *)v11 + 16) = 0;
  *((void *)v11 + 14) = 0;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  v11[136] = *(unsigned char *)(a2 + 136);
  v20[2] = v11 + 144;
  sub_10187B5A8(a1, v20);
  uint64_t v18 = a1[1];
  sub_10187B7BC(v20);
  return v18;
}

void sub_10187B594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10187B7BC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10187B5A8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10187B620((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10187B620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 144);
      *(unsigned char *)(v7 - 128) = *(unsigned char *)(a3 - 128);
      *(_OWORD *)(v7 - 144) = v8;
      *(void *)(v7 - 120) = 0;
      *(_OWORD *)(v7 - 112) = 0uLL;
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      *(void *)(v7 - 104) = *(void *)(a3 - 104);
      *(_OWORD *)(a3 - 120) = 0uLL;
      uint64_t v9 = *(void *)(a3 - 96);
      *(_OWORD *)(a3 - 104) = 0uLL;
      *(void *)(v7 - 96) = v9;
      long long v10 = *(_OWORD *)(a3 - 88);
      long long v11 = *(_OWORD *)(a3 - 72);
      long long v12 = *(_OWORD *)(a3 - 56);
      *(_WORD *)(v7 - 40) = *(_WORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v12;
      *(_OWORD *)(v7 - 72) = v11;
      *(_OWORD *)(v7 - 88) = v10;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(unsigned char *)(v7 - 8) = *(unsigned char *)(a3 - 8);
      uint64_t v7 = *((void *)&v18 + 1) - 144;
      *((void *)&v18 + 1) -= 144;
      a3 -= 144;
    }
    while (a3 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  sub_10187B730((uint64_t)v15);
  return v13;
}

uint64_t sub_10187B730(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10187B768((uint64_t *)a1);
  }
  return a1;
}

void sub_10187B768(uint64_t *a1)
{
  char v1 = *(void **)(a1[2] + 8);
  int v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100E93E2C(v3, v1);
      v1 += 18;
    }
    while (v1 != v2);
  }
}

void **sub_10187B7BC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10187B7F0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 144;
    sub_100E93E2C(v4, (void *)(i - 144));
  }
}

uint64_t *sub_10187B838(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *long long v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_10084F514((uint64_t)v24, 0);
  return i;
}

void sub_10187BA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10084F514((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_10187BAAC(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x30uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 11) = 0;
  *(void *)((char *)v11 + 28) = 0;
  *(void *)((char *)v11 + 36) = 0;
  *(void *)((char *)v11 + 20) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    *size_t v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10187BCC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10187BCDC(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t v5 = sub_10187BD60((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *a3;
    sub_1000EDF90(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *sub_10187BD60(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    unsigned int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        unint64_t v8 = v4;
        int v9 = *((_DWORD *)v4 + 7);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        unint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unsigned int v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      unint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  unint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void sub_10187BDC4()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343EA0);
  }
  int v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#gpsd,readFileIntoString,too many bytes\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
  }
  char v1 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#gpsd,readFileIntoString,too many bytes", "{\"msg%{public}.0s\":\"#gpsd,readFileIntoString,too many bytes\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343EA0);
    }
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#gpsd,readFileIntoString,too many bytes\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_10187BF8C(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 80) = -1;
  *(_WORD *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 90) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 106) = 0;
  *(_DWORD *)(a1 + 152) = -1;
  *(_OWORD *)(a1 + 136) = 0u;
  sub_101171D90(a1 + 160);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0xFFFF;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 236) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 252) = _Q0;
  *(_OWORD *)(a1 + 268) = _Q0;
  *(_OWORD *)(a1 + 284) = _Q0;
  *(_DWORD *)(a1 + 300) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 332) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 340) = 0x7FFFFFFF;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 372) = 0xFFFF;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 400) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 416) = _Q0;
  *(_OWORD *)(a1 + 432) = _Q0;
  *(void *)(a1 + 448) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 456) = 0;
  *(void *)(a1 + 460) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 484) = 0;
  *(void *)(a1 + 468) = 0;
  *(void *)(a1 + 476) = 0;
  *(void *)(a1 + 488) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(void *)(a1 + 508) = 0;
  *(void *)(a1 + 516) = 0;
  *(void *)(a1 + 500) = 0;
  *(unsigned char *)(a1 + 524) = 0;
  *(void *)(a1 + 652) = 0x500000000;
  *(_OWORD *)(a1 + 635) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_WORD *)(a1 + 660) = 0;
  *(_DWORD *)(a1 + 664) = 5;
  *(unsigned char *)(a1 + 668) = 1;
  *(void *)(a1 + 672) = 0x4122750000000000;
  *(_DWORD *)(a1 + 680) = 50;
  *(void *)(a1 + 688) = 0x409C200000000000;
  *(_DWORD *)(a1 + 696) = 60;
  *(void *)(a1 + 704) = 0x403E000000000000;
  *(_DWORD *)(a1 + 712) = 8;
  sub_10187C1E4(a1);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 80) = -1;
  *(_WORD *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 90) = 0;
  operator new();
}

void sub_10187C18C(_Unwind_Exception *a1)
{
  sub_1003BE294(v1 + 75);
  sub_1003BE294(v1 + 69);
  uint64_t v4 = v1[68];
  v1[68] = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[16] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_10187C1E4(uint64_t a1)
{
  *(void *)(a1 + 376) = 0x408F380000000000;
  *(void *)(a1 + 384) = 0x408F380000000000;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)(a1 + 512);
  long long v2 = *(_OWORD *)(a1 + 468);
  long long v3 = *(_OWORD *)(a1 + 500);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 484);
  *(_OWORD *)(a1 + 344) = v3;
  long long v4 = *(_OWORD *)(a1 + 420);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 404);
  long long v5 = *(_OWORD *)(a1 + 436);
  long long v6 = *(_OWORD *)(a1 + 452);
  *(_OWORD *)(a1 + 264) = v4;
  *(_OWORD *)(a1 + 280) = v5;
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_WORD *)(a1 + 96) = 0;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 106) = 0;
  *(_OWORD *)(a1 + 296) = v6;
  *(_OWORD *)(a1 + 312) = v2;
  long long v7 = *(_OWORD *)(a1 + 388);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 372);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = v7;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 152) = -1;
  unint64_t v8 = *(void ***)(a1 + 560);
  unint64_t v9 = *(void *)(a1 + 568) - (void)v8;
  *(void *)(a1 + 592) = 0;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v8);
      unint64_t v8 = (void **)(*(void *)(a1 + 560) + 8);
      *(void *)(a1 + 560) = v8;
      unint64_t v9 = *(void *)(a1 + 568) - (void)v8;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v10 = 51;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v10 = 102;
  }
  *(void *)(a1 + 584) = v10;
LABEL_8:
  long long v11 = *(void ***)(a1 + 608);
  uint64_t v12 = *(void *)(a1 + 616);
  *(void *)(a1 + 640) = 0;
  unint64_t v13 = v12 - (void)v11;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      long long v11 = (void **)(*(void *)(a1 + 608) + 8);
      *(void *)(a1 + 608) = v11;
      unint64_t v13 = *(void *)(a1 + 616) - (void)v11;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    uint64_t v14 = 51;
  }
  else
  {
    if (v13 >> 3 != 2) {
      return;
    }
    uint64_t v14 = 102;
  }
  *(void *)(a1 + 632) = v14;
}

BOOL sub_10187C33C(uint64_t a1, double *a2)
{
  double v3 = a2[8];
  double v4 = a2[32];
  double v5 = fabs(v3);
  double v6 = vabdd_f64(v3, v4);
  BOOL v7 = (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v5 <= 2.22044605e-16;
  double v8 = fabs(v4);
  BOOL v12 = !v7
     && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
     && v8 > 2.22044605e-16
     && v6 <= 1.5
     && v8 > 2.22044605e-16;
  if (v12 && fabs(a2[33]) > 2.22044605e-16) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  unint64_t v13 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = *((void *)a2 + 32);
    uint64_t v15 = *((void *)a2 + 33);
    *(_DWORD *)uint64_t buf = 134349313;
    uint64_t v19 = v14;
    __int16 v20 = 2049;
    uint64_t v21 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,no recent device pressure available,fTimeOfLastCMAltitudeData,%{public}.3lf,pressure,%{private}.3lf", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::isDevicePressureValid(const CLBaroAltEstimatorInput &) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10187C584(unsigned char *a1, uint64_t a2, uint64_t a3, void *a4, double *a5, int a6, uint64_t a7)
{
  unint64_t v13 = (double *)(a2 + 64);
  double v14 = *(double *)(a2 + 64);
  double v15 = fabs(v14);
  if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v15 <= 2.22044605e-16)
  {
    double v17 = 315360000.0;
    double v18 = 315360000.0;
  }
  else
  {
    double v19 = *(double *)(a2 + 80);
    double v20 = vabdd_f64(v14, v19);
    BOOL v21 = fabs(v19) > 2.22044605e-16 && (*(void *)(a2 + 80) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    double v18 = 315360000.0;
    if (v21) {
      double v17 = v20;
    }
    else {
      double v17 = 315360000.0;
    }
    double v22 = fabs(*a5);
    if ((*(void *)a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v22 > 2.22044605e-16) {
      double v18 = vabdd_f64(v14, *a5);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  long long v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void *)(a2 + 264);
    uint64_t v26 = *(void *)(a2 + 120);
    uint64_t v27 = *(void *)(a2 + 128);
    double v28 = *(double *)(a2 + 64);
    uint64_t v29 = *(void *)(a2 + 72);
    uint64_t v30 = *(void *)(a2 + 96);
    uint64_t v31 = *(void *)(a7 + 4);
    uint64_t v32 = *(void *)(a7 + 12);
    *(_DWORD *)uint64_t buf = 134351105;
    double v57 = v28;
    __int16 v58 = 2049;
    double v59 = v17;
    __int16 v60 = 2050;
    uint64_t v61 = v25;
    __int16 v62 = 2050;
    uint64_t v63 = v26;
    __int16 v64 = 2050;
    *(void *)uint64_t v65 = v27;
    *(_WORD *)&v65[8] = 2050;
    *(void *)&unsigned char v65[10] = v29;
    __int16 v66 = 2050;
    uint64_t v67 = v30;
    __int16 v68 = 2049;
    uint64_t v69 = v31;
    __int16 v70 = 2049;
    uint64_t v71 = v32;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BaroAlt,check to compute bias using reference pressure,time,%{public}lf,timeSinceLastReferencePressureQuery,%{private}lf,measuredPressure,%{public}lf,calibrationSourceAlt,%{public}lf,calibrationSourceAltUnc,%{public}lf,cfAbsTime,%{public}lf,referencePressure,%{public}lf,lat,%{private}.8lf,lon,%{private}.8lf,", buf, 0x5Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, CFTimeInterval &, const int, const CLDaemonLocation &)", "%s\n", v53);
    if (v53 != (char *)buf) {
      free(v53);
    }
  }
  uint64_t result = 0;
  if (v17 > 0.0 && v17 < 900.0)
  {
    uint64_t result = 0;
    double v34 = *(double *)(a2 + 128);
    if (v34 > 0.0 && v18 < 10.0)
    {
      long double v35 = exp(*(double *)(a2 + 120) / -8442.795);
      double v36 = *(double *)(a2 + 264) - *(double *)(a2 + 96) * v35;
      *(double *)(a3 + 8) = v36;
      double v37 = v35 * *(double *)(a2 + 104) * 0.083324376;
      double v38 = *(double *)(a2 + 72);
      if ((*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v38) > 2.22044605e-16)
      {
        double v39 = *(double *)(a2 + 88);
        if ((*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v39) > 2.22044605e-16)
        {
          double v40 = vabdd_f64(v38, v39);
          if (v40 > 300.0)
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            int v41 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              double v42 = *(double *)(a2 + 64);
              uint64_t v43 = *(void *)(a2 + 72);
              uint64_t v44 = *(void *)(a2 + 88);
              *(_DWORD *)uint64_t buf = 134350081;
              double v57 = v42;
              __int16 v58 = 2049;
              double v59 = v37;
              __int16 v60 = 2049;
              uint64_t v61 = v43;
              __int16 v62 = 2049;
              uint64_t v63 = v44;
              __int16 v64 = 2049;
              *(double *)uint64_t v65 = v40;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "BaroAlt,uncertainty increase from creation time of reference pressure tile,time,%{public}.3lf,pressureUncAtCurrAlt_m,%{private}.3lf,cfAbsTime_s,%{private}.3lf,refPressureCreation_time_s,%{private}.3lf,timeChangeAfterTileCreated_s,%{private}.3lf", buf, 0x34u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_102343F08);
              }
              int64x2_t v55 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, CFTimeInterval &, const int, const CLDaemonLocation &)", "%s\n", v55);
              if (v55 != (char *)buf) {
                free(v55);
              }
            }
            double v37 = v37 + v40 * 0.000833333333;
            double v34 = *(double *)(a2 + 128);
          }
        }
      }
      double v45 = sqrt(v37 * v37 + v34 * v34);
      *(double *)(a3 + 16) = v45;
      if (a1[668])
      {
        double v46 = sub_1000A4CE8((uint64_t)a1, v13);
        sub_10187E640((uint64_t)a1, v36, v45, v46);
      }
      sub_10187FBD0((uint64_t)a1, a2, a3, a4, a6, a7);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v47 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        double v48 = *v13;
        double v49 = *(double *)a3;
        uint64_t v50 = *(void *)(a3 + 8);
        uint64_t v51 = *(void *)(a3 + 16);
        int v52 = a1[97];
        *(_DWORD *)uint64_t buf = 134350337;
        double v57 = v48;
        __int16 v58 = 2050;
        double v59 = v49;
        __int16 v60 = 2050;
        uint64_t v61 = v50;
        __int16 v62 = 2050;
        uint64_t v63 = v51;
        __int16 v64 = 1025;
        *(_DWORD *)uint64_t v65 = v52;
        *(_WORD *)&v65[4] = 2050;
        *(double *)&v65[6] = v36;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "BaroAlt,compute bias using ReferencePressure,time,%{public}lf,fTimeOfLastBaroBiasUsingReferencePressure,%{public}lf,fBaroBiasUsingReferencePressure,%{public}.3lf,fReferencePressureCompensatedCalibrationUnc,%{public}lf,filteredBaroBias,%{private}d,singleEpochBiasUsingRefPressure,%{public}.3lf", buf, 0x3Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        __int16 v54 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, CFTimeInterval &, const int, const CLDaemonLocation &)", "%s\n", v54);
        if (v54 != (char *)buf) {
          free(v54);
        }
      }
      uint64_t result = 1;
      a1[96] = 1;
      *(void *)a3 = *(void *)(a2 + 72);
    }
  }
  return result;
}

uint64_t sub_10187CD78(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  long long v85 = 0u;
  long long v86 = 0u;
  long long v84 = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  uint64_t v6 = a4[1];
  if (a4[2] != v6)
  {
    unint64_t v7 = a4[4];
    uint64_t v8 = *(void *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
    unint64_t v9 = *(void *)(v6 + 8 * ((a4[5] + v7) / 0x66)) + 40 * ((a4[5] + v7) % 0x66);
    if (v8 != v9)
    {
      BOOL v12 = (void *)(v6 + 8 * (v7 / 0x66));
      double v13 = a5 * 0.0202;
      while (1)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v14 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = *(void *)(a2 + 64);
          uint64_t v16 = a4[5];
          uint64_t v17 = *(void *)(v8 + 8);
          uint64_t v18 = *(void *)(v8 + 16);
          uint64_t v19 = *(void *)(v8 + 24);
          double v20 = *(double *)(v8 + 32);
          uint64_t v21 = *(void *)(a3 + 8);
          *(_DWORD *)uint64_t buf = 134350593;
          uint64_t v106 = v15;
          __int16 v107 = 2049;
          uint64_t v108 = v16;
          __int16 v109 = 2049;
          uint64_t v110 = v17;
          __int16 v111 = 2049;
          uint64_t v112 = v18;
          __int16 v113 = 2049;
          uint64_t v114 = v19;
          __int16 v115 = 2049;
          double v116 = v20;
          __int16 v117 = 2049;
          uint64_t v118 = v21;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,checkBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf", buf, 0x48u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          uint64_t v53 = *(void *)(a2 + 64);
          uint64_t v54 = a4[5];
          uint64_t v55 = *(void *)(v8 + 8);
          uint64_t v56 = *(void *)(v8 + 16);
          uint64_t v57 = *(void *)(v8 + 24);
          double v58 = *(double *)(v8 + 32);
          uint64_t v59 = *(void *)(a3 + 8);
          int v87 = 134350593;
          uint64_t v88 = v53;
          __int16 v89 = 2049;
          uint64_t v90 = v54;
          __int16 v91 = 2049;
          uint64_t v92 = v55;
          __int16 v93 = 2049;
          uint64_t v94 = v56;
          __int16 v95 = 2049;
          uint64_t v96 = v57;
          __int16 v97 = 2049;
          double v98 = v58;
          __int16 v99 = 2049;
          uint64_t v100 = v59;
          __int16 v60 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v60);
          if (v60 != (char *)buf) {
            free(v60);
          }
        }
        double v22 = *(double *)(v8 + 8);
        if (fabs(v22) > 1000.0) {
          goto LABEL_51;
        }
        double v23 = *(double *)(a2 + 72);
        double v24 = 0.0;
        if ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v23) > 2.22044605e-16)
        {
          double v25 = *(double *)v8;
          if ((*(void *)v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v25) > 2.22044605e-16)
          {
            double v24 = vabdd_f64(v23, v25);
            if (v24 > 3628800.0) {
              *(long double *)(v8 + 16) = hypot(*(long double *)(v8 + 16), (v24 + -3628800.0) * 0.000000826719577);
            }
          }
        }
        if (vabdd_f64(v22, *(double *)(a3 + 8)) >= 27.963 || *(double *)(v8 + 24) <= 0.5) {
          break;
        }
        *(unsigned char *)(a1 + 112) = 1;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v26 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v27 = *(void *)(a2 + 64);
          uint64_t v28 = *(void *)(v8 + 8);
          uint64_t v29 = *(void *)(v8 + 16);
          uint64_t v30 = *(void *)(v8 + 24);
          double v31 = *(double *)(v8 + 32);
          uint64_t v32 = *(void *)(a3 + 8);
          *(_DWORD *)uint64_t buf = 134351105;
          uint64_t v106 = v27;
          __int16 v107 = 2049;
          uint64_t v108 = *((void *)&v86 + 1);
          __int16 v109 = 2049;
          uint64_t v110 = v28;
          __int16 v111 = 2049;
          uint64_t v112 = v29;
          __int16 v113 = 2049;
          uint64_t v114 = v30;
          __int16 v115 = 2049;
          double v116 = v31;
          __int16 v117 = 2049;
          uint64_t v118 = v32;
          __int16 v119 = 2049;
          double v120 = a5;
          __int16 v121 = 2049;
          double v122 = v24;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,passBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf,timeToLastBiasComputation_s,%{private}.3lf", buf, 0x5Cu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_49;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          goto LABEL_70;
        }
LABEL_60:
        uint64_t v61 = *(void *)(a2 + 64);
        uint64_t v62 = *(void *)(v8 + 8);
        uint64_t v63 = *(void *)(v8 + 16);
        uint64_t v64 = *(void *)(v8 + 24);
        double v65 = *(double *)(v8 + 32);
        uint64_t v66 = *(void *)(a3 + 8);
        int v87 = 134351105;
        uint64_t v88 = v61;
        __int16 v89 = 2049;
        uint64_t v90 = *((void *)&v86 + 1);
        __int16 v91 = 2049;
        uint64_t v92 = v62;
        __int16 v93 = 2049;
        uint64_t v94 = v63;
        __int16 v95 = 2049;
        uint64_t v96 = v64;
        __int16 v97 = 2049;
        double v98 = v65;
        __int16 v99 = 2049;
        uint64_t v100 = v66;
        __int16 v101 = 2049;
        double v102 = a5;
        __int16 v103 = 2049;
        double v104 = v24;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v67);
        if (v67 != (char *)buf) {
          free(v67);
        }
LABEL_49:
        if (*(double *)(v8 + 24) > 0.01) {
          sub_10187DA04(&v84, v8);
        }
LABEL_51:
        v8 += 40;
        if (v8 - *v12 == 4080)
        {
          uint64_t v52 = v12[1];
          ++v12;
          uint64_t v8 = v52;
        }
        if (v8 == v9) {
          goto LABEL_72;
        }
      }
      if (v13 > 1.0)
      {
        double v33 = *(double *)(v8 + 24) / v13;
        if (v33 > 1.0) {
          double v33 = 1.0;
        }
        *(double *)(v8 + 24) = v33;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v34 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v35 = *(void *)(a2 + 64);
          uint64_t v36 = *(void *)(v8 + 8);
          uint64_t v37 = *(void *)(v8 + 16);
          uint64_t v38 = *(void *)(v8 + 24);
          *(_DWORD *)uint64_t buf = 134350337;
          uint64_t v106 = v35;
          __int16 v107 = 2049;
          uint64_t v108 = *((void *)&v86 + 1);
          __int16 v109 = 2049;
          uint64_t v110 = v36;
          __int16 v111 = 2049;
          uint64_t v112 = v37;
          __int16 v113 = 2049;
          uint64_t v114 = v38;
          __int16 v115 = 2049;
          double v116 = a5;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,failBBH,modeProbChangeByDistance,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf", buf, 0x3Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          uint64_t v68 = *(void *)(a2 + 64);
          uint64_t v69 = *(void *)(v8 + 8);
          uint64_t v70 = *(void *)(v8 + 16);
          uint64_t v71 = *(void *)(v8 + 24);
          int v87 = 134350337;
          uint64_t v88 = v68;
          __int16 v89 = 2049;
          uint64_t v90 = *((void *)&v86 + 1);
          __int16 v91 = 2049;
          uint64_t v92 = v69;
          __int16 v93 = 2049;
          uint64_t v94 = v70;
          __int16 v95 = 2049;
          uint64_t v96 = v71;
          __int16 v97 = 2049;
          double v98 = a5;
          __int16 v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v72);
          if (v72 != (char *)buf) {
            free(v72);
          }
        }
      }
      if (a5 >= 0.0 || v24 <= 600.0)
      {
        if (v24 * 0.0000115740741 > 1.0)
        {
          double v39 = *(double *)(v8 + 24) / (v24 * 0.0000115740741);
          if (v39 > 1.0) {
            double v39 = 1.0;
          }
          *(double *)(v8 + 24) = v39;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          double v40 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v41 = *(void *)(a2 + 64);
            uint64_t v42 = *(void *)(v8 + 8);
            uint64_t v43 = *(void *)(v8 + 16);
            uint64_t v44 = *(void *)(v8 + 24);
            *(_DWORD *)uint64_t buf = 134350337;
            uint64_t v106 = v41;
            __int16 v107 = 2049;
            uint64_t v108 = *((void *)&v86 + 1);
            __int16 v109 = 2049;
            uint64_t v110 = v42;
            __int16 v111 = 2049;
            uint64_t v112 = v43;
            __int16 v113 = 2049;
            uint64_t v114 = v44;
            __int16 v115 = 2049;
            double v116 = v24;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,failBBH,modeProbChangeByTime,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,timeToLastBiasComputation_s,%{private}.3lf", buf, 0x3Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            uint64_t v73 = *(void *)(a2 + 64);
            uint64_t v74 = *(void *)(v8 + 8);
            uint64_t v75 = *(void *)(v8 + 16);
            uint64_t v76 = *(void *)(v8 + 24);
            int v87 = 134350337;
            uint64_t v88 = v73;
            __int16 v89 = 2049;
            uint64_t v90 = *((void *)&v86 + 1);
            __int16 v91 = 2049;
            uint64_t v92 = v74;
            __int16 v93 = 2049;
            uint64_t v94 = v75;
            __int16 v95 = 2049;
            uint64_t v96 = v76;
            __int16 v97 = 2049;
            double v98 = v24;
            unint64_t v77 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::propagateBaroBiasProbAndUncToCurrent(const CLBaroAltEstimatorInput &, const CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const double)", "%s\n", v77);
            if (v77 != (char *)buf) {
              free(v77);
            }
          }
        }
      }
      else
      {
        *(double *)(v8 + 24) = *(double *)(v8 + 24) / (v24 / 600.0);
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      double v45 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v46 = *(void *)(a2 + 64);
        uint64_t v47 = *(void *)(v8 + 8);
        uint64_t v48 = *(void *)(v8 + 16);
        uint64_t v49 = *(void *)(v8 + 24);
        double v50 = *(double *)(v8 + 32);
        uint64_t v51 = *(void *)(a3 + 8);
        *(_DWORD *)uint64_t buf = 134351105;
        uint64_t v106 = v46;
        __int16 v107 = 2049;
        uint64_t v108 = *((void *)&v86 + 1);
        __int16 v109 = 2049;
        uint64_t v110 = v47;
        __int16 v111 = 2049;
        uint64_t v112 = v48;
        __int16 v113 = 2049;
        uint64_t v114 = v49;
        __int16 v115 = 2049;
        double v116 = v50;
        __int16 v117 = 2049;
        uint64_t v118 = v51;
        __int16 v119 = 2049;
        double v120 = a5;
        __int16 v121 = 2049;
        double v122 = v24;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,failBBH,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf,rawX,%{private}.4lf,distToLastBiasComputationLocation_m,%{private}.3lf,timeToLastBiasComputation_s,%{private}.3lf", buf, 0x5Cu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_49;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_60;
      }
LABEL_70:
      dispatch_once(&qword_102419380, &stru_102343F08);
      goto LABEL_60;
    }
  }
LABEL_72:
  sub_101885378((uint64_t)a4, (uint64_t)&v84);
  int v78 = (void **)*((void *)&v84 + 1);
  *((void *)&v86 + 1) = 0;
  unint64_t v79 = v85 - *((void *)&v84 + 1);
  if ((void)v85 - *((void *)&v84 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v78);
      int v78 = (void **)(*((void *)&v84 + 1) + 8);
      *((void *)&v84 + 1) = v78;
      unint64_t v79 = v85 - (void)v78;
    }
    while ((void)v85 - (void)v78 > 0x10uLL);
  }
  if (v79 >> 3 == 1)
  {
    uint64_t v80 = 51;
    goto LABEL_78;
  }
  if (v79 >> 3 == 2)
  {
    uint64_t v80 = 102;
LABEL_78:
    *(void *)&long long v86 = v80;
  }
  *(unsigned char *)(a1 + 113) = 1;
  return sub_1003BE294(&v84);
}

void sub_10187D9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

__n128 sub_10187DA04(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101885060(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_10187DABC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[5];
  if (v3)
  {
    uint64_t v49 = off_1022B2000;
    int v50 = v3;
    memset(v51, 0, sizeof(v51));
    v53[0] = 0;
    v53[1] = 0;
    uint64_t v52 = v53;
    sub_10041F400(&v49);
    uint64_t v6 = a2[1];
    if (a2[2] != v6)
    {
      unint64_t v7 = a2[4];
      unint64_t v8 = (void *)(v6 + 8 * (v7 / 0x66));
      unint64_t v9 = *v8 + 40 * (v7 % 0x66);
      unint64_t v10 = *(void *)(v6 + 8 * ((a2[5] + v7) / 0x66)) + 40 * ((a2[5] + v7) % 0x66);
      while (v9 != v10)
      {
        sub_10007EEB4((uint64_t)&v49, (double *)(v9 + 8));
        v9 += 40;
        if (v9 - *v8 == 4080)
        {
          unint64_t v11 = v8[1];
          ++v8;
          unint64_t v9 = v11;
        }
      }
    }
    uint64_t v48 = 0x7FEFFFFFFFFFFFFFLL;
    if (sub_10007EDE0(&v49, 2, &v48) && (unint64_t v12 = a2[5]) != 0)
    {
      uint64_t v13 = a2[1];
      if (a2[2] == v13)
      {
        double v26 = (double)v12;
        double v29 = 0.0;
        double v30 = 0.0 / (double)v12;
      }
      else
      {
        unint64_t v14 = a2[4];
        uint64_t v15 = (unint64_t *)(v13 + 8 * (v14 / 0x66));
        unint64_t v16 = *v15;
        unint64_t v17 = v14 % 0x66;
        unint64_t v18 = *v15 + 40 * (v14 % 0x66);
        unint64_t v19 = v14 + v12;
        unint64_t v20 = (v14 + v12) / 0x66;
        unint64_t v21 = *(void *)(v13 + 8 * (v19 / 0x66)) + 40 * (v19 % 0x66);
        if (v18 == v21)
        {
          double v26 = (double)v12;
          double v22 = 0.0;
        }
        else
        {
          double v22 = 0.0;
          double v23 = v15;
          do
          {
            unint64_t v24 = v18 + 40;
            if (v18 + 40 - v16 == 4080)
            {
              unint64_t v25 = v23[1];
              ++v23;
              unint64_t v16 = v25;
              unint64_t v24 = v25;
            }
            double v22 = v22 + *(double *)(v18 + 16);
            unint64_t v18 = v24;
          }
          while (v24 != v21);
          double v26 = (double)v12;
        }
        double v30 = v22 / v26;
        double v40 = (double *)*v15;
        uint64_t v41 = (double *)(*v15 + 40 * v17);
        unint64_t v42 = *(void *)(v13 + 8 * v20) + 40 * (v19 % 0x66);
        double v29 = 0.0;
        while (v41 != (double *)v42)
        {
          double v43 = *v41;
          v41 += 5;
          double v44 = v43;
          if ((char *)v41 - (char *)v40 == 4080)
          {
            double v45 = (double *)v15[1];
            ++v15;
            double v40 = v45;
            uint64_t v41 = v45;
          }
          double v29 = v29 + v44;
        }
      }
      double v31 = v29 / v26;
      uint64_t v32 = v48;
      *(double *)a3 = v31;
      *(void *)(a3 + 8) = v32;
      *(double *)(a3 + 16) = v30;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a3 + 24) = _Q0;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134349568;
        uint64_t v61 = v48;
        __int16 v62 = 2050;
        double v63 = v30;
        __int16 v64 = 2050;
        double v65 = v31;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,median found,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        int v54 = 134349568;
        uint64_t v55 = v48;
        __int16 v56 = 2050;
        double v57 = v30;
        __int16 v58 = 2050;
        double v59 = v31;
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getMedianBiasFromQueue(const std::deque<BaroBiasEstimate> &, BaroBiasEstimate &)", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
      uint64_t v27 = 1;
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v49 = off_1022B2000;
    sub_1000F5BB0((uint64_t)&v52, v53[0]);
    sub_10041F48C(v51);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v28 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,bias history empty, median unavailable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      LOWORD(v49) = 0;
      uint64_t v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getMedianBiasFromQueue(const std::deque<BaroBiasEstimate> &, BaroBiasEstimate &)", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    return 0;
  }
  return v27;
}

void sub_10187E01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100419F34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10187E044(void *a1)
{
  sub_10048B72C((uint64_t)v26);
  *(_DWORD *)((char *)&v26[1] + *(void *)(v26[0] - 24)) = *(_DWORD *)((unsigned char *)&v26[1] + *(void *)(v26[0] - 24)) & 0xFFFFFEFB | 4;
  unint64_t v2 = a1[5];
  if (v2 > 5)
  {
    sub_100132EFC(v26, (uint64_t)"cft,", 4);
    unint64_t v14 = (void *)std::ostream::operator<<();
    sub_100132EFC(v14, (uint64_t)",bias,", 6);
    uint64_t v15 = (void *)std::ostream::operator<<();
    sub_100132EFC(v15, (uint64_t)",biasUnc,", 9);
    unint64_t v16 = (void *)std::ostream::operator<<();
    sub_100132EFC(v16, (uint64_t)",modeProb,", 10);
    unint64_t v17 = (void *)std::ostream::operator<<();
    sub_100132EFC(v17, (uint64_t)",devPresTempAtCalib_C,", 22);
    unint64_t v18 = (void *)std::ostream::operator<<();
    unint64_t v19 = sub_100132EFC(v18, (uint64_t)",", 1);
    sub_100132EFC(v19, (uint64_t)"cft,", 4);
    unint64_t v20 = (void *)std::ostream::operator<<();
    sub_100132EFC(v20, (uint64_t)",bias,", 6);
    unint64_t v21 = (void *)std::ostream::operator<<();
    sub_100132EFC(v21, (uint64_t)",biasUnc,", 9);
    double v22 = (void *)std::ostream::operator<<();
    sub_100132EFC(v22, (uint64_t)",modeProb,", 10);
    double v23 = (void *)std::ostream::operator<<();
    sub_100132EFC(v23, (uint64_t)",devPresTempAtCalib_C,", 22);
    unint64_t v24 = (void *)std::ostream::operator<<();
    sub_100132EFC(v24, (uint64_t)",", 1);
  }
  else
  {
    uint64_t v3 = a1[1];
    if (a1[2] != v3)
    {
      unint64_t v4 = a1[4];
      uint64_t v5 = (void *)(v3 + 8 * (v4 / 0x66));
      unint64_t v6 = *v5 + 40 * (v4 % 0x66);
      unint64_t v7 = *(void *)(v3 + 8 * ((v4 + v2) / 0x66)) + 40 * ((v4 + v2) % 0x66);
      while (v6 != v7)
      {
        sub_100132EFC(v26, (uint64_t)"cft,", 4);
        unint64_t v8 = (void *)std::ostream::operator<<();
        sub_100132EFC(v8, (uint64_t)",bias,", 6);
        unint64_t v9 = (void *)std::ostream::operator<<();
        sub_100132EFC(v9, (uint64_t)",biasUnc,", 9);
        unint64_t v10 = (void *)std::ostream::operator<<();
        sub_100132EFC(v10, (uint64_t)",modeProb,", 10);
        unint64_t v11 = (void *)std::ostream::operator<<();
        sub_100132EFC(v11, (uint64_t)",devPresTempAtCalib_C,", 22);
        unint64_t v12 = (void *)std::ostream::operator<<();
        sub_100132EFC(v12, (uint64_t)",", 1);
        v6 += 40;
        if (v6 - *v5 == 4080)
        {
          unint64_t v13 = v5[1];
          ++v5;
          unint64_t v6 = v13;
        }
      }
    }
  }
  std::stringbuf::str();
  if (v27 < 0) {
    operator delete((void *)v26[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10187E628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10187E640(uint64_t a1, double a2, double a3, double a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  unint64_t v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134349568;
    *(double *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&buf[14] = a3;
    *(_WORD *)&buf[22] = 2050;
    v64[0] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,new single epoch bias,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    *(_DWORD *)uint64_t v61 = 134349568;
    *(double *)&v61[4] = a2;
    *(_WORD *)&v61[12] = 2050;
    *(double *)&v61[14] = a3;
    *(_WORD *)&v61[22] = 2050;
    *(double *)&v61[24] = a4;
    __int16 v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v56);
    if (v56 != buf) {
      free(v56);
    }
  }
  uint64_t v9 = *(void *)(a1 + 640);
  if (!v9) {
    goto LABEL_18;
  }
  unint64_t v10 = *(void *)(a1 + 632);
  unint64_t v11 = v9 + v10 - 1;
  uint64_t v12 = *(void *)(a1 + 608);
  if (vabdd_f64(a4, *(double *)(*(void *)(v12 + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66))) < *(double *)(a1 + 704))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    unint64_t v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v14 = *(void *)(a1 + 640) + *(void *)(a1 + 632) - 1;
      double v15 = a4 - *(double *)(*(void *)(*(void *)(a1 + 608) + 8 * (v14 / 0x66)) + 40 * (v14 % 0x66));
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)&uint8_t buf[4] = a4;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,reject bias update as too recent, timeNow,%{public}lf,time since last entry,%{public}lf", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    unint64_t v16 = *(void *)(a1 + 640) + *(void *)(a1 + 632) - 1;
    double v17 = a4 - *(double *)(*(void *)(*(void *)(a1 + 608) + 8 * (v16 / 0x66)) + 40 * (v16 % 0x66));
    *(_DWORD *)uint64_t v61 = 134349312;
    *(double *)&v61[4] = a4;
    *(_WORD *)&v61[12] = 2050;
    *(double *)&v61[14] = v17;
    unint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v18);
    if (v18 == buf) {
      return;
    }
LABEL_100:
    free(v18);
    return;
  }
  if (vabdd_f64(a4, *(double *)(*(void *)(v12 + 8 * (v10 / 0x66)) + 40 * (v10 % 0x66))) >= *(double *)(a1 + 688))
  {
    uint64_t v62 = 0;
    memset(v61, 0, sizeof(v61));
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v35 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory query", buf, 2u);
    }
    uint64_t v36 = sub_10013D1A0(115, 2);
    if (v36)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      double v59 = (char *)_os_log_send_and_compose_impl();
      uint64_t v36 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v59);
      if (v59 != buf) {
        free(v59);
      }
    }
    if (sub_10187DABC(v36, (void *)(a1 + 600), (uint64_t)v61))
    {
      while (1)
      {
        unint64_t v37 = *(void *)(a1 + 592);
        if (!v37
          || (unint64_t v38 = *(void *)(a1 + 584),
              vabdd_f64(*(double *)(*(void *)(*(void *)(a1 + 560) + 8 * ((v37 + v38 - 1) / 0x66))+ 40 * ((v37 + v38 - 1) % 0x66)), *(double *)(*(void *)(*(void *)(a1 + 560) + 8 * (v38 / 0x66)) + 40 * (v38 % 0x66))) <= *(double *)(a1 + 672)))
        {
          if (v37 <= *(unsigned int *)(a1 + 680)) {
            break;
          }
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v39 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          double v40 = (double *)(*(void *)(*(void *)(a1 + 560) + 8 * (*(void *)(a1 + 584) / 0x66uLL))
                         + 40 * (*(void *)(a1 + 584) % 0x66uLL));
          uint64_t v42 = *((void *)v40 + 1);
          uint64_t v41 = *((void *)v40 + 2);
          double v43 = *v40;
          *(_DWORD *)uint64_t buf = 134349568;
          *(void *)&uint8_t buf[4] = v42;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2050;
          v64[0] = v43;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,long memory update,remove,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          double v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v44);
          if (v44 != buf) {
            free(v44);
          }
        }
        *(int64x2_t *)(a1 + 584) = vaddq_s64(*(int64x2_t *)(a1 + 584), (int64x2_t)xmmword_101D0A740);
        sub_100473B58(a1 + 552, 1);
      }
      sub_10187DA04((void *)(a1 + 552), (uint64_t)v61);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      double v45 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349568;
        *(void *)&uint8_t buf[4] = *(void *)&v61[8];
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = *(void *)&v61[16];
        *(_WORD *)&buf[22] = 2050;
        v64[0] = *(double *)v61;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "BaroAlt,LongShortMemoryBias,long memory update,add,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        __int16 v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v60);
        if (v60 != buf) {
          free(v60);
        }
      }
      uint64_t v46 = *(void ***)(a1 + 608);
      uint64_t v47 = *(void *)(a1 + 616);
      *(void *)(a1 + 640) = 0;
      unint64_t v48 = v47 - (void)v46;
      if (v48 >= 0x11)
      {
        do
        {
          operator delete(*v46);
          uint64_t v46 = (void **)(*(void *)(a1 + 608) + 8);
          *(void *)(a1 + 608) = v46;
          unint64_t v48 = *(void *)(a1 + 616) - (void)v46;
        }
        while (v48 > 0x10);
      }
      if (v48 >> 3 == 1)
      {
        uint64_t v49 = 51;
      }
      else
      {
        if (v48 >> 3 != 2) {
          goto LABEL_66;
        }
        uint64_t v49 = 102;
      }
      *(void *)(a1 + 632) = v49;
    }
  }
  else
  {
LABEL_18:
    *(double *)uint64_t buf = a4;
    *(double *)&uint8_t buf[8] = a2;
    *(double *)&uint8_t buf[16] = a3;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)__int16 v64 = _Q0;
    sub_10187DA04((void *)(a1 + 600), (uint64_t)buf);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    unint64_t v24 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134349568;
      *(double *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2050;
      v64[0] = a4;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory update,add,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      *(_DWORD *)uint64_t v61 = 134349568;
      *(double *)&v61[4] = a2;
      *(_WORD *)&v61[12] = 2050;
      *(double *)&v61[14] = a3;
      *(_WORD *)&v61[22] = 2050;
      *(double *)&v61[24] = a4;
      __int16 v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v58);
      if (v58 != buf) {
        free(v58);
      }
    }
    while (*(void *)(a1 + 640) > (unint64_t)*(unsigned int *)(a1 + 696))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      unint64_t v25 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        double v26 = (double *)(*(void *)(*(void *)(a1 + 608) + 8 * (*(void *)(a1 + 632) / 0x66uLL))
                       + 40 * (*(void *)(a1 + 632) % 0x66uLL));
        uint64_t v28 = *((void *)v26 + 1);
        uint64_t v27 = *((void *)v26 + 2);
        double v29 = *v26;
        *(_DWORD *)uint64_t buf = 134349568;
        *(void *)&uint8_t buf[4] = v28;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v27;
        *(_WORD *)&buf[22] = 2050;
        v64[0] = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory update,remove,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v30 = (uint64_t *)(*(void *)(*(void *)(a1 + 608) + 8 * (*(void *)(a1 + 632) / 0x66uLL))
                        + 40 * (*(void *)(a1 + 632) % 0x66uLL));
        uint64_t v32 = v30[1];
        uint64_t v31 = v30[2];
        uint64_t v33 = *v30;
        *(_DWORD *)uint64_t v61 = 134349568;
        *(void *)&v61[4] = v32;
        *(_WORD *)&v61[12] = 2050;
        *(void *)&v61[14] = v31;
        *(_WORD *)&v61[22] = 2050;
        *(void *)&v61[24] = v33;
        double v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v34);
        if (v34 != buf) {
          free(v34);
        }
      }
      *(int64x2_t *)(a1 + 632) = vaddq_s64(*(int64x2_t *)(a1 + 632), (int64x2_t)xmmword_101D0A740);
      sub_100473B58(a1 + 600, 1);
    }
  }
LABEL_66:
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  int v50 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v51 = *(_DWORD *)(a1 + 640);
    sub_10187E044((void *)(a1 + 600));
    uint64_t v52 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)uint64_t v61 = 67240450;
    *(_DWORD *)&v61[4] = v51;
    *(_WORD *)&v61[8] = 2082;
    *(void *)&v61[10] = v52;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,short memory,after update,elem,%{public}d,content,%{public}s", v61, 0x12u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    sub_10187E044((void *)(a1 + 600));
    double v57 = (char *)_os_log_send_and_compose_impl();
    if ((char)v61[23] < 0) {
      operator delete(*(void **)v61);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v57);
    if (v57 != buf) {
      free(v57);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  uint64_t v53 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v54 = *(_DWORD *)(a1 + 592);
    sub_10187E044((void *)(a1 + 552));
    uint64_t v55 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)uint64_t v61 = 67240450;
    *(_DWORD *)&v61[4] = v54;
    *(_WORD *)&v61[8] = 2082;
    *(void *)&v61[10] = v55;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,long memory,after update,elem,%{public}d,content,%{public}s", v61, 0x12u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    sub_10187E044((void *)(a1 + 552));
    unint64_t v18 = (char *)_os_log_send_and_compose_impl();
    if ((char)v61[23] < 0) {
      operator delete(*(void **)v61);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::enqueueSingleEpochBiasForHarvest(const double, const double, const CFAbsoluteTime)", "%s\n", v18);
    if (v18 != buf) {
      goto LABEL_100;
    }
  }
}

BOOL sub_10187F7DC(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 592) >= (unint64_t)*(unsigned int *)(a1 + 712)
    && sub_10187DABC(a1, (void *)(a1 + 552), (uint64_t)a2))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    unint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = a2[1];
      uint64_t v5 = a2[2];
      uint64_t v7 = *a2;
      *(_DWORD *)uint64_t buf = 134349568;
      *(void *)double v15 = v6;
      *(_WORD *)&v15[8] = 2050;
      uint64_t v16 = v5;
      __int16 v17 = 2050;
      uint64_t v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BaroAlt,LongShortMemoryBias,bias ready for harvest,read,bias_pa,%{public}lf,unc_m,%{public}lf,timeCfabs,%{public}lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getBiasForHarvest(BaroBiasEstimate &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 1;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 592);
      int v11 = *(_DWORD *)(a1 + 712);
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)double v15 = v10;
      *(_WORD *)&void v15[4] = 1026;
      *(_DWORD *)&v15[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BaroAlt,LongShortMemoryBias,long memory,insufficient to harvest,queue size,%{public}d,required,%{public}d", buf, 0xEu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::getBiasForHarvest(BaroBiasEstimate &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_10187FB60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 592);
}

uint64_t sub_10187FB68(void *a1)
{
  unint64_t v1 = a1[73];
  return (int)vabdd_f64(*(double *)(*(void *)(a1[70] + 8 * ((a1[74] + v1 - 1) / 0x66))+ 40 * ((a1[74] + v1 - 1) % 0x66)), *(double *)(*(void *)(a1[70] + 8 * (v1 / 0x66)) + 40 * (v1 % 0x66)));
}

void sub_10187FBD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t a6)
{
  int v6 = a5;
  uint64_t v7 = a4;
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64_t v103 = a3;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a2 + 64);
      unint64_t v12 = v7[5];
      int v13 = *(unsigned __int8 *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 134349569;
      uint64_t v117 = v11;
      __int16 v118 = 2049;
      unint64_t v119 = v12;
      __int16 v120 = 1025;
      LODWORD(v121) = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "BaroAlt,MMKF,startMMKF,newCalibSessionStart,time,%{public}lf,fNumBaroBiasHistorySize,%{private}lu,newCalibSessionStart,%{private}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v81 = *(void *)(a2 + 64);
      unint64_t v82 = a4[5];
      int v83 = *(unsigned __int8 *)(a1 + 96);
      int v106 = 134349569;
      uint64_t v107 = v81;
      __int16 v108 = 2049;
      unint64_t v109 = v82;
      __int16 v110 = 1025;
      LODWORD(v111) = v83;
      long long v84 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v84);
      if (v84 != (char *)buf) {
        free(v84);
      }
    }
    *(double *)&unint64_t v105 = -1.0;
    sub_10019C4CC(a1, &v105, a6);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    unint64_t v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 376);
      unint64_t v16 = *(void *)(a1 + 384);
      uint64_t v17 = *(void *)(a6 + 4);
      uint64_t v18 = *(void *)(a6 + 12);
      *(_DWORD *)uint64_t buf = 134284545;
      uint64_t v117 = v15;
      __int16 v118 = 2049;
      unint64_t v119 = v16;
      __int16 v120 = 2049;
      uint64_t v121 = v17;
      __int16 v122 = 2049;
      *(void *)__int16 v123 = v18;
      *(_WORD *)&v123[8] = 2050;
      *(void *)&v123[10] = v105;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,locDist,lastLocLat,%{private}.8lf,lastLocLon,%{private}.8lf,CurLocLat,%{private}.8lf,CurLocLon,%{private}.8lf,distToLast,%{public}.3lf", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v85 = *(void *)(a1 + 376);
      unint64_t v86 = *(void *)(a1 + 384);
      uint64_t v87 = *(void *)(a6 + 4);
      uint64_t v88 = *(void *)(a6 + 12);
      double v89 = *(double *)&v105;
      int v106 = 134284545;
      uint64_t v107 = v85;
      __int16 v108 = 2049;
      unint64_t v109 = v86;
      __int16 v110 = 2049;
      uint64_t v111 = v87;
      __int16 v112 = 2049;
      *(void *)__int16 v113 = v88;
      *(_WORD *)&v113[8] = 2050;
      *(void *)&v113[10] = v105;
      uint64_t v90 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v90);
      double v19 = v89;
      if (v90 != (char *)buf) {
        free(v90);
      }
    }
    else
    {
      double v19 = *(double *)&v105;
    }
    sub_10188091C(a1, a2, a4);
    uint64_t v20 = sub_10187CD78(a1, a2, v103, a4, v19);
    __int16 v101 = (uint64_t *)(a1 + 120);
    *(void *)(a1 + 128) = *(void *)(a1 + 120);
    uint64_t v21 = a4[1];
    if (a4[2] != v21)
    {
      unint64_t v22 = a4[4];
      double v23 = (void *)(*(void *)(v21 + 8 * (v22 / 0x66)) + 40 * (v22 % 0x66));
      unint64_t v24 = *(void *)(v21 + 8 * ((a4[5] + v22) / 0x66)) + 40 * ((a4[5] + v22) % 0x66);
      if (v23 != (void *)v24)
      {
        unint64_t v25 = (void *)(v21 + 8 * (v22 / 0x66));
        do
        {
          sub_101881478((void *)a1, (uint64_t)v23);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          double v26 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v27 = *(void *)(a2 + 64);
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4);
            uint64_t v29 = v23[1];
            uint64_t v30 = v23[2];
            uint64_t v31 = v23[3];
            uint64_t v32 = v23[4];
            *(_DWORD *)uint64_t buf = 134350337;
            uint64_t v117 = v27;
            __int16 v118 = 2049;
            unint64_t v119 = v28;
            __int16 v120 = 2049;
            uint64_t v121 = v29;
            __int16 v122 = 2049;
            *(void *)__int16 v123 = v30;
            *(_WORD *)&v123[8] = 2049;
            *(void *)&v123[10] = v31;
            __int16 v124 = 2049;
            uint64_t v125 = v32;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,generateMMKF,frombaroBiasHistory,time,%{public}lf,baroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
          }
          uint64_t v20 = sub_10013D1A0(115, 2);
          if (v20)
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            uint64_t v34 = *(void *)(a2 + 64);
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4);
            uint64_t v36 = v23[1];
            uint64_t v37 = v23[2];
            uint64_t v38 = v23[3];
            uint64_t v39 = v23[4];
            int v106 = 134350337;
            uint64_t v107 = v34;
            __int16 v108 = 2049;
            unint64_t v109 = v35;
            __int16 v110 = 2049;
            uint64_t v111 = v36;
            __int16 v112 = 2049;
            *(void *)__int16 v113 = v37;
            *(_WORD *)&v113[8] = 2049;
            *(void *)&v113[10] = v38;
            __int16 v114 = 2049;
            uint64_t v115 = v39;
            double v40 = (char *)_os_log_send_and_compose_impl();
            uint64_t v20 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v40);
            if (v40 != (char *)buf) {
              free(v40);
            }
          }
          v23 += 5;
          if ((void *)((char *)v23 - *v25) == (void *)4080)
          {
            uint64_t v33 = (void *)v25[1];
            ++v25;
            double v23 = v33;
          }
        }
        while (v23 != (void *)v24);
      }
    }
    uint64_t v41 = sub_1018815D8(*(double *)(v103 + 8), v20, a2, v101);
    if ((v41 & 1) == 0)
    {
      uint64_t v43 = *(void *)(a1 + 120);
      unint64_t v42 = *(void *)(a1 + 128);
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v43) >> 4);
      double v45 = 1.0;
      if (v44 >= 2) {
        double v45 = 1.0 / (double)(v44 + 1);
      }
      uint64_t v46 = *(void *)(v103 + 8);
      uint64_t v47 = *(void *)(a2 + 272);
      unint64_t v48 = *(void *)(a1 + 136);
      if (v42 >= v48)
      {
        if (v44 + 1 > 0x555555555555555) {
          sub_1001D7FD4();
        }
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v43) >> 4);
        uint64_t v51 = 2 * v50;
        if (2 * v50 <= v44 + 1) {
          uint64_t v51 = v44 + 1;
        }
        if (v50 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v52 = 0x555555555555555;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52) {
          uint64_t v53 = (char *)sub_10014F86C(a1 + 136, v52);
        }
        else {
          uint64_t v53 = 0;
        }
        int v54 = &v53[48 * v44];
        uint64_t v55 = &v53[48 * v52];
        char *v54 = 1;
        *((_DWORD *)v54 + 1) = 0;
        *((void *)v54 + 1) = v46;
        *((_OWORD *)v54 + 1) = xmmword_101E44B20;
        *((double *)v54 + 4) = v45;
        *((void *)v54 + 5) = v47;
        uint64_t v49 = v54 + 48;
        double v57 = *(char **)(a1 + 120);
        __int16 v56 = *(char **)(a1 + 128);
        if (v56 != v57)
        {
          do
          {
            long long v58 = *((_OWORD *)v56 - 3);
            long long v59 = *((_OWORD *)v56 - 1);
            *((_OWORD *)v54 - 2) = *((_OWORD *)v56 - 2);
            *((_OWORD *)v54 - 1) = v59;
            *((_OWORD *)v54 - 3) = v58;
            v54 -= 48;
            v56 -= 48;
          }
          while (v56 != v57);
          __int16 v56 = (char *)*v101;
        }
        *(void *)(a1 + 120) = v54;
        *(void *)(a1 + 128) = v49;
        *(void *)(a1 + 136) = v55;
        if (v56) {
          operator delete(v56);
        }
      }
      else
      {
        *(unsigned char *)unint64_t v42 = 1;
        *(_DWORD *)(v42 + 4) = 0;
        *(void *)(v42 + 8) = v46;
        *(_OWORD *)(v42 + 16) = xmmword_101E44B20;
        *(double *)(v42 + 32) = v45;
        *(void *)(v42 + 40) = v47;
        uint64_t v49 = (char *)(v42 + 48);
      }
      *(void *)(a1 + 128) = v49;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      __int16 v60 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v61 = *(void *)(a2 + 72);
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4);
        *(_DWORD *)uint64_t buf = 134350337;
        uint64_t v117 = v61;
        __int16 v118 = 2049;
        unint64_t v119 = v62;
        __int16 v120 = 2049;
        uint64_t v121 = v46;
        __int16 v122 = 2049;
        *(void *)__int16 v123 = 0x408200FD8ADAB9F5;
        *(_WORD *)&v123[8] = 2049;
        *(double *)&v123[10] = v45;
        __int16 v124 = 2049;
        uint64_t v125 = v47;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,addingNewKF,time,%{public}lf,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
      }
      uint64_t v41 = sub_10013D1A0(115, 2);
      if (v41)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v97 = *(void *)(a2 + 72);
        unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4);
        int v106 = 134350337;
        uint64_t v107 = v97;
        __int16 v108 = 2049;
        unint64_t v109 = v98;
        __int16 v110 = 2049;
        uint64_t v111 = v46;
        __int16 v112 = 2049;
        *(void *)__int16 v113 = 0x408200FD8ADAB9F5;
        *(_WORD *)&v113[8] = 2049;
        *(double *)&v113[10] = v45;
        __int16 v114 = 2049;
        uint64_t v115 = v47;
        __int16 v99 = (char *)_os_log_send_and_compose_impl();
        uint64_t v41 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v99);
        if (v99 != (char *)buf) {
          free(v99);
        }
      }
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4) >= 2) {
      sub_101881844(*(double *)(a2 + 72), v41, v101);
    }
    long long v63 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(a1 + 372) = *(_OWORD *)a6;
    *(_OWORD *)(a1 + 388) = v63;
    long long v64 = *(_OWORD *)(a6 + 32);
    long long v65 = *(_OWORD *)(a6 + 48);
    long long v66 = *(_OWORD *)(a6 + 80);
    *(_OWORD *)(a1 + 436) = *(_OWORD *)(a6 + 64);
    *(_OWORD *)(a1 + 452) = v66;
    *(_OWORD *)(a1 + 404) = v64;
    *(_OWORD *)(a1 + 420) = v65;
    long long v67 = *(_OWORD *)(a6 + 96);
    long long v68 = *(_OWORD *)(a6 + 112);
    long long v69 = *(_OWORD *)(a6 + 128);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a6 + 140);
    *(_OWORD *)(a1 + 484) = v68;
    *(_OWORD *)(a1 + 500) = v69;
    *(_OWORD *)(a1 + 468) = v67;
    *(void *)(a1 + 528) = *(void *)(a2 + 72);
    a3 = v103;
    uint64_t v7 = a4;
    int v6 = a5;
  }
  uint64_t v70 = a3;
  sub_1018820F8(a1, a2, a3, v7, (uint64_t *)(a1 + 120), v6);
  *(unsigned char *)(a1 + 97) = 0;
  unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4);
  if ((v71 > 1 || *(unsigned char *)(a1 + 112)) && *(double *)(a1 + 104) > 0.5)
  {
    unint64_t v72 = *(unsigned int *)(a1 + 100);
    if ((v72 & 0x80000000) == 0 && v71 > v72)
    {
      uint64_t v73 = *(void *)(a1 + 120) + 48 * v72;
      *(void *)(v70 + 8) = *(void *)(v73 + 8);
      double v74 = sqrt(*(double *)(v73 + 16) / 144.030962);
      if (v74 < *(double *)(v70 + 16)) {
        double v74 = *(double *)(v70 + 16);
      }
      *(double *)(v70 + 16) = v74;
      *(unsigned char *)(a1 + 97) = 1;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v75 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        uint64_t v76 = *(void *)(a2 + 64);
        unint64_t v77 = a4[5];
        uint64_t v78 = *(void *)(a1 + 104);
        int v79 = *(unsigned __int8 *)(a1 + 97);
        uint64_t v80 = *(void *)(v70 + 8);
        *(_DWORD *)uint64_t buf = 134350081;
        uint64_t v117 = v76;
        __int16 v118 = 2049;
        unint64_t v119 = v77;
        __int16 v120 = 2049;
        uint64_t v121 = v78;
        __int16 v122 = 1025;
        *(_DWORD *)__int16 v123 = v79;
        *(_WORD *)&v123[4] = 2049;
        *(void *)&v123[6] = v80;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "BaroAlt,MMKF,publish,time,%{public}lf,fNumBaroBiasHistorySize,%{private}lu,bestKFModeProb,%{private}.4lf,filteredBaroBias,%{private}d,fBaroBiasUsingReferencePressure,%{private}.3lf", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v91 = *(void *)(a2 + 64);
        unint64_t v92 = a4[5];
        uint64_t v93 = *(void *)(a1 + 104);
        int v94 = *(unsigned __int8 *)(a1 + 97);
        uint64_t v95 = *(void *)(v70 + 8);
        int v106 = 134350081;
        uint64_t v107 = v91;
        __int16 v108 = 2049;
        unint64_t v109 = v92;
        __int16 v110 = 2049;
        uint64_t v111 = v93;
        __int16 v112 = 1025;
        *(_DWORD *)__int16 v113 = v94;
        *(_WORD *)&v113[4] = 2049;
        *(void *)&void v113[6] = v95;
        uint64_t v96 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::computeBaroBiasUsingReferencePressureEstimator(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, const int, const CLDaemonLocation &)", "%s\n", v96);
        if (v96 != (char *)buf) {
          free(v96);
        }
      }
    }
  }
  *(void *)(a2 + 280) = *(void *)(a2 + 272);
}

uint64_t sub_10188091C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = (void *)result;
  if (*(unsigned char *)(result + 96) && vabdd_f64(*(double *)(a2 + 72), *(double *)(result + 536)) <= 300.0) {
    return result;
  }
  long long v105 = 0u;
  long long v106 = 0u;
  long long v104 = 0u;
  if (!a3[5]) {
    goto LABEL_79;
  }
  double v102 = (void *)result;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  for (unint64_t i = 1; i > v6; unint64_t i = a3[5])
  {
    if (!i)
    {
      LODWORD(v10) = -1;
LABEL_33:
      uint64_t v53 = v7;
      sub_10187DA04(&v104, *(void *)(a3[1] + 8 * ((a3[4] + v6) / 0x66)) + 40 * ((a3[4] + v6) % 0x66));
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      int v54 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v55 = *(void *)(a2 + 64);
        unint64_t v56 = a3[5];
        double v57 = (void *)(*(void *)(a3[1] + 8 * ((a3[4] + v6) / 0x66)) + 40 * ((a3[4] + v6) % 0x66));
        uint64_t v58 = v57[1];
        uint64_t v59 = v57[2];
        uint64_t v60 = v57[3];
        *(_DWORD *)uint64_t buf = 134350593;
        uint64_t v123 = v55;
        __int16 v124 = 2049;
        unint64_t v125 = v56;
        __int16 v126 = 1025;
        *(_DWORD *)int v127 = v6;
        *(_WORD *)&unsigned char v127[4] = 1025;
        *(_DWORD *)&v127[6] = v10;
        *(_WORD *)char v128 = 2049;
        *(void *)&v128[2] = v58;
        *(_WORD *)uint64_t v129 = 2049;
        *(void *)&unsigned char v129[2] = v59;
        *(_WORD *)int v130 = 2049;
        *(void *)&_OWORD v130[2] = v60;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,removeDupeHistAdded,time,%{public}lf,MMKF,%{private}lu,i,%{private}d,indexToBeRemoved,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf", buf, 0x40u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v61 = *(void *)(a2 + 64);
        unint64_t v62 = a3[5];
        long long v63 = (void *)(*(void *)(a3[1] + 8 * ((a3[4] + v6) / 0x66)) + 40 * ((a3[4] + v6) % 0x66));
        uint64_t v64 = v63[1];
        uint64_t v65 = v63[2];
        uint64_t v66 = v63[3];
        int v107 = 134350593;
        uint64_t v108 = v61;
        __int16 v109 = 2049;
        unint64_t v110 = v62;
        __int16 v111 = 1025;
        *(_DWORD *)__int16 v112 = v6;
        *(_WORD *)&v112[4] = 1025;
        *(_DWORD *)&void v112[6] = v10;
        *(_WORD *)__int16 v113 = 2049;
        *(void *)&v113[2] = v64;
        *(_WORD *)__int16 v114 = 2049;
        *(void *)&v114[2] = v65;
        *(_WORD *)uint64_t v115 = 2049;
        *(void *)&v115[2] = v66;
        long long v67 = (char *)_os_log_send_and_compose_impl();
        BOOL result = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::removeDupeBaroBiasMMKF(const CLBaroAltEstimatorInput &, std::deque<BaroBiasEstimate> &)", "%s\n", v67);
        if (v67 != (char *)buf) {
          free(v67);
        }
      }
      uint64_t v7 = v53;
      goto LABEL_39;
    }
    unint64_t v9 = 0;
    uint64_t v10 = 0xFFFFFFFFLL;
    do
    {
      if (v6 != v9)
      {
        uint64_t v11 = a3[4];
        uint64_t v12 = a3[1];
        uint64_t v13 = *(void *)(v12 + 8 * ((v11 + v6) / 0x66));
        unint64_t v14 = (v11 + v6) % 0x66;
        uint64_t v15 = (double *)(v13 + 40 * v14);
        unint64_t v16 = v9 + v11;
        uint64_t v17 = *(void *)(v12 + 8 * (v16 / 0x66));
        double v18 = v15[1];
        unint64_t v19 = v16 % 0x66;
        uint64_t v20 = (double *)(v17 + 40 * (v16 % 0x66));
        double v21 = v20[1];
        double v22 = vabdd_f64(v18, v21);
        if (v22 < 27.963)
        {
          uint64_t v23 = v13 + 40 * v14;
          double v24 = *(double *)(v23 + 16);
          uint64_t v25 = v17 + 40 * v19;
          double v26 = *(double *)(v25 + 16);
          if (v24 > v26
            || vabdd_f64(v24, v26) < 2.22507386e-308
            && ((double v39 = *(double *)(v23 + 24), v40 = *(double *)(v25 + 24), v39 < v40)
             || vabdd_f64(v39, v40) < 2.22507386e-308 && (v18 > v21 || v22 < 2.22507386e-308 && *v15 < *v20)))
          {
            if ((v10 & 0x80000000) != 0 || v6 != v10)
            {
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_102343F08);
              }
              uint64_t v27 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v28 = *(void *)(a2 + 64);
                uint64_t v30 = a3[4];
                unint64_t v29 = a3[5];
                uint64_t v31 = a3[1];
                uint64_t v32 = (void *)(*(void *)(v31 + 8 * ((v30 + v6) / 0x66)) + 40 * ((v30 + v6) % 0x66));
                uint64_t v33 = v32[1];
                uint64_t v34 = v32[2];
                uint64_t v35 = v32[3];
                unint64_t v36 = *(void *)(v31 + 8 * ((v9 + v30) / 0x66)) + 40 * ((v9 + v30) % 0x66);
                uint64_t v38 = *(void *)(v36 + 8);
                uint64_t v37 = *(void *)(v36 + 16);
                *(_DWORD *)uint64_t buf = 134351361;
                uint64_t v123 = v28;
                __int16 v124 = 2049;
                unint64_t v125 = v29;
                __int16 v126 = 1025;
                *(_DWORD *)int v127 = v6;
                *(_WORD *)&unsigned char v127[4] = 1025;
                *(_DWORD *)&v127[6] = v9;
                *(_WORD *)char v128 = 2049;
                *(void *)&v128[2] = v33;
                *(_WORD *)uint64_t v129 = 2049;
                *(void *)&unsigned char v129[2] = v34;
                *(_WORD *)int v130 = 2049;
                *(void *)&_OWORD v130[2] = v35;
                __int16 v131 = 2049;
                uint64_t v132 = v38;
                __int16 v133 = 2049;
                uint64_t v134 = v37;
                __int16 v135 = 2049;
                uint64_t v136 = v35;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,removeDupeHistIndex,time,%{public}lf,MMKF,%{private}lu,i,%{private}d,j,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf,baroKFX_pa,%{private}.2lf, baroKFP_pa2,%{private}.4lf,modeProb,%{private}.4lf", buf, 0x5Eu);
              }
              BOOL result = sub_10013D1A0(115, 2);
              if (result)
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_102343F08);
                }
                uint64_t v41 = *(void *)(a2 + 64);
                uint64_t v43 = a3[4];
                unint64_t v42 = a3[5];
                uint64_t v44 = a3[1];
                double v45 = (void *)(*(void *)(v44 + 8 * ((v43 + v6) / 0x66)) + 40 * ((v43 + v6) % 0x66));
                uint64_t v46 = v45[1];
                uint64_t v47 = v45[2];
                uint64_t v48 = v45[3];
                unint64_t v49 = *(void *)(v44 + 8 * ((v9 + v43) / 0x66)) + 40 * ((v9 + v43) % 0x66);
                uint64_t v51 = *(void *)(v49 + 8);
                uint64_t v50 = *(void *)(v49 + 16);
                int v107 = 134351361;
                uint64_t v108 = v41;
                __int16 v109 = 2049;
                unint64_t v110 = v42;
                __int16 v111 = 1025;
                *(_DWORD *)__int16 v112 = v6;
                *(_WORD *)&v112[4] = 1025;
                *(_DWORD *)&void v112[6] = v9;
                *(_WORD *)__int16 v113 = 2049;
                *(void *)&v113[2] = v46;
                *(_WORD *)__int16 v114 = 2049;
                *(void *)&v114[2] = v47;
                *(_WORD *)uint64_t v115 = 2049;
                *(void *)&v115[2] = v48;
                __int16 v116 = 2049;
                uint64_t v117 = v51;
                __int16 v118 = 2049;
                uint64_t v119 = v50;
                __int16 v120 = 2049;
                uint64_t v121 = v48;
                unint64_t v52 = (char *)_os_log_send_and_compose_impl();
                BOOL result = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::removeDupeBaroBiasMMKF(const CLBaroAltEstimatorInput &, std::deque<BaroBiasEstimate> &)", "%s\n", v52);
                if (v52 != (char *)buf) {
                  free(v52);
                }
              }
              uint64_t v7 = 1;
              uint64_t v10 = v6;
            }
          }
        }
      }
      ++v9;
    }
    while (a3[5] > v9);
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_33;
    }
LABEL_39:
    ++v6;
  }
  uint64_t v5 = v102;
  uint64_t v4 = a2;
  if (v7)
  {
    long long v68 = (void **)a3[1];
    long long v69 = (void **)a3[2];
    a3[5] = 0;
    unint64_t v70 = (char *)v69 - (char *)v68;
    if ((unint64_t)((char *)v69 - (char *)v68) >= 0x11)
    {
      do
      {
        operator delete(*v68);
        long long v69 = (void **)a3[2];
        long long v68 = (void **)(a3[1] + 8);
        a3[1] = v68;
        unint64_t v70 = (char *)v69 - (char *)v68;
      }
      while ((unint64_t)((char *)v69 - (char *)v68) > 0x10);
    }
    unint64_t v71 = v70 >> 3;
    if (v71 == 1)
    {
      uint64_t v72 = 51;
LABEL_52:
      a3[4] = v72;
    }
    else if (v71 == 2)
    {
      uint64_t v72 = 102;
      goto LABEL_52;
    }
    if ((void)v105 != *((void *)&v104 + 1))
    {
      uint64_t v73 = (void *)(*((void *)&v104 + 1) + 8 * ((unint64_t)v106 / 0x66));
      uint64_t v74 = *v73 + 40 * ((unint64_t)v106 % 0x66);
      unint64_t v75 = *(void *)(*((void *)&v104 + 1) + 8 * ((*((void *)&v106 + 1) + (void)v106) / 0x66uLL))
          + 40 * ((*((void *)&v106 + 1) + (void)v106) % 0x66uLL);
      if (v74 != v75)
      {
        do
        {
          sub_10187DA04(a3, v74);
          v74 += 40;
          if (v74 - *v73 == 4080)
          {
            uint64_t v76 = v73[1];
            ++v73;
            uint64_t v74 = v76;
          }
        }
        while (v74 != v75);
        long long v68 = (void **)a3[1];
        long long v69 = (void **)a3[2];
      }
    }
    uint64_t v77 = v102[15];
    v102[16] = v77;
    if (v69 == v68)
    {
      uint64_t v82 = v77;
    }
    else
    {
      unint64_t v78 = a3[4];
      uint64_t v79 = a3[5];
      uint64_t v80 = (char *)v68[v78 / 0x66] + 40 * (v78 % 0x66);
      unint64_t v81 = (unint64_t)v68[(v79 + v78) / 0x66] + 40 * ((v79 + v78) % 0x66);
      uint64_t v82 = v77;
      if (v80 != (char *)v81)
      {
        int v83 = &v68[v78 / 0x66];
        do
        {
          sub_101881478(v102, (uint64_t)v80);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          long long v84 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v85 = *(void *)(a2 + 64);
            unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102[16] - v102[15]) >> 4);
            uint64_t v87 = *((void *)v80 + 1);
            uint64_t v88 = *((void *)v80 + 2);
            uint64_t v89 = *((void *)v80 + 3);
            uint64_t v90 = *((void *)v80 + 4);
            *(_DWORD *)uint64_t buf = 134350337;
            uint64_t v123 = v85;
            __int16 v124 = 2049;
            unint64_t v125 = v86;
            __int16 v126 = 2049;
            *(void *)int v127 = v87;
            *(_WORD *)&v127[8] = 2049;
            *(void *)char v128 = v88;
            *(_WORD *)&v128[8] = 2049;
            *(void *)uint64_t v129 = v89;
            *(_WORD *)&v129[8] = 2049;
            *(void *)int v130 = v90;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,regeneratedMMKF,fromfBaroBiasHistory,time,%{public}lf,fBaroBiasHistoryNum,%{private}lu,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            uint64_t v92 = *(void *)(a2 + 64);
            unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102[16] - v102[15]) >> 4);
            uint64_t v94 = *((void *)v80 + 1);
            uint64_t v95 = *((void *)v80 + 2);
            uint64_t v96 = *((void *)v80 + 3);
            uint64_t v97 = *((void *)v80 + 4);
            int v107 = 134350337;
            uint64_t v108 = v92;
            __int16 v109 = 2049;
            unint64_t v110 = v93;
            __int16 v111 = 2049;
            *(void *)__int16 v112 = v94;
            *(_WORD *)&v112[8] = 2049;
            *(void *)__int16 v113 = v95;
            *(_WORD *)&v113[8] = 2049;
            *(void *)__int16 v114 = v96;
            *(_WORD *)&v114[8] = 2049;
            *(void *)uint64_t v115 = v97;
            unint64_t v98 = (char *)_os_log_send_and_compose_impl();
            BOOL result = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::removeDupeBaroBiasMMKF(const CLBaroAltEstimatorInput &, std::deque<BaroBiasEstimate> &)", "%s\n", v98);
            if (v98 != (char *)buf) {
              free(v98);
            }
          }
          v80 += 40;
          if (v80 - (unsigned char *)*v83 == 4080)
          {
            uint64_t v91 = (char *)v83[1];
            ++v83;
            uint64_t v80 = v91;
          }
        }
        while (v80 != (char *)v81);
        uint64_t v5 = v102;
        uint64_t v77 = v102[15];
        uint64_t v82 = v102[16];
        uint64_t v4 = a2;
      }
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v82 - v77) >> 4) > 1) {
      sub_101881844(*(double *)(v4 + 72), result, v102 + 15);
    }
    *((unsigned char *)v5 + 96) = 0;
  }
LABEL_79:
  __int16 v99 = (void **)*((void *)&v104 + 1);
  *((void *)&v106 + 1) = 0;
  unint64_t v100 = v105 - *((void *)&v104 + 1);
  if ((void)v105 - *((void *)&v104 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v99);
      __int16 v99 = (void **)(*((void *)&v104 + 1) + 8);
      *((void *)&v104 + 1) = v99;
      unint64_t v100 = v105 - (void)v99;
    }
    while ((void)v105 - (void)v99 > 0x10uLL);
  }
  if (v100 >> 3 == 1)
  {
    uint64_t v101 = 51;
LABEL_85:
    *(void *)&long long v106 = v101;
  }
  else if (v100 >> 3 == 2)
  {
    uint64_t v101 = 102;
    goto LABEL_85;
  }
  v5[67] = *(void *)(v4 + 72);
  return sub_1003BE294(&v104);
}

void sub_101881448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1003BE294((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_101881478(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  double v4 = *(double *)(a2 + 16) * *(double *)(a2 + 16) * 144.030962;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  unint64_t v9 = a1[17];
  uint64_t v7 = (uint64_t)(a1 + 17);
  unint64_t v8 = v9;
  unint64_t v10 = *(void *)(v7 - 8);
  if (v10 >= v9)
  {
    uint64_t v12 = (void **)(v7 - 16);
    uint64_t v13 = *(void *)(v7 - 16);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v13) >> 4);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v13) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      double v18 = (char *)sub_10014F86C(v7, v17);
    }
    else {
      double v18 = 0;
    }
    unint64_t v19 = &v18[48 * v14];
    uint64_t v20 = &v18[48 * v17];
    *unint64_t v19 = 1;
    *((_DWORD *)v19 + 1) = 0;
    *((void *)v19 + 1) = v3;
    *((double *)v19 + 2) = v4;
    *((void *)v19 + 3) = 0;
    *((void *)v19 + 4) = v6;
    *((void *)v19 + 5) = v5;
    uint64_t v11 = v19 + 48;
    double v22 = (char *)a1[15];
    double v21 = (char *)a1[16];
    if (v21 != v22)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 3);
        long long v24 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v19 - 1) = v24;
        *((_OWORD *)v19 - 3) = v23;
        v19 -= 48;
        v21 -= 48;
      }
      while (v21 != v22);
      double v21 = (char *)*v12;
    }
    a1[15] = v19;
    a1[16] = v11;
    a1[17] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v10 = 1;
    *(_DWORD *)(v10 + 4) = 0;
    *(void *)(v10 + 8) = v3;
    *(double *)(v10 + 16) = v4;
    *(void *)(v10 + 24) = 0;
    uint64_t v11 = (char *)(v10 + 48);
    *(void *)(v10 + 32) = v6;
    *(void *)(v10 + 40) = v5;
  }
  a1[16] = v11;
}

uint64_t sub_1018815D8(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  uint64_t v4 = a4[1];
  if (*a4 == v4) {
    return 0;
  }
  while (vabdd_f64(*(double *)(v5 + 8), a1) >= 27.963)
  {
    v5 += 48;
    if (v5 == v4) {
      return 0;
    }
  }
  *(void *)(v5 + 40) = *(void *)(a3 + 272);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  unint64_t v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a3 + 72);
    uint64_t v11 = *(void *)(v5 + 8);
    uint64_t v12 = *(void *)(v5 + 16);
    uint64_t v13 = *(void *)(v5 + 32);
    uint64_t v14 = *(void *)(v5 + 40);
    *(_DWORD *)uint64_t buf = 134350337;
    uint64_t v17 = v10;
    __int16 v18 = 2049;
    double v19 = a1;
    __int16 v20 = 2049;
    uint64_t v21 = v11;
    __int16 v22 = 2049;
    uint64_t v23 = v12;
    __int16 v24 = 2049;
    uint64_t v25 = v13;
    __int16 v26 = 2049;
    uint64_t v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,foundMatchingKF,time,%{public}lf,fBaroBiasUsingReferencePressure,%{private}.2lf,X,%{private}.2lf,P,%{private}.4lf,Mu,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    unint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::findMatchingBaroBiasMMKFAndUpdateCalTemperature(const CLBaroAltEstimatorInput &, const double, std::vector<BarometricBiasMMKF> &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return 1;
}

void sub_101881844(double a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *a3;
  double v6 = *(double *)(*a3 + 8);
  while (v5 != a3[1])
  {
    if (v6 > *(double *)(v5 + 8)) {
      double v6 = *(double *)(v5 + 8);
    }
    v5 += 48;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134349313;
    double v68 = a1;
    __int16 v69 = 2049;
    double v70 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProb,time,%{public}lf,baseBias,%{private}.3lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    int v55 = 134349313;
    double v56 = a1;
    __int16 v57 = 2049;
    double v58 = v6;
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
  std::string __p = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    double v10 = 0.0;
    do
    {
      if (*(double *)(v8 + 8) - v6 >= 1.0) {
        double v11 = *(double *)(v8 + 8) - v6;
      }
      else {
        double v11 = 1.0;
      }
      uint64_t v12 = v53;
      if (v53 >= v54)
      {
        uint64_t v14 = __p;
        uint64_t v15 = v53 - __p;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v17 = (char *)v54 - (char *)__p;
        if (((char *)v54 - (char *)__p) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          double v19 = (char *)sub_1000DA54C((uint64_t)&v54, v18);
          uint64_t v14 = __p;
          uint64_t v12 = v53;
        }
        else
        {
          double v19 = 0;
        }
        __int16 v20 = (double *)&v19[8 * v15];
        *__int16 v20 = v11;
        uint64_t v13 = v20 + 1;
        while (v12 != v14)
        {
          uint64_t v21 = *((void *)v12-- - 1);
          *((void *)v20-- - 1) = v21;
        }
        std::string __p = v20;
        int v54 = (double *)&v19[8 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v53 = v11;
        uint64_t v13 = v53 + 1;
      }
      uint64_t v53 = v13;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      double v10 = v10 + fabs(v11);
      __int16 v22 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134349569;
        double v68 = a1;
        __int16 v69 = 2049;
        double v70 = v10;
        __int16 v71 = 2049;
        *(double *)uint64_t v72 = v11;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProb,time,%{public}lf,sumOfBaroBias,%{private}.3lf,biasDifference,%{private}lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        int v55 = 134349569;
        double v56 = a1;
        __int16 v57 = 2049;
        double v58 = v10;
        __int16 v59 = 2049;
        *(double *)uint64_t v60 = v11;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      v8 += 48;
    }
    while (v8 != v9);
    uint64_t v24 = *a3;
    uint64_t v25 = a3[1];
    if (*a3 != v25)
    {
      uint64_t v26 = 0;
      double v27 = 0.0;
      do
      {
        double v28 = *(double *)(v24 + 32);
        double v29 = __p[v26];
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v27 = v27 + v28 * v29 / v10;
        uint64_t v30 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          double v31 = __p[v26];
          *(_DWORD *)uint64_t buf = 134349569;
          double v68 = a1;
          __int16 v69 = 2049;
          double v70 = v27;
          __int16 v71 = 2049;
          *(double *)uint64_t v72 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProb,time,%{public}lf,sumOfmodeProb,%{private}.4lf,biasDifferenceVector,%{private}.3lf", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          double v32 = __p[v26];
          int v55 = 134349569;
          double v56 = a1;
          __int16 v57 = 2049;
          double v58 = v27;
          __int16 v59 = 2049;
          *(double *)uint64_t v60 = v32;
          uint64_t v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v33);
          if (v33 != (char *)buf) {
            free(v33);
          }
        }
        v24 += 48;
        ++v26;
      }
      while (v24 != v25);
      uint64_t v35 = *a3;
      uint64_t v34 = a3[1];
      if (*a3 != v34)
      {
        uint64_t v36 = 0;
        do
        {
          double v37 = log(*(long double *)(v35 + 32));
          long double v38 = log(__p[v36] / v10 / v27);
          *(long double *)(v35 + 32) = exp(v37 + v38);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          double v39 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            double v40 = __p[v36];
            uint64_t v41 = *(void *)(v35 + 8);
            uint64_t v42 = *(void *)(v35 + 16);
            uint64_t v43 = *(void *)(v35 + 32);
            uint64_t v44 = *(void *)(v35 + 40);
            *(_DWORD *)uint64_t buf = 134285057;
            double v68 = a1;
            __int16 v69 = 2049;
            double v70 = v40;
            __int16 v71 = 1025;
            *(_DWORD *)uint64_t v72 = v36;
            *(_WORD *)&v72[4] = 2049;
            *(void *)&v72[6] = v41;
            __int16 v73 = 2049;
            uint64_t v74 = v42;
            __int16 v75 = 2049;
            uint64_t v76 = v43;
            __int16 v77 = 2049;
            uint64_t v78 = v44;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,modeProbFinal,time,%{private}.4lf,heightDifferenceVector,%{private}.3lf,KF,%{private}d,X,%{private}.2lf,P,%{private}.4lf,baroKFModeProbability,%{private}.4lf,deviceBaroTempAtCalib_C,%{private}.2lf", buf, 0x44u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            double v45 = __p[v36];
            uint64_t v46 = *(void *)(v35 + 8);
            uint64_t v47 = *(void *)(v35 + 16);
            uint64_t v48 = *(void *)(v35 + 32);
            uint64_t v49 = *(void *)(v35 + 40);
            int v55 = 134285057;
            double v56 = a1;
            __int16 v57 = 2049;
            double v58 = v45;
            __int16 v59 = 1025;
            *(_DWORD *)uint64_t v60 = v36;
            *(_WORD *)&v60[4] = 2049;
            *(void *)&v60[6] = v46;
            __int16 v61 = 2049;
            uint64_t v62 = v47;
            __int16 v63 = 2049;
            uint64_t v64 = v48;
            __int16 v65 = 2049;
            uint64_t v66 = v49;
            uint64_t v50 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::updateModeProbBaroBiasMMKF(const CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v50);
            if (v50 != (char *)buf) {
              free(v50);
            }
          }
          ++v36;
          v35 += 48;
        }
        while (v35 != v34);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1018820BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018820F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, int a6)
{
  uint64_t v7 = a1;
  uint64_t v8 = (unsigned __int8 *)*a5;
  uint64_t v88 = (unsigned __int8 *)a5[1];
  if ((unsigned __int8 *)*a5 != v88)
  {
    int v10 = 0;
    do
    {
      if (!*v8 || *((int *)v8 + 1) >= 1801)
      {
        *uint64_t v8 = 1;
        *((void *)v8 + 1) = *(void *)(a3 + 8);
        *((void *)v8 + 2) = 0x408200FD8ADAB9F5;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v11 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(a2 + 72);
          int v13 = *v8;
          int v14 = *((_DWORD *)v8 + 1);
          uint64_t v15 = *((void *)v8 + 1);
          uint64_t v16 = *((void *)v8 + 2);
          *(_DWORD *)uint64_t buf = 134350081;
          uint64_t v91 = v12;
          __int16 v92 = 1025;
          *(_DWORD *)unint64_t v93 = v13;
          *(_WORD *)&v93[4] = 1025;
          *(_DWORD *)&v93[6] = v14;
          *(_WORD *)&v93[10] = 2049;
          *(void *)&v93[12] = v15;
          *(_WORD *)&v93[20] = 2049;
          *(void *)&v93[22] = v16;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,initializeBaroKF,time,%{public}lf,baroKFInit,%{private}d,numBaroKFInnovTestsRejected,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf", buf, 0x2Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          uint64_t v60 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v60);
          if (v60 != (char *)buf) {
            free(v60);
          }
        }
        *((_DWORD *)v8 + 1) = 0;
      }
      double v17 = vabdd_f64(*(double *)(a2 + 72), *(double *)a3);
      if (*(unsigned char *)(v7 + 96)) {
        double v18 = v17;
      }
      else {
        double v18 = 1.0;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      double v19 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = *(void *)(a2 + 72);
        uint64_t v21 = *((void *)v8 + 1);
        uint64_t v22 = *((void *)v8 + 2);
        *(_DWORD *)uint64_t buf = 134350081;
        uint64_t v91 = v20;
        __int16 v92 = 2049;
        *(void *)unint64_t v93 = v21;
        *(_WORD *)&v93[8] = 2049;
        *(void *)&v93[10] = v22;
        *(_WORD *)&v93[18] = 2049;
        *(void *)&v93[20] = 0x3FD0000000000000;
        *(_WORD *)&v93[28] = 2049;
        *(double *)&v93[30] = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,propagateP,time,%{public}lf,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,kProcessNoiseBaroBias_pa2,%{private}.4lf,dt,%{private}.3lf", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        __int16 v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v57);
        if (v57 != (char *)buf) {
          free(v57);
        }
      }
      double v23 = *((double *)v8 + 1);
      double v24 = *((double *)v8 + 2) + v18 * 0.25;
      *((double *)v8 + 2) = v24;
      double v25 = *(double *)(a2 + 136);
      BOOL v26 = v25 > 4.46 || v25 <= 0.0;
      double v27 = *(double *)(a3 + 16) * *(double *)(a3 + 16) * 144.030962
          + 6.25
          + v25 * (v25 * 0.6125) * (v25 * (v25 * 0.6125));
      if (v26) {
        double v27 = *(double *)(a3 + 16) * *(double *)(a3 + 16) * 144.030962 + 6.25;
      }
      double v28 = *(double *)(a3 + 8) - v23;
      double v29 = v24 + v27;
      if (*(unsigned char *)(v7 + 96))
      {
        double v30 = v28 * (v28 * -0.5) / v29 + log(v24 + v27) * -0.5 + 2.99573227;
        if (v30 < -1.0) {
          double v30 = -1.0;
        }
        *((double *)v8 + 3) = v30;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v31 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v32 = *(void *)(a2 + 72);
          uint64_t v33 = *((void *)v8 + 3);
          *(_DWORD *)uint64_t buf = 134349825;
          uint64_t v91 = v32;
          __int16 v92 = 2049;
          *(void *)unint64_t v93 = v33;
          *(_WORD *)&v93[8] = 2049;
          *(double *)&v93[10] = v28;
          *(_WORD *)&v93[18] = 2049;
          *(double *)&v93[20] = v29;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,Likelihood,time,%{public}lf,baroKFLikelihoodLog,%{private}.4lf,innov,%{private}.2lf,innovVar,%{private}.4lf", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          __int16 v59 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v59);
          if (v59 != (char *)buf) {
            free(v59);
          }
        }
      }
      if (fabs(v28 * v28 / v29) >= 2.0)
      {
        ++*((_DWORD *)v8 + 1);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v45 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v46 = *(void *)(a2 + 72);
          uint64_t v47 = *((void *)v8 + 1);
          uint64_t v48 = *((void *)v8 + 2);
          *(_DWORD *)uint64_t buf = 134350081;
          uint64_t v91 = v46;
          __int16 v92 = 2049;
          *(void *)unint64_t v93 = v47;
          *(_WORD *)&v93[8] = 2049;
          *(double *)&v93[10] = v28;
          *(_WORD *)&v93[18] = 2049;
          *(void *)&v93[20] = v48;
          *(_WORD *)&v93[28] = 2049;
          *(double *)&v93[30] = v29;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,innovTests,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf", buf, 0x34u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          uint64_t v62 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v62);
          if (v62 != (char *)buf) {
            free(v62);
          }
        }
      }
      else
      {
        double v34 = *((double *)v8 + 2);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v35 = qword_102419388;
        double v36 = v34 / v29;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v37 = *(void *)(a2 + 72);
          uint64_t v38 = *((void *)v8 + 1);
          uint64_t v39 = *((void *)v8 + 2);
          *(_DWORD *)uint64_t buf = 134350337;
          uint64_t v91 = v37;
          __int16 v92 = 2049;
          *(void *)unint64_t v93 = v38;
          *(_WORD *)&v93[8] = 2049;
          *(double *)&v93[10] = v28;
          *(_WORD *)&v93[18] = 2049;
          *(void *)&v93[20] = v39;
          *(_WORD *)&v93[28] = 2049;
          *(double *)&v93[30] = v29;
          *(_WORD *)&v93[38] = 2049;
          *(double *)&v93[40] = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,kalmanGain,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf,K,%{private}.4lf", buf, 0x3Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          __int16 v61 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v61);
          if (v61 != (char *)buf) {
            free(v61);
          }
        }
        double v40 = (1.0 - v36) * *((double *)v8 + 2);
        *((double *)v8 + 1) = *((double *)v8 + 1) + v36 * v28;
        *((double *)v8 + 2) = v40;
        if (COERCE__INT64(fabs(v40)) > 0x7FEFFFFFFFFFFFFFLL || v40 < 0.0001)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          uint64_t v41 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v42 = *(void *)(a2 + 72);
            uint64_t v43 = *((void *)v8 + 1);
            uint64_t v44 = *((void *)v8 + 2);
            *(_DWORD *)uint64_t buf = 134350081;
            uint64_t v91 = v42;
            __int16 v92 = 2049;
            *(void *)unint64_t v93 = v43;
            *(_WORD *)&v93[8] = 2049;
            *(double *)&v93[10] = v28;
            *(_WORD *)&v93[18] = 2049;
            *(void *)&v93[20] = v44;
            *(_WORD *)&v93[28] = 2049;
            *(double *)&v93[30] = v29;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,partialCovResetBaroKF,time,%{public}lf,baroKFX_pa,%{private}.2lf,innov,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innovVar,%{private}.4lf", buf, 0x34u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            __int16 v63 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v63);
            if (v63 != (char *)buf) {
              free(v63);
            }
          }
          *((void *)v8 + 1) = *(void *)(a3 + 8);
          *((void *)v8 + 2) = 0x408200FD8ADAB9F5;
        }
        *((_DWORD *)v8 + 1) = 0;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v49 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v50 = *(void *)(a2 + 72);
        uint64_t v51 = *((void *)v8 + 1);
        uint64_t v52 = *((void *)v8 + 2);
        uint64_t v53 = *(void *)(a3 + 8);
        int v54 = *((_DWORD *)v8 + 1);
        uint64_t v55 = *((void *)v8 + 3);
        uint64_t v56 = *((void *)v8 + 4);
        *(_DWORD *)uint64_t buf = 134351617;
        uint64_t v91 = v50;
        __int16 v92 = 1025;
        *(_DWORD *)unint64_t v93 = v10;
        *(_WORD *)&v93[4] = 2049;
        *(void *)&v93[6] = v51;
        *(_WORD *)&v93[14] = 2049;
        *(void *)&v93[16] = v52;
        *(_WORD *)&v93[24] = 2049;
        *(double *)&v93[26] = v28;
        *(_WORD *)&v93[34] = 2049;
        *(double *)&v93[36] = v29;
        *(_WORD *)&v93[44] = 2049;
        *(void *)&v93[46] = 0x4000000000000000;
        __int16 v94 = 2049;
        uint64_t v95 = v53;
        __int16 v96 = 1025;
        int v97 = v54;
        __int16 v98 = 2049;
        uint64_t v99 = v55;
        __int16 v100 = 2049;
        uint64_t v101 = v56;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,updtBaroKF,time,%{public}lf,kfIndex,%{private}d,baroKFX_pa,%{private}.2lf,baroKFP_pa2,%{private}.4lf,innov,%{private}.2lf,innovVar,%{private}.4lf,innovVarThres,%{private}.1lf,fBaroBiasUsingReferencePressure,%{private}.2lf,numBaroKFInnovTestsRejected,%{private}d,baroKFLikelihoodLog,%{private}.4lf,baroKFModeProbability,%{private}.4lf", buf, 0x68u);
      }
      a1 = sub_10013D1A0(115, 2);
      if (a1)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        double v58 = (char *)_os_log_send_and_compose_impl();
        a1 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v58);
        if (v58 != (char *)buf) {
          free(v58);
        }
      }
      ++v10;
      v8 += 48;
    }
    while (v8 != v88);
  }
  uint64_t v64 = a5;
  if (*(unsigned char *)(v7 + 96))
  {
    double v65 = *(double *)(a2 + 72);
    if (vabdd_f64(v65, *(double *)(v7 + 528)) > 180.0)
    {
      *(double *)(v7 + 528) = v65;
      uint64_t v66 = *a5;
      uint64_t v67 = a5[1];
      if (*a5 != v67)
      {
        do
        {
          long double v68 = log(*(long double *)(v66 + 32));
          *(long double *)(v66 + 32) = exp(v68 + *(double *)(v66 + 24));
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          __int16 v69 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v70 = *(void *)(a2 + 72);
            uint64_t v72 = *(void *)(v66 + 24);
            uint64_t v71 = *(void *)(v66 + 32);
            uint64_t v73 = *(void *)(v7 + 528);
            *(_DWORD *)uint64_t buf = 134349825;
            uint64_t v91 = v70;
            __int16 v92 = 2049;
            *(void *)unint64_t v93 = v71;
            *(_WORD *)&v93[8] = 2049;
            *(void *)&v93[10] = v72;
            *(_WORD *)&v93[18] = 2049;
            *(void *)&v93[20] = v73;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,updtModeProbBefore,likelihood,time,%{public}lf,baroKFModeProbability,%{private}.4lf,baroKFLikelihoodLog,%{private}.4lf,fTimeOfLastBaroBiasLikelihoodUpdate,%{private}.4lf", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            uint64_t v74 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v74);
            if (v74 != (char *)buf) {
              free(v74);
            }
          }
          v66 += 48;
        }
        while (v66 != v67);
        double v65 = *(double *)(a2 + 72);
        uint64_t v64 = a5;
      }
      sub_101884818(v7, v64, v65);
    }
  }
  __int16 v77 = v64;
  __int16 v75 = (double *)*v64;
  uint64_t v76 = (double *)v77[1];
  unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 4);
  if (v78 >= 2)
  {
    *(double *)(v7 + 104) = v75[4];
    *(_DWORD *)(v7 + 100) = 0;
  }
  int v79 = a6;
  if (v75 != v76)
  {
    int v80 = 0;
    do
    {
      sub_101884C00(v75[1], v75[2] / 144.030962, v75[4], v75[5], a1, a2, a4, v79, v80);
      if ((v78 > 1 || *(unsigned char *)(v7 + 112)) && v75[4] > *(double *)(v7 + 104))
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        unint64_t v81 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v82 = *(void *)(a2 + 72);
          uint64_t v83 = *(void *)(v7 + 104);
          uint64_t v84 = *((void *)v75 + 4);
          *(_DWORD *)uint64_t buf = 134349825;
          uint64_t v91 = v82;
          __int16 v92 = 1025;
          *(_DWORD *)unint64_t v93 = v80;
          *(_WORD *)&v93[4] = 2049;
          *(void *)&v93[6] = v83;
          *(_WORD *)&v93[14] = 2049;
          *(void *)&v93[16] = v84;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,bestModeProb,time,%{public}lf,KF,%{private}d,bestKFModeProb,%{private}.4lf,baroKFModeProbability,%{private}.4lf", buf, 0x26u);
        }
        a1 = sub_10013D1A0(115, 2);
        if (a1)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          uint64_t v85 = (char *)_os_log_send_and_compose_impl();
          a1 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::predictAndUpdateBaroBiasMMKF(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, std::vector<BarometricBiasMMKF> &, const int)", "%s\n", v85);
          if (v85 != (char *)buf) {
            free(v85);
          }
        }
        *(_DWORD *)(v7 + 100) = v80;
        *(double *)(v7 + 104) = v75[4];
        int v79 = a6;
      }
      ++v80;
      v75 += 6;
    }
    while (v75 != v76);
  }
}

BOOL sub_101883374(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6, void *a7, double *a8)
{
  if (*a8 <= 2.22044605e-16 || *(double *)(a2 + 184) <= 2.22044605e-16)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      double v16 = *a8;
      uint64_t v17 = *(void *)(a2 + 184);
      *(_DWORD *)uint64_t buf = 134349312;
      double v22 = v16;
      __int16 v23 = 2050;
      uint64_t v24 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,not DEM calibrated or no odometer data ever received,calTime,%{public}lf,odomTime,%{public}lf,", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v20 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeDEMCalibratedAlt(CLBaroAltEstimatorInput &, const double &, const double &, double &, double &, CFTimeInterval &, const CFTimeInterval &)", "%s\n");
      goto LABEL_28;
    }
  }
  else
  {
    *a5 = *a3 + *(double *)(a2 + 168);
    double v10 = (*(double *)(a2 + 64) - *a8) * 0.000555555556 * ((*(double *)(a2 + 64) - *a8) * 0.000555555556)
        + *a4 * *a4
        + 0.25
        + (*(double *)(a2 + 64) - *(double *)(a2 + 184)) * 0.2;
    unint64_t v11 = (unint64_t)(COERCE__INT64(fabs(v10)) - 0x10000000000000) >> 53;
    if (*(uint64_t *)&v10 > -1 && v11 < 0x3FF || (unint64_t)(*(void *)&v10 - 1) < 0xFFFFFFFFFFFFFLL)
    {
      *a6 = sqrt(v10);
      *a7 = *(void *)(a2 + 184);
      return 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    double v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "BaroAlt,#Warning,calibratedAltitudeVariance unexpectedly negative", buf, 2u);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v20 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBarometricAltimeterCore::computeDEMCalibratedAlt(CLBaroAltEstimatorInput &, const double &, const double &, double &, double &, CFTimeInterval &, const CFTimeInterval &)", "%s\n");
LABEL_28:
      if (v20 != buf) {
        free(v20);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_101883734(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, long double *a5, void *a6)
{
  uint64_t v12 = (uint64_t *)(a2 + 64);
  double v13 = *(double *)(a2 + 64);
  double v14 = fabs(v13);
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 <= 2.22044605e-16)
  {
    double v16 = 315360000.0;
  }
  else
  {
    double v17 = *(double *)(a2 + 80);
    double v18 = fabs(v17);
    double v19 = vabdd_f64(v13, v17);
    if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v18 <= 2.22044605e-16) {
      double v16 = 315360000.0;
    }
    else {
      double v16 = v19;
    }
  }
  double v21 = sub_1000A4CE8(a1, (double *)(a2 + 64));
  double v22 = 0.0;
  if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v21) > 2.22044605e-16)
  {
    double v23 = vabdd_f64(v21, *(double *)a3);
    if (fabs(*(double *)a3) <= 2.22044605e-16) {
      double v23 = 0.0;
    }
    if ((*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) {
      double v22 = v23;
    }
    else {
      double v22 = 0.0;
    }
  }
  double v49 = v22;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  uint64_t v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *v12;
    double v26 = *(double *)(a3 + 8);
    *(_DWORD *)uint64_t buf = 134349825;
    uint64_t v67 = v25;
    __int16 v68 = 2049;
    double v69 = v16;
    __int16 v70 = 2050;
    double v71 = v22;
    __int16 v72 = 2050;
    double v73 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BaroAlt,check ReferencePressure,time,%{public}lf,timeSinceLastReferencePressureQuery,%{private}lf,timeSinceLastReferencePressureCompensatedBaroBiasComputation,%{public}lf,fBaroBiasUsingReferencePressure,%{public}lf", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    uint64_t v37 = *v12;
    double v38 = *(double *)(a3 + 8);
    int v50 = 134349825;
    uint64_t v51 = v37;
    __int16 v52 = 2049;
    double v53 = v16;
    __int16 v54 = 2050;
    double v55 = v22;
    __int16 v56 = 2050;
    double v57 = v38;
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureCompensatedAlt(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, double &, double &, CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  uint64_t result = 0;
  if (v16 > 0.0 && v16 < 900.0)
  {
    *a4 = log(*(double *)(a2 + 96) / (*(double *)(a2 + 264) - *(double *)(a3 + 8))) * 8442.795;
    *a6 = *(void *)(a2 + 256);
    uint64_t result = sub_101883C9C(a1, a2, (double *)a3, a4, a5, &v49);
    if (result)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      double v28 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(void *)(a2 + 64);
        double v30 = *(double *)(a2 + 264);
        double v32 = *(double *)a3;
        double v31 = *(double *)(a3 + 8);
        uint64_t v34 = *(void *)(a3 + 16);
        uint64_t v33 = *(void *)(a3 + 24);
        uint64_t v35 = *(void *)(a3 + 32);
        uint64_t v36 = *(void *)(a2 + 280);
        *(_DWORD *)uint64_t buf = 134350849;
        uint64_t v67 = v29;
        __int16 v68 = 2050;
        double v69 = v31;
        __int16 v70 = 2050;
        double v71 = v30;
        __int16 v72 = 2049;
        double v73 = v32;
        __int16 v74 = 2049;
        uint64_t v75 = v33;
        __int16 v76 = 2049;
        uint64_t v77 = v34;
        __int16 v78 = 2049;
        uint64_t v79 = v35;
        __int16 v80 = 2049;
        uint64_t v81 = v36;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "BaroAlt,calibrated,using ReferencePressure,time,%{public}.3lf,fBaroBiasUsingReferencePressure,%{public}.3lf,measuredPressure,%{public}.3lf,fTimeOfLastBaroBiasUsingReferencePressure,%{private}.3lf,baroBiasCFAbsoluteTime_s,%{private}.3lf,referencePressureCompensatedCalibrationUnc,%{private}.3lf, baroBiasModeProbability,%{private}.3lf,lastAltitudeDataPressureTempAtCalib_C,%{private}.3lf", buf, 0x52u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v40 = *(void *)(a2 + 64);
        double v41 = *(double *)(a2 + 264);
        double v43 = *(double *)a3;
        double v42 = *(double *)(a3 + 8);
        uint64_t v45 = *(void *)(a3 + 16);
        uint64_t v44 = *(void *)(a3 + 24);
        uint64_t v46 = *(void *)(a3 + 32);
        uint64_t v47 = *(void *)(a2 + 280);
        int v50 = 134350849;
        uint64_t v51 = v40;
        __int16 v52 = 2050;
        double v53 = v42;
        __int16 v54 = 2050;
        double v55 = v41;
        __int16 v56 = 2049;
        double v57 = v43;
        __int16 v58 = 2049;
        uint64_t v59 = v44;
        __int16 v60 = 2049;
        uint64_t v61 = v45;
        __int16 v62 = 2049;
        uint64_t v63 = v46;
        __int16 v64 = 2049;
        uint64_t v65 = v47;
        uint64_t v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureCompensatedAlt(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, double &, double &, CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_101883C9C(uint64_t a1, uint64_t a2, double *a3, double *a4, long double *a5, double *a6)
{
  if (*a6 <= 3628800.0) {
    double v6 = a3[2] * a3[2] + 0.25;
  }
  else {
    double v6 = a3[2] * a3[2] + 0.25 + (*a6 + -3628800.0) * 0.000000413359788;
  }
  BOOL v8 = (((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF || v6 < 0.0)
    && (unint64_t)(*(void *)&v6 - 1) >= 0xFFFFFFFFFFFFFLL;
  uint64_t v9 = !v8;
  if (v8)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    double v32 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v52 = v6;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,ReferencePressure compensated computedAltVar_m2 is invalid,%{public}.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
  }
  else
  {
    *a5 = sqrt(v6);
    if (!*(unsigned char *)(a1 + 113))
    {
      double v35 = *(double *)(a2 + 104);
      long double v36 = exp(*(double *)(a2 + 120) / -8442.795);
      double v37 = hypot(*(long double *)(a2 + 128), v35 * v36 * 0.083324376);
      a3[2] = v37;
      if (*a5 >= v37) {
        double v37 = *a5;
      }
      *a5 = v37;
      double v38 = *(double *)(a2 + 72);
      if ((*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v38) > 2.22044605e-16)
      {
        double v39 = fabs(*a3);
        double v40 = vabdd_f64(v38, *a3);
        BOOL v41 = v39 > 2.22044605e-16 && (*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        double v42 = v41 ? v40 : 0.0;
        if ((*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v39 > 2.22044605e-16 && v42 > 3628800.0)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          double v43 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            double v44 = *(double *)(a2 + 64);
            uint64_t v45 = *(void *)(a2 + 120);
            double v46 = *a5;
            *(_DWORD *)uint64_t buf = 134350081;
            double v52 = v44;
            __int16 v53 = 2049;
            uint64_t v54 = v45;
            __int16 v55 = 2049;
            double v56 = v46;
            __int16 v57 = 2049;
            double v58 = v42;
            __int16 v59 = 2049;
            double v60 = (v42 + -3628800.0) * 0.000000826719577;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,UncModel,uncChangeByTime,time,%{public}.3lf,calibrationSourceAlt_m,%{private}.3lf,computedAltUnc_m,%{private}.3lf,timeToLastBiasComputationCfAbsTime_s,%{private}.3lf,uncertaintyChange,%{private}.3lf", buf, 0x34u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            int v50 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v50);
            if (v50 != (char *)buf) {
              free(v50);
            }
          }
          *a5 = hypot(*a5, (v42 + -3628800.0) * 0.000000826719577);
        }
      }
    }
    char v13 = *(unsigned char *)(a2 + 176);
    if (!v13)
    {
      double v14 = *(double *)(a2 + 280);
      if (v14 != 0.0)
      {
        char v13 = 0;
        double v15 = *(double *)(a2 + 272);
        if (v15 != 0.0)
        {
          double v16 = vabdd_f64(v14, v15);
          if (v16 <= 35.0) {
            double v17 = v16 * 0.2;
          }
          else {
            double v17 = 7.0;
          }
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          double v18 = v14 - v15;
          double v19 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            double v20 = *(double *)(a2 + 64);
            double v22 = *(double *)(a2 + 272);
            uint64_t v21 = *(void *)(a2 + 280);
            uint64_t v23 = *(void *)(a2 + 288);
            *(_DWORD *)uint64_t buf = 134350337;
            double v52 = v20;
            __int16 v53 = 2049;
            uint64_t v54 = v21;
            __int16 v55 = 2049;
            double v56 = v22;
            __int16 v57 = 2049;
            double v58 = v18;
            __int16 v59 = 2049;
            double v60 = v17;
            __int16 v61 = 2049;
            uint64_t v62 = v23;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,UncModel,uncChangeByTemp,time,%{public}.3lf,lastAltitudeDataPressureTempAtCalib_C,%{private}.3lf,lastAltitudeDataPressureTemp_C,%{private}.3lf,temperatureChange_C,%{private}.3lf,uncertaintyChange,%{private}.3lf,outdoorProbability,%{private}.3lf", buf, 0x3Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            uint64_t v48 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v48);
            if (v48 != (char *)buf) {
              free(v48);
            }
          }
          *a5 = sqrt(v17 * v17 + *a5 * *a5);
          char v13 = *(unsigned char *)(a2 + 176) != 0;
        }
      }
      if ((v13 & 1) == 0)
      {
        double v24 = *(double *)(a2 + 160);
        if (v24 != 0.0)
        {
          double v25 = *a4 - v24;
          double v26 = fabs(v25);
          if (v26 > 10.0)
          {
            if (v26 <= 585.4) {
              double v27 = v26 * 0.02;
            }
            else {
              double v27 = 11.708;
            }
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102343F08);
            }
            double v28 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              double v29 = *(double *)(a2 + 64);
              uint64_t v30 = *(void *)(a2 + 120);
              double v31 = *a4;
              *(_DWORD *)uint64_t buf = 134350081;
              double v52 = v29;
              __int16 v53 = 2049;
              uint64_t v54 = v30;
              __int16 v55 = 2049;
              double v56 = v31;
              __int16 v57 = 2049;
              double v58 = v25;
              __int16 v59 = 2049;
              double v60 = v27;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,UncModel,uncChangeByAlt,time,%{public}.3lf,calibrationSourceAlt_m,%{private}.3lf,altitude,%{private}.3lf,altitudeFromGroundChange_m,%{private}.3lf,uncertaintyChange,%{private}.3lf", buf, 0x34u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_102343F08);
              }
              double v49 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::computeReferencePressureAltitudeUncertainty(const CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const double &, double &, const CFTimeInterval &, const CLDaemonLocation &)", "%s\n", v49);
              if (v49 != (char *)buf) {
                free(v49);
              }
            }
            *a5 = sqrt(v27 * v27 + *a5 * *a5);
          }
        }
      }
    }
  }
  return v9;
}

void sub_1018845B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  *a3 = *a4;
  a3[1] = *a5;
  a3[2] = *a7;
  *(void *)(a2 + 280) = *a6;
  a3[3] = *a8;
  a3[4] = *a9;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102343F08);
  }
  unint64_t v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = *(void *)(a2 + 280);
    uint64_t v15 = a3[2];
    uint64_t v16 = a3[3];
    uint64_t v17 = a3[4];
    *(_DWORD *)uint64_t buf = 134350337;
    uint64_t v20 = v12;
    __int16 v21 = 2050;
    uint64_t v22 = v13;
    __int16 v23 = 2050;
    uint64_t v24 = v14;
    __int16 v25 = 2050;
    uint64_t v26 = v15;
    __int16 v27 = 2049;
    uint64_t v28 = v16;
    __int16 v29 = 2049;
    uint64_t v30 = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,disk,injected,fTimeOfLastBaroBiasUsingReferencePressure,%{public}.3lf,fBaroBiasUsingReferencePressure,%{public}.3lf,fDeviceBarometerTemperatureAtCalib_C,%{public}.2lf,fReferencePressureCompensatedCalibrationUnc,%{public}.2lf,baroBiasCFAbsoluteTime_s,%{private}.3lf,baroBiasModeProbability,%{private}.3lf", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343F08);
    }
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::injectLatestBaroBiasInfoToBaroAltInOut(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, const CFAbsoluteTime &, const double &, const double &, const double &, const CFAbsoluteTime &, const double &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
}

void sub_101884818(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    double v8 = 0.0;
    do
    {
      double v9 = *(double *)(v3 + 32);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      double v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void *)(v3 + 32);
        *(_DWORD *)uint64_t buf = 134349313;
        double v23 = a3;
        __int16 v24 = 2049;
        uint64_t v25 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,baroKFModeProbability,time,%{public}.4lf,baroKFModeProbability,%{private}.4lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::renormalizeModeProbOfBaroBiasMMKF(CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      double v8 = v8 + v9;
      v3 += 48;
    }
    while (v3 != v4);
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    if (*a2 != v14)
    {
      double v15 = log(v8);
      do
      {
        long double v16 = log(*(long double *)(v13 + 32));
        *(long double *)(v13 + 32) = exp(v16 - v15);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v17 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v19 = *(void *)(v13 + 24);
          uint64_t v18 = *(void *)(v13 + 32);
          uint64_t v20 = *(void *)(a1 + 528);
          *(_DWORD *)uint64_t buf = 134349825;
          double v23 = a3;
          __int16 v24 = 2049;
          uint64_t v25 = v18;
          __int16 v26 = 2049;
          uint64_t v27 = v19;
          __int16 v28 = 2049;
          uint64_t v29 = v20;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,updtModeProbAfter,likelihood,time,%{public}lf,baroKFModeProbability,%{private}.4lf,baroKFLikelihoodLog,%{private}.4lf,fTimeOfLastBaroBiasLikelihoodUpdate,%{private}.3lf", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102343F08);
          }
          __int16 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::renormalizeModeProbOfBaroBiasMMKF(CFAbsoluteTime, std::vector<BarometricBiasMMKF> &)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        v13 += 48;
      }
      while (v13 != v14);
    }
  }
}

void sub_101884C00(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, void *a7, int a8, int a9)
{
  uint64_t v15 = a7[5];
  if ((int)v15 <= a9)
  {
    if ((int)v15 >= a8)
    {
      ++a7[4];
      a7[5] = v15 - 1;
      sub_100473B58((uint64_t)a7, 1);
    }
    *(void *)uint64_t buf = *(void *)(a6 + 72);
    *(double *)&uint8_t buf[8] = a1;
    *(double *)&uint8_t buf[16] = a2;
    *(double *)&unsigned char buf[24] = a3;
    *(double *)&buf[32] = a4;
    sub_10187DA04(a7, (uint64_t)buf);
  }
  else
  {
    unint64_t v17 = a7[4] + a9;
    uint64_t v18 = *(void *)(a7[1] + 8 * (v17 / 0x66));
    unint64_t v19 = v17 % 0x66;
    double v20 = *(double *)(v18 + 40 * v19 + 16);
    if (v20 > a2
      || ((double v21 = *(double *)(v18 + 40 * v19 + 24), v22 = vabdd_f64(v20, a2), v21 <= a3) ? (v23 = v22 < 0.25) : (v23 = 0),
          !v23 || vabdd_f64(v21, a3) >= 0.2))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343F08);
      }
      uint64_t v24 = a9;
      uint64_t v25 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        __int16 v26 = (void *)(*(void *)(a7[1] + 8 * ((a7[4] + v24) / 0x66uLL)) + 40 * ((a7[4] + v24) % 0x66uLL));
        uint64_t v27 = v26[1];
        uint64_t v28 = v26[2];
        uint64_t v30 = v26[3];
        uint64_t v29 = v26[4];
        uint64_t v31 = *(void *)(a6 + 64);
        uint64_t v32 = *(void *)(a6 + 72);
        *(_DWORD *)uint64_t buf = 134351616;
        *(void *)&uint8_t buf[4] = v31;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v15;
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(void *)&unsigned char buf[20] = v27;
        *(_WORD *)&buf[28] = 2050;
        *(void *)&buf[30] = v28;
        *(_WORD *)&buf[38] = 2050;
        uint64_t v36 = v30;
        __int16 v37 = 2050;
        uint64_t v38 = v29;
        __int16 v39 = 2050;
        double v40 = a1;
        __int16 v41 = 2050;
        double v42 = a2;
        __int16 v43 = 2050;
        double v44 = a3;
        __int16 v45 = 2050;
        double v46 = a4;
        __int16 v47 = 2050;
        uint64_t v48 = v32;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,disk,updateBi,time,%{public}lf,fBaroBiasHistory,size,%{public}d,kPrevBaroAltBaroBias_pa,%{public}.2lf,kPrevBaroAltBaroBiasUnc_m,%{public}.2lf,kPrevBaroAltBaroBiasModeProb,%{public}.4lf,kPrevBaroAltDevPresTemp_C,%{public}.3lf,kBaroAltBaroBias_pa,%{public}.2lf,kBaroAltBaroBiasUnc_m,%{public}.2lf,kBaroAltBaroBiasModeProb,%{public}.4lf,devPresTemp_C,%{public}.3lf,kBaroAltBaroBiasCFAbsTime_s,%{public}lf", buf, 0x6Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343F08);
        }
        uint64_t v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::prepareBaroBiasToDisk(const CLBaroAltEstimatorInput &, const double, const double, const double, const double, std::deque<BaroBiasEstimate> &, const int, const int)", "%s\n", v34);
        if (v34 != buf) {
          free(v34);
        }
      }
      unint64_t v33 = *(void *)(a7[1] + 8 * ((a7[4] + v24) / 0x66uLL)) + 40 * ((a7[4] + v24) % 0x66uLL);
      *(void *)unint64_t v33 = *(void *)(a6 + 72);
      *(double *)(v33 + 8) = a1;
      *(double *)(v33 + 16) = a2;
      *(double *)(v33 + 24) = a3;
      *(double *)(v33 + 32) = a4;
    }
  }
}

void sub_101885030(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101885060(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10188532C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101885378(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      unint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 51;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 102;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_10188541C((void **)a1);
  uint64_t result = sub_101885574(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10188541C(void **a1)
{
  if (a1[5])
  {
    sub_100473B58((uint64_t)a1, 0);
    sub_10017D8E8(a1, 0);
  }
  else
  {
    BOOL v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      BOOL v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_1018854A0(a1);
}

void sub_1018854A0(void **a1)
{
  BOOL v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    BOOL v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  BOOL v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_101885574(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_1018854A0((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_1018857EC(uint64_t a1, void *a2)
{
  if (!a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#gnssca,onVisit is nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    LOWORD(v18[0]) = 0;
    uint64_t v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAWD::onVisit(const CLVisit *)", "%s\n");
LABEL_51:
    if (v11 != buf) {
      free(v11);
    }
    return;
  }
  unsigned int v3 = [a2 hasDepartureDate];
  if (*(unsigned __int8 *)(a1 + 2296) == v3) {
    return;
  }
  *(unsigned char *)(a1 + 2296) = v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 2296);
    *(_DWORD *)uint64_t buf = 67174657;
    int v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssca,onVisit,received leeched visit notification, %{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v15 = *(unsigned __int8 *)(a1 + 2296);
    v18[0] = 67174657;
    v18[1] = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onVisit(const CLVisit *)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (*(unsigned char *)(a1 + 2316)) {
    int v6 = 2;
  }
  else {
    int v6 = 4;
  }
  if (*(unsigned char *)(a1 + 2316)) {
    int v7 = 1;
  }
  else {
    int v7 = 3;
  }
  int v17 = v7;
  v18[0] = v6;
  if (!sub_10011853C((void *)(a1 + 2208), v18) || !sub_10011853C((void *)(a1 + 2208), &v17))
  {
    if (!*(unsigned char *)(a1 + 2402)) {
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,onVisit,visit context unsupported", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onVisit(const CLVisit *)", "%s\n");
    goto LABEL_51;
  }
  if (*(unsigned char *)(a1 + 2296))
  {
    uint64_t v8 = sub_10011853C((void *)(a1 + 2208), v18);
    if (v8)
    {
      for (uint64_t i = v8[5]; i; uint64_t i = *(void *)i)
      {
        if (sub_101894EC4(a1, v18[0], *(_DWORD *)(i + 16))) {
          sub_101894C38(a1, v17, *(_DWORD *)(i + 16));
        }
      }
      return;
    }
LABEL_53:
    sub_10000EDDC("unordered_map::at: key not found");
  }
  uint64_t v13 = sub_10011853C((void *)(a1 + 2208), &v17);
  if (!v13) {
    goto LABEL_53;
  }
  for (uint64_t j = v13[5]; j; uint64_t j = *(void *)j)
  {
    if (sub_101894EC4(a1, v17, *(_DWORD *)(j + 16))) {
      sub_101894C38(a1, v18[0], *(_DWORD *)(j + 16));
    }
  }
}

void sub_101885D08(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v3 = a1 + 16;
  *(void *)(a1 + 24) = 0xBFF0000000000000;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(void *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = a1 + 320;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 336) = a1 + 344;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_WORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 848) = -1;
  *(void *)(a1 + 840) = -1;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_WORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(unsigned char *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 996) = xmmword_101E44C00;
  *(void *)(a1 + 1016) = 0;
  *(unsigned char *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1028) = 0;
  *(_WORD *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1067) = 0;
  *(_OWORD *)(a1 + 1036) = 0u;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(void *)(a1 + 1104) = 0xFFFFFFFF00000000;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(void *)(a1 + 1112) = -1;
  *(unsigned char *)(a1 + 1120) = 0;
  *(void *)(a1 + 1128) = 0xBFF0000000000000;
  *(void *)(a1 + 1136) = 0xFFFFFFFF00000001;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1160) = -1;
  *(void *)(a1 + 1168) = -1;
  *(void *)(a1 + 1176) = -1;
  *(void *)(a1 + 1184) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(void *)(a1 + 1216) = a1 + 1224;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(void *)(a1 + 1240) = a1 + 1248;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(void *)(a1 + 1264) = a1 + 1272;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(void *)(a1 + 1288) = a1 + 1296;
  *(void *)(a1 + 1312) = 0;
  *(unsigned char *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(void *)(a1 + 1344) = -1;
  *(void *)(a1 + 1352) = -1;
  *(_DWORD *)(a1 + 1360) = -1;
  *(void *)(a1 + 1368) = 0;
  *(_DWORD *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1404) = v4;
  *(_OWORD *)(a1 + 1420) = v4;
  *(_OWORD *)(a1 + 1436) = v4;
  *(_OWORD *)(a1 + 1452) = v4;
  *(_OWORD *)(a1 + 1468) = v4;
  *(_OWORD *)(a1 + 1484) = v4;
  *(_OWORD *)(a1 + 1500) = v4;
  *(_OWORD *)(a1 + 1516) = v4;
  *(_OWORD *)(a1 + 1532) = v4;
  *(_OWORD *)(a1 + 1548) = v4;
  *(_DWORD *)(a1 + 1564) = -1;
  *(void *)(a1 + 1568) = 0xBFF0000000000000;
  *(void *)(a1 + 1584) = -1;
  *(void *)(a1 + 1576) = -1;
  *(void *)(a1 + 1592) = a1 + 1600;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(void *)(a1 + 1616) = a1 + 1624;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_DWORD *)(a1 + 1672) = 1065353216;
  *(void *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(void *)(a1 + 1704) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_DWORD *)(a1 + 1719) = 0;
  *(void *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1804) = 0u;
  *(_OWORD *)(a1 + 1788) = 0u;
  *(_OWORD *)(a1 + 1772) = 0u;
  *(_OWORD *)(a1 + 1756) = 0u;
  *(_OWORD *)(a1 + 1740) = 0u;
  *(_OWORD *)(a1 + 1724) = 0u;
  *(void *)(a1 + 1824) = a1 + 1832;
  *(_DWORD *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1900) = v4;
  *(_OWORD *)(a1 + 1916) = v4;
  *(_OWORD *)(a1 + 1884) = v4;
  *(void *)(a1 + 1952) = 0;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_DWORD *)(a1 + 1960) = -1;
  *(unsigned char *)(a1 + 1968) = 0;
  *(_DWORD *)(a1 + 1964) = 0;
  *(_DWORD *)(a1 + 2116) = -1;
  *(_OWORD *)(a1 + 2100) = v4;
  *(_OWORD *)(a1 + 2084) = v4;
  *(_OWORD *)(a1 + 2068) = v4;
  *(_OWORD *)(a1 + 2052) = v4;
  *(_OWORD *)(a1 + 2036) = v4;
  *(_OWORD *)(a1 + 2020) = v4;
  *(_OWORD *)(a1 + 2004) = v4;
  *(_OWORD *)(a1 + 1988) = v4;
  *(_OWORD *)(a1 + 1972) = v4;
  *(_WORD *)(a1 + 2120) = 0;
  *(unsigned char *)(a1 + 2122) = 0;
  *(void *)(a1 + 2124) = -1;
  *(unsigned char *)(a1 + 2132) = 0;
  *(void *)(a1 + 2136) = -1;
  *(_DWORD *)(a1 + 2147) = 0;
  *(_DWORD *)(a1 + 2144) = 0;
  *(void *)(a1 + 2152) = -1;
  *(_DWORD *)(a1 + 2160) = -1;
  *(unsigned char *)(a1 + 2164) = 0;
  *(void *)(a1 + 2168) = -1;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_DWORD *)(a1 + 2240) = 1065353216;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(void *)(a1 + 2264) = 0x40F5180000000000;
  *(void *)(a1 + 2304) = 0;
  *(_DWORD *)(a1 + 2312) = 0;
  *(unsigned char *)(a1 + 2296) = 0;
  *(void *)(a1 + 2288) = 0;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_WORD *)(a1 + 2316) = 257;
  *(_DWORD *)(a1 + 2321) = 0;
  *(_DWORD *)(a1 + 2318) = 0;
  *(void *)(a1 + 2328) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 2368) = 0;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_WORD *)(a1 + 2400) = 0;
  *(void *)(a1 + 2392) = 0;
  *(_OWORD *)(a1 + 2376) = 0u;
  sub_1000C7F88(buf);
  v9[0] = 0;
  char v5 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssCAVerboseLogging", v9);
  if (v9[0]) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  if (*(void *)v11) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v11);
  }
  *(unsigned char *)(a1 + 2402) = v6;
  *(_DWORD *)(a1 + 2436) = 0;
  *(_OWORD *)(a1 + 2404) = 0u;
  *(_OWORD *)(a1 + 2420) = 0u;
  *(void *)(a1 + 2440) = off_1022B6DB8;
  int v7 = operator new(0x20uLL);
  v7[1] = 0;
  _DWORD v7[2] = 0;
  *int v7 = off_1022B6DF0;
  *((_DWORD *)v7 + 6) = 31337;
  *(void *)(a1 + 2448) = v7 + 3;
  *(void *)(a1 + 2456) = v7;
  *(void *)(a1 + 2440) = off_1022C7F70;
  *(void *)(a1 + 2464) = 0;
  *(_DWORD *)(a1 + 2472) = 11;
  *(void *)(a1 + 2476) = 0;
  *(void *)(a1 + 2492) = 0;
  *(void *)(a1 + 2484) = 0;
  *(void *)(a1 + 2500) = -1;
  *(void *)(a1 + 2508) = -1;
  *(void *)(a1 + 2516) = 0xB00000000;
  *(unsigned char *)(a1 + 2540) = 0;
  *(void *)(a1 + 2524) = 0;
  *(void *)(a1 + 2532) = 0;
  *(void *)(a1 + 2544) = 0xB00000000;
  *(void *)(a1 + 2552) = 0;
  *(_DWORD *)(a1 + 2560) = 0;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_DWORD *)(a1 + 2648) = 1065353216;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(void *)(a1 + 2688) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v11 = 2082;
    *(void *)&_DWORD v11[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd Initializing CLGnssAWD\n\"}", buf, 0x12u);
  }
  bzero(buf, 0x458uLL);
  *(void *)uint64_t v11 = 0xBFF0000000000000;
  long long v16 = 0u;
  *(_OWORD *)&v11[8] = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  int v15 = &v16;
  int v17 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 0;
  int v25 = -1;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  uint64_t v29 = &v30;
  memset(v32, 0, sizeof(v32));
  long long v31 = v32;
  int v33 = 1065353216;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  __int16 v44 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  uint64_t v63 = -1;
  uint64_t v62 = -1;
  long long v64 = 0u;
  __int16 v65 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  char v73 = 0;
  int v74 = 1;
  int v75 = 0;
  uint64_t v76 = 0;
  int v77 = 0;
  char v78 = 0;
  long long v79 = 0u;
  memset(v80, 0, 19);
  memset(&v80[20], 0, 32);
  unint64_t v81 = 0xFFFFFFFF00000000;
  uint64_t v82 = -1;
  unint64_t v83 = 0xBFF0000000000000;
  sub_101886E90(v3, (uint64_t)buf);
  sub_101896678((uint64_t)buf);
  operator new();
}

void sub_101886C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void **a14, void **a15, uint64_t a16, void **a17, uint64_t *a18)
{
  sub_101896C2C(v20 + 2616);
  sub_101887BF0(v24);
  sub_100789878(v23);
  uint64_t v26 = *(void *)(v20 + 2424);
  *(void *)(v20 + 2424) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void *)(v20 + 2416);
  *(void *)(v20 + 2416) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(v20 + 2408);
  *(void *)(v20 + 2408) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  if (*(char *)(v20 + 2399) < 0) {
    operator delete(*a11);
  }
  sub_10071874C(v20 + 2208);
  if (*(char *)(v20 + 1959) < 0) {
    operator delete(*v18);
  }
  sub_101887C34(v22);
  sub_1000F5BB0(v20 + 1288, *a12);
  sub_1000F5BB0(a13, *v21);
  sub_1000F5BB0(v20 + 1240, *a14);
  sub_1000F5BB0(a16, *a15);
  sub_1000F5BB0(v20 + 1192, *a17);
  sub_101896678(v19);
  sub_1003C2C38(a18, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_101886E90(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(void *)(v4 + 16) = *(void *)(a2 + 32);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 39) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  sub_100D697EC(a1 + 96, (void *)(a2 + 96));
  long long v9 = *(_OWORD *)(a2 + 120);
  long long v10 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  sub_1000F4EBC(a1 + 168, (__n128 *)(a2 + 168));
  sub_1000F4EBC(a1 + 192, (__n128 *)(a2 + 192));
  sub_1000F4EBC(a1 + 216, (__n128 *)(a2 + 216));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  sub_1000F4EBC(a1 + 248, (__n128 *)(a2 + 248));
  sub_1000F4EBC(a1 + 272, (__n128 *)(a2 + 272));
  sub_10189660C(a1 + 296, (void *)(a2 + 296));
  sub_10189660C(a1 + 320, (void *)(a2 + 320));
  sub_10084E2F4(a1 + 344, (uint64_t *)(a2 + 344));
  sub_1000F4EBC(a1 + 384, (__n128 *)(a2 + 384));
  sub_1000F4EBC(a1 + 408, (__n128 *)(a2 + 408));
  sub_1000F4EBC(a1 + 432, (__n128 *)(a2 + 432));
  sub_1000F4EBC(a1 + 456, (__n128 *)(a2 + 456));
  sub_1000F4EBC(a1 + 480, (__n128 *)(a2 + 480));
  memcpy((void *)(a1 + 504), (const void *)(a2 + 504), 0x162uLL);
  sub_1000F4EBC(a1 + 864, (__n128 *)(a2 + 864));
  sub_1000F4EBC(a1 + 888, (__n128 *)(a2 + 888));
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
  sub_1000F4EBC(a1 + 928, (__n128 *)(a2 + 928));
  sub_1000F4EBC(a1 + 952, (__n128 *)(a2 + 952));
  *(unsigned char *)(a1 + 976) = *(unsigned char *)(a2 + 976);
  *(_DWORD *)(a1 + 980) = *(_DWORD *)(a2 + 980);
  *(_OWORD *)(a1 + 984) = *(_OWORD *)(a2 + 984);
  long long v11 = *(_OWORD *)(a2 + 1000);
  long long v12 = *(_OWORD *)(a2 + 1016);
  long long v13 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v13;
  *(_OWORD *)(a1 + 1000) = v11;
  *(_OWORD *)(a1 + 1016) = v12;
  long long v14 = *(_OWORD *)(a2 + 1064);
  long long v15 = *(_OWORD *)(a2 + 1080);
  long long v16 = *(_OWORD *)(a2 + 1096);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(_OWORD *)(a1 + 1080) = v15;
  *(_OWORD *)(a1 + 1096) = v16;
  *(_OWORD *)(a1 + 1064) = v14;
  return a1;
}

void sub_10188706C(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102343F88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAWD::HandleStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102343F88);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAWD::HandleStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10189103C((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101887228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101887248(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)a2, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102343F88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAWD::onDeviceOrientation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102343F88);
    }
    long long v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      char v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAWD::onDeviceOrientation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  *(_DWORD *)(a2 + 2320) = *(_DWORD *)(a1 + 8);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018873F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101887414(uint64_t a1)
{
  sub_1000C7F88(buf);
  v22[0] = 0.0;
  int v2 = sub_1000A699C(*(uint64_t *)&buf[0], "AssistanceFileMetricsUploadThresholdTimeInSeconds", v22);
  double v3 = v22[0];
  if (!v2) {
    double v3 = 86400.0;
  }
  *(double *)(a1 + 2264) = v3;
  if (*((void *)&buf[0] + 1))
  {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
    double v3 = *(double *)(a1 + 2264);
  }
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    *(void *)(a1 + 2264) = 0x40F5180000000000;
  }
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 2264);
      LODWORD(buf[0]) = 134283521;
      *(void *)((char *)buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,UploadThresholdTimeInSeconds,%{private}lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v15 = *(void *)(a1 + 2264);
      LODWORD(v22[0]) = 134283521;
      *(void *)((char *)v22 + 4) = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::prepareAssistanceFileDownloadMetrics()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  double v21 = 0.0;
  uint64_t v6 = sub_1000A6958();
  if (sub_1000A6A10(v6, @"AssistanceFileMetricsStartMonitoringCFAbsTime", &v21))
  {
    if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v21) > 2.22044605e-16)
    {
      *(double *)(a1 + 2272) = v21;
      if (*(unsigned char *)(a1 + 2402))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        char v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = *(void *)(a1 + 2272);
          LODWORD(buf[0]) = 134283521;
          *(void *)((char *)buf + 4) = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,From Disk TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          uint64_t v19 = *(void *)(a1 + 2272);
          LODWORD(v22[0]) = 134283521;
          *(void *)((char *)v22 + 4) = v19;
          uint64_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::prepareAssistanceFileDownloadMetrics()", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
      }
    }
  }
  if (fabs(*(double *)(a1 + 2272)) < 2.22044605e-16
    || (*(void *)(a1 + 2272) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *(CFAbsoluteTime *)(a1 + 2272) = CFAbsoluteTimeGetCurrent();
    uint64_t v10 = sub_1000A6958();
    char v11 = (uint64_t *)(a1 + 2272);
    sub_100163398(v10, @"AssistanceFileMetricsStartMonitoringCFAbsTime", (const void *)(a1 + 2272));
    uint64_t v12 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v12 + 944))(v12);
    if (*(unsigned char *)(a1 + 2402))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *v11;
        LODWORD(buf[0]) = 134283521;
        *(void *)((char *)buf + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Init TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v17 = *v11;
        LODWORD(v22[0]) = 134283521;
        *(void *)((char *)v22 + 4) = v17;
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::prepareAssistanceFileDownloadMetrics()", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
  }
  sub_10189352C(a1);
  sub_10188CF1C(a1);
}

void sub_1018879B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018879D4(uint64_t a1)
{
  _DWORD v14[2] = xmmword_101E44CF0;
  void v14[3] = unk_101E44D00;
  void v14[4] = xmmword_101E44D10;
  void v14[5] = unk_101E44D20;
  long long v12 = xmmword_101E44CB0;
  long long v13 = unk_101E44CC0;
  v14[0] = xmmword_101E44CD0;
  v14[1] = unk_101E44CE0;
  long long v10 = xmmword_101E44C90;
  long long v11 = unk_101E44CA0;
  uint64_t v2 = a1 + 2208;
  int v8 = 0;
  int v9 = &v8;
  double v3 = sub_101896C68(a1 + 2208, &v8, (uint64_t)&unk_101D0B290, &v9);
  sub_1018982C4(v3 + 3, (uint64_t)&v10, (uint64_t)&v15);
  long long v10 = xmmword_101E44D30;
  long long v11 = unk_101E44D40;
  long long v12 = xmmword_101E44D50;
  long long v13 = unk_101E44D60;
  int v8 = 1;
  int v9 = &v8;
  uint64_t v4 = sub_101896C68(v2, &v8, (uint64_t)&unk_101D0B290, &v9);
  sub_1018982C4(v4 + 3, (uint64_t)&v10, (uint64_t)v14);
  long long v10 = xmmword_101E44D30;
  long long v11 = unk_101E44D40;
  long long v12 = xmmword_101E44D50;
  long long v13 = unk_101E44D60;
  int v8 = 2;
  int v9 = &v8;
  uint64_t v5 = sub_101896C68(v2, &v8, (uint64_t)&unk_101D0B290, &v9);
  sub_1018982C4(v5 + 3, (uint64_t)&v10, (uint64_t)v14);
  long long v10 = xmmword_101E44D30;
  long long v11 = unk_101E44D40;
  long long v12 = xmmword_101E44D50;
  long long v13 = unk_101E44D60;
  int v8 = 3;
  int v9 = &v8;
  uint64_t v6 = sub_101896C68(v2, &v8, (uint64_t)&unk_101D0B290, &v9);
  sub_1018982C4(v6 + 3, (uint64_t)&v10, (uint64_t)v14);
  long long v10 = xmmword_101E44D30;
  long long v11 = unk_101E44D40;
  long long v12 = xmmword_101E44D50;
  long long v13 = unk_101E44D60;
  int v8 = 4;
  int v9 = &v8;
  char v7 = sub_101896C68(v2, &v8, (uint64_t)&unk_101D0B290, &v9);
  sub_1018982C4(v7 + 3, (uint64_t)&v10, (uint64_t)v14);
  *(CFAbsoluteTime *)(a1 + 2288) = CFAbsoluteTimeGetCurrent();
}

void *sub_101887BF0(void *a1)
{
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_101887C34(uint64_t a1)
{
  sub_1000F5BB0(a1 + 496, *(void **)(a1 + 504));
  uint64_t v2 = *(void **)(a1 + 352);
  if (v2)
  {
    *(void *)(a1 + 360) = v2;
    operator delete(v2);
  }
  sub_10071874C(a1 + 312);
  sub_1004459BC(a1 + 288, *(void **)(a1 + 296));
  sub_1004459BC(a1 + 264, *(void **)(a1 + 272));
  return a1;
}

uint64_t sub_101887C98(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 2408) + 16) unregister:*(void *)(*(void *)(a1 + 2408) + 8) forNotification:10];
  [*(id *)(*(void *)(a1 + 2408) + 16) unregister:*(void *)(*(void *)(a1 + 2408) + 8) forNotification:6];
  [*(id *)(*(void *)(a1 + 2408) + 16) unregister:*(void *)(*(void *)(a1 + 2408) + 8) forNotification:15];
  [*(id *)(*(void *)(a1 + 2408) + 16) unregister:*(void *)(*(void *)(a1 + 2408) + 8) forNotification:7];
  [*(id *)(*(void *)(a1 + 2424) + 16) unregister:*(void *)(*(void *)(a1 + 2424) + 8) forNotification:10];
  [*(id *)(*(void *)(a1 + 2424) + 16) unregister:*(void *)(*(void *)(a1 + 2424) + 8) forNotification:46];
  if (*(void *)(a1 + 2416))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gnssawd,unsubscribing from device orientation,~CLGnssAWD()", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAWD::~CLGnssAWD()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v3 = sub_1003A1724();
    sub_1009D26C4(v3, 0, *(void *)(a1 + 2416));
  }

  *(void *)(a1 + 2432) = 0;
  *(void *)(a1 + 2248) = 0;
  sub_101896C2C(a1 + 2616);
  uint64_t v4 = *(void **)(a1 + 2592);
  if (v4)
  {
    *(void *)(a1 + 2600) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 2568);
  if (v5)
  {
    *(void *)(a1 + 2576) = v5;
    operator delete(v5);
  }
  sub_100789878(a1 + 2440);
  uint64_t v6 = *(void *)(a1 + 2424);
  *(void *)(a1 + 2424) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 2416);
  *(void *)(a1 + 2416) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (*(char *)(a1 + 2399) < 0) {
    operator delete(*(void **)(a1 + 2376));
  }
  sub_10071874C(a1 + 2208);
  if (*(char *)(a1 + 1959) < 0) {
    operator delete(*(void **)(a1 + 1936));
  }
  sub_1000F5BB0(a1 + 1824, *(void **)(a1 + 1832));
  int v9 = *(void **)(a1 + 1680);
  if (v9)
  {
    *(void *)(a1 + 1688) = v9;
    operator delete(v9);
  }
  sub_10071874C(a1 + 1640);
  sub_1004459BC(a1 + 1616, *(void **)(a1 + 1624));
  sub_1004459BC(a1 + 1592, *(void **)(a1 + 1600));
  sub_1000F5BB0(a1 + 1288, *(void **)(a1 + 1296));
  sub_1000F5BB0(a1 + 1264, *(void **)(a1 + 1272));
  sub_1000F5BB0(a1 + 1240, *(void **)(a1 + 1248));
  sub_1000F5BB0(a1 + 1216, *(void **)(a1 + 1224));
  sub_1000F5BB0(a1 + 1192, *(void **)(a1 + 1200));
  sub_101896678(a1 + 16);
  sub_1003C2C38((uint64_t *)(a1 + 8), 0);
  return a1;
}

void sub_101888034(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101888044(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v11 = 0;
    *(_WORD *)long long v12 = 2082;
    *(void *)&void v12[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd Clearing CLGnssAWD stats\"}", buf, 0x12u);
  }
  bzero(buf, 0x458uLL);
  *(void *)long long v12 = 0xBFF0000000000000;
  long long v17 = 0u;
  *(_OWORD *)&v12[8] = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  __int16 v16 = &v17;
  int v18 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 0;
  int v26 = -1;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  long long v30 = &v31;
  memset(v33, 0, sizeof(v33));
  long long v32 = v33;
  int v34 = 1065353216;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  __int16 v45 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v46 = 0u;
  uint64_t v64 = -1;
  uint64_t v63 = -1;
  long long v65 = 0u;
  __int16 v66 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  char v74 = 0;
  int v75 = 1;
  int v76 = 0;
  uint64_t v77 = 0;
  int v78 = 0;
  char v79 = 0;
  long long v80 = 0u;
  memset(v81, 0, 19);
  memset(&v81[20], 0, 32);
  unint64_t v82 = 0xFFFFFFFF00000000;
  uint64_t v83 = -1;
  unint64_t v84 = 0xBFF0000000000000;
  sub_101886E90(a1 + 16, (uint64_t)buf);
  sub_101896678((uint64_t)buf);
  *(_DWORD *)(a1 + 2328) = 0;
  *(_DWORD *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2368) = 0;
  *(_WORD *)(a1 + 2400) = 0;
  *(_DWORD *)(a1 + 2472) = 11;
  *(void *)(a1 + 2476) = 0;
  *(void *)(a1 + 2492) = 0;
  *(void *)(a1 + 2484) = 0;
  *(void *)(a1 + 2500) = -1;
  *(void *)(a1 + 2508) = -1;
  *(void *)(a1 + 2516) = 0xB00000000;
  *(void *)(a1 + 2532) = 0;
  *(void *)(a1 + 2524) = 0;
  *(unsigned char *)(a1 + 2540) = 0;
  *(void *)(a1 + 2544) = 0xB00000000;
  *(void *)(a1 + 2552) = 0;
  *(_DWORD *)(a1 + 2560) = 0;
  uint64_t v3 = (void *)(a1 + 2568);
  uint64_t v4 = *(void **)(a1 + 2568);
  if (v4)
  {
    *(void *)(a1 + 2576) = v4;
    operator delete(v4);
    void *v3 = 0;
    *(void *)(a1 + 2576) = 0;
    *(void *)(a1 + 2584) = 0;
  }
  void *v3 = 0;
  *(void *)(a1 + 2576) = 0;
  *(void *)(a1 + 2584) = 0;
  uint64_t v5 = *(void **)(a1 + 2592);
  if (v5)
  {
    *(void *)(a1 + 2600) = v5;
    operator delete(v5);
  }
  *(void *)(a1 + 2592) = 0;
  *(void *)(a1 + 2600) = 0;
  *(void *)(a1 + 2608) = 0;
  *(_DWORD *)(a1 + 2404) = 0;
  sub_1018884A8(a1);
  if (*(void *)(a1 + 2416) && (sub_1000A16E8() & 0x40) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssawd,unsubscribing from device orientation,destroying fOrientationDispatcher, non-alwaysOnOrientation device", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::clearSessionStats()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v7 = sub_1003A1724();
    sub_1009D26C4(v7, 0, *(void *)(a1 + 2416));
    uint64_t v8 = *(void *)(a1 + 2416);
    *(void *)(a1 + 2416) = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
}

void sub_1018884A8(uint64_t a1)
{
  __src[0] = 0;
  __src[1] = 0;
  memset(&__src[2], 255, 20);
  __src[5] = 0;
  LODWORD(__src[6]) = 0;
  memset(&__src[7], 0, 20);
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *(_OWORD *)((char *)&__src[9] + 4) = v2;
  *(_OWORD *)((char *)&__src[11] + 4) = v2;
  *(_OWORD *)((char *)&__src[13] + 4) = v2;
  *(_OWORD *)((char *)&__src[15] + 4) = v2;
  *(_OWORD *)((char *)&__src[17] + 4) = v2;
  *(_OWORD *)((char *)&__src[19] + 4) = v2;
  *(_OWORD *)((char *)&__src[21] + 4) = v2;
  *(_OWORD *)((char *)&__src[23] + 4) = v2;
  *(_OWORD *)((char *)&__src[25] + 4) = v2;
  *(_OWORD *)((char *)&__src[27] + 4) = v2;
  HIDWORD(__src[29]) = -1;
  __src[30] = 0xBFF0000000000000;
  __src[31] = -1;
  long long v24 = 0;
  uint64_t v25 = 0;
  __src[32] = -1;
  long long v23 = &v24;
  long long v27 = 0;
  uint64_t v28 = 0;
  int v26 = &v27;
  memset(v29, 0, sizeof(v29));
  int v30 = 1065353216;
  long long __p = 0uLL;
  uint64_t v32 = 0;
  *(void *)int v33 = 0xBFF0000000000000;
  int v34 = &v35;
  long long v35 = 0;
  uint64_t v36 = 0;
  *(_DWORD *)&v33[15] = 0;
  memset(&v33[20], 0, 96);
  *(void *)&_WORD v33[8] = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  LODWORD(v39[0]) = 0;
  *(_OWORD *)((char *)&v39[1] + 4) = v2;
  *(_OWORD *)((char *)&v39[2] + 4) = v2;
  *(_OWORD *)((char *)v39 + 4) = v2;
  memcpy((void *)(a1 + 1328), __src, 0x108uLL);
  uint64_t v3 = a1 + 1600;
  sub_1004459BC(a1 + 1592, *(void **)(a1 + 1600));
  uint64_t v4 = v24;
  *(void *)(a1 + 1592) = v23;
  *(void *)(a1 + 1600) = v4;
  uint64_t v5 = v25;
  *(void *)(a1 + 1608) = v25;
  if (v5)
  {
    void v4[2] = v3;
    long long v23 = &v24;
    long long v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    *(void *)(a1 + 1592) = v3;
  }
  uint64_t v6 = a1 + 1624;
  sub_1004459BC(a1 + 1616, *(void **)(a1 + 1624));
  uint64_t v7 = v27;
  *(void *)(a1 + 1616) = v26;
  *(void *)(a1 + 1624) = v7;
  uint64_t v8 = v28;
  *(void *)(a1 + 1632) = v28;
  if (v8)
  {
    _DWORD v7[2] = v6;
    int v26 = &v27;
    long long v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    *(void *)(a1 + 1616) = v6;
  }
  sub_10084E2F4(a1 + 1640, v29);
  int v9 = *(void **)(a1 + 1680);
  if (v9)
  {
    *(void *)(a1 + 1688) = v9;
    operator delete(v9);
  }
  *(_OWORD *)(a1 + 1680) = __p;
  *(void *)(a1 + 1696) = v32;
  uint64_t v32 = 0;
  long long __p = 0uLL;
  long long v10 = *(_OWORD *)&v33[16];
  *(_OWORD *)(a1 + 1704) = *(_OWORD *)v33;
  *(_OWORD *)(a1 + 1720) = v10;
  long long v11 = *(_OWORD *)&v33[48];
  *(_OWORD *)(a1 + 1736) = *(_OWORD *)&v33[32];
  *(_OWORD *)(a1 + 1752) = v11;
  long long v12 = *(_OWORD *)&v33[64];
  long long v13 = *(_OWORD *)&v33[80];
  long long v14 = *(_OWORD *)&v33[96];
  *(_DWORD *)(a1 + 1816) = *(_DWORD *)&v33[112];
  *(_OWORD *)(a1 + 1784) = v13;
  *(_OWORD *)(a1 + 1800) = v14;
  *(_OWORD *)(a1 + 1768) = v12;
  uint64_t v15 = a1 + 1832;
  sub_1000F5BB0(a1 + 1824, *(void **)(a1 + 1832));
  __int16 v16 = v35;
  *(void *)(a1 + 1824) = v34;
  *(void *)(a1 + 1832) = v16;
  uint64_t v17 = v36;
  *(void *)(a1 + 1840) = v36;
  if (v17)
  {
    v16[2] = v15;
    __int16 v16 = 0;
    int v34 = &v35;
    long long v35 = 0;
    uint64_t v36 = 0;
  }
  else
  {
    *(void *)(a1 + 1824) = v15;
  }
  long long v18 = v39[1];
  *(_OWORD *)(a1 + 1880) = v39[0];
  *(_OWORD *)(a1 + 1896) = v18;
  *(_OWORD *)(a1 + 1912) = v39[2];
  *(_DWORD *)(a1 + 1928) = v39[3];
  long long v19 = v38;
  *(_OWORD *)(a1 + 1848) = v37;
  *(_OWORD *)(a1 + 1864) = v19;
  sub_1000F5BB0((uint64_t)&v34, v16);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  sub_10071874C((uint64_t)v29);
  sub_1004459BC((uint64_t)&v26, v27);
  sub_1004459BC((uint64_t)&v23, v24);
  long long v20 = (void **)(a1 + 1936);
  if (*(char *)(a1 + 1959) < 0) {
    operator delete(*v20);
  }
  *long long v20 = 0;
  *(void *)(a1 + 1944) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1960) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 1968) = 0;
  *(_DWORD *)(a1 + 2116) = -1;
  *(void *)&long long v21 = -1;
  *((void *)&v21 + 1) = -1;
  *(_OWORD *)(a1 + 1972) = v21;
  *(_OWORD *)(a1 + 1988) = v21;
  *(_OWORD *)(a1 + 2004) = v21;
  *(_OWORD *)(a1 + 2020) = v21;
  *(_OWORD *)(a1 + 2036) = v21;
  *(_OWORD *)(a1 + 2052) = v21;
  *(_OWORD *)(a1 + 2068) = v21;
  *(_OWORD *)(a1 + 2084) = v21;
  *(_OWORD *)(a1 + 2100) = v21;
  *(_WORD *)(a1 + 2120) = 0;
  *(unsigned char *)(a1 + 2122) = 0;
  *(void *)(a1 + 2124) = -1;
  *(unsigned char *)(a1 + 2132) = 0;
  *(void *)(a1 + 2136) = -1;
  *(_DWORD *)(a1 + 2147) = 0;
  *(_DWORD *)(a1 + 2144) = 0;
  *(void *)(a1 + 2152) = -1;
  *(_DWORD *)(a1 + 2160) = -1;
  *(unsigned char *)(a1 + 2164) = 0;
  *(void *)(a1 + 2168) = -1;
  sub_1000F5BB0(a1 + 1192, *(void **)(a1 + 1200));
  *(void *)(a1 + 1192) = a1 + 1200;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1200) = 0;
  sub_1000F5BB0(a1 + 1216, *(void **)(a1 + 1224));
  *(void *)(a1 + 1216) = a1 + 1224;
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1224) = 0;
  sub_1000F5BB0(a1 + 1240, *(void **)(a1 + 1248));
  *(void *)(a1 + 1240) = a1 + 1248;
  *(void *)(a1 + 1256) = 0;
  *(void *)(a1 + 1248) = 0;
  sub_1000F5BB0(a1 + 1264, *(void **)(a1 + 1272));
  *(void *)(a1 + 1264) = a1 + 1272;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1312) = 0;
}

void sub_101888874(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v4 = a1 + 16;
  *(CFAbsoluteTime *)(a1 + 24) = CFAbsoluteTimeGetCurrent();
  if (*(char *)(v4 + 2383) < 0)
  {
    uint64_t v5 = *(void *)(a1 + 2384);
    if (v5)
    {
      uint64_t v6 = *(char **)(v4 + 2360);
      goto LABEL_6;
    }
LABEL_15:
    long long v11 = (std::string *)(a1 + 32);
    long long v12 = "com.apple.locationd";
    goto LABEL_20;
  }
  uint64_t v5 = *(unsigned __int8 *)(v4 + 2383);
  if (!*(unsigned char *)(v4 + 2383)) {
    goto LABEL_15;
  }
  uint64_t v6 = (char *)(v4 + 2360);
LABEL_6:
  if (v5 >= 10)
  {
    uint64_t v7 = &v6[v5];
    uint64_t v8 = v6;
    do
    {
      int v9 = (char *)memchr(v8, 99, v5 - 9);
      if (!v9) {
        break;
      }
      if (*(void *)v9 == 0x6C7070612E6D6F63 && *((_WORD *)v9 + 4) == 11877)
      {
        if (v9 != v7 && v9 - v6 != -1)
        {
          std::string::operator=((std::string *)(a1 + 32), (const std::string *)(v4 + 2360));
          goto LABEL_21;
        }
        break;
      }
      uint64_t v8 = v9 + 1;
      uint64_t v5 = v7 - (unsigned char *)v8;
    }
    while (v7 - (unsigned char *)v8 >= 10);
  }
  long long v11 = (std::string *)(a1 + 32);
  long long v12 = "3rdParty";
LABEL_20:
  std::string::assign(v11, v12);
LABEL_21:
  *(_WORD *)(a1 + 1032) = *(_WORD *)(a1 + 2400);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  long long v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *(unsigned __int8 *)(a1 + 1032);
    int v15 = *(unsigned __int8 *)(a1 + 1033);
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v14;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gnssawd,IsAccessoryConnected,%d,IsAccessoryYieldingLocations,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v31 = *(unsigned __int8 *)(a1 + 1032);
    int v32 = *(unsigned __int8 *)(a1 + 1033);
    *(_DWORD *)long long v37 = 67109376;
    *(_DWORD *)&v37[4] = v31;
    *(_WORD *)&v37[8] = 1024;
    *(_DWORD *)&v37[10] = v32;
    int v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v33);
    if (v33 != buf) {
      free(v33);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  __int16 v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1018891BC(v4);
    uint64_t v17 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)long long v37 = 136315138;
    *(void *)&v37[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#gnssawd LocationGPSSessionStatistics Metric,%s\n", v37, 0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    sub_1018891BC(v4);
    if (v39 >= 0) {
      int v34 = v37;
    }
    else {
      int v34 = *(unsigned char **)v37;
    }
    int v40 = 136315138;
    long long v41 = v34;
    long long v35 = (char *)_os_log_send_and_compose_impl();
    if (v39 < 0) {
      operator delete(*(void **)v37);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18)
  {
    BOOL v19 = sub_101576750(v18);
    if (!v19 && *(void *)(a1 + 136) >= 0x3DuLL)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      long long v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#gnssawd Submitting gnss session metric to AWD", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        *(_WORD *)long long v37 = 0;
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v36);
        if (v36 != buf) {
          free(v36);
        }
      }
      sub_1018894E4(a1);
      uint64_t v21 = sub_10071B604();
      sub_100721720(v21, (int *)(a1 + 1328), a1 + 1936);
      sub_100D67DEC(a2);
      *(_OWORD *)(a1 + 2336) = 0u;
      if (*(char *)(a1 + 2399) < 0)
      {
        **(unsigned char **)(a1 + 2376) = 0;
        *(void *)(a1 + 2384) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 2376) = 0;
        *(unsigned char *)(a1 + 2399) = 0;
      }
      goto LABEL_63;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    long long v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(a1 + 136);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 1026;
      *(_DWORD *)&unsigned char buf[20] = v19;
      __int16 v43 = 2050;
      uint64_t v44 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#gnssawd Not submitting gnss session metric to AWD\", \"isWifiAssociated\":%{public}hhd, \"sessionDuration\":%{public}llu}", buf, 0x22u);
    }
    *(double *)(a1 + 2304) = *(double *)(a1 + 2304) + (double)*(unint64_t *)(a1 + 136);
    if (*(unsigned char *)(a1 + 2402))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      long long v24 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v25 = *(void *)(a1 + 2304);
        uint64_t v26 = *(void *)(a1 + 136);
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#gnssca,dailyGnssUsageWithShortOrWiFiAssociatedSessions_s,%{public}.1lf,sessionDur,%{public}llu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v27 = *(void *)(a1 + 2304);
        uint64_t v28 = *(void *)(a1 + 136);
        *(_DWORD *)long long v37 = 134349312;
        *(void *)&v37[4] = v27;
        *(_WORD *)&v37[12] = 2050;
        uint64_t v38 = v28;
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v29);
LABEL_81:
        if (v29 != buf) {
          free(v29);
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v30 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#gnssawd fWifiServiceClient == nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      *(_WORD *)long long v37 = 0;
      long long v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v29);
      goto LABEL_81;
    }
  }
LABEL_63:
  sub_101888044(a1);
}

uint64_t sub_1018891BC(uint64_t a1)
{
  sub_10010F274((uint64_t)v22);
  sub_1018967E8(a1);
  if ((v21 & 0x80u) == 0) {
    long long v2 = __p;
  }
  else {
    long long v2 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v3 = v21;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = sub_100132EFC(v23, (uint64_t)v2, v3);
  sub_100132EFC(v4, (uint64_t)",sessionDuration,", 17);
  uint64_t v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)",pctYield,", 10);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)",yieldCount,", 12);
  uint64_t v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)",lat,", 5);
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)",lon,", 5);
  int v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)",alt,", 5);
  long long v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)",ttff,", 6);
  long long v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)",mcc,", 5);
  long long v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)",mnc,", 5);
  long long v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)",sid,", 5);
  int v14 = (void *)std::ostream::operator<<();
  sub_100132EFC(v14, (uint64_t)",nid,", 5);
  int v15 = (void *)std::ostream::operator<<();
  sub_100132EFC(v15, (uint64_t)",transmissionFrequency,", 23);
  __int16 v16 = (void *)std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)",transmissionBandwidth,", 23);
  uint64_t v17 = (void *)std::ostream::operator<<();
  sub_100132EFC(v17, (uint64_t)",transmissionFrequencyBand,", 27);
  std::ostream::operator<<();
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  *(void *)((char *)v22
  v23[0] = v18;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1018894B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1018894E4(uint64_t a1)
{
  long long v2 = std::string::operator=((std::string *)(a1 + 1936), (const std::string *)(a1 + 32));
  *(unsigned char *)(a1 + 2132) = *(unsigned char *)(a1 + 1033);
  *(unsigned char *)(a1 + 1966) = *(unsigned char *)(a1 + 560);
  *(unsigned char *)(a1 + 2148) = *(unsigned char *)(a1 + 1068);
  *(_WORD *)(a1 + 2149) = *(_WORD *)(a1 + 1069);
  *(unsigned char *)(a1 + 1964) = *(unsigned char *)(a1 + 873);
  *(unsigned char *)(a1 + 1965) = *(void *)(a1 + 648) != 0;
  *(unsigned char *)(a1 + 1967) = *(void *)(a1 + 552) != 0;
  *(unsigned char *)(a1 + 1968) = *(void *)(a1 + 520) != 0;
  unint64_t v3 = *(void *)(a1 + 160);
  *(unsigned char *)(a1 + 2120) = v3 < 2 * *(void *)(a1 + 816);
  *(unsigned char *)(a1 + 2121) = v3 < 2 * *(void *)(a1 + 824);
  *(unsigned char *)(a1 + 2122) = v3 < 2 * *(void *)(a1 + 832);
  uint64_t v4 = sub_101892738((uint64_t)v2, (unsigned int *)(a1 + 856));
  *(_DWORD *)(a1 + 1960) = v4;
  *(double *)uint64_t buf = (double)*(unint64_t *)(a1 + 136);
  *(_DWORD *)(a1 + 2112) = sub_101892C50(v4, (double *)buf);
  uint64_t v5 = *(void *)(a1 + 1200);
  if (v5)
  {
    uint64_t v6 = a1 + 1200;
    uint64_t v7 = a1 + 1200;
    uint64_t v8 = *(void *)(a1 + 1200);
    do
    {
      int v9 = *(_DWORD *)(v8 + 32);
      BOOL v10 = v9 < 0;
      if (v9 >= 0) {
        long long v11 = (uint64_t *)v8;
      }
      else {
        long long v11 = (uint64_t *)(v8 + 8);
      }
      if (!v10) {
        uint64_t v7 = v8;
      }
      uint64_t v8 = *v11;
    }
    while (*v11);
    if (v7 != v6 && *(int *)(v7 + 32) <= 0)
    {
      *(_DWORD *)uint64_t buf = 0;
      long long v12 = sub_1000A43BC(a1 + 1192, (int *)buf);
      *(_DWORD *)(a1 + 1972) = sub_1018929B0((uint64_t)v12, (double *)v12);
      *(_DWORD *)uint64_t buf = 0;
      long long v13 = sub_1000A43BC(a1 + 1192, (int *)buf);
      *(_DWORD *)(a1 + 2012) = sub_101892A94((uint64_t)v13, (double *)v13);
      *(_DWORD *)uint64_t buf = 0;
      int v14 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
      if (v14 < 0xD) {
        int v15 = 6;
      }
      else {
        int v15 = 7;
      }
      if (v14 >= 9) {
        int v16 = v15;
      }
      else {
        int v16 = 5;
      }
      if (v14 >= 5) {
        int v14 = v16;
      }
      *(_DWORD *)(a1 + 2052) = v14;
      uint64_t v5 = *(void *)(a1 + 1200);
    }
    if (v5)
    {
      uint64_t v17 = a1 + 1200;
      uint64_t v18 = v5;
      do
      {
        int v19 = *(_DWORD *)(v18 + 32);
        BOOL v20 = v19 < 1;
        if (v19 >= 1) {
          unsigned __int8 v21 = (uint64_t *)v18;
        }
        else {
          unsigned __int8 v21 = (uint64_t *)(v18 + 8);
        }
        if (!v20) {
          uint64_t v17 = v18;
        }
        uint64_t v18 = *v21;
      }
      while (*v21);
      if (v17 != v6 && *(int *)(v17 + 32) <= 1)
      {
        *(_DWORD *)uint64_t buf = 1;
        long long v22 = sub_1000A43BC(a1 + 1192, (int *)buf);
        *(_DWORD *)(a1 + 1976) = sub_1018929B0((uint64_t)v22, (double *)v22);
        *(_DWORD *)uint64_t buf = 1;
        uint64_t v23 = sub_1000A43BC(a1 + 1192, (int *)buf);
        *(_DWORD *)(a1 + 2016) = sub_101892A94((uint64_t)v23, (double *)v23);
        *(_DWORD *)uint64_t buf = 1;
        int v24 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
        if (v24 < 0xD) {
          int v25 = 6;
        }
        else {
          int v25 = 7;
        }
        if (v24 >= 9) {
          int v26 = v25;
        }
        else {
          int v26 = 5;
        }
        if (v24 >= 5) {
          int v24 = v26;
        }
        *(_DWORD *)(a1 + 2056) = v24;
        uint64_t v5 = *(void *)(a1 + 1200);
      }
      if (v5)
      {
        uint64_t v27 = a1 + 1200;
        uint64_t v28 = v5;
        do
        {
          int v29 = *(_DWORD *)(v28 + 32);
          BOOL v30 = v29 < 4;
          if (v29 >= 4) {
            int v31 = (uint64_t *)v28;
          }
          else {
            int v31 = (uint64_t *)(v28 + 8);
          }
          if (!v30) {
            uint64_t v27 = v28;
          }
          uint64_t v28 = *v31;
        }
        while (*v31);
        if (v27 != v6 && *(int *)(v27 + 32) <= 4)
        {
          *(_DWORD *)uint64_t buf = 4;
          int v32 = sub_1000A43BC(a1 + 1192, (int *)buf);
          *(_DWORD *)(a1 + 1988) = sub_1018929B0((uint64_t)v32, (double *)v32);
          *(_DWORD *)uint64_t buf = 4;
          int v33 = sub_1000A43BC(a1 + 1192, (int *)buf);
          *(_DWORD *)(a1 + 2028) = sub_101892A94((uint64_t)v33, (double *)v33);
          *(_DWORD *)uint64_t buf = 4;
          int v34 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
          if (v34 < 0xD) {
            int v35 = 6;
          }
          else {
            int v35 = 7;
          }
          if (v34 >= 9) {
            int v36 = v35;
          }
          else {
            int v36 = 5;
          }
          if (v34 >= 5) {
            int v34 = v36;
          }
          *(_DWORD *)(a1 + 2068) = v34;
          uint64_t v5 = *(void *)(a1 + 1200);
        }
        if (v5)
        {
          uint64_t v37 = a1 + 1200;
          uint64_t v38 = v5;
          do
          {
            int v39 = *(_DWORD *)(v38 + 32);
            BOOL v40 = v39 < 2;
            if (v39 >= 2) {
              long long v41 = (uint64_t *)v38;
            }
            else {
              long long v41 = (uint64_t *)(v38 + 8);
            }
            if (!v40) {
              uint64_t v37 = v38;
            }
            uint64_t v38 = *v41;
          }
          while (*v41);
          if (v37 != v6 && *(int *)(v37 + 32) <= 2)
          {
            *(_DWORD *)uint64_t buf = 2;
            long long v42 = sub_1000A43BC(a1 + 1192, (int *)buf);
            *(_DWORD *)(a1 + 1980) = sub_1018929B0((uint64_t)v42, (double *)v42);
            *(_DWORD *)uint64_t buf = 2;
            __int16 v43 = sub_1000A43BC(a1 + 1192, (int *)buf);
            *(_DWORD *)(a1 + 2020) = sub_101892A94((uint64_t)v43, (double *)v43);
            *(_DWORD *)uint64_t buf = 2;
            int v44 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
            if (v44 < 0xD) {
              int v45 = 6;
            }
            else {
              int v45 = 7;
            }
            if (v44 >= 9) {
              int v46 = v45;
            }
            else {
              int v46 = 5;
            }
            if (v44 >= 5) {
              int v44 = v46;
            }
            *(_DWORD *)(a1 + 2060) = v44;
            uint64_t v5 = *(void *)(a1 + 1200);
          }
          if (v5)
          {
            uint64_t v47 = a1 + 1200;
            uint64_t v48 = v5;
            do
            {
              int v49 = *(_DWORD *)(v48 + 32);
              BOOL v50 = v49 < 3;
              if (v49 >= 3) {
                long long v51 = (uint64_t *)v48;
              }
              else {
                long long v51 = (uint64_t *)(v48 + 8);
              }
              if (!v50) {
                uint64_t v47 = v48;
              }
              uint64_t v48 = *v51;
            }
            while (*v51);
            if (v47 != v6 && *(int *)(v47 + 32) <= 3)
            {
              *(_DWORD *)uint64_t buf = 3;
              long long v52 = sub_1000A43BC(a1 + 1192, (int *)buf);
              *(_DWORD *)(a1 + 1984) = sub_1018929B0((uint64_t)v52, (double *)v52);
              *(_DWORD *)uint64_t buf = 3;
              long long v53 = sub_1000A43BC(a1 + 1192, (int *)buf);
              *(_DWORD *)(a1 + 2024) = sub_101892A94((uint64_t)v53, (double *)v53);
              *(_DWORD *)uint64_t buf = 3;
              int v54 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
              if (v54 < 0xD) {
                int v55 = 6;
              }
              else {
                int v55 = 7;
              }
              if (v54 >= 9) {
                int v56 = v55;
              }
              else {
                int v56 = 5;
              }
              if (v54 >= 5) {
                int v54 = v56;
              }
              *(_DWORD *)(a1 + 2064) = v54;
              uint64_t v5 = *(void *)(a1 + 1200);
            }
            if (v5)
            {
              uint64_t v57 = a1 + 1200;
              uint64_t v58 = v5;
              do
              {
                int v59 = *(_DWORD *)(v58 + 32);
                BOOL v60 = v59 < 5;
                if (v59 >= 5) {
                  long long v61 = (uint64_t *)v58;
                }
                else {
                  long long v61 = (uint64_t *)(v58 + 8);
                }
                if (!v60) {
                  uint64_t v57 = v58;
                }
                uint64_t v58 = *v61;
              }
              while (*v61);
              if (v57 != v6 && *(int *)(v57 + 32) <= 5)
              {
                *(_DWORD *)uint64_t buf = 5;
                long long v62 = sub_1000A43BC(a1 + 1192, (int *)buf);
                *(_DWORD *)(a1 + 1992) = sub_1018929B0((uint64_t)v62, (double *)v62);
                *(_DWORD *)uint64_t buf = 5;
                uint64_t v63 = sub_1000A43BC(a1 + 1192, (int *)buf);
                *(_DWORD *)(a1 + 2032) = sub_101892A94((uint64_t)v63, (double *)v63);
                *(_DWORD *)uint64_t buf = 5;
                int v64 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
                if (v64 < 0xD) {
                  int v65 = 6;
                }
                else {
                  int v65 = 7;
                }
                if (v64 >= 9) {
                  int v66 = v65;
                }
                else {
                  int v66 = 5;
                }
                if (v64 >= 5) {
                  int v64 = v66;
                }
                *(_DWORD *)(a1 + 2072) = v64;
                uint64_t v5 = *(void *)(a1 + 1200);
              }
              if (v5)
              {
                uint64_t v67 = a1 + 1200;
                uint64_t v68 = v5;
                do
                {
                  int v69 = *(_DWORD *)(v68 + 32);
                  BOOL v70 = v69 < 6;
                  if (v69 >= 6) {
                    long long v71 = (uint64_t *)v68;
                  }
                  else {
                    long long v71 = (uint64_t *)(v68 + 8);
                  }
                  if (!v70) {
                    uint64_t v67 = v68;
                  }
                  uint64_t v68 = *v71;
                }
                while (*v71);
                if (v67 != v6 && *(int *)(v67 + 32) <= 6)
                {
                  *(_DWORD *)uint64_t buf = 6;
                  long long v72 = sub_1000A43BC(a1 + 1192, (int *)buf);
                  *(_DWORD *)(a1 + 1996) = sub_1018929B0((uint64_t)v72, (double *)v72);
                  *(_DWORD *)uint64_t buf = 6;
                  long long v73 = sub_1000A43BC(a1 + 1192, (int *)buf);
                  *(_DWORD *)(a1 + 2036) = sub_101892A94((uint64_t)v73, (double *)v73);
                  *(_DWORD *)uint64_t buf = 6;
                  int v74 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
                  if (v74 < 0xD) {
                    int v75 = 6;
                  }
                  else {
                    int v75 = 7;
                  }
                  if (v74 >= 9) {
                    int v76 = v75;
                  }
                  else {
                    int v76 = 5;
                  }
                  if (v74 >= 5) {
                    int v74 = v76;
                  }
                  *(_DWORD *)(a1 + 2076) = v74;
                  uint64_t v5 = *(void *)(a1 + 1200);
                }
                if (v5)
                {
                  uint64_t v77 = a1 + 1200;
                  uint64_t v78 = v5;
                  do
                  {
                    int v79 = *(_DWORD *)(v78 + 32);
                    BOOL v80 = v79 < 7;
                    if (v79 >= 7) {
                      unint64_t v81 = (uint64_t *)v78;
                    }
                    else {
                      unint64_t v81 = (uint64_t *)(v78 + 8);
                    }
                    if (!v80) {
                      uint64_t v77 = v78;
                    }
                    uint64_t v78 = *v81;
                  }
                  while (*v81);
                  if (v77 != v6 && *(int *)(v77 + 32) <= 7)
                  {
                    *(_DWORD *)uint64_t buf = 7;
                    unint64_t v82 = sub_1000A43BC(a1 + 1192, (int *)buf);
                    *(_DWORD *)(a1 + 2000) = sub_1018929B0((uint64_t)v82, (double *)v82);
                    *(_DWORD *)uint64_t buf = 7;
                    uint64_t v83 = sub_1000A43BC(a1 + 1192, (int *)buf);
                    *(_DWORD *)(a1 + 2040) = sub_101892A94((uint64_t)v83, (double *)v83);
                    *(_DWORD *)uint64_t buf = 7;
                    int v84 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
                    if (v84 < 0xD) {
                      int v85 = 6;
                    }
                    else {
                      int v85 = 7;
                    }
                    if (v84 >= 9) {
                      int v86 = v85;
                    }
                    else {
                      int v86 = 5;
                    }
                    if (v84 >= 5) {
                      int v84 = v86;
                    }
                    *(_DWORD *)(a1 + 2080) = v84;
                    uint64_t v5 = *(void *)(a1 + 1200);
                  }
                  if (v5)
                  {
                    uint64_t v87 = a1 + 1200;
                    uint64_t v88 = v5;
                    do
                    {
                      int v89 = *(_DWORD *)(v88 + 32);
                      BOOL v90 = v89 < 8;
                      if (v89 >= 8) {
                        uint64_t v91 = (uint64_t *)v88;
                      }
                      else {
                        uint64_t v91 = (uint64_t *)(v88 + 8);
                      }
                      if (!v90) {
                        uint64_t v87 = v88;
                      }
                      uint64_t v88 = *v91;
                    }
                    while (*v91);
                    if (v87 != v6 && *(int *)(v87 + 32) <= 8)
                    {
                      *(_DWORD *)uint64_t buf = 8;
                      __int16 v92 = sub_1000A43BC(a1 + 1192, (int *)buf);
                      *(_DWORD *)(a1 + 2004) = sub_1018929B0((uint64_t)v92, (double *)v92);
                      *(_DWORD *)uint64_t buf = 8;
                      unint64_t v93 = sub_1000A43BC(a1 + 1192, (int *)buf);
                      *(_DWORD *)(a1 + 2044) = sub_101892A94((uint64_t)v93, (double *)v93);
                      *(_DWORD *)uint64_t buf = 8;
                      int v94 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
                      if (v94 < 0xD) {
                        int v95 = 6;
                      }
                      else {
                        int v95 = 7;
                      }
                      if (v94 >= 9) {
                        int v96 = v95;
                      }
                      else {
                        int v96 = 5;
                      }
                      if (v94 >= 5) {
                        int v94 = v96;
                      }
                      *(_DWORD *)(a1 + 2084) = v94;
                      uint64_t v5 = *(void *)(a1 + 1200);
                    }
                    if (v5)
                    {
                      uint64_t v97 = a1 + 1200;
                      do
                      {
                        int v98 = *(_DWORD *)(v5 + 32);
                        BOOL v99 = v98 < 9;
                        if (v98 >= 9) {
                          __int16 v100 = (uint64_t *)v5;
                        }
                        else {
                          __int16 v100 = (uint64_t *)(v5 + 8);
                        }
                        if (!v99) {
                          uint64_t v97 = v5;
                        }
                        uint64_t v5 = *v100;
                      }
                      while (*v100);
                      if (v97 != v6 && *(int *)(v97 + 32) <= 9)
                      {
                        *(_DWORD *)uint64_t buf = 9;
                        uint64_t v101 = sub_1000A43BC(a1 + 1192, (int *)buf);
                        *(_DWORD *)(a1 + 2008) = sub_1018929B0((uint64_t)v101, (double *)v101);
                        *(_DWORD *)uint64_t buf = 9;
                        double v102 = sub_1000A43BC(a1 + 1192, (int *)buf);
                        *(_DWORD *)(a1 + 2048) = sub_101892A94((uint64_t)v102, (double *)v102);
                        *(_DWORD *)uint64_t buf = 9;
                        int v103 = llround(*(double *)sub_1000A43BC(a1 + 1216, (int *)buf));
                        if (v103 < 0xD) {
                          int v104 = 6;
                        }
                        else {
                          int v104 = 7;
                        }
                        if (v103 >= 9) {
                          int v105 = v104;
                        }
                        else {
                          int v105 = 5;
                        }
                        if (v103 >= 5) {
                          int v103 = v105;
                        }
                        *(_DWORD *)(a1 + 2088) = v103;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v106 = *(void *)(a1 + 264);
  uint64_t v107 = *(void *)(a1 + 272);
  if (v106 != v107)
  {
    uint64_t v108 = 0;
    unint64_t v109 = 0;
    unint64_t v110 = v107 - v106;
    unint64_t v111 = (v107 - v106) >> 4;
    if (v111 <= 1) {
      uint64_t v112 = 1;
    }
    else {
      uint64_t v112 = v111;
    }
    __int16 v113 = (unint64_t *)(v106 + 8);
    int v114 = -1;
    do
    {
      unint64_t v116 = *v113;
      v113 += 2;
      unint64_t v115 = v116;
      if (v116 > v109)
      {
        int v114 = v108;
        unint64_t v109 = v115;
      }
      ++v108;
    }
    while (v112 != v108);
    if ((v114 & 0x80000000) == 0 && v114 < (int)(v110 >> 4))
    {
      int v117 = *(_DWORD *)(v106 + 16 * v114) - 1;
      if (v117 > 6) {
        int v118 = 0;
      }
      else {
        int v118 = dword_101E44E40[v117];
      }
      *(_DWORD *)(a1 + 2092) = v118;
    }
  }
  uint64_t v119 = sub_10189274C(a1);
  *(_DWORD *)(a1 + 2096) = v119;
  uint64_t v120 = *(void *)(a1 + 448);
  uint64_t v121 = *(void *)(a1 + 456);
  if (v120 != v121)
  {
    uint64_t v122 = 0;
    unint64_t v123 = 0;
    unint64_t v124 = v121 - v120;
    unint64_t v125 = (v121 - v120) >> 4;
    if (v125 <= 1) {
      uint64_t v126 = 1;
    }
    else {
      uint64_t v126 = v125;
    }
    int v127 = (unint64_t *)(v120 + 8);
    int v128 = -1;
    do
    {
      unint64_t v130 = *v127;
      v127 += 2;
      unint64_t v129 = v130;
      if (v130 > v123)
      {
        int v128 = v122;
        unint64_t v123 = v129;
      }
      ++v122;
    }
    while (v126 != v122);
    if ((v128 & 0x80000000) == 0 && v128 < (int)(v124 >> 4))
    {
      int v131 = *(_DWORD *)(v120 + 16 * v128);
      if (v131 == 2) {
        int v132 = 2;
      }
      else {
        int v132 = v131 == 1;
      }
      *(_DWORD *)(a1 + 2100) = v132;
    }
  }
  uint64_t v133 = *(void *)(a1 + 400);
  uint64_t v134 = *(void *)(a1 + 408);
  if (v133 != v134)
  {
    uint64_t v135 = 0;
    unint64_t v136 = 0;
    unint64_t v137 = v134 - v133;
    unint64_t v138 = (v134 - v133) >> 4;
    if (v138 <= 1) {
      uint64_t v139 = 1;
    }
    else {
      uint64_t v139 = v138;
    }
    int v140 = (unint64_t *)(v133 + 8);
    int v141 = -1;
    do
    {
      unint64_t v143 = *v140;
      v140 += 2;
      unint64_t v142 = v143;
      if (v143 > v136)
      {
        int v141 = v135;
        unint64_t v136 = v142;
      }
      ++v135;
    }
    while (v139 != v135);
    if ((v141 & 0x80000000) == 0 && v141 < (int)(v137 >> 4))
    {
      int v144 = *(_DWORD *)(v133 + 16 * v141);
      if ((v144 - 1) >= 8) {
        int v144 = 0;
      }
      *(_DWORD *)(a1 + 2104) = v144;
    }
  }
  uint64_t v145 = *(void *)(a1 + 424);
  uint64_t v146 = *(void *)(a1 + 432);
  if (v145 != v146)
  {
    uint64_t v147 = 0;
    unint64_t v148 = 0;
    unint64_t v149 = v146 - v145;
    unint64_t v150 = (v146 - v145) >> 4;
    if (v150 <= 1) {
      uint64_t v151 = 1;
    }
    else {
      uint64_t v151 = v150;
    }
    uint64_t v152 = (unint64_t *)(v145 + 8);
    int v153 = -1;
    do
    {
      unint64_t v155 = *v152;
      v152 += 2;
      unint64_t v154 = v155;
      if (v155 > v148)
      {
        int v153 = v147;
        unint64_t v148 = v154;
      }
      ++v147;
    }
    while (v151 != v147);
    if ((v153 & 0x80000000) == 0 && v153 < (int)(v149 >> 4))
    {
      int v156 = *(_DWORD *)(v145 + 16 * v153);
      if ((v156 - 1) >= 3) {
        int v156 = 0;
      }
      *(_DWORD *)(a1 + 2108) = v156;
    }
  }
  uint64_t v157 = *(void *)(a1 + 288);
  uint64_t v158 = *(void *)(a1 + 296);
  if (v157 != v158)
  {
    uint64_t v159 = 0;
    unint64_t v160 = 0;
    unint64_t v161 = v158 - v157;
    unint64_t v162 = (v158 - v157) >> 4;
    if (v162 <= 1) {
      uint64_t v163 = 1;
    }
    else {
      uint64_t v163 = v162;
    }
    unint64_t v164 = (unint64_t *)(v157 + 8);
    int v165 = -1;
    do
    {
      unint64_t v167 = *v164;
      v164 += 2;
      unint64_t v166 = v167;
      if (v167 > v160)
      {
        int v165 = v159;
        unint64_t v160 = v166;
      }
      ++v159;
    }
    while (v163 != v159);
    if ((v165 & 0x80000000) == 0 && v165 < (int)(v161 >> 4))
    {
      int v168 = *(_DWORD *)(v157 + 16 * v165);
      if ((v168 - 1) >= 6) {
        int v168 = 0;
      }
      *(_DWORD *)(a1 + 2116) = v168;
    }
  }
  uint64_t v169 = *(void *)(a1 + 184);
  uint64_t v170 = *(void *)(a1 + 192);
  if (v169 != v170)
  {
    uint64_t v171 = 0;
    unint64_t v172 = 0;
    unint64_t v173 = v170 - v169;
    unint64_t v174 = (v170 - v169) >> 4;
    if (v174 <= 1) {
      uint64_t v175 = 1;
    }
    else {
      uint64_t v175 = v174;
    }
    float v176 = (unint64_t *)(v169 + 8);
    int v177 = -1;
    do
    {
      unint64_t v179 = *v176;
      v176 += 2;
      unint64_t v178 = v179;
      if (v179 > v172)
      {
        int v177 = v171;
        unint64_t v172 = v178;
      }
      ++v171;
    }
    while (v175 != v171);
    if ((v177 & 0x80000000) == 0 && v177 < (int)(v173 >> 4))
    {
      int v180 = *(_DWORD *)(v169 + 16 * v177);
      if ((v180 - 1) >= 4) {
        int v180 = 0;
      }
      *(_DWORD *)(a1 + 2124) = v180;
    }
  }
  __int16 v181 = *(int **)(a1 + 496);
  int64x2_t v182 = *(int **)(a1 + 504);
  if (v181 == v182)
  {
    LODWORD(v186) = -1;
  }
  else
  {
    unint64_t v183 = 0;
    unint64_t v184 = 0;
    do
    {
      uint64_t v185 = *((void *)v181 + 1);
      v183 += v185;
      v184 += v185 * *v181;
      v181 += 4;
    }
    while (v181 != v182);
    unint64_t v186 = v184 / v183;
  }
  *(_DWORD *)(a1 + 2128) = v186;
  uint64_t v187 = sub_10189286C(v119, (uint64_t *)(a1 + 472));
  *(_DWORD *)(a1 + 2136) = v187;
  *(_DWORD *)(a1 + 2140) = sub_1018928C0(v187, (void *)(a1 + 1288));
  *(_DWORD *)(a1 + 2144) = *(_DWORD *)(a1 + 1064);
  *(_DWORD *)(a1 + 1344) = *(_DWORD *)(a1 + 144);
  unint64_t v188 = *(void *)(a1 + 152);
  unint64_t v189 = *(void *)(a1 + 160);
  *(_DWORD *)(a1 + 1352) = v188;
  *(_DWORD *)(a1 + 1360) = v189;
  uint64_t v190 = *(int *)(a1 + 256);
  *(_DWORD *)(a1 + 1356) = v190;
  unint64_t v191 = *(void *)(a1 + 136) - v190;
  if (v191) {
    *(_DWORD *)(a1 + 1348) = llroundf((float)((float)v188 / (float)v191) * 100.0);
  }
  *(double *)(a1 + 1368) = *(float *)(a1 + 864);
  *(_DWORD *)(a1 + 1376) = *(_DWORD *)(a1 + 868);
  *(double *)(a1 + 1384) = *(float *)(a1 + 860);
  double v192 = *(double *)(a1 + 1036);
  *(double *)(a1 + 1392) = v192;
  *(_DWORD *)(a1 + 1400) = *(_DWORD *)(a1 + 1044);
  if (v189)
  {
    double v193 = 100.0 / (double)v189;
    v194.i64[0] = *(void *)(a1 + 536);
    v194.i64[1] = *(void *)(a1 + 616);
    v195.i64[0] = *(void *)(a1 + 640);
    v195.i64[1] = *(void *)(a1 + 568);
    *(int32x4_t *)(a1 + 1404) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 544)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v194))), v193))));
    *(int32x4_t *)(a1 + 1420) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 520)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    *(int32x4_t *)(a1 + 1436) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 576)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 592)))), v193))));
    *(_DWORD *)(a1 + 1452) = llround(v193 * (float)*(unint64_t *)(a1 + 608));
    v195.i64[0] = *(void *)(a1 + 632);
    v195.i64[1] = *(void *)(a1 + 664);
    *(int32x4_t *)(a1 + 1456) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 648)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    v194.i64[0] = *(void *)(a1 + 688);
    v194.i64[1] = *(void *)(a1 + 760);
    *(int32x4_t *)(a1 + 1472) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 696)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v194))), v193))));
    v195.i64[0] = *(void *)(a1 + 784);
    v195.i64[1] = *(void *)(a1 + 712);
    *(int32x4_t *)(a1 + 1488) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 672)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    *(int32x4_t *)(a1 + 1504) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 720)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 736)))), v193))));
    *(_DWORD *)(a1 + 1520) = llround(v193 * (float)*(unint64_t *)(a1 + 752));
    v195.i64[0] = *(void *)(a1 + 776);
    v195.i64[1] = *(void *)(a1 + 808);
    *(int32x4_t *)(a1 + 1524) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 792)))), v193))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(v195))), v193))));
    *(float *)v195.i32 = (float)*(unint64_t *)(a1 + 832);
    *(int32x2_t *)(a1 + 1540) = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 816)))), v193))));
    double v192 = v193 * *(float *)v195.i32;
    *(_DWORD *)(a1 + 1548) = llround(v192);
  }
  int v196 = *(_DWORD *)(a1 + 1004);
  if (v196 + v188)
  {
    *(float *)&double v192 = (float)(v196 + (int)v188);
    uint64_t v197 = *(int *)(a1 + 1008);
    *(float32x2_t *)v198.f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 1000));
    v198.f32[2] = (float)(int)v197;
    v198.f32[3] = (float)(v188 - (*(_DWORD *)(a1 + 1000) + v197));
    *(int32x4_t *)(a1 + 1552) = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vdivq_f32(v198, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v192, 0)), (float32x4_t)vdupq_n_s32(0x42C80000u))));
  }
  v199.i64[0] = *(void *)(a1 + 1048);
  *(double *)(a1 + 1568) = *(float *)(a1 + 176);
  int32x2_t v200 = vadd_s32(vdup_lane_s32(*(int32x2_t *)v199.i8, 1), *(int32x2_t *)v199.i8);
  int v201 = *(_DWORD *)(a1 + 1056);
  if (v200.i32[0] + v201 >= 1)
  {
    *(float *)v200.i32 = (float)(v200.i32[0] + v201);
    v199.i64[1] = *(void *)(a1 + 1056);
    float32x4_t v202 = vdivq_f32(vcvtq_f32_s32(v199), (float32x4_t)vdupq_lane_s32(v200, 0));
    float64x2_t v203 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    *(int32x4_t *)(a1 + 1576) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v202.f32), v203))), (int32x4_t)vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvt_hight_f64_f32(v202), v203))));
  }
  sub_1018976E4((uint64_t **)(a1 + 1592), *(uint64_t **)(a1 + 312), (uint64_t *)(a1 + 320));
  sub_101897A24((uint64_t **)(a1 + 1616), *(uint64_t **)(a1 + 336), (uint64_t *)(a1 + 344));
  *(_DWORD *)(a1 + 1672) = *(_DWORD *)(a1 + 392);
  sub_101897D0C((void *)(a1 + 1640), *(uint64_t **)(a1 + 376), 0);
  sub_101898154((void *)(a1 + 1680), *(long long **)(a1 + 472), *(long long **)(a1 + 480), (uint64_t)(*(void *)(a1 + 480) - *(void *)(a1 + 472)) >> 4);
  uint64_t v204 = *(void *)(a1 + 944);
  uint64_t v205 = *(void *)(a1 + 952);
  if (v204 == v205)
  {
    int v210 = -1;
  }
  else
  {
    uint64_t v206 = 0;
    unint64_t v207 = 0;
    unint64_t v208 = (v205 - v204) >> 4;
    if (v208 <= 1) {
      unint64_t v208 = 1;
    }
    v209 = (unint64_t *)(v204 + 8);
    int v210 = -1;
    do
    {
      unint64_t v212 = *v209;
      v209 += 2;
      unint64_t v211 = v212;
      if (v212 > v207)
      {
        int v210 = v206;
        unint64_t v207 = v211;
      }
      ++v206;
    }
    while (v208 != v206);
  }
  *(_DWORD *)(a1 + 2172) = v210;
  uint64_t v213 = *(void *)(a1 + 968);
  uint64_t v214 = *(void *)(a1 + 976);
  if (v213 == v214)
  {
    int v219 = -1;
  }
  else
  {
    uint64_t v215 = 0;
    unint64_t v216 = 0;
    unint64_t v217 = (v214 - v213) >> 4;
    if (v217 <= 1) {
      unint64_t v217 = 1;
    }
    v218 = (unint64_t *)(v213 + 8);
    int v219 = -1;
    do
    {
      unint64_t v221 = *v218;
      v218 += 2;
      unint64_t v220 = v221;
      if (v221 > v216)
      {
        int v219 = v215;
        unint64_t v216 = v220;
      }
      ++v215;
    }
    while (v217 != v215);
  }
  *(_DWORD *)(a1 + 2168) = v219;
  *(void *)(a1 + 1332) = *(void *)(a1 + 1072);
  *(_DWORD *)(a1 + 1328) = *(void *)(a1 + 936);
  *(_DWORD *)(a1 + 1340) = *(_DWORD *)(a1 + 1080);
  unsigned int v222 = *(_DWORD *)(a1 + 1092);
  unsigned int v223 = *(_DWORD *)(a1 + 1100);
  unsigned int v224 = *(_DWORD *)(a1 + 1096);
  unsigned int v225 = *(_DWORD *)(a1 + 1104);
  unsigned int v226 = v223 + v222 + v224 + v225;
  if (v226)
  {
    double v227 = 100.0 / (double)v226;
    *(_DWORD *)(a1 + 1916) = (int)(v227 * (double)v222);
    *(_DWORD *)(a1 + 1924) = (int)(v227 * (double)v223);
    *(_DWORD *)(a1 + 1920) = (int)(v227 * (double)v224);
    *(_DWORD *)(a1 + 1928) = (int)(v227 * (double)v225);
  }
  unsigned int v228 = *(_DWORD *)(a1 + 1088);
  unsigned int v229 = *(_DWORD *)(a1 + 1084);
  if (v229 + v228)
  {
    double v230 = 100.0 / (double)(v229 + v228);
    *(_DWORD *)(a1 + 1912) = (int)(v230 * (double)v228);
    *(_DWORD *)(a1 + 1908) = (int)(v230 * (double)v229);
  }
  *(void *)(a1 + 1704) = *(void *)(a1 + 1128);
  *(_DWORD *)(a1 + 2160) = *(_DWORD *)(a1 + 1116);
  *(unsigned char *)(a1 + 2164) = *(unsigned char *)(a1 + 1120);
  *(void *)(a1 + 2152) = *(void *)(a1 + 1108);
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    v231 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v232 = *(void *)(a1 + 1704);
      int v233 = *(_DWORD *)(a1 + 2156);
      int v234 = *(_DWORD *)(a1 + 2152);
      int v235 = *(_DWORD *)(a1 + 2160);
      int v236 = *(unsigned __int8 *)(a1 + 2164);
      *(_DWORD *)uint64_t buf = 134284545;
      *(void *)&uint8_t buf[4] = v232;
      *(_WORD *)&unsigned char buf[12] = 1025;
      *(_DWORD *)v259 = v233;
      *(_WORD *)&v259[4] = 1025;
      int v260 = v234;
      __int16 v261 = 1025;
      int v262 = v235;
      __int16 v263 = 1025;
      int v264 = v236;
      _os_log_impl((void *)&_mh_execute_header, v231, OS_LOG_TYPE_DEBUG, "#gnssca,PositionAssistanceMetrics,deltaFirstFixAndPositionAssistMeters,%{private}f,PositionAssistHorzAcc,%{private}d,HorzReliability,%{private}d,PositionAssistType,%{private}d,wasWiFiPositioningAvailable,%{private}d", buf, 0x24u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      v255 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::collectCAData()", "%s\n", v255);
      if (v255 != buf) {
        free(v255);
      }
    }
  }
  sub_101893EF8(a1);
  long long v237 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 1768) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 1784) = v237;
  *(_OWORD *)(a1 + 1800) = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 1816) = *(_DWORD *)(a1 + 104);
  sub_1018969C8((uint64_t **)(a1 + 1824), *(void **)(a1 + 112), (void *)(a1 + 120));
  *(_DWORD *)(a1 + 1816) = *(_DWORD *)(a1 + 2404);
  int v238 = *(_DWORD *)(a1 + 1848);
  if (v238)
  {
    uint64_t v239 = *(void *)(a1 + 1860);
    v240.i64[0] = (int)v239;
    v240.i64[1] = SHIDWORD(v239);
    *(int32x2_t *)(a1 + 1884) = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v240), 100.0 / (double)v238)));
  }
  int v241 = *(_DWORD *)(a1 + 1852);
  if (v241)
  {
    uint64_t v242 = *(void *)(a1 + 1868);
    v243.i64[0] = (int)v242;
    v243.i64[1] = SHIDWORD(v242);
    *(int32x2_t *)(a1 + 1892) = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v243), 100.0 / (double)v241)));
  }
  int v244 = *(_DWORD *)(a1 + 1856);
  if (v244)
  {
    uint64_t v245 = *(void *)(a1 + 1876);
    v246.i64[0] = (int)v245;
    v246.i64[1] = SHIDWORD(v245);
    *(int32x2_t *)(a1 + 1900) = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v246), 100.0 / (double)v244)));
  }
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    v247 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v248 = *(_DWORD *)(a1 + 1888);
      int v249 = *(_DWORD *)(a1 + 1896);
      int v250 = *(_DWORD *)(a1 + 1904);
      *(_DWORD *)uint64_t buf = 67175169;
      *(_DWORD *)&uint8_t buf[4] = v248;
      *(_WORD *)&uint8_t buf[8] = 1025;
      *(_DWORD *)&buf[10] = v249;
      *(_WORD *)v259 = 1025;
      *(_DWORD *)&v259[2] = v250;
      _os_log_impl((void *)&_mh_execute_header, v247, OS_LOG_TYPE_DEBUG, "#gnssca,phase lock rate metrics,phase_lock_rate_20_25dBHz,%{private}d,phase_lock_rate_25_30dBHz,%{private}d,phase_lock_rate_30plusdBHz,%{private}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      v256 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::collectCAData()", "%s\n", v256);
      if (v256 != buf) {
        free(v256);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    v251 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v252 = *(_DWORD *)(a1 + 1884);
      int v253 = *(_DWORD *)(a1 + 1892);
      int v254 = *(_DWORD *)(a1 + 1900);
      *(_DWORD *)uint64_t buf = 67175169;
      *(_DWORD *)&uint8_t buf[4] = v252;
      *(_WORD *)&uint8_t buf[8] = 1025;
      *(_DWORD *)&buf[10] = v253;
      *(_WORD *)v259 = 1025;
      *(_DWORD *)&v259[2] = v254;
      _os_log_impl((void *)&_mh_execute_header, v251, OS_LOG_TYPE_DEBUG, "#gnssca,phase available rate metrics,phase_available_rate_20_25dBHz,%{private}d,phase_available_rate_25_30dBHz,%{private}d,phase_available_rate_30plusdBHz,%{private}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      v257 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::collectCAData()", "%s\n", v257);
      if (v257 != buf) {
        free(v257);
      }
    }
  }
}

void sub_10188AC20(uint64_t a1, uint64_t a2, int *a3)
{
  *(double *)(a2 + 96) = sub_10016C458() - *(double *)(a2 + 80);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd handleGnssSessionReport\"}", buf, 0x12u);
  }
  sub_100D67364(a2);
  sub_100D67B88(a3);
  double v5 = *(double *)(a2 + 96);
  *(void *)(a1 + 136) = (unint64_t)v5;
  unint64_t v6 = *(void *)(a2 + 144);
  *(float *)&double v5 = v5;
  *(_DWORD *)(a1 + 144) = (float)((float)((float)v6 / *(float *)&v5) * 100.0);
  *(void *)(a1 + 152) = v6;
  *(void *)(a1 + 160) = *(void *)(a2 + 104);
  *(float32x4_t *)(a1 + 168) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 112)), *(float64x2_t *)(a2 + 128));
  uint64_t v7 = *(void **)(a2 + 152);
  if (v7 != (void *)(a2 + 160))
  {
    uint64_t v8 = (void **)(a1 + 208);
    int v9 = (void *)(a1 + 224);
    BOOL v10 = *(char **)(a1 + 216);
    do
    {
      int v11 = *((_DWORD *)v7 + 8);
      uint64_t v12 = v7[5];
      if ((unint64_t)v10 >= *v9)
      {
        long long v13 = (char *)*v8;
        uint64_t v14 = (v10 - (unsigned char *)*v8) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v16 = *v9 - (void)v13;
        if (v16 >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)sub_1000C571C(a1 + 224, v17);
          long long v13 = *(char **)(a1 + 208);
          BOOL v10 = *(char **)(a1 + 216);
        }
        else
        {
          uint64_t v18 = 0;
        }
        int v19 = &v18[16 * v14];
        *(_DWORD *)int v19 = v11;
        *((void *)v19 + 1) = v12;
        BOOL v20 = v19;
        if (v10 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v10 - 1);
            v20 -= 16;
            v10 -= 16;
          }
          while (v10 != v13);
          long long v13 = (char *)*v8;
        }
        BOOL v10 = v19 + 16;
        *(void *)(a1 + 208) = v20;
        *(void *)(a1 + 216) = v19 + 16;
        *(void *)(a1 + 224) = &v18[16 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)BOOL v10 = v11;
        *((void *)v10 + 1) = v12;
        v10 += 16;
      }
      *(void *)(a1 + 216) = v10;
      unsigned __int8 v21 = (void *)v7[1];
      if (v21)
      {
        do
        {
          long long v22 = v21;
          unsigned __int8 v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          long long v22 = (void *)v7[2];
          BOOL v23 = *v22 == (void)v7;
          uint64_t v7 = v22;
        }
        while (!v23);
      }
      uint64_t v7 = v22;
    }
    while (v22 != (void *)(a2 + 160));
  }
  int v24 = *(void **)(a2 + 176);
  if (v24 != (void *)(a2 + 184))
  {
    int v25 = (void **)(a1 + 232);
    int v26 = (void *)(a1 + 248);
    uint64_t v27 = *(char **)(a1 + 240);
    do
    {
      int v28 = *((_DWORD *)v24 + 8);
      uint64_t v29 = v24[5];
      if ((unint64_t)v27 >= *v26)
      {
        BOOL v30 = (char *)*v25;
        uint64_t v31 = (v27 - (unsigned char *)*v25) >> 4;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v33 = *v26 - (void)v30;
        if (v33 >> 3 > v32) {
          unint64_t v32 = v33 >> 3;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          int v35 = (char *)sub_1000C571C(a1 + 248, v34);
          BOOL v30 = *(char **)(a1 + 232);
          uint64_t v27 = *(char **)(a1 + 240);
        }
        else
        {
          int v35 = 0;
        }
        int v36 = &v35[16 * v31];
        *(_DWORD *)int v36 = v28;
        *((void *)v36 + 1) = v29;
        uint64_t v37 = v36;
        if (v27 != v30)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v27 - 1);
            v37 -= 16;
            v27 -= 16;
          }
          while (v27 != v30);
          BOOL v30 = (char *)*v25;
        }
        uint64_t v27 = v36 + 16;
        *(void *)(a1 + 232) = v37;
        *(void *)(a1 + 240) = v36 + 16;
        *(void *)(a1 + 248) = &v35[16 * v34];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v27 = v28;
        *((void *)v27 + 1) = v29;
        v27 += 16;
      }
      *(void *)(a1 + 240) = v27;
      uint64_t v38 = (void *)v24[1];
      if (v38)
      {
        do
        {
          int v39 = v38;
          uint64_t v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          int v39 = (void *)v24[2];
          BOOL v23 = *v39 == (void)v24;
          int v24 = v39;
        }
        while (!v23);
      }
      int v24 = v39;
    }
    while (v39 != (void *)(a2 + 184));
  }
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 200);
  BOOL v40 = *(uint64_t **)(a2 + 224);
  if (v40)
  {
    long long v41 = (void **)(a1 + 184);
    long long v42 = (void *)(a1 + 200);
    __int16 v43 = *(char **)(a1 + 192);
    do
    {
      int v44 = *((_DWORD *)v40 + 4);
      uint64_t v45 = v40[3];
      if ((unint64_t)v43 >= *v42)
      {
        int v46 = (char *)*v41;
        uint64_t v47 = (v43 - (unsigned char *)*v41) >> 4;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v49 = *v42 - (void)v46;
        if (v49 >> 3 > v48) {
          unint64_t v48 = v49 >> 3;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          long long v51 = (char *)sub_1000C571C(a1 + 200, v50);
          int v46 = *(char **)(a1 + 184);
          __int16 v43 = *(char **)(a1 + 192);
        }
        else
        {
          long long v51 = 0;
        }
        long long v52 = &v51[16 * v47];
        *(_DWORD *)long long v52 = v44;
        *((void *)v52 + 1) = v45;
        long long v53 = v52;
        if (v43 != v46)
        {
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v43 - 1);
            v53 -= 16;
            v43 -= 16;
          }
          while (v43 != v46);
          int v46 = (char *)*v41;
        }
        __int16 v43 = v52 + 16;
        *(void *)(a1 + 184) = v53;
        *(void *)(a1 + 192) = v52 + 16;
        *(void *)(a1 + 200) = &v51[16 * v50];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *(_DWORD *)__int16 v43 = v44;
        *((void *)v43 + 1) = v45;
        v43 += 16;
      }
      *(void *)(a1 + 192) = v43;
      BOOL v40 = (uint64_t *)*v40;
    }
    while (v40);
  }
  int v54 = *(void **)(a2 + 248);
  if (v54 != (void *)(a2 + 256))
  {
    int v55 = (void **)(a1 + 264);
    int v56 = (void *)(a1 + 280);
    uint64_t v57 = *(char **)(a1 + 272);
    do
    {
      int v58 = *((_DWORD *)v54 + 8);
      uint64_t v59 = v54[5];
      if ((unint64_t)v57 >= *v56)
      {
        BOOL v60 = (char *)*v55;
        uint64_t v61 = (v57 - (unsigned char *)*v55) >> 4;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v63 = *v56 - (void)v60;
        if (v63 >> 3 > v62) {
          unint64_t v62 = v63 >> 3;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v64 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          int v65 = (char *)sub_1000C571C(a1 + 280, v64);
          BOOL v60 = *(char **)(a1 + 264);
          uint64_t v57 = *(char **)(a1 + 272);
        }
        else
        {
          int v65 = 0;
        }
        int v66 = &v65[16 * v61];
        *(_DWORD *)int v66 = v58;
        *((void *)v66 + 1) = v59;
        uint64_t v67 = v66;
        if (v57 != v60)
        {
          do
          {
            *((_OWORD *)v67 - 1) = *((_OWORD *)v57 - 1);
            v67 -= 16;
            v57 -= 16;
          }
          while (v57 != v60);
          BOOL v60 = (char *)*v55;
        }
        uint64_t v57 = v66 + 16;
        *(void *)(a1 + 264) = v67;
        *(void *)(a1 + 272) = v66 + 16;
        *(void *)(a1 + 280) = &v65[16 * v64];
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v57 = v58;
        *((void *)v57 + 1) = v59;
        v57 += 16;
      }
      *(void *)(a1 + 272) = v57;
      uint64_t v68 = (void *)v54[1];
      if (v68)
      {
        do
        {
          int v69 = v68;
          uint64_t v68 = (void *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          int v69 = (void *)v54[2];
          BOOL v23 = *v69 == (void)v54;
          int v54 = v69;
        }
        while (!v23);
      }
      int v54 = v69;
    }
    while (v69 != (void *)(a2 + 256));
  }
  BOOL v70 = *(uint64_t **)(a2 + 288);
  if (v70)
  {
    long long v71 = (void **)(a1 + 288);
    long long v72 = (void *)(a1 + 304);
    long long v73 = *(char **)(a1 + 296);
    do
    {
      int v74 = *((_DWORD *)v70 + 4);
      uint64_t v75 = v70[3];
      if ((unint64_t)v73 >= *v72)
      {
        int v76 = (char *)*v71;
        uint64_t v77 = (v73 - (unsigned char *)*v71) >> 4;
        unint64_t v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v79 = *v72 - (void)v76;
        if (v79 >> 3 > v78) {
          unint64_t v78 = v79 >> 3;
        }
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v80 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          unint64_t v81 = (char *)sub_1000C571C(a1 + 304, v80);
          int v76 = *(char **)(a1 + 288);
          long long v73 = *(char **)(a1 + 296);
        }
        else
        {
          unint64_t v81 = 0;
        }
        unint64_t v82 = &v81[16 * v77];
        *(_DWORD *)unint64_t v82 = v74;
        *((void *)v82 + 1) = v75;
        uint64_t v83 = v82;
        if (v73 != v76)
        {
          do
          {
            *((_OWORD *)v83 - 1) = *((_OWORD *)v73 - 1);
            v83 -= 16;
            v73 -= 16;
          }
          while (v73 != v76);
          int v76 = (char *)*v71;
        }
        long long v73 = v82 + 16;
        *(void *)(a1 + 288) = v83;
        *(void *)(a1 + 296) = v82 + 16;
        *(void *)(a1 + 304) = &v81[16 * v80];
        if (v76) {
          operator delete(v76);
        }
      }
      else
      {
        *(_DWORD *)long long v73 = v74;
        *((void *)v73 + 1) = v75;
        v73 += 16;
      }
      *(void *)(a1 + 296) = v73;
      BOOL v70 = (uint64_t *)*v70;
    }
    while (v70);
  }
  int v84 = *(void **)(a2 + 352);
  if (v84 != (void *)(a2 + 360))
  {
    int v85 = (void **)(a1 + 400);
    int v86 = (void *)(a1 + 416);
    uint64_t v87 = *(char **)(a1 + 408);
    do
    {
      int v88 = *((_DWORD *)v84 + 8);
      uint64_t v89 = v84[5];
      if ((unint64_t)v87 >= *v86)
      {
        BOOL v90 = (char *)*v85;
        uint64_t v91 = (v87 - (unsigned char *)*v85) >> 4;
        unint64_t v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v93 = *v86 - (void)v90;
        if (v93 >> 3 > v92) {
          unint64_t v92 = v93 >> 3;
        }
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v94 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v92;
        }
        if (v94)
        {
          int v95 = (char *)sub_1000C571C(a1 + 416, v94);
          BOOL v90 = *(char **)(a1 + 400);
          uint64_t v87 = *(char **)(a1 + 408);
        }
        else
        {
          int v95 = 0;
        }
        int v96 = &v95[16 * v91];
        *(_DWORD *)int v96 = v88;
        *((void *)v96 + 1) = v89;
        uint64_t v97 = v96;
        if (v87 != v90)
        {
          do
          {
            *((_OWORD *)v97 - 1) = *((_OWORD *)v87 - 1);
            v97 -= 16;
            v87 -= 16;
          }
          while (v87 != v90);
          BOOL v90 = (char *)*v85;
        }
        uint64_t v87 = v96 + 16;
        *(void *)(a1 + 400) = v97;
        *(void *)(a1 + 408) = v96 + 16;
        *(void *)(a1 + 416) = &v95[16 * v94];
        if (v90) {
          operator delete(v90);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v87 = v88;
        *((void *)v87 + 1) = v89;
        v87 += 16;
      }
      *(void *)(a1 + 408) = v87;
      int v98 = (void *)v84[1];
      if (v98)
      {
        do
        {
          BOOL v99 = v98;
          int v98 = (void *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          BOOL v99 = (void *)v84[2];
          BOOL v23 = *v99 == (void)v84;
          int v84 = v99;
        }
        while (!v23);
      }
      int v84 = v99;
    }
    while (v99 != (void *)(a2 + 360));
  }
  __int16 v100 = *(void **)(a2 + 376);
  if (v100 != (void *)(a2 + 384))
  {
    uint64_t v101 = (void **)(a1 + 424);
    double v102 = (void *)(a1 + 440);
    int v103 = *(char **)(a1 + 432);
    do
    {
      int v104 = *((_DWORD *)v100 + 8);
      uint64_t v105 = v100[5];
      if ((unint64_t)v103 >= *v102)
      {
        uint64_t v106 = (char *)*v101;
        uint64_t v107 = (v103 - (unsigned char *)*v101) >> 4;
        unint64_t v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v109 = *v102 - (void)v106;
        if (v109 >> 3 > v108) {
          unint64_t v108 = v109 >> 3;
        }
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v110 = v108;
        }
        if (v110)
        {
          unint64_t v111 = (char *)sub_1000C571C(a1 + 440, v110);
          uint64_t v106 = *(char **)(a1 + 424);
          int v103 = *(char **)(a1 + 432);
        }
        else
        {
          unint64_t v111 = 0;
        }
        uint64_t v112 = &v111[16 * v107];
        *(_DWORD *)uint64_t v112 = v104;
        *((void *)v112 + 1) = v105;
        __int16 v113 = v112;
        if (v103 != v106)
        {
          do
          {
            *((_OWORD *)v113 - 1) = *((_OWORD *)v103 - 1);
            v113 -= 16;
            v103 -= 16;
          }
          while (v103 != v106);
          uint64_t v106 = (char *)*v101;
        }
        int v103 = v112 + 16;
        *(void *)(a1 + 424) = v113;
        *(void *)(a1 + 432) = v112 + 16;
        *(void *)(a1 + 440) = &v111[16 * v110];
        if (v106) {
          operator delete(v106);
        }
      }
      else
      {
        *(_DWORD *)int v103 = v104;
        *((void *)v103 + 1) = v105;
        v103 += 16;
      }
      *(void *)(a1 + 432) = v103;
      int v114 = (void *)v100[1];
      if (v114)
      {
        do
        {
          unint64_t v115 = v114;
          int v114 = (void *)*v114;
        }
        while (v114);
      }
      else
      {
        do
        {
          unint64_t v115 = (void *)v100[2];
          BOOL v23 = *v115 == (void)v100;
          __int16 v100 = v115;
        }
        while (!v23);
      }
      __int16 v100 = v115;
    }
    while (v115 != (void *)(a2 + 384));
  }
  unint64_t v116 = *(void **)(a2 + 400);
  if (v116 != (void *)(a2 + 408))
  {
    int v117 = (void **)(a1 + 448);
    int v118 = (void *)(a1 + 464);
    uint64_t v119 = *(char **)(a1 + 456);
    do
    {
      int v120 = *((_DWORD *)v116 + 8);
      uint64_t v121 = v116[5];
      if ((unint64_t)v119 >= *v118)
      {
        uint64_t v122 = (char *)*v117;
        uint64_t v123 = (v119 - (unsigned char *)*v117) >> 4;
        unint64_t v124 = v123 + 1;
        if ((unint64_t)(v123 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v125 = *v118 - (void)v122;
        if (v125 >> 3 > v124) {
          unint64_t v124 = v125 >> 3;
        }
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v126 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v126 = v124;
        }
        if (v126)
        {
          int v127 = (char *)sub_1000C571C(a1 + 464, v126);
          uint64_t v122 = *(char **)(a1 + 448);
          uint64_t v119 = *(char **)(a1 + 456);
        }
        else
        {
          int v127 = 0;
        }
        int v128 = &v127[16 * v123];
        *(_DWORD *)int v128 = v120;
        *((void *)v128 + 1) = v121;
        unint64_t v129 = v128;
        if (v119 != v122)
        {
          do
          {
            *((_OWORD *)v129 - 1) = *((_OWORD *)v119 - 1);
            v129 -= 16;
            v119 -= 16;
          }
          while (v119 != v122);
          uint64_t v122 = (char *)*v117;
        }
        uint64_t v119 = v128 + 16;
        *(void *)(a1 + 448) = v129;
        *(void *)(a1 + 456) = v128 + 16;
        *(void *)(a1 + 464) = &v127[16 * v126];
        if (v122) {
          operator delete(v122);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v119 = v120;
        *((void *)v119 + 1) = v121;
        v119 += 16;
      }
      *(void *)(a1 + 456) = v119;
      unint64_t v130 = (void *)v116[1];
      if (v130)
      {
        do
        {
          int v131 = v130;
          unint64_t v130 = (void *)*v130;
        }
        while (v130);
      }
      else
      {
        do
        {
          int v131 = (void *)v116[2];
          BOOL v23 = *v131 == (void)v116;
          unint64_t v116 = v131;
        }
        while (!v23);
      }
      unint64_t v116 = v131;
    }
    while (v131 != (void *)(a2 + 408));
  }
  int v132 = *(void **)(a2 + 472);
  if (v132 != (void *)(a2 + 480))
  {
    uint64_t v133 = (void *)(a1 + 472);
    uint64_t v134 = (void *)(a1 + 488);
    uint64_t v135 = *(char **)(a1 + 480);
    do
    {
      if ((unint64_t)v135 >= *v134)
      {
        uint64_t v136 = (uint64_t)&v135[-*v133] >> 4;
        if ((unint64_t)(v136 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v137 = *v134 - *v133;
        uint64_t v138 = v137 >> 3;
        if (v137 >> 3 <= (unint64_t)(v136 + 1)) {
          uint64_t v138 = v136 + 1;
        }
        if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v139 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v139 = v138;
        }
        int v140 = (char *)sub_1000C571C(a1 + 488, v139);
        unint64_t v142 = &v140[16 * v136];
        *(_DWORD *)unint64_t v142 = *((_DWORD *)v132 + 8);
        *((void *)v142 + 1) = v132[5];
        int v144 = *(char **)(a1 + 472);
        unint64_t v143 = *(char **)(a1 + 480);
        uint64_t v145 = v142;
        if (v143 != v144)
        {
          do
          {
            *((_OWORD *)v145 - 1) = *((_OWORD *)v143 - 1);
            v145 -= 16;
            v143 -= 16;
          }
          while (v143 != v144);
          unint64_t v143 = (char *)*v133;
        }
        uint64_t v135 = v142 + 16;
        *(void *)(a1 + 472) = v145;
        *(void *)(a1 + 480) = v142 + 16;
        *(void *)(a1 + 488) = &v140[16 * v141];
        if (v143) {
          operator delete(v143);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v135 = *((_DWORD *)v132 + 8);
        *((void *)v135 + 1) = v132[5];
        v135 += 16;
      }
      *(void *)(a1 + 480) = v135;
      uint64_t v146 = (void *)v132[1];
      if (v146)
      {
        do
        {
          uint64_t v147 = v146;
          uint64_t v146 = (void *)*v146;
        }
        while (v146);
      }
      else
      {
        do
        {
          uint64_t v147 = (void *)v132[2];
          BOOL v23 = *v147 == (void)v132;
          int v132 = v147;
        }
        while (!v23);
      }
      int v132 = v147;
    }
    while (v147 != (void *)(a2 + 480));
  }
  unint64_t v148 = *(void **)(a2 + 312);
  if (v148 != (void *)(a2 + 320))
  {
    unint64_t v149 = (void **)(a1 + 496);
    unint64_t v150 = (void *)(a1 + 512);
    uint64_t v151 = *(char **)(a1 + 504);
    do
    {
      int v152 = *((_DWORD *)v148 + 8);
      uint64_t v153 = v148[5];
      if ((unint64_t)v151 >= *v150)
      {
        unint64_t v154 = (char *)*v149;
        uint64_t v155 = (v151 - (unsigned char *)*v149) >> 4;
        unint64_t v156 = v155 + 1;
        if ((unint64_t)(v155 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v157 = *v150 - (void)v154;
        if (v157 >> 3 > v156) {
          unint64_t v156 = v157 >> 3;
        }
        if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v158 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v158 = v156;
        }
        if (v158)
        {
          uint64_t v159 = (char *)sub_1000C571C(a1 + 512, v158);
          unint64_t v154 = *(char **)(a1 + 496);
          uint64_t v151 = *(char **)(a1 + 504);
        }
        else
        {
          uint64_t v159 = 0;
        }
        unint64_t v160 = &v159[16 * v155];
        *(_DWORD *)unint64_t v160 = v152;
        *((void *)v160 + 1) = v153;
        unint64_t v161 = v160;
        if (v151 != v154)
        {
          do
          {
            *((_OWORD *)v161 - 1) = *((_OWORD *)v151 - 1);
            v161 -= 16;
            v151 -= 16;
          }
          while (v151 != v154);
          unint64_t v154 = (char *)*v149;
        }
        uint64_t v151 = v160 + 16;
        *(void *)(a1 + 496) = v161;
        *(void *)(a1 + 504) = v160 + 16;
        *(void *)(a1 + 512) = &v159[16 * v158];
        if (v154) {
          operator delete(v154);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v151 = v152;
        *((void *)v151 + 1) = v153;
        v151 += 16;
      }
      *(void *)(a1 + 504) = v151;
      unint64_t v162 = (void *)v148[1];
      if (v162)
      {
        do
        {
          uint64_t v163 = v162;
          unint64_t v162 = (void *)*v162;
        }
        while (v162);
      }
      else
      {
        do
        {
          uint64_t v163 = (void *)v148[2];
          BOOL v23 = *v163 == (void)v148;
          unint64_t v148 = v163;
        }
        while (!v23);
      }
      unint64_t v148 = v163;
    }
    while (v163 != (void *)(a2 + 320));
  }
  for (uint64_t i = *(uint64_t ***)(a2 + 440); i; uint64_t i = (uint64_t **)*i)
  {
    unsigned int v165 = *((unsigned __int8 *)i + 16) - 1;
    if (v165 <= 9 && ((0x3FDu >> v165) & 1) != 0)
    {
      *(void *)v283 = qword_101E44D98[(char)v165];
      for (uint64_t j = i[5]; j; uint64_t j = (uint64_t *)*j)
      {
        *(void *)uint64_t buf = v283;
        unint64_t v167 = sub_101896C68(a1 + 360, (int *)v283, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v168 = *((_DWORD *)j + 5);
        *(void *)uint64_t buf = j + 2;
        *((_DWORD *)sub_1000F3C48((uint64_t)(v167 + 3), (int *)j + 4, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = v168;
      }
    }
  }
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 512);
  *(void *)(a1 + 552) = *(void *)(a2 + 528);
  *(_WORD *)(a1 + 560) = *(_WORD *)(a2 + 640);
  *(void *)(a1 + 568) = *(void *)(a2 + 536);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 832) = *(void *)(a2 + 808);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 792);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  uint64_t v169 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v170 = *(void *)(a1 + 816);
    uint64_t v171 = *(void *)(a1 + 832);
    uint64_t v172 = *(void *)(a1 + 824);
    *(_DWORD *)uint64_t buf = 134218496;
    *(void *)&uint8_t buf[4] = v170;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v171;
    *(_WORD *)v301 = 2048;
    *(void *)&v301[2] = v172;
    _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEBUG, "#gnssca,handleGnssSessionReport,displayOnCount,%llu,batterSaverCount,%llu,reachableCount,%llu", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v264 = *(void *)(a1 + 816);
    uint64_t v265 = *(void *)(a1 + 832);
    uint64_t v266 = *(void *)(a1 + 824);
    *(_DWORD *)v283 = 134218496;
    *(void *)&v283[4] = v264;
    *(_WORD *)&v283[12] = 2048;
    uint64_t v284 = v265;
    *(_WORD *)v285 = 2048;
    *(void *)&v285[2] = v266;
    v267 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionReport(GNSS::GnssSessionData &, GNSS::PersistentDiagnostics &)", "%s\n", v267);
    if (v267 != buf) {
      free(v267);
    }
  }
  *(unsigned char *)(a1 + 872) = *(unsigned char *)(a2 + 848);
  long long v298 = 0u;
  long long v299 = 0u;
  uint64_t v173 = *(void *)(a2 + 864);
  if (*(void *)(a2 + 872) != v173)
  {
    unint64_t v174 = *(void *)(a2 + 888);
    uint64_t v175 = (void *)(v173 + 8 * (v174 >> 7));
    float v176 = (long long *)(*v175 + 32 * (v174 & 0x7F));
    uint64_t v177 = *(void *)(v173 + (((*(void *)(a2 + 896) + v174) >> 4) & 0xFFFFFFFFFFFFFF8))
         + 32 * ((*(void *)(a2 + 896) + v174) & 0x7F);
    if (v176 != (long long *)v177)
    {
      unint64_t v178 = (char **)(a1 + 880);
      unint64_t v179 = (void *)(a1 + 896);
      int v180 = *(char **)(a1 + 888);
      do
      {
        long long v181 = v176[1];
        long long v298 = *v176;
        long long v299 = v181;
        if ((unint64_t)v180 >= *v179)
        {
          uint64_t v183 = (v180 - *v178) >> 5;
          if ((unint64_t)(v183 + 1) >> 59) {
            sub_1001D7FD4();
          }
          uint64_t v184 = *v179 - (void)*v178;
          uint64_t v185 = v184 >> 4;
          if (v184 >> 4 <= (unint64_t)(v183 + 1)) {
            uint64_t v185 = v183 + 1;
          }
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v186 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v186 = v185;
          }
          if (v186) {
            uint64_t v187 = (char *)sub_1001D9EDC(a1 + 896, v186);
          }
          else {
            uint64_t v187 = 0;
          }
          unint64_t v188 = &v187[32 * v183];
          *(_OWORD *)unint64_t v188 = v298;
          *((_OWORD *)v188 + 1) = v299;
          unint64_t v189 = *(char **)(a1 + 888);
          uint64_t v190 = *(char **)(a1 + 880);
          unint64_t v191 = v188;
          if (v189 != v190)
          {
            do
            {
              long long v192 = *((_OWORD *)v189 - 1);
              *((_OWORD *)v191 - 2) = *((_OWORD *)v189 - 2);
              *((_OWORD *)v191 - 1) = v192;
              v191 -= 32;
              v189 -= 32;
            }
            while (v189 != v190);
            unint64_t v189 = *v178;
          }
          *(void *)(a1 + 880) = v191;
          int v180 = v188 + 32;
          *(void *)(a1 + 888) = v188 + 32;
          *(void *)(a1 + 896) = &v187[32 * v186];
          if (v189) {
            operator delete(v189);
          }
        }
        else
        {
          long long v182 = v176[1];
          *(_OWORD *)int v180 = *v176;
          *((_OWORD *)v180 + 1) = v182;
          v180 += 32;
        }
        *(void *)(a1 + 888) = v180;
        v176 += 2;
        if ((long long *)((char *)v176 - *v175) == (long long *)4096)
        {
          double v193 = (long long *)v175[1];
          ++v175;
          float v176 = v193;
        }
      }
      while (v176 != (long long *)v177);
    }
  }
  *(void *)(a1 + 928) = *(void *)(a2 + 952);
  *(unsigned char *)(a1 + 992) = *(unsigned char *)(a2 + 1056);
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a2 + 1060);
  *(unsigned char *)(a1 + 873) = *(unsigned char *)(a2 + 849);
  uint64_t v194 = *(void *)(a2 + 912);
  if (*(void *)(a2 + 920) != v194)
  {
    unint64_t v195 = *(void *)(a2 + 936);
    int v196 = (void *)(v194 + 8 * (v195 >> 7));
    uint64_t v197 = (long long *)(*v196 + 32 * (v195 & 0x7F));
    uint64_t v198 = *(void *)(v194 + (((*(void *)(a2 + 944) + v195) >> 4) & 0xFFFFFFFFFFFFFF8))
         + 32 * ((*(void *)(a2 + 944) + v195) & 0x7F);
    if (v197 != (long long *)v198)
    {
      int32x4_t v199 = (char **)(a1 + 904);
      int32x2_t v200 = (void *)(a1 + 920);
      int v201 = *(char **)(a1 + 912);
      do
      {
        long long v202 = v197[1];
        long long v298 = *v197;
        long long v299 = v202;
        if ((unint64_t)v201 >= *v200)
        {
          uint64_t v204 = (v201 - *v199) >> 5;
          if ((unint64_t)(v204 + 1) >> 59) {
            sub_1001D7FD4();
          }
          uint64_t v205 = *v200 - (void)*v199;
          uint64_t v206 = v205 >> 4;
          if (v205 >> 4 <= (unint64_t)(v204 + 1)) {
            uint64_t v206 = v204 + 1;
          }
          if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v207 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v207 = v206;
          }
          if (v207) {
            unint64_t v208 = (char *)sub_1001D9EDC(a1 + 920, v207);
          }
          else {
            unint64_t v208 = 0;
          }
          v209 = &v208[32 * v204];
          *(_OWORD *)v209 = v298;
          *((_OWORD *)v209 + 1) = v299;
          int v210 = *(char **)(a1 + 912);
          unint64_t v211 = *(char **)(a1 + 904);
          unint64_t v212 = v209;
          if (v210 != v211)
          {
            do
            {
              long long v213 = *((_OWORD *)v210 - 1);
              *((_OWORD *)v212 - 2) = *((_OWORD *)v210 - 2);
              *((_OWORD *)v212 - 1) = v213;
              v212 -= 32;
              v210 -= 32;
            }
            while (v210 != v211);
            int v210 = *v199;
          }
          *(void *)(a1 + 904) = v212;
          int v201 = v209 + 32;
          *(void *)(a1 + 912) = v209 + 32;
          *(void *)(a1 + 920) = &v208[32 * v207];
          if (v210) {
            operator delete(v210);
          }
        }
        else
        {
          long long v203 = v197[1];
          *(_OWORD *)int v201 = *v197;
          *((_OWORD *)v201 + 1) = v203;
          v201 += 32;
        }
        *(void *)(a1 + 912) = v201;
        v197 += 2;
        if ((long long *)((char *)v197 - *v196) == (long long *)4096)
        {
          uint64_t v214 = (long long *)v196[1];
          ++v196;
          uint64_t v197 = v214;
        }
      }
      while (v197 != (long long *)v198);
    }
  }
  *(void *)(a1 + 936) = *(void *)(a2 + 960);
  *(_WORD *)(a1 + 1068) = *(_WORD *)(a2 + 1112);
  *(_DWORD *)(a1 + 1072) = *(_DWORD *)(a2 + 1116);
  *(unsigned char *)(a1 + 1070) = *(unsigned char *)(a2 + 1114);
  long long v215 = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1092) = *(_OWORD *)(a2 + 1160);
  *((void *)&v215 + 1) = *(void *)(a2 + 1152);
  *(_OWORD *)(a1 + 1076) = v215;
  unint64_t v216 = *(void **)(a2 + 976);
  if (v216 != (void *)(a2 + 984))
  {
    unint64_t v217 = (void **)(a1 + 944);
    v218 = (void *)(a1 + 960);
    int v219 = *(char **)(a1 + 952);
    do
    {
      int v220 = *((_DWORD *)v216 + 8);
      uint64_t v221 = v216[5];
      if ((unint64_t)v219 >= *v218)
      {
        unsigned int v222 = (char *)*v217;
        uint64_t v223 = (v219 - (unsigned char *)*v217) >> 4;
        unint64_t v224 = v223 + 1;
        if ((unint64_t)(v223 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v225 = *v218 - (void)v222;
        if (v225 >> 3 > v224) {
          unint64_t v224 = v225 >> 3;
        }
        if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v226 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v226 = v224;
        }
        if (v226)
        {
          double v227 = (char *)sub_1000C571C(a1 + 960, v226);
          int v219 = *(char **)(a1 + 952);
          unsigned int v222 = *(char **)(a1 + 944);
        }
        else
        {
          double v227 = 0;
        }
        unsigned int v228 = &v227[16 * v223];
        *(_DWORD *)unsigned int v228 = v220;
        *((void *)v228 + 1) = v221;
        unsigned int v229 = v228;
        if (v219 != v222)
        {
          do
          {
            *((_OWORD *)v229 - 1) = *((_OWORD *)v219 - 1);
            v229 -= 16;
            v219 -= 16;
          }
          while (v219 != v222);
          unsigned int v222 = (char *)*v217;
        }
        *(void *)(a1 + 944) = v229;
        int v219 = v228 + 16;
        *(void *)(a1 + 952) = v228 + 16;
        *(void *)(a1 + 960) = &v227[16 * v226];
        if (v222) {
          operator delete(v222);
        }
      }
      else
      {
        *(_DWORD *)int v219 = v220;
        *((void *)v219 + 1) = v221;
        v219 += 16;
      }
      *(void *)(a1 + 952) = v219;
      double v230 = (void *)v216[1];
      if (v230)
      {
        do
        {
          v231 = v230;
          double v230 = (void *)*v230;
        }
        while (v230);
      }
      else
      {
        do
        {
          v231 = (void *)v216[2];
          BOOL v23 = *v231 == (void)v216;
          unint64_t v216 = v231;
        }
        while (!v23);
      }
      unint64_t v216 = v231;
    }
    while (v231 != (void *)(a2 + 984));
  }
  uint64_t v232 = *(uint64_t **)(a2 + 1016);
  if (v232)
  {
    int v233 = (void **)(a1 + 968);
    int v234 = (void *)(a1 + 984);
    int v235 = *(char **)(a1 + 976);
    do
    {
      int v236 = *((_DWORD *)v232 + 4);
      uint64_t v237 = v232[3];
      if ((unint64_t)v235 >= *v234)
      {
        int v238 = (char *)*v233;
        uint64_t v239 = (v235 - (unsigned char *)*v233) >> 4;
        unint64_t v240 = v239 + 1;
        if ((unint64_t)(v239 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v241 = *v234 - (void)v238;
        if (v241 >> 3 > v240) {
          unint64_t v240 = v241 >> 3;
        }
        if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v242 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v242 = v240;
        }
        if (v242)
        {
          int64x2_t v243 = (char *)sub_1000C571C(a1 + 984, v242);
          int v235 = *(char **)(a1 + 976);
          int v238 = *(char **)(a1 + 968);
        }
        else
        {
          int64x2_t v243 = 0;
        }
        int v244 = &v243[16 * v239];
        *(_DWORD *)int v244 = v236;
        *((void *)v244 + 1) = v237;
        uint64_t v245 = v244;
        if (v235 != v238)
        {
          do
          {
            *((_OWORD *)v245 - 1) = *((_OWORD *)v235 - 1);
            v245 -= 16;
            v235 -= 16;
          }
          while (v235 != v238);
          int v238 = (char *)*v233;
        }
        *(void *)(a1 + 968) = v245;
        int v235 = v244 + 16;
        *(void *)(a1 + 976) = v244 + 16;
        *(void *)(a1 + 984) = &v243[16 * v242];
        if (v238) {
          operator delete(v238);
        }
      }
      else
      {
        *(_DWORD *)int v235 = v236;
        *((void *)v235 + 1) = v237;
        v235 += 16;
      }
      *(void *)(a1 + 976) = v235;
      uint64_t v232 = (uint64_t *)*v232;
    }
    while (v232);
  }
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a2 + 1072);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1080);
  *(unsigned char *)(a1 + 1024) = *(unsigned char *)(a2 + 1088);
  long long v246 = *(_OWORD *)a2;
  long long v247 = *(_OWORD *)(a2 + 16);
  long long v248 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 88) = v248;
  *(_OWORD *)(a1 + 72) = v247;
  *(_OWORD *)(a1 + 56) = v246;
  if (a1 + 56 != a2) {
    sub_1018969C8((uint64_t **)(a1 + 112), *(void **)(a2 + 56), (void *)(a2 + 64));
  }
  *(_DWORD *)(a1 + 1028) = *(_DWORD *)(a1 + 2328);
  *(unsigned char *)(a1 + 2400) = 0;
  if (!*(unsigned char *)(a1 + 2540) || *(_DWORD *)(a1 + 2560) >= *(_DWORD *)(a1 + 2496))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v249 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Collect Data if was not already set", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      *(_WORD *)v283 = 0;
      v268 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionReport(GNSS::GnssSessionData &, GNSS::PersistentDiagnostics &)", "%s\n", v268);
      if (v268 != buf) {
        free(v268);
      }
    }
    sub_10188C758(a1);
  }
  *(_OWORD *)(a1 + 840) = *(_OWORD *)(a1 + 2500);
  sub_10188CB2C(a1, *(_DWORD *)(a1 + 2472));
  *(void *)(a1 + 860) = *(void *)(a1 + 2476);
  *(_DWORD *)(a1 + 868) = *(_DWORD *)(a1 + 2484);
  *(int32x2_t *)(a1 + 1036) = vrev64_s32(vcvt_s32_f32(*(float32x2_t *)(a1 + 2488)));
  *(_DWORD *)(a1 + 1044) = *(_DWORD *)(a1 + 2496);
  *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1092);
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a2 + 1108);
  sub_10188CB58(a1, a2);
  sub_1000C7F88(buf);
  v283[0] = 0;
  int v250 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", v283);
  if (v283[0]) {
    int v251 = v250;
  }
  else {
    int v251 = 0;
  }
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v251)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v252 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v253 = *(_DWORD *)(a1 + 2500);
      int v254 = *(_DWORD *)(a1 + 2504);
      int v255 = *(_DWORD *)(a1 + 2508);
      int v256 = *(_DWORD *)(a1 + 2512);
      int v257 = *(_DWORD *)(a1 + 2484);
      double v258 = *(float *)(a1 + 2480);
      double v259 = *(float *)(a1 + 2476);
      int v260 = *(_DWORD *)(a1 + 2472);
      double v261 = *(float *)(a1 + 2492);
      double v262 = *(float *)(a1 + 2488);
      int v263 = *(_DWORD *)(a1 + 2496);
      *(_DWORD *)uint64_t buf = 67111680;
      *(_DWORD *)&uint8_t buf[4] = v253;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v254;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v255;
      *(_WORD *)&unsigned char buf[20] = 1024;
      *(_DWORD *)v301 = v256;
      *(_WORD *)&v301[4] = 1024;
      *(_DWORD *)&v301[6] = v257;
      __int16 v302 = 2048;
      double v303 = v258;
      __int16 v304 = 2048;
      double v305 = v259;
      __int16 v306 = 1024;
      int v307 = v260;
      __int16 v308 = 2048;
      double v309 = v261;
      __int16 v310 = 2048;
      double v311 = v262;
      __int16 v312 = 1024;
      int v313 = v263;
      _os_log_impl((void *)&_mh_execute_header, v252, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Metric Data,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%f,SNR,%f,Count,%d", buf, 0x54u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v269 = *(_DWORD *)(a1 + 2500);
      int v270 = *(_DWORD *)(a1 + 2504);
      int v271 = *(_DWORD *)(a1 + 2508);
      int v272 = *(_DWORD *)(a1 + 2512);
      int v273 = *(_DWORD *)(a1 + 2484);
      double v274 = *(float *)(a1 + 2480);
      double v275 = *(float *)(a1 + 2476);
      int v276 = *(_DWORD *)(a1 + 2472);
      double v277 = *(float *)(a1 + 2492);
      double v278 = *(float *)(a1 + 2488);
      int v279 = *(_DWORD *)(a1 + 2496);
      *(_DWORD *)v283 = 67111680;
      *(_DWORD *)&v283[4] = v269;
      *(_WORD *)&v283[8] = 1024;
      *(_DWORD *)&v283[10] = v270;
      LOWORD(v284) = 1024;
      *(_DWORD *)((char *)&v284 + 2) = v271;
      HIWORD(v284) = 1024;
      *(_DWORD *)v285 = v272;
      *(_WORD *)&v285[4] = 1024;
      *(_DWORD *)&v285[6] = v273;
      __int16 v286 = 2048;
      double v287 = v274;
      __int16 v288 = 2048;
      double v289 = v275;
      __int16 v290 = 1024;
      int v291 = v276;
      __int16 v292 = 2048;
      double v293 = v277;
      __int16 v294 = 2048;
      double v295 = v278;
      __int16 v296 = 1024;
      int v297 = v279;
      v280 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionReport(GNSS::GnssSessionData &, GNSS::PersistentDiagnostics &)", "%s\n", v280);
      if (v280 != buf) {
        free(v280);
      }
    }
  }
  sub_101888874(a1, a3);
  sub_10188CF1C(a1);
}

void sub_10188C684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    sub_1000DB0A0(a32);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10188C6A4(unsigned int a1, int a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = &_mh_execute_header;
  switch(a1)
  {
    case 1u:
      uint64_t v2 = a2 == 16;
      break;
    case 3u:
      if (a2 == 16) {
        uint64_t v2 = 6;
      }
      else {
        uint64_t v2 = 5;
      }
      unint64_t v3 = &_mh_execute_header;
      break;
    case 4u:
      return v2 | (unint64_t)v3;
    case 5u:
    case 6u:
      uint64_t v2 = 3;
      break;
    case 7u:
      uint64_t v2 = 8;
      break;
    case 8u:
      uint64_t v2 = 2;
      break;
    case 9u:
      uint64_t v2 = 7;
      break;
    case 0xAu:
      uint64_t v2 = 9;
      break;
    default:
      unint64_t v3 = 0;
      uint64_t v2 = 0;
      break;
  }
  return v2 | (unint64_t)v3;
}

void sub_10188C758(uint64_t a1)
{
  *(_DWORD *)(a1 + 2484) = *(_DWORD *)(a1 + 2544);
  *(void *)(a1 + 2476) = *(void *)(a1 + 2552);
  *(_DWORD *)(a1 + 2472) = *(_DWORD *)(a1 + 2548);
  *(_DWORD *)(a1 + 2496) = *(_DWORD *)(a1 + 2560);
  uint64_t v2 = *(int **)(a1 + 2576);
  unint64_t v3 = *(int **)(a1 + 2568);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2 - v3;
    do
    {
      uint64_t v6 = *v3++;
      v4 += v6;
    }
    while (v3 != v2);
    float v7 = (double)v4 / (double)(unint64_t)v5;
    *(float *)(a1 + 2492) = v7;
  }
  uint64_t v8 = *(int **)(a1 + 2600);
  int v9 = *(int **)(a1 + 2592);
  if (v8 != v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v8 - v9;
    do
    {
      uint64_t v12 = *v9++;
      v10 += v12;
    }
    while (v9 != v8);
    float v13 = (double)v10 / (double)(unint64_t)v11;
    *(float *)(a1 + 2488) = v13;
  }
  sub_1000C7F88(buf);
  LOBYTE(v40[0]) = 0;
  int v14 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v40);
  if (LOBYTE(v40[0])) {
    int v15 = v14;
  }
  else {
    int v15 = 0;
  }
  if (v62) {
    sub_1000DB0A0(v62);
  }
  if (v15)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *(_DWORD *)(a1 + 2500);
      int v18 = *(_DWORD *)(a1 + 2504);
      int v19 = *(_DWORD *)(a1 + 2508);
      int v20 = *(_DWORD *)(a1 + 2512);
      int v21 = *(_DWORD *)(a1 + 2484);
      double v22 = *(float *)(a1 + 2480);
      double v23 = *(float *)(a1 + 2476);
      int v24 = *(_DWORD *)(a1 + 2472);
      double v25 = *(float *)(a1 + 2492);
      double v26 = *(float *)(a1 + 2488);
      int v27 = *(_DWORD *)(a1 + 2496);
      *(_DWORD *)uint64_t buf = 67111680;
      *(_DWORD *)&uint8_t buf[4] = v17;
      LOWORD(v62) = 1024;
      *(_DWORD *)((char *)&v62 + 2) = v18;
      HIWORD(v62) = 1024;
      int v63 = v19;
      __int16 v64 = 1024;
      int v65 = v20;
      __int16 v66 = 1024;
      int v67 = v21;
      __int16 v68 = 2048;
      double v69 = v22;
      __int16 v70 = 2048;
      double v71 = v23;
      __int16 v72 = 1024;
      int v73 = v24;
      __int16 v74 = 2048;
      double v75 = v25;
      __int16 v76 = 2048;
      double v77 = v26;
      __int16 v78 = 1024;
      int v79 = v27;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,prepareCellularAWDMetrics,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%f,SNR,%f,EpochCountForLastLongestCampedCellularBand,%d", buf, 0x54u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v28 = *(_DWORD *)(a1 + 2500);
      int v29 = *(_DWORD *)(a1 + 2504);
      int v30 = *(_DWORD *)(a1 + 2508);
      int v31 = *(_DWORD *)(a1 + 2512);
      int v32 = *(_DWORD *)(a1 + 2484);
      double v33 = *(float *)(a1 + 2480);
      double v34 = *(float *)(a1 + 2476);
      int v35 = *(_DWORD *)(a1 + 2472);
      double v36 = *(float *)(a1 + 2492);
      double v37 = *(float *)(a1 + 2488);
      int v38 = *(_DWORD *)(a1 + 2496);
      v40[0] = 67111680;
      v40[1] = v28;
      __int16 v41 = 1024;
      int v42 = v29;
      __int16 v43 = 1024;
      int v44 = v30;
      __int16 v45 = 1024;
      int v46 = v31;
      __int16 v47 = 1024;
      int v48 = v32;
      __int16 v49 = 2048;
      double v50 = v33;
      __int16 v51 = 2048;
      double v52 = v34;
      __int16 v53 = 1024;
      int v54 = v35;
      __int16 v55 = 2048;
      double v56 = v36;
      __int16 v57 = 2048;
      double v58 = v37;
      __int16 v59 = 1024;
      int v60 = v38;
      int v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::prepareCellularAWDMetrics()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
  }
}

void sub_10188CB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10188CB2C(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(result + 856) = 0;
  if (a2 <= 0xC && ((0x17FFu >> a2) & 1) != 0) {
    *(_DWORD *)(result + 856) = dword_101E44DE8[a2];
  }
  return result;
}

void sub_10188CB58(uint64_t a1, uint64_t a2)
{
  if (sub_1000EF68C(*(double *)(a2 + 1192), *(double *)(a2 + 1200))
    && !sub_1000EF668(*(double *)(a2 + 1192), *(double *)(a2 + 1200))
    && sub_1000EF68C(*(double *)(a2 + 1176), *(double *)(a2 + 1184))
    && !sub_1000EF668(*(double *)(a2 + 1176), *(double *)(a2 + 1184)))
  {
    *(double *)(a1 + 1128) = sub_1000A3D9C(*(double *)(a2 + 1192), *(double *)(a2 + 1200), *(double *)(a2 + 1176), *(double *)(a2 + 1184));
  }
  *(_DWORD *)(a1 + 1108) = *(_DWORD *)(a2 + 1128);
  *(_DWORD *)(a1 + 1116) = *(_DWORD *)(a2 + 1144);
  double v4 = *(double *)(a2 + 1136);
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v4 < 0.0)
  {
    *(_DWORD *)(a1 + 1112) = 0;
  }
  else
  {
    if (v4 >= 50.0)
    {
      if (v4 >= 100.0)
      {
        if (v4 >= 200.0)
        {
          if (v4 >= 400.0)
          {
            if (v4 >= 1000.0) {
              int v5 = 6;
            }
            else {
              int v5 = 5;
            }
          }
          else
          {
            int v5 = 4;
          }
        }
        else
        {
          int v5 = 3;
        }
      }
      else
      {
        int v5 = 2;
      }
    }
    else
    {
      int v5 = 1;
    }
    *(_DWORD *)(a1 + 1112) = v5;
  }
  *(unsigned char *)(a1 + 1120) = *(unsigned char *)(a2 + 1148);
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a2 + 1192);
      uint64_t v8 = *(void *)(a2 + 1200);
      uint64_t v9 = *(void *)(a2 + 1136);
      int v10 = *(_DWORD *)(a1 + 1112);
      uint64_t v11 = *(void *)(a2 + 1176);
      uint64_t v12 = *(void *)(a2 + 1184);
      uint64_t v13 = *(void *)(a1 + 1128);
      int v14 = *(_DWORD *)(a2 + 1128);
      int v15 = *(_DWORD *)(a2 + 1144);
      int v16 = *(unsigned __int8 *)(a2 + 1148);
      *(_DWORD *)uint64_t buf = 134285825;
      uint64_t v19 = v7;
      __int16 v20 = 2049;
      uint64_t v21 = v8;
      __int16 v22 = 2049;
      uint64_t v23 = v9;
      __int16 v24 = 1025;
      int v25 = v10;
      __int16 v26 = 2049;
      uint64_t v27 = v11;
      __int16 v28 = 2049;
      uint64_t v29 = v12;
      __int16 v30 = 2049;
      uint64_t v31 = v13;
      __int16 v32 = 1025;
      int v33 = v14;
      __int16 v34 = 1025;
      int v35 = v15;
      __int16 v36 = 1025;
      int v37 = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssca,preparePositionAssistAnalytics,PositionAssistLat,%{private}.7f,PositionAssistLon,%{private}.7f,PositionAssistHorzAccM,%{private}.2f,PositionAssistHorzAcc,%{private}d, FirstFixLat,%{private}.7f,FirstFixLon,%{private}.7f,DeltaFirstFixAndPositionAssistMeters,%{private}f,HorzRel,%{private}d,PosAssistType,%{private}d,WiFiPositioningAvailable,%{private}d", buf, 0x56u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::preparePositionAssistAnalytics(const GNSS::GnssSessionData &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

void sub_10188CF1C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = fabs(Current);
  double v4 = 315360000.0;
  if ((*(void *)&Current & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 > 2.22044605e-16)
  {
    double v6 = *(double *)(a1 + 2272);
    double v7 = fabs(v6);
    if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7 > 2.22044605e-16) {
      double v4 = vabdd_f64(Current, v6);
    }
  }
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343FC8);
    }
    uint64_t v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134283521;
      double v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,durationSinceStartMonitoringTimeSec,%{private}.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343FC8);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitAssistanceFileDownloadMetrics()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  if (fabs(v4) <= *(double *)(a1 + 2264))
  {
    sub_101893B7C(a1);
  }
  else
  {
    int v10 = (double *)(a1 + 2272);
    uint64_t v11 = sub_10071B604();
    sub_100720B88(v11, (int *)(a1 + 2176));
    sub_1018938F8(a1);
    *(_OWORD *)(a1 + 2192) = 0u;
    *(_OWORD *)(a1 + 2176) = 0u;
    *(CFAbsoluteTime *)(a1 + 2272) = CFAbsoluteTimeGetCurrent();
    uint64_t v12 = sub_1000A6958();
    sub_100163398(v12, @"AssistanceFileMetricsStartMonitoringCFAbsTime", (const void *)(a1 + 2272));
    uint64_t v13 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v13 + 944))();
    if (*(unsigned char *)(a1 + 2402))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343FC8);
      }
      int v14 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        double v15 = *v10;
        *(_DWORD *)uint64_t buf = 134283521;
        double v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Restore TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102343FC8);
        }
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitAssistanceFileDownloadMetrics()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
  }
}

void sub_10188D31C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 2368) = 0;
  ++*(void *)(a2 + 104);
  *(void *)uint64_t buf = a2 + 204;
  double v4 = sub_1000FEE0C((uint64_t **)(a2 + 248), (int *)(a2 + 204), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  v4[5] = (uint64_t *)((char *)v4[5] + 1);
  *(void *)uint64_t buf = a2 + 336;
  int v5 = sub_1000FEE0C((uint64_t **)(a2 + 352), (int *)(a2 + 336), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  void v5[5] = (uint64_t *)((char *)v5[5] + 1);
  *(void *)uint64_t buf = a2 + 340;
  double v6 = sub_1000FEE0C((uint64_t **)(a2 + 376), (int *)(a2 + 340), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  void v6[5] = (uint64_t *)((char *)v6[5] + 1);
  *(void *)uint64_t buf = a2 + 344;
  double v7 = sub_1000FEE0C((uint64_t **)(a2 + 400), (int *)(a2 + 344), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  int v8 = 0;
  void v7[5] = (uint64_t *)((char *)v7[5] + 1);
  HIDWORD(v10) = *(_DWORD *)(a2 + 464);
  LODWORD(v10) = HIDWORD(v10);
  unsigned int v9 = v10 >> 8;
  if (v9 <= 8) {
    int v8 = dword_101E44E1C[v9];
  }
  int v66 = v8;
  *(void *)uint64_t buf = &v66;
  uint64_t v11 = sub_1000FEE0C((uint64_t **)(a2 + 472), &v66, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  void v11[5] = (uint64_t *)((char *)v11[5] + 1);
  int v12 = *(_DWORD *)(a1 + 2320);
  if ((v12 - 1) >= 6) {
    int v12 = 0;
  }
  int v66 = v12;
  *(void *)uint64_t buf = &v66;
  uint64_t v13 = sub_100D69C4C(a2 + 272, (unsigned int *)&v66, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  ++v13[3];
  *(void *)uint64_t buf = a1 + 2312;
  int v14 = sub_101896ED8(a2 + 208, (int *)(a1 + 2312), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  ++v14[3];
  *(void *)uint64_t buf = a1 + 2332;
  double v15 = sub_1000FEE0C((uint64_t **)(a2 + 312), (int *)(a1 + 2332), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  void v15[5] = (uint64_t *)((char *)v15[5] + 1);
  if (*(unsigned char *)(a2 + 642))
  {
    ++*(void *)(a2 + 536);
    *(unsigned char *)(a2 + 642) = 0;
  }
  if (*(unsigned char *)(a2 + 643))
  {
    ++*(void *)(a2 + 544);
    *(unsigned char *)(a2 + 643) = 0;
  }
  if (*(unsigned char *)(a2 + 644))
  {
    ++*(void *)(a2 + 552);
    *(unsigned char *)(a2 + 644) = 0;
  }
  *(void *)uint64_t buf = a2 + 968;
  int v16 = sub_1000FEE0C((uint64_t **)(a2 + 976), (int *)(a2 + 968), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  v16[5] = (uint64_t *)((char *)v16[5] + 1);
  if (*(unsigned char *)(a1 + 2316)) {
    ++*(void *)(a2 + 792);
  }
  if (*(unsigned char *)(a1 + 2319)) {
    ++*(void *)(a2 + 808);
  }
  if (*(unsigned char *)(a1 + 2317)) {
    ++*(void *)(a2 + 800);
  }
  sub_10188DB80(a1);
  sub_10188E3E8(a1);
  HIDWORD(v17) = -286331153 * *(_DWORD *)(a1 + 2352);
  LODWORD(v17) = HIDWORD(v17);
  if ((v17 >> 1) <= 0x8888888)
  {
    int v18 = *(_DWORD *)(a2 + 1040);
    if (v18 <= 1) {
      int v18 = 1;
    }
    unint64_t v19 = *(void *)(a2 + 952);
    if (*(unsigned char *)(a2 + 848)) {
      BOOL v20 = v19 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20) {
      double v21 = 1.84467441e19;
    }
    else {
      double v21 = (double)v19;
    }
    unint64_t v22 = *(void *)(a2 + 960);
    if (*(unsigned char *)(a2 + 849)) {
      BOOL v23 = v22 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23) {
      double v24 = 1.84467441e19;
    }
    else {
      double v24 = (double)v22;
    }
    uint64_t v25 = *(void *)(a2 + 896);
    if (v25) {
      unsigned int v26 = bswap32(*(_DWORD *)(*(void *)(*(void *)(a2 + 864)
    }
                                          + (((unint64_t)(v25 + *(void *)(a2 + 888) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * ((v25 + *(void *)(a2 + 888) - 1) & 0x7F)));
    else {
      unsigned int v26 = 0;
    }
    uint64_t v27 = *(void *)(a2 + 944);
    if (v27) {
      unsigned int v28 = bswap32(*(_DWORD *)(*(void *)(*(void *)(a2 + 912)
    }
                                          + (((unint64_t)(v27 + *(void *)(a2 + 936) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * ((v27 + *(void *)(a2 + 936) - 1) & 0x7F)));
    else {
      unsigned int v28 = 0;
    }
    double v29 = *(double *)(a2 + 1048);
    double v30 = (double)v18;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v31 = qword_1024193D8;
    double v32 = v29 / v30;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(a2 + 584);
      uint64_t v34 = *(void *)(a2 + 504) + *(void *)(a2 + 496);
      *(_DWORD *)uint64_t buf = 134350592;
      *(double *)&uint8_t buf[4] = v32;
      *(_WORD *)&unsigned char buf[12] = 2050;
      uint64_t v77 = v33;
      *(_WORD *)__int16 v78 = 2050;
      *(void *)&void v78[2] = v34;
      *(_WORD *)int v79 = 2050;
      *(double *)&v79[2] = v21;
      *(_WORD *)unint64_t v80 = 1026;
      *(_DWORD *)&void v80[2] = v26;
      *(_WORD *)unint64_t v81 = 2050;
      *(double *)&v81[2] = v24;
      LOWORD(v82) = 1026;
      *(_DWORD *)((char *)&v82 + 2) = v28;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "PerfReport,mw,%{public}.1f,timeCount,%{public}llu,posCount,%{public}llu,eeAgeDays,%{public}.2f,eeHash,%{public}x,rtiAgeDays,%{public}.2f,rtiHash,%{public}x", buf, 0x40u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v55 = *(void *)(a2 + 584);
      uint64_t v56 = *(void *)(a2 + 504) + *(void *)(a2 + 496);
      int v66 = 134350592;
      *(double *)int v67 = v32;
      *(_WORD *)&v67[8] = 2050;
      uint64_t v68 = v55;
      *(_WORD *)double v69 = 2050;
      *(void *)&v69[2] = v56;
      *(_WORD *)__int16 v70 = 2050;
      *(double *)&v70[2] = v21;
      *(_WORD *)double v71 = 1026;
      *(_DWORD *)&v71[2] = v26;
      *(_WORD *)__int16 v72 = 2050;
      *(double *)&v72[2] = v24;
      LOWORD(v73) = 1026;
      *(_DWORD *)((char *)&v73 + 2) = v28;
      __int16 v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::tickGnssSessionReport(GNSS::GnssSessionData &)", "%s\n", v57);
      if (v57 != buf) {
        free(v57);
      }
    }
  }
  int v35 = *(_DWORD *)(a1 + 2352);
  HIDWORD(v36) = -858993459 * v35;
  LODWORD(v36) = -858993459 * v35;
  if ((v36 >> 1) <= 0x19999999)
  {
    int v37 = *(int **)(a1 + 2568);
    double v38 = 0.0;
    double v39 = 0.0;
    if (*(int **)(a1 + 2576) != v37) {
      double v39 = (double)*v37;
    }
    BOOL v40 = *(int **)(a1 + 2592);
    if (*(int **)(a1 + 2600) != v40) {
      double v38 = (double)*v40;
    }
    int v41 = *(_DWORD *)(a1 + 2356);
    int v42 = *(_DWORD *)(a1 + 2360);
    int v43 = *(_DWORD *)(a1 + 2364);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    unsigned int v44 = v35 - v41;
    unsigned int v45 = v35 - v42;
    unsigned int v46 = v35 - v43;
    __int16 v47 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = *(_DWORD *)(a1 + 2516);
      int v49 = *(_DWORD *)(a1 + 2520);
      if (v44 >= 0x15180) {
        int v50 = 86400;
      }
      else {
        int v50 = v44;
      }
      double v51 = *(float *)(a1 + 2524);
      double v52 = *(float *)(a1 + 2528);
      if (v45 >= 0x15180) {
        int v53 = 86400;
      }
      else {
        int v53 = v45;
      }
      if (v46 >= 0x15180) {
        int v54 = 86400;
      }
      else {
        int v54 = v46;
      }
      *(_DWORD *)uint64_t buf = 67242240;
      *(_DWORD *)&uint8_t buf[4] = v48;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v49;
      LOWORD(v77) = 1026;
      *(_DWORD *)((char *)&v77 + 2) = v50;
      HIWORD(v77) = 2050;
      *(double *)__int16 v78 = v51;
      *(_WORD *)&v78[8] = 2050;
      *(double *)int v79 = v52;
      *(_WORD *)&v79[8] = 1026;
      *(_DWORD *)unint64_t v80 = v53;
      *(_WORD *)&v80[4] = 2050;
      *(double *)unint64_t v81 = v39;
      *(_WORD *)&v81[8] = 2050;
      double v82 = v38;
      __int16 v83 = 1026;
      int v84 = v54;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#gnssawd,Cellular-AWD,PeriodicLogging,MostRecentValue,BandInfo,%{public}d,RAT,%{public}d,age,%{public}u,transmissionFrequency,%{public}f,BW,%{public}f,age,%{public}u,RSRP,%{public}f,SNR,%{public}f,age,%{public}u", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v58 = *(_DWORD *)(a1 + 2516);
      int v59 = *(_DWORD *)(a1 + 2520);
      if (v44 >= 0x15180) {
        int v60 = 86400;
      }
      else {
        int v60 = v44;
      }
      double v61 = *(float *)(a1 + 2524);
      double v62 = *(float *)(a1 + 2528);
      if (v45 >= 0x15180) {
        int v63 = 86400;
      }
      else {
        int v63 = v45;
      }
      if (v46 >= 0x15180) {
        int v64 = 86400;
      }
      else {
        int v64 = v46;
      }
      int v66 = 67242240;
      *(_DWORD *)int v67 = v58;
      *(_WORD *)&v67[4] = 1026;
      *(_DWORD *)&v67[6] = v59;
      LOWORD(v68) = 1026;
      *(_DWORD *)((char *)&v68 + 2) = v60;
      HIWORD(v68) = 2050;
      *(double *)double v69 = v61;
      *(_WORD *)&v69[8] = 2050;
      *(double *)__int16 v70 = v62;
      *(_WORD *)&v70[8] = 1026;
      *(_DWORD *)double v71 = v63;
      *(_WORD *)&v71[4] = 2050;
      *(double *)__int16 v72 = v39;
      *(_WORD *)&v72[8] = 2050;
      double v73 = v38;
      __int16 v74 = 1026;
      int v75 = v64;
      int v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::tickGnssSessionReport(GNSS::GnssSessionData &)", "%s\n", v65);
      if (v65 != buf) {
        free(v65);
      }
    }
  }
  ++*(_DWORD *)(a1 + 2352);
}

void sub_10188DB80(uint64_t a1)
{
  sub_1000C7F88(buf);
  LOBYTE(v29[0]) = 0;
  int v2 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v29);
  if (LOBYTE(v29[0])) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v33) {
    sub_1000DB0A0(v33);
  }
  if (v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,updateCellularNetworkStatistics", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      LOWORD(v29[0]) = 0;
      BOOL v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  int v5 = *(_DWORD *)(a1 + 2516);
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 2544);
    if (v6)
    {
      if (v5 == v6)
      {
        sub_1000C7F88(buf);
        LOBYTE(v29[0]) = 0;
        int v7 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v29);
        if (LOBYTE(v29[0])) {
          int v8 = v7;
        }
        else {
          int v8 = 0;
        }
        if (v33) {
          sub_1000DB0A0(v33);
        }
        if (v8)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          unsigned int v9 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Epoch with same band as previous", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            LOWORD(v29[0]) = 0;
            double v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v24);
            if (v24 != (char *)buf) {
              free(v24);
            }
          }
        }
        int v10 = *(_DWORD *)(a1 + 2560) + 1;
        goto LABEL_68;
      }
      sub_1000C7F88(buf);
      LOBYTE(v29[0]) = 0;
      int v15 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v29);
      if (LOBYTE(v29[0])) {
        int v16 = v15;
      }
      else {
        int v16 = 0;
      }
      if (v33) {
        sub_1000DB0A0(v33);
      }
      if (v16)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        unint64_t v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v18 = *(_DWORD *)(a1 + 2560);
          int v19 = *(_DWORD *)(a1 + 2496);
          *(_DWORD *)uint64_t buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v18;
          LOWORD(v33) = 1024;
          *(_DWORD *)((char *)&v33 + 2) = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Epoch with band change,EpochCountForCurrentTransmissionFrequencyBand,%d,fEpochCountForLastLongestCampedCellularBand,%d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          int v25 = *(_DWORD *)(a1 + 2560);
          int v26 = *(_DWORD *)(a1 + 2496);
          v29[0] = 67109376;
          v29[1] = v25;
          __int16 v30 = 1024;
          int v31 = v26;
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
      }
      if (*(_DWORD *)(a1 + 2560) >= *(_DWORD *)(a1 + 2496))
      {
        sub_1000C7F88(buf);
        LOBYTE(v29[0]) = 0;
        int v20 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v29);
        if (LOBYTE(v29[0])) {
          int v21 = v20;
        }
        else {
          int v21 = 0;
        }
        if (v33) {
          sub_1000DB0A0(v33);
        }
        if (v21)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          unint64_t v22 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Epoch with longest camped in a GNSS session", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            LOWORD(v29[0]) = 0;
            unsigned int v28 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v28);
            if (v28 != (char *)buf) {
              free(v28);
            }
          }
        }
        sub_10188C758(a1);
        *(unsigned char *)(a1 + 2540) = 1;
      }
      *(void *)(a1 + 2576) = *(void *)(a1 + 2568);
      *(void *)(a1 + 2600) = *(void *)(a1 + 2592);
    }
    else
    {
      sub_1000C7F88(buf);
      LOBYTE(v29[0]) = 0;
      int v11 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v29);
      if (LOBYTE(v29[0])) {
        int v12 = v11;
      }
      else {
        int v12 = 0;
      }
      if (v33) {
        sub_1000DB0A0(v33);
      }
      if (v12)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,First Epoch", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          LOWORD(v29[0]) = 0;
          int v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
      }
    }
    int v10 = 1;
LABEL_68:
    *(_DWORD *)(a1 + 2560) = v10;
    sub_101892154(a1);
  }
}

void sub_10188E3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10188E3E8(uint64_t a1)
{
  uint64_t v1 = a1 + 1288;
  int v2 = (unsigned __int8 *)(a1 + 1320);
  uint64_t v3 = *(void *)(a1 + 1296);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 1320);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 1296;
  do
  {
    unsigned int v6 = *(unsigned __int8 *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      int v8 = (uint64_t *)v3;
    }
    else {
      int v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 1296 || v4 < *(unsigned __int8 *)(v5 + 32))
  {
LABEL_12:
    v10[0] = *(unsigned char *)(a1 + 1320);
    uint64_t v11 = 0;
    sub_10189761C((uint64_t **)(a1 + 1288), v10, (uint64_t)v10);
  }
  uint64_t result = sub_101892958(v1, v2);
  ++*result;
  return result;
}

void sub_10188E488(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, double *a6, double *a7)
{
  uint64_t v10 = *(void *)(a2 + 144) + 1;
  *(void *)(a2 + 144) = v10;
  *(void *)(a2 + 112) = *a3;
  *(void *)(a2 + 120) = *a4;
  *(void *)(a2 + 128) = *a5;
  *(double *)(a2 + 136) = *a6;
  *(double *)(a1 + 1312) = (*a6 + *(double *)(a1 + 1312) * (double)((int)v10 - 1)) / (double)(int)v10;
  uint64_t v11 = (uint64_t **)(a2 + 152);
  int v14 = sub_10188E5A4(a1, a6);
  int v15 = &v14;
  int v12 = sub_1000FEE0C(v11, &v14, (uint64_t)&unk_101D0B290, &v15);
  void v12[5] = (uint64_t *)((char *)v12[5] + 1);
  int v14 = sub_10188E5A4((uint64_t)v12, a7);
  int v15 = &v14;
  uint64_t v13 = sub_1000FEE0C((uint64_t **)(a2 + 176), &v14, (uint64_t)&unk_101D0B290, &v15);
  int v13[5] = (uint64_t *)((char *)v13[5] + 1);
  sub_10188D31C(a1, a2);
  *(unsigned char *)(a1 + 2368) = 1;
}

uint64_t sub_10188E5A4(uint64_t a1, double *a2)
{
  uint64_t result = 0;
  double v3 = *a2;
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 >= 0.0)
  {
    if (v3 >= 5.0)
    {
      if (v3 >= 10.0)
      {
        if (v3 >= 15.0)
        {
          if (v3 >= 20.0)
          {
            if (v3 >= 30.0)
            {
              if (v3 >= 40.0)
              {
                if (v3 >= 50.0)
                {
                  if (v3 >= 100.0)
                  {
                    if (v3 >= 200.0)
                    {
                      if (v3 >= 400.0)
                      {
                        if (v3 >= 1000.0) {
                          return 7;
                        }
                        else {
                          return 6;
                        }
                      }
                      else
                      {
                        return 5;
                      }
                    }
                    else
                    {
                      return 4;
                    }
                  }
                  else
                  {
                    return 3;
                  }
                }
                else
                {
                  return 14;
                }
              }
              else
              {
                return 13;
              }
            }
            else
            {
              return 12;
            }
          }
          else
          {
            return 11;
          }
        }
        else
        {
          return 10;
        }
      }
      else
      {
        return 9;
      }
    }
    else
    {
      return 8;
    }
  }
  return result;
}

void sub_10188E6C0(uint64_t a1, const char *a2, int a3, int a4, double *a5)
{
  if (a2[23] >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(const char **)a2;
  }
  uint64_t v11 = sub_1004BC384(v10);
  if ((uint64_t)v11 <= 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0) {
        int v19 = a2;
      }
      else {
        int v19 = *(const char **)a2;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gnssawd file: %s - size less than or equal to zero", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      if (a2[23] >= 0) {
        int v20 = a2;
      }
      else {
        int v20 = *(const char **)a2;
      }
      goto LABEL_39;
    }
  }
  else
  {
    size_t v12 = (size_t)v11;
    if (a2[23] >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(const char **)a2;
    }
    int v14 = fopen(v13, "rb");
    if (v14)
    {
      int v15 = v14;
      sub_1018970FC(__ptr, v12);
      size_t v16 = fread(__ptr[0], 1uLL, v12, v15);
      if (v16 == v12)
      {
        fclose(v15);
        memset(md, 0, sizeof(md));
        if (CC_SHA256(__ptr[0], v12, md))
        {
          if (a5)
          {
            unsigned int v17 = *a5;
            LOBYTE(a5) = 1;
          }
          else
          {
            *(void *)uint64_t buf = 0;
            if (a2[23] >= 0) {
              __int16 v30 = a2;
            }
            else {
              __int16 v30 = *(const char **)a2;
            }
            if (sub_1004BE590(v30, (double *)buf))
            {
              double v31 = CFAbsoluteTimeGetCurrent() - *(double *)buf;
              BOOL v32 = (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFLL) == 0;
              if ((unint64_t)(*(void *)&v31 - 1) < 0xFFFFFFFFFFFFFLL) {
                BOOL v32 = 1;
              }
              LODWORD(a5) = ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v31 >= 0.0
                         || v32;
              if (a5) {
                unsigned int v17 = v31;
              }
              else {
                unsigned int v17 = 0;
              }
            }
            else
            {
              unsigned int v17 = 0;
              LOBYTE(a5) = 0;
            }
          }
          switch(a4)
          {
            case 1:
              *(unsigned char *)(a1 + 1112) = (_BYTE)a5;
              *(_DWORD *)(a1 + 1116) = v17;
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              uint64_t v34 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
              {
                int v35 = *(_DWORD *)(a1 + 1116);
                *(_DWORD *)uint64_t buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v35;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#gnssca,Short Term Orbit Assistance File Age,%u", buf, 8u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102343F68);
                }
                int v36 = *(_DWORD *)(a1 + 1116);
                int v58 = 67109120;
                LODWORD(v59) = v36;
                int v37 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v37);
                goto LABEL_104;
              }
              break;
            case 2:
              *(unsigned char *)(a1 + 848) = (_BYTE)a5;
              *(void *)(a1 + 952) = v17;
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              int v43 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v44 = *(void *)(a1 + 952);
                *(_DWORD *)uint64_t buf = 134217984;
                *(void *)&uint8_t buf[4] = v44;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#gnssawd,orbit file age,%llu", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102343F68);
                }
                uint64_t v53 = *(void *)(a1 + 952);
                int v58 = 134217984;
                uint64_t v59 = v53;
                int v54 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v54);
                if (v54 != buf) {
                  free(v54);
                }
              }
              *(unsigned char *)(a1 + 1113) = (_BYTE)a5;
              *(_DWORD *)(a1 + 1120) = v17;
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              unsigned int v45 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
              {
                int v46 = *(_DWORD *)(a1 + 1120);
                *(_DWORD *)uint64_t buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v46;
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#gnssca,Long Term Orbit Assistance file age,%u", buf, 8u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102343F68);
                }
                int v55 = *(_DWORD *)(a1 + 1120);
                int v58 = 67109120;
                LODWORD(v59) = v55;
                uint64_t v56 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v56);
                if (v56 != buf) {
                  free(v56);
                }
              }
              sub_10188F598((void *)(a1 + 856), md);
              *(_DWORD *)(a1 + 1060) = a3;
              *(unsigned char *)(a1 + 1056) = 1;
              break;
            case 3:
              *(unsigned char *)(a1 + 849) = (_BYTE)a5;
              *(void *)(a1 + 960) = v17;
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              double v38 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v39 = *(void *)(a1 + 960);
                *(_DWORD *)uint64_t buf = 134217984;
                *(void *)&uint8_t buf[4] = v39;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#gnssca,rti file age,%llu", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102343F68);
                }
                uint64_t v51 = *(void *)(a1 + 960);
                int v58 = 134217984;
                uint64_t v59 = v51;
                double v52 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v52);
                if (v52 != buf) {
                  free(v52);
                }
              }
              sub_10188F598((void *)(a1 + 904), md);
              break;
            case 4:
              *(unsigned char *)(a1 + 1114) = (_BYTE)a5;
              *(_DWORD *)(a1 + 1124) = v17;
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              BOOL v40 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
              {
                int v41 = *(_DWORD *)(a1 + 1124);
                *(_DWORD *)uint64_t buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v41;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#gnssca,Raven GNSS Assistance File Age,%u", buf, 8u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102343F68);
                }
                int v42 = *(_DWORD *)(a1 + 1124);
                int v58 = 67109120;
                LODWORD(v59) = v42;
                int v37 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v37);
LABEL_104:
                if (v37 != buf) {
                  free(v37);
                }
              }
              break;
            default:
              break;
          }
          unint64_t v47 = *(void *)(a1 + 896);
          if (v47 >= 6)
          {
            uint64_t v48 = *(void *)(a1 + 888);
            *(void *)(a1 + 896) = v47 - 1;
            *(void *)(a1 + 888) = v48 + 1;
            sub_1002D0514(a1 + 856, 1);
          }
          unint64_t v49 = *(void *)(a1 + 944);
          if (v49 >= 6)
          {
            uint64_t v50 = *(void *)(a1 + 936);
            *(void *)(a1 + 944) = v49 - 1;
            *(void *)(a1 + 936) = v50 + 1;
            sub_1002D0514(a1 + 904, 1);
          }
LABEL_121:
          if (__ptr[0])
          {
            __ptr[1] = __ptr[0];
            operator delete(__ptr[0]);
          }
          return;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        double v29 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#gnssawd failed to compute SHA256 checksum", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_121;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        LOWORD(v58) = 0;
        unsigned int v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v28);
      }
      else
      {
        size_t v24 = v16;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        int v25 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          if (a2[23] >= 0) {
            int v26 = a2;
          }
          else {
            int v26 = *(const char **)a2;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v26;
          __int16 v62 = 2048;
          size_t v63 = v24;
          __int16 v64 = 2048;
          size_t v65 = v12;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#gnssawd file: %s - read %lu bytes but filesize is %lu bytes", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_121;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        if (a2[23] >= 0) {
          uint64_t v27 = a2;
        }
        else {
          uint64_t v27 = *(const char **)a2;
        }
        *(_DWORD *)md = 136315650;
        *(void *)&md[4] = v27;
        *(_WORD *)&md[12] = 2048;
        *(void *)&md[14] = v24;
        *(_WORD *)&md[22] = 2048;
        *(void *)&md[24] = v12;
        unsigned int v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v28);
      }
      if (v28 != buf) {
        free(v28);
      }
      goto LABEL_121;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0) {
        unint64_t v22 = a2;
      }
      else {
        unint64_t v22 = *(const char **)a2;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#gnssawd file: %s - failed to open", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      if (a2[23] >= 0) {
        int v20 = a2;
      }
      else {
        int v20 = *(const char **)a2;
      }
LABEL_39:
      *(_DWORD *)md = 136315138;
      *(void *)&md[4] = v20;
      BOOL v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v23);
      if (v23 != buf) {
        free(v23);
      }
    }
  }
}

void sub_10188F538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10188F598(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101897170(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  int v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  long long v9 = a2[1];
  *int v8 = *a2;
  v8[1] = v9;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  int v14 = (void *)(v13 + 8 * (v12 >> 7));
  uint64_t v15 = *v14 + 32 * (v12 & 0x7F);
  if (a1[2] == v13) {
    uint64_t v15 = 0;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4096;
  }
  return v15 - 32;
}

void sub_10188F660(uint64_t a1, uint64_t a2)
{
  v26[0] = 0;
  v26[1] = 0;
  int v25 = (uint64_t *)v26;
  int v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    while (2)
    {
      int v3 = *((_DWORD *)v2 + 4);
      switch(v3)
      {
        case 1:
          int v23 = 0;
          goto LABEL_10;
        case 2:
          int v4 = 4;
          goto LABEL_9;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_31;
        case 4:
          int v4 = 3;
          goto LABEL_9;
        case 8:
          int v4 = 2;
LABEL_9:
          int v23 = v4;
          goto LABEL_10;
        default:
          if (v3 != 16) {
            goto LABEL_31;
          }
          int v23 = 1;
LABEL_10:
          char v24 = 1;
          uint64_t v27 = &v23;
          uint64_t v5 = sub_1000EAEE4(&v25, &v23, (uint64_t)&unk_101D0B290, &v27);
          uint64_t v6 = (float *)v2[5];
          if (v6)
          {
            unint64_t v7 = v5;
            int v8 = (void **)(v5 + 5);
            uint64_t v9 = (uint64_t)(v5 + 7);
            do
            {
              float v10 = v6[6];
              if (v10 > 0.0)
              {
                unint64_t v12 = (float *)v7[6];
                unint64_t v11 = (unint64_t)v7[7];
                if ((unint64_t)v12 >= v11)
                {
                  int v14 = (float *)*v8;
                  uint64_t v15 = ((char *)v12 - (unsigned char *)*v8) >> 2;
                  unint64_t v16 = v15 + 1;
                  if ((unint64_t)(v15 + 1) >> 62) {
                    sub_1001D7FD4();
                  }
                  uint64_t v17 = v11 - (void)v14;
                  if (v17 >> 1 > v16) {
                    unint64_t v16 = v17 >> 1;
                  }
                  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v18 = v16;
                  }
                  if (v18)
                  {
                    int v19 = (char *)sub_10017EA34(v9, v18);
                    int v14 = (float *)v7[5];
                    unint64_t v12 = (float *)v7[6];
                    float v10 = v6[6];
                  }
                  else
                  {
                    int v19 = 0;
                  }
                  int v20 = (float *)&v19[4 * v15];
                  *int v20 = v10;
                  uint64_t v13 = v20 + 1;
                  while (v12 != v14)
                  {
                    int v21 = *((_DWORD *)v12-- - 1);
                    *((_DWORD *)v20-- - 1) = v21;
                  }
                  void v7[5] = (uint64_t *)v20;
                  void v7[6] = (uint64_t *)v13;
                  v7[7] = (uint64_t *)&v19[4 * v18];
                  if (v14) {
                    operator delete(v14);
                  }
                }
                else
                {
                  *unint64_t v12 = v10;
                  uint64_t v13 = v12 + 1;
                }
                void v7[6] = (uint64_t *)v13;
              }
              uint64_t v6 = *(float **)v6;
            }
            while (v6);
          }
LABEL_31:
          int v2 = (uint64_t *)*v2;
          if (!v2) {
            break;
          }
          continue;
      }
      break;
    }
  }
  sub_10188F890(a1, &v25);
  sub_1006FE1A8((uint64_t)&v25, v26[0]);
}

void sub_10188F84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void sub_10188F890(uint64_t a1, uint64_t **a2)
{
  v200[0] = 0;
  v200[1] = 0;
  int32x4_t v199 = (uint64_t *)v200;
  int v3 = a2 + 1;
  int v2 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    do
    {
      int v4 = (float *)v2[5];
      uint64_t v5 = (float *)v2[6];
      unint64_t v6 = 126 - 2 * __clz(v5 - v4);
      if (v5 == v4) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v6;
      }
      sub_10032326C(v4, v5, (uint64_t)buf, v7, 1);
      int v8 = sub_101890BC4(&v199, (int *)v2 + 8);
      uint64_t v9 = (int *)v2[5];
      unint64_t v10 = (v2[6] - (uint64_t)v9) >> 2;
      *int v8 = (uint64_t *)v10;
      if (v10 >= 5) {
        unint64_t v10 = 5;
      }
      if (v10)
      {
        unint64_t v11 = v8 + 1;
        do
        {
          int v12 = *v9++;
          *v11++ = v12;
          --v10;
        }
        while (v10);
      }
      uint64_t v13 = (uint64_t *)v2[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (uint64_t *)v2[2];
          BOOL v15 = *v14 == (void)v2;
          int v2 = v14;
        }
        while (!v15);
      }
      int v2 = v14;
    }
    while (v14 != (uint64_t *)v3);
  }
  *(_DWORD *)uint64_t buf = 0;
  unint64_t v16 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 1;
  int v196 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 4;
  unint64_t v195 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 2;
  uint64_t v194 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 3;
  uint64_t v17 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 5;
  unint64_t v18 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 6;
  int v19 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 7;
  int v20 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 8;
  int v21 = sub_101890BC4(&v199, (int *)buf);
  *(_DWORD *)uint64_t buf = 9;
  unint64_t v22 = sub_101890BC4(&v199, (int *)buf);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  int v23 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    char v24 = *v16;
    float v25 = *((float *)v16 + 3);
    double v26 = *((float *)v16 + 2);
    float v192 = *((float *)v16 + 4);
    float v188 = *((float *)v16 + 5);
    uint64_t v27 = *v196;
    float v180 = *((float *)v196 + 3);
    float v168 = *((float *)v196 + 4);
    float v170 = *((float *)v196 + 2);
    unsigned int v28 = *v195;
    float v29 = *((float *)v195 + 2);
    float v30 = *((float *)v195 + 3);
    float v31 = *((float *)v195 + 4);
    float v32 = *((float *)v195 + 5);
    uint64_t v33 = *v194;
    float v34 = *((float *)v194 + 2);
    float v35 = *((float *)v194 + 3);
    float v36 = *((float *)v194 + 4);
    float v37 = *((float *)v194 + 5);
    double v38 = *v17;
    float v39 = *((float *)v17 + 2);
    float v164 = *((float *)v17 + 3);
    float v166 = *((float *)v196 + 5);
    float v160 = *((float *)v17 + 5);
    float v162 = *((float *)v17 + 4);
    BOOL v40 = *v18;
    float v41 = *((float *)v18 + 2);
    float v176 = *((float *)v18 + 4);
    float v178 = *((float *)v18 + 3);
    int v42 = *v19;
    float v43 = *((float *)v19 + 2);
    float v184 = *((float *)v19 + 4);
    float v186 = *((float *)v19 + 3);
    float v182 = *((float *)v19 + 5);
    uint64_t v44 = *v20;
    float v172 = *((float *)v20 + 2);
    float v174 = *((float *)v18 + 5);
    float v45 = *((float *)v20 + 4);
    float v190 = *((float *)v20 + 3);
    int v46 = *v21;
    unint64_t v47 = *v22;
    *(_DWORD *)uint64_t buf = 134364160;
    float v49 = *((float *)v20 + 5);
    float v48 = *((float *)v20 + 6);
    float v50 = *((float *)v21 + 2);
    float v51 = *((float *)v21 + 3);
    float v52 = *((float *)v21 + 4);
    float v53 = *((float *)v21 + 5);
    float v54 = *((float *)v22 + 2);
    float v55 = *((float *)v22 + 3);
    float v57 = *((float *)v22 + 4);
    float v56 = *((float *)v22 + 5);
    *(double *)&unsigned char buf[14] = v26;
    double v58 = v25;
    float v59 = *((float *)v16 + 6);
    float v60 = *((float *)v196 + 6);
    float v61 = *((float *)v195 + 6);
    float v62 = *((float *)v194 + 6);
    float v63 = *((float *)v17 + 6);
    float v64 = *((float *)v18 + 6);
    float v65 = *((float *)v19 + 6);
    LODWORD(v26) = *((_DWORD *)v21 + 6);
    float v66 = *((float *)v22 + 6);
    double v323 = v58;
    double v325 = v192;
    double v327 = v188;
    double v329 = v59;
    double v333 = v170;
    double v335 = v180;
    double v337 = v168;
    double v339 = v166;
    double v341 = v60;
    double v345 = v29;
    double v347 = v30;
    double v349 = v31;
    double v351 = v32;
    double v353 = v61;
    double v357 = v34;
    double v359 = v35;
    double v361 = v36;
    double v363 = v37;
    double v365 = v62;
    double v369 = v39;
    double v371 = v164;
    double v373 = v162;
    double v375 = v160;
    double v377 = v63;
    double v381 = v41;
    double v383 = v178;
    double v385 = v176;
    double v387 = v174;
    double v389 = v64;
    double v393 = v43;
    double v395 = v186;
    double v397 = v184;
    double v399 = v182;
    double v401 = v65;
    double v405 = v172;
    double v407 = v190;
    double v409 = v45;
    double v411 = v49;
    double v413 = v48;
    double v417 = v50;
    double v419 = v51;
    double v421 = v52;
    double v423 = v53;
    double v425 = *(float *)&v26;
    double v429 = v54;
    double v431 = v55;
    double v433 = v57;
    double v435 = v56;
    double v437 = v66;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 2050;
    __int16 v322 = 2050;
    __int16 v324 = 2050;
    __int16 v326 = 2050;
    __int16 v328 = 2050;
    __int16 v330 = 2050;
    v331 = v27;
    __int16 v332 = 2050;
    __int16 v334 = 2050;
    __int16 v336 = 2050;
    __int16 v338 = 2050;
    __int16 v340 = 2050;
    __int16 v342 = 2050;
    v343 = v28;
    __int16 v344 = 2050;
    __int16 v346 = 2050;
    __int16 v348 = 2050;
    __int16 v350 = 2050;
    __int16 v352 = 2050;
    __int16 v354 = 2050;
    v355 = v33;
    __int16 v356 = 2050;
    __int16 v358 = 2050;
    __int16 v360 = 2050;
    __int16 v362 = 2050;
    __int16 v364 = 2050;
    __int16 v366 = 2050;
    v367 = v38;
    __int16 v368 = 2050;
    __int16 v370 = 2050;
    __int16 v372 = 2050;
    __int16 v374 = 2050;
    __int16 v376 = 2050;
    __int16 v378 = 2050;
    v379 = v40;
    __int16 v380 = 2050;
    __int16 v382 = 2050;
    __int16 v384 = 2050;
    __int16 v386 = 2050;
    __int16 v388 = 2050;
    __int16 v390 = 2050;
    v391 = v42;
    __int16 v392 = 2050;
    __int16 v394 = 2050;
    __int16 v396 = 2050;
    __int16 v398 = 2050;
    __int16 v400 = 2050;
    __int16 v402 = 2050;
    v403 = v44;
    __int16 v404 = 2050;
    __int16 v406 = 2050;
    __int16 v408 = 2050;
    __int16 v410 = 2050;
    __int16 v412 = 2050;
    __int16 v414 = 2050;
    v415 = v46;
    __int16 v416 = 2050;
    __int16 v418 = 2050;
    __int16 v420 = 2050;
    __int16 v422 = 2050;
    __int16 v424 = 2050;
    __int16 v426 = 2050;
    v427 = v47;
    __int16 v428 = 2050;
    __int16 v430 = 2050;
    __int16 v432 = 2050;
    __int16 v434 = 2050;
    __int16 v436 = 2050;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#track_status,L1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,Q1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,G1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,E1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,B1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,L5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,Q5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,E5a,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,B2a,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,NL5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f", buf, 0x25Au);
  }
  uint64_t v67 = a1;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    unint64_t v116 = *v16;
    float v117 = *((float *)v16 + 3);
    double v118 = *((float *)v16 + 2);
    float v193 = *((float *)v16 + 4);
    float v189 = *((float *)v16 + 5);
    uint64_t v119 = *v196;
    float v181 = *((float *)v196 + 3);
    float v169 = *((float *)v196 + 4);
    float v171 = *((float *)v196 + 2);
    int v120 = *v195;
    float v121 = *((float *)v195 + 2);
    float v122 = *((float *)v195 + 3);
    float v123 = *((float *)v195 + 4);
    float v124 = *((float *)v195 + 5);
    uint64_t v125 = *v194;
    float v126 = *((float *)v194 + 2);
    float v127 = *((float *)v194 + 3);
    float v128 = *((float *)v194 + 4);
    float v129 = *((float *)v194 + 5);
    unint64_t v130 = *v17;
    float v131 = *((float *)v17 + 2);
    float v165 = *((float *)v17 + 3);
    float v167 = *((float *)v196 + 5);
    float v161 = *((float *)v17 + 5);
    float v163 = *((float *)v17 + 4);
    int v132 = *v18;
    float v133 = *((float *)v18 + 2);
    float v177 = *((float *)v18 + 4);
    float v179 = *((float *)v18 + 3);
    uint64_t v134 = *v19;
    float v135 = *((float *)v19 + 2);
    float v185 = *((float *)v19 + 4);
    float v187 = *((float *)v19 + 3);
    float v183 = *((float *)v19 + 5);
    uint64_t v136 = *v20;
    float v173 = *((float *)v20 + 2);
    float v175 = *((float *)v18 + 5);
    float v137 = *((float *)v20 + 4);
    float v191 = *((float *)v20 + 3);
    uint64_t v138 = *v21;
    unint64_t v139 = *v22;
    int v201 = 134364160;
    float v141 = *((float *)v20 + 5);
    float v140 = *((float *)v20 + 6);
    float v142 = *((float *)v21 + 2);
    float v143 = *((float *)v21 + 3);
    float v144 = *((float *)v21 + 4);
    float v145 = *((float *)v21 + 5);
    float v146 = *((float *)v22 + 2);
    float v147 = *((float *)v22 + 3);
    float v149 = *((float *)v22 + 4);
    float v148 = *((float *)v22 + 5);
    double v204 = v118;
    double v150 = v117;
    float v151 = *((float *)v16 + 6);
    float v152 = *((float *)v196 + 6);
    float v153 = *((float *)v195 + 6);
    float v154 = *((float *)v194 + 6);
    float v155 = *((float *)v17 + 6);
    float v156 = *((float *)v18 + 6);
    float v157 = *((float *)v19 + 6);
    LODWORD(v118) = *((_DWORD *)v21 + 6);
    float v158 = *((float *)v22 + 6);
    double v206 = v150;
    double v208 = v193;
    double v210 = v189;
    double v212 = v151;
    double v216 = v171;
    double v218 = v181;
    double v220 = v169;
    double v222 = v167;
    double v224 = v152;
    double v228 = v121;
    double v230 = v122;
    double v232 = v123;
    double v234 = v124;
    double v236 = v153;
    double v240 = v126;
    double v242 = v127;
    double v244 = v128;
    double v246 = v129;
    double v248 = v154;
    double v252 = v131;
    double v254 = v165;
    double v256 = v163;
    double v258 = v161;
    double v260 = v155;
    double v264 = v133;
    double v266 = v179;
    double v268 = v177;
    double v270 = v175;
    double v272 = v156;
    double v276 = v135;
    double v278 = v187;
    double v280 = v185;
    double v282 = v183;
    double v284 = v157;
    double v288 = v173;
    double v290 = v191;
    double v292 = v137;
    double v294 = v141;
    double v296 = v140;
    double v300 = v142;
    double v302 = v143;
    double v304 = v144;
    double v306 = v145;
    double v308 = *(float *)&v118;
    double v312 = v146;
    double v314 = v147;
    double v316 = v149;
    double v318 = v148;
    double v320 = v158;
    long long v202 = v116;
    __int16 v203 = 2050;
    __int16 v205 = 2050;
    __int16 v207 = 2050;
    __int16 v209 = 2050;
    __int16 v211 = 2050;
    __int16 v213 = 2050;
    uint64_t v214 = v119;
    __int16 v215 = 2050;
    __int16 v217 = 2050;
    __int16 v219 = 2050;
    __int16 v221 = 2050;
    __int16 v223 = 2050;
    __int16 v225 = 2050;
    unint64_t v226 = v120;
    __int16 v227 = 2050;
    __int16 v229 = 2050;
    __int16 v231 = 2050;
    __int16 v233 = 2050;
    __int16 v235 = 2050;
    __int16 v237 = 2050;
    int v238 = v125;
    __int16 v239 = 2050;
    __int16 v241 = 2050;
    __int16 v243 = 2050;
    __int16 v245 = 2050;
    __int16 v247 = 2050;
    __int16 v249 = 2050;
    int v250 = v130;
    __int16 v251 = 2050;
    __int16 v253 = 2050;
    __int16 v255 = 2050;
    __int16 v257 = 2050;
    __int16 v259 = 2050;
    __int16 v261 = 2050;
    double v262 = v132;
    __int16 v263 = 2050;
    __int16 v265 = 2050;
    __int16 v267 = 2050;
    __int16 v269 = 2050;
    __int16 v271 = 2050;
    __int16 v273 = 2050;
    double v274 = v134;
    __int16 v275 = 2050;
    __int16 v277 = 2050;
    __int16 v279 = 2050;
    __int16 v281 = 2050;
    __int16 v283 = 2050;
    __int16 v285 = 2050;
    __int16 v286 = v136;
    __int16 v287 = 2050;
    __int16 v289 = 2050;
    __int16 v291 = 2050;
    __int16 v293 = 2050;
    __int16 v295 = 2050;
    __int16 v297 = 2050;
    long long v298 = v138;
    __int16 v299 = 2050;
    __int16 v301 = 2050;
    __int16 v303 = 2050;
    __int16 v305 = 2050;
    __int16 v307 = 2050;
    __int16 v309 = 2050;
    __int16 v310 = v139;
    __int16 v311 = 2050;
    __int16 v313 = 2050;
    __int16 v315 = 2050;
    __int16 v317 = 2050;
    __int16 v319 = 2050;
    uint64_t v159 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::updateCn0AndSignalCountSessionStats(MapSignalTypeToCn0Vector &)", "%s\n", v159);
    uint64_t v67 = a1;
    if (v159 != buf) {
      free(v159);
    }
  }
  if (*(unsigned char *)(v67 + 2368))
  {
    for (uint64_t i = 0; i != 40; i += 4)
    {
      *(void *)uint64_t buf = (char *)&unk_101E44C68 + i;
      double v69 = sub_101897488((uint64_t **)(v67 + 312), (int *)((char *)&unk_101E44C68 + i), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      *(void *)uint64_t buf = (char *)&unk_101E44C68 + i;
      __int16 v70 = sub_1000EAEE4(a2, (int *)((char *)&unk_101E44C68 + i), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      unint64_t v71 = (char *)v70[6] - (char *)v70[5];
      if (v71 < 0x34) {
        int v72 = 6;
      }
      else {
        int v72 = 7;
      }
      if (v71 < 0x24) {
        int v72 = 5;
      }
      if (v71 >= 0x14) {
        int v73 = v72;
      }
      else {
        int v73 = v71 >> 2;
      }
      int v201 = v73;
      *(void *)uint64_t buf = &v201;
      __int16 v74 = sub_1000FEE0C(v69 + 5, &v201, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      v74[5] = (uint64_t *)((char *)v74[5] + 1);
    }
    int v75 = (int *)&unk_101E44C68;
    do
    {
      *(void *)uint64_t buf = v75;
      __int16 v76 = sub_101897488((uint64_t **)(a1 + 336), v75, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      uint64_t v77 = sub_101890BC4(&v199, v75);
      __int16 v78 = v77;
      int v79 = v76 + 5;
      for (uint64_t j = 8; j != 28; j += 4)
      {
        if (*(float *)((char *)v78 + j) > 0.0)
        {
          int v201 = sub_101890C78((uint64_t)v77, (float *)((char *)v78 + j));
          *(void *)uint64_t buf = &v201;
          uint64_t v77 = sub_1000FEE0C(v79, &v201, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          v77[5] = (uint64_t *)((char *)v77[5] + 1);
        }
      }
      ++v75;
    }
    while (v75 != (int *)&xmmword_101E44C90);
    unint64_t v81 = *a2;
    if (*a2 != (uint64_t *)v3)
    {
      double v82 = (uint64_t **)(a1 + 1216);
      __int16 v83 = (uint64_t *)(a1 + 1224);
      int v84 = (uint64_t **)(a1 + 1264);
      do
      {
        int v85 = *((_DWORD *)v81 + 8);
        uint64_t v86 = *v83;
        if (!*v83) {
          goto LABEL_50;
        }
        uint64_t v87 = a1 + 1224;
        do
        {
          int v88 = *(_DWORD *)(v86 + 32);
          BOOL v89 = v88 < v85;
          if (v88 >= v85) {
            BOOL v90 = (uint64_t *)v86;
          }
          else {
            BOOL v90 = (uint64_t *)(v86 + 8);
          }
          if (!v89) {
            uint64_t v87 = v86;
          }
          uint64_t v86 = *v90;
        }
        while (*v90);
        if ((uint64_t *)v87 == v83 || v85 < *(_DWORD *)(v87 + 32))
        {
LABEL_50:
          *(_DWORD *)uint64_t buf = *((_DWORD *)v81 + 8);
          *(void *)&uint8_t buf[8] = 0;
          sub_101897558(v82, (int *)buf, (uint64_t)buf);
          *(_DWORD *)uint64_t buf = *((_DWORD *)v81 + 8);
          *(_DWORD *)&uint8_t buf[4] = 0;
          sub_10122865C(v84, (int *)buf, (uint64_t *)buf);
        }
        double v91 = *(double *)sub_1000A43BC((uint64_t)v82, (int *)v81 + 8);
        uint64_t v93 = v81[5];
        uint64_t v92 = v81[6];
        int v94 = *(_DWORD *)sub_100022F78((uint64_t)v84, (int *)v81 + 8);
        *(double *)sub_1000A43BC((uint64_t)v82, (int *)v81 + 8) = ((double)(unint64_t)((v92 - v93) >> 2)
                                                                + v91 * (double)v94)
                                                               / (double)(v94 + 1);
        int v95 = sub_100022F78((uint64_t)v84, (int *)v81 + 8);
        ++*(_DWORD *)v95;
        int v96 = (uint64_t *)v81[1];
        if (v96)
        {
          do
          {
            uint64_t v97 = v96;
            int v96 = (uint64_t *)*v96;
          }
          while (v96);
        }
        else
        {
          do
          {
            uint64_t v97 = (uint64_t *)v81[2];
            BOOL v15 = *v97 == (void)v81;
            unint64_t v81 = v97;
          }
          while (!v15);
        }
        unint64_t v81 = v97;
      }
      while (v97 != (uint64_t *)v3);
    }
    int v98 = v199;
    if (v199 != (uint64_t *)v200)
    {
      BOOL v99 = (uint64_t **)(a1 + 1192);
      __int16 v100 = (uint64_t *)(a1 + 1200);
      uint64_t v101 = (uint64_t **)(a1 + 1240);
      do
      {
        int v102 = *((_DWORD *)v98 + 8);
        uint64_t v103 = *v100;
        if (!*v100) {
          goto LABEL_69;
        }
        uint64_t v104 = a1 + 1200;
        do
        {
          int v105 = *(_DWORD *)(v103 + 32);
          BOOL v106 = v105 < v102;
          if (v105 >= v102) {
            uint64_t v107 = (uint64_t *)v103;
          }
          else {
            uint64_t v107 = (uint64_t *)(v103 + 8);
          }
          if (!v106) {
            uint64_t v104 = v103;
          }
          uint64_t v103 = *v107;
        }
        while (*v107);
        if ((uint64_t *)v104 == v100 || v102 < *(_DWORD *)(v104 + 32))
        {
LABEL_69:
          *(_DWORD *)uint64_t buf = *((_DWORD *)v98 + 8);
          *(void *)&uint8_t buf[8] = 0;
          sub_101897558(v99, (int *)buf, (uint64_t)buf);
          *(_DWORD *)uint64_t buf = *((_DWORD *)v98 + 8);
          *(_DWORD *)&uint8_t buf[4] = 0;
          sub_10122865C(v101, (int *)buf, (uint64_t *)buf);
        }
        if ((unint64_t)v98[5] >= 5) {
          uint64_t v108 = 5;
        }
        else {
          uint64_t v108 = v98[5];
        }
        if (v108)
        {
          uint64_t v109 = (float *)(v98 + 6);
          do
          {
            double v110 = *(double *)sub_1000A43BC((uint64_t)v99, (int *)v98 + 8);
            float v111 = *v109;
            int v112 = *(_DWORD *)sub_100022F78((uint64_t)v101, (int *)v98 + 8);
            *(double *)sub_1000A43BC((uint64_t)v99, (int *)v98 + 8) = (v111 + v110 * (double)v112) / (double)(v112 + 1);
            __int16 v113 = sub_100022F78((uint64_t)v101, (int *)v98 + 8);
            ++*(_DWORD *)v113;
            ++v109;
            --v108;
          }
          while (v108);
        }
        int v114 = (uint64_t *)v98[1];
        if (v114)
        {
          do
          {
            unint64_t v115 = v114;
            int v114 = (uint64_t *)*v114;
          }
          while (v114);
        }
        else
        {
          do
          {
            unint64_t v115 = (uint64_t *)v98[2];
            BOOL v15 = *v115 == (void)v98;
            int v98 = v115;
          }
          while (!v15);
        }
        int v98 = v115;
      }
      while (v115 != (uint64_t *)v200);
    }
  }
  sub_100589514(v200[0]);
}

void sub_10189081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void sub_101890890(_DWORD *a1, uint64_t a2)
{
  v23[0] = 0;
  v23[1] = 0;
  unint64_t v22 = (uint64_t *)v23;
  uint64_t v4 = *(void *)(a2 + 152);
  for (uint64_t i = *(void *)(a2 + 160); v4 != i; v4 += 176)
  {
    if (*(unsigned char *)(v4 + 173))
    {
      unint64_t v21 = sub_10188C6A4(*(unsigned __int8 *)(v4 + 8), *(_DWORD *)v4);
      if ((v21 & 0xFF00000000) != 0)
      {
        char v24 = &v21;
        unint64_t v6 = sub_1000EAEE4(&v22, (int *)&v21, (uint64_t)&unk_101D0B290, (_DWORD **)&v24);
        uint64_t v7 = v6;
        int v8 = (char *)v6[6];
        uint64_t v9 = (uint64_t)(v6 + 7);
        unint64_t v10 = v6[7];
        if (v8 >= (char *)v10)
        {
          int v12 = v6[5];
          uint64_t v13 = (v8 - (char *)v12) >> 2;
          if ((unint64_t)(v13 + 1) >> 62) {
            sub_1001D7FD4();
          }
          unint64_t v14 = (char *)v10 - (char *)v12;
          unint64_t v15 = ((char *)v10 - (char *)v12) >> 1;
          if (v15 <= v13 + 1) {
            unint64_t v15 = v13 + 1;
          }
          if (v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            uint64_t v17 = (char *)sub_10017EA34(v9, v16);
            int v12 = v7[5];
            int v8 = (char *)v7[6];
          }
          else
          {
            uint64_t v17 = 0;
          }
          unint64_t v18 = &v17[4 * v13];
          *(_DWORD *)unint64_t v18 = *(_DWORD *)(v4 + 168);
          unint64_t v11 = (uint64_t *)(v18 + 4);
          while (v8 != (char *)v12)
          {
            int v19 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          void v7[5] = (uint64_t *)v18;
          void v7[6] = v11;
          v7[7] = (uint64_t *)&v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_DWORD *)int v8 = *(_DWORD *)(v4 + 168);
          unint64_t v11 = (uint64_t *)(v8 + 4);
        }
        void v7[6] = v11;
        sub_101890A7C(a1, v4, v21);
      }
    }
  }
  sub_10188F890((uint64_t)a1, &v22);
  if (*(unsigned char *)(a2 + 81)) {
    BOOL v20 = *(unsigned char *)(a2 + 80) == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20) {
    ++a1[601];
  }
  sub_1006FE1A8((uint64_t)&v22, v23[0]);
}

void sub_101890A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

_DWORD *sub_101890A7C(_DWORD *result, uint64_t a2, unsigned int a3)
{
  BOOL v4 = *(double *)(a2 + 104) > 0.0 && (*(void *)(a2 + 96) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (*(unsigned char *)(a2 + 112)) {
    int v5 = 0;
  }
  else {
    int v5 = v4;
  }
  unint64_t v6 = *(void *)(a2 + 120);
  if (v6 != -1)
  {
    unint64_t v7 = *(void *)(a2 + 128);
    BOOL v8 = v7 == -1 || v6 > v7;
    if (!v8 && (*(void *)(a2 + 136) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(a2 + 144) > 0.0)
    {
      if (!*(unsigned char *)(a2 + 152)) {
        int v5 = 1;
      }
      BOOL v4 = 1;
    }
  }
  float v9 = *(float *)(a2 + 168);
  BOOL v11 = v9 < 20.0 || v9 >= 25.0 || a3 > 8;
  int v12 = (1 << a3) & 0x1EC;
  if (v11 || v12 == 0)
  {
    if (v9 < 25.0 || v9 >= 30.0 || a3 > 8 || v12 == 0)
    {
      if (v9 >= 30.0)
      {
        ++result[464];
        if (v5) {
          ++result[470];
        }
        if (v4)
        {
          uint64_t v17 = result + 469;
LABEL_55:
          ++*v17;
        }
      }
    }
    else
    {
      ++result[463];
      if (v5) {
        ++result[468];
      }
      if (v4)
      {
        uint64_t v17 = result + 467;
        goto LABEL_55;
      }
    }
  }
  else
  {
    ++result[462];
    if (v5) {
      ++result[466];
    }
    if (v4)
    {
      uint64_t v17 = result + 465;
      goto LABEL_55;
    }
  }
  return result;
}

uint64_t **sub_101890BC4(uint64_t **a1, int *a2)
{
  BOOL v4 = a1 + 1;
  int v3 = a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v6 = (uint64_t **)v3;
        int v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7) {
          break;
        }
        int v3 = *v6;
        BOOL v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= v5) {
        break;
      }
      int v3 = v6[1];
      if (!v3)
      {
        BOOL v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v6 = a1 + 1;
LABEL_9:
    BOOL v8 = (char *)operator new(0x48uLL);
    *((_DWORD *)v8 + 8) = v5;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    sub_1000EDF90(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    unint64_t v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

uint64_t sub_101890C78(uint64_t a1, float *a2)
{
  float v2 = *a2;
  if ((*(_DWORD *)a2 & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  if (v2 < 0.0) {
    return 1;
  }
  if (v2 < 16.0) {
    return 2;
  }
  if (v2 < 20.0) {
    return 3;
  }
  if (v2 < 24.0) {
    return 4;
  }
  if (v2 < 28.0) {
    return 5;
  }
  if (v2 < 32.0) {
    return 6;
  }
  if (v2 < 36.0) {
    return 7;
  }
  if (v2 < 40.0) {
    return 8;
  }
  if (v2 >= 44.0) {
    return 10;
  }
  return 9;
}

uint64_t sub_101890D58(double *a1)
{
  uint64_t result = 0;
  double v3 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 >= 0.0)
  {
    if (v3 >= 5.0)
    {
      if (v3 >= 10.0)
      {
        if (v3 >= 15.0)
        {
          if (v3 >= 20.0)
          {
            if (v3 >= 25.0)
            {
              if (v3 >= 30.0)
              {
                if (v3 >= 35.0)
                {
                  if (v3 >= 40.0)
                  {
                    if (v3 >= 45.0)
                    {
                      if (v3 >= 50.0)
                      {
                        if (v3 >= 55.0)
                        {
                          if (v3 >= 60.0)
                          {
                            if (v3 >= 65.0)
                            {
                              if (v3 >= 70.0)
                              {
                                if (v3 >= 75.0)
                                {
                                  if (v3 >= 80.0)
                                  {
                                    if (v3 >= 85.0)
                                    {
                                      if (v3 >= 90.0)
                                      {
                                        if (v3 >= 95.0)
                                        {
                                          if (v3 >= 100.0)
                                          {
                                            if (v3 >= 110.0)
                                            {
                                              if (v3 >= 120.0)
                                              {
                                                if (v3 >= 130.0)
                                                {
                                                  if (v3 >= 140.0)
                                                  {
                                                    if (v3 >= 150.0)
                                                    {
                                                      if (v3 >= 160.0)
                                                      {
                                                        if (v3 >= 170.0)
                                                        {
                                                          if (v3 >= 180.0)
                                                          {
                                                            if (v3 >= 190.0)
                                                            {
                                                              if (v3 >= 200.0) {
                                                                return 31;
                                                              }
                                                              else {
                                                                return 30;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              return 29;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            return 28;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          return 27;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        return 26;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      return 25;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    return 24;
                                                  }
                                                }
                                                else
                                                {
                                                  return 23;
                                                }
                                              }
                                              else
                                              {
                                                return 22;
                                              }
                                            }
                                            else
                                            {
                                              return 21;
                                            }
                                          }
                                          else
                                          {
                                            return 20;
                                          }
                                        }
                                        else
                                        {
                                          return 19;
                                        }
                                      }
                                      else
                                      {
                                        return 18;
                                      }
                                    }
                                    else
                                    {
                                      return 17;
                                    }
                                  }
                                  else
                                  {
                                    return 16;
                                  }
                                }
                                else
                                {
                                  return 15;
                                }
                              }
                              else
                              {
                                return 14;
                              }
                            }
                            else
                            {
                              return 13;
                            }
                          }
                          else
                          {
                            return 12;
                          }
                        }
                        else
                        {
                          return 11;
                        }
                      }
                      else
                      {
                        return 10;
                      }
                    }
                    else
                    {
                      return 9;
                    }
                  }
                  else
                  {
                    return 8;
                  }
                }
                else
                {
                  return 7;
                }
              }
              else
              {
                return 6;
              }
            }
            else
            {
              return 5;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_10189103C(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  switch(*a3)
  {
    case 6:
      *(unsigned char *)(a1 + 2317) = *((_DWORD *)a4 + 1) != 0;
      *(unsigned char *)(a1 + 2318) = *((_DWORD *)a4 + 1) == 2;
      break;
    case 7:
      int v6 = sub_10060DF30(*((_DWORD *)a4 + 3)) && sub_1001B7CA8() && a4[8] == 0;
      if (*(unsigned __int8 *)(a1 + 2324) != v6)
      {
        ++*(_DWORD *)(a1 + 2328);
        *(unsigned char *)(a1 + 2324) = v6;
      }
      *(_DWORD *)(a1 + 2312) = *((_DWORD *)a4 + 3);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      unint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *(_DWORD *)(a1 + 2312);
        *(_DWORD *)uint64_t buf = 67109120;
        int v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gnssawd,chargerType,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      break;
    case 0xA:
      int v7 = *a4;
      if (*(unsigned __int8 *)(a1 + 2316) != v7)
      {
        *(unsigned char *)(a1 + 2316) = v7;
        sub_10189141C(a1);
      }
      break;
    case 0xD:
      *(_DWORD *)(a1 + 2332) = *(_DWORD *)a4;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      BOOL v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)(a1 + 2332);
        *(_DWORD *)uint64_t buf = 67109120;
        int v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gnssawd,thermalLevel,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
LABEL_30:
        }
          dispatch_once(&qword_1024193D0, &stru_102343F68);
LABEL_28:
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::HandleStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      break;
    case 0xF:
      *(unsigned char *)(a1 + 2319) = *a4;
      break;
    default:
      return;
  }
}

void sub_10189141C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  float v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2316);
    *(_DWORD *)uint64_t buf = 67174657;
    int v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gnssca,handleDisplayEventForCA,fDisplay,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v11 = *(unsigned __int8 *)(a1 + 2316);
    v15[0] = 67174657;
    v15[1] = v11;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleDisplayEventForCA()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (*(unsigned char *)(a1 + 2296)) {
    int v4 = 3;
  }
  else {
    int v4 = 4;
  }
  if (*(unsigned char *)(a1 + 2296)) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  int v14 = v5;
  v15[0] = v4;
  if (sub_10011853C((void *)(a1 + 2208), v15) && sub_10011853C((void *)(a1 + 2208), &v14))
  {
    if (*(unsigned char *)(a1 + 2316))
    {
      int v6 = sub_10011853C((void *)(a1 + 2208), v15);
      if (v6)
      {
        for (uint64_t i = v6[5]; i; uint64_t i = *(void *)i)
        {
          if (sub_101894EC4(a1, v15[0], *(_DWORD *)(i + 16))) {
            sub_101894C38(a1, v14, *(_DWORD *)(i + 16));
          }
        }
        return;
      }
LABEL_42:
      sub_10000EDDC("unordered_map::at: key not found");
    }
    int v9 = sub_10011853C((void *)(a1 + 2208), &v14);
    if (!v9) {
      goto LABEL_42;
    }
    for (uint64_t j = v9[5]; j; uint64_t j = *(void *)j)
    {
      if (sub_101894EC4(a1, v14, *(_DWORD *)(j + 16))) {
        sub_101894C38(a1, v15[0], *(_DWORD *)(j + 16));
      }
    }
  }
  else if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    BOOL v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gnssca,handleDisplayEventForCA,display context unsupported", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleDisplayEventForCA()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}